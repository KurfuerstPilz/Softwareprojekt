
TrustZone-ToggleLED_NonSecure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027d8  080401f8  080401f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080429d0  080429d0  000129d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08042ae8  08042ae8  00018070  2**0
                  CONTENTS
  4 .ARM          00000000  08042ae8  08042ae8  00018070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08042ae8  08042ae8  00018070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08042ae8  08042ae8  00012ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08042af0  08042af0  00012af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20018000  08042af8  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20018070  08042b68  00018070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200180a0  08042b68  000180a0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00018070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007792  00000000  00000000  000180a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015b6  00000000  00000000  0001f838  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006b8  00000000  00000000  00020df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000600  00000000  00000000  000214a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027ce8  00000000  00000000  00021aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000060b3  00000000  00000000  00049790  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f81e2  00000000  00000000  0004f843  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00147a25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002024  00000000  00000000  00147aa0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080401f8 <__do_global_dtors_aux>:
 80401f8:	b510      	push	{r4, lr}
 80401fa:	4c05      	ldr	r4, [pc, #20]	; (8040210 <__do_global_dtors_aux+0x18>)
 80401fc:	7823      	ldrb	r3, [r4, #0]
 80401fe:	b933      	cbnz	r3, 804020e <__do_global_dtors_aux+0x16>
 8040200:	4b04      	ldr	r3, [pc, #16]	; (8040214 <__do_global_dtors_aux+0x1c>)
 8040202:	b113      	cbz	r3, 804020a <__do_global_dtors_aux+0x12>
 8040204:	4804      	ldr	r0, [pc, #16]	; (8040218 <__do_global_dtors_aux+0x20>)
 8040206:	e000      	b.n	804020a <__do_global_dtors_aux+0x12>
 8040208:	bf00      	nop
 804020a:	2301      	movs	r3, #1
 804020c:	7023      	strb	r3, [r4, #0]
 804020e:	bd10      	pop	{r4, pc}
 8040210:	20018070 	.word	0x20018070
 8040214:	00000000 	.word	0x00000000
 8040218:	08042994 	.word	0x08042994

0804021c <frame_dummy>:
 804021c:	b508      	push	{r3, lr}
 804021e:	4b03      	ldr	r3, [pc, #12]	; (804022c <frame_dummy+0x10>)
 8040220:	b11b      	cbz	r3, 804022a <frame_dummy+0xe>
 8040222:	4903      	ldr	r1, [pc, #12]	; (8040230 <frame_dummy+0x14>)
 8040224:	4803      	ldr	r0, [pc, #12]	; (8040234 <frame_dummy+0x18>)
 8040226:	e000      	b.n	804022a <frame_dummy+0xe>
 8040228:	bf00      	nop
 804022a:	bd08      	pop	{r3, pc}
 804022c:	00000000 	.word	0x00000000
 8040230:	20018074 	.word	0x20018074
 8040234:	08042994 	.word	0x08042994

08040238 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8040238:	b480      	push	{r7}
 804023a:	b083      	sub	sp, #12
 804023c:	af00      	add	r7, sp, #0
 804023e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8040240:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8040244:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8040248:	f003 0301 	and.w	r3, r3, #1
 804024c:	2b00      	cmp	r3, #0
 804024e:	d013      	beq.n	8040278 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8040250:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8040254:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8040258:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 804025c:	2b00      	cmp	r3, #0
 804025e:	d00b      	beq.n	8040278 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8040260:	e000      	b.n	8040264 <ITM_SendChar+0x2c>
    {
      __NOP();
 8040262:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8040264:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8040268:	681b      	ldr	r3, [r3, #0]
 804026a:	2b00      	cmp	r3, #0
 804026c:	d0f9      	beq.n	8040262 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 804026e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8040272:	687a      	ldr	r2, [r7, #4]
 8040274:	b2d2      	uxtb	r2, r2
 8040276:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8040278:	687b      	ldr	r3, [r7, #4]
}
 804027a:	4618      	mov	r0, r3
 804027c:	370c      	adds	r7, #12
 804027e:	46bd      	mov	sp, r7
 8040280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040284:	4770      	bx	lr

08040286 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// überschreibt die printf funktion
int _write(int file, char* ptr, int len)
{
 8040286:	b580      	push	{r7, lr}
 8040288:	b086      	sub	sp, #24
 804028a:	af00      	add	r7, sp, #0
 804028c:	60f8      	str	r0, [r7, #12]
 804028e:	60b9      	str	r1, [r7, #8]
 8040290:	607a      	str	r2, [r7, #4]
	int i=0;
 8040292:	2300      	movs	r3, #0
 8040294:	617b      	str	r3, [r7, #20]
	for (i=0;i<len;i++)
 8040296:	2300      	movs	r3, #0
 8040298:	617b      	str	r3, [r7, #20]
 804029a:	e009      	b.n	80402b0 <_write+0x2a>
	{
		ITM_SendChar((*ptr++));
 804029c:	68bb      	ldr	r3, [r7, #8]
 804029e:	1c5a      	adds	r2, r3, #1
 80402a0:	60ba      	str	r2, [r7, #8]
 80402a2:	781b      	ldrb	r3, [r3, #0]
 80402a4:	4618      	mov	r0, r3
 80402a6:	f7ff ffc7 	bl	8040238 <ITM_SendChar>
	for (i=0;i<len;i++)
 80402aa:	697b      	ldr	r3, [r7, #20]
 80402ac:	3301      	adds	r3, #1
 80402ae:	617b      	str	r3, [r7, #20]
 80402b0:	697a      	ldr	r2, [r7, #20]
 80402b2:	687b      	ldr	r3, [r7, #4]
 80402b4:	429a      	cmp	r2, r3
 80402b6:	dbf1      	blt.n	804029c <_write+0x16>
	}
	return len;
 80402b8:	687b      	ldr	r3, [r7, #4]
}
 80402ba:	4618      	mov	r0, r3
 80402bc:	3718      	adds	r7, #24
 80402be:	46bd      	mov	sp, r7
 80402c0:	bd80      	pop	{r7, pc}
	...

080402c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80402c4:	b580      	push	{r7, lr}
 80402c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80402c8:	f000 f997 	bl	80405fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80402cc:	f000 f818 	bl	8040300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80402d0:	f000 f868 	bl	80403a4 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin)== GPIO_PIN_SET)
 80402d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80402d8:	4807      	ldr	r0, [pc, #28]	; (80402f8 <main+0x34>)
 80402da:	f000 fc87 	bl	8040bec <HAL_GPIO_ReadPin>
 80402de:	4603      	mov	r3, r0
 80402e0:	2b01      	cmp	r3, #1
 80402e2:	d104      	bne.n	80402ee <main+0x2a>
	  {
		  Toggle_Pin();
 80402e4:	f002 fb6c 	bl	80429c0 <__Toggle_Pin_veneer>
		  printf("Button wurde gedrückt und LED wird angemacht");
 80402e8:	4804      	ldr	r0, [pc, #16]	; (80402fc <main+0x38>)
 80402ea:	f001 fc61 	bl	8041bb0 <iprintf>
	  }
	  HAL_Delay(200);
 80402ee:	20c8      	movs	r0, #200	; 0xc8
 80402f0:	f000 f9f6 	bl	80406e0 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin)== GPIO_PIN_SET)
 80402f4:	e7ee      	b.n	80402d4 <main+0x10>
 80402f6:	bf00      	nop
 80402f8:	42020800 	.word	0x42020800
 80402fc:	080429d0 	.word	0x080429d0

08040300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8040300:	b580      	push	{r7, lr}
 8040302:	b098      	sub	sp, #96	; 0x60
 8040304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8040306:	f107 0318 	add.w	r3, r7, #24
 804030a:	2248      	movs	r2, #72	; 0x48
 804030c:	2100      	movs	r1, #0
 804030e:	4618      	mov	r0, r3
 8040310:	f001 fc46 	bl	8041ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8040314:	1d3b      	adds	r3, r7, #4
 8040316:	2200      	movs	r2, #0
 8040318:	601a      	str	r2, [r3, #0]
 804031a:	605a      	str	r2, [r3, #4]
 804031c:	609a      	str	r2, [r3, #8]
 804031e:	60da      	str	r2, [r3, #12]
 8040320:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8040322:	2000      	movs	r0, #0
 8040324:	f000 fc88 	bl	8040c38 <HAL_PWREx_ControlVoltageScaling>
 8040328:	4603      	mov	r3, r0
 804032a:	2b00      	cmp	r3, #0
 804032c:	d001      	beq.n	8040332 <SystemClock_Config+0x32>
  {
    Error_Handler();
 804032e:	f000 f863 	bl	80403f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8040332:	2310      	movs	r3, #16
 8040334:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8040336:	2301      	movs	r3, #1
 8040338:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 804033a:	2300      	movs	r3, #0
 804033c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 804033e:	2360      	movs	r3, #96	; 0x60
 8040340:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8040342:	2302      	movs	r3, #2
 8040344:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8040346:	2301      	movs	r3, #1
 8040348:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 804034a:	2301      	movs	r3, #1
 804034c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 50;
 804034e:	2332      	movs	r3, #50	; 0x32
 8040350:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8040352:	2307      	movs	r3, #7
 8040354:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8040356:	2302      	movs	r3, #2
 8040358:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 804035a:	2302      	movs	r3, #2
 804035c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 804035e:	f107 0318 	add.w	r3, r7, #24
 8040362:	4618      	mov	r0, r3
 8040364:	f000 fce8 	bl	8040d38 <HAL_RCC_OscConfig>
 8040368:	4603      	mov	r3, r0
 804036a:	2b00      	cmp	r3, #0
 804036c:	d001      	beq.n	8040372 <SystemClock_Config+0x72>
  {
    Error_Handler();
 804036e:	f000 f843 	bl	80403f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8040372:	230f      	movs	r3, #15
 8040374:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8040376:	2303      	movs	r3, #3
 8040378:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 804037a:	2300      	movs	r3, #0
 804037c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 804037e:	2300      	movs	r3, #0
 8040380:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8040382:	2300      	movs	r3, #0
 8040384:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8040386:	1d3b      	adds	r3, r7, #4
 8040388:	2104      	movs	r1, #4
 804038a:	4618      	mov	r0, r3
 804038c:	f001 f940 	bl	8041610 <HAL_RCC_ClockConfig>
 8040390:	4603      	mov	r3, r0
 8040392:	2b00      	cmp	r3, #0
 8040394:	d001      	beq.n	804039a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8040396:	f000 f82f 	bl	80403f8 <Error_Handler>
  }
}
 804039a:	bf00      	nop
 804039c:	3760      	adds	r7, #96	; 0x60
 804039e:	46bd      	mov	sp, r7
 80403a0:	bd80      	pop	{r7, pc}
	...

080403a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80403a4:	b580      	push	{r7, lr}
 80403a6:	b086      	sub	sp, #24
 80403a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80403aa:	1d3b      	adds	r3, r7, #4
 80403ac:	2200      	movs	r2, #0
 80403ae:	601a      	str	r2, [r3, #0]
 80403b0:	605a      	str	r2, [r3, #4]
 80403b2:	609a      	str	r2, [r3, #8]
 80403b4:	60da      	str	r2, [r3, #12]
 80403b6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80403b8:	4b0d      	ldr	r3, [pc, #52]	; (80403f0 <MX_GPIO_Init+0x4c>)
 80403ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80403bc:	4a0c      	ldr	r2, [pc, #48]	; (80403f0 <MX_GPIO_Init+0x4c>)
 80403be:	f043 0304 	orr.w	r3, r3, #4
 80403c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80403c4:	4b0a      	ldr	r3, [pc, #40]	; (80403f0 <MX_GPIO_Init+0x4c>)
 80403c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80403c8:	f003 0304 	and.w	r3, r3, #4
 80403cc:	603b      	str	r3, [r7, #0]
 80403ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80403d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80403d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80403d6:	2300      	movs	r3, #0
 80403d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80403da:	2300      	movs	r3, #0
 80403dc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80403de:	1d3b      	adds	r3, r7, #4
 80403e0:	4619      	mov	r1, r3
 80403e2:	4804      	ldr	r0, [pc, #16]	; (80403f4 <MX_GPIO_Init+0x50>)
 80403e4:	f000 fa82 	bl	80408ec <HAL_GPIO_Init>

}
 80403e8:	bf00      	nop
 80403ea:	3718      	adds	r7, #24
 80403ec:	46bd      	mov	sp, r7
 80403ee:	bd80      	pop	{r7, pc}
 80403f0:	40021000 	.word	0x40021000
 80403f4:	42020800 	.word	0x42020800

080403f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80403f8:	b480      	push	{r7}
 80403fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80403fc:	bf00      	nop
 80403fe:	46bd      	mov	sp, r7
 8040400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040404:	4770      	bx	lr
	...

08040408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040408:	b480      	push	{r7}
 804040a:	b083      	sub	sp, #12
 804040c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 804040e:	4b0f      	ldr	r3, [pc, #60]	; (804044c <HAL_MspInit+0x44>)
 8040410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040412:	4a0e      	ldr	r2, [pc, #56]	; (804044c <HAL_MspInit+0x44>)
 8040414:	f043 0301 	orr.w	r3, r3, #1
 8040418:	6613      	str	r3, [r2, #96]	; 0x60
 804041a:	4b0c      	ldr	r3, [pc, #48]	; (804044c <HAL_MspInit+0x44>)
 804041c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804041e:	f003 0301 	and.w	r3, r3, #1
 8040422:	607b      	str	r3, [r7, #4]
 8040424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8040426:	4b09      	ldr	r3, [pc, #36]	; (804044c <HAL_MspInit+0x44>)
 8040428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804042a:	4a08      	ldr	r2, [pc, #32]	; (804044c <HAL_MspInit+0x44>)
 804042c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040430:	6593      	str	r3, [r2, #88]	; 0x58
 8040432:	4b06      	ldr	r3, [pc, #24]	; (804044c <HAL_MspInit+0x44>)
 8040434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804043a:	603b      	str	r3, [r7, #0]
 804043c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 804043e:	bf00      	nop
 8040440:	370c      	adds	r7, #12
 8040442:	46bd      	mov	sp, r7
 8040444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040448:	4770      	bx	lr
 804044a:	bf00      	nop
 804044c:	40021000 	.word	0x40021000

08040450 <MemManage_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040450:	b480      	push	{r7}
 8040452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040454:	e7fe      	b.n	8040454 <MemManage_Handler+0x4>

08040456 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8040456:	b480      	push	{r7}
 8040458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 804045a:	e7fe      	b.n	804045a <UsageFault_Handler+0x4>

0804045c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 804045c:	b480      	push	{r7}
 804045e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8040460:	bf00      	nop
 8040462:	46bd      	mov	sp, r7
 8040464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040468:	4770      	bx	lr

0804046a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 804046a:	b480      	push	{r7}
 804046c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 804046e:	bf00      	nop
 8040470:	46bd      	mov	sp, r7
 8040472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040476:	4770      	bx	lr

08040478 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8040478:	b580      	push	{r7, lr}
 804047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 804047c:	f000 f912 	bl	80406a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8040480:	bf00      	nop
 8040482:	bd80      	pop	{r7, pc}

08040484 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8040484:	b580      	push	{r7, lr}
 8040486:	b086      	sub	sp, #24
 8040488:	af00      	add	r7, sp, #0
 804048a:	60f8      	str	r0, [r7, #12]
 804048c:	60b9      	str	r1, [r7, #8]
 804048e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040490:	2300      	movs	r3, #0
 8040492:	617b      	str	r3, [r7, #20]
 8040494:	e00a      	b.n	80404ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8040496:	e000      	b.n	804049a <_read+0x16>
 8040498:	bf00      	nop
 804049a:	4601      	mov	r1, r0
 804049c:	68bb      	ldr	r3, [r7, #8]
 804049e:	1c5a      	adds	r2, r3, #1
 80404a0:	60ba      	str	r2, [r7, #8]
 80404a2:	b2ca      	uxtb	r2, r1
 80404a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80404a6:	697b      	ldr	r3, [r7, #20]
 80404a8:	3301      	adds	r3, #1
 80404aa:	617b      	str	r3, [r7, #20]
 80404ac:	697a      	ldr	r2, [r7, #20]
 80404ae:	687b      	ldr	r3, [r7, #4]
 80404b0:	429a      	cmp	r2, r3
 80404b2:	dbf0      	blt.n	8040496 <_read+0x12>
	}

return len;
 80404b4:	687b      	ldr	r3, [r7, #4]
}
 80404b6:	4618      	mov	r0, r3
 80404b8:	3718      	adds	r7, #24
 80404ba:	46bd      	mov	sp, r7
 80404bc:	bd80      	pop	{r7, pc}

080404be <_close>:
	}
	return len;
}

int _close(int file)
{
 80404be:	b480      	push	{r7}
 80404c0:	b083      	sub	sp, #12
 80404c2:	af00      	add	r7, sp, #0
 80404c4:	6078      	str	r0, [r7, #4]
	return -1;
 80404c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80404ca:	4618      	mov	r0, r3
 80404cc:	370c      	adds	r7, #12
 80404ce:	46bd      	mov	sp, r7
 80404d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80404d4:	4770      	bx	lr

080404d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80404d6:	b480      	push	{r7}
 80404d8:	b083      	sub	sp, #12
 80404da:	af00      	add	r7, sp, #0
 80404dc:	6078      	str	r0, [r7, #4]
 80404de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80404e0:	683b      	ldr	r3, [r7, #0]
 80404e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80404e6:	605a      	str	r2, [r3, #4]
	return 0;
 80404e8:	2300      	movs	r3, #0
}
 80404ea:	4618      	mov	r0, r3
 80404ec:	370c      	adds	r7, #12
 80404ee:	46bd      	mov	sp, r7
 80404f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80404f4:	4770      	bx	lr

080404f6 <_isatty>:

int _isatty(int file)
{
 80404f6:	b480      	push	{r7}
 80404f8:	b083      	sub	sp, #12
 80404fa:	af00      	add	r7, sp, #0
 80404fc:	6078      	str	r0, [r7, #4]
	return 1;
 80404fe:	2301      	movs	r3, #1
}
 8040500:	4618      	mov	r0, r3
 8040502:	370c      	adds	r7, #12
 8040504:	46bd      	mov	sp, r7
 8040506:	f85d 7b04 	ldr.w	r7, [sp], #4
 804050a:	4770      	bx	lr

0804050c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 804050c:	b480      	push	{r7}
 804050e:	b085      	sub	sp, #20
 8040510:	af00      	add	r7, sp, #0
 8040512:	60f8      	str	r0, [r7, #12]
 8040514:	60b9      	str	r1, [r7, #8]
 8040516:	607a      	str	r2, [r7, #4]
	return 0;
 8040518:	2300      	movs	r3, #0
}
 804051a:	4618      	mov	r0, r3
 804051c:	3714      	adds	r7, #20
 804051e:	46bd      	mov	sp, r7
 8040520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040524:	4770      	bx	lr
	...

08040528 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8040528:	b580      	push	{r7, lr}
 804052a:	b084      	sub	sp, #16
 804052c:	af00      	add	r7, sp, #0
 804052e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8040530:	4b11      	ldr	r3, [pc, #68]	; (8040578 <_sbrk+0x50>)
 8040532:	681b      	ldr	r3, [r3, #0]
 8040534:	2b00      	cmp	r3, #0
 8040536:	d102      	bne.n	804053e <_sbrk+0x16>
		heap_end = &end;
 8040538:	4b0f      	ldr	r3, [pc, #60]	; (8040578 <_sbrk+0x50>)
 804053a:	4a10      	ldr	r2, [pc, #64]	; (804057c <_sbrk+0x54>)
 804053c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 804053e:	4b0e      	ldr	r3, [pc, #56]	; (8040578 <_sbrk+0x50>)
 8040540:	681b      	ldr	r3, [r3, #0]
 8040542:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8040544:	4b0c      	ldr	r3, [pc, #48]	; (8040578 <_sbrk+0x50>)
 8040546:	681a      	ldr	r2, [r3, #0]
 8040548:	687b      	ldr	r3, [r7, #4]
 804054a:	4413      	add	r3, r2
 804054c:	466a      	mov	r2, sp
 804054e:	4293      	cmp	r3, r2
 8040550:	d907      	bls.n	8040562 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8040552:	f001 fafb 	bl	8041b4c <__errno>
 8040556:	4602      	mov	r2, r0
 8040558:	230c      	movs	r3, #12
 804055a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 804055c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8040560:	e006      	b.n	8040570 <_sbrk+0x48>
	}

	heap_end += incr;
 8040562:	4b05      	ldr	r3, [pc, #20]	; (8040578 <_sbrk+0x50>)
 8040564:	681a      	ldr	r2, [r3, #0]
 8040566:	687b      	ldr	r3, [r7, #4]
 8040568:	4413      	add	r3, r2
 804056a:	4a03      	ldr	r2, [pc, #12]	; (8040578 <_sbrk+0x50>)
 804056c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 804056e:	68fb      	ldr	r3, [r7, #12]
}
 8040570:	4618      	mov	r0, r3
 8040572:	3710      	adds	r7, #16
 8040574:	46bd      	mov	sp, r7
 8040576:	bd80      	pop	{r7, pc}
 8040578:	2001808c 	.word	0x2001808c
 804057c:	200180a0 	.word	0x200180a0

08040580 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8040580:	b480      	push	{r7}
 8040582:	af00      	add	r7, sp, #0
#endif

  /* Non-secure main application shall call SystemCoreClockUpdate() to update */
  /* the SystemCoreClock variable to insure non-secure application relies on  */
  /* the initial clock reference set by secure application.                   */
}
 8040584:	bf00      	nop
 8040586:	46bd      	mov	sp, r7
 8040588:	f85d 7b04 	ldr.w	r7, [sp], #4
 804058c:	4770      	bx	lr
	...

08040590 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8040590:	b580      	push	{r7, lr}
 8040592:	af00      	add	r7, sp, #0
  /* Get the SystemCoreClock value from the secure domain */
  SystemCoreClock = SECURE_SystemCoreClockUpdate();
 8040594:	f002 fa0c 	bl	80429b0 <__SECURE_SystemCoreClockUpdate_veneer>
 8040598:	4602      	mov	r2, r0
 804059a:	4b02      	ldr	r3, [pc, #8]	; (80405a4 <SystemCoreClockUpdate+0x14>)
 804059c:	601a      	str	r2, [r3, #0]
}
 804059e:	bf00      	nop
 80405a0:	bd80      	pop	{r7, pc}
 80405a2:	bf00      	nop
 80405a4:	20018000 	.word	0x20018000

080405a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80405a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80405e0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80405ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80405ae:	e003      	b.n	80405b8 <LoopCopyDataInit>

080405b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80405b0:	4b0c      	ldr	r3, [pc, #48]	; (80405e4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80405b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80405b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80405b6:	3104      	adds	r1, #4

080405b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80405b8:	480b      	ldr	r0, [pc, #44]	; (80405e8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80405ba:	4b0c      	ldr	r3, [pc, #48]	; (80405ec <LoopForever+0xe>)
	adds	r2, r0, r1
 80405bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80405be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80405c0:	d3f6      	bcc.n	80405b0 <CopyDataInit>
	ldr	r2, =_sbss
 80405c2:	4a0b      	ldr	r2, [pc, #44]	; (80405f0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80405c4:	e002      	b.n	80405cc <LoopFillZerobss>

080405c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80405c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80405c8:	f842 3b04 	str.w	r3, [r2], #4

080405cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80405cc:	4b09      	ldr	r3, [pc, #36]	; (80405f4 <LoopForever+0x16>)
	cmp	r2, r3
 80405ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80405d0:	d3f9      	bcc.n	80405c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80405d2:	f7ff ffd5 	bl	8040580 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80405d6:	f001 fabf 	bl	8041b58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80405da:	f7ff fe73 	bl	80402c4 <main>

080405de <LoopForever>:

LoopForever:
    b LoopForever
 80405de:	e7fe      	b.n	80405de <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80405e0:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80405e4:	08042af8 	.word	0x08042af8
	ldr	r0, =_sdata
 80405e8:	20018000 	.word	0x20018000
	ldr	r3, =_edata
 80405ec:	20018070 	.word	0x20018070
	ldr	r2, =_sbss
 80405f0:	20018070 	.word	0x20018070
	ldr	r3, = _ebss
 80405f4:	200180a0 	.word	0x200180a0

080405f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80405f8:	e7fe      	b.n	80405f8 <ADC1_2_IRQHandler>

080405fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80405fa:	b580      	push	{r7, lr}
 80405fc:	b082      	sub	sp, #8
 80405fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8040600:	2300      	movs	r3, #0
 8040602:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8040604:	2004      	movs	r0, #4
 8040606:	f000 f93f 	bl	8040888 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 804060a:	f7ff ffc1 	bl	8040590 <SystemCoreClockUpdate>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 804060e:	2000      	movs	r0, #0
 8040610:	f000 f80e 	bl	8040630 <HAL_InitTick>
 8040614:	4603      	mov	r3, r0
 8040616:	2b00      	cmp	r3, #0
 8040618:	d002      	beq.n	8040620 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 804061a:	2301      	movs	r3, #1
 804061c:	71fb      	strb	r3, [r7, #7]
 804061e:	e001      	b.n	8040624 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8040620:	f7ff fef2 	bl	8040408 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8040624:	79fb      	ldrb	r3, [r7, #7]
}
 8040626:	4618      	mov	r0, r3
 8040628:	3708      	adds	r7, #8
 804062a:	46bd      	mov	sp, r7
 804062c:	bd80      	pop	{r7, pc}
	...

08040630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040630:	b580      	push	{r7, lr}
 8040632:	b084      	sub	sp, #16
 8040634:	af00      	add	r7, sp, #0
 8040636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8040638:	2300      	movs	r3, #0
 804063a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 804063c:	4b16      	ldr	r3, [pc, #88]	; (8040698 <HAL_InitTick+0x68>)
 804063e:	681b      	ldr	r3, [r3, #0]
 8040640:	2b00      	cmp	r3, #0
 8040642:	d022      	beq.n	804068a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8040644:	4b15      	ldr	r3, [pc, #84]	; (804069c <HAL_InitTick+0x6c>)
 8040646:	681a      	ldr	r2, [r3, #0]
 8040648:	4b13      	ldr	r3, [pc, #76]	; (8040698 <HAL_InitTick+0x68>)
 804064a:	681b      	ldr	r3, [r3, #0]
 804064c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8040650:	fbb1 f3f3 	udiv	r3, r1, r3
 8040654:	fbb2 f3f3 	udiv	r3, r2, r3
 8040658:	4618      	mov	r0, r3
 804065a:	f000 f93a 	bl	80408d2 <HAL_SYSTICK_Config>
 804065e:	4603      	mov	r3, r0
 8040660:	2b00      	cmp	r3, #0
 8040662:	d10f      	bne.n	8040684 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040664:	687b      	ldr	r3, [r7, #4]
 8040666:	2b07      	cmp	r3, #7
 8040668:	d809      	bhi.n	804067e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 804066a:	2200      	movs	r2, #0
 804066c:	6879      	ldr	r1, [r7, #4]
 804066e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8040672:	f000 f914 	bl	804089e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8040676:	4a0a      	ldr	r2, [pc, #40]	; (80406a0 <HAL_InitTick+0x70>)
 8040678:	687b      	ldr	r3, [r7, #4]
 804067a:	6013      	str	r3, [r2, #0]
 804067c:	e007      	b.n	804068e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 804067e:	2301      	movs	r3, #1
 8040680:	73fb      	strb	r3, [r7, #15]
 8040682:	e004      	b.n	804068e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8040684:	2301      	movs	r3, #1
 8040686:	73fb      	strb	r3, [r7, #15]
 8040688:	e001      	b.n	804068e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 804068a:	2301      	movs	r3, #1
 804068c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 804068e:	7bfb      	ldrb	r3, [r7, #15]
}
 8040690:	4618      	mov	r0, r3
 8040692:	3710      	adds	r7, #16
 8040694:	46bd      	mov	sp, r7
 8040696:	bd80      	pop	{r7, pc}
 8040698:	20018008 	.word	0x20018008
 804069c:	20018000 	.word	0x20018000
 80406a0:	20018004 	.word	0x20018004

080406a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80406a4:	b480      	push	{r7}
 80406a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80406a8:	4b05      	ldr	r3, [pc, #20]	; (80406c0 <HAL_IncTick+0x1c>)
 80406aa:	681a      	ldr	r2, [r3, #0]
 80406ac:	4b05      	ldr	r3, [pc, #20]	; (80406c4 <HAL_IncTick+0x20>)
 80406ae:	681b      	ldr	r3, [r3, #0]
 80406b0:	4413      	add	r3, r2
 80406b2:	4a03      	ldr	r2, [pc, #12]	; (80406c0 <HAL_IncTick+0x1c>)
 80406b4:	6013      	str	r3, [r2, #0]
}
 80406b6:	bf00      	nop
 80406b8:	46bd      	mov	sp, r7
 80406ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80406be:	4770      	bx	lr
 80406c0:	20018098 	.word	0x20018098
 80406c4:	20018008 	.word	0x20018008

080406c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80406c8:	b480      	push	{r7}
 80406ca:	af00      	add	r7, sp, #0
  return uwTick;
 80406cc:	4b03      	ldr	r3, [pc, #12]	; (80406dc <HAL_GetTick+0x14>)
 80406ce:	681b      	ldr	r3, [r3, #0]
}
 80406d0:	4618      	mov	r0, r3
 80406d2:	46bd      	mov	sp, r7
 80406d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80406d8:	4770      	bx	lr
 80406da:	bf00      	nop
 80406dc:	20018098 	.word	0x20018098

080406e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80406e0:	b580      	push	{r7, lr}
 80406e2:	b084      	sub	sp, #16
 80406e4:	af00      	add	r7, sp, #0
 80406e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80406e8:	f7ff ffee 	bl	80406c8 <HAL_GetTick>
 80406ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80406ee:	687b      	ldr	r3, [r7, #4]
 80406f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80406f2:	68fb      	ldr	r3, [r7, #12]
 80406f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80406f8:	d004      	beq.n	8040704 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80406fa:	4b09      	ldr	r3, [pc, #36]	; (8040720 <HAL_Delay+0x40>)
 80406fc:	681b      	ldr	r3, [r3, #0]
 80406fe:	68fa      	ldr	r2, [r7, #12]
 8040700:	4413      	add	r3, r2
 8040702:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8040704:	bf00      	nop
 8040706:	f7ff ffdf 	bl	80406c8 <HAL_GetTick>
 804070a:	4602      	mov	r2, r0
 804070c:	68bb      	ldr	r3, [r7, #8]
 804070e:	1ad3      	subs	r3, r2, r3
 8040710:	68fa      	ldr	r2, [r7, #12]
 8040712:	429a      	cmp	r2, r3
 8040714:	d8f7      	bhi.n	8040706 <HAL_Delay+0x26>
  {
  }
}
 8040716:	bf00      	nop
 8040718:	3710      	adds	r7, #16
 804071a:	46bd      	mov	sp, r7
 804071c:	bd80      	pop	{r7, pc}
 804071e:	bf00      	nop
 8040720:	20018008 	.word	0x20018008

08040724 <__NVIC_SetPriorityGrouping>:
{
 8040724:	b480      	push	{r7}
 8040726:	b085      	sub	sp, #20
 8040728:	af00      	add	r7, sp, #0
 804072a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 804072c:	687b      	ldr	r3, [r7, #4]
 804072e:	f003 0307 	and.w	r3, r3, #7
 8040732:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040734:	4b0c      	ldr	r3, [pc, #48]	; (8040768 <__NVIC_SetPriorityGrouping+0x44>)
 8040736:	68db      	ldr	r3, [r3, #12]
 8040738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 804073a:	68ba      	ldr	r2, [r7, #8]
 804073c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8040740:	4013      	ands	r3, r2
 8040742:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priority group */
 8040744:	68fb      	ldr	r3, [r7, #12]
 8040746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040748:	68bb      	ldr	r3, [r7, #8]
 804074a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 804074c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8040750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8040754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040756:	4a04      	ldr	r2, [pc, #16]	; (8040768 <__NVIC_SetPriorityGrouping+0x44>)
 8040758:	68bb      	ldr	r3, [r7, #8]
 804075a:	60d3      	str	r3, [r2, #12]
}
 804075c:	bf00      	nop
 804075e:	3714      	adds	r7, #20
 8040760:	46bd      	mov	sp, r7
 8040762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040766:	4770      	bx	lr
 8040768:	e000ed00 	.word	0xe000ed00

0804076c <__NVIC_GetPriorityGrouping>:
{
 804076c:	b480      	push	{r7}
 804076e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040770:	4b04      	ldr	r3, [pc, #16]	; (8040784 <__NVIC_GetPriorityGrouping+0x18>)
 8040772:	68db      	ldr	r3, [r3, #12]
 8040774:	0a1b      	lsrs	r3, r3, #8
 8040776:	f003 0307 	and.w	r3, r3, #7
}
 804077a:	4618      	mov	r0, r3
 804077c:	46bd      	mov	sp, r7
 804077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040782:	4770      	bx	lr
 8040784:	e000ed00 	.word	0xe000ed00

08040788 <__NVIC_SetPriority>:
{
 8040788:	b480      	push	{r7}
 804078a:	b083      	sub	sp, #12
 804078c:	af00      	add	r7, sp, #0
 804078e:	4603      	mov	r3, r0
 8040790:	6039      	str	r1, [r7, #0]
 8040792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040798:	2b00      	cmp	r3, #0
 804079a:	db0a      	blt.n	80407b2 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 804079c:	683b      	ldr	r3, [r7, #0]
 804079e:	b2da      	uxtb	r2, r3
 80407a0:	490c      	ldr	r1, [pc, #48]	; (80407d4 <__NVIC_SetPriority+0x4c>)
 80407a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80407a6:	0152      	lsls	r2, r2, #5
 80407a8:	b2d2      	uxtb	r2, r2
 80407aa:	440b      	add	r3, r1
 80407ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80407b0:	e00a      	b.n	80407c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80407b2:	683b      	ldr	r3, [r7, #0]
 80407b4:	b2da      	uxtb	r2, r3
 80407b6:	4908      	ldr	r1, [pc, #32]	; (80407d8 <__NVIC_SetPriority+0x50>)
 80407b8:	79fb      	ldrb	r3, [r7, #7]
 80407ba:	f003 030f 	and.w	r3, r3, #15
 80407be:	3b04      	subs	r3, #4
 80407c0:	0152      	lsls	r2, r2, #5
 80407c2:	b2d2      	uxtb	r2, r2
 80407c4:	440b      	add	r3, r1
 80407c6:	761a      	strb	r2, [r3, #24]
}
 80407c8:	bf00      	nop
 80407ca:	370c      	adds	r7, #12
 80407cc:	46bd      	mov	sp, r7
 80407ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80407d2:	4770      	bx	lr
 80407d4:	e000e100 	.word	0xe000e100
 80407d8:	e000ed00 	.word	0xe000ed00

080407dc <NVIC_EncodePriority>:
{
 80407dc:	b480      	push	{r7}
 80407de:	b089      	sub	sp, #36	; 0x24
 80407e0:	af00      	add	r7, sp, #0
 80407e2:	60f8      	str	r0, [r7, #12]
 80407e4:	60b9      	str	r1, [r7, #8]
 80407e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80407e8:	68fb      	ldr	r3, [r7, #12]
 80407ea:	f003 0307 	and.w	r3, r3, #7
 80407ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80407f0:	69fb      	ldr	r3, [r7, #28]
 80407f2:	f1c3 0307 	rsb	r3, r3, #7
 80407f6:	2b03      	cmp	r3, #3
 80407f8:	bf28      	it	cs
 80407fa:	2303      	movcs	r3, #3
 80407fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80407fe:	69fb      	ldr	r3, [r7, #28]
 8040800:	3303      	adds	r3, #3
 8040802:	2b06      	cmp	r3, #6
 8040804:	d902      	bls.n	804080c <NVIC_EncodePriority+0x30>
 8040806:	69fb      	ldr	r3, [r7, #28]
 8040808:	3b04      	subs	r3, #4
 804080a:	e000      	b.n	804080e <NVIC_EncodePriority+0x32>
 804080c:	2300      	movs	r3, #0
 804080e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040810:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8040814:	69bb      	ldr	r3, [r7, #24]
 8040816:	fa02 f303 	lsl.w	r3, r2, r3
 804081a:	43da      	mvns	r2, r3
 804081c:	68bb      	ldr	r3, [r7, #8]
 804081e:	401a      	ands	r2, r3
 8040820:	697b      	ldr	r3, [r7, #20]
 8040822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040824:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8040828:	697b      	ldr	r3, [r7, #20]
 804082a:	fa01 f303 	lsl.w	r3, r1, r3
 804082e:	43d9      	mvns	r1, r3
 8040830:	687b      	ldr	r3, [r7, #4]
 8040832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040834:	4313      	orrs	r3, r2
}
 8040836:	4618      	mov	r0, r3
 8040838:	3724      	adds	r7, #36	; 0x24
 804083a:	46bd      	mov	sp, r7
 804083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040840:	4770      	bx	lr
	...

08040844 <SysTick_Config>:
{
 8040844:	b580      	push	{r7, lr}
 8040846:	b082      	sub	sp, #8
 8040848:	af00      	add	r7, sp, #0
 804084a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 804084c:	687b      	ldr	r3, [r7, #4]
 804084e:	3b01      	subs	r3, #1
 8040850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8040854:	d301      	bcc.n	804085a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8040856:	2301      	movs	r3, #1
 8040858:	e00f      	b.n	804087a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 804085a:	4a0a      	ldr	r2, [pc, #40]	; (8040884 <SysTick_Config+0x40>)
 804085c:	687b      	ldr	r3, [r7, #4]
 804085e:	3b01      	subs	r3, #1
 8040860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8040862:	2107      	movs	r1, #7
 8040864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8040868:	f7ff ff8e 	bl	8040788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 804086c:	4b05      	ldr	r3, [pc, #20]	; (8040884 <SysTick_Config+0x40>)
 804086e:	2200      	movs	r2, #0
 8040870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8040872:	4b04      	ldr	r3, [pc, #16]	; (8040884 <SysTick_Config+0x40>)
 8040874:	2207      	movs	r2, #7
 8040876:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8040878:	2300      	movs	r3, #0
}
 804087a:	4618      	mov	r0, r3
 804087c:	3708      	adds	r7, #8
 804087e:	46bd      	mov	sp, r7
 8040880:	bd80      	pop	{r7, pc}
 8040882:	bf00      	nop
 8040884:	e000e010 	.word	0xe000e010

08040888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040888:	b580      	push	{r7, lr}
 804088a:	b082      	sub	sp, #8
 804088c:	af00      	add	r7, sp, #0
 804088e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8040890:	6878      	ldr	r0, [r7, #4]
 8040892:	f7ff ff47 	bl	8040724 <__NVIC_SetPriorityGrouping>
}
 8040896:	bf00      	nop
 8040898:	3708      	adds	r7, #8
 804089a:	46bd      	mov	sp, r7
 804089c:	bd80      	pop	{r7, pc}

0804089e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 804089e:	b580      	push	{r7, lr}
 80408a0:	b086      	sub	sp, #24
 80408a2:	af00      	add	r7, sp, #0
 80408a4:	4603      	mov	r3, r0
 80408a6:	60b9      	str	r1, [r7, #8]
 80408a8:	607a      	str	r2, [r7, #4]
 80408aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80408ac:	f7ff ff5e 	bl	804076c <__NVIC_GetPriorityGrouping>
 80408b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80408b2:	687a      	ldr	r2, [r7, #4]
 80408b4:	68b9      	ldr	r1, [r7, #8]
 80408b6:	6978      	ldr	r0, [r7, #20]
 80408b8:	f7ff ff90 	bl	80407dc <NVIC_EncodePriority>
 80408bc:	4602      	mov	r2, r0
 80408be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80408c2:	4611      	mov	r1, r2
 80408c4:	4618      	mov	r0, r3
 80408c6:	f7ff ff5f 	bl	8040788 <__NVIC_SetPriority>
}
 80408ca:	bf00      	nop
 80408cc:	3718      	adds	r7, #24
 80408ce:	46bd      	mov	sp, r7
 80408d0:	bd80      	pop	{r7, pc}

080408d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80408d2:	b580      	push	{r7, lr}
 80408d4:	b082      	sub	sp, #8
 80408d6:	af00      	add	r7, sp, #0
 80408d8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80408da:	6878      	ldr	r0, [r7, #4]
 80408dc:	f7ff ffb2 	bl	8040844 <SysTick_Config>
 80408e0:	4603      	mov	r3, r0
}
 80408e2:	4618      	mov	r0, r3
 80408e4:	3708      	adds	r7, #8
 80408e6:	46bd      	mov	sp, r7
 80408e8:	bd80      	pop	{r7, pc}
	...

080408ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80408ec:	b480      	push	{r7}
 80408ee:	b087      	sub	sp, #28
 80408f0:	af00      	add	r7, sp, #0
 80408f2:	6078      	str	r0, [r7, #4]
 80408f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80408f6:	2300      	movs	r3, #0
 80408f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80408fa:	e158      	b.n	8040bae <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80408fc:	683b      	ldr	r3, [r7, #0]
 80408fe:	681a      	ldr	r2, [r3, #0]
 8040900:	2101      	movs	r1, #1
 8040902:	697b      	ldr	r3, [r7, #20]
 8040904:	fa01 f303 	lsl.w	r3, r1, r3
 8040908:	4013      	ands	r3, r2
 804090a:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 804090c:	68fb      	ldr	r3, [r7, #12]
 804090e:	2b00      	cmp	r3, #0
 8040910:	f000 814a 	beq.w	8040ba8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8040914:	683b      	ldr	r3, [r7, #0]
 8040916:	685b      	ldr	r3, [r3, #4]
 8040918:	2b01      	cmp	r3, #1
 804091a:	d00b      	beq.n	8040934 <HAL_GPIO_Init+0x48>
 804091c:	683b      	ldr	r3, [r7, #0]
 804091e:	685b      	ldr	r3, [r3, #4]
 8040920:	2b02      	cmp	r3, #2
 8040922:	d007      	beq.n	8040934 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8040924:	683b      	ldr	r3, [r7, #0]
 8040926:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8040928:	2b11      	cmp	r3, #17
 804092a:	d003      	beq.n	8040934 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 804092c:	683b      	ldr	r3, [r7, #0]
 804092e:	685b      	ldr	r3, [r3, #4]
 8040930:	2b12      	cmp	r3, #18
 8040932:	d130      	bne.n	8040996 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8040934:	687b      	ldr	r3, [r7, #4]
 8040936:	689b      	ldr	r3, [r3, #8]
 8040938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 804093a:	697b      	ldr	r3, [r7, #20]
 804093c:	005b      	lsls	r3, r3, #1
 804093e:	2203      	movs	r2, #3
 8040940:	fa02 f303 	lsl.w	r3, r2, r3
 8040944:	43db      	mvns	r3, r3
 8040946:	693a      	ldr	r2, [r7, #16]
 8040948:	4013      	ands	r3, r2
 804094a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 804094c:	683b      	ldr	r3, [r7, #0]
 804094e:	68da      	ldr	r2, [r3, #12]
 8040950:	697b      	ldr	r3, [r7, #20]
 8040952:	005b      	lsls	r3, r3, #1
 8040954:	fa02 f303 	lsl.w	r3, r2, r3
 8040958:	693a      	ldr	r2, [r7, #16]
 804095a:	4313      	orrs	r3, r2
 804095c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 804095e:	687b      	ldr	r3, [r7, #4]
 8040960:	693a      	ldr	r2, [r7, #16]
 8040962:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8040964:	687b      	ldr	r3, [r7, #4]
 8040966:	685b      	ldr	r3, [r3, #4]
 8040968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 804096a:	2201      	movs	r2, #1
 804096c:	697b      	ldr	r3, [r7, #20]
 804096e:	fa02 f303 	lsl.w	r3, r2, r3
 8040972:	43db      	mvns	r3, r3
 8040974:	693a      	ldr	r2, [r7, #16]
 8040976:	4013      	ands	r3, r2
 8040978:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 804097a:	683b      	ldr	r3, [r7, #0]
 804097c:	685b      	ldr	r3, [r3, #4]
 804097e:	091b      	lsrs	r3, r3, #4
 8040980:	f003 0201 	and.w	r2, r3, #1
 8040984:	697b      	ldr	r3, [r7, #20]
 8040986:	fa02 f303 	lsl.w	r3, r2, r3
 804098a:	693a      	ldr	r2, [r7, #16]
 804098c:	4313      	orrs	r3, r2
 804098e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8040990:	687b      	ldr	r3, [r7, #4]
 8040992:	693a      	ldr	r2, [r7, #16]
 8040994:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8040996:	687b      	ldr	r3, [r7, #4]
 8040998:	68db      	ldr	r3, [r3, #12]
 804099a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 804099c:	697b      	ldr	r3, [r7, #20]
 804099e:	005b      	lsls	r3, r3, #1
 80409a0:	2203      	movs	r2, #3
 80409a2:	fa02 f303 	lsl.w	r3, r2, r3
 80409a6:	43db      	mvns	r3, r3
 80409a8:	693a      	ldr	r2, [r7, #16]
 80409aa:	4013      	ands	r3, r2
 80409ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80409ae:	683b      	ldr	r3, [r7, #0]
 80409b0:	689a      	ldr	r2, [r3, #8]
 80409b2:	697b      	ldr	r3, [r7, #20]
 80409b4:	005b      	lsls	r3, r3, #1
 80409b6:	fa02 f303 	lsl.w	r3, r2, r3
 80409ba:	693a      	ldr	r2, [r7, #16]
 80409bc:	4313      	orrs	r3, r2
 80409be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80409c0:	687b      	ldr	r3, [r7, #4]
 80409c2:	693a      	ldr	r2, [r7, #16]
 80409c4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80409c6:	683b      	ldr	r3, [r7, #0]
 80409c8:	685b      	ldr	r3, [r3, #4]
 80409ca:	2b02      	cmp	r3, #2
 80409cc:	d003      	beq.n	80409d6 <HAL_GPIO_Init+0xea>
 80409ce:	683b      	ldr	r3, [r7, #0]
 80409d0:	685b      	ldr	r3, [r3, #4]
 80409d2:	2b12      	cmp	r3, #18
 80409d4:	d123      	bne.n	8040a1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80409d6:	697b      	ldr	r3, [r7, #20]
 80409d8:	08da      	lsrs	r2, r3, #3
 80409da:	687b      	ldr	r3, [r7, #4]
 80409dc:	3208      	adds	r2, #8
 80409de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80409e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80409e4:	697b      	ldr	r3, [r7, #20]
 80409e6:	f003 0307 	and.w	r3, r3, #7
 80409ea:	009b      	lsls	r3, r3, #2
 80409ec:	220f      	movs	r2, #15
 80409ee:	fa02 f303 	lsl.w	r3, r2, r3
 80409f2:	43db      	mvns	r3, r3
 80409f4:	693a      	ldr	r2, [r7, #16]
 80409f6:	4013      	ands	r3, r2
 80409f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80409fa:	683b      	ldr	r3, [r7, #0]
 80409fc:	691a      	ldr	r2, [r3, #16]
 80409fe:	697b      	ldr	r3, [r7, #20]
 8040a00:	f003 0307 	and.w	r3, r3, #7
 8040a04:	009b      	lsls	r3, r3, #2
 8040a06:	fa02 f303 	lsl.w	r3, r2, r3
 8040a0a:	693a      	ldr	r2, [r7, #16]
 8040a0c:	4313      	orrs	r3, r2
 8040a0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8040a10:	697b      	ldr	r3, [r7, #20]
 8040a12:	08da      	lsrs	r2, r3, #3
 8040a14:	687b      	ldr	r3, [r7, #4]
 8040a16:	3208      	adds	r2, #8
 8040a18:	6939      	ldr	r1, [r7, #16]
 8040a1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8040a1e:	687b      	ldr	r3, [r7, #4]
 8040a20:	681b      	ldr	r3, [r3, #0]
 8040a22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8040a24:	697b      	ldr	r3, [r7, #20]
 8040a26:	005b      	lsls	r3, r3, #1
 8040a28:	2203      	movs	r2, #3
 8040a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8040a2e:	43db      	mvns	r3, r3
 8040a30:	693a      	ldr	r2, [r7, #16]
 8040a32:	4013      	ands	r3, r2
 8040a34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8040a36:	683b      	ldr	r3, [r7, #0]
 8040a38:	685b      	ldr	r3, [r3, #4]
 8040a3a:	f003 0203 	and.w	r2, r3, #3
 8040a3e:	697b      	ldr	r3, [r7, #20]
 8040a40:	005b      	lsls	r3, r3, #1
 8040a42:	fa02 f303 	lsl.w	r3, r2, r3
 8040a46:	693a      	ldr	r2, [r7, #16]
 8040a48:	4313      	orrs	r3, r2
 8040a4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8040a4c:	687b      	ldr	r3, [r7, #4]
 8040a4e:	693a      	ldr	r2, [r7, #16]
 8040a50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8040a52:	683b      	ldr	r3, [r7, #0]
 8040a54:	685b      	ldr	r3, [r3, #4]
 8040a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040a5a:	2b00      	cmp	r3, #0
 8040a5c:	f000 80a4 	beq.w	8040ba8 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8040a60:	4a5a      	ldr	r2, [pc, #360]	; (8040bcc <HAL_GPIO_Init+0x2e0>)
 8040a62:	697b      	ldr	r3, [r7, #20]
 8040a64:	089b      	lsrs	r3, r3, #2
 8040a66:	3318      	adds	r3, #24
 8040a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8040a6c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8040a6e:	697b      	ldr	r3, [r7, #20]
 8040a70:	f003 0303 	and.w	r3, r3, #3
 8040a74:	00db      	lsls	r3, r3, #3
 8040a76:	220f      	movs	r2, #15
 8040a78:	fa02 f303 	lsl.w	r3, r2, r3
 8040a7c:	43db      	mvns	r3, r3
 8040a7e:	693a      	ldr	r2, [r7, #16]
 8040a80:	4013      	ands	r3, r2
 8040a82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8040a84:	687b      	ldr	r3, [r7, #4]
 8040a86:	4a52      	ldr	r2, [pc, #328]	; (8040bd0 <HAL_GPIO_Init+0x2e4>)
 8040a88:	4293      	cmp	r3, r2
 8040a8a:	d025      	beq.n	8040ad8 <HAL_GPIO_Init+0x1ec>
 8040a8c:	687b      	ldr	r3, [r7, #4]
 8040a8e:	4a51      	ldr	r2, [pc, #324]	; (8040bd4 <HAL_GPIO_Init+0x2e8>)
 8040a90:	4293      	cmp	r3, r2
 8040a92:	d01f      	beq.n	8040ad4 <HAL_GPIO_Init+0x1e8>
 8040a94:	687b      	ldr	r3, [r7, #4]
 8040a96:	4a50      	ldr	r2, [pc, #320]	; (8040bd8 <HAL_GPIO_Init+0x2ec>)
 8040a98:	4293      	cmp	r3, r2
 8040a9a:	d019      	beq.n	8040ad0 <HAL_GPIO_Init+0x1e4>
 8040a9c:	687b      	ldr	r3, [r7, #4]
 8040a9e:	4a4f      	ldr	r2, [pc, #316]	; (8040bdc <HAL_GPIO_Init+0x2f0>)
 8040aa0:	4293      	cmp	r3, r2
 8040aa2:	d013      	beq.n	8040acc <HAL_GPIO_Init+0x1e0>
 8040aa4:	687b      	ldr	r3, [r7, #4]
 8040aa6:	4a4e      	ldr	r2, [pc, #312]	; (8040be0 <HAL_GPIO_Init+0x2f4>)
 8040aa8:	4293      	cmp	r3, r2
 8040aaa:	d00d      	beq.n	8040ac8 <HAL_GPIO_Init+0x1dc>
 8040aac:	687b      	ldr	r3, [r7, #4]
 8040aae:	4a4d      	ldr	r2, [pc, #308]	; (8040be4 <HAL_GPIO_Init+0x2f8>)
 8040ab0:	4293      	cmp	r3, r2
 8040ab2:	d007      	beq.n	8040ac4 <HAL_GPIO_Init+0x1d8>
 8040ab4:	687b      	ldr	r3, [r7, #4]
 8040ab6:	4a4c      	ldr	r2, [pc, #304]	; (8040be8 <HAL_GPIO_Init+0x2fc>)
 8040ab8:	4293      	cmp	r3, r2
 8040aba:	d101      	bne.n	8040ac0 <HAL_GPIO_Init+0x1d4>
 8040abc:	2306      	movs	r3, #6
 8040abe:	e00c      	b.n	8040ada <HAL_GPIO_Init+0x1ee>
 8040ac0:	2307      	movs	r3, #7
 8040ac2:	e00a      	b.n	8040ada <HAL_GPIO_Init+0x1ee>
 8040ac4:	2305      	movs	r3, #5
 8040ac6:	e008      	b.n	8040ada <HAL_GPIO_Init+0x1ee>
 8040ac8:	2304      	movs	r3, #4
 8040aca:	e006      	b.n	8040ada <HAL_GPIO_Init+0x1ee>
 8040acc:	2303      	movs	r3, #3
 8040ace:	e004      	b.n	8040ada <HAL_GPIO_Init+0x1ee>
 8040ad0:	2302      	movs	r3, #2
 8040ad2:	e002      	b.n	8040ada <HAL_GPIO_Init+0x1ee>
 8040ad4:	2301      	movs	r3, #1
 8040ad6:	e000      	b.n	8040ada <HAL_GPIO_Init+0x1ee>
 8040ad8:	2300      	movs	r3, #0
 8040ada:	697a      	ldr	r2, [r7, #20]
 8040adc:	f002 0203 	and.w	r2, r2, #3
 8040ae0:	00d2      	lsls	r2, r2, #3
 8040ae2:	4093      	lsls	r3, r2
 8040ae4:	693a      	ldr	r2, [r7, #16]
 8040ae6:	4313      	orrs	r3, r2
 8040ae8:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8040aea:	4938      	ldr	r1, [pc, #224]	; (8040bcc <HAL_GPIO_Init+0x2e0>)
 8040aec:	697b      	ldr	r3, [r7, #20]
 8040aee:	089b      	lsrs	r3, r3, #2
 8040af0:	3318      	adds	r3, #24
 8040af2:	693a      	ldr	r2, [r7, #16]
 8040af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8040af8:	4b34      	ldr	r3, [pc, #208]	; (8040bcc <HAL_GPIO_Init+0x2e0>)
 8040afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8040afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040b00:	68fb      	ldr	r3, [r7, #12]
 8040b02:	43db      	mvns	r3, r3
 8040b04:	693a      	ldr	r2, [r7, #16]
 8040b06:	4013      	ands	r3, r2
 8040b08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8040b0a:	683b      	ldr	r3, [r7, #0]
 8040b0c:	685b      	ldr	r3, [r3, #4]
 8040b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8040b12:	2b00      	cmp	r3, #0
 8040b14:	d003      	beq.n	8040b1e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8040b16:	693a      	ldr	r2, [r7, #16]
 8040b18:	68fb      	ldr	r3, [r7, #12]
 8040b1a:	4313      	orrs	r3, r2
 8040b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8040b1e:	4a2b      	ldr	r2, [pc, #172]	; (8040bcc <HAL_GPIO_Init+0x2e0>)
 8040b20:	693b      	ldr	r3, [r7, #16]
 8040b22:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8040b26:	4b29      	ldr	r3, [pc, #164]	; (8040bcc <HAL_GPIO_Init+0x2e0>)
 8040b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8040b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040b2e:	68fb      	ldr	r3, [r7, #12]
 8040b30:	43db      	mvns	r3, r3
 8040b32:	693a      	ldr	r2, [r7, #16]
 8040b34:	4013      	ands	r3, r2
 8040b36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8040b38:	683b      	ldr	r3, [r7, #0]
 8040b3a:	685b      	ldr	r3, [r3, #4]
 8040b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8040b40:	2b00      	cmp	r3, #0
 8040b42:	d003      	beq.n	8040b4c <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8040b44:	693a      	ldr	r2, [r7, #16]
 8040b46:	68fb      	ldr	r3, [r7, #12]
 8040b48:	4313      	orrs	r3, r2
 8040b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8040b4c:	4a1f      	ldr	r2, [pc, #124]	; (8040bcc <HAL_GPIO_Init+0x2e0>)
 8040b4e:	693b      	ldr	r3, [r7, #16]
 8040b50:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8040b54:	4b1d      	ldr	r3, [pc, #116]	; (8040bcc <HAL_GPIO_Init+0x2e0>)
 8040b56:	681b      	ldr	r3, [r3, #0]
 8040b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040b5a:	68fb      	ldr	r3, [r7, #12]
 8040b5c:	43db      	mvns	r3, r3
 8040b5e:	693a      	ldr	r2, [r7, #16]
 8040b60:	4013      	ands	r3, r2
 8040b62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8040b64:	683b      	ldr	r3, [r7, #0]
 8040b66:	685b      	ldr	r3, [r3, #4]
 8040b68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8040b6c:	2b00      	cmp	r3, #0
 8040b6e:	d003      	beq.n	8040b78 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8040b70:	693a      	ldr	r2, [r7, #16]
 8040b72:	68fb      	ldr	r3, [r7, #12]
 8040b74:	4313      	orrs	r3, r2
 8040b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8040b78:	4a14      	ldr	r2, [pc, #80]	; (8040bcc <HAL_GPIO_Init+0x2e0>)
 8040b7a:	693b      	ldr	r3, [r7, #16]
 8040b7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8040b7e:	4b13      	ldr	r3, [pc, #76]	; (8040bcc <HAL_GPIO_Init+0x2e0>)
 8040b80:	685b      	ldr	r3, [r3, #4]
 8040b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040b84:	68fb      	ldr	r3, [r7, #12]
 8040b86:	43db      	mvns	r3, r3
 8040b88:	693a      	ldr	r2, [r7, #16]
 8040b8a:	4013      	ands	r3, r2
 8040b8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8040b8e:	683b      	ldr	r3, [r7, #0]
 8040b90:	685b      	ldr	r3, [r3, #4]
 8040b92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8040b96:	2b00      	cmp	r3, #0
 8040b98:	d003      	beq.n	8040ba2 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8040b9a:	693a      	ldr	r2, [r7, #16]
 8040b9c:	68fb      	ldr	r3, [r7, #12]
 8040b9e:	4313      	orrs	r3, r2
 8040ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8040ba2:	4a0a      	ldr	r2, [pc, #40]	; (8040bcc <HAL_GPIO_Init+0x2e0>)
 8040ba4:	693b      	ldr	r3, [r7, #16]
 8040ba6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8040ba8:	697b      	ldr	r3, [r7, #20]
 8040baa:	3301      	adds	r3, #1
 8040bac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8040bae:	683b      	ldr	r3, [r7, #0]
 8040bb0:	681a      	ldr	r2, [r3, #0]
 8040bb2:	697b      	ldr	r3, [r7, #20]
 8040bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8040bb8:	2b00      	cmp	r3, #0
 8040bba:	f47f ae9f 	bne.w	80408fc <HAL_GPIO_Init+0x10>
  }
}
 8040bbe:	bf00      	nop
 8040bc0:	371c      	adds	r7, #28
 8040bc2:	46bd      	mov	sp, r7
 8040bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040bc8:	4770      	bx	lr
 8040bca:	bf00      	nop
 8040bcc:	4002f400 	.word	0x4002f400
 8040bd0:	42020000 	.word	0x42020000
 8040bd4:	42020400 	.word	0x42020400
 8040bd8:	42020800 	.word	0x42020800
 8040bdc:	42020c00 	.word	0x42020c00
 8040be0:	42021000 	.word	0x42021000
 8040be4:	42021400 	.word	0x42021400
 8040be8:	42021800 	.word	0x42021800

08040bec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8040bec:	b480      	push	{r7}
 8040bee:	b085      	sub	sp, #20
 8040bf0:	af00      	add	r7, sp, #0
 8040bf2:	6078      	str	r0, [r7, #4]
 8040bf4:	460b      	mov	r3, r1
 8040bf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != 0U)
 8040bf8:	687b      	ldr	r3, [r7, #4]
 8040bfa:	691a      	ldr	r2, [r3, #16]
 8040bfc:	887b      	ldrh	r3, [r7, #2]
 8040bfe:	4013      	ands	r3, r2
 8040c00:	2b00      	cmp	r3, #0
 8040c02:	d002      	beq.n	8040c0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8040c04:	2301      	movs	r3, #1
 8040c06:	73fb      	strb	r3, [r7, #15]
 8040c08:	e001      	b.n	8040c0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8040c0a:	2300      	movs	r3, #0
 8040c0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8040c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8040c10:	4618      	mov	r0, r3
 8040c12:	3714      	adds	r7, #20
 8040c14:	46bd      	mov	sp, r7
 8040c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c1a:	4770      	bx	lr

08040c1c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8040c1c:	b480      	push	{r7}
 8040c1e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8040c20:	4b04      	ldr	r3, [pc, #16]	; (8040c34 <HAL_PWREx_GetVoltageRange+0x18>)
 8040c22:	681b      	ldr	r3, [r3, #0]
 8040c24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8040c28:	4618      	mov	r0, r3
 8040c2a:	46bd      	mov	sp, r7
 8040c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c30:	4770      	bx	lr
 8040c32:	bf00      	nop
 8040c34:	40007000 	.word	0x40007000

08040c38 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8040c38:	b580      	push	{r7, lr}
 8040c3a:	b084      	sub	sp, #16
 8040c3c:	af00      	add	r7, sp, #0
 8040c3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8040c40:	4b27      	ldr	r3, [pc, #156]	; (8040ce0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8040c42:	681b      	ldr	r3, [r3, #0]
 8040c44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8040c48:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8040c4a:	f000 f851 	bl	8040cf0 <HAL_PWREx_SMPS_GetEffectiveMode>
 8040c4e:	4603      	mov	r3, r0
 8040c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8040c54:	d101      	bne.n	8040c5a <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8040c56:	2301      	movs	r3, #1
 8040c58:	e03e      	b.n	8040cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8040c5a:	4b21      	ldr	r3, [pc, #132]	; (8040ce0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8040c5c:	68db      	ldr	r3, [r3, #12]
 8040c5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8040c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8040c66:	d101      	bne.n	8040c6c <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8040c68:	2301      	movs	r3, #1
 8040c6a:	e035      	b.n	8040cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8040c6c:	68ba      	ldr	r2, [r7, #8]
 8040c6e:	687b      	ldr	r3, [r7, #4]
 8040c70:	429a      	cmp	r2, r3
 8040c72:	d101      	bne.n	8040c78 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8040c74:	2300      	movs	r3, #0
 8040c76:	e02f      	b.n	8040cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8040c78:	4b19      	ldr	r3, [pc, #100]	; (8040ce0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8040c7a:	681b      	ldr	r3, [r3, #0]
 8040c7c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8040c80:	4917      	ldr	r1, [pc, #92]	; (8040ce0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8040c82:	687b      	ldr	r3, [r7, #4]
 8040c84:	4313      	orrs	r3, r2
 8040c86:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8040c88:	4b16      	ldr	r3, [pc, #88]	; (8040ce4 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8040c8a:	681b      	ldr	r3, [r3, #0]
 8040c8c:	095b      	lsrs	r3, r3, #5
 8040c8e:	4a16      	ldr	r2, [pc, #88]	; (8040ce8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8040c90:	fba2 2303 	umull	r2, r3, r2, r3
 8040c94:	09db      	lsrs	r3, r3, #7
 8040c96:	2232      	movs	r2, #50	; 0x32
 8040c98:	fb02 f303 	mul.w	r3, r2, r3
 8040c9c:	4a13      	ldr	r2, [pc, #76]	; (8040cec <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8040c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8040ca2:	08db      	lsrs	r3, r3, #3
 8040ca4:	3301      	adds	r3, #1
 8040ca6:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8040ca8:	e002      	b.n	8040cb0 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8040caa:	68fb      	ldr	r3, [r7, #12]
 8040cac:	3b01      	subs	r3, #1
 8040cae:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8040cb0:	4b0b      	ldr	r3, [pc, #44]	; (8040ce0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8040cb2:	695b      	ldr	r3, [r3, #20]
 8040cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8040cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8040cbc:	d102      	bne.n	8040cc4 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8040cbe:	68fb      	ldr	r3, [r7, #12]
 8040cc0:	2b00      	cmp	r3, #0
 8040cc2:	d1f2      	bne.n	8040caa <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8040cc4:	4b06      	ldr	r3, [pc, #24]	; (8040ce0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8040cc6:	695b      	ldr	r3, [r3, #20]
 8040cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8040ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8040cd0:	d101      	bne.n	8040cd6 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8040cd2:	2303      	movs	r3, #3
 8040cd4:	e000      	b.n	8040cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8040cd6:	2300      	movs	r3, #0
}
 8040cd8:	4618      	mov	r0, r3
 8040cda:	3710      	adds	r7, #16
 8040cdc:	46bd      	mov	sp, r7
 8040cde:	bd80      	pop	{r7, pc}
 8040ce0:	40007000 	.word	0x40007000
 8040ce4:	20018000 	.word	0x20018000
 8040ce8:	0a7c5ac5 	.word	0x0a7c5ac5
 8040cec:	cccccccd 	.word	0xcccccccd

08040cf0 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8040cf0:	b480      	push	{r7}
 8040cf2:	b083      	sub	sp, #12
 8040cf4:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8040cf6:	4b0f      	ldr	r3, [pc, #60]	; (8040d34 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8040cf8:	691b      	ldr	r3, [r3, #16]
 8040cfa:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8040cfc:	683b      	ldr	r3, [r7, #0]
 8040cfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8040d02:	2b00      	cmp	r3, #0
 8040d04:	d003      	beq.n	8040d0e <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8040d06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8040d0a:	607b      	str	r3, [r7, #4]
 8040d0c:	e00a      	b.n	8040d24 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8040d0e:	683b      	ldr	r3, [r7, #0]
 8040d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8040d14:	2b00      	cmp	r3, #0
 8040d16:	d103      	bne.n	8040d20 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8040d18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8040d1c:	607b      	str	r3, [r7, #4]
 8040d1e:	e001      	b.n	8040d24 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8040d20:	2300      	movs	r3, #0
 8040d22:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8040d24:	687b      	ldr	r3, [r7, #4]
}
 8040d26:	4618      	mov	r0, r3
 8040d28:	370c      	adds	r7, #12
 8040d2a:	46bd      	mov	sp, r7
 8040d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d30:	4770      	bx	lr
 8040d32:	bf00      	nop
 8040d34:	40007000 	.word	0x40007000

08040d38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8040d38:	b580      	push	{r7, lr}
 8040d3a:	b088      	sub	sp, #32
 8040d3c:	af00      	add	r7, sp, #0
 8040d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8040d40:	687b      	ldr	r3, [r7, #4]
 8040d42:	2b00      	cmp	r3, #0
 8040d44:	d102      	bne.n	8040d4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8040d46:	2301      	movs	r3, #1
 8040d48:	f000 bc5c 	b.w	8041604 <HAL_RCC_OscConfig+0x8cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8040d4c:	4ba4      	ldr	r3, [pc, #656]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040d4e:	689b      	ldr	r3, [r3, #8]
 8040d50:	f003 030c 	and.w	r3, r3, #12
 8040d54:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8040d56:	4ba2      	ldr	r3, [pc, #648]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040d58:	68db      	ldr	r3, [r3, #12]
 8040d5a:	f003 0303 	and.w	r3, r3, #3
 8040d5e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8040d60:	687b      	ldr	r3, [r7, #4]
 8040d62:	681b      	ldr	r3, [r3, #0]
 8040d64:	f003 0310 	and.w	r3, r3, #16
 8040d68:	2b00      	cmp	r3, #0
 8040d6a:	f000 80e2 	beq.w	8040f32 <HAL_RCC_OscConfig+0x1fa>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8040d6e:	69bb      	ldr	r3, [r7, #24]
 8040d70:	2b00      	cmp	r3, #0
 8040d72:	d007      	beq.n	8040d84 <HAL_RCC_OscConfig+0x4c>
 8040d74:	69bb      	ldr	r3, [r7, #24]
 8040d76:	2b0c      	cmp	r3, #12
 8040d78:	f040 8089 	bne.w	8040e8e <HAL_RCC_OscConfig+0x156>
        ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8040d7c:	697b      	ldr	r3, [r7, #20]
 8040d7e:	2b01      	cmp	r3, #1
 8040d80:	f040 8085 	bne.w	8040e8e <HAL_RCC_OscConfig+0x156>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8040d84:	4b96      	ldr	r3, [pc, #600]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040d86:	681b      	ldr	r3, [r3, #0]
 8040d88:	f003 0302 	and.w	r3, r3, #2
 8040d8c:	2b00      	cmp	r3, #0
 8040d8e:	d006      	beq.n	8040d9e <HAL_RCC_OscConfig+0x66>
 8040d90:	687b      	ldr	r3, [r7, #4]
 8040d92:	69db      	ldr	r3, [r3, #28]
 8040d94:	2b00      	cmp	r3, #0
 8040d96:	d102      	bne.n	8040d9e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8040d98:	2301      	movs	r3, #1
 8040d9a:	f000 bc33 	b.w	8041604 <HAL_RCC_OscConfig+0x8cc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8040d9e:	687b      	ldr	r3, [r7, #4]
 8040da0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8040da2:	4b8f      	ldr	r3, [pc, #572]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040da4:	681b      	ldr	r3, [r3, #0]
 8040da6:	f003 0308 	and.w	r3, r3, #8
 8040daa:	2b00      	cmp	r3, #0
 8040dac:	d004      	beq.n	8040db8 <HAL_RCC_OscConfig+0x80>
 8040dae:	4b8c      	ldr	r3, [pc, #560]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040db0:	681b      	ldr	r3, [r3, #0]
 8040db2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8040db6:	e005      	b.n	8040dc4 <HAL_RCC_OscConfig+0x8c>
 8040db8:	4b89      	ldr	r3, [pc, #548]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8040dbe:	091b      	lsrs	r3, r3, #4
 8040dc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8040dc4:	4293      	cmp	r3, r2
 8040dc6:	d224      	bcs.n	8040e12 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8040dc8:	687b      	ldr	r3, [r7, #4]
 8040dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8040dcc:	4618      	mov	r0, r3
 8040dce:	f000 fde1 	bl	8041994 <RCC_SetFlashLatencyFromMSIRange>
 8040dd2:	4603      	mov	r3, r0
 8040dd4:	2b00      	cmp	r3, #0
 8040dd6:	d002      	beq.n	8040dde <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8040dd8:	2301      	movs	r3, #1
 8040dda:	f000 bc13 	b.w	8041604 <HAL_RCC_OscConfig+0x8cc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8040dde:	4b80      	ldr	r3, [pc, #512]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040de0:	681b      	ldr	r3, [r3, #0]
 8040de2:	4a7f      	ldr	r2, [pc, #508]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040de4:	f043 0308 	orr.w	r3, r3, #8
 8040de8:	6013      	str	r3, [r2, #0]
 8040dea:	4b7d      	ldr	r3, [pc, #500]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040dec:	681b      	ldr	r3, [r3, #0]
 8040dee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8040df2:	687b      	ldr	r3, [r7, #4]
 8040df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8040df6:	497a      	ldr	r1, [pc, #488]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040df8:	4313      	orrs	r3, r2
 8040dfa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8040dfc:	4b78      	ldr	r3, [pc, #480]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040dfe:	685b      	ldr	r3, [r3, #4]
 8040e00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8040e04:	687b      	ldr	r3, [r7, #4]
 8040e06:	6a1b      	ldr	r3, [r3, #32]
 8040e08:	021b      	lsls	r3, r3, #8
 8040e0a:	4975      	ldr	r1, [pc, #468]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040e0c:	4313      	orrs	r3, r2
 8040e0e:	604b      	str	r3, [r1, #4]
 8040e10:	e025      	b.n	8040e5e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8040e12:	4b73      	ldr	r3, [pc, #460]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040e14:	681b      	ldr	r3, [r3, #0]
 8040e16:	4a72      	ldr	r2, [pc, #456]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040e18:	f043 0308 	orr.w	r3, r3, #8
 8040e1c:	6013      	str	r3, [r2, #0]
 8040e1e:	4b70      	ldr	r3, [pc, #448]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040e20:	681b      	ldr	r3, [r3, #0]
 8040e22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8040e26:	687b      	ldr	r3, [r7, #4]
 8040e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8040e2a:	496d      	ldr	r1, [pc, #436]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040e2c:	4313      	orrs	r3, r2
 8040e2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8040e30:	4b6b      	ldr	r3, [pc, #428]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040e32:	685b      	ldr	r3, [r3, #4]
 8040e34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8040e38:	687b      	ldr	r3, [r7, #4]
 8040e3a:	6a1b      	ldr	r3, [r3, #32]
 8040e3c:	021b      	lsls	r3, r3, #8
 8040e3e:	4968      	ldr	r1, [pc, #416]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040e40:	4313      	orrs	r3, r2
 8040e42:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_CFGR_SWS_MSI)
 8040e44:	69bb      	ldr	r3, [r7, #24]
 8040e46:	2b00      	cmp	r3, #0
 8040e48:	d109      	bne.n	8040e5e <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8040e4a:	687b      	ldr	r3, [r7, #4]
 8040e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8040e4e:	4618      	mov	r0, r3
 8040e50:	f000 fda0 	bl	8041994 <RCC_SetFlashLatencyFromMSIRange>
 8040e54:	4603      	mov	r3, r0
 8040e56:	2b00      	cmp	r3, #0
 8040e58:	d001      	beq.n	8040e5e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8040e5a:	2301      	movs	r3, #1
 8040e5c:	e3d2      	b.n	8041604 <HAL_RCC_OscConfig+0x8cc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8040e5e:	f000 fcff 	bl	8041860 <HAL_RCC_GetSysClockFreq>
 8040e62:	4601      	mov	r1, r0
 8040e64:	4b5e      	ldr	r3, [pc, #376]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040e66:	689b      	ldr	r3, [r3, #8]
 8040e68:	091b      	lsrs	r3, r3, #4
 8040e6a:	f003 030f 	and.w	r3, r3, #15
 8040e6e:	4a5d      	ldr	r2, [pc, #372]	; (8040fe4 <HAL_RCC_OscConfig+0x2ac>)
 8040e70:	5cd3      	ldrb	r3, [r2, r3]
 8040e72:	fa21 f303 	lsr.w	r3, r1, r3
 8040e76:	4a5c      	ldr	r2, [pc, #368]	; (8040fe8 <HAL_RCC_OscConfig+0x2b0>)
 8040e78:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(TICK_INT_PRIORITY);
 8040e7a:	2000      	movs	r0, #0
 8040e7c:	f7ff fbd8 	bl	8040630 <HAL_InitTick>
 8040e80:	4603      	mov	r3, r0
 8040e82:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8040e84:	7bfb      	ldrb	r3, [r7, #15]
 8040e86:	2b00      	cmp	r3, #0
 8040e88:	d052      	beq.n	8040f30 <HAL_RCC_OscConfig+0x1f8>
        {
          return status;
 8040e8a:	7bfb      	ldrb	r3, [r7, #15]
 8040e8c:	e3ba      	b.n	8041604 <HAL_RCC_OscConfig+0x8cc>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8040e8e:	687b      	ldr	r3, [r7, #4]
 8040e90:	69db      	ldr	r3, [r3, #28]
 8040e92:	2b00      	cmp	r3, #0
 8040e94:	d032      	beq.n	8040efc <HAL_RCC_OscConfig+0x1c4>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8040e96:	4b52      	ldr	r3, [pc, #328]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040e98:	681b      	ldr	r3, [r3, #0]
 8040e9a:	4a51      	ldr	r2, [pc, #324]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040e9c:	f043 0301 	orr.w	r3, r3, #1
 8040ea0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8040ea2:	f7ff fc11 	bl	80406c8 <HAL_GetTick>
 8040ea6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8040ea8:	e008      	b.n	8040ebc <HAL_RCC_OscConfig+0x184>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8040eaa:	f7ff fc0d 	bl	80406c8 <HAL_GetTick>
 8040eae:	4602      	mov	r2, r0
 8040eb0:	693b      	ldr	r3, [r7, #16]
 8040eb2:	1ad3      	subs	r3, r2, r3
 8040eb4:	2b02      	cmp	r3, #2
 8040eb6:	d901      	bls.n	8040ebc <HAL_RCC_OscConfig+0x184>
          {
            return HAL_TIMEOUT;
 8040eb8:	2303      	movs	r3, #3
 8040eba:	e3a3      	b.n	8041604 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8040ebc:	4b48      	ldr	r3, [pc, #288]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040ebe:	681b      	ldr	r3, [r3, #0]
 8040ec0:	f003 0302 	and.w	r3, r3, #2
 8040ec4:	2b00      	cmp	r3, #0
 8040ec6:	d0f0      	beq.n	8040eaa <HAL_RCC_OscConfig+0x172>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8040ec8:	4b45      	ldr	r3, [pc, #276]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040eca:	681b      	ldr	r3, [r3, #0]
 8040ecc:	4a44      	ldr	r2, [pc, #272]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040ece:	f043 0308 	orr.w	r3, r3, #8
 8040ed2:	6013      	str	r3, [r2, #0]
 8040ed4:	4b42      	ldr	r3, [pc, #264]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040ed6:	681b      	ldr	r3, [r3, #0]
 8040ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8040edc:	687b      	ldr	r3, [r7, #4]
 8040ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8040ee0:	493f      	ldr	r1, [pc, #252]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040ee2:	4313      	orrs	r3, r2
 8040ee4:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8040ee6:	4b3e      	ldr	r3, [pc, #248]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040ee8:	685b      	ldr	r3, [r3, #4]
 8040eea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8040eee:	687b      	ldr	r3, [r7, #4]
 8040ef0:	6a1b      	ldr	r3, [r3, #32]
 8040ef2:	021b      	lsls	r3, r3, #8
 8040ef4:	493a      	ldr	r1, [pc, #232]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040ef6:	4313      	orrs	r3, r2
 8040ef8:	604b      	str	r3, [r1, #4]
 8040efa:	e01a      	b.n	8040f32 <HAL_RCC_OscConfig+0x1fa>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8040efc:	4b38      	ldr	r3, [pc, #224]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040efe:	681b      	ldr	r3, [r3, #0]
 8040f00:	4a37      	ldr	r2, [pc, #220]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040f02:	f023 0301 	bic.w	r3, r3, #1
 8040f06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8040f08:	f7ff fbde 	bl	80406c8 <HAL_GetTick>
 8040f0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8040f0e:	e008      	b.n	8040f22 <HAL_RCC_OscConfig+0x1ea>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8040f10:	f7ff fbda 	bl	80406c8 <HAL_GetTick>
 8040f14:	4602      	mov	r2, r0
 8040f16:	693b      	ldr	r3, [r7, #16]
 8040f18:	1ad3      	subs	r3, r2, r3
 8040f1a:	2b02      	cmp	r3, #2
 8040f1c:	d901      	bls.n	8040f22 <HAL_RCC_OscConfig+0x1ea>
          {
            return HAL_TIMEOUT;
 8040f1e:	2303      	movs	r3, #3
 8040f20:	e370      	b.n	8041604 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8040f22:	4b2f      	ldr	r3, [pc, #188]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040f24:	681b      	ldr	r3, [r3, #0]
 8040f26:	f003 0302 	and.w	r3, r3, #2
 8040f2a:	2b00      	cmp	r3, #0
 8040f2c:	d1f0      	bne.n	8040f10 <HAL_RCC_OscConfig+0x1d8>
 8040f2e:	e000      	b.n	8040f32 <HAL_RCC_OscConfig+0x1fa>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8040f30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8040f32:	687b      	ldr	r3, [r7, #4]
 8040f34:	681b      	ldr	r3, [r3, #0]
 8040f36:	f003 0301 	and.w	r3, r3, #1
 8040f3a:	2b00      	cmp	r3, #0
 8040f3c:	d072      	beq.n	8041024 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8040f3e:	69bb      	ldr	r3, [r7, #24]
 8040f40:	2b08      	cmp	r3, #8
 8040f42:	d005      	beq.n	8040f50 <HAL_RCC_OscConfig+0x218>
 8040f44:	69bb      	ldr	r3, [r7, #24]
 8040f46:	2b0c      	cmp	r3, #12
 8040f48:	d10e      	bne.n	8040f68 <HAL_RCC_OscConfig+0x230>
        ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8040f4a:	697b      	ldr	r3, [r7, #20]
 8040f4c:	2b03      	cmp	r3, #3
 8040f4e:	d10b      	bne.n	8040f68 <HAL_RCC_OscConfig+0x230>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8040f50:	4b23      	ldr	r3, [pc, #140]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040f52:	681b      	ldr	r3, [r3, #0]
 8040f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8040f58:	2b00      	cmp	r3, #0
 8040f5a:	d062      	beq.n	8041022 <HAL_RCC_OscConfig+0x2ea>
 8040f5c:	687b      	ldr	r3, [r7, #4]
 8040f5e:	685b      	ldr	r3, [r3, #4]
 8040f60:	2b00      	cmp	r3, #0
 8040f62:	d15e      	bne.n	8041022 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8040f64:	2301      	movs	r3, #1
 8040f66:	e34d      	b.n	8041604 <HAL_RCC_OscConfig+0x8cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8040f68:	687b      	ldr	r3, [r7, #4]
 8040f6a:	685b      	ldr	r3, [r3, #4]
 8040f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8040f70:	d106      	bne.n	8040f80 <HAL_RCC_OscConfig+0x248>
 8040f72:	4b1b      	ldr	r3, [pc, #108]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040f74:	681b      	ldr	r3, [r3, #0]
 8040f76:	4a1a      	ldr	r2, [pc, #104]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8040f7c:	6013      	str	r3, [r2, #0]
 8040f7e:	e01d      	b.n	8040fbc <HAL_RCC_OscConfig+0x284>
 8040f80:	687b      	ldr	r3, [r7, #4]
 8040f82:	685b      	ldr	r3, [r3, #4]
 8040f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8040f88:	d10c      	bne.n	8040fa4 <HAL_RCC_OscConfig+0x26c>
 8040f8a:	4b15      	ldr	r3, [pc, #84]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040f8c:	681b      	ldr	r3, [r3, #0]
 8040f8e:	4a14      	ldr	r2, [pc, #80]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8040f94:	6013      	str	r3, [r2, #0]
 8040f96:	4b12      	ldr	r3, [pc, #72]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040f98:	681b      	ldr	r3, [r3, #0]
 8040f9a:	4a11      	ldr	r2, [pc, #68]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8040fa0:	6013      	str	r3, [r2, #0]
 8040fa2:	e00b      	b.n	8040fbc <HAL_RCC_OscConfig+0x284>
 8040fa4:	4b0e      	ldr	r3, [pc, #56]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040fa6:	681b      	ldr	r3, [r3, #0]
 8040fa8:	4a0d      	ldr	r2, [pc, #52]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8040fae:	6013      	str	r3, [r2, #0]
 8040fb0:	4b0b      	ldr	r3, [pc, #44]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040fb2:	681b      	ldr	r3, [r3, #0]
 8040fb4:	4a0a      	ldr	r2, [pc, #40]	; (8040fe0 <HAL_RCC_OscConfig+0x2a8>)
 8040fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8040fba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8040fbc:	687b      	ldr	r3, [r7, #4]
 8040fbe:	685b      	ldr	r3, [r3, #4]
 8040fc0:	2b00      	cmp	r3, #0
 8040fc2:	d01a      	beq.n	8040ffa <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8040fc4:	f7ff fb80 	bl	80406c8 <HAL_GetTick>
 8040fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8040fca:	e00f      	b.n	8040fec <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8040fcc:	f7ff fb7c 	bl	80406c8 <HAL_GetTick>
 8040fd0:	4602      	mov	r2, r0
 8040fd2:	693b      	ldr	r3, [r7, #16]
 8040fd4:	1ad3      	subs	r3, r2, r3
 8040fd6:	2b64      	cmp	r3, #100	; 0x64
 8040fd8:	d908      	bls.n	8040fec <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8040fda:	2303      	movs	r3, #3
 8040fdc:	e312      	b.n	8041604 <HAL_RCC_OscConfig+0x8cc>
 8040fde:	bf00      	nop
 8040fe0:	40021000 	.word	0x40021000
 8040fe4:	08042a00 	.word	0x08042a00
 8040fe8:	20018000 	.word	0x20018000
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8040fec:	4baa      	ldr	r3, [pc, #680]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 8040fee:	681b      	ldr	r3, [r3, #0]
 8040ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8040ff4:	2b00      	cmp	r3, #0
 8040ff6:	d0e9      	beq.n	8040fcc <HAL_RCC_OscConfig+0x294>
 8040ff8:	e014      	b.n	8041024 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8040ffa:	f7ff fb65 	bl	80406c8 <HAL_GetTick>
 8040ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8041000:	e008      	b.n	8041014 <HAL_RCC_OscConfig+0x2dc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8041002:	f7ff fb61 	bl	80406c8 <HAL_GetTick>
 8041006:	4602      	mov	r2, r0
 8041008:	693b      	ldr	r3, [r7, #16]
 804100a:	1ad3      	subs	r3, r2, r3
 804100c:	2b64      	cmp	r3, #100	; 0x64
 804100e:	d901      	bls.n	8041014 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8041010:	2303      	movs	r3, #3
 8041012:	e2f7      	b.n	8041604 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8041014:	4ba0      	ldr	r3, [pc, #640]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 8041016:	681b      	ldr	r3, [r3, #0]
 8041018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804101c:	2b00      	cmp	r3, #0
 804101e:	d1f0      	bne.n	8041002 <HAL_RCC_OscConfig+0x2ca>
 8041020:	e000      	b.n	8041024 <HAL_RCC_OscConfig+0x2ec>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8041022:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8041024:	687b      	ldr	r3, [r7, #4]
 8041026:	681b      	ldr	r3, [r3, #0]
 8041028:	f003 0302 	and.w	r3, r3, #2
 804102c:	2b00      	cmp	r3, #0
 804102e:	d060      	beq.n	80410f2 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8041030:	69bb      	ldr	r3, [r7, #24]
 8041032:	2b04      	cmp	r3, #4
 8041034:	d005      	beq.n	8041042 <HAL_RCC_OscConfig+0x30a>
 8041036:	69bb      	ldr	r3, [r7, #24]
 8041038:	2b0c      	cmp	r3, #12
 804103a:	d119      	bne.n	8041070 <HAL_RCC_OscConfig+0x338>
        ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 804103c:	697b      	ldr	r3, [r7, #20]
 804103e:	2b02      	cmp	r3, #2
 8041040:	d116      	bne.n	8041070 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8041042:	4b95      	ldr	r3, [pc, #596]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 8041044:	681b      	ldr	r3, [r3, #0]
 8041046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804104a:	2b00      	cmp	r3, #0
 804104c:	d005      	beq.n	804105a <HAL_RCC_OscConfig+0x322>
 804104e:	687b      	ldr	r3, [r7, #4]
 8041050:	68db      	ldr	r3, [r3, #12]
 8041052:	2b00      	cmp	r3, #0
 8041054:	d101      	bne.n	804105a <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8041056:	2301      	movs	r3, #1
 8041058:	e2d4      	b.n	8041604 <HAL_RCC_OscConfig+0x8cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 804105a:	4b8f      	ldr	r3, [pc, #572]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 804105c:	685b      	ldr	r3, [r3, #4]
 804105e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8041062:	687b      	ldr	r3, [r7, #4]
 8041064:	691b      	ldr	r3, [r3, #16]
 8041066:	061b      	lsls	r3, r3, #24
 8041068:	498b      	ldr	r1, [pc, #556]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 804106a:	4313      	orrs	r3, r2
 804106c:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 804106e:	e040      	b.n	80410f2 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8041070:	687b      	ldr	r3, [r7, #4]
 8041072:	68db      	ldr	r3, [r3, #12]
 8041074:	2b00      	cmp	r3, #0
 8041076:	d023      	beq.n	80410c0 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8041078:	4b87      	ldr	r3, [pc, #540]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 804107a:	681b      	ldr	r3, [r3, #0]
 804107c:	4a86      	ldr	r2, [pc, #536]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 804107e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041084:	f7ff fb20 	bl	80406c8 <HAL_GetTick>
 8041088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 804108a:	e008      	b.n	804109e <HAL_RCC_OscConfig+0x366>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 804108c:	f7ff fb1c 	bl	80406c8 <HAL_GetTick>
 8041090:	4602      	mov	r2, r0
 8041092:	693b      	ldr	r3, [r7, #16]
 8041094:	1ad3      	subs	r3, r2, r3
 8041096:	2b02      	cmp	r3, #2
 8041098:	d901      	bls.n	804109e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 804109a:	2303      	movs	r3, #3
 804109c:	e2b2      	b.n	8041604 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 804109e:	4b7e      	ldr	r3, [pc, #504]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 80410a0:	681b      	ldr	r3, [r3, #0]
 80410a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80410a6:	2b00      	cmp	r3, #0
 80410a8:	d0f0      	beq.n	804108c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80410aa:	4b7b      	ldr	r3, [pc, #492]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 80410ac:	685b      	ldr	r3, [r3, #4]
 80410ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80410b2:	687b      	ldr	r3, [r7, #4]
 80410b4:	691b      	ldr	r3, [r3, #16]
 80410b6:	061b      	lsls	r3, r3, #24
 80410b8:	4977      	ldr	r1, [pc, #476]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 80410ba:	4313      	orrs	r3, r2
 80410bc:	604b      	str	r3, [r1, #4]
 80410be:	e018      	b.n	80410f2 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80410c0:	4b75      	ldr	r3, [pc, #468]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 80410c2:	681b      	ldr	r3, [r3, #0]
 80410c4:	4a74      	ldr	r2, [pc, #464]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 80410c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80410ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80410cc:	f7ff fafc 	bl	80406c8 <HAL_GetTick>
 80410d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80410d2:	e008      	b.n	80410e6 <HAL_RCC_OscConfig+0x3ae>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80410d4:	f7ff faf8 	bl	80406c8 <HAL_GetTick>
 80410d8:	4602      	mov	r2, r0
 80410da:	693b      	ldr	r3, [r7, #16]
 80410dc:	1ad3      	subs	r3, r2, r3
 80410de:	2b02      	cmp	r3, #2
 80410e0:	d901      	bls.n	80410e6 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80410e2:	2303      	movs	r3, #3
 80410e4:	e28e      	b.n	8041604 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80410e6:	4b6c      	ldr	r3, [pc, #432]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 80410e8:	681b      	ldr	r3, [r3, #0]
 80410ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80410ee:	2b00      	cmp	r3, #0
 80410f0:	d1f0      	bne.n	80410d4 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80410f2:	687b      	ldr	r3, [r7, #4]
 80410f4:	681b      	ldr	r3, [r3, #0]
 80410f6:	f003 0308 	and.w	r3, r3, #8
 80410fa:	2b00      	cmp	r3, #0
 80410fc:	d051      	beq.n	80411a2 <HAL_RCC_OscConfig+0x46a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80410fe:	687b      	ldr	r3, [r7, #4]
 8041100:	695b      	ldr	r3, [r3, #20]
 8041102:	2b00      	cmp	r3, #0
 8041104:	d031      	beq.n	804116a <HAL_RCC_OscConfig+0x432>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8041106:	687b      	ldr	r3, [r7, #4]
 8041108:	699b      	ldr	r3, [r3, #24]
 804110a:	2b00      	cmp	r3, #0
 804110c:	d108      	bne.n	8041120 <HAL_RCC_OscConfig+0x3e8>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 804110e:	4b62      	ldr	r3, [pc, #392]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 8041110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041114:	4a60      	ldr	r2, [pc, #384]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 8041116:	f023 0310 	bic.w	r3, r3, #16
 804111a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 804111e:	e007      	b.n	8041130 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8041120:	4b5d      	ldr	r3, [pc, #372]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 8041122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041126:	4a5c      	ldr	r2, [pc, #368]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 8041128:	f043 0310 	orr.w	r3, r3, #16
 804112c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8041130:	4b59      	ldr	r3, [pc, #356]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 8041132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041136:	4a58      	ldr	r2, [pc, #352]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 8041138:	f043 0301 	orr.w	r3, r3, #1
 804113c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041140:	f7ff fac2 	bl	80406c8 <HAL_GetTick>
 8041144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8041146:	e008      	b.n	804115a <HAL_RCC_OscConfig+0x422>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8041148:	f7ff fabe 	bl	80406c8 <HAL_GetTick>
 804114c:	4602      	mov	r2, r0
 804114e:	693b      	ldr	r3, [r7, #16]
 8041150:	1ad3      	subs	r3, r2, r3
 8041152:	2b07      	cmp	r3, #7
 8041154:	d901      	bls.n	804115a <HAL_RCC_OscConfig+0x422>
        {
          return HAL_TIMEOUT;
 8041156:	2303      	movs	r3, #3
 8041158:	e254      	b.n	8041604 <HAL_RCC_OscConfig+0x8cc>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 804115a:	4b4f      	ldr	r3, [pc, #316]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 804115c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041160:	f003 0302 	and.w	r3, r3, #2
 8041164:	2b00      	cmp	r3, #0
 8041166:	d0ef      	beq.n	8041148 <HAL_RCC_OscConfig+0x410>
 8041168:	e01b      	b.n	80411a2 <HAL_RCC_OscConfig+0x46a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 804116a:	4b4b      	ldr	r3, [pc, #300]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 804116c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041170:	4a49      	ldr	r2, [pc, #292]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 8041172:	f023 0301 	bic.w	r3, r3, #1
 8041176:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804117a:	f7ff faa5 	bl	80406c8 <HAL_GetTick>
 804117e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8041180:	e008      	b.n	8041194 <HAL_RCC_OscConfig+0x45c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8041182:	f7ff faa1 	bl	80406c8 <HAL_GetTick>
 8041186:	4602      	mov	r2, r0
 8041188:	693b      	ldr	r3, [r7, #16]
 804118a:	1ad3      	subs	r3, r2, r3
 804118c:	2b07      	cmp	r3, #7
 804118e:	d901      	bls.n	8041194 <HAL_RCC_OscConfig+0x45c>
        {
          return HAL_TIMEOUT;
 8041190:	2303      	movs	r3, #3
 8041192:	e237      	b.n	8041604 <HAL_RCC_OscConfig+0x8cc>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8041194:	4b40      	ldr	r3, [pc, #256]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 8041196:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 804119a:	f003 0302 	and.w	r3, r3, #2
 804119e:	2b00      	cmp	r3, #0
 80411a0:	d1ef      	bne.n	8041182 <HAL_RCC_OscConfig+0x44a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80411a2:	687b      	ldr	r3, [r7, #4]
 80411a4:	681b      	ldr	r3, [r3, #0]
 80411a6:	f003 0304 	and.w	r3, r3, #4
 80411aa:	2b00      	cmp	r3, #0
 80411ac:	f000 8109 	beq.w	80413c2 <HAL_RCC_OscConfig+0x68a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80411b0:	2300      	movs	r3, #0
 80411b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80411b4:	4b38      	ldr	r3, [pc, #224]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 80411b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80411b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80411bc:	2b00      	cmp	r3, #0
 80411be:	d10d      	bne.n	80411dc <HAL_RCC_OscConfig+0x4a4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80411c0:	4b35      	ldr	r3, [pc, #212]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 80411c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80411c4:	4a34      	ldr	r2, [pc, #208]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 80411c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80411ca:	6593      	str	r3, [r2, #88]	; 0x58
 80411cc:	4b32      	ldr	r3, [pc, #200]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 80411ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80411d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80411d4:	60bb      	str	r3, [r7, #8]
 80411d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80411d8:	2301      	movs	r3, #1
 80411da:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80411dc:	4b2f      	ldr	r3, [pc, #188]	; (804129c <HAL_RCC_OscConfig+0x564>)
 80411de:	681b      	ldr	r3, [r3, #0]
 80411e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80411e4:	2b00      	cmp	r3, #0
 80411e6:	d118      	bne.n	804121a <HAL_RCC_OscConfig+0x4e2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80411e8:	4b2c      	ldr	r3, [pc, #176]	; (804129c <HAL_RCC_OscConfig+0x564>)
 80411ea:	681b      	ldr	r3, [r3, #0]
 80411ec:	4a2b      	ldr	r2, [pc, #172]	; (804129c <HAL_RCC_OscConfig+0x564>)
 80411ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80411f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80411f4:	f7ff fa68 	bl	80406c8 <HAL_GetTick>
 80411f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80411fa:	e008      	b.n	804120e <HAL_RCC_OscConfig+0x4d6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80411fc:	f7ff fa64 	bl	80406c8 <HAL_GetTick>
 8041200:	4602      	mov	r2, r0
 8041202:	693b      	ldr	r3, [r7, #16]
 8041204:	1ad3      	subs	r3, r2, r3
 8041206:	2b02      	cmp	r3, #2
 8041208:	d901      	bls.n	804120e <HAL_RCC_OscConfig+0x4d6>
        {
          return HAL_TIMEOUT;
 804120a:	2303      	movs	r3, #3
 804120c:	e1fa      	b.n	8041604 <HAL_RCC_OscConfig+0x8cc>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 804120e:	4b23      	ldr	r3, [pc, #140]	; (804129c <HAL_RCC_OscConfig+0x564>)
 8041210:	681b      	ldr	r3, [r3, #0]
 8041212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041216:	2b00      	cmp	r3, #0
 8041218:	d0f0      	beq.n	80411fc <HAL_RCC_OscConfig+0x4c4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 804121a:	687b      	ldr	r3, [r7, #4]
 804121c:	689b      	ldr	r3, [r3, #8]
 804121e:	f003 0301 	and.w	r3, r3, #1
 8041222:	2b00      	cmp	r3, #0
 8041224:	d01f      	beq.n	8041266 <HAL_RCC_OscConfig+0x52e>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8041226:	687b      	ldr	r3, [r7, #4]
 8041228:	689b      	ldr	r3, [r3, #8]
 804122a:	f003 0304 	and.w	r3, r3, #4
 804122e:	2b00      	cmp	r3, #0
 8041230:	d010      	beq.n	8041254 <HAL_RCC_OscConfig+0x51c>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8041232:	4b19      	ldr	r3, [pc, #100]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 8041234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041238:	4a17      	ldr	r2, [pc, #92]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 804123a:	f043 0304 	orr.w	r3, r3, #4
 804123e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8041242:	4b15      	ldr	r3, [pc, #84]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 8041244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041248:	4a13      	ldr	r2, [pc, #76]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 804124a:	f043 0301 	orr.w	r3, r3, #1
 804124e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8041252:	e018      	b.n	8041286 <HAL_RCC_OscConfig+0x54e>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8041254:	4b10      	ldr	r3, [pc, #64]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 8041256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804125a:	4a0f      	ldr	r2, [pc, #60]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 804125c:	f043 0301 	orr.w	r3, r3, #1
 8041260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8041264:	e00f      	b.n	8041286 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8041266:	4b0c      	ldr	r3, [pc, #48]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 8041268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804126c:	4a0a      	ldr	r2, [pc, #40]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 804126e:	f023 0301 	bic.w	r3, r3, #1
 8041272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8041276:	4b08      	ldr	r3, [pc, #32]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 8041278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804127c:	4a06      	ldr	r2, [pc, #24]	; (8041298 <HAL_RCC_OscConfig+0x560>)
 804127e:	f023 0304 	bic.w	r3, r3, #4
 8041282:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8041286:	687b      	ldr	r3, [r7, #4]
 8041288:	689b      	ldr	r3, [r3, #8]
 804128a:	2b00      	cmp	r3, #0
 804128c:	d058      	beq.n	8041340 <HAL_RCC_OscConfig+0x608>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804128e:	f7ff fa1b 	bl	80406c8 <HAL_GetTick>
 8041292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8041294:	e00f      	b.n	80412b6 <HAL_RCC_OscConfig+0x57e>
 8041296:	bf00      	nop
 8041298:	40021000 	.word	0x40021000
 804129c:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80412a0:	f7ff fa12 	bl	80406c8 <HAL_GetTick>
 80412a4:	4602      	mov	r2, r0
 80412a6:	693b      	ldr	r3, [r7, #16]
 80412a8:	1ad3      	subs	r3, r2, r3
 80412aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80412ae:	4293      	cmp	r3, r2
 80412b0:	d901      	bls.n	80412b6 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80412b2:	2303      	movs	r3, #3
 80412b4:	e1a6      	b.n	8041604 <HAL_RCC_OscConfig+0x8cc>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80412b6:	4bb1      	ldr	r3, [pc, #708]	; (804157c <HAL_RCC_OscConfig+0x844>)
 80412b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80412bc:	f003 0302 	and.w	r3, r3, #2
 80412c0:	2b00      	cmp	r3, #0
 80412c2:	d0ed      	beq.n	80412a0 <HAL_RCC_OscConfig+0x568>
        }
      }

      /* Enable LSESYS additionnally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80412c4:	687b      	ldr	r3, [r7, #4]
 80412c6:	689b      	ldr	r3, [r3, #8]
 80412c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80412cc:	2b00      	cmp	r3, #0
 80412ce:	d01b      	beq.n	8041308 <HAL_RCC_OscConfig+0x5d0>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80412d0:	4baa      	ldr	r3, [pc, #680]	; (804157c <HAL_RCC_OscConfig+0x844>)
 80412d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80412d6:	4aa9      	ldr	r2, [pc, #676]	; (804157c <HAL_RCC_OscConfig+0x844>)
 80412d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80412dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80412e0:	e00a      	b.n	80412f8 <HAL_RCC_OscConfig+0x5c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80412e2:	f7ff f9f1 	bl	80406c8 <HAL_GetTick>
 80412e6:	4602      	mov	r2, r0
 80412e8:	693b      	ldr	r3, [r7, #16]
 80412ea:	1ad3      	subs	r3, r2, r3
 80412ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80412f0:	4293      	cmp	r3, r2
 80412f2:	d901      	bls.n	80412f8 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80412f4:	2303      	movs	r3, #3
 80412f6:	e185      	b.n	8041604 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80412f8:	4ba0      	ldr	r3, [pc, #640]	; (804157c <HAL_RCC_OscConfig+0x844>)
 80412fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80412fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8041302:	2b00      	cmp	r3, #0
 8041304:	d0ed      	beq.n	80412e2 <HAL_RCC_OscConfig+0x5aa>
 8041306:	e053      	b.n	80413b0 <HAL_RCC_OscConfig+0x678>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8041308:	4b9c      	ldr	r3, [pc, #624]	; (804157c <HAL_RCC_OscConfig+0x844>)
 804130a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804130e:	4a9b      	ldr	r2, [pc, #620]	; (804157c <HAL_RCC_OscConfig+0x844>)
 8041310:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8041314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8041318:	e00a      	b.n	8041330 <HAL_RCC_OscConfig+0x5f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 804131a:	f7ff f9d5 	bl	80406c8 <HAL_GetTick>
 804131e:	4602      	mov	r2, r0
 8041320:	693b      	ldr	r3, [r7, #16]
 8041322:	1ad3      	subs	r3, r2, r3
 8041324:	f241 3288 	movw	r2, #5000	; 0x1388
 8041328:	4293      	cmp	r3, r2
 804132a:	d901      	bls.n	8041330 <HAL_RCC_OscConfig+0x5f8>
          {
            return HAL_TIMEOUT;
 804132c:	2303      	movs	r3, #3
 804132e:	e169      	b.n	8041604 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8041330:	4b92      	ldr	r3, [pc, #584]	; (804157c <HAL_RCC_OscConfig+0x844>)
 8041332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 804133a:	2b00      	cmp	r3, #0
 804133c:	d1ed      	bne.n	804131a <HAL_RCC_OscConfig+0x5e2>
 804133e:	e037      	b.n	80413b0 <HAL_RCC_OscConfig+0x678>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041340:	f7ff f9c2 	bl	80406c8 <HAL_GetTick>
 8041344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8041346:	e00a      	b.n	804135e <HAL_RCC_OscConfig+0x626>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8041348:	f7ff f9be 	bl	80406c8 <HAL_GetTick>
 804134c:	4602      	mov	r2, r0
 804134e:	693b      	ldr	r3, [r7, #16]
 8041350:	1ad3      	subs	r3, r2, r3
 8041352:	f241 3288 	movw	r2, #5000	; 0x1388
 8041356:	4293      	cmp	r3, r2
 8041358:	d901      	bls.n	804135e <HAL_RCC_OscConfig+0x626>
        {
          return HAL_TIMEOUT;
 804135a:	2303      	movs	r3, #3
 804135c:	e152      	b.n	8041604 <HAL_RCC_OscConfig+0x8cc>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 804135e:	4b87      	ldr	r3, [pc, #540]	; (804157c <HAL_RCC_OscConfig+0x844>)
 8041360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041364:	f003 0302 	and.w	r3, r3, #2
 8041368:	2b00      	cmp	r3, #0
 804136a:	d1ed      	bne.n	8041348 <HAL_RCC_OscConfig+0x610>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 804136c:	4b83      	ldr	r3, [pc, #524]	; (804157c <HAL_RCC_OscConfig+0x844>)
 804136e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8041376:	2b00      	cmp	r3, #0
 8041378:	d01a      	beq.n	80413b0 <HAL_RCC_OscConfig+0x678>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 804137a:	4b80      	ldr	r3, [pc, #512]	; (804157c <HAL_RCC_OscConfig+0x844>)
 804137c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041380:	4a7e      	ldr	r2, [pc, #504]	; (804157c <HAL_RCC_OscConfig+0x844>)
 8041382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8041386:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 804138a:	e00a      	b.n	80413a2 <HAL_RCC_OscConfig+0x66a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 804138c:	f7ff f99c 	bl	80406c8 <HAL_GetTick>
 8041390:	4602      	mov	r2, r0
 8041392:	693b      	ldr	r3, [r7, #16]
 8041394:	1ad3      	subs	r3, r2, r3
 8041396:	f241 3288 	movw	r2, #5000	; 0x1388
 804139a:	4293      	cmp	r3, r2
 804139c:	d901      	bls.n	80413a2 <HAL_RCC_OscConfig+0x66a>
          {
            return HAL_TIMEOUT;
 804139e:	2303      	movs	r3, #3
 80413a0:	e130      	b.n	8041604 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80413a2:	4b76      	ldr	r3, [pc, #472]	; (804157c <HAL_RCC_OscConfig+0x844>)
 80413a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80413a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80413ac:	2b00      	cmp	r3, #0
 80413ae:	d1ed      	bne.n	804138c <HAL_RCC_OscConfig+0x654>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80413b0:	7ffb      	ldrb	r3, [r7, #31]
 80413b2:	2b01      	cmp	r3, #1
 80413b4:	d105      	bne.n	80413c2 <HAL_RCC_OscConfig+0x68a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80413b6:	4b71      	ldr	r3, [pc, #452]	; (804157c <HAL_RCC_OscConfig+0x844>)
 80413b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80413ba:	4a70      	ldr	r2, [pc, #448]	; (804157c <HAL_RCC_OscConfig+0x844>)
 80413bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80413c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80413c2:	687b      	ldr	r3, [r7, #4]
 80413c4:	681b      	ldr	r3, [r3, #0]
 80413c6:	f003 0320 	and.w	r3, r3, #32
 80413ca:	2b00      	cmp	r3, #0
 80413cc:	d03c      	beq.n	8041448 <HAL_RCC_OscConfig+0x710>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80413ce:	687b      	ldr	r3, [r7, #4]
 80413d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80413d2:	2b00      	cmp	r3, #0
 80413d4:	d01c      	beq.n	8041410 <HAL_RCC_OscConfig+0x6d8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80413d6:	4b69      	ldr	r3, [pc, #420]	; (804157c <HAL_RCC_OscConfig+0x844>)
 80413d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80413dc:	4a67      	ldr	r2, [pc, #412]	; (804157c <HAL_RCC_OscConfig+0x844>)
 80413de:	f043 0301 	orr.w	r3, r3, #1
 80413e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80413e6:	f7ff f96f 	bl	80406c8 <HAL_GetTick>
 80413ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80413ec:	e008      	b.n	8041400 <HAL_RCC_OscConfig+0x6c8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80413ee:	f7ff f96b 	bl	80406c8 <HAL_GetTick>
 80413f2:	4602      	mov	r2, r0
 80413f4:	693b      	ldr	r3, [r7, #16]
 80413f6:	1ad3      	subs	r3, r2, r3
 80413f8:	2b02      	cmp	r3, #2
 80413fa:	d901      	bls.n	8041400 <HAL_RCC_OscConfig+0x6c8>
        {
          return HAL_TIMEOUT;
 80413fc:	2303      	movs	r3, #3
 80413fe:	e101      	b.n	8041604 <HAL_RCC_OscConfig+0x8cc>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8041400:	4b5e      	ldr	r3, [pc, #376]	; (804157c <HAL_RCC_OscConfig+0x844>)
 8041402:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8041406:	f003 0302 	and.w	r3, r3, #2
 804140a:	2b00      	cmp	r3, #0
 804140c:	d0ef      	beq.n	80413ee <HAL_RCC_OscConfig+0x6b6>
 804140e:	e01b      	b.n	8041448 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8041410:	4b5a      	ldr	r3, [pc, #360]	; (804157c <HAL_RCC_OscConfig+0x844>)
 8041412:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8041416:	4a59      	ldr	r2, [pc, #356]	; (804157c <HAL_RCC_OscConfig+0x844>)
 8041418:	f023 0301 	bic.w	r3, r3, #1
 804141c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041420:	f7ff f952 	bl	80406c8 <HAL_GetTick>
 8041424:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8041426:	e008      	b.n	804143a <HAL_RCC_OscConfig+0x702>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8041428:	f7ff f94e 	bl	80406c8 <HAL_GetTick>
 804142c:	4602      	mov	r2, r0
 804142e:	693b      	ldr	r3, [r7, #16]
 8041430:	1ad3      	subs	r3, r2, r3
 8041432:	2b02      	cmp	r3, #2
 8041434:	d901      	bls.n	804143a <HAL_RCC_OscConfig+0x702>
        {
          return HAL_TIMEOUT;
 8041436:	2303      	movs	r3, #3
 8041438:	e0e4      	b.n	8041604 <HAL_RCC_OscConfig+0x8cc>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 804143a:	4b50      	ldr	r3, [pc, #320]	; (804157c <HAL_RCC_OscConfig+0x844>)
 804143c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8041440:	f003 0302 	and.w	r3, r3, #2
 8041444:	2b00      	cmp	r3, #0
 8041446:	d1ef      	bne.n	8041428 <HAL_RCC_OscConfig+0x6f0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8041448:	687b      	ldr	r3, [r7, #4]
 804144a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804144c:	2b00      	cmp	r3, #0
 804144e:	f000 80d8 	beq.w	8041602 <HAL_RCC_OscConfig+0x8ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8041452:	4b4a      	ldr	r3, [pc, #296]	; (804157c <HAL_RCC_OscConfig+0x844>)
 8041454:	689b      	ldr	r3, [r3, #8]
 8041456:	f003 030c 	and.w	r3, r3, #12
 804145a:	2b0c      	cmp	r3, #12
 804145c:	f000 8092 	beq.w	8041584 <HAL_RCC_OscConfig+0x84c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8041460:	687b      	ldr	r3, [r7, #4]
 8041462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041464:	2b02      	cmp	r3, #2
 8041466:	d15a      	bne.n	804151e <HAL_RCC_OscConfig+0x7e6>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041468:	4b44      	ldr	r3, [pc, #272]	; (804157c <HAL_RCC_OscConfig+0x844>)
 804146a:	681b      	ldr	r3, [r3, #0]
 804146c:	4a43      	ldr	r2, [pc, #268]	; (804157c <HAL_RCC_OscConfig+0x844>)
 804146e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8041472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041474:	f7ff f928 	bl	80406c8 <HAL_GetTick>
 8041478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 804147a:	e008      	b.n	804148e <HAL_RCC_OscConfig+0x756>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 804147c:	f7ff f924 	bl	80406c8 <HAL_GetTick>
 8041480:	4602      	mov	r2, r0
 8041482:	693b      	ldr	r3, [r7, #16]
 8041484:	1ad3      	subs	r3, r2, r3
 8041486:	2b02      	cmp	r3, #2
 8041488:	d901      	bls.n	804148e <HAL_RCC_OscConfig+0x756>
          {
            return HAL_TIMEOUT;
 804148a:	2303      	movs	r3, #3
 804148c:	e0ba      	b.n	8041604 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 804148e:	4b3b      	ldr	r3, [pc, #236]	; (804157c <HAL_RCC_OscConfig+0x844>)
 8041490:	681b      	ldr	r3, [r3, #0]
 8041492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041496:	2b00      	cmp	r3, #0
 8041498:	d1f0      	bne.n	804147c <HAL_RCC_OscConfig+0x744>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 804149a:	4b38      	ldr	r3, [pc, #224]	; (804157c <HAL_RCC_OscConfig+0x844>)
 804149c:	68da      	ldr	r2, [r3, #12]
 804149e:	4b38      	ldr	r3, [pc, #224]	; (8041580 <HAL_RCC_OscConfig+0x848>)
 80414a0:	4013      	ands	r3, r2
 80414a2:	687a      	ldr	r2, [r7, #4]
 80414a4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80414a6:	687a      	ldr	r2, [r7, #4]
 80414a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80414aa:	3a01      	subs	r2, #1
 80414ac:	0112      	lsls	r2, r2, #4
 80414ae:	4311      	orrs	r1, r2
 80414b0:	687a      	ldr	r2, [r7, #4]
 80414b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80414b4:	0212      	lsls	r2, r2, #8
 80414b6:	4311      	orrs	r1, r2
 80414b8:	687a      	ldr	r2, [r7, #4]
 80414ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80414bc:	0852      	lsrs	r2, r2, #1
 80414be:	3a01      	subs	r2, #1
 80414c0:	0552      	lsls	r2, r2, #21
 80414c2:	4311      	orrs	r1, r2
 80414c4:	687a      	ldr	r2, [r7, #4]
 80414c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80414c8:	0852      	lsrs	r2, r2, #1
 80414ca:	3a01      	subs	r2, #1
 80414cc:	0652      	lsls	r2, r2, #25
 80414ce:	4311      	orrs	r1, r2
 80414d0:	687a      	ldr	r2, [r7, #4]
 80414d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80414d4:	06d2      	lsls	r2, r2, #27
 80414d6:	430a      	orrs	r2, r1
 80414d8:	4928      	ldr	r1, [pc, #160]	; (804157c <HAL_RCC_OscConfig+0x844>)
 80414da:	4313      	orrs	r3, r2
 80414dc:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80414de:	4b27      	ldr	r3, [pc, #156]	; (804157c <HAL_RCC_OscConfig+0x844>)
 80414e0:	681b      	ldr	r3, [r3, #0]
 80414e2:	4a26      	ldr	r2, [pc, #152]	; (804157c <HAL_RCC_OscConfig+0x844>)
 80414e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80414e8:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80414ea:	4b24      	ldr	r3, [pc, #144]	; (804157c <HAL_RCC_OscConfig+0x844>)
 80414ec:	68db      	ldr	r3, [r3, #12]
 80414ee:	4a23      	ldr	r2, [pc, #140]	; (804157c <HAL_RCC_OscConfig+0x844>)
 80414f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80414f4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80414f6:	f7ff f8e7 	bl	80406c8 <HAL_GetTick>
 80414fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80414fc:	e008      	b.n	8041510 <HAL_RCC_OscConfig+0x7d8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80414fe:	f7ff f8e3 	bl	80406c8 <HAL_GetTick>
 8041502:	4602      	mov	r2, r0
 8041504:	693b      	ldr	r3, [r7, #16]
 8041506:	1ad3      	subs	r3, r2, r3
 8041508:	2b02      	cmp	r3, #2
 804150a:	d901      	bls.n	8041510 <HAL_RCC_OscConfig+0x7d8>
          {
            return HAL_TIMEOUT;
 804150c:	2303      	movs	r3, #3
 804150e:	e079      	b.n	8041604 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8041510:	4b1a      	ldr	r3, [pc, #104]	; (804157c <HAL_RCC_OscConfig+0x844>)
 8041512:	681b      	ldr	r3, [r3, #0]
 8041514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041518:	2b00      	cmp	r3, #0
 804151a:	d0f0      	beq.n	80414fe <HAL_RCC_OscConfig+0x7c6>
 804151c:	e071      	b.n	8041602 <HAL_RCC_OscConfig+0x8ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 804151e:	4b17      	ldr	r3, [pc, #92]	; (804157c <HAL_RCC_OscConfig+0x844>)
 8041520:	681b      	ldr	r3, [r3, #0]
 8041522:	4a16      	ldr	r2, [pc, #88]	; (804157c <HAL_RCC_OscConfig+0x844>)
 8041524:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8041528:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 804152a:	4b14      	ldr	r3, [pc, #80]	; (804157c <HAL_RCC_OscConfig+0x844>)
 804152c:	681b      	ldr	r3, [r3, #0]
 804152e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8041532:	2b00      	cmp	r3, #0
 8041534:	d105      	bne.n	8041542 <HAL_RCC_OscConfig+0x80a>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8041536:	4b11      	ldr	r3, [pc, #68]	; (804157c <HAL_RCC_OscConfig+0x844>)
 8041538:	68db      	ldr	r3, [r3, #12]
 804153a:	4a10      	ldr	r2, [pc, #64]	; (804157c <HAL_RCC_OscConfig+0x844>)
 804153c:	f023 0303 	bic.w	r3, r3, #3
 8041540:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8041542:	4b0e      	ldr	r3, [pc, #56]	; (804157c <HAL_RCC_OscConfig+0x844>)
 8041544:	68db      	ldr	r3, [r3, #12]
 8041546:	4a0d      	ldr	r2, [pc, #52]	; (804157c <HAL_RCC_OscConfig+0x844>)
 8041548:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 804154c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8041550:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041552:	f7ff f8b9 	bl	80406c8 <HAL_GetTick>
 8041556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8041558:	e008      	b.n	804156c <HAL_RCC_OscConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 804155a:	f7ff f8b5 	bl	80406c8 <HAL_GetTick>
 804155e:	4602      	mov	r2, r0
 8041560:	693b      	ldr	r3, [r7, #16]
 8041562:	1ad3      	subs	r3, r2, r3
 8041564:	2b02      	cmp	r3, #2
 8041566:	d901      	bls.n	804156c <HAL_RCC_OscConfig+0x834>
          {
            return HAL_TIMEOUT;
 8041568:	2303      	movs	r3, #3
 804156a:	e04b      	b.n	8041604 <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 804156c:	4b03      	ldr	r3, [pc, #12]	; (804157c <HAL_RCC_OscConfig+0x844>)
 804156e:	681b      	ldr	r3, [r3, #0]
 8041570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041574:	2b00      	cmp	r3, #0
 8041576:	d1f0      	bne.n	804155a <HAL_RCC_OscConfig+0x822>
 8041578:	e043      	b.n	8041602 <HAL_RCC_OscConfig+0x8ca>
 804157a:	bf00      	nop
 804157c:	40021000 	.word	0x40021000
 8041580:	019f800c 	.word	0x019f800c
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8041584:	687b      	ldr	r3, [r7, #4]
 8041586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041588:	2b01      	cmp	r3, #1
 804158a:	d101      	bne.n	8041590 <HAL_RCC_OscConfig+0x858>
      {
        return HAL_ERROR;
 804158c:	2301      	movs	r3, #1
 804158e:	e039      	b.n	8041604 <HAL_RCC_OscConfig+0x8cc>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8041590:	4b1e      	ldr	r3, [pc, #120]	; (804160c <HAL_RCC_OscConfig+0x8d4>)
 8041592:	68db      	ldr	r3, [r3, #12]
 8041594:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8041596:	697b      	ldr	r3, [r7, #20]
 8041598:	f003 0203 	and.w	r2, r3, #3
 804159c:	687b      	ldr	r3, [r7, #4]
 804159e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80415a0:	429a      	cmp	r2, r3
 80415a2:	d12c      	bne.n	80415fe <HAL_RCC_OscConfig+0x8c6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80415a4:	697b      	ldr	r3, [r7, #20]
 80415a6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80415aa:	687b      	ldr	r3, [r7, #4]
 80415ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80415ae:	3b01      	subs	r3, #1
 80415b0:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80415b2:	429a      	cmp	r2, r3
 80415b4:	d123      	bne.n	80415fe <HAL_RCC_OscConfig+0x8c6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80415b6:	697b      	ldr	r3, [r7, #20]
 80415b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80415bc:	687b      	ldr	r3, [r7, #4]
 80415be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80415c0:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80415c2:	429a      	cmp	r2, r3
 80415c4:	d11b      	bne.n	80415fe <HAL_RCC_OscConfig+0x8c6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80415c6:	697b      	ldr	r3, [r7, #20]
 80415c8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80415cc:	687b      	ldr	r3, [r7, #4]
 80415ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80415d0:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80415d2:	429a      	cmp	r2, r3
 80415d4:	d113      	bne.n	80415fe <HAL_RCC_OscConfig+0x8c6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80415d6:	697b      	ldr	r3, [r7, #20]
 80415d8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80415dc:	687b      	ldr	r3, [r7, #4]
 80415de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80415e0:	085b      	lsrs	r3, r3, #1
 80415e2:	3b01      	subs	r3, #1
 80415e4:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80415e6:	429a      	cmp	r2, r3
 80415e8:	d109      	bne.n	80415fe <HAL_RCC_OscConfig+0x8c6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80415ea:	697b      	ldr	r3, [r7, #20]
 80415ec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80415f0:	687b      	ldr	r3, [r7, #4]
 80415f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80415f4:	085b      	lsrs	r3, r3, #1
 80415f6:	3b01      	subs	r3, #1
 80415f8:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80415fa:	429a      	cmp	r2, r3
 80415fc:	d001      	beq.n	8041602 <HAL_RCC_OscConfig+0x8ca>
        {
          return HAL_ERROR;
 80415fe:	2301      	movs	r3, #1
 8041600:	e000      	b.n	8041604 <HAL_RCC_OscConfig+0x8cc>
        }
      }
    }
  }

  return HAL_OK;
 8041602:	2300      	movs	r3, #0
}
 8041604:	4618      	mov	r0, r3
 8041606:	3720      	adds	r7, #32
 8041608:	46bd      	mov	sp, r7
 804160a:	bd80      	pop	{r7, pc}
 804160c:	40021000 	.word	0x40021000

08041610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8041610:	b580      	push	{r7, lr}
 8041612:	b086      	sub	sp, #24
 8041614:	af00      	add	r7, sp, #0
 8041616:	6078      	str	r0, [r7, #4]
 8041618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 804161a:	2300      	movs	r3, #0
 804161c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 804161e:	687b      	ldr	r3, [r7, #4]
 8041620:	2b00      	cmp	r3, #0
 8041622:	d101      	bne.n	8041628 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8041624:	2301      	movs	r3, #1
 8041626:	e10d      	b.n	8041844 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8041628:	4b88      	ldr	r3, [pc, #544]	; (804184c <HAL_RCC_ClockConfig+0x23c>)
 804162a:	681b      	ldr	r3, [r3, #0]
 804162c:	f003 030f 	and.w	r3, r3, #15
 8041630:	683a      	ldr	r2, [r7, #0]
 8041632:	429a      	cmp	r2, r3
 8041634:	d910      	bls.n	8041658 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041636:	4b85      	ldr	r3, [pc, #532]	; (804184c <HAL_RCC_ClockConfig+0x23c>)
 8041638:	681b      	ldr	r3, [r3, #0]
 804163a:	f023 020f 	bic.w	r2, r3, #15
 804163e:	4983      	ldr	r1, [pc, #524]	; (804184c <HAL_RCC_ClockConfig+0x23c>)
 8041640:	683b      	ldr	r3, [r7, #0]
 8041642:	4313      	orrs	r3, r2
 8041644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8041646:	4b81      	ldr	r3, [pc, #516]	; (804184c <HAL_RCC_ClockConfig+0x23c>)
 8041648:	681b      	ldr	r3, [r3, #0]
 804164a:	f003 030f 	and.w	r3, r3, #15
 804164e:	683a      	ldr	r2, [r7, #0]
 8041650:	429a      	cmp	r2, r3
 8041652:	d001      	beq.n	8041658 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8041654:	2301      	movs	r3, #1
 8041656:	e0f5      	b.n	8041844 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8041658:	687b      	ldr	r3, [r7, #4]
 804165a:	681b      	ldr	r3, [r3, #0]
 804165c:	f003 0301 	and.w	r3, r3, #1
 8041660:	2b00      	cmp	r3, #0
 8041662:	f000 808b 	beq.w	804177c <HAL_RCC_ClockConfig+0x16c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8041666:	687b      	ldr	r3, [r7, #4]
 8041668:	685b      	ldr	r3, [r3, #4]
 804166a:	2b03      	cmp	r3, #3
 804166c:	d134      	bne.n	80416d8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 804166e:	4b78      	ldr	r3, [pc, #480]	; (8041850 <HAL_RCC_ClockConfig+0x240>)
 8041670:	681b      	ldr	r3, [r3, #0]
 8041672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041676:	2b00      	cmp	r3, #0
 8041678:	d101      	bne.n	804167e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 804167a:	2301      	movs	r3, #1
 804167c:	e0e2      	b.n	8041844 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 804167e:	f000 f9ed 	bl	8041a5c <RCC_GetSysClockFreqFromPLLSource>
 8041682:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8041684:	693b      	ldr	r3, [r7, #16]
 8041686:	4a73      	ldr	r2, [pc, #460]	; (8041854 <HAL_RCC_ClockConfig+0x244>)
 8041688:	4293      	cmp	r3, r2
 804168a:	d956      	bls.n	804173a <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 804168c:	4b70      	ldr	r3, [pc, #448]	; (8041850 <HAL_RCC_ClockConfig+0x240>)
 804168e:	689b      	ldr	r3, [r3, #8]
 8041690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8041694:	2b00      	cmp	r3, #0
 8041696:	d10a      	bne.n	80416ae <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8041698:	4b6d      	ldr	r3, [pc, #436]	; (8041850 <HAL_RCC_ClockConfig+0x240>)
 804169a:	689b      	ldr	r3, [r3, #8]
 804169c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80416a0:	4a6b      	ldr	r2, [pc, #428]	; (8041850 <HAL_RCC_ClockConfig+0x240>)
 80416a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80416a6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80416a8:	2380      	movs	r3, #128	; 0x80
 80416aa:	617b      	str	r3, [r7, #20]
 80416ac:	e045      	b.n	804173a <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80416ae:	687b      	ldr	r3, [r7, #4]
 80416b0:	681b      	ldr	r3, [r3, #0]
 80416b2:	f003 0302 	and.w	r3, r3, #2
 80416b6:	2b00      	cmp	r3, #0
 80416b8:	d03f      	beq.n	804173a <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80416ba:	687b      	ldr	r3, [r7, #4]
 80416bc:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80416be:	2b00      	cmp	r3, #0
 80416c0:	d13b      	bne.n	804173a <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80416c2:	4b63      	ldr	r3, [pc, #396]	; (8041850 <HAL_RCC_ClockConfig+0x240>)
 80416c4:	689b      	ldr	r3, [r3, #8]
 80416c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80416ca:	4a61      	ldr	r2, [pc, #388]	; (8041850 <HAL_RCC_ClockConfig+0x240>)
 80416cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80416d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80416d2:	2380      	movs	r3, #128	; 0x80
 80416d4:	617b      	str	r3, [r7, #20]
 80416d6:	e030      	b.n	804173a <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80416d8:	687b      	ldr	r3, [r7, #4]
 80416da:	685b      	ldr	r3, [r3, #4]
 80416dc:	2b02      	cmp	r3, #2
 80416de:	d107      	bne.n	80416f0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80416e0:	4b5b      	ldr	r3, [pc, #364]	; (8041850 <HAL_RCC_ClockConfig+0x240>)
 80416e2:	681b      	ldr	r3, [r3, #0]
 80416e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80416e8:	2b00      	cmp	r3, #0
 80416ea:	d115      	bne.n	8041718 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80416ec:	2301      	movs	r3, #1
 80416ee:	e0a9      	b.n	8041844 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80416f0:	687b      	ldr	r3, [r7, #4]
 80416f2:	685b      	ldr	r3, [r3, #4]
 80416f4:	2b00      	cmp	r3, #0
 80416f6:	d107      	bne.n	8041708 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80416f8:	4b55      	ldr	r3, [pc, #340]	; (8041850 <HAL_RCC_ClockConfig+0x240>)
 80416fa:	681b      	ldr	r3, [r3, #0]
 80416fc:	f003 0302 	and.w	r3, r3, #2
 8041700:	2b00      	cmp	r3, #0
 8041702:	d109      	bne.n	8041718 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8041704:	2301      	movs	r3, #1
 8041706:	e09d      	b.n	8041844 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8041708:	4b51      	ldr	r3, [pc, #324]	; (8041850 <HAL_RCC_ClockConfig+0x240>)
 804170a:	681b      	ldr	r3, [r3, #0]
 804170c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041710:	2b00      	cmp	r3, #0
 8041712:	d101      	bne.n	8041718 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8041714:	2301      	movs	r3, #1
 8041716:	e095      	b.n	8041844 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8041718:	f000 f8a2 	bl	8041860 <HAL_RCC_GetSysClockFreq>
 804171c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 804171e:	693b      	ldr	r3, [r7, #16]
 8041720:	4a4c      	ldr	r2, [pc, #304]	; (8041854 <HAL_RCC_ClockConfig+0x244>)
 8041722:	4293      	cmp	r3, r2
 8041724:	d909      	bls.n	804173a <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8041726:	4b4a      	ldr	r3, [pc, #296]	; (8041850 <HAL_RCC_ClockConfig+0x240>)
 8041728:	689b      	ldr	r3, [r3, #8]
 804172a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 804172e:	4a48      	ldr	r2, [pc, #288]	; (8041850 <HAL_RCC_ClockConfig+0x240>)
 8041730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8041734:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8041736:	2380      	movs	r3, #128	; 0x80
 8041738:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 804173a:	4b45      	ldr	r3, [pc, #276]	; (8041850 <HAL_RCC_ClockConfig+0x240>)
 804173c:	689b      	ldr	r3, [r3, #8]
 804173e:	f023 0203 	bic.w	r2, r3, #3
 8041742:	687b      	ldr	r3, [r7, #4]
 8041744:	685b      	ldr	r3, [r3, #4]
 8041746:	4942      	ldr	r1, [pc, #264]	; (8041850 <HAL_RCC_ClockConfig+0x240>)
 8041748:	4313      	orrs	r3, r2
 804174a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 804174c:	f7fe ffbc 	bl	80406c8 <HAL_GetTick>
 8041750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8041752:	e00a      	b.n	804176a <HAL_RCC_ClockConfig+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8041754:	f7fe ffb8 	bl	80406c8 <HAL_GetTick>
 8041758:	4602      	mov	r2, r0
 804175a:	68fb      	ldr	r3, [r7, #12]
 804175c:	1ad3      	subs	r3, r2, r3
 804175e:	f241 3288 	movw	r2, #5000	; 0x1388
 8041762:	4293      	cmp	r3, r2
 8041764:	d901      	bls.n	804176a <HAL_RCC_ClockConfig+0x15a>
      {
        return HAL_TIMEOUT;
 8041766:	2303      	movs	r3, #3
 8041768:	e06c      	b.n	8041844 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 804176a:	4b39      	ldr	r3, [pc, #228]	; (8041850 <HAL_RCC_ClockConfig+0x240>)
 804176c:	689b      	ldr	r3, [r3, #8]
 804176e:	f003 020c 	and.w	r2, r3, #12
 8041772:	687b      	ldr	r3, [r7, #4]
 8041774:	685b      	ldr	r3, [r3, #4]
 8041776:	009b      	lsls	r3, r3, #2
 8041778:	429a      	cmp	r2, r3
 804177a:	d1eb      	bne.n	8041754 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 804177c:	687b      	ldr	r3, [r7, #4]
 804177e:	681b      	ldr	r3, [r3, #0]
 8041780:	f003 0302 	and.w	r3, r3, #2
 8041784:	2b00      	cmp	r3, #0
 8041786:	d009      	beq.n	804179c <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8041788:	4b31      	ldr	r3, [pc, #196]	; (8041850 <HAL_RCC_ClockConfig+0x240>)
 804178a:	689b      	ldr	r3, [r3, #8]
 804178c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8041790:	687b      	ldr	r3, [r7, #4]
 8041792:	689b      	ldr	r3, [r3, #8]
 8041794:	492e      	ldr	r1, [pc, #184]	; (8041850 <HAL_RCC_ClockConfig+0x240>)
 8041796:	4313      	orrs	r3, r2
 8041798:	608b      	str	r3, [r1, #8]
 804179a:	e008      	b.n	80417ae <HAL_RCC_ClockConfig+0x19e>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 804179c:	697b      	ldr	r3, [r7, #20]
 804179e:	2b80      	cmp	r3, #128	; 0x80
 80417a0:	d105      	bne.n	80417ae <HAL_RCC_ClockConfig+0x19e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80417a2:	4b2b      	ldr	r3, [pc, #172]	; (8041850 <HAL_RCC_ClockConfig+0x240>)
 80417a4:	689b      	ldr	r3, [r3, #8]
 80417a6:	4a2a      	ldr	r2, [pc, #168]	; (8041850 <HAL_RCC_ClockConfig+0x240>)
 80417a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80417ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80417ae:	4b27      	ldr	r3, [pc, #156]	; (804184c <HAL_RCC_ClockConfig+0x23c>)
 80417b0:	681b      	ldr	r3, [r3, #0]
 80417b2:	f003 030f 	and.w	r3, r3, #15
 80417b6:	683a      	ldr	r2, [r7, #0]
 80417b8:	429a      	cmp	r2, r3
 80417ba:	d210      	bcs.n	80417de <HAL_RCC_ClockConfig+0x1ce>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80417bc:	4b23      	ldr	r3, [pc, #140]	; (804184c <HAL_RCC_ClockConfig+0x23c>)
 80417be:	681b      	ldr	r3, [r3, #0]
 80417c0:	f023 020f 	bic.w	r2, r3, #15
 80417c4:	4921      	ldr	r1, [pc, #132]	; (804184c <HAL_RCC_ClockConfig+0x23c>)
 80417c6:	683b      	ldr	r3, [r7, #0]
 80417c8:	4313      	orrs	r3, r2
 80417ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80417cc:	4b1f      	ldr	r3, [pc, #124]	; (804184c <HAL_RCC_ClockConfig+0x23c>)
 80417ce:	681b      	ldr	r3, [r3, #0]
 80417d0:	f003 030f 	and.w	r3, r3, #15
 80417d4:	683a      	ldr	r2, [r7, #0]
 80417d6:	429a      	cmp	r2, r3
 80417d8:	d001      	beq.n	80417de <HAL_RCC_ClockConfig+0x1ce>
    {
      return HAL_ERROR;
 80417da:	2301      	movs	r3, #1
 80417dc:	e032      	b.n	8041844 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80417de:	687b      	ldr	r3, [r7, #4]
 80417e0:	681b      	ldr	r3, [r3, #0]
 80417e2:	f003 0304 	and.w	r3, r3, #4
 80417e6:	2b00      	cmp	r3, #0
 80417e8:	d008      	beq.n	80417fc <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80417ea:	4b19      	ldr	r3, [pc, #100]	; (8041850 <HAL_RCC_ClockConfig+0x240>)
 80417ec:	689b      	ldr	r3, [r3, #8]
 80417ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80417f2:	687b      	ldr	r3, [r7, #4]
 80417f4:	68db      	ldr	r3, [r3, #12]
 80417f6:	4916      	ldr	r1, [pc, #88]	; (8041850 <HAL_RCC_ClockConfig+0x240>)
 80417f8:	4313      	orrs	r3, r2
 80417fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80417fc:	687b      	ldr	r3, [r7, #4]
 80417fe:	681b      	ldr	r3, [r3, #0]
 8041800:	f003 0308 	and.w	r3, r3, #8
 8041804:	2b00      	cmp	r3, #0
 8041806:	d009      	beq.n	804181c <HAL_RCC_ClockConfig+0x20c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8041808:	4b11      	ldr	r3, [pc, #68]	; (8041850 <HAL_RCC_ClockConfig+0x240>)
 804180a:	689b      	ldr	r3, [r3, #8]
 804180c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8041810:	687b      	ldr	r3, [r7, #4]
 8041812:	691b      	ldr	r3, [r3, #16]
 8041814:	00db      	lsls	r3, r3, #3
 8041816:	490e      	ldr	r1, [pc, #56]	; (8041850 <HAL_RCC_ClockConfig+0x240>)
 8041818:	4313      	orrs	r3, r2
 804181a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 804181c:	f000 f820 	bl	8041860 <HAL_RCC_GetSysClockFreq>
 8041820:	4601      	mov	r1, r0
 8041822:	4b0b      	ldr	r3, [pc, #44]	; (8041850 <HAL_RCC_ClockConfig+0x240>)
 8041824:	689b      	ldr	r3, [r3, #8]
 8041826:	091b      	lsrs	r3, r3, #4
 8041828:	f003 030f 	and.w	r3, r3, #15
 804182c:	4a0a      	ldr	r2, [pc, #40]	; (8041858 <HAL_RCC_ClockConfig+0x248>)
 804182e:	5cd3      	ldrb	r3, [r2, r3]
 8041830:	fa21 f303 	lsr.w	r3, r1, r3
 8041834:	4a09      	ldr	r2, [pc, #36]	; (804185c <HAL_RCC_ClockConfig+0x24c>)
 8041836:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8041838:	2000      	movs	r0, #0
 804183a:	f7fe fef9 	bl	8040630 <HAL_InitTick>
 804183e:	4603      	mov	r3, r0
 8041840:	72fb      	strb	r3, [r7, #11]

  return status;
 8041842:	7afb      	ldrb	r3, [r7, #11]
}
 8041844:	4618      	mov	r0, r3
 8041846:	3718      	adds	r7, #24
 8041848:	46bd      	mov	sp, r7
 804184a:	bd80      	pop	{r7, pc}
 804184c:	40022000 	.word	0x40022000
 8041850:	40021000 	.word	0x40021000
 8041854:	04c4b400 	.word	0x04c4b400
 8041858:	08042a00 	.word	0x08042a00
 804185c:	20018000 	.word	0x20018000

08041860 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8041860:	b480      	push	{r7}
 8041862:	b089      	sub	sp, #36	; 0x24
 8041864:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8041866:	2300      	movs	r3, #0
 8041868:	61fb      	str	r3, [r7, #28]
 804186a:	2300      	movs	r3, #0
 804186c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 804186e:	4b46      	ldr	r3, [pc, #280]	; (8041988 <HAL_RCC_GetSysClockFreq+0x128>)
 8041870:	689b      	ldr	r3, [r3, #8]
 8041872:	f003 030c 	and.w	r3, r3, #12
 8041876:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8041878:	4b43      	ldr	r3, [pc, #268]	; (8041988 <HAL_RCC_GetSysClockFreq+0x128>)
 804187a:	68db      	ldr	r3, [r3, #12]
 804187c:	f003 0303 	and.w	r3, r3, #3
 8041880:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8041882:	693b      	ldr	r3, [r7, #16]
 8041884:	2b00      	cmp	r3, #0
 8041886:	d005      	beq.n	8041894 <HAL_RCC_GetSysClockFreq+0x34>
 8041888:	693b      	ldr	r3, [r7, #16]
 804188a:	2b0c      	cmp	r3, #12
 804188c:	d121      	bne.n	80418d2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 804188e:	68fb      	ldr	r3, [r7, #12]
 8041890:	2b01      	cmp	r3, #1
 8041892:	d11e      	bne.n	80418d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8041894:	4b3c      	ldr	r3, [pc, #240]	; (8041988 <HAL_RCC_GetSysClockFreq+0x128>)
 8041896:	681b      	ldr	r3, [r3, #0]
 8041898:	f003 0308 	and.w	r3, r3, #8
 804189c:	2b00      	cmp	r3, #0
 804189e:	d107      	bne.n	80418b0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80418a0:	4b39      	ldr	r3, [pc, #228]	; (8041988 <HAL_RCC_GetSysClockFreq+0x128>)
 80418a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80418a6:	0a1b      	lsrs	r3, r3, #8
 80418a8:	f003 030f 	and.w	r3, r3, #15
 80418ac:	61fb      	str	r3, [r7, #28]
 80418ae:	e005      	b.n	80418bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80418b0:	4b35      	ldr	r3, [pc, #212]	; (8041988 <HAL_RCC_GetSysClockFreq+0x128>)
 80418b2:	681b      	ldr	r3, [r3, #0]
 80418b4:	091b      	lsrs	r3, r3, #4
 80418b6:	f003 030f 	and.w	r3, r3, #15
 80418ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80418bc:	4a33      	ldr	r2, [pc, #204]	; (804198c <HAL_RCC_GetSysClockFreq+0x12c>)
 80418be:	69fb      	ldr	r3, [r7, #28]
 80418c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80418c4:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_CFGR_SWS_MSI)
 80418c6:	693b      	ldr	r3, [r7, #16]
 80418c8:	2b00      	cmp	r3, #0
 80418ca:	d10d      	bne.n	80418e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80418cc:	69fb      	ldr	r3, [r7, #28]
 80418ce:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_CFGR_SWS_MSI)
 80418d0:	e00a      	b.n	80418e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_CFGR_SWS_HSI)
 80418d2:	693b      	ldr	r3, [r7, #16]
 80418d4:	2b04      	cmp	r3, #4
 80418d6:	d102      	bne.n	80418de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80418d8:	4b2d      	ldr	r3, [pc, #180]	; (8041990 <HAL_RCC_GetSysClockFreq+0x130>)
 80418da:	61bb      	str	r3, [r7, #24]
 80418dc:	e004      	b.n	80418e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_CFGR_SWS_HSE)
 80418de:	693b      	ldr	r3, [r7, #16]
 80418e0:	2b08      	cmp	r3, #8
 80418e2:	d101      	bne.n	80418e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80418e4:	4b2a      	ldr	r3, [pc, #168]	; (8041990 <HAL_RCC_GetSysClockFreq+0x130>)
 80418e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_CFGR_SWS_PLL)
 80418e8:	693b      	ldr	r3, [r7, #16]
 80418ea:	2b0c      	cmp	r3, #12
 80418ec:	d145      	bne.n	804197a <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80418ee:	4b26      	ldr	r3, [pc, #152]	; (8041988 <HAL_RCC_GetSysClockFreq+0x128>)
 80418f0:	68db      	ldr	r3, [r3, #12]
 80418f2:	f003 0303 	and.w	r3, r3, #3
 80418f6:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80418f8:	4b23      	ldr	r3, [pc, #140]	; (8041988 <HAL_RCC_GetSysClockFreq+0x128>)
 80418fa:	68db      	ldr	r3, [r3, #12]
 80418fc:	091b      	lsrs	r3, r3, #4
 80418fe:	f003 030f 	and.w	r3, r3, #15
 8041902:	3301      	adds	r3, #1
 8041904:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8041906:	68bb      	ldr	r3, [r7, #8]
 8041908:	2b02      	cmp	r3, #2
 804190a:	d002      	beq.n	8041912 <HAL_RCC_GetSysClockFreq+0xb2>
 804190c:	2b03      	cmp	r3, #3
 804190e:	d00d      	beq.n	804192c <HAL_RCC_GetSysClockFreq+0xcc>
 8041910:	e019      	b.n	8041946 <HAL_RCC_GetSysClockFreq+0xe6>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8041912:	4a1f      	ldr	r2, [pc, #124]	; (8041990 <HAL_RCC_GetSysClockFreq+0x130>)
 8041914:	687b      	ldr	r3, [r7, #4]
 8041916:	fbb2 f3f3 	udiv	r3, r2, r3
 804191a:	4a1b      	ldr	r2, [pc, #108]	; (8041988 <HAL_RCC_GetSysClockFreq+0x128>)
 804191c:	68d2      	ldr	r2, [r2, #12]
 804191e:	0a12      	lsrs	r2, r2, #8
 8041920:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8041924:	fb02 f303 	mul.w	r3, r2, r3
 8041928:	617b      	str	r3, [r7, #20]
        break;
 804192a:	e019      	b.n	8041960 <HAL_RCC_GetSysClockFreq+0x100>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 804192c:	4a18      	ldr	r2, [pc, #96]	; (8041990 <HAL_RCC_GetSysClockFreq+0x130>)
 804192e:	687b      	ldr	r3, [r7, #4]
 8041930:	fbb2 f3f3 	udiv	r3, r2, r3
 8041934:	4a14      	ldr	r2, [pc, #80]	; (8041988 <HAL_RCC_GetSysClockFreq+0x128>)
 8041936:	68d2      	ldr	r2, [r2, #12]
 8041938:	0a12      	lsrs	r2, r2, #8
 804193a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 804193e:	fb02 f303 	mul.w	r3, r2, r3
 8041942:	617b      	str	r3, [r7, #20]
        break;
 8041944:	e00c      	b.n	8041960 <HAL_RCC_GetSysClockFreq+0x100>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8041946:	69fa      	ldr	r2, [r7, #28]
 8041948:	687b      	ldr	r3, [r7, #4]
 804194a:	fbb2 f3f3 	udiv	r3, r2, r3
 804194e:	4a0e      	ldr	r2, [pc, #56]	; (8041988 <HAL_RCC_GetSysClockFreq+0x128>)
 8041950:	68d2      	ldr	r2, [r2, #12]
 8041952:	0a12      	lsrs	r2, r2, #8
 8041954:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8041958:	fb02 f303 	mul.w	r3, r2, r3
 804195c:	617b      	str	r3, [r7, #20]
        break;
 804195e:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8041960:	4b09      	ldr	r3, [pc, #36]	; (8041988 <HAL_RCC_GetSysClockFreq+0x128>)
 8041962:	68db      	ldr	r3, [r3, #12]
 8041964:	0e5b      	lsrs	r3, r3, #25
 8041966:	f003 0303 	and.w	r3, r3, #3
 804196a:	3301      	adds	r3, #1
 804196c:	005b      	lsls	r3, r3, #1
 804196e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8041970:	697a      	ldr	r2, [r7, #20]
 8041972:	683b      	ldr	r3, [r7, #0]
 8041974:	fbb2 f3f3 	udiv	r3, r2, r3
 8041978:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 804197a:	69bb      	ldr	r3, [r7, #24]
}
 804197c:	4618      	mov	r0, r3
 804197e:	3724      	adds	r7, #36	; 0x24
 8041980:	46bd      	mov	sp, r7
 8041982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041986:	4770      	bx	lr
 8041988:	40021000 	.word	0x40021000
 804198c:	08042a10 	.word	0x08042a10
 8041990:	00f42400 	.word	0x00f42400

08041994 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8041994:	b580      	push	{r7, lr}
 8041996:	b086      	sub	sp, #24
 8041998:	af00      	add	r7, sp, #0
 804199a:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 804199c:	2300      	movs	r3, #0
 804199e:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80419a0:	4b2c      	ldr	r3, [pc, #176]	; (8041a54 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80419a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80419a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80419a8:	2b00      	cmp	r3, #0
 80419aa:	d003      	beq.n	80419b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80419ac:	f7ff f936 	bl	8040c1c <HAL_PWREx_GetVoltageRange>
 80419b0:	6138      	str	r0, [r7, #16]
 80419b2:	e014      	b.n	80419de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80419b4:	4b27      	ldr	r3, [pc, #156]	; (8041a54 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80419b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80419b8:	4a26      	ldr	r2, [pc, #152]	; (8041a54 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80419ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80419be:	6593      	str	r3, [r2, #88]	; 0x58
 80419c0:	4b24      	ldr	r3, [pc, #144]	; (8041a54 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80419c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80419c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80419c8:	60fb      	str	r3, [r7, #12]
 80419ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80419cc:	f7ff f926 	bl	8040c1c <HAL_PWREx_GetVoltageRange>
 80419d0:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80419d2:	4b20      	ldr	r3, [pc, #128]	; (8041a54 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80419d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80419d6:	4a1f      	ldr	r2, [pc, #124]	; (8041a54 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80419d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80419dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80419de:	693b      	ldr	r3, [r7, #16]
 80419e0:	2b00      	cmp	r3, #0
 80419e2:	d003      	beq.n	80419ec <RCC_SetFlashLatencyFromMSIRange+0x58>
 80419e4:	693b      	ldr	r3, [r7, #16]
 80419e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80419ea:	d10b      	bne.n	8041a04 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 80419ec:	687b      	ldr	r3, [r7, #4]
 80419ee:	2b80      	cmp	r3, #128	; 0x80
 80419f0:	d919      	bls.n	8041a26 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 80419f2:	687b      	ldr	r3, [r7, #4]
 80419f4:	2ba0      	cmp	r3, #160	; 0xa0
 80419f6:	d902      	bls.n	80419fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80419f8:	2302      	movs	r3, #2
 80419fa:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80419fc:	e013      	b.n	8041a26 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80419fe:	2301      	movs	r3, #1
 8041a00:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8041a02:	e010      	b.n	8041a26 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8041a04:	687b      	ldr	r3, [r7, #4]
 8041a06:	2b80      	cmp	r3, #128	; 0x80
 8041a08:	d902      	bls.n	8041a10 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8041a0a:	2303      	movs	r3, #3
 8041a0c:	617b      	str	r3, [r7, #20]
 8041a0e:	e00a      	b.n	8041a26 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8041a10:	687b      	ldr	r3, [r7, #4]
 8041a12:	2b80      	cmp	r3, #128	; 0x80
 8041a14:	d102      	bne.n	8041a1c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8041a16:	2302      	movs	r3, #2
 8041a18:	617b      	str	r3, [r7, #20]
 8041a1a:	e004      	b.n	8041a26 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8041a1c:	687b      	ldr	r3, [r7, #4]
 8041a1e:	2b70      	cmp	r3, #112	; 0x70
 8041a20:	d101      	bne.n	8041a26 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8041a22:	2301      	movs	r3, #1
 8041a24:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8041a26:	4b0c      	ldr	r3, [pc, #48]	; (8041a58 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8041a28:	681b      	ldr	r3, [r3, #0]
 8041a2a:	f023 020f 	bic.w	r2, r3, #15
 8041a2e:	490a      	ldr	r1, [pc, #40]	; (8041a58 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8041a30:	697b      	ldr	r3, [r7, #20]
 8041a32:	4313      	orrs	r3, r2
 8041a34:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8041a36:	4b08      	ldr	r3, [pc, #32]	; (8041a58 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8041a38:	681b      	ldr	r3, [r3, #0]
 8041a3a:	f003 030f 	and.w	r3, r3, #15
 8041a3e:	697a      	ldr	r2, [r7, #20]
 8041a40:	429a      	cmp	r2, r3
 8041a42:	d001      	beq.n	8041a48 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8041a44:	2301      	movs	r3, #1
 8041a46:	e000      	b.n	8041a4a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8041a48:	2300      	movs	r3, #0
}
 8041a4a:	4618      	mov	r0, r3
 8041a4c:	3718      	adds	r7, #24
 8041a4e:	46bd      	mov	sp, r7
 8041a50:	bd80      	pop	{r7, pc}
 8041a52:	bf00      	nop
 8041a54:	40021000 	.word	0x40021000
 8041a58:	40022000 	.word	0x40022000

08041a5c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8041a5c:	b480      	push	{r7}
 8041a5e:	b087      	sub	sp, #28
 8041a60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8041a62:	2300      	movs	r3, #0
 8041a64:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8041a66:	4b36      	ldr	r3, [pc, #216]	; (8041b40 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8041a68:	68db      	ldr	r3, [r3, #12]
 8041a6a:	f003 0303 	and.w	r3, r3, #3
 8041a6e:	2b01      	cmp	r3, #1
 8041a70:	d118      	bne.n	8041aa4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8041a72:	4b33      	ldr	r3, [pc, #204]	; (8041b40 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8041a74:	681b      	ldr	r3, [r3, #0]
 8041a76:	f003 0308 	and.w	r3, r3, #8
 8041a7a:	2b00      	cmp	r3, #0
 8041a7c:	d107      	bne.n	8041a8e <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8041a7e:	4b30      	ldr	r3, [pc, #192]	; (8041b40 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8041a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041a84:	0a1b      	lsrs	r3, r3, #8
 8041a86:	f003 030f 	and.w	r3, r3, #15
 8041a8a:	617b      	str	r3, [r7, #20]
 8041a8c:	e005      	b.n	8041a9a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8041a8e:	4b2c      	ldr	r3, [pc, #176]	; (8041b40 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8041a90:	681b      	ldr	r3, [r3, #0]
 8041a92:	091b      	lsrs	r3, r3, #4
 8041a94:	f003 030f 	and.w	r3, r3, #15
 8041a98:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8041a9a:	4a2a      	ldr	r2, [pc, #168]	; (8041b44 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 8041a9c:	697b      	ldr	r3, [r7, #20]
 8041a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041aa2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8041aa4:	4b26      	ldr	r3, [pc, #152]	; (8041b40 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8041aa6:	68db      	ldr	r3, [r3, #12]
 8041aa8:	f003 0303 	and.w	r3, r3, #3
 8041aac:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8041aae:	4b24      	ldr	r3, [pc, #144]	; (8041b40 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8041ab0:	68db      	ldr	r3, [r3, #12]
 8041ab2:	091b      	lsrs	r3, r3, #4
 8041ab4:	f003 030f 	and.w	r3, r3, #15
 8041ab8:	3301      	adds	r3, #1
 8041aba:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8041abc:	68fb      	ldr	r3, [r7, #12]
 8041abe:	2b02      	cmp	r3, #2
 8041ac0:	d002      	beq.n	8041ac8 <RCC_GetSysClockFreqFromPLLSource+0x6c>
 8041ac2:	2b03      	cmp	r3, #3
 8041ac4:	d00d      	beq.n	8041ae2 <RCC_GetSysClockFreqFromPLLSource+0x86>
 8041ac6:	e019      	b.n	8041afc <RCC_GetSysClockFreqFromPLLSource+0xa0>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8041ac8:	4a1f      	ldr	r2, [pc, #124]	; (8041b48 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8041aca:	68bb      	ldr	r3, [r7, #8]
 8041acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8041ad0:	4a1b      	ldr	r2, [pc, #108]	; (8041b40 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8041ad2:	68d2      	ldr	r2, [r2, #12]
 8041ad4:	0a12      	lsrs	r2, r2, #8
 8041ad6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8041ada:	fb02 f303 	mul.w	r3, r2, r3
 8041ade:	613b      	str	r3, [r7, #16]
      break;
 8041ae0:	e019      	b.n	8041b16 <RCC_GetSysClockFreqFromPLLSource+0xba>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8041ae2:	4a19      	ldr	r2, [pc, #100]	; (8041b48 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8041ae4:	68bb      	ldr	r3, [r7, #8]
 8041ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8041aea:	4a15      	ldr	r2, [pc, #84]	; (8041b40 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8041aec:	68d2      	ldr	r2, [r2, #12]
 8041aee:	0a12      	lsrs	r2, r2, #8
 8041af0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8041af4:	fb02 f303 	mul.w	r3, r2, r3
 8041af8:	613b      	str	r3, [r7, #16]
      break;
 8041afa:	e00c      	b.n	8041b16 <RCC_GetSysClockFreqFromPLLSource+0xba>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8041afc:	697a      	ldr	r2, [r7, #20]
 8041afe:	68bb      	ldr	r3, [r7, #8]
 8041b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8041b04:	4a0e      	ldr	r2, [pc, #56]	; (8041b40 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8041b06:	68d2      	ldr	r2, [r2, #12]
 8041b08:	0a12      	lsrs	r2, r2, #8
 8041b0a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8041b0e:	fb02 f303 	mul.w	r3, r2, r3
 8041b12:	613b      	str	r3, [r7, #16]
      break;
 8041b14:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8041b16:	4b0a      	ldr	r3, [pc, #40]	; (8041b40 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8041b18:	68db      	ldr	r3, [r3, #12]
 8041b1a:	0e5b      	lsrs	r3, r3, #25
 8041b1c:	f003 0303 	and.w	r3, r3, #3
 8041b20:	3301      	adds	r3, #1
 8041b22:	005b      	lsls	r3, r3, #1
 8041b24:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8041b26:	693a      	ldr	r2, [r7, #16]
 8041b28:	687b      	ldr	r3, [r7, #4]
 8041b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8041b2e:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8041b30:	683b      	ldr	r3, [r7, #0]
}
 8041b32:	4618      	mov	r0, r3
 8041b34:	371c      	adds	r7, #28
 8041b36:	46bd      	mov	sp, r7
 8041b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041b3c:	4770      	bx	lr
 8041b3e:	bf00      	nop
 8041b40:	40021000 	.word	0x40021000
 8041b44:	08042a10 	.word	0x08042a10
 8041b48:	00f42400 	.word	0x00f42400

08041b4c <__errno>:
 8041b4c:	4b01      	ldr	r3, [pc, #4]	; (8041b54 <__errno+0x8>)
 8041b4e:	6818      	ldr	r0, [r3, #0]
 8041b50:	4770      	bx	lr
 8041b52:	bf00      	nop
 8041b54:	2001800c 	.word	0x2001800c

08041b58 <__libc_init_array>:
 8041b58:	b570      	push	{r4, r5, r6, lr}
 8041b5a:	4e0d      	ldr	r6, [pc, #52]	; (8041b90 <__libc_init_array+0x38>)
 8041b5c:	2500      	movs	r5, #0
 8041b5e:	4c0d      	ldr	r4, [pc, #52]	; (8041b94 <__libc_init_array+0x3c>)
 8041b60:	1ba4      	subs	r4, r4, r6
 8041b62:	10a4      	asrs	r4, r4, #2
 8041b64:	42a5      	cmp	r5, r4
 8041b66:	d109      	bne.n	8041b7c <__libc_init_array+0x24>
 8041b68:	4e0b      	ldr	r6, [pc, #44]	; (8041b98 <__libc_init_array+0x40>)
 8041b6a:	2500      	movs	r5, #0
 8041b6c:	4c0b      	ldr	r4, [pc, #44]	; (8041b9c <__libc_init_array+0x44>)
 8041b6e:	f000 ff11 	bl	8042994 <_init>
 8041b72:	1ba4      	subs	r4, r4, r6
 8041b74:	10a4      	asrs	r4, r4, #2
 8041b76:	42a5      	cmp	r5, r4
 8041b78:	d105      	bne.n	8041b86 <__libc_init_array+0x2e>
 8041b7a:	bd70      	pop	{r4, r5, r6, pc}
 8041b7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8041b80:	3501      	adds	r5, #1
 8041b82:	4798      	blx	r3
 8041b84:	e7ee      	b.n	8041b64 <__libc_init_array+0xc>
 8041b86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8041b8a:	3501      	adds	r5, #1
 8041b8c:	4798      	blx	r3
 8041b8e:	e7f2      	b.n	8041b76 <__libc_init_array+0x1e>
 8041b90:	08042ae8 	.word	0x08042ae8
 8041b94:	08042ae8 	.word	0x08042ae8
 8041b98:	08042ae8 	.word	0x08042ae8
 8041b9c:	08042aec 	.word	0x08042aec

08041ba0 <memset>:
 8041ba0:	4402      	add	r2, r0
 8041ba2:	4603      	mov	r3, r0
 8041ba4:	4293      	cmp	r3, r2
 8041ba6:	d100      	bne.n	8041baa <memset+0xa>
 8041ba8:	4770      	bx	lr
 8041baa:	f803 1b01 	strb.w	r1, [r3], #1
 8041bae:	e7f9      	b.n	8041ba4 <memset+0x4>

08041bb0 <iprintf>:
 8041bb0:	b40f      	push	{r0, r1, r2, r3}
 8041bb2:	4b0a      	ldr	r3, [pc, #40]	; (8041bdc <iprintf+0x2c>)
 8041bb4:	b513      	push	{r0, r1, r4, lr}
 8041bb6:	681c      	ldr	r4, [r3, #0]
 8041bb8:	b124      	cbz	r4, 8041bc4 <iprintf+0x14>
 8041bba:	69a3      	ldr	r3, [r4, #24]
 8041bbc:	b913      	cbnz	r3, 8041bc4 <iprintf+0x14>
 8041bbe:	4620      	mov	r0, r4
 8041bc0:	f000 f84e 	bl	8041c60 <__sinit>
 8041bc4:	ab05      	add	r3, sp, #20
 8041bc6:	9a04      	ldr	r2, [sp, #16]
 8041bc8:	68a1      	ldr	r1, [r4, #8]
 8041bca:	4620      	mov	r0, r4
 8041bcc:	9301      	str	r3, [sp, #4]
 8041bce:	f000 f955 	bl	8041e7c <_vfiprintf_r>
 8041bd2:	b002      	add	sp, #8
 8041bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8041bd8:	b004      	add	sp, #16
 8041bda:	4770      	bx	lr
 8041bdc:	2001800c 	.word	0x2001800c

08041be0 <std>:
 8041be0:	2300      	movs	r3, #0
 8041be2:	b510      	push	{r4, lr}
 8041be4:	4604      	mov	r4, r0
 8041be6:	6083      	str	r3, [r0, #8]
 8041be8:	8181      	strh	r1, [r0, #12]
 8041bea:	4619      	mov	r1, r3
 8041bec:	6643      	str	r3, [r0, #100]	; 0x64
 8041bee:	81c2      	strh	r2, [r0, #14]
 8041bf0:	2208      	movs	r2, #8
 8041bf2:	6183      	str	r3, [r0, #24]
 8041bf4:	e9c0 3300 	strd	r3, r3, [r0]
 8041bf8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8041bfc:	305c      	adds	r0, #92	; 0x5c
 8041bfe:	f7ff ffcf 	bl	8041ba0 <memset>
 8041c02:	4b05      	ldr	r3, [pc, #20]	; (8041c18 <std+0x38>)
 8041c04:	6224      	str	r4, [r4, #32]
 8041c06:	6263      	str	r3, [r4, #36]	; 0x24
 8041c08:	4b04      	ldr	r3, [pc, #16]	; (8041c1c <std+0x3c>)
 8041c0a:	62a3      	str	r3, [r4, #40]	; 0x28
 8041c0c:	4b04      	ldr	r3, [pc, #16]	; (8041c20 <std+0x40>)
 8041c0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8041c10:	4b04      	ldr	r3, [pc, #16]	; (8041c24 <std+0x44>)
 8041c12:	6323      	str	r3, [r4, #48]	; 0x30
 8041c14:	bd10      	pop	{r4, pc}
 8041c16:	bf00      	nop
 8041c18:	080423dd 	.word	0x080423dd
 8041c1c:	080423ff 	.word	0x080423ff
 8041c20:	08042437 	.word	0x08042437
 8041c24:	0804245b 	.word	0x0804245b

08041c28 <_cleanup_r>:
 8041c28:	4901      	ldr	r1, [pc, #4]	; (8041c30 <_cleanup_r+0x8>)
 8041c2a:	f000 b885 	b.w	8041d38 <_fwalk_reent>
 8041c2e:	bf00      	nop
 8041c30:	08042731 	.word	0x08042731

08041c34 <__sfmoreglue>:
 8041c34:	b570      	push	{r4, r5, r6, lr}
 8041c36:	1e4a      	subs	r2, r1, #1
 8041c38:	2568      	movs	r5, #104	; 0x68
 8041c3a:	460e      	mov	r6, r1
 8041c3c:	4355      	muls	r5, r2
 8041c3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8041c42:	f000 f897 	bl	8041d74 <_malloc_r>
 8041c46:	4604      	mov	r4, r0
 8041c48:	b140      	cbz	r0, 8041c5c <__sfmoreglue+0x28>
 8041c4a:	2100      	movs	r1, #0
 8041c4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8041c50:	e9c0 1600 	strd	r1, r6, [r0]
 8041c54:	300c      	adds	r0, #12
 8041c56:	60a0      	str	r0, [r4, #8]
 8041c58:	f7ff ffa2 	bl	8041ba0 <memset>
 8041c5c:	4620      	mov	r0, r4
 8041c5e:	bd70      	pop	{r4, r5, r6, pc}

08041c60 <__sinit>:
 8041c60:	6983      	ldr	r3, [r0, #24]
 8041c62:	b510      	push	{r4, lr}
 8041c64:	4604      	mov	r4, r0
 8041c66:	bb33      	cbnz	r3, 8041cb6 <__sinit+0x56>
 8041c68:	6503      	str	r3, [r0, #80]	; 0x50
 8041c6a:	4a13      	ldr	r2, [pc, #76]	; (8041cb8 <__sinit+0x58>)
 8041c6c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8041c70:	4b12      	ldr	r3, [pc, #72]	; (8041cbc <__sinit+0x5c>)
 8041c72:	6282      	str	r2, [r0, #40]	; 0x28
 8041c74:	681b      	ldr	r3, [r3, #0]
 8041c76:	4298      	cmp	r0, r3
 8041c78:	bf04      	itt	eq
 8041c7a:	2301      	moveq	r3, #1
 8041c7c:	6183      	streq	r3, [r0, #24]
 8041c7e:	f000 f81f 	bl	8041cc0 <__sfp>
 8041c82:	6060      	str	r0, [r4, #4]
 8041c84:	4620      	mov	r0, r4
 8041c86:	f000 f81b 	bl	8041cc0 <__sfp>
 8041c8a:	60a0      	str	r0, [r4, #8]
 8041c8c:	4620      	mov	r0, r4
 8041c8e:	f000 f817 	bl	8041cc0 <__sfp>
 8041c92:	2200      	movs	r2, #0
 8041c94:	60e0      	str	r0, [r4, #12]
 8041c96:	2104      	movs	r1, #4
 8041c98:	6860      	ldr	r0, [r4, #4]
 8041c9a:	f7ff ffa1 	bl	8041be0 <std>
 8041c9e:	2201      	movs	r2, #1
 8041ca0:	2109      	movs	r1, #9
 8041ca2:	68a0      	ldr	r0, [r4, #8]
 8041ca4:	f7ff ff9c 	bl	8041be0 <std>
 8041ca8:	2202      	movs	r2, #2
 8041caa:	2112      	movs	r1, #18
 8041cac:	68e0      	ldr	r0, [r4, #12]
 8041cae:	f7ff ff97 	bl	8041be0 <std>
 8041cb2:	2301      	movs	r3, #1
 8041cb4:	61a3      	str	r3, [r4, #24]
 8041cb6:	bd10      	pop	{r4, pc}
 8041cb8:	08041c29 	.word	0x08041c29
 8041cbc:	08042a50 	.word	0x08042a50

08041cc0 <__sfp>:
 8041cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8041cc2:	4b1b      	ldr	r3, [pc, #108]	; (8041d30 <__sfp+0x70>)
 8041cc4:	4607      	mov	r7, r0
 8041cc6:	681e      	ldr	r6, [r3, #0]
 8041cc8:	69b3      	ldr	r3, [r6, #24]
 8041cca:	b913      	cbnz	r3, 8041cd2 <__sfp+0x12>
 8041ccc:	4630      	mov	r0, r6
 8041cce:	f7ff ffc7 	bl	8041c60 <__sinit>
 8041cd2:	3648      	adds	r6, #72	; 0x48
 8041cd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8041cd8:	3b01      	subs	r3, #1
 8041cda:	d503      	bpl.n	8041ce4 <__sfp+0x24>
 8041cdc:	6833      	ldr	r3, [r6, #0]
 8041cde:	b133      	cbz	r3, 8041cee <__sfp+0x2e>
 8041ce0:	6836      	ldr	r6, [r6, #0]
 8041ce2:	e7f7      	b.n	8041cd4 <__sfp+0x14>
 8041ce4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8041ce8:	b16d      	cbz	r5, 8041d06 <__sfp+0x46>
 8041cea:	3468      	adds	r4, #104	; 0x68
 8041cec:	e7f4      	b.n	8041cd8 <__sfp+0x18>
 8041cee:	2104      	movs	r1, #4
 8041cf0:	4638      	mov	r0, r7
 8041cf2:	f7ff ff9f 	bl	8041c34 <__sfmoreglue>
 8041cf6:	6030      	str	r0, [r6, #0]
 8041cf8:	2800      	cmp	r0, #0
 8041cfa:	d1f1      	bne.n	8041ce0 <__sfp+0x20>
 8041cfc:	230c      	movs	r3, #12
 8041cfe:	4604      	mov	r4, r0
 8041d00:	603b      	str	r3, [r7, #0]
 8041d02:	4620      	mov	r0, r4
 8041d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8041d06:	4b0b      	ldr	r3, [pc, #44]	; (8041d34 <__sfp+0x74>)
 8041d08:	2208      	movs	r2, #8
 8041d0a:	6665      	str	r5, [r4, #100]	; 0x64
 8041d0c:	4629      	mov	r1, r5
 8041d0e:	60a5      	str	r5, [r4, #8]
 8041d10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8041d14:	e9c4 5500 	strd	r5, r5, [r4]
 8041d18:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8041d1c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8041d20:	f7ff ff3e 	bl	8041ba0 <memset>
 8041d24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8041d28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8041d2c:	e7e9      	b.n	8041d02 <__sfp+0x42>
 8041d2e:	bf00      	nop
 8041d30:	08042a50 	.word	0x08042a50
 8041d34:	ffff0001 	.word	0xffff0001

08041d38 <_fwalk_reent>:
 8041d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8041d3c:	4680      	mov	r8, r0
 8041d3e:	4689      	mov	r9, r1
 8041d40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8041d44:	2600      	movs	r6, #0
 8041d46:	b914      	cbnz	r4, 8041d4e <_fwalk_reent+0x16>
 8041d48:	4630      	mov	r0, r6
 8041d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8041d4e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8041d52:	3f01      	subs	r7, #1
 8041d54:	d501      	bpl.n	8041d5a <_fwalk_reent+0x22>
 8041d56:	6824      	ldr	r4, [r4, #0]
 8041d58:	e7f5      	b.n	8041d46 <_fwalk_reent+0xe>
 8041d5a:	89ab      	ldrh	r3, [r5, #12]
 8041d5c:	2b01      	cmp	r3, #1
 8041d5e:	d907      	bls.n	8041d70 <_fwalk_reent+0x38>
 8041d60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8041d64:	3301      	adds	r3, #1
 8041d66:	d003      	beq.n	8041d70 <_fwalk_reent+0x38>
 8041d68:	4629      	mov	r1, r5
 8041d6a:	4640      	mov	r0, r8
 8041d6c:	47c8      	blx	r9
 8041d6e:	4306      	orrs	r6, r0
 8041d70:	3568      	adds	r5, #104	; 0x68
 8041d72:	e7ee      	b.n	8041d52 <_fwalk_reent+0x1a>

08041d74 <_malloc_r>:
 8041d74:	b570      	push	{r4, r5, r6, lr}
 8041d76:	1ccd      	adds	r5, r1, #3
 8041d78:	4606      	mov	r6, r0
 8041d7a:	f025 0503 	bic.w	r5, r5, #3
 8041d7e:	3508      	adds	r5, #8
 8041d80:	2d0c      	cmp	r5, #12
 8041d82:	bf38      	it	cc
 8041d84:	250c      	movcc	r5, #12
 8041d86:	2d00      	cmp	r5, #0
 8041d88:	db01      	blt.n	8041d8e <_malloc_r+0x1a>
 8041d8a:	42a9      	cmp	r1, r5
 8041d8c:	d903      	bls.n	8041d96 <_malloc_r+0x22>
 8041d8e:	230c      	movs	r3, #12
 8041d90:	6033      	str	r3, [r6, #0]
 8041d92:	2000      	movs	r0, #0
 8041d94:	bd70      	pop	{r4, r5, r6, pc}
 8041d96:	f000 fd79 	bl	804288c <__malloc_lock>
 8041d9a:	4a21      	ldr	r2, [pc, #132]	; (8041e20 <_malloc_r+0xac>)
 8041d9c:	6814      	ldr	r4, [r2, #0]
 8041d9e:	4621      	mov	r1, r4
 8041da0:	b991      	cbnz	r1, 8041dc8 <_malloc_r+0x54>
 8041da2:	4c20      	ldr	r4, [pc, #128]	; (8041e24 <_malloc_r+0xb0>)
 8041da4:	6823      	ldr	r3, [r4, #0]
 8041da6:	b91b      	cbnz	r3, 8041db0 <_malloc_r+0x3c>
 8041da8:	4630      	mov	r0, r6
 8041daa:	f000 fb07 	bl	80423bc <_sbrk_r>
 8041dae:	6020      	str	r0, [r4, #0]
 8041db0:	4629      	mov	r1, r5
 8041db2:	4630      	mov	r0, r6
 8041db4:	f000 fb02 	bl	80423bc <_sbrk_r>
 8041db8:	1c43      	adds	r3, r0, #1
 8041dba:	d124      	bne.n	8041e06 <_malloc_r+0x92>
 8041dbc:	230c      	movs	r3, #12
 8041dbe:	4630      	mov	r0, r6
 8041dc0:	6033      	str	r3, [r6, #0]
 8041dc2:	f000 fd64 	bl	804288e <__malloc_unlock>
 8041dc6:	e7e4      	b.n	8041d92 <_malloc_r+0x1e>
 8041dc8:	680b      	ldr	r3, [r1, #0]
 8041dca:	1b5b      	subs	r3, r3, r5
 8041dcc:	d418      	bmi.n	8041e00 <_malloc_r+0x8c>
 8041dce:	2b0b      	cmp	r3, #11
 8041dd0:	d90f      	bls.n	8041df2 <_malloc_r+0x7e>
 8041dd2:	18cc      	adds	r4, r1, r3
 8041dd4:	600b      	str	r3, [r1, #0]
 8041dd6:	50cd      	str	r5, [r1, r3]
 8041dd8:	4630      	mov	r0, r6
 8041dda:	f000 fd58 	bl	804288e <__malloc_unlock>
 8041dde:	f104 000b 	add.w	r0, r4, #11
 8041de2:	1d23      	adds	r3, r4, #4
 8041de4:	f020 0007 	bic.w	r0, r0, #7
 8041de8:	1ac3      	subs	r3, r0, r3
 8041dea:	d0d3      	beq.n	8041d94 <_malloc_r+0x20>
 8041dec:	425a      	negs	r2, r3
 8041dee:	50e2      	str	r2, [r4, r3]
 8041df0:	e7d0      	b.n	8041d94 <_malloc_r+0x20>
 8041df2:	428c      	cmp	r4, r1
 8041df4:	684b      	ldr	r3, [r1, #4]
 8041df6:	bf1a      	itte	ne
 8041df8:	6063      	strne	r3, [r4, #4]
 8041dfa:	460c      	movne	r4, r1
 8041dfc:	6013      	streq	r3, [r2, #0]
 8041dfe:	e7eb      	b.n	8041dd8 <_malloc_r+0x64>
 8041e00:	460c      	mov	r4, r1
 8041e02:	6849      	ldr	r1, [r1, #4]
 8041e04:	e7cc      	b.n	8041da0 <_malloc_r+0x2c>
 8041e06:	1cc4      	adds	r4, r0, #3
 8041e08:	f024 0403 	bic.w	r4, r4, #3
 8041e0c:	42a0      	cmp	r0, r4
 8041e0e:	d005      	beq.n	8041e1c <_malloc_r+0xa8>
 8041e10:	1a21      	subs	r1, r4, r0
 8041e12:	4630      	mov	r0, r6
 8041e14:	f000 fad2 	bl	80423bc <_sbrk_r>
 8041e18:	3001      	adds	r0, #1
 8041e1a:	d0cf      	beq.n	8041dbc <_malloc_r+0x48>
 8041e1c:	6025      	str	r5, [r4, #0]
 8041e1e:	e7db      	b.n	8041dd8 <_malloc_r+0x64>
 8041e20:	20018090 	.word	0x20018090
 8041e24:	20018094 	.word	0x20018094

08041e28 <__sfputc_r>:
 8041e28:	6893      	ldr	r3, [r2, #8]
 8041e2a:	3b01      	subs	r3, #1
 8041e2c:	2b00      	cmp	r3, #0
 8041e2e:	6093      	str	r3, [r2, #8]
 8041e30:	b410      	push	{r4}
 8041e32:	da08      	bge.n	8041e46 <__sfputc_r+0x1e>
 8041e34:	6994      	ldr	r4, [r2, #24]
 8041e36:	42a3      	cmp	r3, r4
 8041e38:	db01      	blt.n	8041e3e <__sfputc_r+0x16>
 8041e3a:	290a      	cmp	r1, #10
 8041e3c:	d103      	bne.n	8041e46 <__sfputc_r+0x1e>
 8041e3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8041e42:	f000 bb0f 	b.w	8042464 <__swbuf_r>
 8041e46:	6813      	ldr	r3, [r2, #0]
 8041e48:	1c58      	adds	r0, r3, #1
 8041e4a:	6010      	str	r0, [r2, #0]
 8041e4c:	4608      	mov	r0, r1
 8041e4e:	7019      	strb	r1, [r3, #0]
 8041e50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8041e54:	4770      	bx	lr

08041e56 <__sfputs_r>:
 8041e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8041e58:	4606      	mov	r6, r0
 8041e5a:	460f      	mov	r7, r1
 8041e5c:	4614      	mov	r4, r2
 8041e5e:	18d5      	adds	r5, r2, r3
 8041e60:	42ac      	cmp	r4, r5
 8041e62:	d101      	bne.n	8041e68 <__sfputs_r+0x12>
 8041e64:	2000      	movs	r0, #0
 8041e66:	e007      	b.n	8041e78 <__sfputs_r+0x22>
 8041e68:	463a      	mov	r2, r7
 8041e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8041e6e:	4630      	mov	r0, r6
 8041e70:	f7ff ffda 	bl	8041e28 <__sfputc_r>
 8041e74:	1c43      	adds	r3, r0, #1
 8041e76:	d1f3      	bne.n	8041e60 <__sfputs_r+0xa>
 8041e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08041e7c <_vfiprintf_r>:
 8041e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8041e80:	460c      	mov	r4, r1
 8041e82:	b09d      	sub	sp, #116	; 0x74
 8041e84:	4617      	mov	r7, r2
 8041e86:	461d      	mov	r5, r3
 8041e88:	4606      	mov	r6, r0
 8041e8a:	b118      	cbz	r0, 8041e94 <_vfiprintf_r+0x18>
 8041e8c:	6983      	ldr	r3, [r0, #24]
 8041e8e:	b90b      	cbnz	r3, 8041e94 <_vfiprintf_r+0x18>
 8041e90:	f7ff fee6 	bl	8041c60 <__sinit>
 8041e94:	4b7c      	ldr	r3, [pc, #496]	; (8042088 <_vfiprintf_r+0x20c>)
 8041e96:	429c      	cmp	r4, r3
 8041e98:	d158      	bne.n	8041f4c <_vfiprintf_r+0xd0>
 8041e9a:	6874      	ldr	r4, [r6, #4]
 8041e9c:	89a3      	ldrh	r3, [r4, #12]
 8041e9e:	0718      	lsls	r0, r3, #28
 8041ea0:	d55e      	bpl.n	8041f60 <_vfiprintf_r+0xe4>
 8041ea2:	6923      	ldr	r3, [r4, #16]
 8041ea4:	2b00      	cmp	r3, #0
 8041ea6:	d05b      	beq.n	8041f60 <_vfiprintf_r+0xe4>
 8041ea8:	2300      	movs	r3, #0
 8041eaa:	f04f 0b01 	mov.w	fp, #1
 8041eae:	9503      	str	r5, [sp, #12]
 8041eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8041eb2:	2320      	movs	r3, #32
 8041eb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8041eb8:	2330      	movs	r3, #48	; 0x30
 8041eba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8041ebe:	46b8      	mov	r8, r7
 8041ec0:	4645      	mov	r5, r8
 8041ec2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8041ec6:	b10b      	cbz	r3, 8041ecc <_vfiprintf_r+0x50>
 8041ec8:	2b25      	cmp	r3, #37	; 0x25
 8041eca:	d154      	bne.n	8041f76 <_vfiprintf_r+0xfa>
 8041ecc:	ebb8 0a07 	subs.w	sl, r8, r7
 8041ed0:	d00b      	beq.n	8041eea <_vfiprintf_r+0x6e>
 8041ed2:	4653      	mov	r3, sl
 8041ed4:	463a      	mov	r2, r7
 8041ed6:	4621      	mov	r1, r4
 8041ed8:	4630      	mov	r0, r6
 8041eda:	f7ff ffbc 	bl	8041e56 <__sfputs_r>
 8041ede:	3001      	adds	r0, #1
 8041ee0:	f000 80c2 	beq.w	8042068 <_vfiprintf_r+0x1ec>
 8041ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8041ee6:	4453      	add	r3, sl
 8041ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8041eea:	f898 3000 	ldrb.w	r3, [r8]
 8041eee:	2b00      	cmp	r3, #0
 8041ef0:	f000 80ba 	beq.w	8042068 <_vfiprintf_r+0x1ec>
 8041ef4:	2300      	movs	r3, #0
 8041ef6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8041efa:	9304      	str	r3, [sp, #16]
 8041efc:	9307      	str	r3, [sp, #28]
 8041efe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8041f02:	931a      	str	r3, [sp, #104]	; 0x68
 8041f04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8041f08:	46a8      	mov	r8, r5
 8041f0a:	2205      	movs	r2, #5
 8041f0c:	485f      	ldr	r0, [pc, #380]	; (804208c <_vfiprintf_r+0x210>)
 8041f0e:	f818 1b01 	ldrb.w	r1, [r8], #1
 8041f12:	f000 fcad 	bl	8042870 <memchr>
 8041f16:	9b04      	ldr	r3, [sp, #16]
 8041f18:	bb78      	cbnz	r0, 8041f7a <_vfiprintf_r+0xfe>
 8041f1a:	06d9      	lsls	r1, r3, #27
 8041f1c:	bf44      	itt	mi
 8041f1e:	2220      	movmi	r2, #32
 8041f20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8041f24:	071a      	lsls	r2, r3, #28
 8041f26:	bf44      	itt	mi
 8041f28:	222b      	movmi	r2, #43	; 0x2b
 8041f2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8041f2e:	782a      	ldrb	r2, [r5, #0]
 8041f30:	2a2a      	cmp	r2, #42	; 0x2a
 8041f32:	d02a      	beq.n	8041f8a <_vfiprintf_r+0x10e>
 8041f34:	46a8      	mov	r8, r5
 8041f36:	9a07      	ldr	r2, [sp, #28]
 8041f38:	2000      	movs	r0, #0
 8041f3a:	250a      	movs	r5, #10
 8041f3c:	4641      	mov	r1, r8
 8041f3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8041f42:	3b30      	subs	r3, #48	; 0x30
 8041f44:	2b09      	cmp	r3, #9
 8041f46:	d969      	bls.n	804201c <_vfiprintf_r+0x1a0>
 8041f48:	b360      	cbz	r0, 8041fa4 <_vfiprintf_r+0x128>
 8041f4a:	e024      	b.n	8041f96 <_vfiprintf_r+0x11a>
 8041f4c:	4b50      	ldr	r3, [pc, #320]	; (8042090 <_vfiprintf_r+0x214>)
 8041f4e:	429c      	cmp	r4, r3
 8041f50:	d101      	bne.n	8041f56 <_vfiprintf_r+0xda>
 8041f52:	68b4      	ldr	r4, [r6, #8]
 8041f54:	e7a2      	b.n	8041e9c <_vfiprintf_r+0x20>
 8041f56:	4b4f      	ldr	r3, [pc, #316]	; (8042094 <_vfiprintf_r+0x218>)
 8041f58:	429c      	cmp	r4, r3
 8041f5a:	bf08      	it	eq
 8041f5c:	68f4      	ldreq	r4, [r6, #12]
 8041f5e:	e79d      	b.n	8041e9c <_vfiprintf_r+0x20>
 8041f60:	4621      	mov	r1, r4
 8041f62:	4630      	mov	r0, r6
 8041f64:	f000 fae2 	bl	804252c <__swsetup_r>
 8041f68:	2800      	cmp	r0, #0
 8041f6a:	d09d      	beq.n	8041ea8 <_vfiprintf_r+0x2c>
 8041f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8041f70:	b01d      	add	sp, #116	; 0x74
 8041f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8041f76:	46a8      	mov	r8, r5
 8041f78:	e7a2      	b.n	8041ec0 <_vfiprintf_r+0x44>
 8041f7a:	4a44      	ldr	r2, [pc, #272]	; (804208c <_vfiprintf_r+0x210>)
 8041f7c:	4645      	mov	r5, r8
 8041f7e:	1a80      	subs	r0, r0, r2
 8041f80:	fa0b f000 	lsl.w	r0, fp, r0
 8041f84:	4318      	orrs	r0, r3
 8041f86:	9004      	str	r0, [sp, #16]
 8041f88:	e7be      	b.n	8041f08 <_vfiprintf_r+0x8c>
 8041f8a:	9a03      	ldr	r2, [sp, #12]
 8041f8c:	1d11      	adds	r1, r2, #4
 8041f8e:	6812      	ldr	r2, [r2, #0]
 8041f90:	2a00      	cmp	r2, #0
 8041f92:	9103      	str	r1, [sp, #12]
 8041f94:	db01      	blt.n	8041f9a <_vfiprintf_r+0x11e>
 8041f96:	9207      	str	r2, [sp, #28]
 8041f98:	e004      	b.n	8041fa4 <_vfiprintf_r+0x128>
 8041f9a:	4252      	negs	r2, r2
 8041f9c:	f043 0302 	orr.w	r3, r3, #2
 8041fa0:	9207      	str	r2, [sp, #28]
 8041fa2:	9304      	str	r3, [sp, #16]
 8041fa4:	f898 3000 	ldrb.w	r3, [r8]
 8041fa8:	2b2e      	cmp	r3, #46	; 0x2e
 8041faa:	d10e      	bne.n	8041fca <_vfiprintf_r+0x14e>
 8041fac:	f898 3001 	ldrb.w	r3, [r8, #1]
 8041fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8041fb2:	d138      	bne.n	8042026 <_vfiprintf_r+0x1aa>
 8041fb4:	9b03      	ldr	r3, [sp, #12]
 8041fb6:	f108 0802 	add.w	r8, r8, #2
 8041fba:	1d1a      	adds	r2, r3, #4
 8041fbc:	681b      	ldr	r3, [r3, #0]
 8041fbe:	2b00      	cmp	r3, #0
 8041fc0:	9203      	str	r2, [sp, #12]
 8041fc2:	bfb8      	it	lt
 8041fc4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8041fc8:	9305      	str	r3, [sp, #20]
 8041fca:	4d33      	ldr	r5, [pc, #204]	; (8042098 <_vfiprintf_r+0x21c>)
 8041fcc:	2203      	movs	r2, #3
 8041fce:	f898 1000 	ldrb.w	r1, [r8]
 8041fd2:	4628      	mov	r0, r5
 8041fd4:	f000 fc4c 	bl	8042870 <memchr>
 8041fd8:	b140      	cbz	r0, 8041fec <_vfiprintf_r+0x170>
 8041fda:	2340      	movs	r3, #64	; 0x40
 8041fdc:	1b40      	subs	r0, r0, r5
 8041fde:	f108 0801 	add.w	r8, r8, #1
 8041fe2:	fa03 f000 	lsl.w	r0, r3, r0
 8041fe6:	9b04      	ldr	r3, [sp, #16]
 8041fe8:	4303      	orrs	r3, r0
 8041fea:	9304      	str	r3, [sp, #16]
 8041fec:	f898 1000 	ldrb.w	r1, [r8]
 8041ff0:	2206      	movs	r2, #6
 8041ff2:	482a      	ldr	r0, [pc, #168]	; (804209c <_vfiprintf_r+0x220>)
 8041ff4:	f108 0701 	add.w	r7, r8, #1
 8041ff8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8041ffc:	f000 fc38 	bl	8042870 <memchr>
 8042000:	2800      	cmp	r0, #0
 8042002:	d037      	beq.n	8042074 <_vfiprintf_r+0x1f8>
 8042004:	4b26      	ldr	r3, [pc, #152]	; (80420a0 <_vfiprintf_r+0x224>)
 8042006:	bb1b      	cbnz	r3, 8042050 <_vfiprintf_r+0x1d4>
 8042008:	9b03      	ldr	r3, [sp, #12]
 804200a:	3307      	adds	r3, #7
 804200c:	f023 0307 	bic.w	r3, r3, #7
 8042010:	3308      	adds	r3, #8
 8042012:	9303      	str	r3, [sp, #12]
 8042014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8042016:	444b      	add	r3, r9
 8042018:	9309      	str	r3, [sp, #36]	; 0x24
 804201a:	e750      	b.n	8041ebe <_vfiprintf_r+0x42>
 804201c:	fb05 3202 	mla	r2, r5, r2, r3
 8042020:	2001      	movs	r0, #1
 8042022:	4688      	mov	r8, r1
 8042024:	e78a      	b.n	8041f3c <_vfiprintf_r+0xc0>
 8042026:	2300      	movs	r3, #0
 8042028:	f108 0801 	add.w	r8, r8, #1
 804202c:	250a      	movs	r5, #10
 804202e:	4619      	mov	r1, r3
 8042030:	9305      	str	r3, [sp, #20]
 8042032:	4640      	mov	r0, r8
 8042034:	f810 2b01 	ldrb.w	r2, [r0], #1
 8042038:	3a30      	subs	r2, #48	; 0x30
 804203a:	2a09      	cmp	r2, #9
 804203c:	d903      	bls.n	8042046 <_vfiprintf_r+0x1ca>
 804203e:	2b00      	cmp	r3, #0
 8042040:	d0c3      	beq.n	8041fca <_vfiprintf_r+0x14e>
 8042042:	9105      	str	r1, [sp, #20]
 8042044:	e7c1      	b.n	8041fca <_vfiprintf_r+0x14e>
 8042046:	fb05 2101 	mla	r1, r5, r1, r2
 804204a:	2301      	movs	r3, #1
 804204c:	4680      	mov	r8, r0
 804204e:	e7f0      	b.n	8042032 <_vfiprintf_r+0x1b6>
 8042050:	ab03      	add	r3, sp, #12
 8042052:	4622      	mov	r2, r4
 8042054:	a904      	add	r1, sp, #16
 8042056:	4630      	mov	r0, r6
 8042058:	9300      	str	r3, [sp, #0]
 804205a:	4b12      	ldr	r3, [pc, #72]	; (80420a4 <_vfiprintf_r+0x228>)
 804205c:	e000      	b.n	8042060 <_vfiprintf_r+0x1e4>
 804205e:	bf00      	nop
 8042060:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8042064:	4681      	mov	r9, r0
 8042066:	d1d5      	bne.n	8042014 <_vfiprintf_r+0x198>
 8042068:	89a3      	ldrh	r3, [r4, #12]
 804206a:	065b      	lsls	r3, r3, #25
 804206c:	f53f af7e 	bmi.w	8041f6c <_vfiprintf_r+0xf0>
 8042070:	9809      	ldr	r0, [sp, #36]	; 0x24
 8042072:	e77d      	b.n	8041f70 <_vfiprintf_r+0xf4>
 8042074:	ab03      	add	r3, sp, #12
 8042076:	4622      	mov	r2, r4
 8042078:	a904      	add	r1, sp, #16
 804207a:	4630      	mov	r0, r6
 804207c:	9300      	str	r3, [sp, #0]
 804207e:	4b09      	ldr	r3, [pc, #36]	; (80420a4 <_vfiprintf_r+0x228>)
 8042080:	f000 f88a 	bl	8042198 <_printf_i>
 8042084:	e7ec      	b.n	8042060 <_vfiprintf_r+0x1e4>
 8042086:	bf00      	nop
 8042088:	08042a74 	.word	0x08042a74
 804208c:	08042ab4 	.word	0x08042ab4
 8042090:	08042a94 	.word	0x08042a94
 8042094:	08042a54 	.word	0x08042a54
 8042098:	08042aba 	.word	0x08042aba
 804209c:	08042abe 	.word	0x08042abe
 80420a0:	00000000 	.word	0x00000000
 80420a4:	08041e57 	.word	0x08041e57

080420a8 <_printf_common>:
 80420a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80420ac:	4691      	mov	r9, r2
 80420ae:	461f      	mov	r7, r3
 80420b0:	688a      	ldr	r2, [r1, #8]
 80420b2:	4606      	mov	r6, r0
 80420b4:	690b      	ldr	r3, [r1, #16]
 80420b6:	460c      	mov	r4, r1
 80420b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80420bc:	4293      	cmp	r3, r2
 80420be:	bfb8      	it	lt
 80420c0:	4613      	movlt	r3, r2
 80420c2:	f8c9 3000 	str.w	r3, [r9]
 80420c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80420ca:	b112      	cbz	r2, 80420d2 <_printf_common+0x2a>
 80420cc:	3301      	adds	r3, #1
 80420ce:	f8c9 3000 	str.w	r3, [r9]
 80420d2:	6823      	ldr	r3, [r4, #0]
 80420d4:	0699      	lsls	r1, r3, #26
 80420d6:	bf42      	ittt	mi
 80420d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80420dc:	3302      	addmi	r3, #2
 80420de:	f8c9 3000 	strmi.w	r3, [r9]
 80420e2:	6825      	ldr	r5, [r4, #0]
 80420e4:	f015 0506 	ands.w	r5, r5, #6
 80420e8:	d107      	bne.n	80420fa <_printf_common+0x52>
 80420ea:	f104 0a19 	add.w	sl, r4, #25
 80420ee:	68e3      	ldr	r3, [r4, #12]
 80420f0:	f8d9 2000 	ldr.w	r2, [r9]
 80420f4:	1a9b      	subs	r3, r3, r2
 80420f6:	42ab      	cmp	r3, r5
 80420f8:	dc2b      	bgt.n	8042152 <_printf_common+0xaa>
 80420fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80420fe:	6822      	ldr	r2, [r4, #0]
 8042100:	3300      	adds	r3, #0
 8042102:	bf18      	it	ne
 8042104:	2301      	movne	r3, #1
 8042106:	0692      	lsls	r2, r2, #26
 8042108:	d430      	bmi.n	804216c <_printf_common+0xc4>
 804210a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 804210e:	4639      	mov	r1, r7
 8042110:	4630      	mov	r0, r6
 8042112:	47c0      	blx	r8
 8042114:	3001      	adds	r0, #1
 8042116:	d023      	beq.n	8042160 <_printf_common+0xb8>
 8042118:	6823      	ldr	r3, [r4, #0]
 804211a:	341a      	adds	r4, #26
 804211c:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8042120:	f003 0306 	and.w	r3, r3, #6
 8042124:	f8d9 2000 	ldr.w	r2, [r9]
 8042128:	f04f 0900 	mov.w	r9, #0
 804212c:	2b04      	cmp	r3, #4
 804212e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8042132:	bf08      	it	eq
 8042134:	1aad      	subeq	r5, r5, r2
 8042136:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 804213a:	bf14      	ite	ne
 804213c:	2500      	movne	r5, #0
 804213e:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8042142:	4293      	cmp	r3, r2
 8042144:	bfc4      	itt	gt
 8042146:	1a9b      	subgt	r3, r3, r2
 8042148:	18ed      	addgt	r5, r5, r3
 804214a:	454d      	cmp	r5, r9
 804214c:	d11a      	bne.n	8042184 <_printf_common+0xdc>
 804214e:	2000      	movs	r0, #0
 8042150:	e008      	b.n	8042164 <_printf_common+0xbc>
 8042152:	2301      	movs	r3, #1
 8042154:	4652      	mov	r2, sl
 8042156:	4639      	mov	r1, r7
 8042158:	4630      	mov	r0, r6
 804215a:	47c0      	blx	r8
 804215c:	3001      	adds	r0, #1
 804215e:	d103      	bne.n	8042168 <_printf_common+0xc0>
 8042160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8042164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8042168:	3501      	adds	r5, #1
 804216a:	e7c0      	b.n	80420ee <_printf_common+0x46>
 804216c:	18e1      	adds	r1, r4, r3
 804216e:	1c5a      	adds	r2, r3, #1
 8042170:	2030      	movs	r0, #48	; 0x30
 8042172:	3302      	adds	r3, #2
 8042174:	4422      	add	r2, r4
 8042176:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 804217a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 804217e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8042182:	e7c2      	b.n	804210a <_printf_common+0x62>
 8042184:	2301      	movs	r3, #1
 8042186:	4622      	mov	r2, r4
 8042188:	4639      	mov	r1, r7
 804218a:	4630      	mov	r0, r6
 804218c:	47c0      	blx	r8
 804218e:	3001      	adds	r0, #1
 8042190:	d0e6      	beq.n	8042160 <_printf_common+0xb8>
 8042192:	f109 0901 	add.w	r9, r9, #1
 8042196:	e7d8      	b.n	804214a <_printf_common+0xa2>

08042198 <_printf_i>:
 8042198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 804219c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80421a0:	460c      	mov	r4, r1
 80421a2:	7e09      	ldrb	r1, [r1, #24]
 80421a4:	b085      	sub	sp, #20
 80421a6:	4617      	mov	r7, r2
 80421a8:	4606      	mov	r6, r0
 80421aa:	296e      	cmp	r1, #110	; 0x6e
 80421ac:	4698      	mov	r8, r3
 80421ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80421b0:	f000 80b3 	beq.w	804231a <_printf_i+0x182>
 80421b4:	d822      	bhi.n	80421fc <_printf_i+0x64>
 80421b6:	2963      	cmp	r1, #99	; 0x63
 80421b8:	d036      	beq.n	8042228 <_printf_i+0x90>
 80421ba:	d80a      	bhi.n	80421d2 <_printf_i+0x3a>
 80421bc:	2900      	cmp	r1, #0
 80421be:	f000 80b9 	beq.w	8042334 <_printf_i+0x19c>
 80421c2:	2958      	cmp	r1, #88	; 0x58
 80421c4:	f000 8083 	beq.w	80422ce <_printf_i+0x136>
 80421c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80421cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80421d0:	e032      	b.n	8042238 <_printf_i+0xa0>
 80421d2:	2964      	cmp	r1, #100	; 0x64
 80421d4:	d001      	beq.n	80421da <_printf_i+0x42>
 80421d6:	2969      	cmp	r1, #105	; 0x69
 80421d8:	d1f6      	bne.n	80421c8 <_printf_i+0x30>
 80421da:	6820      	ldr	r0, [r4, #0]
 80421dc:	6813      	ldr	r3, [r2, #0]
 80421de:	0605      	lsls	r5, r0, #24
 80421e0:	f103 0104 	add.w	r1, r3, #4
 80421e4:	d52a      	bpl.n	804223c <_printf_i+0xa4>
 80421e6:	681b      	ldr	r3, [r3, #0]
 80421e8:	6011      	str	r1, [r2, #0]
 80421ea:	2b00      	cmp	r3, #0
 80421ec:	da03      	bge.n	80421f6 <_printf_i+0x5e>
 80421ee:	222d      	movs	r2, #45	; 0x2d
 80421f0:	425b      	negs	r3, r3
 80421f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80421f6:	486f      	ldr	r0, [pc, #444]	; (80423b4 <_printf_i+0x21c>)
 80421f8:	220a      	movs	r2, #10
 80421fa:	e039      	b.n	8042270 <_printf_i+0xd8>
 80421fc:	2973      	cmp	r1, #115	; 0x73
 80421fe:	f000 809d 	beq.w	804233c <_printf_i+0x1a4>
 8042202:	d808      	bhi.n	8042216 <_printf_i+0x7e>
 8042204:	296f      	cmp	r1, #111	; 0x6f
 8042206:	d020      	beq.n	804224a <_printf_i+0xb2>
 8042208:	2970      	cmp	r1, #112	; 0x70
 804220a:	d1dd      	bne.n	80421c8 <_printf_i+0x30>
 804220c:	6823      	ldr	r3, [r4, #0]
 804220e:	f043 0320 	orr.w	r3, r3, #32
 8042212:	6023      	str	r3, [r4, #0]
 8042214:	e003      	b.n	804221e <_printf_i+0x86>
 8042216:	2975      	cmp	r1, #117	; 0x75
 8042218:	d017      	beq.n	804224a <_printf_i+0xb2>
 804221a:	2978      	cmp	r1, #120	; 0x78
 804221c:	d1d4      	bne.n	80421c8 <_printf_i+0x30>
 804221e:	2378      	movs	r3, #120	; 0x78
 8042220:	4865      	ldr	r0, [pc, #404]	; (80423b8 <_printf_i+0x220>)
 8042222:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8042226:	e055      	b.n	80422d4 <_printf_i+0x13c>
 8042228:	6813      	ldr	r3, [r2, #0]
 804222a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 804222e:	1d19      	adds	r1, r3, #4
 8042230:	681b      	ldr	r3, [r3, #0]
 8042232:	6011      	str	r1, [r2, #0]
 8042234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8042238:	2301      	movs	r3, #1
 804223a:	e08c      	b.n	8042356 <_printf_i+0x1be>
 804223c:	681b      	ldr	r3, [r3, #0]
 804223e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8042242:	6011      	str	r1, [r2, #0]
 8042244:	bf18      	it	ne
 8042246:	b21b      	sxthne	r3, r3
 8042248:	e7cf      	b.n	80421ea <_printf_i+0x52>
 804224a:	6813      	ldr	r3, [r2, #0]
 804224c:	6825      	ldr	r5, [r4, #0]
 804224e:	1d18      	adds	r0, r3, #4
 8042250:	6010      	str	r0, [r2, #0]
 8042252:	0628      	lsls	r0, r5, #24
 8042254:	d501      	bpl.n	804225a <_printf_i+0xc2>
 8042256:	681b      	ldr	r3, [r3, #0]
 8042258:	e002      	b.n	8042260 <_printf_i+0xc8>
 804225a:	0668      	lsls	r0, r5, #25
 804225c:	d5fb      	bpl.n	8042256 <_printf_i+0xbe>
 804225e:	881b      	ldrh	r3, [r3, #0]
 8042260:	296f      	cmp	r1, #111	; 0x6f
 8042262:	4854      	ldr	r0, [pc, #336]	; (80423b4 <_printf_i+0x21c>)
 8042264:	bf14      	ite	ne
 8042266:	220a      	movne	r2, #10
 8042268:	2208      	moveq	r2, #8
 804226a:	2100      	movs	r1, #0
 804226c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8042270:	6865      	ldr	r5, [r4, #4]
 8042272:	2d00      	cmp	r5, #0
 8042274:	60a5      	str	r5, [r4, #8]
 8042276:	f2c0 8095 	blt.w	80423a4 <_printf_i+0x20c>
 804227a:	6821      	ldr	r1, [r4, #0]
 804227c:	f021 0104 	bic.w	r1, r1, #4
 8042280:	6021      	str	r1, [r4, #0]
 8042282:	2b00      	cmp	r3, #0
 8042284:	d13d      	bne.n	8042302 <_printf_i+0x16a>
 8042286:	2d00      	cmp	r5, #0
 8042288:	f040 808e 	bne.w	80423a8 <_printf_i+0x210>
 804228c:	4665      	mov	r5, ip
 804228e:	2a08      	cmp	r2, #8
 8042290:	d10b      	bne.n	80422aa <_printf_i+0x112>
 8042292:	6823      	ldr	r3, [r4, #0]
 8042294:	07db      	lsls	r3, r3, #31
 8042296:	d508      	bpl.n	80422aa <_printf_i+0x112>
 8042298:	6923      	ldr	r3, [r4, #16]
 804229a:	6862      	ldr	r2, [r4, #4]
 804229c:	429a      	cmp	r2, r3
 804229e:	bfde      	ittt	le
 80422a0:	2330      	movle	r3, #48	; 0x30
 80422a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80422a6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80422aa:	ebac 0305 	sub.w	r3, ip, r5
 80422ae:	6123      	str	r3, [r4, #16]
 80422b0:	f8cd 8000 	str.w	r8, [sp]
 80422b4:	463b      	mov	r3, r7
 80422b6:	aa03      	add	r2, sp, #12
 80422b8:	4621      	mov	r1, r4
 80422ba:	4630      	mov	r0, r6
 80422bc:	f7ff fef4 	bl	80420a8 <_printf_common>
 80422c0:	3001      	adds	r0, #1
 80422c2:	d14d      	bne.n	8042360 <_printf_i+0x1c8>
 80422c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80422c8:	b005      	add	sp, #20
 80422ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80422ce:	4839      	ldr	r0, [pc, #228]	; (80423b4 <_printf_i+0x21c>)
 80422d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80422d4:	6813      	ldr	r3, [r2, #0]
 80422d6:	6821      	ldr	r1, [r4, #0]
 80422d8:	1d1d      	adds	r5, r3, #4
 80422da:	681b      	ldr	r3, [r3, #0]
 80422dc:	6015      	str	r5, [r2, #0]
 80422de:	060a      	lsls	r2, r1, #24
 80422e0:	d50b      	bpl.n	80422fa <_printf_i+0x162>
 80422e2:	07ca      	lsls	r2, r1, #31
 80422e4:	bf44      	itt	mi
 80422e6:	f041 0120 	orrmi.w	r1, r1, #32
 80422ea:	6021      	strmi	r1, [r4, #0]
 80422ec:	b91b      	cbnz	r3, 80422f6 <_printf_i+0x15e>
 80422ee:	6822      	ldr	r2, [r4, #0]
 80422f0:	f022 0220 	bic.w	r2, r2, #32
 80422f4:	6022      	str	r2, [r4, #0]
 80422f6:	2210      	movs	r2, #16
 80422f8:	e7b7      	b.n	804226a <_printf_i+0xd2>
 80422fa:	064d      	lsls	r5, r1, #25
 80422fc:	bf48      	it	mi
 80422fe:	b29b      	uxthmi	r3, r3
 8042300:	e7ef      	b.n	80422e2 <_printf_i+0x14a>
 8042302:	4665      	mov	r5, ip
 8042304:	fbb3 f1f2 	udiv	r1, r3, r2
 8042308:	fb02 3311 	mls	r3, r2, r1, r3
 804230c:	5cc3      	ldrb	r3, [r0, r3]
 804230e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8042312:	460b      	mov	r3, r1
 8042314:	2900      	cmp	r1, #0
 8042316:	d1f5      	bne.n	8042304 <_printf_i+0x16c>
 8042318:	e7b9      	b.n	804228e <_printf_i+0xf6>
 804231a:	6813      	ldr	r3, [r2, #0]
 804231c:	6825      	ldr	r5, [r4, #0]
 804231e:	1d18      	adds	r0, r3, #4
 8042320:	6961      	ldr	r1, [r4, #20]
 8042322:	6010      	str	r0, [r2, #0]
 8042324:	0628      	lsls	r0, r5, #24
 8042326:	681b      	ldr	r3, [r3, #0]
 8042328:	d501      	bpl.n	804232e <_printf_i+0x196>
 804232a:	6019      	str	r1, [r3, #0]
 804232c:	e002      	b.n	8042334 <_printf_i+0x19c>
 804232e:	066a      	lsls	r2, r5, #25
 8042330:	d5fb      	bpl.n	804232a <_printf_i+0x192>
 8042332:	8019      	strh	r1, [r3, #0]
 8042334:	2300      	movs	r3, #0
 8042336:	4665      	mov	r5, ip
 8042338:	6123      	str	r3, [r4, #16]
 804233a:	e7b9      	b.n	80422b0 <_printf_i+0x118>
 804233c:	6813      	ldr	r3, [r2, #0]
 804233e:	1d19      	adds	r1, r3, #4
 8042340:	6011      	str	r1, [r2, #0]
 8042342:	2100      	movs	r1, #0
 8042344:	681d      	ldr	r5, [r3, #0]
 8042346:	6862      	ldr	r2, [r4, #4]
 8042348:	4628      	mov	r0, r5
 804234a:	f000 fa91 	bl	8042870 <memchr>
 804234e:	b108      	cbz	r0, 8042354 <_printf_i+0x1bc>
 8042350:	1b40      	subs	r0, r0, r5
 8042352:	6060      	str	r0, [r4, #4]
 8042354:	6863      	ldr	r3, [r4, #4]
 8042356:	6123      	str	r3, [r4, #16]
 8042358:	2300      	movs	r3, #0
 804235a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 804235e:	e7a7      	b.n	80422b0 <_printf_i+0x118>
 8042360:	6923      	ldr	r3, [r4, #16]
 8042362:	462a      	mov	r2, r5
 8042364:	4639      	mov	r1, r7
 8042366:	4630      	mov	r0, r6
 8042368:	47c0      	blx	r8
 804236a:	3001      	adds	r0, #1
 804236c:	d0aa      	beq.n	80422c4 <_printf_i+0x12c>
 804236e:	6823      	ldr	r3, [r4, #0]
 8042370:	079b      	lsls	r3, r3, #30
 8042372:	d413      	bmi.n	804239c <_printf_i+0x204>
 8042374:	68e0      	ldr	r0, [r4, #12]
 8042376:	9b03      	ldr	r3, [sp, #12]
 8042378:	4298      	cmp	r0, r3
 804237a:	bfb8      	it	lt
 804237c:	4618      	movlt	r0, r3
 804237e:	e7a3      	b.n	80422c8 <_printf_i+0x130>
 8042380:	2301      	movs	r3, #1
 8042382:	464a      	mov	r2, r9
 8042384:	4639      	mov	r1, r7
 8042386:	4630      	mov	r0, r6
 8042388:	47c0      	blx	r8
 804238a:	3001      	adds	r0, #1
 804238c:	d09a      	beq.n	80422c4 <_printf_i+0x12c>
 804238e:	3501      	adds	r5, #1
 8042390:	68e3      	ldr	r3, [r4, #12]
 8042392:	9a03      	ldr	r2, [sp, #12]
 8042394:	1a9b      	subs	r3, r3, r2
 8042396:	42ab      	cmp	r3, r5
 8042398:	dcf2      	bgt.n	8042380 <_printf_i+0x1e8>
 804239a:	e7eb      	b.n	8042374 <_printf_i+0x1dc>
 804239c:	2500      	movs	r5, #0
 804239e:	f104 0919 	add.w	r9, r4, #25
 80423a2:	e7f5      	b.n	8042390 <_printf_i+0x1f8>
 80423a4:	2b00      	cmp	r3, #0
 80423a6:	d1ac      	bne.n	8042302 <_printf_i+0x16a>
 80423a8:	7803      	ldrb	r3, [r0, #0]
 80423aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80423ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80423b2:	e76c      	b.n	804228e <_printf_i+0xf6>
 80423b4:	08042ac5 	.word	0x08042ac5
 80423b8:	08042ad6 	.word	0x08042ad6

080423bc <_sbrk_r>:
 80423bc:	b538      	push	{r3, r4, r5, lr}
 80423be:	2300      	movs	r3, #0
 80423c0:	4c05      	ldr	r4, [pc, #20]	; (80423d8 <_sbrk_r+0x1c>)
 80423c2:	4605      	mov	r5, r0
 80423c4:	4608      	mov	r0, r1
 80423c6:	6023      	str	r3, [r4, #0]
 80423c8:	f7fe f8ae 	bl	8040528 <_sbrk>
 80423cc:	1c43      	adds	r3, r0, #1
 80423ce:	d102      	bne.n	80423d6 <_sbrk_r+0x1a>
 80423d0:	6823      	ldr	r3, [r4, #0]
 80423d2:	b103      	cbz	r3, 80423d6 <_sbrk_r+0x1a>
 80423d4:	602b      	str	r3, [r5, #0]
 80423d6:	bd38      	pop	{r3, r4, r5, pc}
 80423d8:	2001809c 	.word	0x2001809c

080423dc <__sread>:
 80423dc:	b510      	push	{r4, lr}
 80423de:	460c      	mov	r4, r1
 80423e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80423e4:	f000 faa2 	bl	804292c <_read_r>
 80423e8:	2800      	cmp	r0, #0
 80423ea:	bfab      	itete	ge
 80423ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80423ee:	89a3      	ldrhlt	r3, [r4, #12]
 80423f0:	181b      	addge	r3, r3, r0
 80423f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80423f6:	bfac      	ite	ge
 80423f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80423fa:	81a3      	strhlt	r3, [r4, #12]
 80423fc:	bd10      	pop	{r4, pc}

080423fe <__swrite>:
 80423fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8042402:	461f      	mov	r7, r3
 8042404:	898b      	ldrh	r3, [r1, #12]
 8042406:	4605      	mov	r5, r0
 8042408:	460c      	mov	r4, r1
 804240a:	05db      	lsls	r3, r3, #23
 804240c:	4616      	mov	r6, r2
 804240e:	d505      	bpl.n	804241c <__swrite+0x1e>
 8042410:	2302      	movs	r3, #2
 8042412:	2200      	movs	r2, #0
 8042414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8042418:	f000 f9b4 	bl	8042784 <_lseek_r>
 804241c:	89a3      	ldrh	r3, [r4, #12]
 804241e:	4632      	mov	r2, r6
 8042420:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8042424:	4628      	mov	r0, r5
 8042426:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804242a:	81a3      	strh	r3, [r4, #12]
 804242c:	463b      	mov	r3, r7
 804242e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8042432:	f000 b869 	b.w	8042508 <_write_r>

08042436 <__sseek>:
 8042436:	b510      	push	{r4, lr}
 8042438:	460c      	mov	r4, r1
 804243a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804243e:	f000 f9a1 	bl	8042784 <_lseek_r>
 8042442:	1c43      	adds	r3, r0, #1
 8042444:	89a3      	ldrh	r3, [r4, #12]
 8042446:	bf15      	itete	ne
 8042448:	6560      	strne	r0, [r4, #84]	; 0x54
 804244a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 804244e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8042452:	81a3      	strheq	r3, [r4, #12]
 8042454:	bf18      	it	ne
 8042456:	81a3      	strhne	r3, [r4, #12]
 8042458:	bd10      	pop	{r4, pc}

0804245a <__sclose>:
 804245a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804245e:	f000 b8d3 	b.w	8042608 <_close_r>
	...

08042464 <__swbuf_r>:
 8042464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042466:	460e      	mov	r6, r1
 8042468:	4614      	mov	r4, r2
 804246a:	4605      	mov	r5, r0
 804246c:	b118      	cbz	r0, 8042476 <__swbuf_r+0x12>
 804246e:	6983      	ldr	r3, [r0, #24]
 8042470:	b90b      	cbnz	r3, 8042476 <__swbuf_r+0x12>
 8042472:	f7ff fbf5 	bl	8041c60 <__sinit>
 8042476:	4b21      	ldr	r3, [pc, #132]	; (80424fc <__swbuf_r+0x98>)
 8042478:	429c      	cmp	r4, r3
 804247a:	d12a      	bne.n	80424d2 <__swbuf_r+0x6e>
 804247c:	686c      	ldr	r4, [r5, #4]
 804247e:	69a3      	ldr	r3, [r4, #24]
 8042480:	60a3      	str	r3, [r4, #8]
 8042482:	89a3      	ldrh	r3, [r4, #12]
 8042484:	071a      	lsls	r2, r3, #28
 8042486:	d52e      	bpl.n	80424e6 <__swbuf_r+0x82>
 8042488:	6923      	ldr	r3, [r4, #16]
 804248a:	b363      	cbz	r3, 80424e6 <__swbuf_r+0x82>
 804248c:	6923      	ldr	r3, [r4, #16]
 804248e:	b2f6      	uxtb	r6, r6
 8042490:	6820      	ldr	r0, [r4, #0]
 8042492:	4637      	mov	r7, r6
 8042494:	1ac0      	subs	r0, r0, r3
 8042496:	6963      	ldr	r3, [r4, #20]
 8042498:	4283      	cmp	r3, r0
 804249a:	dc04      	bgt.n	80424a6 <__swbuf_r+0x42>
 804249c:	4621      	mov	r1, r4
 804249e:	4628      	mov	r0, r5
 80424a0:	f000 f946 	bl	8042730 <_fflush_r>
 80424a4:	bb28      	cbnz	r0, 80424f2 <__swbuf_r+0x8e>
 80424a6:	68a3      	ldr	r3, [r4, #8]
 80424a8:	3001      	adds	r0, #1
 80424aa:	3b01      	subs	r3, #1
 80424ac:	60a3      	str	r3, [r4, #8]
 80424ae:	6823      	ldr	r3, [r4, #0]
 80424b0:	1c5a      	adds	r2, r3, #1
 80424b2:	6022      	str	r2, [r4, #0]
 80424b4:	701e      	strb	r6, [r3, #0]
 80424b6:	6963      	ldr	r3, [r4, #20]
 80424b8:	4283      	cmp	r3, r0
 80424ba:	d004      	beq.n	80424c6 <__swbuf_r+0x62>
 80424bc:	89a3      	ldrh	r3, [r4, #12]
 80424be:	07db      	lsls	r3, r3, #31
 80424c0:	d519      	bpl.n	80424f6 <__swbuf_r+0x92>
 80424c2:	2e0a      	cmp	r6, #10
 80424c4:	d117      	bne.n	80424f6 <__swbuf_r+0x92>
 80424c6:	4621      	mov	r1, r4
 80424c8:	4628      	mov	r0, r5
 80424ca:	f000 f931 	bl	8042730 <_fflush_r>
 80424ce:	b190      	cbz	r0, 80424f6 <__swbuf_r+0x92>
 80424d0:	e00f      	b.n	80424f2 <__swbuf_r+0x8e>
 80424d2:	4b0b      	ldr	r3, [pc, #44]	; (8042500 <__swbuf_r+0x9c>)
 80424d4:	429c      	cmp	r4, r3
 80424d6:	d101      	bne.n	80424dc <__swbuf_r+0x78>
 80424d8:	68ac      	ldr	r4, [r5, #8]
 80424da:	e7d0      	b.n	804247e <__swbuf_r+0x1a>
 80424dc:	4b09      	ldr	r3, [pc, #36]	; (8042504 <__swbuf_r+0xa0>)
 80424de:	429c      	cmp	r4, r3
 80424e0:	bf08      	it	eq
 80424e2:	68ec      	ldreq	r4, [r5, #12]
 80424e4:	e7cb      	b.n	804247e <__swbuf_r+0x1a>
 80424e6:	4621      	mov	r1, r4
 80424e8:	4628      	mov	r0, r5
 80424ea:	f000 f81f 	bl	804252c <__swsetup_r>
 80424ee:	2800      	cmp	r0, #0
 80424f0:	d0cc      	beq.n	804248c <__swbuf_r+0x28>
 80424f2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80424f6:	4638      	mov	r0, r7
 80424f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80424fa:	bf00      	nop
 80424fc:	08042a74 	.word	0x08042a74
 8042500:	08042a94 	.word	0x08042a94
 8042504:	08042a54 	.word	0x08042a54

08042508 <_write_r>:
 8042508:	b538      	push	{r3, r4, r5, lr}
 804250a:	4605      	mov	r5, r0
 804250c:	4c06      	ldr	r4, [pc, #24]	; (8042528 <_write_r+0x20>)
 804250e:	4608      	mov	r0, r1
 8042510:	4611      	mov	r1, r2
 8042512:	2200      	movs	r2, #0
 8042514:	6022      	str	r2, [r4, #0]
 8042516:	461a      	mov	r2, r3
 8042518:	f7fd feb5 	bl	8040286 <_write>
 804251c:	1c43      	adds	r3, r0, #1
 804251e:	d102      	bne.n	8042526 <_write_r+0x1e>
 8042520:	6823      	ldr	r3, [r4, #0]
 8042522:	b103      	cbz	r3, 8042526 <_write_r+0x1e>
 8042524:	602b      	str	r3, [r5, #0]
 8042526:	bd38      	pop	{r3, r4, r5, pc}
 8042528:	2001809c 	.word	0x2001809c

0804252c <__swsetup_r>:
 804252c:	4b32      	ldr	r3, [pc, #200]	; (80425f8 <__swsetup_r+0xcc>)
 804252e:	b570      	push	{r4, r5, r6, lr}
 8042530:	681d      	ldr	r5, [r3, #0]
 8042532:	4606      	mov	r6, r0
 8042534:	460c      	mov	r4, r1
 8042536:	b125      	cbz	r5, 8042542 <__swsetup_r+0x16>
 8042538:	69ab      	ldr	r3, [r5, #24]
 804253a:	b913      	cbnz	r3, 8042542 <__swsetup_r+0x16>
 804253c:	4628      	mov	r0, r5
 804253e:	f7ff fb8f 	bl	8041c60 <__sinit>
 8042542:	4b2e      	ldr	r3, [pc, #184]	; (80425fc <__swsetup_r+0xd0>)
 8042544:	429c      	cmp	r4, r3
 8042546:	d10f      	bne.n	8042568 <__swsetup_r+0x3c>
 8042548:	686c      	ldr	r4, [r5, #4]
 804254a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804254e:	b29a      	uxth	r2, r3
 8042550:	0715      	lsls	r5, r2, #28
 8042552:	d42c      	bmi.n	80425ae <__swsetup_r+0x82>
 8042554:	06d0      	lsls	r0, r2, #27
 8042556:	d411      	bmi.n	804257c <__swsetup_r+0x50>
 8042558:	2209      	movs	r2, #9
 804255a:	6032      	str	r2, [r6, #0]
 804255c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8042560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8042564:	81a3      	strh	r3, [r4, #12]
 8042566:	e03e      	b.n	80425e6 <__swsetup_r+0xba>
 8042568:	4b25      	ldr	r3, [pc, #148]	; (8042600 <__swsetup_r+0xd4>)
 804256a:	429c      	cmp	r4, r3
 804256c:	d101      	bne.n	8042572 <__swsetup_r+0x46>
 804256e:	68ac      	ldr	r4, [r5, #8]
 8042570:	e7eb      	b.n	804254a <__swsetup_r+0x1e>
 8042572:	4b24      	ldr	r3, [pc, #144]	; (8042604 <__swsetup_r+0xd8>)
 8042574:	429c      	cmp	r4, r3
 8042576:	bf08      	it	eq
 8042578:	68ec      	ldreq	r4, [r5, #12]
 804257a:	e7e6      	b.n	804254a <__swsetup_r+0x1e>
 804257c:	0751      	lsls	r1, r2, #29
 804257e:	d512      	bpl.n	80425a6 <__swsetup_r+0x7a>
 8042580:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8042582:	b141      	cbz	r1, 8042596 <__swsetup_r+0x6a>
 8042584:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8042588:	4299      	cmp	r1, r3
 804258a:	d002      	beq.n	8042592 <__swsetup_r+0x66>
 804258c:	4630      	mov	r0, r6
 804258e:	f000 f97f 	bl	8042890 <_free_r>
 8042592:	2300      	movs	r3, #0
 8042594:	6363      	str	r3, [r4, #52]	; 0x34
 8042596:	89a3      	ldrh	r3, [r4, #12]
 8042598:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 804259c:	81a3      	strh	r3, [r4, #12]
 804259e:	2300      	movs	r3, #0
 80425a0:	6063      	str	r3, [r4, #4]
 80425a2:	6923      	ldr	r3, [r4, #16]
 80425a4:	6023      	str	r3, [r4, #0]
 80425a6:	89a3      	ldrh	r3, [r4, #12]
 80425a8:	f043 0308 	orr.w	r3, r3, #8
 80425ac:	81a3      	strh	r3, [r4, #12]
 80425ae:	6923      	ldr	r3, [r4, #16]
 80425b0:	b94b      	cbnz	r3, 80425c6 <__swsetup_r+0x9a>
 80425b2:	89a3      	ldrh	r3, [r4, #12]
 80425b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80425b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80425bc:	d003      	beq.n	80425c6 <__swsetup_r+0x9a>
 80425be:	4621      	mov	r1, r4
 80425c0:	4630      	mov	r0, r6
 80425c2:	f000 f915 	bl	80427f0 <__smakebuf_r>
 80425c6:	89a2      	ldrh	r2, [r4, #12]
 80425c8:	f012 0301 	ands.w	r3, r2, #1
 80425cc:	d00c      	beq.n	80425e8 <__swsetup_r+0xbc>
 80425ce:	2300      	movs	r3, #0
 80425d0:	60a3      	str	r3, [r4, #8]
 80425d2:	6963      	ldr	r3, [r4, #20]
 80425d4:	425b      	negs	r3, r3
 80425d6:	61a3      	str	r3, [r4, #24]
 80425d8:	6923      	ldr	r3, [r4, #16]
 80425da:	b953      	cbnz	r3, 80425f2 <__swsetup_r+0xc6>
 80425dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80425e0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80425e4:	d1ba      	bne.n	804255c <__swsetup_r+0x30>
 80425e6:	bd70      	pop	{r4, r5, r6, pc}
 80425e8:	0792      	lsls	r2, r2, #30
 80425ea:	bf58      	it	pl
 80425ec:	6963      	ldrpl	r3, [r4, #20]
 80425ee:	60a3      	str	r3, [r4, #8]
 80425f0:	e7f2      	b.n	80425d8 <__swsetup_r+0xac>
 80425f2:	2000      	movs	r0, #0
 80425f4:	e7f7      	b.n	80425e6 <__swsetup_r+0xba>
 80425f6:	bf00      	nop
 80425f8:	2001800c 	.word	0x2001800c
 80425fc:	08042a74 	.word	0x08042a74
 8042600:	08042a94 	.word	0x08042a94
 8042604:	08042a54 	.word	0x08042a54

08042608 <_close_r>:
 8042608:	b538      	push	{r3, r4, r5, lr}
 804260a:	2300      	movs	r3, #0
 804260c:	4c05      	ldr	r4, [pc, #20]	; (8042624 <_close_r+0x1c>)
 804260e:	4605      	mov	r5, r0
 8042610:	4608      	mov	r0, r1
 8042612:	6023      	str	r3, [r4, #0]
 8042614:	f7fd ff53 	bl	80404be <_close>
 8042618:	1c43      	adds	r3, r0, #1
 804261a:	d102      	bne.n	8042622 <_close_r+0x1a>
 804261c:	6823      	ldr	r3, [r4, #0]
 804261e:	b103      	cbz	r3, 8042622 <_close_r+0x1a>
 8042620:	602b      	str	r3, [r5, #0]
 8042622:	bd38      	pop	{r3, r4, r5, pc}
 8042624:	2001809c 	.word	0x2001809c

08042628 <__sflush_r>:
 8042628:	898a      	ldrh	r2, [r1, #12]
 804262a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804262e:	4605      	mov	r5, r0
 8042630:	0710      	lsls	r0, r2, #28
 8042632:	460c      	mov	r4, r1
 8042634:	d458      	bmi.n	80426e8 <__sflush_r+0xc0>
 8042636:	684b      	ldr	r3, [r1, #4]
 8042638:	2b00      	cmp	r3, #0
 804263a:	dc05      	bgt.n	8042648 <__sflush_r+0x20>
 804263c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 804263e:	2b00      	cmp	r3, #0
 8042640:	dc02      	bgt.n	8042648 <__sflush_r+0x20>
 8042642:	2000      	movs	r0, #0
 8042644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8042648:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 804264a:	2e00      	cmp	r6, #0
 804264c:	d0f9      	beq.n	8042642 <__sflush_r+0x1a>
 804264e:	2300      	movs	r3, #0
 8042650:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8042654:	682f      	ldr	r7, [r5, #0]
 8042656:	6a21      	ldr	r1, [r4, #32]
 8042658:	602b      	str	r3, [r5, #0]
 804265a:	d032      	beq.n	80426c2 <__sflush_r+0x9a>
 804265c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 804265e:	89a3      	ldrh	r3, [r4, #12]
 8042660:	075a      	lsls	r2, r3, #29
 8042662:	d505      	bpl.n	8042670 <__sflush_r+0x48>
 8042664:	6863      	ldr	r3, [r4, #4]
 8042666:	1ac0      	subs	r0, r0, r3
 8042668:	6b63      	ldr	r3, [r4, #52]	; 0x34
 804266a:	b10b      	cbz	r3, 8042670 <__sflush_r+0x48>
 804266c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804266e:	1ac0      	subs	r0, r0, r3
 8042670:	2300      	movs	r3, #0
 8042672:	4602      	mov	r2, r0
 8042674:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8042676:	4628      	mov	r0, r5
 8042678:	6a21      	ldr	r1, [r4, #32]
 804267a:	47b0      	blx	r6
 804267c:	1c43      	adds	r3, r0, #1
 804267e:	89a3      	ldrh	r3, [r4, #12]
 8042680:	d106      	bne.n	8042690 <__sflush_r+0x68>
 8042682:	6829      	ldr	r1, [r5, #0]
 8042684:	291d      	cmp	r1, #29
 8042686:	d847      	bhi.n	8042718 <__sflush_r+0xf0>
 8042688:	4a28      	ldr	r2, [pc, #160]	; (804272c <__sflush_r+0x104>)
 804268a:	40ca      	lsrs	r2, r1
 804268c:	07d6      	lsls	r6, r2, #31
 804268e:	d543      	bpl.n	8042718 <__sflush_r+0xf0>
 8042690:	2200      	movs	r2, #0
 8042692:	04d9      	lsls	r1, r3, #19
 8042694:	6062      	str	r2, [r4, #4]
 8042696:	6922      	ldr	r2, [r4, #16]
 8042698:	6022      	str	r2, [r4, #0]
 804269a:	d504      	bpl.n	80426a6 <__sflush_r+0x7e>
 804269c:	1c42      	adds	r2, r0, #1
 804269e:	d101      	bne.n	80426a4 <__sflush_r+0x7c>
 80426a0:	682b      	ldr	r3, [r5, #0]
 80426a2:	b903      	cbnz	r3, 80426a6 <__sflush_r+0x7e>
 80426a4:	6560      	str	r0, [r4, #84]	; 0x54
 80426a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80426a8:	602f      	str	r7, [r5, #0]
 80426aa:	2900      	cmp	r1, #0
 80426ac:	d0c9      	beq.n	8042642 <__sflush_r+0x1a>
 80426ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80426b2:	4299      	cmp	r1, r3
 80426b4:	d002      	beq.n	80426bc <__sflush_r+0x94>
 80426b6:	4628      	mov	r0, r5
 80426b8:	f000 f8ea 	bl	8042890 <_free_r>
 80426bc:	2000      	movs	r0, #0
 80426be:	6360      	str	r0, [r4, #52]	; 0x34
 80426c0:	e7c0      	b.n	8042644 <__sflush_r+0x1c>
 80426c2:	2301      	movs	r3, #1
 80426c4:	4628      	mov	r0, r5
 80426c6:	47b0      	blx	r6
 80426c8:	1c41      	adds	r1, r0, #1
 80426ca:	d1c8      	bne.n	804265e <__sflush_r+0x36>
 80426cc:	682b      	ldr	r3, [r5, #0]
 80426ce:	2b00      	cmp	r3, #0
 80426d0:	d0c5      	beq.n	804265e <__sflush_r+0x36>
 80426d2:	2b1d      	cmp	r3, #29
 80426d4:	d001      	beq.n	80426da <__sflush_r+0xb2>
 80426d6:	2b16      	cmp	r3, #22
 80426d8:	d101      	bne.n	80426de <__sflush_r+0xb6>
 80426da:	602f      	str	r7, [r5, #0]
 80426dc:	e7b1      	b.n	8042642 <__sflush_r+0x1a>
 80426de:	89a3      	ldrh	r3, [r4, #12]
 80426e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80426e4:	81a3      	strh	r3, [r4, #12]
 80426e6:	e7ad      	b.n	8042644 <__sflush_r+0x1c>
 80426e8:	690f      	ldr	r7, [r1, #16]
 80426ea:	2f00      	cmp	r7, #0
 80426ec:	d0a9      	beq.n	8042642 <__sflush_r+0x1a>
 80426ee:	0793      	lsls	r3, r2, #30
 80426f0:	680e      	ldr	r6, [r1, #0]
 80426f2:	600f      	str	r7, [r1, #0]
 80426f4:	bf0c      	ite	eq
 80426f6:	694b      	ldreq	r3, [r1, #20]
 80426f8:	2300      	movne	r3, #0
 80426fa:	eba6 0807 	sub.w	r8, r6, r7
 80426fe:	608b      	str	r3, [r1, #8]
 8042700:	f1b8 0f00 	cmp.w	r8, #0
 8042704:	dd9d      	ble.n	8042642 <__sflush_r+0x1a>
 8042706:	4643      	mov	r3, r8
 8042708:	463a      	mov	r2, r7
 804270a:	6a21      	ldr	r1, [r4, #32]
 804270c:	4628      	mov	r0, r5
 804270e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8042710:	47b0      	blx	r6
 8042712:	2800      	cmp	r0, #0
 8042714:	dc06      	bgt.n	8042724 <__sflush_r+0xfc>
 8042716:	89a3      	ldrh	r3, [r4, #12]
 8042718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804271c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8042720:	81a3      	strh	r3, [r4, #12]
 8042722:	e78f      	b.n	8042644 <__sflush_r+0x1c>
 8042724:	4407      	add	r7, r0
 8042726:	eba8 0800 	sub.w	r8, r8, r0
 804272a:	e7e9      	b.n	8042700 <__sflush_r+0xd8>
 804272c:	20400001 	.word	0x20400001

08042730 <_fflush_r>:
 8042730:	b538      	push	{r3, r4, r5, lr}
 8042732:	690b      	ldr	r3, [r1, #16]
 8042734:	4605      	mov	r5, r0
 8042736:	460c      	mov	r4, r1
 8042738:	b1db      	cbz	r3, 8042772 <_fflush_r+0x42>
 804273a:	b118      	cbz	r0, 8042744 <_fflush_r+0x14>
 804273c:	6983      	ldr	r3, [r0, #24]
 804273e:	b90b      	cbnz	r3, 8042744 <_fflush_r+0x14>
 8042740:	f7ff fa8e 	bl	8041c60 <__sinit>
 8042744:	4b0c      	ldr	r3, [pc, #48]	; (8042778 <_fflush_r+0x48>)
 8042746:	429c      	cmp	r4, r3
 8042748:	d109      	bne.n	804275e <_fflush_r+0x2e>
 804274a:	686c      	ldr	r4, [r5, #4]
 804274c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8042750:	b17b      	cbz	r3, 8042772 <_fflush_r+0x42>
 8042752:	4621      	mov	r1, r4
 8042754:	4628      	mov	r0, r5
 8042756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 804275a:	f7ff bf65 	b.w	8042628 <__sflush_r>
 804275e:	4b07      	ldr	r3, [pc, #28]	; (804277c <_fflush_r+0x4c>)
 8042760:	429c      	cmp	r4, r3
 8042762:	d101      	bne.n	8042768 <_fflush_r+0x38>
 8042764:	68ac      	ldr	r4, [r5, #8]
 8042766:	e7f1      	b.n	804274c <_fflush_r+0x1c>
 8042768:	4b05      	ldr	r3, [pc, #20]	; (8042780 <_fflush_r+0x50>)
 804276a:	429c      	cmp	r4, r3
 804276c:	bf08      	it	eq
 804276e:	68ec      	ldreq	r4, [r5, #12]
 8042770:	e7ec      	b.n	804274c <_fflush_r+0x1c>
 8042772:	2000      	movs	r0, #0
 8042774:	bd38      	pop	{r3, r4, r5, pc}
 8042776:	bf00      	nop
 8042778:	08042a74 	.word	0x08042a74
 804277c:	08042a94 	.word	0x08042a94
 8042780:	08042a54 	.word	0x08042a54

08042784 <_lseek_r>:
 8042784:	b538      	push	{r3, r4, r5, lr}
 8042786:	4605      	mov	r5, r0
 8042788:	4c06      	ldr	r4, [pc, #24]	; (80427a4 <_lseek_r+0x20>)
 804278a:	4608      	mov	r0, r1
 804278c:	4611      	mov	r1, r2
 804278e:	2200      	movs	r2, #0
 8042790:	6022      	str	r2, [r4, #0]
 8042792:	461a      	mov	r2, r3
 8042794:	f7fd feba 	bl	804050c <_lseek>
 8042798:	1c43      	adds	r3, r0, #1
 804279a:	d102      	bne.n	80427a2 <_lseek_r+0x1e>
 804279c:	6823      	ldr	r3, [r4, #0]
 804279e:	b103      	cbz	r3, 80427a2 <_lseek_r+0x1e>
 80427a0:	602b      	str	r3, [r5, #0]
 80427a2:	bd38      	pop	{r3, r4, r5, pc}
 80427a4:	2001809c 	.word	0x2001809c

080427a8 <__swhatbuf_r>:
 80427a8:	b570      	push	{r4, r5, r6, lr}
 80427aa:	460e      	mov	r6, r1
 80427ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80427b0:	b096      	sub	sp, #88	; 0x58
 80427b2:	4614      	mov	r4, r2
 80427b4:	2900      	cmp	r1, #0
 80427b6:	461d      	mov	r5, r3
 80427b8:	da07      	bge.n	80427ca <__swhatbuf_r+0x22>
 80427ba:	2300      	movs	r3, #0
 80427bc:	602b      	str	r3, [r5, #0]
 80427be:	89b3      	ldrh	r3, [r6, #12]
 80427c0:	061a      	lsls	r2, r3, #24
 80427c2:	d410      	bmi.n	80427e6 <__swhatbuf_r+0x3e>
 80427c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80427c8:	e00e      	b.n	80427e8 <__swhatbuf_r+0x40>
 80427ca:	466a      	mov	r2, sp
 80427cc:	f000 f8c0 	bl	8042950 <_fstat_r>
 80427d0:	2800      	cmp	r0, #0
 80427d2:	dbf2      	blt.n	80427ba <__swhatbuf_r+0x12>
 80427d4:	9a01      	ldr	r2, [sp, #4]
 80427d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80427da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80427de:	425a      	negs	r2, r3
 80427e0:	415a      	adcs	r2, r3
 80427e2:	602a      	str	r2, [r5, #0]
 80427e4:	e7ee      	b.n	80427c4 <__swhatbuf_r+0x1c>
 80427e6:	2340      	movs	r3, #64	; 0x40
 80427e8:	2000      	movs	r0, #0
 80427ea:	6023      	str	r3, [r4, #0]
 80427ec:	b016      	add	sp, #88	; 0x58
 80427ee:	bd70      	pop	{r4, r5, r6, pc}

080427f0 <__smakebuf_r>:
 80427f0:	898b      	ldrh	r3, [r1, #12]
 80427f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80427f4:	079d      	lsls	r5, r3, #30
 80427f6:	4606      	mov	r6, r0
 80427f8:	460c      	mov	r4, r1
 80427fa:	d507      	bpl.n	804280c <__smakebuf_r+0x1c>
 80427fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8042800:	6023      	str	r3, [r4, #0]
 8042802:	6123      	str	r3, [r4, #16]
 8042804:	2301      	movs	r3, #1
 8042806:	6163      	str	r3, [r4, #20]
 8042808:	b002      	add	sp, #8
 804280a:	bd70      	pop	{r4, r5, r6, pc}
 804280c:	ab01      	add	r3, sp, #4
 804280e:	466a      	mov	r2, sp
 8042810:	f7ff ffca 	bl	80427a8 <__swhatbuf_r>
 8042814:	9900      	ldr	r1, [sp, #0]
 8042816:	4605      	mov	r5, r0
 8042818:	4630      	mov	r0, r6
 804281a:	f7ff faab 	bl	8041d74 <_malloc_r>
 804281e:	b948      	cbnz	r0, 8042834 <__smakebuf_r+0x44>
 8042820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8042824:	059a      	lsls	r2, r3, #22
 8042826:	d4ef      	bmi.n	8042808 <__smakebuf_r+0x18>
 8042828:	f023 0303 	bic.w	r3, r3, #3
 804282c:	f043 0302 	orr.w	r3, r3, #2
 8042830:	81a3      	strh	r3, [r4, #12]
 8042832:	e7e3      	b.n	80427fc <__smakebuf_r+0xc>
 8042834:	4b0d      	ldr	r3, [pc, #52]	; (804286c <__smakebuf_r+0x7c>)
 8042836:	62b3      	str	r3, [r6, #40]	; 0x28
 8042838:	89a3      	ldrh	r3, [r4, #12]
 804283a:	6020      	str	r0, [r4, #0]
 804283c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8042840:	6120      	str	r0, [r4, #16]
 8042842:	81a3      	strh	r3, [r4, #12]
 8042844:	9b00      	ldr	r3, [sp, #0]
 8042846:	6163      	str	r3, [r4, #20]
 8042848:	9b01      	ldr	r3, [sp, #4]
 804284a:	b15b      	cbz	r3, 8042864 <__smakebuf_r+0x74>
 804284c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8042850:	4630      	mov	r0, r6
 8042852:	f000 f88f 	bl	8042974 <_isatty_r>
 8042856:	b128      	cbz	r0, 8042864 <__smakebuf_r+0x74>
 8042858:	89a3      	ldrh	r3, [r4, #12]
 804285a:	f023 0303 	bic.w	r3, r3, #3
 804285e:	f043 0301 	orr.w	r3, r3, #1
 8042862:	81a3      	strh	r3, [r4, #12]
 8042864:	89a3      	ldrh	r3, [r4, #12]
 8042866:	431d      	orrs	r5, r3
 8042868:	81a5      	strh	r5, [r4, #12]
 804286a:	e7cd      	b.n	8042808 <__smakebuf_r+0x18>
 804286c:	08041c29 	.word	0x08041c29

08042870 <memchr>:
 8042870:	b2c9      	uxtb	r1, r1
 8042872:	4402      	add	r2, r0
 8042874:	b510      	push	{r4, lr}
 8042876:	4290      	cmp	r0, r2
 8042878:	4603      	mov	r3, r0
 804287a:	d101      	bne.n	8042880 <memchr+0x10>
 804287c:	2300      	movs	r3, #0
 804287e:	e003      	b.n	8042888 <memchr+0x18>
 8042880:	781c      	ldrb	r4, [r3, #0]
 8042882:	3001      	adds	r0, #1
 8042884:	428c      	cmp	r4, r1
 8042886:	d1f6      	bne.n	8042876 <memchr+0x6>
 8042888:	4618      	mov	r0, r3
 804288a:	bd10      	pop	{r4, pc}

0804288c <__malloc_lock>:
 804288c:	4770      	bx	lr

0804288e <__malloc_unlock>:
 804288e:	4770      	bx	lr

08042890 <_free_r>:
 8042890:	b538      	push	{r3, r4, r5, lr}
 8042892:	4605      	mov	r5, r0
 8042894:	2900      	cmp	r1, #0
 8042896:	d045      	beq.n	8042924 <_free_r+0x94>
 8042898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804289c:	1f0c      	subs	r4, r1, #4
 804289e:	2b00      	cmp	r3, #0
 80428a0:	bfb8      	it	lt
 80428a2:	18e4      	addlt	r4, r4, r3
 80428a4:	f7ff fff2 	bl	804288c <__malloc_lock>
 80428a8:	4a1f      	ldr	r2, [pc, #124]	; (8042928 <_free_r+0x98>)
 80428aa:	6813      	ldr	r3, [r2, #0]
 80428ac:	4610      	mov	r0, r2
 80428ae:	b933      	cbnz	r3, 80428be <_free_r+0x2e>
 80428b0:	6063      	str	r3, [r4, #4]
 80428b2:	6014      	str	r4, [r2, #0]
 80428b4:	4628      	mov	r0, r5
 80428b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80428ba:	f7ff bfe8 	b.w	804288e <__malloc_unlock>
 80428be:	42a3      	cmp	r3, r4
 80428c0:	d90c      	bls.n	80428dc <_free_r+0x4c>
 80428c2:	6821      	ldr	r1, [r4, #0]
 80428c4:	1862      	adds	r2, r4, r1
 80428c6:	4293      	cmp	r3, r2
 80428c8:	bf02      	ittt	eq
 80428ca:	681a      	ldreq	r2, [r3, #0]
 80428cc:	685b      	ldreq	r3, [r3, #4]
 80428ce:	1852      	addeq	r2, r2, r1
 80428d0:	6063      	str	r3, [r4, #4]
 80428d2:	bf08      	it	eq
 80428d4:	6022      	streq	r2, [r4, #0]
 80428d6:	6004      	str	r4, [r0, #0]
 80428d8:	e7ec      	b.n	80428b4 <_free_r+0x24>
 80428da:	4613      	mov	r3, r2
 80428dc:	685a      	ldr	r2, [r3, #4]
 80428de:	b10a      	cbz	r2, 80428e4 <_free_r+0x54>
 80428e0:	42a2      	cmp	r2, r4
 80428e2:	d9fa      	bls.n	80428da <_free_r+0x4a>
 80428e4:	6819      	ldr	r1, [r3, #0]
 80428e6:	1858      	adds	r0, r3, r1
 80428e8:	42a0      	cmp	r0, r4
 80428ea:	d10b      	bne.n	8042904 <_free_r+0x74>
 80428ec:	6820      	ldr	r0, [r4, #0]
 80428ee:	4401      	add	r1, r0
 80428f0:	1858      	adds	r0, r3, r1
 80428f2:	6019      	str	r1, [r3, #0]
 80428f4:	4282      	cmp	r2, r0
 80428f6:	d1dd      	bne.n	80428b4 <_free_r+0x24>
 80428f8:	6810      	ldr	r0, [r2, #0]
 80428fa:	6852      	ldr	r2, [r2, #4]
 80428fc:	4401      	add	r1, r0
 80428fe:	605a      	str	r2, [r3, #4]
 8042900:	6019      	str	r1, [r3, #0]
 8042902:	e7d7      	b.n	80428b4 <_free_r+0x24>
 8042904:	d902      	bls.n	804290c <_free_r+0x7c>
 8042906:	230c      	movs	r3, #12
 8042908:	602b      	str	r3, [r5, #0]
 804290a:	e7d3      	b.n	80428b4 <_free_r+0x24>
 804290c:	6820      	ldr	r0, [r4, #0]
 804290e:	1821      	adds	r1, r4, r0
 8042910:	428a      	cmp	r2, r1
 8042912:	bf02      	ittt	eq
 8042914:	6811      	ldreq	r1, [r2, #0]
 8042916:	6852      	ldreq	r2, [r2, #4]
 8042918:	1809      	addeq	r1, r1, r0
 804291a:	6062      	str	r2, [r4, #4]
 804291c:	bf08      	it	eq
 804291e:	6021      	streq	r1, [r4, #0]
 8042920:	605c      	str	r4, [r3, #4]
 8042922:	e7c7      	b.n	80428b4 <_free_r+0x24>
 8042924:	bd38      	pop	{r3, r4, r5, pc}
 8042926:	bf00      	nop
 8042928:	20018090 	.word	0x20018090

0804292c <_read_r>:
 804292c:	b538      	push	{r3, r4, r5, lr}
 804292e:	4605      	mov	r5, r0
 8042930:	4c06      	ldr	r4, [pc, #24]	; (804294c <_read_r+0x20>)
 8042932:	4608      	mov	r0, r1
 8042934:	4611      	mov	r1, r2
 8042936:	2200      	movs	r2, #0
 8042938:	6022      	str	r2, [r4, #0]
 804293a:	461a      	mov	r2, r3
 804293c:	f7fd fda2 	bl	8040484 <_read>
 8042940:	1c43      	adds	r3, r0, #1
 8042942:	d102      	bne.n	804294a <_read_r+0x1e>
 8042944:	6823      	ldr	r3, [r4, #0]
 8042946:	b103      	cbz	r3, 804294a <_read_r+0x1e>
 8042948:	602b      	str	r3, [r5, #0]
 804294a:	bd38      	pop	{r3, r4, r5, pc}
 804294c:	2001809c 	.word	0x2001809c

08042950 <_fstat_r>:
 8042950:	b538      	push	{r3, r4, r5, lr}
 8042952:	2300      	movs	r3, #0
 8042954:	4c06      	ldr	r4, [pc, #24]	; (8042970 <_fstat_r+0x20>)
 8042956:	4605      	mov	r5, r0
 8042958:	4608      	mov	r0, r1
 804295a:	4611      	mov	r1, r2
 804295c:	6023      	str	r3, [r4, #0]
 804295e:	f7fd fdba 	bl	80404d6 <_fstat>
 8042962:	1c43      	adds	r3, r0, #1
 8042964:	d102      	bne.n	804296c <_fstat_r+0x1c>
 8042966:	6823      	ldr	r3, [r4, #0]
 8042968:	b103      	cbz	r3, 804296c <_fstat_r+0x1c>
 804296a:	602b      	str	r3, [r5, #0]
 804296c:	bd38      	pop	{r3, r4, r5, pc}
 804296e:	bf00      	nop
 8042970:	2001809c 	.word	0x2001809c

08042974 <_isatty_r>:
 8042974:	b538      	push	{r3, r4, r5, lr}
 8042976:	2300      	movs	r3, #0
 8042978:	4c05      	ldr	r4, [pc, #20]	; (8042990 <_isatty_r+0x1c>)
 804297a:	4605      	mov	r5, r0
 804297c:	4608      	mov	r0, r1
 804297e:	6023      	str	r3, [r4, #0]
 8042980:	f7fd fdb9 	bl	80404f6 <_isatty>
 8042984:	1c43      	adds	r3, r0, #1
 8042986:	d102      	bne.n	804298e <_isatty_r+0x1a>
 8042988:	6823      	ldr	r3, [r4, #0]
 804298a:	b103      	cbz	r3, 804298e <_isatty_r+0x1a>
 804298c:	602b      	str	r3, [r5, #0]
 804298e:	bd38      	pop	{r3, r4, r5, pc}
 8042990:	2001809c 	.word	0x2001809c

08042994 <_init>:
 8042994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042996:	bf00      	nop
 8042998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804299a:	bc08      	pop	{r3}
 804299c:	469e      	mov	lr, r3
 804299e:	4770      	bx	lr

080429a0 <_fini>:
 80429a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80429a2:	bf00      	nop
 80429a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80429a6:	bc08      	pop	{r3}
 80429a8:	469e      	mov	lr, r3
 80429aa:	4770      	bx	lr
 80429ac:	0000      	movs	r0, r0
	...

080429b0 <__SECURE_SystemCoreClockUpdate_veneer>:
 80429b0:	b401      	push	{r0}
 80429b2:	4802      	ldr	r0, [pc, #8]	; (80429bc <__SECURE_SystemCoreClockUpdate_veneer+0xc>)
 80429b4:	4684      	mov	ip, r0
 80429b6:	bc01      	pop	{r0}
 80429b8:	4760      	bx	ip
 80429ba:	bf00      	nop
 80429bc:	0c03e001 	.word	0x0c03e001

080429c0 <__Toggle_Pin_veneer>:
 80429c0:	b401      	push	{r0}
 80429c2:	4802      	ldr	r0, [pc, #8]	; (80429cc <__Toggle_Pin_veneer+0xc>)
 80429c4:	4684      	mov	ip, r0
 80429c6:	bc01      	pop	{r0}
 80429c8:	4760      	bx	ip
 80429ca:	bf00      	nop
 80429cc:	0c03e011 	.word	0x0c03e011

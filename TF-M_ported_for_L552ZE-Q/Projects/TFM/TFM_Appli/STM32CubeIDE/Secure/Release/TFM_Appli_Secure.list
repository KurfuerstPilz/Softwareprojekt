
TFM_Appli_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .TFM_VECTORS  00000420  0c014400  0c014400  00004400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .copy.table   00000048  0c014820  0c014820  00004820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .TFM_DATA     00000234  30035b00  0c035a44  00025b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .TFM_UNPRIV_DATA 00000000  30031000  30031000  00035ce0  2**5
                  CONTENTS
  4 .TFM_SP_STORAGE_DATA 00000000  30031020  30031020  00035ce0  2**5
                  CONTENTS
  5 .TFM_SP_ITS_DATA 00000000  30031a80  30031a80  00035ce0  2**5
                  CONTENTS
  6 .TFM_SP_CRYPTO_DATA 00000000  30032000  30032000  00035ce0  2**5
                  CONTENTS
  7 .TFM_SP_INITIAL_ATTESTATION_DATA 00000000  30034080  30034080  00035ce0  2**5
                  CONTENTS
  8 .zero.table   00000048  0c014868  0c014868  00004868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .TFM_BSS      0000957c  30035d38  30035d38  00040000  2**3
                  ALLOC
 10 .TFM_SP_STORAGE_BSS 00000020  30031020  30031020  00040000  2**5
                  ALLOC
 11 .TFM_SP_STORAGE_STACK 00000a00  30031080  30031080  00040000  2**7
                  ALLOC
 12 .TFM_SP_ITS_BSS 00000020  30031a80  30031a80  00040000  2**5
                  ALLOC
 13 .TFM_SP_ITS_STACK 00000500  30031b00  30031b00  00040000  2**7
                  ALLOC
 14 .TFM_SP_CRYPTO_BSS 00000020  30032000  30032000  00040000  2**5
                  ALLOC
 15 .TFM_SP_CRYPTO_STACK 00002000  30032080  30032080  00040000  2**7
                  ALLOC
 16 .TFM_SP_INITIAL_ATTESTATION_BSS 00000020  30034080  30034080  00040000  2**5
                  ALLOC
 17 .TFM_SP_INITIAL_ATTESTATION_STACK 00000a00  30034100  30034100  00040000  2**7
                  ALLOC
 18 .TFM_UNPRIV_CODE 00004e80  0c0148c0  0c0148c0  000048c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .TFM_SP_STORAGE 00000000  0c019740  0c019740  00035ce0  2**5
                  CONTENTS
 20 .TFM_SP_ITS   00000000  0c019740  0c019740  00035ce0  2**5
                  CONTENTS
 21 .TFM_SP_CRYPTO 00000000  0c019740  0c019740  00035ce0  2**5
                  CONTENTS
 22 .TFM_SP_INITIAL_ATTESTATION 00000000  0c019740  0c019740  00035ce0  2**5
                  CONTENTS
 23 .ARM.exidx    00000008  0c019740  0c019740  00009740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 24 .ER_TFM_CODE  0001c2fc  0c019748  0c019748  00009748  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .tfm_bl2_shared_data 00000400  30030000  30030000  00040000  2**5
                  ALLOC
 26 .msp_stack    00000400  30030400  30030400  00040000  2**5
                  ALLOC
 27 .psp_stack    00000800  30030800  30030800  00040000  2**5
                  ALLOC
 28 .TFM_UNPRIV_BSS 00000020  30031000  30031000  00040000  2**5
                  ALLOC
 29 .heap         00001000  30034b00  30034b00  00040000  2**3
                  ALLOC
 30 .gnu.sgstubs  00000060  0c035c80  0c035c80  00035c80  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .ARM.attributes 00000034  00000000  00000000  00035ce0  2**0
                  CONTENTS, READONLY
 32 .comment      0000007b  00000000  00000000  00035d14  2**0
                  CONTENTS, READONLY
 33 .debug_info   0009a714  00000000  00000000  00035d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 34 .debug_abbrev 0001597f  00000000  00000000  000d04a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 35 .debug_loc    000474a6  00000000  00000000  000e5e22  2**0
                  CONTENTS, READONLY, DEBUGGING
 36 .debug_aranges 00003270  00000000  00000000  0012d2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 37 .debug_ranges 00004d48  00000000  00000000  00130538  2**0
                  CONTENTS, READONLY, DEBUGGING
 38 .debug_macro  0005d4a7  00000000  00000000  00135280  2**0
                  CONTENTS, READONLY, DEBUGGING
 39 .debug_line   000529a4  00000000  00000000  00192727  2**0
                  CONTENTS, READONLY, DEBUGGING
 40 .debug_str    0013598a  00000000  00000000  001e50cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 41 .debug_frame  0000a940  00000000  00000000  0031aa58  2**2
                  CONTENTS, READONLY, DEBUGGING
 42 .stab         00000084  00000000  00000000  00325398  2**2
                  CONTENTS, READONLY, DEBUGGING
 43 .stabstr      00000117  00000000  00000000  0032541c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .TFM_VECTORS:

0c014400 <__Vectors>:
 c014400:	30030800 	.word	0x30030800
 c014404:	0c0145f5 	.word	0x0c0145f5
 c014408:	0c014659 	.word	0x0c014659
 c01440c:	0c01465d 	.word	0x0c01465d
 c014410:	0c0310d9 	.word	0x0c0310d9
 c014414:	0c0310db 	.word	0x0c0310db
 c014418:	0c0310dd 	.word	0x0c0310dd
 c01441c:	0c031029 	.word	0x0c031029
	...
 c01442c:	0c0310c1 	.word	0x0c0310c1
 c014430:	0c014675 	.word	0x0c014675
 c014434:	00000000 	.word	0x00000000
 c014438:	0c030ff5 	.word	0x0c030ff5
 c01443c:	0c01467d 	.word	0x0c01467d
 c014440:	0c014681 	.word	0x0c014681
 c014444:	0c014685 	.word	0x0c014685
 c014448:	0c014689 	.word	0x0c014689
 c01444c:	0c01468d 	.word	0x0c01468d
 c014450:	0c014691 	.word	0x0c014691
 c014454:	0c014695 	.word	0x0c014695
 c014458:	0c014699 	.word	0x0c014699
 c01445c:	0c01469d 	.word	0x0c01469d
 c014460:	0c0146a1 	.word	0x0c0146a1
 c014464:	0c0146a5 	.word	0x0c0146a5
 c014468:	0c0146a9 	.word	0x0c0146a9
 c01446c:	0c0146ad 	.word	0x0c0146ad
 c014470:	0c0146b1 	.word	0x0c0146b1
 c014474:	0c0146b5 	.word	0x0c0146b5
 c014478:	0c0146b9 	.word	0x0c0146b9
 c01447c:	0c0146bd 	.word	0x0c0146bd
 c014480:	0c0146c1 	.word	0x0c0146c1
 c014484:	0c0146c5 	.word	0x0c0146c5
 c014488:	0c0146c9 	.word	0x0c0146c9
 c01448c:	0c0146cd 	.word	0x0c0146cd
 c014490:	0c0146d1 	.word	0x0c0146d1
 c014494:	0c0146d5 	.word	0x0c0146d5
 c014498:	0c0146d9 	.word	0x0c0146d9
 c01449c:	0c0146dd 	.word	0x0c0146dd
 c0144a0:	0c0146e1 	.word	0x0c0146e1
 c0144a4:	0c0146e5 	.word	0x0c0146e5
 c0144a8:	0c0146e9 	.word	0x0c0146e9
 c0144ac:	0c0146ed 	.word	0x0c0146ed
 c0144b0:	0c0146f1 	.word	0x0c0146f1
 c0144b4:	0c0146f5 	.word	0x0c0146f5
 c0144b8:	0c0146f9 	.word	0x0c0146f9
 c0144bc:	0c0146fd 	.word	0x0c0146fd
 c0144c0:	0c014701 	.word	0x0c014701
 c0144c4:	0c014705 	.word	0x0c014705
 c0144c8:	0c014709 	.word	0x0c014709
 c0144cc:	0c01470d 	.word	0x0c01470d
 c0144d0:	0c014711 	.word	0x0c014711
 c0144d4:	0c014715 	.word	0x0c014715
 c0144d8:	0c014719 	.word	0x0c014719
 c0144dc:	0c01471d 	.word	0x0c01471d
 c0144e0:	0c014721 	.word	0x0c014721
 c0144e4:	0c014725 	.word	0x0c014725
 c0144e8:	0c014729 	.word	0x0c014729
 c0144ec:	0c01472d 	.word	0x0c01472d
 c0144f0:	0c014731 	.word	0x0c014731
 c0144f4:	0c014735 	.word	0x0c014735
 c0144f8:	0c014739 	.word	0x0c014739
 c0144fc:	0c01473d 	.word	0x0c01473d
 c014500:	0c014741 	.word	0x0c014741
 c014504:	0c014745 	.word	0x0c014745
 c014508:	0c014749 	.word	0x0c014749
 c01450c:	0c01474d 	.word	0x0c01474d
 c014510:	0c014751 	.word	0x0c014751
 c014514:	0c014755 	.word	0x0c014755
 c014518:	0c014759 	.word	0x0c014759
 c01451c:	0c01475d 	.word	0x0c01475d
 c014520:	0c014761 	.word	0x0c014761
 c014524:	0c014765 	.word	0x0c014765
 c014528:	0c014769 	.word	0x0c014769
 c01452c:	0c01476d 	.word	0x0c01476d
 c014530:	0c014771 	.word	0x0c014771
 c014534:	0c014775 	.word	0x0c014775
 c014538:	0c014779 	.word	0x0c014779
 c01453c:	0c01477d 	.word	0x0c01477d
 c014540:	0c014781 	.word	0x0c014781
 c014544:	0c014785 	.word	0x0c014785
 c014548:	0c014789 	.word	0x0c014789
 c01454c:	0c01478d 	.word	0x0c01478d
 c014550:	0c014791 	.word	0x0c014791
 c014554:	0c014795 	.word	0x0c014795
 c014558:	0c014799 	.word	0x0c014799
 c01455c:	0c01479d 	.word	0x0c01479d
 c014560:	0c0147a1 	.word	0x0c0147a1
 c014564:	0c0147a5 	.word	0x0c0147a5
 c014568:	0c0147a9 	.word	0x0c0147a9
 c01456c:	0c0147ad 	.word	0x0c0147ad
 c014570:	0c0147b1 	.word	0x0c0147b1
 c014574:	00000000 	.word	0x00000000
 c014578:	0c0147b5 	.word	0x0c0147b5
 c01457c:	00000000 	.word	0x00000000
 c014580:	0c0147b9 	.word	0x0c0147b9
 c014584:	0c0147bd 	.word	0x0c0147bd
 c014588:	0c0147c1 	.word	0x0c0147c1
 c01458c:	0c0147c5 	.word	0x0c0147c5
 c014590:	0c0147c9 	.word	0x0c0147c9
 c014594:	0c0147cd 	.word	0x0c0147cd
 c014598:	0c0147d1 	.word	0x0c0147d1
 c01459c:	0c0147d5 	.word	0x0c0147d5
 c0145a0:	0c0147d9 	.word	0x0c0147d9
 c0145a4:	0c0147dd 	.word	0x0c0147dd
 c0145a8:	0c0147e1 	.word	0x0c0147e1
 c0145ac:	0c0147e5 	.word	0x0c0147e5
 c0145b0:	0c0147e9 	.word	0x0c0147e9
 c0145b4:	00000000 	.word	0x00000000
 c0145b8:	0c0147ed 	.word	0x0c0147ed
 c0145bc:	0c0147f1 	.word	0x0c0147f1
	...
 c0145c8:	0c0147f5 	.word	0x0c0147f5
 c0145cc:	0c0147f9 	.word	0x0c0147f9
 c0145d0:	0c0147fd 	.word	0x0c0147fd
 c0145d4:	0c014801 	.word	0x0c014801
 c0145d8:	0c014805 	.word	0x0c014805
 c0145dc:	0c014809 	.word	0x0c014809
 c0145e0:	0c01480d 	.word	0x0c01480d
 c0145e4:	0c014811 	.word	0x0c014811
 c0145e8:	0c014815 	.word	0x0c014815
 c0145ec:	0c014819 	.word	0x0c014819
 c0145f0:	0c01481d 	.word	0x0c01481d

0c0145f4 <Reset_Handler>:
 c0145f4:	4c13      	ldr	r4, [pc, #76]	; (c014644 <Reset_Handler+0x50>)
 c0145f6:	4d14      	ldr	r5, [pc, #80]	; (c014648 <Reset_Handler+0x54>)
 c0145f8:	42ac      	cmp	r4, r5
 c0145fa:	da09      	bge.n	c014610 <Reset_Handler+0x1c>
 c0145fc:	6821      	ldr	r1, [r4, #0]
 c0145fe:	6862      	ldr	r2, [r4, #4]
 c014600:	68a3      	ldr	r3, [r4, #8]
 c014602:	3b04      	subs	r3, #4
 c014604:	bfa2      	ittt	ge
 c014606:	58c8      	ldrge	r0, [r1, r3]
 c014608:	50d0      	strge	r0, [r2, r3]
 c01460a:	e7fa      	bge.n	c014602 <Reset_Handler+0xe>
 c01460c:	340c      	adds	r4, #12
 c01460e:	e7f3      	b.n	c0145f8 <Reset_Handler+0x4>
 c014610:	4b0e      	ldr	r3, [pc, #56]	; (c01464c <Reset_Handler+0x58>)
 c014612:	4c0f      	ldr	r4, [pc, #60]	; (c014650 <Reset_Handler+0x5c>)
 c014614:	42a3      	cmp	r3, r4
 c014616:	da08      	bge.n	c01462a <Reset_Handler+0x36>
 c014618:	6819      	ldr	r1, [r3, #0]
 c01461a:	685a      	ldr	r2, [r3, #4]
 c01461c:	2000      	movs	r0, #0
 c01461e:	3a04      	subs	r2, #4
 c014620:	bfa4      	itt	ge
 c014622:	5088      	strge	r0, [r1, r2]
 c014624:	e7fb      	bge.n	c01461e <Reset_Handler+0x2a>
 c014626:	3308      	adds	r3, #8
 c014628:	e7f4      	b.n	c014614 <Reset_Handler+0x20>
 c01462a:	f005 fcb9 	bl	c019fa0 <SystemInit>
 c01462e:	f3ef 8014 	mrs	r0, CONTROL
 c014632:	f040 0002 	orr.w	r0, r0, #2
 c014636:	f380 8814 	msr	CONTROL, r0
 c01463a:	4806      	ldr	r0, [pc, #24]	; (c014654 <Reset_Handler+0x60>)
 c01463c:	f380 8809 	msr	PSP, r0
 c014640:	f005 f8a2 	bl	c019788 <_mainCRTStartup>
 c014644:	0c014820 	.word	0x0c014820
 c014648:	0c014868 	.word	0x0c014868
 c01464c:	0c014868 	.word	0x0c014868
 c014650:	0c0148b0 	.word	0x0c0148b0
 c014654:	30031000 	.word	0x30031000

0c014658 <NMI_Handler>:
 c014658:	f7ff bffe 	b.w	c014658 <NMI_Handler>

0c01465c <HardFault_Handler>:
 c01465c:	f7ff bffe 	b.w	c01465c <HardFault_Handler>
 c014660:	f01c bd3a 	b.w	c0310d8 <MemManage_Handler>
 c014664:	f01c bd39 	b.w	c0310da <BusFault_Handler>
 c014668:	f01c bd38 	b.w	c0310dc <UsageFault_Handler>
 c01466c:	f01c bcdc 	b.w	c031028 <SecureFault_Handler>
 c014670:	f01c bd26 	b.w	c0310c0 <SVC_Handler>

0c014674 <DebugMon_Handler>:
 c014674:	f7ff bffe 	b.w	c014674 <DebugMon_Handler>
 c014678:	f01c bcbc 	b.w	c030ff4 <PendSV_Handler>

0c01467c <SysTick_Handler>:
 c01467c:	f7ff bffe 	b.w	c01467c <SysTick_Handler>

0c014680 <WWDG_IRQHandler>:
 c014680:	f7ff bffe 	b.w	c014680 <WWDG_IRQHandler>

0c014684 <PVD_PVM_IRQHandler>:
 c014684:	f7ff bffe 	b.w	c014684 <PVD_PVM_IRQHandler>

0c014688 <RTC_IRQHandler>:
 c014688:	f7ff bffe 	b.w	c014688 <RTC_IRQHandler>

0c01468c <RTC_IRQHandler_S>:
 c01468c:	f7ff bffe 	b.w	c01468c <RTC_IRQHandler_S>

0c014690 <TAMP_IRQHandler>:
 c014690:	f7ff bffe 	b.w	c014690 <TAMP_IRQHandler>

0c014694 <TAMP_IRQHandler_S>:
 c014694:	f7ff bffe 	b.w	c014694 <TAMP_IRQHandler_S>

0c014698 <FLASH_IRQHandler>:
 c014698:	f7ff bffe 	b.w	c014698 <FLASH_IRQHandler>

0c01469c <FLASH_IRQHandler_S>:
 c01469c:	f7ff bffe 	b.w	c01469c <FLASH_IRQHandler_S>

0c0146a0 <SERR_IRQHandler>:
 c0146a0:	f7ff bffe 	b.w	c0146a0 <SERR_IRQHandler>

0c0146a4 <RCC_IRQHandler>:
 c0146a4:	f7ff bffe 	b.w	c0146a4 <RCC_IRQHandler>

0c0146a8 <RCC_IRQHandler_S>:
 c0146a8:	f7ff bffe 	b.w	c0146a8 <RCC_IRQHandler_S>

0c0146ac <EXTI0_IRQHandler>:
 c0146ac:	f7ff bffe 	b.w	c0146ac <EXTI0_IRQHandler>

0c0146b0 <EXTI1_IRQHandler>:
 c0146b0:	f7ff bffe 	b.w	c0146b0 <EXTI1_IRQHandler>

0c0146b4 <EXTI2_IRQHandler>:
 c0146b4:	f7ff bffe 	b.w	c0146b4 <EXTI2_IRQHandler>

0c0146b8 <EXTI3_IRQHandler>:
 c0146b8:	f7ff bffe 	b.w	c0146b8 <EXTI3_IRQHandler>

0c0146bc <EXTI4_IRQHandler>:
 c0146bc:	f7ff bffe 	b.w	c0146bc <EXTI4_IRQHandler>

0c0146c0 <EXTI5_IRQHandler>:
 c0146c0:	f7ff bffe 	b.w	c0146c0 <EXTI5_IRQHandler>

0c0146c4 <EXTI6_IRQHandler>:
 c0146c4:	f7ff bffe 	b.w	c0146c4 <EXTI6_IRQHandler>

0c0146c8 <EXTI7_IRQHandler>:
 c0146c8:	f7ff bffe 	b.w	c0146c8 <EXTI7_IRQHandler>

0c0146cc <EXTI8_IRQHandler>:
 c0146cc:	f7ff bffe 	b.w	c0146cc <EXTI8_IRQHandler>

0c0146d0 <EXTI9_IRQHandler>:
 c0146d0:	f7ff bffe 	b.w	c0146d0 <EXTI9_IRQHandler>

0c0146d4 <EXTI10_IRQHandler>:
 c0146d4:	f7ff bffe 	b.w	c0146d4 <EXTI10_IRQHandler>

0c0146d8 <EXTI11_IRQHandler>:
 c0146d8:	f7ff bffe 	b.w	c0146d8 <EXTI11_IRQHandler>

0c0146dc <EXTI12_IRQHandler>:
 c0146dc:	f7ff bffe 	b.w	c0146dc <EXTI12_IRQHandler>

0c0146e0 <EXTI13_IRQHandler>:
 c0146e0:	f7ff bffe 	b.w	c0146e0 <EXTI13_IRQHandler>

0c0146e4 <EXTI14_IRQHandler>:
 c0146e4:	f7ff bffe 	b.w	c0146e4 <EXTI14_IRQHandler>

0c0146e8 <EXTI15_IRQHandler>:
 c0146e8:	f7ff bffe 	b.w	c0146e8 <EXTI15_IRQHandler>

0c0146ec <DMAMUX1_IRQHandler>:
 c0146ec:	f7ff bffe 	b.w	c0146ec <DMAMUX1_IRQHandler>

0c0146f0 <DMAMUX1_IRQHandler_S>:
 c0146f0:	f7ff bffe 	b.w	c0146f0 <DMAMUX1_IRQHandler_S>

0c0146f4 <DMA1_Channel1_IRQHandler>:
 c0146f4:	f7ff bffe 	b.w	c0146f4 <DMA1_Channel1_IRQHandler>

0c0146f8 <DMA1_Channel2_IRQHandler>:
 c0146f8:	f7ff bffe 	b.w	c0146f8 <DMA1_Channel2_IRQHandler>

0c0146fc <DMA1_Channel3_IRQHandler>:
 c0146fc:	f7ff bffe 	b.w	c0146fc <DMA1_Channel3_IRQHandler>

0c014700 <DMA1_Channel4_IRQHandler>:
 c014700:	f7ff bffe 	b.w	c014700 <DMA1_Channel4_IRQHandler>

0c014704 <DMA1_Channel5_IRQHandler>:
 c014704:	f7ff bffe 	b.w	c014704 <DMA1_Channel5_IRQHandler>

0c014708 <DMA1_Channel6_IRQHandler>:
 c014708:	f7ff bffe 	b.w	c014708 <DMA1_Channel6_IRQHandler>

0c01470c <DMA1_Channel7_IRQHandler>:
 c01470c:	f7ff bffe 	b.w	c01470c <DMA1_Channel7_IRQHandler>

0c014710 <DMA1_Channel8_IRQHandler>:
 c014710:	f7ff bffe 	b.w	c014710 <DMA1_Channel8_IRQHandler>

0c014714 <ADC1_2_IRQHandler>:
 c014714:	f7ff bffe 	b.w	c014714 <ADC1_2_IRQHandler>

0c014718 <DAC_IRQHandler>:
 c014718:	f7ff bffe 	b.w	c014718 <DAC_IRQHandler>

0c01471c <FDCAN1_IT0_IRQHandler>:
 c01471c:	f7ff bffe 	b.w	c01471c <FDCAN1_IT0_IRQHandler>

0c014720 <FDCAN1_IT1_IRQHandler>:
 c014720:	f7ff bffe 	b.w	c014720 <FDCAN1_IT1_IRQHandler>

0c014724 <TIM1_BRK_IRQHandler>:
 c014724:	f7ff bffe 	b.w	c014724 <TIM1_BRK_IRQHandler>

0c014728 <TIM1_UP_IRQHandler>:
 c014728:	f7ff bffe 	b.w	c014728 <TIM1_UP_IRQHandler>

0c01472c <TIM1_TRG_COM_IRQHandler>:
 c01472c:	f7ff bffe 	b.w	c01472c <TIM1_TRG_COM_IRQHandler>

0c014730 <TIM1_CC_IRQHandler>:
 c014730:	f7ff bffe 	b.w	c014730 <TIM1_CC_IRQHandler>

0c014734 <TIM2_IRQHandler>:
 c014734:	f7ff bffe 	b.w	c014734 <TIM2_IRQHandler>

0c014738 <TIM3_IRQHandler>:
 c014738:	f7ff bffe 	b.w	c014738 <TIM3_IRQHandler>

0c01473c <TIM4_IRQHandler>:
 c01473c:	f7ff bffe 	b.w	c01473c <TIM4_IRQHandler>

0c014740 <TIM5_IRQHandler>:
 c014740:	f7ff bffe 	b.w	c014740 <TIM5_IRQHandler>

0c014744 <TIM6_IRQHandler>:
 c014744:	f7ff bffe 	b.w	c014744 <TIM6_IRQHandler>

0c014748 <TIM7_IRQHandler>:
 c014748:	f7ff bffe 	b.w	c014748 <TIM7_IRQHandler>

0c01474c <TIM8_BRK_IRQHandler>:
 c01474c:	f7ff bffe 	b.w	c01474c <TIM8_BRK_IRQHandler>

0c014750 <TIM8_UP_IRQHandler>:
 c014750:	f7ff bffe 	b.w	c014750 <TIM8_UP_IRQHandler>

0c014754 <TIM8_TRG_COM_IRQHandler>:
 c014754:	f7ff bffe 	b.w	c014754 <TIM8_TRG_COM_IRQHandler>

0c014758 <TIM8_CC_IRQHandler>:
 c014758:	f7ff bffe 	b.w	c014758 <TIM8_CC_IRQHandler>

0c01475c <I2C1_EV_IRQHandler>:
 c01475c:	f7ff bffe 	b.w	c01475c <I2C1_EV_IRQHandler>

0c014760 <I2C1_ER_IRQHandler>:
 c014760:	f7ff bffe 	b.w	c014760 <I2C1_ER_IRQHandler>

0c014764 <I2C2_EV_IRQHandler>:
 c014764:	f7ff bffe 	b.w	c014764 <I2C2_EV_IRQHandler>

0c014768 <I2C2_ER_IRQHandler>:
 c014768:	f7ff bffe 	b.w	c014768 <I2C2_ER_IRQHandler>

0c01476c <SPI1_IRQHandler>:
 c01476c:	f7ff bffe 	b.w	c01476c <SPI1_IRQHandler>

0c014770 <SPI2_IRQHandler>:
 c014770:	f7ff bffe 	b.w	c014770 <SPI2_IRQHandler>

0c014774 <USART1_IRQHandler>:
 c014774:	f7ff bffe 	b.w	c014774 <USART1_IRQHandler>

0c014778 <USART2_IRQHandler>:
 c014778:	f7ff bffe 	b.w	c014778 <USART2_IRQHandler>

0c01477c <USART3_IRQHandler>:
 c01477c:	f7ff bffe 	b.w	c01477c <USART3_IRQHandler>

0c014780 <UART4_IRQHandler>:
 c014780:	f7ff bffe 	b.w	c014780 <UART4_IRQHandler>

0c014784 <UART5_IRQHandler>:
 c014784:	f7ff bffe 	b.w	c014784 <UART5_IRQHandler>

0c014788 <LPUART1_IRQHandler>:
 c014788:	f7ff bffe 	b.w	c014788 <LPUART1_IRQHandler>

0c01478c <LPTIM1_IRQHandler>:
 c01478c:	f7ff bffe 	b.w	c01478c <LPTIM1_IRQHandler>

0c014790 <LPTIM2_IRQHandler>:
 c014790:	f7ff bffe 	b.w	c014790 <LPTIM2_IRQHandler>

0c014794 <TIM15_IRQHandler>:
 c014794:	f7ff bffe 	b.w	c014794 <TIM15_IRQHandler>

0c014798 <TIM16_IRQHandler>:
 c014798:	f7ff bffe 	b.w	c014798 <TIM16_IRQHandler>

0c01479c <TIM17_IRQHandler>:
 c01479c:	f7ff bffe 	b.w	c01479c <TIM17_IRQHandler>

0c0147a0 <COMP_IRQHandler>:
 c0147a0:	f7ff bffe 	b.w	c0147a0 <COMP_IRQHandler>

0c0147a4 <USB_FS_IRQHandler>:
 c0147a4:	f7ff bffe 	b.w	c0147a4 <USB_FS_IRQHandler>

0c0147a8 <CRS_IRQHandler>:
 c0147a8:	f7ff bffe 	b.w	c0147a8 <CRS_IRQHandler>

0c0147ac <FMC_IRQHandler>:
 c0147ac:	f7ff bffe 	b.w	c0147ac <FMC_IRQHandler>

0c0147b0 <OCTOSPI1_IRQHandler>:
 c0147b0:	f7ff bffe 	b.w	c0147b0 <OCTOSPI1_IRQHandler>

0c0147b4 <SDMMC1_IRQHandler>:
 c0147b4:	f7ff bffe 	b.w	c0147b4 <SDMMC1_IRQHandler>

0c0147b8 <DMA2_Channel1_IRQHandler>:
 c0147b8:	f7ff bffe 	b.w	c0147b8 <DMA2_Channel1_IRQHandler>

0c0147bc <DMA2_Channel2_IRQHandler>:
 c0147bc:	f7ff bffe 	b.w	c0147bc <DMA2_Channel2_IRQHandler>

0c0147c0 <DMA2_Channel3_IRQHandler>:
 c0147c0:	f7ff bffe 	b.w	c0147c0 <DMA2_Channel3_IRQHandler>

0c0147c4 <DMA2_Channel4_IRQHandler>:
 c0147c4:	f7ff bffe 	b.w	c0147c4 <DMA2_Channel4_IRQHandler>

0c0147c8 <DMA2_Channel5_IRQHandler>:
 c0147c8:	f7ff bffe 	b.w	c0147c8 <DMA2_Channel5_IRQHandler>

0c0147cc <DMA2_Channel6_IRQHandler>:
 c0147cc:	f7ff bffe 	b.w	c0147cc <DMA2_Channel6_IRQHandler>

0c0147d0 <DMA2_Channel7_IRQHandler>:
 c0147d0:	f7ff bffe 	b.w	c0147d0 <DMA2_Channel7_IRQHandler>

0c0147d4 <DMA2_Channel8_IRQHandler>:
 c0147d4:	f7ff bffe 	b.w	c0147d4 <DMA2_Channel8_IRQHandler>

0c0147d8 <I2C3_EV_IRQHandler>:
 c0147d8:	f7ff bffe 	b.w	c0147d8 <I2C3_EV_IRQHandler>

0c0147dc <I2C3_ER_IRQHandler>:
 c0147dc:	f7ff bffe 	b.w	c0147dc <I2C3_ER_IRQHandler>

0c0147e0 <SAI1_IRQHandler>:
 c0147e0:	f7ff bffe 	b.w	c0147e0 <SAI1_IRQHandler>

0c0147e4 <SAI2_IRQHandler>:
 c0147e4:	f7ff bffe 	b.w	c0147e4 <SAI2_IRQHandler>

0c0147e8 <TSC_IRQHandler>:
 c0147e8:	f7ff bffe 	b.w	c0147e8 <TSC_IRQHandler>

0c0147ec <RNG_IRQHandler>:
 c0147ec:	f7ff bffe 	b.w	c0147ec <RNG_IRQHandler>

0c0147f0 <FPU_IRQHandler>:
 c0147f0:	f7ff bffe 	b.w	c0147f0 <FPU_IRQHandler>

0c0147f4 <LPTIM3_IRQHandler>:
 c0147f4:	f7ff bffe 	b.w	c0147f4 <LPTIM3_IRQHandler>

0c0147f8 <SPI3_IRQHandler>:
 c0147f8:	f7ff bffe 	b.w	c0147f8 <SPI3_IRQHandler>

0c0147fc <I2C4_ER_IRQHandler>:
 c0147fc:	f7ff bffe 	b.w	c0147fc <I2C4_ER_IRQHandler>

0c014800 <I2C4_EV_IRQHandler>:
 c014800:	f7ff bffe 	b.w	c014800 <I2C4_EV_IRQHandler>

0c014804 <DFSDM1_FLT0_IRQHandler>:
 c014804:	f7ff bffe 	b.w	c014804 <DFSDM1_FLT0_IRQHandler>

0c014808 <DFSDM1_FLT1_IRQHandler>:
 c014808:	f7ff bffe 	b.w	c014808 <DFSDM1_FLT1_IRQHandler>

0c01480c <DFSDM1_FLT2_IRQHandler>:
 c01480c:	f7ff bffe 	b.w	c01480c <DFSDM1_FLT2_IRQHandler>

0c014810 <DFSDM1_FLT3_IRQHandler>:
 c014810:	f7ff bffe 	b.w	c014810 <DFSDM1_FLT3_IRQHandler>

0c014814 <UCPD1_IRQHandler>:
 c014814:	f7ff bffe 	b.w	c014814 <UCPD1_IRQHandler>

0c014818 <ICACHE_IRQHandler>:
 c014818:	f7ff bffe 	b.w	c014818 <ICACHE_IRQHandler>

0c01481c <OTFDEC1_IRQHandler>:
 c01481c:	f7ff bffe 	b.w	c01481c <OTFDEC1_IRQHandler>

Disassembly of section .TFM_UNPRIV_CODE:

0c0148c0 <calloc>:
 c0148c0:	4b02      	ldr	r3, [pc, #8]	; (c0148cc <calloc+0xc>)
 c0148c2:	460a      	mov	r2, r1
 c0148c4:	4601      	mov	r1, r0
 c0148c6:	6818      	ldr	r0, [r3, #0]
 c0148c8:	f000 b885 	b.w	c0149d6 <_calloc_r>
 c0148cc:	30035b5c 	.word	0x30035b5c

0c0148d0 <exit>:
 c0148d0:	b508      	push	{r3, lr}
 c0148d2:	4b07      	ldr	r3, [pc, #28]	; (c0148f0 <exit+0x20>)
 c0148d4:	4604      	mov	r4, r0
 c0148d6:	b113      	cbz	r3, c0148de <exit+0xe>
 c0148d8:	2100      	movs	r1, #0
 c0148da:	e000      	b.n	c0148de <exit+0xe>
 c0148dc:	bf00      	nop
 c0148de:	4b05      	ldr	r3, [pc, #20]	; (c0148f4 <exit+0x24>)
 c0148e0:	6818      	ldr	r0, [r3, #0]
 c0148e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 c0148e4:	b103      	cbz	r3, c0148e8 <exit+0x18>
 c0148e6:	4798      	blx	r3
 c0148e8:	4620      	mov	r0, r4
 c0148ea:	f01e f9a1 	bl	c032c30 <_exit>
 c0148ee:	bf00      	nop
 c0148f0:	00000000 	.word	0x00000000
 c0148f4:	0c017074 	.word	0x0c017074

0c0148f8 <__libc_init_array>:
 c0148f8:	b570      	push	{r4, r5, r6, lr}
 c0148fa:	4e0d      	ldr	r6, [pc, #52]	; (c014930 <__libc_init_array+0x38>)
 c0148fc:	2500      	movs	r5, #0
 c0148fe:	4c0d      	ldr	r4, [pc, #52]	; (c014934 <__libc_init_array+0x3c>)
 c014900:	1ba4      	subs	r4, r4, r6
 c014902:	10a4      	asrs	r4, r4, #2
 c014904:	42a5      	cmp	r5, r4
 c014906:	d109      	bne.n	c01491c <__libc_init_array+0x24>
 c014908:	4e0b      	ldr	r6, [pc, #44]	; (c014938 <__libc_init_array+0x40>)
 c01490a:	2500      	movs	r5, #0
 c01490c:	4c0b      	ldr	r4, [pc, #44]	; (c01493c <__libc_init_array+0x44>)
 c01490e:	f01e f991 	bl	c032c34 <_init>
 c014912:	1ba4      	subs	r4, r4, r6
 c014914:	10a4      	asrs	r4, r4, #2
 c014916:	42a5      	cmp	r5, r4
 c014918:	d105      	bne.n	c014926 <__libc_init_array+0x2e>
 c01491a:	bd70      	pop	{r4, r5, r6, pc}
 c01491c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 c014920:	3501      	adds	r5, #1
 c014922:	4798      	blx	r3
 c014924:	e7ee      	b.n	c014904 <__libc_init_array+0xc>
 c014926:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 c01492a:	3501      	adds	r5, #1
 c01492c:	4798      	blx	r3
 c01492e:	e7f2      	b.n	c014916 <__libc_init_array+0x1e>
 c014930:	30035d2c 	.word	0x30035d2c
 c014934:	30035d2c 	.word	0x30035d2c
 c014938:	30035d2c 	.word	0x30035d2c
 c01493c:	30035d30 	.word	0x30035d30

0c014940 <malloc>:
 c014940:	4b02      	ldr	r3, [pc, #8]	; (c01494c <malloc+0xc>)
 c014942:	4601      	mov	r1, r0
 c014944:	6818      	ldr	r0, [r3, #0]
 c014946:	f000 b8a3 	b.w	c014a90 <_malloc_r>
 c01494a:	bf00      	nop
 c01494c:	30035b5c 	.word	0x30035b5c

0c014950 <free>:
 c014950:	4b02      	ldr	r3, [pc, #8]	; (c01495c <free+0xc>)
 c014952:	4601      	mov	r1, r0
 c014954:	6818      	ldr	r0, [r3, #0]
 c014956:	f000 b84d 	b.w	c0149f4 <_free_r>
 c01495a:	bf00      	nop
 c01495c:	30035b5c 	.word	0x30035b5c

0c014960 <memcmp>:
 c014960:	b530      	push	{r4, r5, lr}
 c014962:	2400      	movs	r4, #0
 c014964:	42a2      	cmp	r2, r4
 c014966:	d101      	bne.n	c01496c <memcmp+0xc>
 c014968:	2000      	movs	r0, #0
 c01496a:	e007      	b.n	c01497c <memcmp+0x1c>
 c01496c:	5d03      	ldrb	r3, [r0, r4]
 c01496e:	3401      	adds	r4, #1
 c014970:	190d      	adds	r5, r1, r4
 c014972:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 c014976:	42ab      	cmp	r3, r5
 c014978:	d0f4      	beq.n	c014964 <memcmp+0x4>
 c01497a:	1b58      	subs	r0, r3, r5
 c01497c:	bd30      	pop	{r4, r5, pc}

0c01497e <memcpy>:
 c01497e:	1e43      	subs	r3, r0, #1
 c014980:	440a      	add	r2, r1
 c014982:	b510      	push	{r4, lr}
 c014984:	4291      	cmp	r1, r2
 c014986:	d100      	bne.n	c01498a <memcpy+0xc>
 c014988:	bd10      	pop	{r4, pc}
 c01498a:	f811 4b01 	ldrb.w	r4, [r1], #1
 c01498e:	f803 4f01 	strb.w	r4, [r3, #1]!
 c014992:	e7f7      	b.n	c014984 <memcpy+0x6>

0c014994 <memmove>:
 c014994:	4288      	cmp	r0, r1
 c014996:	eb01 0302 	add.w	r3, r1, r2
 c01499a:	b510      	push	{r4, lr}
 c01499c:	d807      	bhi.n	c0149ae <memmove+0x1a>
 c01499e:	1e42      	subs	r2, r0, #1
 c0149a0:	4299      	cmp	r1, r3
 c0149a2:	d00a      	beq.n	c0149ba <memmove+0x26>
 c0149a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 c0149a8:	f802 4f01 	strb.w	r4, [r2, #1]!
 c0149ac:	e7f8      	b.n	c0149a0 <memmove+0xc>
 c0149ae:	4283      	cmp	r3, r0
 c0149b0:	d9f5      	bls.n	c01499e <memmove+0xa>
 c0149b2:	1881      	adds	r1, r0, r2
 c0149b4:	1ad2      	subs	r2, r2, r3
 c0149b6:	42d3      	cmn	r3, r2
 c0149b8:	d100      	bne.n	c0149bc <memmove+0x28>
 c0149ba:	bd10      	pop	{r4, pc}
 c0149bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 c0149c0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 c0149c4:	e7f7      	b.n	c0149b6 <memmove+0x22>

0c0149c6 <memset>:
 c0149c6:	4402      	add	r2, r0
 c0149c8:	4603      	mov	r3, r0
 c0149ca:	4293      	cmp	r3, r2
 c0149cc:	d100      	bne.n	c0149d0 <memset+0xa>
 c0149ce:	4770      	bx	lr
 c0149d0:	f803 1b01 	strb.w	r1, [r3], #1
 c0149d4:	e7f9      	b.n	c0149ca <memset+0x4>

0c0149d6 <_calloc_r>:
 c0149d6:	b538      	push	{r3, r4, r5, lr}
 c0149d8:	fb02 f401 	mul.w	r4, r2, r1
 c0149dc:	4621      	mov	r1, r4
 c0149de:	f000 f857 	bl	c014a90 <_malloc_r>
 c0149e2:	4605      	mov	r5, r0
 c0149e4:	b118      	cbz	r0, c0149ee <_calloc_r+0x18>
 c0149e6:	4622      	mov	r2, r4
 c0149e8:	2100      	movs	r1, #0
 c0149ea:	f7ff ffec 	bl	c0149c6 <memset>
 c0149ee:	4628      	mov	r0, r5
 c0149f0:	bd38      	pop	{r3, r4, r5, pc}
	...

0c0149f4 <_free_r>:
 c0149f4:	b538      	push	{r3, r4, r5, lr}
 c0149f6:	4605      	mov	r5, r0
 c0149f8:	2900      	cmp	r1, #0
 c0149fa:	d045      	beq.n	c014a88 <_free_r+0x94>
 c0149fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 c014a00:	1f0c      	subs	r4, r1, #4
 c014a02:	2b00      	cmp	r3, #0
 c014a04:	bfb8      	it	lt
 c014a06:	18e4      	addlt	r4, r4, r3
 c014a08:	f001 fc76 	bl	c0162f8 <__malloc_lock>
 c014a0c:	4a1f      	ldr	r2, [pc, #124]	; (c014a8c <_free_r+0x98>)
 c014a0e:	6813      	ldr	r3, [r2, #0]
 c014a10:	4610      	mov	r0, r2
 c014a12:	b933      	cbnz	r3, c014a22 <_free_r+0x2e>
 c014a14:	6063      	str	r3, [r4, #4]
 c014a16:	6014      	str	r4, [r2, #0]
 c014a18:	4628      	mov	r0, r5
 c014a1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 c014a1e:	f001 bc6c 	b.w	c0162fa <__malloc_unlock>
 c014a22:	42a3      	cmp	r3, r4
 c014a24:	d90c      	bls.n	c014a40 <_free_r+0x4c>
 c014a26:	6821      	ldr	r1, [r4, #0]
 c014a28:	1862      	adds	r2, r4, r1
 c014a2a:	4293      	cmp	r3, r2
 c014a2c:	bf02      	ittt	eq
 c014a2e:	681a      	ldreq	r2, [r3, #0]
 c014a30:	685b      	ldreq	r3, [r3, #4]
 c014a32:	1852      	addeq	r2, r2, r1
 c014a34:	6063      	str	r3, [r4, #4]
 c014a36:	bf08      	it	eq
 c014a38:	6022      	streq	r2, [r4, #0]
 c014a3a:	6004      	str	r4, [r0, #0]
 c014a3c:	e7ec      	b.n	c014a18 <_free_r+0x24>
 c014a3e:	4613      	mov	r3, r2
 c014a40:	685a      	ldr	r2, [r3, #4]
 c014a42:	b10a      	cbz	r2, c014a48 <_free_r+0x54>
 c014a44:	42a2      	cmp	r2, r4
 c014a46:	d9fa      	bls.n	c014a3e <_free_r+0x4a>
 c014a48:	6819      	ldr	r1, [r3, #0]
 c014a4a:	1858      	adds	r0, r3, r1
 c014a4c:	42a0      	cmp	r0, r4
 c014a4e:	d10b      	bne.n	c014a68 <_free_r+0x74>
 c014a50:	6820      	ldr	r0, [r4, #0]
 c014a52:	4401      	add	r1, r0
 c014a54:	1858      	adds	r0, r3, r1
 c014a56:	6019      	str	r1, [r3, #0]
 c014a58:	4282      	cmp	r2, r0
 c014a5a:	d1dd      	bne.n	c014a18 <_free_r+0x24>
 c014a5c:	6810      	ldr	r0, [r2, #0]
 c014a5e:	6852      	ldr	r2, [r2, #4]
 c014a60:	4401      	add	r1, r0
 c014a62:	605a      	str	r2, [r3, #4]
 c014a64:	6019      	str	r1, [r3, #0]
 c014a66:	e7d7      	b.n	c014a18 <_free_r+0x24>
 c014a68:	d902      	bls.n	c014a70 <_free_r+0x7c>
 c014a6a:	230c      	movs	r3, #12
 c014a6c:	602b      	str	r3, [r5, #0]
 c014a6e:	e7d3      	b.n	c014a18 <_free_r+0x24>
 c014a70:	6820      	ldr	r0, [r4, #0]
 c014a72:	1821      	adds	r1, r4, r0
 c014a74:	428a      	cmp	r2, r1
 c014a76:	bf02      	ittt	eq
 c014a78:	6811      	ldreq	r1, [r2, #0]
 c014a7a:	6852      	ldreq	r2, [r2, #4]
 c014a7c:	1809      	addeq	r1, r1, r0
 c014a7e:	6062      	str	r2, [r4, #4]
 c014a80:	bf08      	it	eq
 c014a82:	6021      	streq	r1, [r4, #0]
 c014a84:	605c      	str	r4, [r3, #4]
 c014a86:	e7c7      	b.n	c014a18 <_free_r+0x24>
 c014a88:	bd38      	pop	{r3, r4, r5, pc}
 c014a8a:	bf00      	nop
 c014a8c:	3003f278 	.word	0x3003f278

0c014a90 <_malloc_r>:
 c014a90:	b570      	push	{r4, r5, r6, lr}
 c014a92:	1ccd      	adds	r5, r1, #3
 c014a94:	4606      	mov	r6, r0
 c014a96:	f025 0503 	bic.w	r5, r5, #3
 c014a9a:	3508      	adds	r5, #8
 c014a9c:	2d0c      	cmp	r5, #12
 c014a9e:	bf38      	it	cc
 c014aa0:	250c      	movcc	r5, #12
 c014aa2:	2d00      	cmp	r5, #0
 c014aa4:	db01      	blt.n	c014aaa <_malloc_r+0x1a>
 c014aa6:	42a9      	cmp	r1, r5
 c014aa8:	d903      	bls.n	c014ab2 <_malloc_r+0x22>
 c014aaa:	230c      	movs	r3, #12
 c014aac:	6033      	str	r3, [r6, #0]
 c014aae:	2000      	movs	r0, #0
 c014ab0:	bd70      	pop	{r4, r5, r6, pc}
 c014ab2:	f001 fc21 	bl	c0162f8 <__malloc_lock>
 c014ab6:	4a21      	ldr	r2, [pc, #132]	; (c014b3c <_malloc_r+0xac>)
 c014ab8:	6814      	ldr	r4, [r2, #0]
 c014aba:	4621      	mov	r1, r4
 c014abc:	b991      	cbnz	r1, c014ae4 <_malloc_r+0x54>
 c014abe:	4c20      	ldr	r4, [pc, #128]	; (c014b40 <_malloc_r+0xb0>)
 c014ac0:	6823      	ldr	r3, [r4, #0]
 c014ac2:	b91b      	cbnz	r3, c014acc <_malloc_r+0x3c>
 c014ac4:	4630      	mov	r0, r6
 c014ac6:	f000 fcb7 	bl	c015438 <_sbrk_r>
 c014aca:	6020      	str	r0, [r4, #0]
 c014acc:	4629      	mov	r1, r5
 c014ace:	4630      	mov	r0, r6
 c014ad0:	f000 fcb2 	bl	c015438 <_sbrk_r>
 c014ad4:	1c43      	adds	r3, r0, #1
 c014ad6:	d124      	bne.n	c014b22 <_malloc_r+0x92>
 c014ad8:	230c      	movs	r3, #12
 c014ada:	4630      	mov	r0, r6
 c014adc:	6033      	str	r3, [r6, #0]
 c014ade:	f001 fc0c 	bl	c0162fa <__malloc_unlock>
 c014ae2:	e7e4      	b.n	c014aae <_malloc_r+0x1e>
 c014ae4:	680b      	ldr	r3, [r1, #0]
 c014ae6:	1b5b      	subs	r3, r3, r5
 c014ae8:	d418      	bmi.n	c014b1c <_malloc_r+0x8c>
 c014aea:	2b0b      	cmp	r3, #11
 c014aec:	d90f      	bls.n	c014b0e <_malloc_r+0x7e>
 c014aee:	18cc      	adds	r4, r1, r3
 c014af0:	600b      	str	r3, [r1, #0]
 c014af2:	50cd      	str	r5, [r1, r3]
 c014af4:	4630      	mov	r0, r6
 c014af6:	f001 fc00 	bl	c0162fa <__malloc_unlock>
 c014afa:	f104 000b 	add.w	r0, r4, #11
 c014afe:	1d23      	adds	r3, r4, #4
 c014b00:	f020 0007 	bic.w	r0, r0, #7
 c014b04:	1ac3      	subs	r3, r0, r3
 c014b06:	d0d3      	beq.n	c014ab0 <_malloc_r+0x20>
 c014b08:	425a      	negs	r2, r3
 c014b0a:	50e2      	str	r2, [r4, r3]
 c014b0c:	e7d0      	b.n	c014ab0 <_malloc_r+0x20>
 c014b0e:	428c      	cmp	r4, r1
 c014b10:	684b      	ldr	r3, [r1, #4]
 c014b12:	bf1a      	itte	ne
 c014b14:	6063      	strne	r3, [r4, #4]
 c014b16:	460c      	movne	r4, r1
 c014b18:	6013      	streq	r3, [r2, #0]
 c014b1a:	e7eb      	b.n	c014af4 <_malloc_r+0x64>
 c014b1c:	460c      	mov	r4, r1
 c014b1e:	6849      	ldr	r1, [r1, #4]
 c014b20:	e7cc      	b.n	c014abc <_malloc_r+0x2c>
 c014b22:	1cc4      	adds	r4, r0, #3
 c014b24:	f024 0403 	bic.w	r4, r4, #3
 c014b28:	42a0      	cmp	r0, r4
 c014b2a:	d005      	beq.n	c014b38 <_malloc_r+0xa8>
 c014b2c:	1a21      	subs	r1, r4, r0
 c014b2e:	4630      	mov	r0, r6
 c014b30:	f000 fc82 	bl	c015438 <_sbrk_r>
 c014b34:	3001      	adds	r0, #1
 c014b36:	d0cf      	beq.n	c014ad8 <_malloc_r+0x48>
 c014b38:	6025      	str	r5, [r4, #0]
 c014b3a:	e7db      	b.n	c014af4 <_malloc_r+0x64>
 c014b3c:	3003f278 	.word	0x3003f278
 c014b40:	3003f27c 	.word	0x3003f27c

0c014b44 <__cvt>:
 c014b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c014b48:	b088      	sub	sp, #32
 c014b4a:	2b00      	cmp	r3, #0
 c014b4c:	461d      	mov	r5, r3
 c014b4e:	4614      	mov	r4, r2
 c014b50:	9f14      	ldr	r7, [sp, #80]	; 0x50
 c014b52:	bfb6      	itet	lt
 c014b54:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 c014b58:	2300      	movge	r3, #0
 c014b5a:	4614      	movlt	r4, r2
 c014b5c:	f027 0720 	bic.w	r7, r7, #32
 c014b60:	bfbc      	itt	lt
 c014b62:	461d      	movlt	r5, r3
 c014b64:	232d      	movlt	r3, #45	; 0x2d
 c014b66:	9e10      	ldr	r6, [sp, #64]	; 0x40
 c014b68:	2f46      	cmp	r7, #70	; 0x46
 c014b6a:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 c014b6e:	700b      	strb	r3, [r1, #0]
 c014b70:	d004      	beq.n	c014b7c <__cvt+0x38>
 c014b72:	2f45      	cmp	r7, #69	; 0x45
 c014b74:	d100      	bne.n	c014b78 <__cvt+0x34>
 c014b76:	3601      	adds	r6, #1
 c014b78:	2302      	movs	r3, #2
 c014b7a:	e000      	b.n	c014b7e <__cvt+0x3a>
 c014b7c:	2303      	movs	r3, #3
 c014b7e:	aa07      	add	r2, sp, #28
 c014b80:	9204      	str	r2, [sp, #16]
 c014b82:	aa06      	add	r2, sp, #24
 c014b84:	e9cd 3600 	strd	r3, r6, [sp]
 c014b88:	e9cd a202 	strd	sl, r2, [sp, #8]
 c014b8c:	462b      	mov	r3, r5
 c014b8e:	4622      	mov	r2, r4
 c014b90:	f000 fd16 	bl	c0155c0 <_dtoa_r>
 c014b94:	2f47      	cmp	r7, #71	; 0x47
 c014b96:	4680      	mov	r8, r0
 c014b98:	d102      	bne.n	c014ba0 <__cvt+0x5c>
 c014b9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 c014b9c:	07db      	lsls	r3, r3, #31
 c014b9e:	d526      	bpl.n	c014bee <__cvt+0xaa>
 c014ba0:	2f46      	cmp	r7, #70	; 0x46
 c014ba2:	eb08 0906 	add.w	r9, r8, r6
 c014ba6:	d111      	bne.n	c014bcc <__cvt+0x88>
 c014ba8:	f898 3000 	ldrb.w	r3, [r8]
 c014bac:	2b30      	cmp	r3, #48	; 0x30
 c014bae:	d10a      	bne.n	c014bc6 <__cvt+0x82>
 c014bb0:	2200      	movs	r2, #0
 c014bb2:	2300      	movs	r3, #0
 c014bb4:	4620      	mov	r0, r4
 c014bb6:	4629      	mov	r1, r5
 c014bb8:	f004 fbc6 	bl	c019348 <__aeabi_dcmpeq>
 c014bbc:	b918      	cbnz	r0, c014bc6 <__cvt+0x82>
 c014bbe:	f1c6 0601 	rsb	r6, r6, #1
 c014bc2:	f8ca 6000 	str.w	r6, [sl]
 c014bc6:	f8da 3000 	ldr.w	r3, [sl]
 c014bca:	4499      	add	r9, r3
 c014bcc:	2200      	movs	r2, #0
 c014bce:	2300      	movs	r3, #0
 c014bd0:	4620      	mov	r0, r4
 c014bd2:	4629      	mov	r1, r5
 c014bd4:	f004 fbb8 	bl	c019348 <__aeabi_dcmpeq>
 c014bd8:	b938      	cbnz	r0, c014bea <__cvt+0xa6>
 c014bda:	2230      	movs	r2, #48	; 0x30
 c014bdc:	9b07      	ldr	r3, [sp, #28]
 c014bde:	454b      	cmp	r3, r9
 c014be0:	d205      	bcs.n	c014bee <__cvt+0xaa>
 c014be2:	1c59      	adds	r1, r3, #1
 c014be4:	9107      	str	r1, [sp, #28]
 c014be6:	701a      	strb	r2, [r3, #0]
 c014be8:	e7f8      	b.n	c014bdc <__cvt+0x98>
 c014bea:	f8cd 901c 	str.w	r9, [sp, #28]
 c014bee:	9b07      	ldr	r3, [sp, #28]
 c014bf0:	4640      	mov	r0, r8
 c014bf2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 c014bf4:	eba3 0308 	sub.w	r3, r3, r8
 c014bf8:	6013      	str	r3, [r2, #0]
 c014bfa:	b008      	add	sp, #32
 c014bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0c014c00 <__exponent>:
 c014c00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 c014c02:	2900      	cmp	r1, #0
 c014c04:	4604      	mov	r4, r0
 c014c06:	bfba      	itte	lt
 c014c08:	4249      	neglt	r1, r1
 c014c0a:	232d      	movlt	r3, #45	; 0x2d
 c014c0c:	232b      	movge	r3, #43	; 0x2b
 c014c0e:	f804 2b02 	strb.w	r2, [r4], #2
 c014c12:	2909      	cmp	r1, #9
 c014c14:	7043      	strb	r3, [r0, #1]
 c014c16:	dd20      	ble.n	c014c5a <__exponent+0x5a>
 c014c18:	f10d 0307 	add.w	r3, sp, #7
 c014c1c:	260a      	movs	r6, #10
 c014c1e:	461f      	mov	r7, r3
 c014c20:	1e5a      	subs	r2, r3, #1
 c014c22:	fb91 f5f6 	sdiv	r5, r1, r6
 c014c26:	fb06 1115 	mls	r1, r6, r5, r1
 c014c2a:	2d09      	cmp	r5, #9
 c014c2c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 c014c30:	f803 1c01 	strb.w	r1, [r3, #-1]
 c014c34:	4629      	mov	r1, r5
 c014c36:	dc09      	bgt.n	c014c4c <__exponent+0x4c>
 c014c38:	3130      	adds	r1, #48	; 0x30
 c014c3a:	3b02      	subs	r3, #2
 c014c3c:	f802 1c01 	strb.w	r1, [r2, #-1]
 c014c40:	42bb      	cmp	r3, r7
 c014c42:	4622      	mov	r2, r4
 c014c44:	d304      	bcc.n	c014c50 <__exponent+0x50>
 c014c46:	1a10      	subs	r0, r2, r0
 c014c48:	b003      	add	sp, #12
 c014c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 c014c4c:	4613      	mov	r3, r2
 c014c4e:	e7e7      	b.n	c014c20 <__exponent+0x20>
 c014c50:	f813 2b01 	ldrb.w	r2, [r3], #1
 c014c54:	f804 2b01 	strb.w	r2, [r4], #1
 c014c58:	e7f2      	b.n	c014c40 <__exponent+0x40>
 c014c5a:	2330      	movs	r3, #48	; 0x30
 c014c5c:	1d02      	adds	r2, r0, #4
 c014c5e:	4419      	add	r1, r3
 c014c60:	7083      	strb	r3, [r0, #2]
 c014c62:	70c1      	strb	r1, [r0, #3]
 c014c64:	e7ef      	b.n	c014c46 <__exponent+0x46>
	...

0c014c68 <_printf_float>:
 c014c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c014c6c:	b091      	sub	sp, #68	; 0x44
 c014c6e:	460c      	mov	r4, r1
 c014c70:	4616      	mov	r6, r2
 c014c72:	461f      	mov	r7, r3
 c014c74:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 c014c78:	4605      	mov	r5, r0
 c014c7a:	f001 fb21 	bl	c0162c0 <_localeconv_r>
 c014c7e:	6803      	ldr	r3, [r0, #0]
 c014c80:	4618      	mov	r0, r3
 c014c82:	9308      	str	r3, [sp, #32]
 c014c84:	f000 fbe8 	bl	c015458 <strlen>
 c014c88:	2300      	movs	r3, #0
 c014c8a:	9009      	str	r0, [sp, #36]	; 0x24
 c014c8c:	930e      	str	r3, [sp, #56]	; 0x38
 c014c8e:	f8d8 3000 	ldr.w	r3, [r8]
 c014c92:	f894 a018 	ldrb.w	sl, [r4, #24]
 c014c96:	3307      	adds	r3, #7
 c014c98:	f8d4 b000 	ldr.w	fp, [r4]
 c014c9c:	f023 0307 	bic.w	r3, r3, #7
 c014ca0:	f103 0208 	add.w	r2, r3, #8
 c014ca4:	f8c8 2000 	str.w	r2, [r8]
 c014ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 c014cac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 c014cb0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 c014cb4:	f04f 32ff 	mov.w	r2, #4294967295
 c014cb8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 c014cbc:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 c014cc0:	930b      	str	r3, [sp, #44]	; 0x2c
 c014cc2:	4ba9      	ldr	r3, [pc, #676]	; (c014f68 <_printf_float+0x300>)
 c014cc4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 c014cc8:	f004 fb70 	bl	c0193ac <__aeabi_dcmpun>
 c014ccc:	bb70      	cbnz	r0, c014d2c <_printf_float+0xc4>
 c014cce:	f04f 32ff 	mov.w	r2, #4294967295
 c014cd2:	4ba5      	ldr	r3, [pc, #660]	; (c014f68 <_printf_float+0x300>)
 c014cd4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 c014cd8:	f004 fb4a 	bl	c019370 <__aeabi_dcmple>
 c014cdc:	bb30      	cbnz	r0, c014d2c <_printf_float+0xc4>
 c014cde:	2200      	movs	r2, #0
 c014ce0:	2300      	movs	r3, #0
 c014ce2:	4640      	mov	r0, r8
 c014ce4:	4649      	mov	r1, r9
 c014ce6:	f004 fb39 	bl	c01935c <__aeabi_dcmplt>
 c014cea:	b110      	cbz	r0, c014cf2 <_printf_float+0x8a>
 c014cec:	232d      	movs	r3, #45	; 0x2d
 c014cee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c014cf2:	4a9e      	ldr	r2, [pc, #632]	; (c014f6c <_printf_float+0x304>)
 c014cf4:	4b9e      	ldr	r3, [pc, #632]	; (c014f70 <_printf_float+0x308>)
 c014cf6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 c014cfa:	bf8c      	ite	hi
 c014cfc:	4690      	movhi	r8, r2
 c014cfe:	4698      	movls	r8, r3
 c014d00:	2303      	movs	r3, #3
 c014d02:	f04f 0900 	mov.w	r9, #0
 c014d06:	6123      	str	r3, [r4, #16]
 c014d08:	f02b 0304 	bic.w	r3, fp, #4
 c014d0c:	6023      	str	r3, [r4, #0]
 c014d0e:	9700      	str	r7, [sp, #0]
 c014d10:	4633      	mov	r3, r6
 c014d12:	aa0f      	add	r2, sp, #60	; 0x3c
 c014d14:	4621      	mov	r1, r4
 c014d16:	4628      	mov	r0, r5
 c014d18:	f000 f9ec 	bl	c0150f4 <_printf_common>
 c014d1c:	3001      	adds	r0, #1
 c014d1e:	f040 8090 	bne.w	c014e42 <_printf_float+0x1da>
 c014d22:	f04f 30ff 	mov.w	r0, #4294967295
 c014d26:	b011      	add	sp, #68	; 0x44
 c014d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c014d2c:	4642      	mov	r2, r8
 c014d2e:	464b      	mov	r3, r9
 c014d30:	4640      	mov	r0, r8
 c014d32:	4649      	mov	r1, r9
 c014d34:	f004 fb3a 	bl	c0193ac <__aeabi_dcmpun>
 c014d38:	b110      	cbz	r0, c014d40 <_printf_float+0xd8>
 c014d3a:	4a8e      	ldr	r2, [pc, #568]	; (c014f74 <_printf_float+0x30c>)
 c014d3c:	4b8e      	ldr	r3, [pc, #568]	; (c014f78 <_printf_float+0x310>)
 c014d3e:	e7da      	b.n	c014cf6 <_printf_float+0x8e>
 c014d40:	6863      	ldr	r3, [r4, #4]
 c014d42:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 c014d46:	a80d      	add	r0, sp, #52	; 0x34
 c014d48:	1c59      	adds	r1, r3, #1
 c014d4a:	a90e      	add	r1, sp, #56	; 0x38
 c014d4c:	d140      	bne.n	c014dd0 <_printf_float+0x168>
 c014d4e:	2306      	movs	r3, #6
 c014d50:	6063      	str	r3, [r4, #4]
 c014d52:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 c014d56:	f04f 0c00 	mov.w	ip, #0
 c014d5a:	6022      	str	r2, [r4, #0]
 c014d5c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 c014d60:	6863      	ldr	r3, [r4, #4]
 c014d62:	4642      	mov	r2, r8
 c014d64:	e9cd 0a03 	strd	r0, sl, [sp, #12]
 c014d68:	9300      	str	r3, [sp, #0]
 c014d6a:	4628      	mov	r0, r5
 c014d6c:	464b      	mov	r3, r9
 c014d6e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 c014d72:	f7ff fee7 	bl	c014b44 <__cvt>
 c014d76:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 c014d7a:	4680      	mov	r8, r0
 c014d7c:	2b47      	cmp	r3, #71	; 0x47
 c014d7e:	d109      	bne.n	c014d94 <_printf_float+0x12c>
 c014d80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 c014d82:	1cd8      	adds	r0, r3, #3
 c014d84:	db02      	blt.n	c014d8c <_printf_float+0x124>
 c014d86:	6862      	ldr	r2, [r4, #4]
 c014d88:	4293      	cmp	r3, r2
 c014d8a:	dd47      	ble.n	c014e1c <_printf_float+0x1b4>
 c014d8c:	f1aa 0a02 	sub.w	sl, sl, #2
 c014d90:	fa5f fa8a 	uxtb.w	sl, sl
 c014d94:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 c014d98:	990d      	ldr	r1, [sp, #52]	; 0x34
 c014d9a:	d824      	bhi.n	c014de6 <_printf_float+0x17e>
 c014d9c:	3901      	subs	r1, #1
 c014d9e:	4652      	mov	r2, sl
 c014da0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 c014da4:	910d      	str	r1, [sp, #52]	; 0x34
 c014da6:	f7ff ff2b 	bl	c014c00 <__exponent>
 c014daa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 c014dac:	4681      	mov	r9, r0
 c014dae:	1813      	adds	r3, r2, r0
 c014db0:	2a01      	cmp	r2, #1
 c014db2:	6123      	str	r3, [r4, #16]
 c014db4:	dc02      	bgt.n	c014dbc <_printf_float+0x154>
 c014db6:	6822      	ldr	r2, [r4, #0]
 c014db8:	07d1      	lsls	r1, r2, #31
 c014dba:	d501      	bpl.n	c014dc0 <_printf_float+0x158>
 c014dbc:	3301      	adds	r3, #1
 c014dbe:	6123      	str	r3, [r4, #16]
 c014dc0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 c014dc4:	2b00      	cmp	r3, #0
 c014dc6:	d0a2      	beq.n	c014d0e <_printf_float+0xa6>
 c014dc8:	232d      	movs	r3, #45	; 0x2d
 c014dca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c014dce:	e79e      	b.n	c014d0e <_printf_float+0xa6>
 c014dd0:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 c014dd4:	f000 8178 	beq.w	c0150c8 <_printf_float+0x460>
 c014dd8:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 c014ddc:	d1b9      	bne.n	c014d52 <_printf_float+0xea>
 c014dde:	2b00      	cmp	r3, #0
 c014de0:	d1b7      	bne.n	c014d52 <_printf_float+0xea>
 c014de2:	2301      	movs	r3, #1
 c014de4:	e7b4      	b.n	c014d50 <_printf_float+0xe8>
 c014de6:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 c014dea:	d119      	bne.n	c014e20 <_printf_float+0x1b8>
 c014dec:	2900      	cmp	r1, #0
 c014dee:	6863      	ldr	r3, [r4, #4]
 c014df0:	dd0c      	ble.n	c014e0c <_printf_float+0x1a4>
 c014df2:	6121      	str	r1, [r4, #16]
 c014df4:	b913      	cbnz	r3, c014dfc <_printf_float+0x194>
 c014df6:	6822      	ldr	r2, [r4, #0]
 c014df8:	07d2      	lsls	r2, r2, #31
 c014dfa:	d502      	bpl.n	c014e02 <_printf_float+0x19a>
 c014dfc:	3301      	adds	r3, #1
 c014dfe:	440b      	add	r3, r1
 c014e00:	6123      	str	r3, [r4, #16]
 c014e02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 c014e04:	f04f 0900 	mov.w	r9, #0
 c014e08:	65a3      	str	r3, [r4, #88]	; 0x58
 c014e0a:	e7d9      	b.n	c014dc0 <_printf_float+0x158>
 c014e0c:	b913      	cbnz	r3, c014e14 <_printf_float+0x1ac>
 c014e0e:	6822      	ldr	r2, [r4, #0]
 c014e10:	07d0      	lsls	r0, r2, #31
 c014e12:	d501      	bpl.n	c014e18 <_printf_float+0x1b0>
 c014e14:	3302      	adds	r3, #2
 c014e16:	e7f3      	b.n	c014e00 <_printf_float+0x198>
 c014e18:	2301      	movs	r3, #1
 c014e1a:	e7f1      	b.n	c014e00 <_printf_float+0x198>
 c014e1c:	f04f 0a67 	mov.w	sl, #103	; 0x67
 c014e20:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 c014e24:	4293      	cmp	r3, r2
 c014e26:	db05      	blt.n	c014e34 <_printf_float+0x1cc>
 c014e28:	6822      	ldr	r2, [r4, #0]
 c014e2a:	6123      	str	r3, [r4, #16]
 c014e2c:	07d1      	lsls	r1, r2, #31
 c014e2e:	d5e8      	bpl.n	c014e02 <_printf_float+0x19a>
 c014e30:	3301      	adds	r3, #1
 c014e32:	e7e5      	b.n	c014e00 <_printf_float+0x198>
 c014e34:	2b00      	cmp	r3, #0
 c014e36:	bfd4      	ite	le
 c014e38:	f1c3 0302 	rsble	r3, r3, #2
 c014e3c:	2301      	movgt	r3, #1
 c014e3e:	4413      	add	r3, r2
 c014e40:	e7de      	b.n	c014e00 <_printf_float+0x198>
 c014e42:	6823      	ldr	r3, [r4, #0]
 c014e44:	055a      	lsls	r2, r3, #21
 c014e46:	d407      	bmi.n	c014e58 <_printf_float+0x1f0>
 c014e48:	6923      	ldr	r3, [r4, #16]
 c014e4a:	4642      	mov	r2, r8
 c014e4c:	4631      	mov	r1, r6
 c014e4e:	4628      	mov	r0, r5
 c014e50:	47b8      	blx	r7
 c014e52:	3001      	adds	r0, #1
 c014e54:	d12b      	bne.n	c014eae <_printf_float+0x246>
 c014e56:	e764      	b.n	c014d22 <_printf_float+0xba>
 c014e58:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 c014e5c:	f240 80dd 	bls.w	c01501a <_printf_float+0x3b2>
 c014e60:	2200      	movs	r2, #0
 c014e62:	2300      	movs	r3, #0
 c014e64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 c014e68:	f004 fa6e 	bl	c019348 <__aeabi_dcmpeq>
 c014e6c:	2800      	cmp	r0, #0
 c014e6e:	d033      	beq.n	c014ed8 <_printf_float+0x270>
 c014e70:	2301      	movs	r3, #1
 c014e72:	4a42      	ldr	r2, [pc, #264]	; (c014f7c <_printf_float+0x314>)
 c014e74:	4631      	mov	r1, r6
 c014e76:	4628      	mov	r0, r5
 c014e78:	47b8      	blx	r7
 c014e7a:	3001      	adds	r0, #1
 c014e7c:	f43f af51 	beq.w	c014d22 <_printf_float+0xba>
 c014e80:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 c014e84:	429a      	cmp	r2, r3
 c014e86:	db02      	blt.n	c014e8e <_printf_float+0x226>
 c014e88:	6823      	ldr	r3, [r4, #0]
 c014e8a:	07d8      	lsls	r0, r3, #31
 c014e8c:	d50f      	bpl.n	c014eae <_printf_float+0x246>
 c014e8e:	4631      	mov	r1, r6
 c014e90:	4628      	mov	r0, r5
 c014e92:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 c014e96:	47b8      	blx	r7
 c014e98:	3001      	adds	r0, #1
 c014e9a:	f43f af42 	beq.w	c014d22 <_printf_float+0xba>
 c014e9e:	f04f 0800 	mov.w	r8, #0
 c014ea2:	f104 091a 	add.w	r9, r4, #26
 c014ea6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 c014ea8:	3b01      	subs	r3, #1
 c014eaa:	4543      	cmp	r3, r8
 c014eac:	dc09      	bgt.n	c014ec2 <_printf_float+0x25a>
 c014eae:	6823      	ldr	r3, [r4, #0]
 c014eb0:	079b      	lsls	r3, r3, #30
 c014eb2:	f100 8104 	bmi.w	c0150be <_printf_float+0x456>
 c014eb6:	68e0      	ldr	r0, [r4, #12]
 c014eb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 c014eba:	4298      	cmp	r0, r3
 c014ebc:	bfb8      	it	lt
 c014ebe:	4618      	movlt	r0, r3
 c014ec0:	e731      	b.n	c014d26 <_printf_float+0xbe>
 c014ec2:	2301      	movs	r3, #1
 c014ec4:	464a      	mov	r2, r9
 c014ec6:	4631      	mov	r1, r6
 c014ec8:	4628      	mov	r0, r5
 c014eca:	47b8      	blx	r7
 c014ecc:	3001      	adds	r0, #1
 c014ece:	f43f af28 	beq.w	c014d22 <_printf_float+0xba>
 c014ed2:	f108 0801 	add.w	r8, r8, #1
 c014ed6:	e7e6      	b.n	c014ea6 <_printf_float+0x23e>
 c014ed8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 c014eda:	2b00      	cmp	r3, #0
 c014edc:	dc2b      	bgt.n	c014f36 <_printf_float+0x2ce>
 c014ede:	2301      	movs	r3, #1
 c014ee0:	4a26      	ldr	r2, [pc, #152]	; (c014f7c <_printf_float+0x314>)
 c014ee2:	4631      	mov	r1, r6
 c014ee4:	4628      	mov	r0, r5
 c014ee6:	47b8      	blx	r7
 c014ee8:	3001      	adds	r0, #1
 c014eea:	f43f af1a 	beq.w	c014d22 <_printf_float+0xba>
 c014eee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 c014ef0:	b923      	cbnz	r3, c014efc <_printf_float+0x294>
 c014ef2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 c014ef4:	b913      	cbnz	r3, c014efc <_printf_float+0x294>
 c014ef6:	6823      	ldr	r3, [r4, #0]
 c014ef8:	07d9      	lsls	r1, r3, #31
 c014efa:	d5d8      	bpl.n	c014eae <_printf_float+0x246>
 c014efc:	4631      	mov	r1, r6
 c014efe:	4628      	mov	r0, r5
 c014f00:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 c014f04:	47b8      	blx	r7
 c014f06:	3001      	adds	r0, #1
 c014f08:	f43f af0b 	beq.w	c014d22 <_printf_float+0xba>
 c014f0c:	f04f 0900 	mov.w	r9, #0
 c014f10:	f104 0a1a 	add.w	sl, r4, #26
 c014f14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 c014f16:	425b      	negs	r3, r3
 c014f18:	454b      	cmp	r3, r9
 c014f1a:	dc01      	bgt.n	c014f20 <_printf_float+0x2b8>
 c014f1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 c014f1e:	e794      	b.n	c014e4a <_printf_float+0x1e2>
 c014f20:	2301      	movs	r3, #1
 c014f22:	4652      	mov	r2, sl
 c014f24:	4631      	mov	r1, r6
 c014f26:	4628      	mov	r0, r5
 c014f28:	47b8      	blx	r7
 c014f2a:	3001      	adds	r0, #1
 c014f2c:	f43f aef9 	beq.w	c014d22 <_printf_float+0xba>
 c014f30:	f109 0901 	add.w	r9, r9, #1
 c014f34:	e7ee      	b.n	c014f14 <_printf_float+0x2ac>
 c014f36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 c014f38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 c014f3a:	429a      	cmp	r2, r3
 c014f3c:	bfa8      	it	ge
 c014f3e:	461a      	movge	r2, r3
 c014f40:	2a00      	cmp	r2, #0
 c014f42:	4691      	mov	r9, r2
 c014f44:	dd07      	ble.n	c014f56 <_printf_float+0x2ee>
 c014f46:	4613      	mov	r3, r2
 c014f48:	4631      	mov	r1, r6
 c014f4a:	4642      	mov	r2, r8
 c014f4c:	4628      	mov	r0, r5
 c014f4e:	47b8      	blx	r7
 c014f50:	3001      	adds	r0, #1
 c014f52:	f43f aee6 	beq.w	c014d22 <_printf_float+0xba>
 c014f56:	f104 031a 	add.w	r3, r4, #26
 c014f5a:	f04f 0b00 	mov.w	fp, #0
 c014f5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 c014f62:	930a      	str	r3, [sp, #40]	; 0x28
 c014f64:	e016      	b.n	c014f94 <_printf_float+0x32c>
 c014f66:	bf00      	nop
 c014f68:	7fefffff 	.word	0x7fefffff
 c014f6c:	0c01707c 	.word	0x0c01707c
 c014f70:	0c017078 	.word	0x0c017078
 c014f74:	0c017084 	.word	0x0c017084
 c014f78:	0c017080 	.word	0x0c017080
 c014f7c:	0c017088 	.word	0x0c017088
 c014f80:	2301      	movs	r3, #1
 c014f82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 c014f84:	4631      	mov	r1, r6
 c014f86:	4628      	mov	r0, r5
 c014f88:	47b8      	blx	r7
 c014f8a:	3001      	adds	r0, #1
 c014f8c:	f43f aec9 	beq.w	c014d22 <_printf_float+0xba>
 c014f90:	f10b 0b01 	add.w	fp, fp, #1
 c014f94:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 c014f98:	ebaa 0309 	sub.w	r3, sl, r9
 c014f9c:	455b      	cmp	r3, fp
 c014f9e:	dcef      	bgt.n	c014f80 <_printf_float+0x318>
 c014fa0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 c014fa4:	44d0      	add	r8, sl
 c014fa6:	429a      	cmp	r2, r3
 c014fa8:	db15      	blt.n	c014fd6 <_printf_float+0x36e>
 c014faa:	6823      	ldr	r3, [r4, #0]
 c014fac:	07da      	lsls	r2, r3, #31
 c014fae:	d412      	bmi.n	c014fd6 <_printf_float+0x36e>
 c014fb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 c014fb2:	990d      	ldr	r1, [sp, #52]	; 0x34
 c014fb4:	eba3 020a 	sub.w	r2, r3, sl
 c014fb8:	eba3 0a01 	sub.w	sl, r3, r1
 c014fbc:	4592      	cmp	sl, r2
 c014fbe:	bfa8      	it	ge
 c014fc0:	4692      	movge	sl, r2
 c014fc2:	f1ba 0f00 	cmp.w	sl, #0
 c014fc6:	dc0e      	bgt.n	c014fe6 <_printf_float+0x37e>
 c014fc8:	f04f 0800 	mov.w	r8, #0
 c014fcc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 c014fd0:	f104 091a 	add.w	r9, r4, #26
 c014fd4:	e019      	b.n	c01500a <_printf_float+0x3a2>
 c014fd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 c014fda:	4631      	mov	r1, r6
 c014fdc:	4628      	mov	r0, r5
 c014fde:	47b8      	blx	r7
 c014fe0:	3001      	adds	r0, #1
 c014fe2:	d1e5      	bne.n	c014fb0 <_printf_float+0x348>
 c014fe4:	e69d      	b.n	c014d22 <_printf_float+0xba>
 c014fe6:	4653      	mov	r3, sl
 c014fe8:	4642      	mov	r2, r8
 c014fea:	4631      	mov	r1, r6
 c014fec:	4628      	mov	r0, r5
 c014fee:	47b8      	blx	r7
 c014ff0:	3001      	adds	r0, #1
 c014ff2:	d1e9      	bne.n	c014fc8 <_printf_float+0x360>
 c014ff4:	e695      	b.n	c014d22 <_printf_float+0xba>
 c014ff6:	2301      	movs	r3, #1
 c014ff8:	464a      	mov	r2, r9
 c014ffa:	4631      	mov	r1, r6
 c014ffc:	4628      	mov	r0, r5
 c014ffe:	47b8      	blx	r7
 c015000:	3001      	adds	r0, #1
 c015002:	f43f ae8e 	beq.w	c014d22 <_printf_float+0xba>
 c015006:	f108 0801 	add.w	r8, r8, #1
 c01500a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 c01500e:	1a9b      	subs	r3, r3, r2
 c015010:	eba3 030a 	sub.w	r3, r3, sl
 c015014:	4543      	cmp	r3, r8
 c015016:	dcee      	bgt.n	c014ff6 <_printf_float+0x38e>
 c015018:	e749      	b.n	c014eae <_printf_float+0x246>
 c01501a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 c01501c:	2a01      	cmp	r2, #1
 c01501e:	dc01      	bgt.n	c015024 <_printf_float+0x3bc>
 c015020:	07db      	lsls	r3, r3, #31
 c015022:	d53a      	bpl.n	c01509a <_printf_float+0x432>
 c015024:	2301      	movs	r3, #1
 c015026:	4642      	mov	r2, r8
 c015028:	4631      	mov	r1, r6
 c01502a:	4628      	mov	r0, r5
 c01502c:	47b8      	blx	r7
 c01502e:	3001      	adds	r0, #1
 c015030:	f43f ae77 	beq.w	c014d22 <_printf_float+0xba>
 c015034:	4631      	mov	r1, r6
 c015036:	4628      	mov	r0, r5
 c015038:	f108 0801 	add.w	r8, r8, #1
 c01503c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 c015040:	47b8      	blx	r7
 c015042:	3001      	adds	r0, #1
 c015044:	f43f ae6d 	beq.w	c014d22 <_printf_float+0xba>
 c015048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 c01504a:	2200      	movs	r2, #0
 c01504c:	f103 3aff 	add.w	sl, r3, #4294967295
 c015050:	2300      	movs	r3, #0
 c015052:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 c015056:	f004 f977 	bl	c019348 <__aeabi_dcmpeq>
 c01505a:	b9c8      	cbnz	r0, c015090 <_printf_float+0x428>
 c01505c:	4653      	mov	r3, sl
 c01505e:	4642      	mov	r2, r8
 c015060:	4631      	mov	r1, r6
 c015062:	4628      	mov	r0, r5
 c015064:	47b8      	blx	r7
 c015066:	3001      	adds	r0, #1
 c015068:	d10e      	bne.n	c015088 <_printf_float+0x420>
 c01506a:	e65a      	b.n	c014d22 <_printf_float+0xba>
 c01506c:	2301      	movs	r3, #1
 c01506e:	4652      	mov	r2, sl
 c015070:	4631      	mov	r1, r6
 c015072:	4628      	mov	r0, r5
 c015074:	47b8      	blx	r7
 c015076:	3001      	adds	r0, #1
 c015078:	f43f ae53 	beq.w	c014d22 <_printf_float+0xba>
 c01507c:	f108 0801 	add.w	r8, r8, #1
 c015080:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 c015082:	3b01      	subs	r3, #1
 c015084:	4543      	cmp	r3, r8
 c015086:	dcf1      	bgt.n	c01506c <_printf_float+0x404>
 c015088:	464b      	mov	r3, r9
 c01508a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 c01508e:	e6dd      	b.n	c014e4c <_printf_float+0x1e4>
 c015090:	f04f 0800 	mov.w	r8, #0
 c015094:	f104 0a1a 	add.w	sl, r4, #26
 c015098:	e7f2      	b.n	c015080 <_printf_float+0x418>
 c01509a:	2301      	movs	r3, #1
 c01509c:	e7df      	b.n	c01505e <_printf_float+0x3f6>
 c01509e:	2301      	movs	r3, #1
 c0150a0:	464a      	mov	r2, r9
 c0150a2:	4631      	mov	r1, r6
 c0150a4:	4628      	mov	r0, r5
 c0150a6:	47b8      	blx	r7
 c0150a8:	3001      	adds	r0, #1
 c0150aa:	f43f ae3a 	beq.w	c014d22 <_printf_float+0xba>
 c0150ae:	f108 0801 	add.w	r8, r8, #1
 c0150b2:	68e3      	ldr	r3, [r4, #12]
 c0150b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 c0150b6:	1a9b      	subs	r3, r3, r2
 c0150b8:	4543      	cmp	r3, r8
 c0150ba:	dcf0      	bgt.n	c01509e <_printf_float+0x436>
 c0150bc:	e6fb      	b.n	c014eb6 <_printf_float+0x24e>
 c0150be:	f04f 0800 	mov.w	r8, #0
 c0150c2:	f104 0919 	add.w	r9, r4, #25
 c0150c6:	e7f4      	b.n	c0150b2 <_printf_float+0x44a>
 c0150c8:	2b00      	cmp	r3, #0
 c0150ca:	f43f ae8a 	beq.w	c014de2 <_printf_float+0x17a>
 c0150ce:	f04f 0c00 	mov.w	ip, #0
 c0150d2:	6022      	str	r2, [r4, #0]
 c0150d4:	9300      	str	r3, [sp, #0]
 c0150d6:	464b      	mov	r3, r9
 c0150d8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 c0150dc:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 c0150e0:	e9cd 0a03 	strd	r0, sl, [sp, #12]
 c0150e4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 c0150e8:	4628      	mov	r0, r5
 c0150ea:	4642      	mov	r2, r8
 c0150ec:	f7ff fd2a 	bl	c014b44 <__cvt>
 c0150f0:	4680      	mov	r8, r0
 c0150f2:	e645      	b.n	c014d80 <_printf_float+0x118>

0c0150f4 <_printf_common>:
 c0150f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c0150f8:	4691      	mov	r9, r2
 c0150fa:	461f      	mov	r7, r3
 c0150fc:	688a      	ldr	r2, [r1, #8]
 c0150fe:	4606      	mov	r6, r0
 c015100:	690b      	ldr	r3, [r1, #16]
 c015102:	460c      	mov	r4, r1
 c015104:	f8dd 8020 	ldr.w	r8, [sp, #32]
 c015108:	4293      	cmp	r3, r2
 c01510a:	bfb8      	it	lt
 c01510c:	4613      	movlt	r3, r2
 c01510e:	f8c9 3000 	str.w	r3, [r9]
 c015112:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 c015116:	b112      	cbz	r2, c01511e <_printf_common+0x2a>
 c015118:	3301      	adds	r3, #1
 c01511a:	f8c9 3000 	str.w	r3, [r9]
 c01511e:	6823      	ldr	r3, [r4, #0]
 c015120:	0699      	lsls	r1, r3, #26
 c015122:	bf42      	ittt	mi
 c015124:	f8d9 3000 	ldrmi.w	r3, [r9]
 c015128:	3302      	addmi	r3, #2
 c01512a:	f8c9 3000 	strmi.w	r3, [r9]
 c01512e:	6825      	ldr	r5, [r4, #0]
 c015130:	f015 0506 	ands.w	r5, r5, #6
 c015134:	d107      	bne.n	c015146 <_printf_common+0x52>
 c015136:	f104 0a19 	add.w	sl, r4, #25
 c01513a:	68e3      	ldr	r3, [r4, #12]
 c01513c:	f8d9 2000 	ldr.w	r2, [r9]
 c015140:	1a9b      	subs	r3, r3, r2
 c015142:	42ab      	cmp	r3, r5
 c015144:	dc2b      	bgt.n	c01519e <_printf_common+0xaa>
 c015146:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 c01514a:	6822      	ldr	r2, [r4, #0]
 c01514c:	3300      	adds	r3, #0
 c01514e:	bf18      	it	ne
 c015150:	2301      	movne	r3, #1
 c015152:	0692      	lsls	r2, r2, #26
 c015154:	d430      	bmi.n	c0151b8 <_printf_common+0xc4>
 c015156:	f104 0243 	add.w	r2, r4, #67	; 0x43
 c01515a:	4639      	mov	r1, r7
 c01515c:	4630      	mov	r0, r6
 c01515e:	47c0      	blx	r8
 c015160:	3001      	adds	r0, #1
 c015162:	d023      	beq.n	c0151ac <_printf_common+0xb8>
 c015164:	6823      	ldr	r3, [r4, #0]
 c015166:	341a      	adds	r4, #26
 c015168:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 c01516c:	f003 0306 	and.w	r3, r3, #6
 c015170:	f8d9 2000 	ldr.w	r2, [r9]
 c015174:	f04f 0900 	mov.w	r9, #0
 c015178:	2b04      	cmp	r3, #4
 c01517a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 c01517e:	bf08      	it	eq
 c015180:	1aad      	subeq	r5, r5, r2
 c015182:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 c015186:	bf14      	ite	ne
 c015188:	2500      	movne	r5, #0
 c01518a:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 c01518e:	4293      	cmp	r3, r2
 c015190:	bfc4      	itt	gt
 c015192:	1a9b      	subgt	r3, r3, r2
 c015194:	18ed      	addgt	r5, r5, r3
 c015196:	454d      	cmp	r5, r9
 c015198:	d11a      	bne.n	c0151d0 <_printf_common+0xdc>
 c01519a:	2000      	movs	r0, #0
 c01519c:	e008      	b.n	c0151b0 <_printf_common+0xbc>
 c01519e:	2301      	movs	r3, #1
 c0151a0:	4652      	mov	r2, sl
 c0151a2:	4639      	mov	r1, r7
 c0151a4:	4630      	mov	r0, r6
 c0151a6:	47c0      	blx	r8
 c0151a8:	3001      	adds	r0, #1
 c0151aa:	d103      	bne.n	c0151b4 <_printf_common+0xc0>
 c0151ac:	f04f 30ff 	mov.w	r0, #4294967295
 c0151b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c0151b4:	3501      	adds	r5, #1
 c0151b6:	e7c0      	b.n	c01513a <_printf_common+0x46>
 c0151b8:	18e1      	adds	r1, r4, r3
 c0151ba:	1c5a      	adds	r2, r3, #1
 c0151bc:	2030      	movs	r0, #48	; 0x30
 c0151be:	3302      	adds	r3, #2
 c0151c0:	4422      	add	r2, r4
 c0151c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 c0151c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 c0151ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 c0151ce:	e7c2      	b.n	c015156 <_printf_common+0x62>
 c0151d0:	2301      	movs	r3, #1
 c0151d2:	4622      	mov	r2, r4
 c0151d4:	4639      	mov	r1, r7
 c0151d6:	4630      	mov	r0, r6
 c0151d8:	47c0      	blx	r8
 c0151da:	3001      	adds	r0, #1
 c0151dc:	d0e6      	beq.n	c0151ac <_printf_common+0xb8>
 c0151de:	f109 0901 	add.w	r9, r9, #1
 c0151e2:	e7d8      	b.n	c015196 <_printf_common+0xa2>

0c0151e4 <_printf_i>:
 c0151e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c0151e8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 c0151ec:	460c      	mov	r4, r1
 c0151ee:	7e09      	ldrb	r1, [r1, #24]
 c0151f0:	b085      	sub	sp, #20
 c0151f2:	4617      	mov	r7, r2
 c0151f4:	4606      	mov	r6, r0
 c0151f6:	296e      	cmp	r1, #110	; 0x6e
 c0151f8:	4698      	mov	r8, r3
 c0151fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 c0151fc:	f000 80b3 	beq.w	c015366 <_printf_i+0x182>
 c015200:	d822      	bhi.n	c015248 <_printf_i+0x64>
 c015202:	2963      	cmp	r1, #99	; 0x63
 c015204:	d036      	beq.n	c015274 <_printf_i+0x90>
 c015206:	d80a      	bhi.n	c01521e <_printf_i+0x3a>
 c015208:	2900      	cmp	r1, #0
 c01520a:	f000 80b9 	beq.w	c015380 <_printf_i+0x19c>
 c01520e:	2958      	cmp	r1, #88	; 0x58
 c015210:	f000 8083 	beq.w	c01531a <_printf_i+0x136>
 c015214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 c015218:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 c01521c:	e032      	b.n	c015284 <_printf_i+0xa0>
 c01521e:	2964      	cmp	r1, #100	; 0x64
 c015220:	d001      	beq.n	c015226 <_printf_i+0x42>
 c015222:	2969      	cmp	r1, #105	; 0x69
 c015224:	d1f6      	bne.n	c015214 <_printf_i+0x30>
 c015226:	6820      	ldr	r0, [r4, #0]
 c015228:	6813      	ldr	r3, [r2, #0]
 c01522a:	0605      	lsls	r5, r0, #24
 c01522c:	f103 0104 	add.w	r1, r3, #4
 c015230:	d52a      	bpl.n	c015288 <_printf_i+0xa4>
 c015232:	681b      	ldr	r3, [r3, #0]
 c015234:	6011      	str	r1, [r2, #0]
 c015236:	2b00      	cmp	r3, #0
 c015238:	da03      	bge.n	c015242 <_printf_i+0x5e>
 c01523a:	222d      	movs	r2, #45	; 0x2d
 c01523c:	425b      	negs	r3, r3
 c01523e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 c015242:	486f      	ldr	r0, [pc, #444]	; (c015400 <_printf_i+0x21c>)
 c015244:	220a      	movs	r2, #10
 c015246:	e039      	b.n	c0152bc <_printf_i+0xd8>
 c015248:	2973      	cmp	r1, #115	; 0x73
 c01524a:	f000 809d 	beq.w	c015388 <_printf_i+0x1a4>
 c01524e:	d808      	bhi.n	c015262 <_printf_i+0x7e>
 c015250:	296f      	cmp	r1, #111	; 0x6f
 c015252:	d020      	beq.n	c015296 <_printf_i+0xb2>
 c015254:	2970      	cmp	r1, #112	; 0x70
 c015256:	d1dd      	bne.n	c015214 <_printf_i+0x30>
 c015258:	6823      	ldr	r3, [r4, #0]
 c01525a:	f043 0320 	orr.w	r3, r3, #32
 c01525e:	6023      	str	r3, [r4, #0]
 c015260:	e003      	b.n	c01526a <_printf_i+0x86>
 c015262:	2975      	cmp	r1, #117	; 0x75
 c015264:	d017      	beq.n	c015296 <_printf_i+0xb2>
 c015266:	2978      	cmp	r1, #120	; 0x78
 c015268:	d1d4      	bne.n	c015214 <_printf_i+0x30>
 c01526a:	2378      	movs	r3, #120	; 0x78
 c01526c:	4865      	ldr	r0, [pc, #404]	; (c015404 <_printf_i+0x220>)
 c01526e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 c015272:	e055      	b.n	c015320 <_printf_i+0x13c>
 c015274:	6813      	ldr	r3, [r2, #0]
 c015276:	f104 0542 	add.w	r5, r4, #66	; 0x42
 c01527a:	1d19      	adds	r1, r3, #4
 c01527c:	681b      	ldr	r3, [r3, #0]
 c01527e:	6011      	str	r1, [r2, #0]
 c015280:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 c015284:	2301      	movs	r3, #1
 c015286:	e08c      	b.n	c0153a2 <_printf_i+0x1be>
 c015288:	681b      	ldr	r3, [r3, #0]
 c01528a:	f010 0f40 	tst.w	r0, #64	; 0x40
 c01528e:	6011      	str	r1, [r2, #0]
 c015290:	bf18      	it	ne
 c015292:	b21b      	sxthne	r3, r3
 c015294:	e7cf      	b.n	c015236 <_printf_i+0x52>
 c015296:	6813      	ldr	r3, [r2, #0]
 c015298:	6825      	ldr	r5, [r4, #0]
 c01529a:	1d18      	adds	r0, r3, #4
 c01529c:	6010      	str	r0, [r2, #0]
 c01529e:	0628      	lsls	r0, r5, #24
 c0152a0:	d501      	bpl.n	c0152a6 <_printf_i+0xc2>
 c0152a2:	681b      	ldr	r3, [r3, #0]
 c0152a4:	e002      	b.n	c0152ac <_printf_i+0xc8>
 c0152a6:	0668      	lsls	r0, r5, #25
 c0152a8:	d5fb      	bpl.n	c0152a2 <_printf_i+0xbe>
 c0152aa:	881b      	ldrh	r3, [r3, #0]
 c0152ac:	296f      	cmp	r1, #111	; 0x6f
 c0152ae:	4854      	ldr	r0, [pc, #336]	; (c015400 <_printf_i+0x21c>)
 c0152b0:	bf14      	ite	ne
 c0152b2:	220a      	movne	r2, #10
 c0152b4:	2208      	moveq	r2, #8
 c0152b6:	2100      	movs	r1, #0
 c0152b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 c0152bc:	6865      	ldr	r5, [r4, #4]
 c0152be:	2d00      	cmp	r5, #0
 c0152c0:	60a5      	str	r5, [r4, #8]
 c0152c2:	f2c0 8095 	blt.w	c0153f0 <_printf_i+0x20c>
 c0152c6:	6821      	ldr	r1, [r4, #0]
 c0152c8:	f021 0104 	bic.w	r1, r1, #4
 c0152cc:	6021      	str	r1, [r4, #0]
 c0152ce:	2b00      	cmp	r3, #0
 c0152d0:	d13d      	bne.n	c01534e <_printf_i+0x16a>
 c0152d2:	2d00      	cmp	r5, #0
 c0152d4:	f040 808e 	bne.w	c0153f4 <_printf_i+0x210>
 c0152d8:	4665      	mov	r5, ip
 c0152da:	2a08      	cmp	r2, #8
 c0152dc:	d10b      	bne.n	c0152f6 <_printf_i+0x112>
 c0152de:	6823      	ldr	r3, [r4, #0]
 c0152e0:	07db      	lsls	r3, r3, #31
 c0152e2:	d508      	bpl.n	c0152f6 <_printf_i+0x112>
 c0152e4:	6923      	ldr	r3, [r4, #16]
 c0152e6:	6862      	ldr	r2, [r4, #4]
 c0152e8:	429a      	cmp	r2, r3
 c0152ea:	bfde      	ittt	le
 c0152ec:	2330      	movle	r3, #48	; 0x30
 c0152ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 c0152f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 c0152f6:	ebac 0305 	sub.w	r3, ip, r5
 c0152fa:	6123      	str	r3, [r4, #16]
 c0152fc:	f8cd 8000 	str.w	r8, [sp]
 c015300:	463b      	mov	r3, r7
 c015302:	aa03      	add	r2, sp, #12
 c015304:	4621      	mov	r1, r4
 c015306:	4630      	mov	r0, r6
 c015308:	f7ff fef4 	bl	c0150f4 <_printf_common>
 c01530c:	3001      	adds	r0, #1
 c01530e:	d14d      	bne.n	c0153ac <_printf_i+0x1c8>
 c015310:	f04f 30ff 	mov.w	r0, #4294967295
 c015314:	b005      	add	sp, #20
 c015316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 c01531a:	4839      	ldr	r0, [pc, #228]	; (c015400 <_printf_i+0x21c>)
 c01531c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 c015320:	6813      	ldr	r3, [r2, #0]
 c015322:	6821      	ldr	r1, [r4, #0]
 c015324:	1d1d      	adds	r5, r3, #4
 c015326:	681b      	ldr	r3, [r3, #0]
 c015328:	6015      	str	r5, [r2, #0]
 c01532a:	060a      	lsls	r2, r1, #24
 c01532c:	d50b      	bpl.n	c015346 <_printf_i+0x162>
 c01532e:	07ca      	lsls	r2, r1, #31
 c015330:	bf44      	itt	mi
 c015332:	f041 0120 	orrmi.w	r1, r1, #32
 c015336:	6021      	strmi	r1, [r4, #0]
 c015338:	b91b      	cbnz	r3, c015342 <_printf_i+0x15e>
 c01533a:	6822      	ldr	r2, [r4, #0]
 c01533c:	f022 0220 	bic.w	r2, r2, #32
 c015340:	6022      	str	r2, [r4, #0]
 c015342:	2210      	movs	r2, #16
 c015344:	e7b7      	b.n	c0152b6 <_printf_i+0xd2>
 c015346:	064d      	lsls	r5, r1, #25
 c015348:	bf48      	it	mi
 c01534a:	b29b      	uxthmi	r3, r3
 c01534c:	e7ef      	b.n	c01532e <_printf_i+0x14a>
 c01534e:	4665      	mov	r5, ip
 c015350:	fbb3 f1f2 	udiv	r1, r3, r2
 c015354:	fb02 3311 	mls	r3, r2, r1, r3
 c015358:	5cc3      	ldrb	r3, [r0, r3]
 c01535a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 c01535e:	460b      	mov	r3, r1
 c015360:	2900      	cmp	r1, #0
 c015362:	d1f5      	bne.n	c015350 <_printf_i+0x16c>
 c015364:	e7b9      	b.n	c0152da <_printf_i+0xf6>
 c015366:	6813      	ldr	r3, [r2, #0]
 c015368:	6825      	ldr	r5, [r4, #0]
 c01536a:	1d18      	adds	r0, r3, #4
 c01536c:	6961      	ldr	r1, [r4, #20]
 c01536e:	6010      	str	r0, [r2, #0]
 c015370:	0628      	lsls	r0, r5, #24
 c015372:	681b      	ldr	r3, [r3, #0]
 c015374:	d501      	bpl.n	c01537a <_printf_i+0x196>
 c015376:	6019      	str	r1, [r3, #0]
 c015378:	e002      	b.n	c015380 <_printf_i+0x19c>
 c01537a:	066a      	lsls	r2, r5, #25
 c01537c:	d5fb      	bpl.n	c015376 <_printf_i+0x192>
 c01537e:	8019      	strh	r1, [r3, #0]
 c015380:	2300      	movs	r3, #0
 c015382:	4665      	mov	r5, ip
 c015384:	6123      	str	r3, [r4, #16]
 c015386:	e7b9      	b.n	c0152fc <_printf_i+0x118>
 c015388:	6813      	ldr	r3, [r2, #0]
 c01538a:	1d19      	adds	r1, r3, #4
 c01538c:	6011      	str	r1, [r2, #0]
 c01538e:	2100      	movs	r1, #0
 c015390:	681d      	ldr	r5, [r3, #0]
 c015392:	6862      	ldr	r2, [r4, #4]
 c015394:	4628      	mov	r0, r5
 c015396:	f000 ffa1 	bl	c0162dc <memchr>
 c01539a:	b108      	cbz	r0, c0153a0 <_printf_i+0x1bc>
 c01539c:	1b40      	subs	r0, r0, r5
 c01539e:	6060      	str	r0, [r4, #4]
 c0153a0:	6863      	ldr	r3, [r4, #4]
 c0153a2:	6123      	str	r3, [r4, #16]
 c0153a4:	2300      	movs	r3, #0
 c0153a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c0153aa:	e7a7      	b.n	c0152fc <_printf_i+0x118>
 c0153ac:	6923      	ldr	r3, [r4, #16]
 c0153ae:	462a      	mov	r2, r5
 c0153b0:	4639      	mov	r1, r7
 c0153b2:	4630      	mov	r0, r6
 c0153b4:	47c0      	blx	r8
 c0153b6:	3001      	adds	r0, #1
 c0153b8:	d0aa      	beq.n	c015310 <_printf_i+0x12c>
 c0153ba:	6823      	ldr	r3, [r4, #0]
 c0153bc:	079b      	lsls	r3, r3, #30
 c0153be:	d413      	bmi.n	c0153e8 <_printf_i+0x204>
 c0153c0:	68e0      	ldr	r0, [r4, #12]
 c0153c2:	9b03      	ldr	r3, [sp, #12]
 c0153c4:	4298      	cmp	r0, r3
 c0153c6:	bfb8      	it	lt
 c0153c8:	4618      	movlt	r0, r3
 c0153ca:	e7a3      	b.n	c015314 <_printf_i+0x130>
 c0153cc:	2301      	movs	r3, #1
 c0153ce:	464a      	mov	r2, r9
 c0153d0:	4639      	mov	r1, r7
 c0153d2:	4630      	mov	r0, r6
 c0153d4:	47c0      	blx	r8
 c0153d6:	3001      	adds	r0, #1
 c0153d8:	d09a      	beq.n	c015310 <_printf_i+0x12c>
 c0153da:	3501      	adds	r5, #1
 c0153dc:	68e3      	ldr	r3, [r4, #12]
 c0153de:	9a03      	ldr	r2, [sp, #12]
 c0153e0:	1a9b      	subs	r3, r3, r2
 c0153e2:	42ab      	cmp	r3, r5
 c0153e4:	dcf2      	bgt.n	c0153cc <_printf_i+0x1e8>
 c0153e6:	e7eb      	b.n	c0153c0 <_printf_i+0x1dc>
 c0153e8:	2500      	movs	r5, #0
 c0153ea:	f104 0919 	add.w	r9, r4, #25
 c0153ee:	e7f5      	b.n	c0153dc <_printf_i+0x1f8>
 c0153f0:	2b00      	cmp	r3, #0
 c0153f2:	d1ac      	bne.n	c01534e <_printf_i+0x16a>
 c0153f4:	7803      	ldrb	r3, [r0, #0]
 c0153f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 c0153fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 c0153fe:	e76c      	b.n	c0152da <_printf_i+0xf6>
 c015400:	0c01708a 	.word	0x0c01708a
 c015404:	0c01709b 	.word	0x0c01709b

0c015408 <iprintf>:
 c015408:	b40f      	push	{r0, r1, r2, r3}
 c01540a:	4b0a      	ldr	r3, [pc, #40]	; (c015434 <iprintf+0x2c>)
 c01540c:	b513      	push	{r0, r1, r4, lr}
 c01540e:	681c      	ldr	r4, [r3, #0]
 c015410:	b124      	cbz	r4, c01541c <iprintf+0x14>
 c015412:	69a3      	ldr	r3, [r4, #24]
 c015414:	b913      	cbnz	r3, c01541c <iprintf+0x14>
 c015416:	4620      	mov	r0, r4
 c015418:	f000 fec8 	bl	c0161ac <__sinit>
 c01541c:	ab05      	add	r3, sp, #20
 c01541e:	9a04      	ldr	r2, [sp, #16]
 c015420:	68a1      	ldr	r1, [r4, #8]
 c015422:	4620      	mov	r0, r4
 c015424:	9301      	str	r3, [sp, #4]
 c015426:	f001 fa71 	bl	c01690c <_vfiprintf_r>
 c01542a:	b002      	add	sp, #8
 c01542c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c015430:	b004      	add	sp, #16
 c015432:	4770      	bx	lr
 c015434:	30035b5c 	.word	0x30035b5c

0c015438 <_sbrk_r>:
 c015438:	b538      	push	{r3, r4, r5, lr}
 c01543a:	2300      	movs	r3, #0
 c01543c:	4c05      	ldr	r4, [pc, #20]	; (c015454 <_sbrk_r+0x1c>)
 c01543e:	4605      	mov	r5, r0
 c015440:	4608      	mov	r0, r1
 c015442:	6023      	str	r3, [r4, #0]
 c015444:	f01d fbe6 	bl	c032c14 <_sbrk>
 c015448:	1c43      	adds	r3, r0, #1
 c01544a:	d102      	bne.n	c015452 <_sbrk_r+0x1a>
 c01544c:	6823      	ldr	r3, [r4, #0]
 c01544e:	b103      	cbz	r3, c015452 <_sbrk_r+0x1a>
 c015450:	602b      	str	r3, [r5, #0]
 c015452:	bd38      	pop	{r3, r4, r5, pc}
 c015454:	3003f2b0 	.word	0x3003f2b0

0c015458 <strlen>:
 c015458:	4603      	mov	r3, r0
 c01545a:	f813 2b01 	ldrb.w	r2, [r3], #1
 c01545e:	2a00      	cmp	r2, #0
 c015460:	d1fb      	bne.n	c01545a <strlen+0x2>
 c015462:	1a18      	subs	r0, r3, r0
 c015464:	3801      	subs	r0, #1
 c015466:	4770      	bx	lr

0c015468 <strstr>:
 c015468:	b5f0      	push	{r4, r5, r6, r7, lr}
 c01546a:	7803      	ldrb	r3, [r0, #0]
 c01546c:	b17b      	cbz	r3, c01548e <strstr+0x26>
 c01546e:	4604      	mov	r4, r0
 c015470:	7823      	ldrb	r3, [r4, #0]
 c015472:	4620      	mov	r0, r4
 c015474:	1c66      	adds	r6, r4, #1
 c015476:	b17b      	cbz	r3, c015498 <strstr+0x30>
 c015478:	1e4a      	subs	r2, r1, #1
 c01547a:	1e63      	subs	r3, r4, #1
 c01547c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 c015480:	b14d      	cbz	r5, c015496 <strstr+0x2e>
 c015482:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 c015486:	4634      	mov	r4, r6
 c015488:	42af      	cmp	r7, r5
 c01548a:	d0f7      	beq.n	c01547c <strstr+0x14>
 c01548c:	e7f0      	b.n	c015470 <strstr+0x8>
 c01548e:	780b      	ldrb	r3, [r1, #0]
 c015490:	2b00      	cmp	r3, #0
 c015492:	bf18      	it	ne
 c015494:	2000      	movne	r0, #0
 c015496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 c015498:	4618      	mov	r0, r3
 c01549a:	e7fc      	b.n	c015496 <strstr+0x2e>

0c01549c <quorem>:
 c01549c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0154a0:	6903      	ldr	r3, [r0, #16]
 c0154a2:	4680      	mov	r8, r0
 c0154a4:	690c      	ldr	r4, [r1, #16]
 c0154a6:	42a3      	cmp	r3, r4
 c0154a8:	f2c0 8086 	blt.w	c0155b8 <quorem+0x11c>
 c0154ac:	3c01      	subs	r4, #1
 c0154ae:	f101 0714 	add.w	r7, r1, #20
 c0154b2:	f100 0614 	add.w	r6, r0, #20
 c0154b6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 c0154ba:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 c0154be:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 c0154c2:	3501      	adds	r5, #1
 c0154c4:	eb06 030c 	add.w	r3, r6, ip
 c0154c8:	eb07 090c 	add.w	r9, r7, ip
 c0154cc:	9301      	str	r3, [sp, #4]
 c0154ce:	fbb0 f5f5 	udiv	r5, r0, r5
 c0154d2:	b3a5      	cbz	r5, c01553e <quorem+0xa2>
 c0154d4:	f04f 0a00 	mov.w	sl, #0
 c0154d8:	4638      	mov	r0, r7
 c0154da:	46b6      	mov	lr, r6
 c0154dc:	46d3      	mov	fp, sl
 c0154de:	f850 2b04 	ldr.w	r2, [r0], #4
 c0154e2:	b293      	uxth	r3, r2
 c0154e4:	4581      	cmp	r9, r0
 c0154e6:	ea4f 4212 	mov.w	r2, r2, lsr #16
 c0154ea:	fb05 a303 	mla	r3, r5, r3, sl
 c0154ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 c0154f2:	b29b      	uxth	r3, r3
 c0154f4:	fb05 a202 	mla	r2, r5, r2, sl
 c0154f8:	ebab 0303 	sub.w	r3, fp, r3
 c0154fc:	f8de b000 	ldr.w	fp, [lr]
 c015500:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 c015504:	fa1f fb8b 	uxth.w	fp, fp
 c015508:	445b      	add	r3, fp
 c01550a:	fa1f fb82 	uxth.w	fp, r2
 c01550e:	f8de 2000 	ldr.w	r2, [lr]
 c015512:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 c015516:	eb02 4223 	add.w	r2, r2, r3, asr #16
 c01551a:	b29b      	uxth	r3, r3
 c01551c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 c015520:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 c015524:	f84e 3b04 	str.w	r3, [lr], #4
 c015528:	d2d9      	bcs.n	c0154de <quorem+0x42>
 c01552a:	f856 300c 	ldr.w	r3, [r6, ip]
 c01552e:	b933      	cbnz	r3, c01553e <quorem+0xa2>
 c015530:	9b01      	ldr	r3, [sp, #4]
 c015532:	3b04      	subs	r3, #4
 c015534:	429e      	cmp	r6, r3
 c015536:	461a      	mov	r2, r3
 c015538:	d332      	bcc.n	c0155a0 <quorem+0x104>
 c01553a:	f8c8 4010 	str.w	r4, [r8, #16]
 c01553e:	4640      	mov	r0, r8
 c015540:	f001 f8f2 	bl	c016728 <__mcmp>
 c015544:	2800      	cmp	r0, #0
 c015546:	db27      	blt.n	c015598 <quorem+0xfc>
 c015548:	3501      	adds	r5, #1
 c01554a:	4630      	mov	r0, r6
 c01554c:	f04f 0c00 	mov.w	ip, #0
 c015550:	f857 1b04 	ldr.w	r1, [r7], #4
 c015554:	f8d0 e000 	ldr.w	lr, [r0]
 c015558:	b28b      	uxth	r3, r1
 c01555a:	45b9      	cmp	r9, r7
 c01555c:	fa1f f28e 	uxth.w	r2, lr
 c015560:	ebac 0303 	sub.w	r3, ip, r3
 c015564:	4413      	add	r3, r2
 c015566:	ea4f 4211 	mov.w	r2, r1, lsr #16
 c01556a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 c01556e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 c015572:	b29b      	uxth	r3, r3
 c015574:	ea4f 4c22 	mov.w	ip, r2, asr #16
 c015578:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 c01557c:	f840 3b04 	str.w	r3, [r0], #4
 c015580:	d2e6      	bcs.n	c015550 <quorem+0xb4>
 c015582:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 c015586:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 c01558a:	b92a      	cbnz	r2, c015598 <quorem+0xfc>
 c01558c:	3b04      	subs	r3, #4
 c01558e:	429e      	cmp	r6, r3
 c015590:	461a      	mov	r2, r3
 c015592:	d30b      	bcc.n	c0155ac <quorem+0x110>
 c015594:	f8c8 4010 	str.w	r4, [r8, #16]
 c015598:	4628      	mov	r0, r5
 c01559a:	b003      	add	sp, #12
 c01559c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c0155a0:	6812      	ldr	r2, [r2, #0]
 c0155a2:	3b04      	subs	r3, #4
 c0155a4:	2a00      	cmp	r2, #0
 c0155a6:	d1c8      	bne.n	c01553a <quorem+0x9e>
 c0155a8:	3c01      	subs	r4, #1
 c0155aa:	e7c3      	b.n	c015534 <quorem+0x98>
 c0155ac:	6812      	ldr	r2, [r2, #0]
 c0155ae:	3b04      	subs	r3, #4
 c0155b0:	2a00      	cmp	r2, #0
 c0155b2:	d1ef      	bne.n	c015594 <quorem+0xf8>
 c0155b4:	3c01      	subs	r4, #1
 c0155b6:	e7ea      	b.n	c01558e <quorem+0xf2>
 c0155b8:	2000      	movs	r0, #0
 c0155ba:	e7ee      	b.n	c01559a <quorem+0xfe>
 c0155bc:	0000      	movs	r0, r0
	...

0c0155c0 <_dtoa_r>:
 c0155c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0155c4:	4616      	mov	r6, r2
 c0155c6:	b097      	sub	sp, #92	; 0x5c
 c0155c8:	461f      	mov	r7, r3
 c0155ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 c0155cc:	4604      	mov	r4, r0
 c0155ce:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 c0155d2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 c0155d6:	b93d      	cbnz	r5, c0155e8 <_dtoa_r+0x28>
 c0155d8:	2010      	movs	r0, #16
 c0155da:	f7ff f9b1 	bl	c014940 <malloc>
 c0155de:	6260      	str	r0, [r4, #36]	; 0x24
 c0155e0:	6005      	str	r5, [r0, #0]
 c0155e2:	60c5      	str	r5, [r0, #12]
 c0155e4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 c0155e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c0155ea:	6819      	ldr	r1, [r3, #0]
 c0155ec:	b151      	cbz	r1, c015604 <_dtoa_r+0x44>
 c0155ee:	685a      	ldr	r2, [r3, #4]
 c0155f0:	2301      	movs	r3, #1
 c0155f2:	4620      	mov	r0, r4
 c0155f4:	4093      	lsls	r3, r2
 c0155f6:	604a      	str	r2, [r1, #4]
 c0155f8:	608b      	str	r3, [r1, #8]
 c0155fa:	f000 feb3 	bl	c016364 <_Bfree>
 c0155fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c015600:	2200      	movs	r2, #0
 c015602:	601a      	str	r2, [r3, #0]
 c015604:	1e3b      	subs	r3, r7, #0
 c015606:	bfb7      	itett	lt
 c015608:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 c01560c:	2300      	movge	r3, #0
 c01560e:	2201      	movlt	r2, #1
 c015610:	9303      	strlt	r3, [sp, #12]
 c015612:	bfac      	ite	ge
 c015614:	f8c8 3000 	strge.w	r3, [r8]
 c015618:	f8c8 2000 	strlt.w	r2, [r8]
 c01561c:	4bb0      	ldr	r3, [pc, #704]	; (c0158e0 <_dtoa_r+0x320>)
 c01561e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 c015622:	ea33 0308 	bics.w	r3, r3, r8
 c015626:	d11b      	bne.n	c015660 <_dtoa_r+0xa0>
 c015628:	f242 730f 	movw	r3, #9999	; 0x270f
 c01562c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 c01562e:	6013      	str	r3, [r2, #0]
 c015630:	9b02      	ldr	r3, [sp, #8]
 c015632:	b923      	cbnz	r3, c01563e <_dtoa_r+0x7e>
 c015634:	f3c8 0013 	ubfx	r0, r8, #0, #20
 c015638:	2800      	cmp	r0, #0
 c01563a:	f000 8547 	beq.w	c0160cc <_dtoa_r+0xb0c>
 c01563e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 c015640:	b953      	cbnz	r3, c015658 <_dtoa_r+0x98>
 c015642:	4ba8      	ldr	r3, [pc, #672]	; (c0158e4 <_dtoa_r+0x324>)
 c015644:	e021      	b.n	c01568a <_dtoa_r+0xca>
 c015646:	4ba8      	ldr	r3, [pc, #672]	; (c0158e8 <_dtoa_r+0x328>)
 c015648:	9305      	str	r3, [sp, #20]
 c01564a:	3308      	adds	r3, #8
 c01564c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 c01564e:	6013      	str	r3, [r2, #0]
 c015650:	9805      	ldr	r0, [sp, #20]
 c015652:	b017      	add	sp, #92	; 0x5c
 c015654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c015658:	4ba2      	ldr	r3, [pc, #648]	; (c0158e4 <_dtoa_r+0x324>)
 c01565a:	9305      	str	r3, [sp, #20]
 c01565c:	3303      	adds	r3, #3
 c01565e:	e7f5      	b.n	c01564c <_dtoa_r+0x8c>
 c015660:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 c015664:	2200      	movs	r2, #0
 c015666:	2300      	movs	r3, #0
 c015668:	4630      	mov	r0, r6
 c01566a:	4639      	mov	r1, r7
 c01566c:	f003 fe6c 	bl	c019348 <__aeabi_dcmpeq>
 c015670:	4682      	mov	sl, r0
 c015672:	b160      	cbz	r0, c01568e <_dtoa_r+0xce>
 c015674:	2301      	movs	r3, #1
 c015676:	9a22      	ldr	r2, [sp, #136]	; 0x88
 c015678:	6013      	str	r3, [r2, #0]
 c01567a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 c01567c:	2b00      	cmp	r3, #0
 c01567e:	f000 8522 	beq.w	c0160c6 <_dtoa_r+0xb06>
 c015682:	4b9a      	ldr	r3, [pc, #616]	; (c0158ec <_dtoa_r+0x32c>)
 c015684:	9a24      	ldr	r2, [sp, #144]	; 0x90
 c015686:	6013      	str	r3, [r2, #0]
 c015688:	3b01      	subs	r3, #1
 c01568a:	9305      	str	r3, [sp, #20]
 c01568c:	e7e0      	b.n	c015650 <_dtoa_r+0x90>
 c01568e:	ab14      	add	r3, sp, #80	; 0x50
 c015690:	f3c8 550a 	ubfx	r5, r8, #20, #11
 c015694:	4632      	mov	r2, r6
 c015696:	4620      	mov	r0, r4
 c015698:	9301      	str	r3, [sp, #4]
 c01569a:	ab15      	add	r3, sp, #84	; 0x54
 c01569c:	9300      	str	r3, [sp, #0]
 c01569e:	463b      	mov	r3, r7
 c0156a0:	f001 f8bc 	bl	c01681c <__d2b>
 c0156a4:	4683      	mov	fp, r0
 c0156a6:	2d00      	cmp	r5, #0
 c0156a8:	d07a      	beq.n	c0157a0 <_dtoa_r+0x1e0>
 c0156aa:	f3c7 0313 	ubfx	r3, r7, #0, #20
 c0156ae:	46b0      	mov	r8, r6
 c0156b0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 c0156b4:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 c0156b8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 c0156bc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 c0156c0:	2200      	movs	r2, #0
 c0156c2:	4b8b      	ldr	r3, [pc, #556]	; (c0158f0 <_dtoa_r+0x330>)
 c0156c4:	4640      	mov	r0, r8
 c0156c6:	4649      	mov	r1, r9
 c0156c8:	f003 fa1e 	bl	c018b08 <__aeabi_dsub>
 c0156cc:	a37e      	add	r3, pc, #504	; (adr r3, c0158c8 <_dtoa_r+0x308>)
 c0156ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0156d2:	f003 fbd1 	bl	c018e78 <__aeabi_dmul>
 c0156d6:	a37e      	add	r3, pc, #504	; (adr r3, c0158d0 <_dtoa_r+0x310>)
 c0156d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0156dc:	f003 fa16 	bl	c018b0c <__adddf3>
 c0156e0:	4606      	mov	r6, r0
 c0156e2:	460f      	mov	r7, r1
 c0156e4:	4628      	mov	r0, r5
 c0156e6:	f003 fb5d 	bl	c018da4 <__aeabi_i2d>
 c0156ea:	a37b      	add	r3, pc, #492	; (adr r3, c0158d8 <_dtoa_r+0x318>)
 c0156ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0156f0:	f003 fbc2 	bl	c018e78 <__aeabi_dmul>
 c0156f4:	4602      	mov	r2, r0
 c0156f6:	460b      	mov	r3, r1
 c0156f8:	4630      	mov	r0, r6
 c0156fa:	4639      	mov	r1, r7
 c0156fc:	f003 fa06 	bl	c018b0c <__adddf3>
 c015700:	4606      	mov	r6, r0
 c015702:	460f      	mov	r7, r1
 c015704:	f003 fe68 	bl	c0193d8 <__aeabi_d2iz>
 c015708:	2200      	movs	r2, #0
 c01570a:	4682      	mov	sl, r0
 c01570c:	2300      	movs	r3, #0
 c01570e:	4630      	mov	r0, r6
 c015710:	4639      	mov	r1, r7
 c015712:	f003 fe23 	bl	c01935c <__aeabi_dcmplt>
 c015716:	b148      	cbz	r0, c01572c <_dtoa_r+0x16c>
 c015718:	4650      	mov	r0, sl
 c01571a:	f003 fb43 	bl	c018da4 <__aeabi_i2d>
 c01571e:	4632      	mov	r2, r6
 c015720:	463b      	mov	r3, r7
 c015722:	f003 fe11 	bl	c019348 <__aeabi_dcmpeq>
 c015726:	b908      	cbnz	r0, c01572c <_dtoa_r+0x16c>
 c015728:	f10a 3aff 	add.w	sl, sl, #4294967295
 c01572c:	f1ba 0f16 	cmp.w	sl, #22
 c015730:	d857      	bhi.n	c0157e2 <_dtoa_r+0x222>
 c015732:	4970      	ldr	r1, [pc, #448]	; (c0158f4 <_dtoa_r+0x334>)
 c015734:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 c015738:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c01573c:	e9d1 0100 	ldrd	r0, r1, [r1]
 c015740:	f003 fe2a 	bl	c019398 <__aeabi_dcmpgt>
 c015744:	2800      	cmp	r0, #0
 c015746:	d04e      	beq.n	c0157e6 <_dtoa_r+0x226>
 c015748:	f10a 3aff 	add.w	sl, sl, #4294967295
 c01574c:	2300      	movs	r3, #0
 c01574e:	9312      	str	r3, [sp, #72]	; 0x48
 c015750:	9b14      	ldr	r3, [sp, #80]	; 0x50
 c015752:	1b5d      	subs	r5, r3, r5
 c015754:	f1b5 0801 	subs.w	r8, r5, #1
 c015758:	bf49      	itett	mi
 c01575a:	f1c5 0301 	rsbmi	r3, r5, #1
 c01575e:	2300      	movpl	r3, #0
 c015760:	f04f 0800 	movmi.w	r8, #0
 c015764:	9308      	strmi	r3, [sp, #32]
 c015766:	bf58      	it	pl
 c015768:	9308      	strpl	r3, [sp, #32]
 c01576a:	f1ba 0f00 	cmp.w	sl, #0
 c01576e:	db3c      	blt.n	c0157ea <_dtoa_r+0x22a>
 c015770:	2300      	movs	r3, #0
 c015772:	44d0      	add	r8, sl
 c015774:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 c015778:	9309      	str	r3, [sp, #36]	; 0x24
 c01577a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 c01577c:	2b09      	cmp	r3, #9
 c01577e:	f200 808e 	bhi.w	c01589e <_dtoa_r+0x2de>
 c015782:	2b05      	cmp	r3, #5
 c015784:	bfc5      	ittet	gt
 c015786:	3b04      	subgt	r3, #4
 c015788:	2500      	movgt	r5, #0
 c01578a:	2501      	movle	r5, #1
 c01578c:	9320      	strgt	r3, [sp, #128]	; 0x80
 c01578e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 c015790:	3b02      	subs	r3, #2
 c015792:	2b03      	cmp	r3, #3
 c015794:	f200 808f 	bhi.w	c0158b6 <_dtoa_r+0x2f6>
 c015798:	e8df f003 	tbb	[pc, r3]
 c01579c:	71317f7d 	.word	0x71317f7d
 c0157a0:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 c0157a4:	441d      	add	r5, r3
 c0157a6:	f205 4032 	addw	r0, r5, #1074	; 0x432
 c0157aa:	2820      	cmp	r0, #32
 c0157ac:	dd13      	ble.n	c0157d6 <_dtoa_r+0x216>
 c0157ae:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 c0157b2:	9b02      	ldr	r3, [sp, #8]
 c0157b4:	fa08 f800 	lsl.w	r8, r8, r0
 c0157b8:	f205 4012 	addw	r0, r5, #1042	; 0x412
 c0157bc:	fa23 f000 	lsr.w	r0, r3, r0
 c0157c0:	ea48 0000 	orr.w	r0, r8, r0
 c0157c4:	f003 fade 	bl	c018d84 <__aeabi_ui2d>
 c0157c8:	2301      	movs	r3, #1
 c0157ca:	4680      	mov	r8, r0
 c0157cc:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 c0157d0:	3d01      	subs	r5, #1
 c0157d2:	9313      	str	r3, [sp, #76]	; 0x4c
 c0157d4:	e774      	b.n	c0156c0 <_dtoa_r+0x100>
 c0157d6:	f1c0 0020 	rsb	r0, r0, #32
 c0157da:	9b02      	ldr	r3, [sp, #8]
 c0157dc:	fa03 f000 	lsl.w	r0, r3, r0
 c0157e0:	e7f0      	b.n	c0157c4 <_dtoa_r+0x204>
 c0157e2:	2301      	movs	r3, #1
 c0157e4:	e7b3      	b.n	c01574e <_dtoa_r+0x18e>
 c0157e6:	9012      	str	r0, [sp, #72]	; 0x48
 c0157e8:	e7b2      	b.n	c015750 <_dtoa_r+0x190>
 c0157ea:	9b08      	ldr	r3, [sp, #32]
 c0157ec:	eba3 030a 	sub.w	r3, r3, sl
 c0157f0:	9308      	str	r3, [sp, #32]
 c0157f2:	f1ca 0300 	rsb	r3, sl, #0
 c0157f6:	9309      	str	r3, [sp, #36]	; 0x24
 c0157f8:	2300      	movs	r3, #0
 c0157fa:	930d      	str	r3, [sp, #52]	; 0x34
 c0157fc:	e7bd      	b.n	c01577a <_dtoa_r+0x1ba>
 c0157fe:	2301      	movs	r3, #1
 c015800:	930c      	str	r3, [sp, #48]	; 0x30
 c015802:	9b21      	ldr	r3, [sp, #132]	; 0x84
 c015804:	2b00      	cmp	r3, #0
 c015806:	dd59      	ble.n	c0158bc <_dtoa_r+0x2fc>
 c015808:	4699      	mov	r9, r3
 c01580a:	9306      	str	r3, [sp, #24]
 c01580c:	2200      	movs	r2, #0
 c01580e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 c015810:	6072      	str	r2, [r6, #4]
 c015812:	2204      	movs	r2, #4
 c015814:	f102 0014 	add.w	r0, r2, #20
 c015818:	6871      	ldr	r1, [r6, #4]
 c01581a:	4298      	cmp	r0, r3
 c01581c:	d96e      	bls.n	c0158fc <_dtoa_r+0x33c>
 c01581e:	4620      	mov	r0, r4
 c015820:	f000 fd6c 	bl	c0162fc <_Balloc>
 c015824:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c015826:	6030      	str	r0, [r6, #0]
 c015828:	f1b9 0f0e 	cmp.w	r9, #14
 c01582c:	681b      	ldr	r3, [r3, #0]
 c01582e:	9305      	str	r3, [sp, #20]
 c015830:	f200 80e9 	bhi.w	c015a06 <_dtoa_r+0x446>
 c015834:	2d00      	cmp	r5, #0
 c015836:	f000 80e6 	beq.w	c015a06 <_dtoa_r+0x446>
 c01583a:	f1ba 0f00 	cmp.w	sl, #0
 c01583e:	ed9d 7b02 	vldr	d7, [sp, #8]
 c015842:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 c015846:	dd77      	ble.n	c015938 <_dtoa_r+0x378>
 c015848:	f00a 030f 	and.w	r3, sl, #15
 c01584c:	4a29      	ldr	r2, [pc, #164]	; (c0158f4 <_dtoa_r+0x334>)
 c01584e:	ea4f 162a 	mov.w	r6, sl, asr #4
 c015852:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 c015856:	06f0      	lsls	r0, r6, #27
 c015858:	ed93 7b00 	vldr	d7, [r3]
 c01585c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 c015860:	d568      	bpl.n	c015934 <_dtoa_r+0x374>
 c015862:	4b25      	ldr	r3, [pc, #148]	; (c0158f8 <_dtoa_r+0x338>)
 c015864:	f006 060f 	and.w	r6, r6, #15
 c015868:	2503      	movs	r5, #3
 c01586a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 c01586e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 c015872:	f003 fc2b 	bl	c0190cc <__aeabi_ddiv>
 c015876:	e9cd 0102 	strd	r0, r1, [sp, #8]
 c01587a:	4f1f      	ldr	r7, [pc, #124]	; (c0158f8 <_dtoa_r+0x338>)
 c01587c:	e04f      	b.n	c01591e <_dtoa_r+0x35e>
 c01587e:	2301      	movs	r3, #1
 c015880:	930c      	str	r3, [sp, #48]	; 0x30
 c015882:	9b21      	ldr	r3, [sp, #132]	; 0x84
 c015884:	4453      	add	r3, sl
 c015886:	f103 0901 	add.w	r9, r3, #1
 c01588a:	9306      	str	r3, [sp, #24]
 c01588c:	464b      	mov	r3, r9
 c01588e:	2b01      	cmp	r3, #1
 c015890:	bfb8      	it	lt
 c015892:	2301      	movlt	r3, #1
 c015894:	e7ba      	b.n	c01580c <_dtoa_r+0x24c>
 c015896:	2300      	movs	r3, #0
 c015898:	e7b2      	b.n	c015800 <_dtoa_r+0x240>
 c01589a:	2300      	movs	r3, #0
 c01589c:	e7f0      	b.n	c015880 <_dtoa_r+0x2c0>
 c01589e:	2501      	movs	r5, #1
 c0158a0:	2300      	movs	r3, #0
 c0158a2:	950c      	str	r5, [sp, #48]	; 0x30
 c0158a4:	9320      	str	r3, [sp, #128]	; 0x80
 c0158a6:	f04f 33ff 	mov.w	r3, #4294967295
 c0158aa:	2200      	movs	r2, #0
 c0158ac:	9306      	str	r3, [sp, #24]
 c0158ae:	4699      	mov	r9, r3
 c0158b0:	2312      	movs	r3, #18
 c0158b2:	9221      	str	r2, [sp, #132]	; 0x84
 c0158b4:	e7aa      	b.n	c01580c <_dtoa_r+0x24c>
 c0158b6:	2301      	movs	r3, #1
 c0158b8:	930c      	str	r3, [sp, #48]	; 0x30
 c0158ba:	e7f4      	b.n	c0158a6 <_dtoa_r+0x2e6>
 c0158bc:	2301      	movs	r3, #1
 c0158be:	9306      	str	r3, [sp, #24]
 c0158c0:	4699      	mov	r9, r3
 c0158c2:	461a      	mov	r2, r3
 c0158c4:	e7f5      	b.n	c0158b2 <_dtoa_r+0x2f2>
 c0158c6:	bf00      	nop
 c0158c8:	636f4361 	.word	0x636f4361
 c0158cc:	3fd287a7 	.word	0x3fd287a7
 c0158d0:	8b60c8b3 	.word	0x8b60c8b3
 c0158d4:	3fc68a28 	.word	0x3fc68a28
 c0158d8:	509f79fb 	.word	0x509f79fb
 c0158dc:	3fd34413 	.word	0x3fd34413
 c0158e0:	7ff00000 	.word	0x7ff00000
 c0158e4:	0c0170b5 	.word	0x0c0170b5
 c0158e8:	0c0170ac 	.word	0x0c0170ac
 c0158ec:	0c017089 	.word	0x0c017089
 c0158f0:	3ff80000 	.word	0x3ff80000
 c0158f4:	0c017148 	.word	0x0c017148
 c0158f8:	0c017120 	.word	0x0c017120
 c0158fc:	3101      	adds	r1, #1
 c0158fe:	0052      	lsls	r2, r2, #1
 c015900:	6071      	str	r1, [r6, #4]
 c015902:	e787      	b.n	c015814 <_dtoa_r+0x254>
 c015904:	07f1      	lsls	r1, r6, #31
 c015906:	d508      	bpl.n	c01591a <_dtoa_r+0x35a>
 c015908:	3501      	adds	r5, #1
 c01590a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 c01590e:	e9d7 2300 	ldrd	r2, r3, [r7]
 c015912:	f003 fab1 	bl	c018e78 <__aeabi_dmul>
 c015916:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 c01591a:	1076      	asrs	r6, r6, #1
 c01591c:	3708      	adds	r7, #8
 c01591e:	2e00      	cmp	r6, #0
 c015920:	d1f0      	bne.n	c015904 <_dtoa_r+0x344>
 c015922:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 c015926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c01592a:	f003 fbcf 	bl	c0190cc <__aeabi_ddiv>
 c01592e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 c015932:	e01a      	b.n	c01596a <_dtoa_r+0x3aa>
 c015934:	2502      	movs	r5, #2
 c015936:	e7a0      	b.n	c01587a <_dtoa_r+0x2ba>
 c015938:	f000 80a0 	beq.w	c015a7c <_dtoa_r+0x4bc>
 c01593c:	f1ca 0600 	rsb	r6, sl, #0
 c015940:	4b9f      	ldr	r3, [pc, #636]	; (c015bc0 <_dtoa_r+0x600>)
 c015942:	4fa0      	ldr	r7, [pc, #640]	; (c015bc4 <_dtoa_r+0x604>)
 c015944:	2502      	movs	r5, #2
 c015946:	f006 020f 	and.w	r2, r6, #15
 c01594a:	1136      	asrs	r6, r6, #4
 c01594c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 c015950:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 c015954:	e9d3 2300 	ldrd	r2, r3, [r3]
 c015958:	f003 fa8e 	bl	c018e78 <__aeabi_dmul>
 c01595c:	2300      	movs	r3, #0
 c01595e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 c015962:	2e00      	cmp	r6, #0
 c015964:	d17f      	bne.n	c015a66 <_dtoa_r+0x4a6>
 c015966:	2b00      	cmp	r3, #0
 c015968:	d1e1      	bne.n	c01592e <_dtoa_r+0x36e>
 c01596a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 c01596c:	2b00      	cmp	r3, #0
 c01596e:	f000 8087 	beq.w	c015a80 <_dtoa_r+0x4c0>
 c015972:	2200      	movs	r2, #0
 c015974:	4b94      	ldr	r3, [pc, #592]	; (c015bc8 <_dtoa_r+0x608>)
 c015976:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 c01597a:	4630      	mov	r0, r6
 c01597c:	4639      	mov	r1, r7
 c01597e:	f003 fced 	bl	c01935c <__aeabi_dcmplt>
 c015982:	2800      	cmp	r0, #0
 c015984:	d07c      	beq.n	c015a80 <_dtoa_r+0x4c0>
 c015986:	f1b9 0f00 	cmp.w	r9, #0
 c01598a:	d079      	beq.n	c015a80 <_dtoa_r+0x4c0>
 c01598c:	9b06      	ldr	r3, [sp, #24]
 c01598e:	2b00      	cmp	r3, #0
 c015990:	dd35      	ble.n	c0159fe <_dtoa_r+0x43e>
 c015992:	f10a 33ff 	add.w	r3, sl, #4294967295
 c015996:	4639      	mov	r1, r7
 c015998:	2200      	movs	r2, #0
 c01599a:	4630      	mov	r0, r6
 c01599c:	930a      	str	r3, [sp, #40]	; 0x28
 c01599e:	3501      	adds	r5, #1
 c0159a0:	4b8a      	ldr	r3, [pc, #552]	; (c015bcc <_dtoa_r+0x60c>)
 c0159a2:	f003 fa69 	bl	c018e78 <__aeabi_dmul>
 c0159a6:	9f06      	ldr	r7, [sp, #24]
 c0159a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 c0159ac:	4628      	mov	r0, r5
 c0159ae:	f003 f9f9 	bl	c018da4 <__aeabi_i2d>
 c0159b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c0159b6:	f003 fa5f 	bl	c018e78 <__aeabi_dmul>
 c0159ba:	2200      	movs	r2, #0
 c0159bc:	4b84      	ldr	r3, [pc, #528]	; (c015bd0 <_dtoa_r+0x610>)
 c0159be:	f003 f8a5 	bl	c018b0c <__adddf3>
 c0159c2:	4605      	mov	r5, r0
 c0159c4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 c0159c8:	2f00      	cmp	r7, #0
 c0159ca:	d15d      	bne.n	c015a88 <_dtoa_r+0x4c8>
 c0159cc:	2200      	movs	r2, #0
 c0159ce:	4b81      	ldr	r3, [pc, #516]	; (c015bd4 <_dtoa_r+0x614>)
 c0159d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c0159d4:	f003 f898 	bl	c018b08 <__aeabi_dsub>
 c0159d8:	462a      	mov	r2, r5
 c0159da:	4633      	mov	r3, r6
 c0159dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 c0159e0:	f003 fcda 	bl	c019398 <__aeabi_dcmpgt>
 c0159e4:	2800      	cmp	r0, #0
 c0159e6:	f040 8287 	bne.w	c015ef8 <_dtoa_r+0x938>
 c0159ea:	462a      	mov	r2, r5
 c0159ec:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 c0159f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c0159f4:	f003 fcb2 	bl	c01935c <__aeabi_dcmplt>
 c0159f8:	2800      	cmp	r0, #0
 c0159fa:	f040 827b 	bne.w	c015ef4 <_dtoa_r+0x934>
 c0159fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 c015a02:	e9cd 2302 	strd	r2, r3, [sp, #8]
 c015a06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 c015a08:	2b00      	cmp	r3, #0
 c015a0a:	f2c0 814f 	blt.w	c015cac <_dtoa_r+0x6ec>
 c015a0e:	f1ba 0f0e 	cmp.w	sl, #14
 c015a12:	f300 814b 	bgt.w	c015cac <_dtoa_r+0x6ec>
 c015a16:	4b6a      	ldr	r3, [pc, #424]	; (c015bc0 <_dtoa_r+0x600>)
 c015a18:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 c015a1c:	ed93 7b00 	vldr	d7, [r3]
 c015a20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 c015a22:	2b00      	cmp	r3, #0
 c015a24:	ed8d 7b06 	vstr	d7, [sp, #24]
 c015a28:	f280 80d8 	bge.w	c015bdc <_dtoa_r+0x61c>
 c015a2c:	f1b9 0f00 	cmp.w	r9, #0
 c015a30:	f300 80d4 	bgt.w	c015bdc <_dtoa_r+0x61c>
 c015a34:	f040 825d 	bne.w	c015ef2 <_dtoa_r+0x932>
 c015a38:	2200      	movs	r2, #0
 c015a3a:	4b66      	ldr	r3, [pc, #408]	; (c015bd4 <_dtoa_r+0x614>)
 c015a3c:	464f      	mov	r7, r9
 c015a3e:	464e      	mov	r6, r9
 c015a40:	ec51 0b17 	vmov	r0, r1, d7
 c015a44:	f003 fa18 	bl	c018e78 <__aeabi_dmul>
 c015a48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c015a4c:	f003 fc9a 	bl	c019384 <__aeabi_dcmpge>
 c015a50:	2800      	cmp	r0, #0
 c015a52:	f040 8233 	bne.w	c015ebc <_dtoa_r+0x8fc>
 c015a56:	9b05      	ldr	r3, [sp, #20]
 c015a58:	f10a 0a01 	add.w	sl, sl, #1
 c015a5c:	9a05      	ldr	r2, [sp, #20]
 c015a5e:	1c5d      	adds	r5, r3, #1
 c015a60:	2331      	movs	r3, #49	; 0x31
 c015a62:	7013      	strb	r3, [r2, #0]
 c015a64:	e22e      	b.n	c015ec4 <_dtoa_r+0x904>
 c015a66:	07f2      	lsls	r2, r6, #31
 c015a68:	d505      	bpl.n	c015a76 <_dtoa_r+0x4b6>
 c015a6a:	3501      	adds	r5, #1
 c015a6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 c015a70:	f003 fa02 	bl	c018e78 <__aeabi_dmul>
 c015a74:	2301      	movs	r3, #1
 c015a76:	1076      	asrs	r6, r6, #1
 c015a78:	3708      	adds	r7, #8
 c015a7a:	e772      	b.n	c015962 <_dtoa_r+0x3a2>
 c015a7c:	2502      	movs	r5, #2
 c015a7e:	e774      	b.n	c01596a <_dtoa_r+0x3aa>
 c015a80:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 c015a84:	464f      	mov	r7, r9
 c015a86:	e791      	b.n	c0159ac <_dtoa_r+0x3ec>
 c015a88:	4b4d      	ldr	r3, [pc, #308]	; (c015bc0 <_dtoa_r+0x600>)
 c015a8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 c015a8e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 c015a92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 c015a94:	2b00      	cmp	r3, #0
 c015a96:	d047      	beq.n	c015b28 <_dtoa_r+0x568>
 c015a98:	4602      	mov	r2, r0
 c015a9a:	460b      	mov	r3, r1
 c015a9c:	2000      	movs	r0, #0
 c015a9e:	494e      	ldr	r1, [pc, #312]	; (c015bd8 <_dtoa_r+0x618>)
 c015aa0:	f003 fb14 	bl	c0190cc <__aeabi_ddiv>
 c015aa4:	462a      	mov	r2, r5
 c015aa6:	4633      	mov	r3, r6
 c015aa8:	f003 f82e 	bl	c018b08 <__aeabi_dsub>
 c015aac:	9d05      	ldr	r5, [sp, #20]
 c015aae:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 c015ab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c015ab6:	f003 fc8f 	bl	c0193d8 <__aeabi_d2iz>
 c015aba:	4606      	mov	r6, r0
 c015abc:	f003 f972 	bl	c018da4 <__aeabi_i2d>
 c015ac0:	4602      	mov	r2, r0
 c015ac2:	3630      	adds	r6, #48	; 0x30
 c015ac4:	460b      	mov	r3, r1
 c015ac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c015aca:	f003 f81d 	bl	c018b08 <__aeabi_dsub>
 c015ace:	f805 6b01 	strb.w	r6, [r5], #1
 c015ad2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 c015ad6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 c015ada:	f003 fc3f 	bl	c01935c <__aeabi_dcmplt>
 c015ade:	2800      	cmp	r0, #0
 c015ae0:	d162      	bne.n	c015ba8 <_dtoa_r+0x5e8>
 c015ae2:	2000      	movs	r0, #0
 c015ae4:	4938      	ldr	r1, [pc, #224]	; (c015bc8 <_dtoa_r+0x608>)
 c015ae6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c015aea:	f003 f80d 	bl	c018b08 <__aeabi_dsub>
 c015aee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 c015af2:	f003 fc33 	bl	c01935c <__aeabi_dcmplt>
 c015af6:	2800      	cmp	r0, #0
 c015af8:	f040 80b7 	bne.w	c015c6a <_dtoa_r+0x6aa>
 c015afc:	9b05      	ldr	r3, [sp, #20]
 c015afe:	1aeb      	subs	r3, r5, r3
 c015b00:	429f      	cmp	r7, r3
 c015b02:	f77f af7c 	ble.w	c0159fe <_dtoa_r+0x43e>
 c015b06:	2200      	movs	r2, #0
 c015b08:	4b30      	ldr	r3, [pc, #192]	; (c015bcc <_dtoa_r+0x60c>)
 c015b0a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 c015b0e:	f003 f9b3 	bl	c018e78 <__aeabi_dmul>
 c015b12:	2200      	movs	r2, #0
 c015b14:	4b2d      	ldr	r3, [pc, #180]	; (c015bcc <_dtoa_r+0x60c>)
 c015b16:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 c015b1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c015b1e:	f003 f9ab 	bl	c018e78 <__aeabi_dmul>
 c015b22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 c015b26:	e7c4      	b.n	c015ab2 <_dtoa_r+0x4f2>
 c015b28:	4633      	mov	r3, r6
 c015b2a:	462a      	mov	r2, r5
 c015b2c:	f003 f9a4 	bl	c018e78 <__aeabi_dmul>
 c015b30:	9b05      	ldr	r3, [sp, #20]
 c015b32:	19dd      	adds	r5, r3, r7
 c015b34:	461e      	mov	r6, r3
 c015b36:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 c015b3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c015b3e:	f003 fc4b 	bl	c0193d8 <__aeabi_d2iz>
 c015b42:	4607      	mov	r7, r0
 c015b44:	f003 f92e 	bl	c018da4 <__aeabi_i2d>
 c015b48:	4602      	mov	r2, r0
 c015b4a:	3730      	adds	r7, #48	; 0x30
 c015b4c:	460b      	mov	r3, r1
 c015b4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c015b52:	f002 ffd9 	bl	c018b08 <__aeabi_dsub>
 c015b56:	f806 7b01 	strb.w	r7, [r6], #1
 c015b5a:	42ae      	cmp	r6, r5
 c015b5c:	f04f 0200 	mov.w	r2, #0
 c015b60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 c015b64:	d125      	bne.n	c015bb2 <_dtoa_r+0x5f2>
 c015b66:	4b1c      	ldr	r3, [pc, #112]	; (c015bd8 <_dtoa_r+0x618>)
 c015b68:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 c015b6c:	f002 ffce 	bl	c018b0c <__adddf3>
 c015b70:	4602      	mov	r2, r0
 c015b72:	460b      	mov	r3, r1
 c015b74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c015b78:	f003 fc0e 	bl	c019398 <__aeabi_dcmpgt>
 c015b7c:	2800      	cmp	r0, #0
 c015b7e:	d174      	bne.n	c015c6a <_dtoa_r+0x6aa>
 c015b80:	2000      	movs	r0, #0
 c015b82:	4915      	ldr	r1, [pc, #84]	; (c015bd8 <_dtoa_r+0x618>)
 c015b84:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 c015b88:	f002 ffbe 	bl	c018b08 <__aeabi_dsub>
 c015b8c:	4602      	mov	r2, r0
 c015b8e:	460b      	mov	r3, r1
 c015b90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c015b94:	f003 fbe2 	bl	c01935c <__aeabi_dcmplt>
 c015b98:	2800      	cmp	r0, #0
 c015b9a:	f43f af30 	beq.w	c0159fe <_dtoa_r+0x43e>
 c015b9e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 c015ba2:	1e6a      	subs	r2, r5, #1
 c015ba4:	2b30      	cmp	r3, #48	; 0x30
 c015ba6:	d002      	beq.n	c015bae <_dtoa_r+0x5ee>
 c015ba8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 c015bac:	e04b      	b.n	c015c46 <_dtoa_r+0x686>
 c015bae:	4615      	mov	r5, r2
 c015bb0:	e7f5      	b.n	c015b9e <_dtoa_r+0x5de>
 c015bb2:	4b06      	ldr	r3, [pc, #24]	; (c015bcc <_dtoa_r+0x60c>)
 c015bb4:	f003 f960 	bl	c018e78 <__aeabi_dmul>
 c015bb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 c015bbc:	e7bd      	b.n	c015b3a <_dtoa_r+0x57a>
 c015bbe:	bf00      	nop
 c015bc0:	0c017148 	.word	0x0c017148
 c015bc4:	0c017120 	.word	0x0c017120
 c015bc8:	3ff00000 	.word	0x3ff00000
 c015bcc:	40240000 	.word	0x40240000
 c015bd0:	401c0000 	.word	0x401c0000
 c015bd4:	40140000 	.word	0x40140000
 c015bd8:	3fe00000 	.word	0x3fe00000
 c015bdc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 c015be0:	9d05      	ldr	r5, [sp, #20]
 c015be2:	4630      	mov	r0, r6
 c015be4:	4639      	mov	r1, r7
 c015be6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 c015bea:	f003 fa6f 	bl	c0190cc <__aeabi_ddiv>
 c015bee:	f003 fbf3 	bl	c0193d8 <__aeabi_d2iz>
 c015bf2:	4680      	mov	r8, r0
 c015bf4:	f003 f8d6 	bl	c018da4 <__aeabi_i2d>
 c015bf8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 c015bfc:	f003 f93c 	bl	c018e78 <__aeabi_dmul>
 c015c00:	4602      	mov	r2, r0
 c015c02:	4630      	mov	r0, r6
 c015c04:	f108 0630 	add.w	r6, r8, #48	; 0x30
 c015c08:	460b      	mov	r3, r1
 c015c0a:	4639      	mov	r1, r7
 c015c0c:	f002 ff7c 	bl	c018b08 <__aeabi_dsub>
 c015c10:	f805 6b01 	strb.w	r6, [r5], #1
 c015c14:	9e05      	ldr	r6, [sp, #20]
 c015c16:	4602      	mov	r2, r0
 c015c18:	460b      	mov	r3, r1
 c015c1a:	1bae      	subs	r6, r5, r6
 c015c1c:	45b1      	cmp	r9, r6
 c015c1e:	d138      	bne.n	c015c92 <_dtoa_r+0x6d2>
 c015c20:	f002 ff74 	bl	c018b0c <__adddf3>
 c015c24:	4606      	mov	r6, r0
 c015c26:	460f      	mov	r7, r1
 c015c28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 c015c2c:	f003 fbb4 	bl	c019398 <__aeabi_dcmpgt>
 c015c30:	b9c8      	cbnz	r0, c015c66 <_dtoa_r+0x6a6>
 c015c32:	4630      	mov	r0, r6
 c015c34:	4639      	mov	r1, r7
 c015c36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 c015c3a:	f003 fb85 	bl	c019348 <__aeabi_dcmpeq>
 c015c3e:	b110      	cbz	r0, c015c46 <_dtoa_r+0x686>
 c015c40:	f018 0f01 	tst.w	r8, #1
 c015c44:	d10f      	bne.n	c015c66 <_dtoa_r+0x6a6>
 c015c46:	4659      	mov	r1, fp
 c015c48:	4620      	mov	r0, r4
 c015c4a:	f000 fb8b 	bl	c016364 <_Bfree>
 c015c4e:	2300      	movs	r3, #0
 c015c50:	9a22      	ldr	r2, [sp, #136]	; 0x88
 c015c52:	702b      	strb	r3, [r5, #0]
 c015c54:	f10a 0301 	add.w	r3, sl, #1
 c015c58:	6013      	str	r3, [r2, #0]
 c015c5a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 c015c5c:	2b00      	cmp	r3, #0
 c015c5e:	f43f acf7 	beq.w	c015650 <_dtoa_r+0x90>
 c015c62:	601d      	str	r5, [r3, #0]
 c015c64:	e4f4      	b.n	c015650 <_dtoa_r+0x90>
 c015c66:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 c015c6a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 c015c6e:	1e6b      	subs	r3, r5, #1
 c015c70:	2a39      	cmp	r2, #57	; 0x39
 c015c72:	d108      	bne.n	c015c86 <_dtoa_r+0x6c6>
 c015c74:	9a05      	ldr	r2, [sp, #20]
 c015c76:	429a      	cmp	r2, r3
 c015c78:	d109      	bne.n	c015c8e <_dtoa_r+0x6ce>
 c015c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c015c7c:	3301      	adds	r3, #1
 c015c7e:	930a      	str	r3, [sp, #40]	; 0x28
 c015c80:	2330      	movs	r3, #48	; 0x30
 c015c82:	7013      	strb	r3, [r2, #0]
 c015c84:	4613      	mov	r3, r2
 c015c86:	781a      	ldrb	r2, [r3, #0]
 c015c88:	3201      	adds	r2, #1
 c015c8a:	701a      	strb	r2, [r3, #0]
 c015c8c:	e78c      	b.n	c015ba8 <_dtoa_r+0x5e8>
 c015c8e:	461d      	mov	r5, r3
 c015c90:	e7eb      	b.n	c015c6a <_dtoa_r+0x6aa>
 c015c92:	2200      	movs	r2, #0
 c015c94:	4b9a      	ldr	r3, [pc, #616]	; (c015f00 <_dtoa_r+0x940>)
 c015c96:	f003 f8ef 	bl	c018e78 <__aeabi_dmul>
 c015c9a:	2200      	movs	r2, #0
 c015c9c:	2300      	movs	r3, #0
 c015c9e:	4606      	mov	r6, r0
 c015ca0:	460f      	mov	r7, r1
 c015ca2:	f003 fb51 	bl	c019348 <__aeabi_dcmpeq>
 c015ca6:	2800      	cmp	r0, #0
 c015ca8:	d09b      	beq.n	c015be2 <_dtoa_r+0x622>
 c015caa:	e7cc      	b.n	c015c46 <_dtoa_r+0x686>
 c015cac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 c015cae:	2a00      	cmp	r2, #0
 c015cb0:	f000 808b 	beq.w	c015dca <_dtoa_r+0x80a>
 c015cb4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 c015cb6:	2a01      	cmp	r2, #1
 c015cb8:	dc6e      	bgt.n	c015d98 <_dtoa_r+0x7d8>
 c015cba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 c015cbc:	2a00      	cmp	r2, #0
 c015cbe:	d067      	beq.n	c015d90 <_dtoa_r+0x7d0>
 c015cc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 c015cc4:	e9dd 5708 	ldrd	r5, r7, [sp, #32]
 c015cc8:	9a08      	ldr	r2, [sp, #32]
 c015cca:	2101      	movs	r1, #1
 c015ccc:	4620      	mov	r0, r4
 c015cce:	4498      	add	r8, r3
 c015cd0:	441a      	add	r2, r3
 c015cd2:	9208      	str	r2, [sp, #32]
 c015cd4:	f000 fbe8 	bl	c0164a8 <__i2b>
 c015cd8:	4606      	mov	r6, r0
 c015cda:	2d00      	cmp	r5, #0
 c015cdc:	dd0c      	ble.n	c015cf8 <_dtoa_r+0x738>
 c015cde:	f1b8 0f00 	cmp.w	r8, #0
 c015ce2:	dd09      	ble.n	c015cf8 <_dtoa_r+0x738>
 c015ce4:	4545      	cmp	r5, r8
 c015ce6:	462b      	mov	r3, r5
 c015ce8:	9a08      	ldr	r2, [sp, #32]
 c015cea:	bfa8      	it	ge
 c015cec:	4643      	movge	r3, r8
 c015cee:	1ad2      	subs	r2, r2, r3
 c015cf0:	1aed      	subs	r5, r5, r3
 c015cf2:	eba8 0803 	sub.w	r8, r8, r3
 c015cf6:	9208      	str	r2, [sp, #32]
 c015cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c015cfa:	b1eb      	cbz	r3, c015d38 <_dtoa_r+0x778>
 c015cfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 c015cfe:	2b00      	cmp	r3, #0
 c015d00:	d067      	beq.n	c015dd2 <_dtoa_r+0x812>
 c015d02:	b18f      	cbz	r7, c015d28 <_dtoa_r+0x768>
 c015d04:	4631      	mov	r1, r6
 c015d06:	463a      	mov	r2, r7
 c015d08:	4620      	mov	r0, r4
 c015d0a:	f000 fc6b 	bl	c0165e4 <__pow5mult>
 c015d0e:	465a      	mov	r2, fp
 c015d10:	4601      	mov	r1, r0
 c015d12:	4606      	mov	r6, r0
 c015d14:	4620      	mov	r0, r4
 c015d16:	f000 fbd0 	bl	c0164ba <__multiply>
 c015d1a:	4659      	mov	r1, fp
 c015d1c:	900a      	str	r0, [sp, #40]	; 0x28
 c015d1e:	4620      	mov	r0, r4
 c015d20:	f000 fb20 	bl	c016364 <_Bfree>
 c015d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c015d26:	469b      	mov	fp, r3
 c015d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c015d2a:	1bda      	subs	r2, r3, r7
 c015d2c:	d004      	beq.n	c015d38 <_dtoa_r+0x778>
 c015d2e:	4659      	mov	r1, fp
 c015d30:	4620      	mov	r0, r4
 c015d32:	f000 fc57 	bl	c0165e4 <__pow5mult>
 c015d36:	4683      	mov	fp, r0
 c015d38:	2101      	movs	r1, #1
 c015d3a:	4620      	mov	r0, r4
 c015d3c:	f000 fbb4 	bl	c0164a8 <__i2b>
 c015d40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 c015d42:	4607      	mov	r7, r0
 c015d44:	2b00      	cmp	r3, #0
 c015d46:	f000 81c8 	beq.w	c0160da <_dtoa_r+0xb1a>
 c015d4a:	461a      	mov	r2, r3
 c015d4c:	4601      	mov	r1, r0
 c015d4e:	4620      	mov	r0, r4
 c015d50:	f000 fc48 	bl	c0165e4 <__pow5mult>
 c015d54:	9b20      	ldr	r3, [sp, #128]	; 0x80
 c015d56:	4607      	mov	r7, r0
 c015d58:	2b01      	cmp	r3, #1
 c015d5a:	dc40      	bgt.n	c015dde <_dtoa_r+0x81e>
 c015d5c:	9b02      	ldr	r3, [sp, #8]
 c015d5e:	2b00      	cmp	r3, #0
 c015d60:	d139      	bne.n	c015dd6 <_dtoa_r+0x816>
 c015d62:	9b03      	ldr	r3, [sp, #12]
 c015d64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 c015d68:	2b00      	cmp	r3, #0
 c015d6a:	d136      	bne.n	c015dda <_dtoa_r+0x81a>
 c015d6c:	9b03      	ldr	r3, [sp, #12]
 c015d6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 c015d72:	0d1b      	lsrs	r3, r3, #20
 c015d74:	051b      	lsls	r3, r3, #20
 c015d76:	b12b      	cbz	r3, c015d84 <_dtoa_r+0x7c4>
 c015d78:	9b08      	ldr	r3, [sp, #32]
 c015d7a:	f108 0801 	add.w	r8, r8, #1
 c015d7e:	3301      	adds	r3, #1
 c015d80:	9308      	str	r3, [sp, #32]
 c015d82:	2301      	movs	r3, #1
 c015d84:	9309      	str	r3, [sp, #36]	; 0x24
 c015d86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 c015d88:	2b00      	cmp	r3, #0
 c015d8a:	d12a      	bne.n	c015de2 <_dtoa_r+0x822>
 c015d8c:	2001      	movs	r0, #1
 c015d8e:	e030      	b.n	c015df2 <_dtoa_r+0x832>
 c015d90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 c015d92:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 c015d96:	e795      	b.n	c015cc4 <_dtoa_r+0x704>
 c015d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c015d9a:	f109 37ff 	add.w	r7, r9, #4294967295
 c015d9e:	42bb      	cmp	r3, r7
 c015da0:	bfb7      	itett	lt
 c015da2:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 c015da4:	1bdf      	subge	r7, r3, r7
 c015da6:	9709      	strlt	r7, [sp, #36]	; 0x24
 c015da8:	1afa      	sublt	r2, r7, r3
 c015daa:	bfbf      	itttt	lt
 c015dac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 c015dae:	2700      	movlt	r7, #0
 c015db0:	189b      	addlt	r3, r3, r2
 c015db2:	930d      	strlt	r3, [sp, #52]	; 0x34
 c015db4:	f1b9 0f00 	cmp.w	r9, #0
 c015db8:	bfb3      	iteet	lt
 c015dba:	9b08      	ldrlt	r3, [sp, #32]
 c015dbc:	464b      	movge	r3, r9
 c015dbe:	9d08      	ldrge	r5, [sp, #32]
 c015dc0:	eba3 0509 	sublt.w	r5, r3, r9
 c015dc4:	bfb8      	it	lt
 c015dc6:	2300      	movlt	r3, #0
 c015dc8:	e77e      	b.n	c015cc8 <_dtoa_r+0x708>
 c015dca:	e9dd 5708 	ldrd	r5, r7, [sp, #32]
 c015dce:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 c015dd0:	e783      	b.n	c015cda <_dtoa_r+0x71a>
 c015dd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 c015dd4:	e7ab      	b.n	c015d2e <_dtoa_r+0x76e>
 c015dd6:	2300      	movs	r3, #0
 c015dd8:	e7d4      	b.n	c015d84 <_dtoa_r+0x7c4>
 c015dda:	9b02      	ldr	r3, [sp, #8]
 c015ddc:	e7d2      	b.n	c015d84 <_dtoa_r+0x7c4>
 c015dde:	2300      	movs	r3, #0
 c015de0:	9309      	str	r3, [sp, #36]	; 0x24
 c015de2:	693b      	ldr	r3, [r7, #16]
 c015de4:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 c015de8:	6918      	ldr	r0, [r3, #16]
 c015dea:	f000 fb0f 	bl	c01640c <__hi0bits>
 c015dee:	f1c0 0020 	rsb	r0, r0, #32
 c015df2:	4440      	add	r0, r8
 c015df4:	f010 001f 	ands.w	r0, r0, #31
 c015df8:	d047      	beq.n	c015e8a <_dtoa_r+0x8ca>
 c015dfa:	f1c0 0320 	rsb	r3, r0, #32
 c015dfe:	2b04      	cmp	r3, #4
 c015e00:	dd3b      	ble.n	c015e7a <_dtoa_r+0x8ba>
 c015e02:	f1c0 001c 	rsb	r0, r0, #28
 c015e06:	9b08      	ldr	r3, [sp, #32]
 c015e08:	4405      	add	r5, r0
 c015e0a:	4403      	add	r3, r0
 c015e0c:	4480      	add	r8, r0
 c015e0e:	9308      	str	r3, [sp, #32]
 c015e10:	9b08      	ldr	r3, [sp, #32]
 c015e12:	2b00      	cmp	r3, #0
 c015e14:	dd05      	ble.n	c015e22 <_dtoa_r+0x862>
 c015e16:	4659      	mov	r1, fp
 c015e18:	461a      	mov	r2, r3
 c015e1a:	4620      	mov	r0, r4
 c015e1c:	f000 fc30 	bl	c016680 <__lshift>
 c015e20:	4683      	mov	fp, r0
 c015e22:	f1b8 0f00 	cmp.w	r8, #0
 c015e26:	dd05      	ble.n	c015e34 <_dtoa_r+0x874>
 c015e28:	4639      	mov	r1, r7
 c015e2a:	4642      	mov	r2, r8
 c015e2c:	4620      	mov	r0, r4
 c015e2e:	f000 fc27 	bl	c016680 <__lshift>
 c015e32:	4607      	mov	r7, r0
 c015e34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 c015e36:	b353      	cbz	r3, c015e8e <_dtoa_r+0x8ce>
 c015e38:	4639      	mov	r1, r7
 c015e3a:	4658      	mov	r0, fp
 c015e3c:	f000 fc74 	bl	c016728 <__mcmp>
 c015e40:	2800      	cmp	r0, #0
 c015e42:	da24      	bge.n	c015e8e <_dtoa_r+0x8ce>
 c015e44:	2300      	movs	r3, #0
 c015e46:	4659      	mov	r1, fp
 c015e48:	220a      	movs	r2, #10
 c015e4a:	4620      	mov	r0, r4
 c015e4c:	f000 faa1 	bl	c016392 <__multadd>
 c015e50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 c015e52:	f10a 3aff 	add.w	sl, sl, #4294967295
 c015e56:	4683      	mov	fp, r0
 c015e58:	2b00      	cmp	r3, #0
 c015e5a:	f000 8145 	beq.w	c0160e8 <_dtoa_r+0xb28>
 c015e5e:	2300      	movs	r3, #0
 c015e60:	4631      	mov	r1, r6
 c015e62:	220a      	movs	r2, #10
 c015e64:	4620      	mov	r0, r4
 c015e66:	f000 fa94 	bl	c016392 <__multadd>
 c015e6a:	9b06      	ldr	r3, [sp, #24]
 c015e6c:	4606      	mov	r6, r0
 c015e6e:	2b00      	cmp	r3, #0
 c015e70:	dc4e      	bgt.n	c015f10 <_dtoa_r+0x950>
 c015e72:	9b20      	ldr	r3, [sp, #128]	; 0x80
 c015e74:	2b02      	cmp	r3, #2
 c015e76:	dd4b      	ble.n	c015f10 <_dtoa_r+0x950>
 c015e78:	e011      	b.n	c015e9e <_dtoa_r+0x8de>
 c015e7a:	d0c9      	beq.n	c015e10 <_dtoa_r+0x850>
 c015e7c:	331c      	adds	r3, #28
 c015e7e:	9a08      	ldr	r2, [sp, #32]
 c015e80:	441a      	add	r2, r3
 c015e82:	441d      	add	r5, r3
 c015e84:	4498      	add	r8, r3
 c015e86:	9208      	str	r2, [sp, #32]
 c015e88:	e7c2      	b.n	c015e10 <_dtoa_r+0x850>
 c015e8a:	4603      	mov	r3, r0
 c015e8c:	e7f6      	b.n	c015e7c <_dtoa_r+0x8bc>
 c015e8e:	f1b9 0f00 	cmp.w	r9, #0
 c015e92:	dc37      	bgt.n	c015f04 <_dtoa_r+0x944>
 c015e94:	9b20      	ldr	r3, [sp, #128]	; 0x80
 c015e96:	2b02      	cmp	r3, #2
 c015e98:	dd34      	ble.n	c015f04 <_dtoa_r+0x944>
 c015e9a:	f8cd 9018 	str.w	r9, [sp, #24]
 c015e9e:	9b06      	ldr	r3, [sp, #24]
 c015ea0:	b963      	cbnz	r3, c015ebc <_dtoa_r+0x8fc>
 c015ea2:	4639      	mov	r1, r7
 c015ea4:	2205      	movs	r2, #5
 c015ea6:	4620      	mov	r0, r4
 c015ea8:	f000 fa73 	bl	c016392 <__multadd>
 c015eac:	4601      	mov	r1, r0
 c015eae:	4607      	mov	r7, r0
 c015eb0:	4658      	mov	r0, fp
 c015eb2:	f000 fc39 	bl	c016728 <__mcmp>
 c015eb6:	2800      	cmp	r0, #0
 c015eb8:	f73f adcd 	bgt.w	c015a56 <_dtoa_r+0x496>
 c015ebc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 c015ebe:	9d05      	ldr	r5, [sp, #20]
 c015ec0:	ea6f 0a03 	mvn.w	sl, r3
 c015ec4:	f04f 0900 	mov.w	r9, #0
 c015ec8:	4639      	mov	r1, r7
 c015eca:	4620      	mov	r0, r4
 c015ecc:	f000 fa4a 	bl	c016364 <_Bfree>
 c015ed0:	2e00      	cmp	r6, #0
 c015ed2:	f43f aeb8 	beq.w	c015c46 <_dtoa_r+0x686>
 c015ed6:	f1b9 0f00 	cmp.w	r9, #0
 c015eda:	d005      	beq.n	c015ee8 <_dtoa_r+0x928>
 c015edc:	45b1      	cmp	r9, r6
 c015ede:	d003      	beq.n	c015ee8 <_dtoa_r+0x928>
 c015ee0:	4649      	mov	r1, r9
 c015ee2:	4620      	mov	r0, r4
 c015ee4:	f000 fa3e 	bl	c016364 <_Bfree>
 c015ee8:	4631      	mov	r1, r6
 c015eea:	4620      	mov	r0, r4
 c015eec:	f000 fa3a 	bl	c016364 <_Bfree>
 c015ef0:	e6a9      	b.n	c015c46 <_dtoa_r+0x686>
 c015ef2:	2700      	movs	r7, #0
 c015ef4:	463e      	mov	r6, r7
 c015ef6:	e7e1      	b.n	c015ebc <_dtoa_r+0x8fc>
 c015ef8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 c015efc:	463e      	mov	r6, r7
 c015efe:	e5aa      	b.n	c015a56 <_dtoa_r+0x496>
 c015f00:	40240000 	.word	0x40240000
 c015f04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 c015f06:	f8cd 9018 	str.w	r9, [sp, #24]
 c015f0a:	2b00      	cmp	r3, #0
 c015f0c:	f000 80f3 	beq.w	c0160f6 <_dtoa_r+0xb36>
 c015f10:	2d00      	cmp	r5, #0
 c015f12:	dd05      	ble.n	c015f20 <_dtoa_r+0x960>
 c015f14:	4631      	mov	r1, r6
 c015f16:	462a      	mov	r2, r5
 c015f18:	4620      	mov	r0, r4
 c015f1a:	f000 fbb1 	bl	c016680 <__lshift>
 c015f1e:	4606      	mov	r6, r0
 c015f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c015f22:	2b00      	cmp	r3, #0
 c015f24:	d04c      	beq.n	c015fc0 <_dtoa_r+0xa00>
 c015f26:	6871      	ldr	r1, [r6, #4]
 c015f28:	4620      	mov	r0, r4
 c015f2a:	f000 f9e7 	bl	c0162fc <_Balloc>
 c015f2e:	6932      	ldr	r2, [r6, #16]
 c015f30:	4605      	mov	r5, r0
 c015f32:	f106 010c 	add.w	r1, r6, #12
 c015f36:	3202      	adds	r2, #2
 c015f38:	300c      	adds	r0, #12
 c015f3a:	0092      	lsls	r2, r2, #2
 c015f3c:	f7fe fd1f 	bl	c01497e <memcpy>
 c015f40:	2201      	movs	r2, #1
 c015f42:	4629      	mov	r1, r5
 c015f44:	4620      	mov	r0, r4
 c015f46:	f000 fb9b 	bl	c016680 <__lshift>
 c015f4a:	9b05      	ldr	r3, [sp, #20]
 c015f4c:	46b1      	mov	r9, r6
 c015f4e:	4606      	mov	r6, r0
 c015f50:	9308      	str	r3, [sp, #32]
 c015f52:	9b02      	ldr	r3, [sp, #8]
 c015f54:	f003 0301 	and.w	r3, r3, #1
 c015f58:	9309      	str	r3, [sp, #36]	; 0x24
 c015f5a:	4639      	mov	r1, r7
 c015f5c:	4658      	mov	r0, fp
 c015f5e:	f7ff fa9d 	bl	c01549c <quorem>
 c015f62:	4649      	mov	r1, r9
 c015f64:	4605      	mov	r5, r0
 c015f66:	f100 0830 	add.w	r8, r0, #48	; 0x30
 c015f6a:	4658      	mov	r0, fp
 c015f6c:	f000 fbdc 	bl	c016728 <__mcmp>
 c015f70:	4632      	mov	r2, r6
 c015f72:	9002      	str	r0, [sp, #8]
 c015f74:	4639      	mov	r1, r7
 c015f76:	4620      	mov	r0, r4
 c015f78:	f000 fbf0 	bl	c01675c <__mdiff>
 c015f7c:	68c3      	ldr	r3, [r0, #12]
 c015f7e:	4602      	mov	r2, r0
 c015f80:	bb03      	cbnz	r3, c015fc4 <_dtoa_r+0xa04>
 c015f82:	4601      	mov	r1, r0
 c015f84:	900a      	str	r0, [sp, #40]	; 0x28
 c015f86:	4658      	mov	r0, fp
 c015f88:	f000 fbce 	bl	c016728 <__mcmp>
 c015f8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 c015f8e:	4603      	mov	r3, r0
 c015f90:	4611      	mov	r1, r2
 c015f92:	4620      	mov	r0, r4
 c015f94:	930a      	str	r3, [sp, #40]	; 0x28
 c015f96:	f000 f9e5 	bl	c016364 <_Bfree>
 c015f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c015f9c:	b9a3      	cbnz	r3, c015fc8 <_dtoa_r+0xa08>
 c015f9e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 c015fa0:	b992      	cbnz	r2, c015fc8 <_dtoa_r+0xa08>
 c015fa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 c015fa4:	b982      	cbnz	r2, c015fc8 <_dtoa_r+0xa08>
 c015fa6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 c015faa:	d029      	beq.n	c016000 <_dtoa_r+0xa40>
 c015fac:	9b02      	ldr	r3, [sp, #8]
 c015fae:	2b00      	cmp	r3, #0
 c015fb0:	dd01      	ble.n	c015fb6 <_dtoa_r+0x9f6>
 c015fb2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 c015fb6:	9b08      	ldr	r3, [sp, #32]
 c015fb8:	1c5d      	adds	r5, r3, #1
 c015fba:	f883 8000 	strb.w	r8, [r3]
 c015fbe:	e783      	b.n	c015ec8 <_dtoa_r+0x908>
 c015fc0:	4630      	mov	r0, r6
 c015fc2:	e7c2      	b.n	c015f4a <_dtoa_r+0x98a>
 c015fc4:	2301      	movs	r3, #1
 c015fc6:	e7e3      	b.n	c015f90 <_dtoa_r+0x9d0>
 c015fc8:	9a02      	ldr	r2, [sp, #8]
 c015fca:	2a00      	cmp	r2, #0
 c015fcc:	db04      	blt.n	c015fd8 <_dtoa_r+0xa18>
 c015fce:	d123      	bne.n	c016018 <_dtoa_r+0xa58>
 c015fd0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 c015fd2:	bb0a      	cbnz	r2, c016018 <_dtoa_r+0xa58>
 c015fd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 c015fd6:	b9fa      	cbnz	r2, c016018 <_dtoa_r+0xa58>
 c015fd8:	2b00      	cmp	r3, #0
 c015fda:	ddec      	ble.n	c015fb6 <_dtoa_r+0x9f6>
 c015fdc:	4659      	mov	r1, fp
 c015fde:	2201      	movs	r2, #1
 c015fe0:	4620      	mov	r0, r4
 c015fe2:	f000 fb4d 	bl	c016680 <__lshift>
 c015fe6:	4639      	mov	r1, r7
 c015fe8:	4683      	mov	fp, r0
 c015fea:	f000 fb9d 	bl	c016728 <__mcmp>
 c015fee:	2800      	cmp	r0, #0
 c015ff0:	dc03      	bgt.n	c015ffa <_dtoa_r+0xa3a>
 c015ff2:	d1e0      	bne.n	c015fb6 <_dtoa_r+0x9f6>
 c015ff4:	f018 0f01 	tst.w	r8, #1
 c015ff8:	d0dd      	beq.n	c015fb6 <_dtoa_r+0x9f6>
 c015ffa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 c015ffe:	d1d8      	bne.n	c015fb2 <_dtoa_r+0x9f2>
 c016000:	9b08      	ldr	r3, [sp, #32]
 c016002:	9a08      	ldr	r2, [sp, #32]
 c016004:	1c5d      	adds	r5, r3, #1
 c016006:	2339      	movs	r3, #57	; 0x39
 c016008:	7013      	strb	r3, [r2, #0]
 c01600a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 c01600e:	1e6a      	subs	r2, r5, #1
 c016010:	2b39      	cmp	r3, #57	; 0x39
 c016012:	d04d      	beq.n	c0160b0 <_dtoa_r+0xaf0>
 c016014:	3301      	adds	r3, #1
 c016016:	e052      	b.n	c0160be <_dtoa_r+0xafe>
 c016018:	9a08      	ldr	r2, [sp, #32]
 c01601a:	2b00      	cmp	r3, #0
 c01601c:	f102 0501 	add.w	r5, r2, #1
 c016020:	dd06      	ble.n	c016030 <_dtoa_r+0xa70>
 c016022:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 c016026:	d0eb      	beq.n	c016000 <_dtoa_r+0xa40>
 c016028:	f108 0801 	add.w	r8, r8, #1
 c01602c:	9b08      	ldr	r3, [sp, #32]
 c01602e:	e7c4      	b.n	c015fba <_dtoa_r+0x9fa>
 c016030:	9b05      	ldr	r3, [sp, #20]
 c016032:	9a06      	ldr	r2, [sp, #24]
 c016034:	1aeb      	subs	r3, r5, r3
 c016036:	f805 8c01 	strb.w	r8, [r5, #-1]
 c01603a:	4293      	cmp	r3, r2
 c01603c:	d021      	beq.n	c016082 <_dtoa_r+0xac2>
 c01603e:	4659      	mov	r1, fp
 c016040:	2300      	movs	r3, #0
 c016042:	220a      	movs	r2, #10
 c016044:	4620      	mov	r0, r4
 c016046:	f000 f9a4 	bl	c016392 <__multadd>
 c01604a:	45b1      	cmp	r9, r6
 c01604c:	4683      	mov	fp, r0
 c01604e:	f04f 0300 	mov.w	r3, #0
 c016052:	f04f 020a 	mov.w	r2, #10
 c016056:	4649      	mov	r1, r9
 c016058:	4620      	mov	r0, r4
 c01605a:	d105      	bne.n	c016068 <_dtoa_r+0xaa8>
 c01605c:	f000 f999 	bl	c016392 <__multadd>
 c016060:	4681      	mov	r9, r0
 c016062:	4606      	mov	r6, r0
 c016064:	9508      	str	r5, [sp, #32]
 c016066:	e778      	b.n	c015f5a <_dtoa_r+0x99a>
 c016068:	f000 f993 	bl	c016392 <__multadd>
 c01606c:	4631      	mov	r1, r6
 c01606e:	4681      	mov	r9, r0
 c016070:	2300      	movs	r3, #0
 c016072:	220a      	movs	r2, #10
 c016074:	4620      	mov	r0, r4
 c016076:	f000 f98c 	bl	c016392 <__multadd>
 c01607a:	4606      	mov	r6, r0
 c01607c:	e7f2      	b.n	c016064 <_dtoa_r+0xaa4>
 c01607e:	f04f 0900 	mov.w	r9, #0
 c016082:	4659      	mov	r1, fp
 c016084:	2201      	movs	r2, #1
 c016086:	4620      	mov	r0, r4
 c016088:	f000 fafa 	bl	c016680 <__lshift>
 c01608c:	4639      	mov	r1, r7
 c01608e:	4683      	mov	fp, r0
 c016090:	f000 fb4a 	bl	c016728 <__mcmp>
 c016094:	2800      	cmp	r0, #0
 c016096:	dcb8      	bgt.n	c01600a <_dtoa_r+0xa4a>
 c016098:	d102      	bne.n	c0160a0 <_dtoa_r+0xae0>
 c01609a:	f018 0f01 	tst.w	r8, #1
 c01609e:	d1b4      	bne.n	c01600a <_dtoa_r+0xa4a>
 c0160a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 c0160a4:	1e6a      	subs	r2, r5, #1
 c0160a6:	2b30      	cmp	r3, #48	; 0x30
 c0160a8:	f47f af0e 	bne.w	c015ec8 <_dtoa_r+0x908>
 c0160ac:	4615      	mov	r5, r2
 c0160ae:	e7f7      	b.n	c0160a0 <_dtoa_r+0xae0>
 c0160b0:	9b05      	ldr	r3, [sp, #20]
 c0160b2:	4293      	cmp	r3, r2
 c0160b4:	d105      	bne.n	c0160c2 <_dtoa_r+0xb02>
 c0160b6:	f10a 0a01 	add.w	sl, sl, #1
 c0160ba:	2331      	movs	r3, #49	; 0x31
 c0160bc:	9a05      	ldr	r2, [sp, #20]
 c0160be:	7013      	strb	r3, [r2, #0]
 c0160c0:	e702      	b.n	c015ec8 <_dtoa_r+0x908>
 c0160c2:	4615      	mov	r5, r2
 c0160c4:	e7a1      	b.n	c01600a <_dtoa_r+0xa4a>
 c0160c6:	4b17      	ldr	r3, [pc, #92]	; (c016124 <_dtoa_r+0xb64>)
 c0160c8:	f7ff badf 	b.w	c01568a <_dtoa_r+0xca>
 c0160cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 c0160ce:	2b00      	cmp	r3, #0
 c0160d0:	f47f aab9 	bne.w	c015646 <_dtoa_r+0x86>
 c0160d4:	4b14      	ldr	r3, [pc, #80]	; (c016128 <_dtoa_r+0xb68>)
 c0160d6:	f7ff bad8 	b.w	c01568a <_dtoa_r+0xca>
 c0160da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 c0160dc:	2b01      	cmp	r3, #1
 c0160de:	f77f ae3d 	ble.w	c015d5c <_dtoa_r+0x79c>
 c0160e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 c0160e4:	9309      	str	r3, [sp, #36]	; 0x24
 c0160e6:	e651      	b.n	c015d8c <_dtoa_r+0x7cc>
 c0160e8:	9b06      	ldr	r3, [sp, #24]
 c0160ea:	2b00      	cmp	r3, #0
 c0160ec:	dc03      	bgt.n	c0160f6 <_dtoa_r+0xb36>
 c0160ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 c0160f0:	2b02      	cmp	r3, #2
 c0160f2:	f73f aed4 	bgt.w	c015e9e <_dtoa_r+0x8de>
 c0160f6:	9d05      	ldr	r5, [sp, #20]
 c0160f8:	4639      	mov	r1, r7
 c0160fa:	4658      	mov	r0, fp
 c0160fc:	f7ff f9ce 	bl	c01549c <quorem>
 c016100:	9b05      	ldr	r3, [sp, #20]
 c016102:	f100 0830 	add.w	r8, r0, #48	; 0x30
 c016106:	9a06      	ldr	r2, [sp, #24]
 c016108:	f805 8b01 	strb.w	r8, [r5], #1
 c01610c:	1aeb      	subs	r3, r5, r3
 c01610e:	429a      	cmp	r2, r3
 c016110:	ddb5      	ble.n	c01607e <_dtoa_r+0xabe>
 c016112:	4659      	mov	r1, fp
 c016114:	2300      	movs	r3, #0
 c016116:	220a      	movs	r2, #10
 c016118:	4620      	mov	r0, r4
 c01611a:	f000 f93a 	bl	c016392 <__multadd>
 c01611e:	4683      	mov	fp, r0
 c016120:	e7ea      	b.n	c0160f8 <_dtoa_r+0xb38>
 c016122:	bf00      	nop
 c016124:	0c017088 	.word	0x0c017088
 c016128:	0c0170ac 	.word	0x0c0170ac

0c01612c <std>:
 c01612c:	2300      	movs	r3, #0
 c01612e:	b510      	push	{r4, lr}
 c016130:	4604      	mov	r4, r0
 c016132:	6083      	str	r3, [r0, #8]
 c016134:	8181      	strh	r1, [r0, #12]
 c016136:	4619      	mov	r1, r3
 c016138:	6643      	str	r3, [r0, #100]	; 0x64
 c01613a:	81c2      	strh	r2, [r0, #14]
 c01613c:	2208      	movs	r2, #8
 c01613e:	6183      	str	r3, [r0, #24]
 c016140:	e9c0 3300 	strd	r3, r3, [r0]
 c016144:	e9c0 3304 	strd	r3, r3, [r0, #16]
 c016148:	305c      	adds	r0, #92	; 0x5c
 c01614a:	f7fe fc3c 	bl	c0149c6 <memset>
 c01614e:	4b05      	ldr	r3, [pc, #20]	; (c016164 <std+0x38>)
 c016150:	6224      	str	r4, [r4, #32]
 c016152:	6263      	str	r3, [r4, #36]	; 0x24
 c016154:	4b04      	ldr	r3, [pc, #16]	; (c016168 <std+0x3c>)
 c016156:	62a3      	str	r3, [r4, #40]	; 0x28
 c016158:	4b04      	ldr	r3, [pc, #16]	; (c01616c <std+0x40>)
 c01615a:	62e3      	str	r3, [r4, #44]	; 0x2c
 c01615c:	4b04      	ldr	r3, [pc, #16]	; (c016170 <std+0x44>)
 c01615e:	6323      	str	r3, [r4, #48]	; 0x30
 c016160:	bd10      	pop	{r4, pc}
 c016162:	bf00      	nop
 c016164:	0c016b39 	.word	0x0c016b39
 c016168:	0c016b5b 	.word	0x0c016b5b
 c01616c:	0c016b93 	.word	0x0c016b93
 c016170:	0c016bb7 	.word	0x0c016bb7

0c016174 <_cleanup_r>:
 c016174:	4901      	ldr	r1, [pc, #4]	; (c01617c <_cleanup_r+0x8>)
 c016176:	f000 b885 	b.w	c016284 <_fwalk_reent>
 c01617a:	bf00      	nop
 c01617c:	0c016e8d 	.word	0x0c016e8d

0c016180 <__sfmoreglue>:
 c016180:	b570      	push	{r4, r5, r6, lr}
 c016182:	1e4a      	subs	r2, r1, #1
 c016184:	2568      	movs	r5, #104	; 0x68
 c016186:	460e      	mov	r6, r1
 c016188:	4355      	muls	r5, r2
 c01618a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 c01618e:	f7fe fc7f 	bl	c014a90 <_malloc_r>
 c016192:	4604      	mov	r4, r0
 c016194:	b140      	cbz	r0, c0161a8 <__sfmoreglue+0x28>
 c016196:	2100      	movs	r1, #0
 c016198:	f105 0268 	add.w	r2, r5, #104	; 0x68
 c01619c:	e9c0 1600 	strd	r1, r6, [r0]
 c0161a0:	300c      	adds	r0, #12
 c0161a2:	60a0      	str	r0, [r4, #8]
 c0161a4:	f7fe fc0f 	bl	c0149c6 <memset>
 c0161a8:	4620      	mov	r0, r4
 c0161aa:	bd70      	pop	{r4, r5, r6, pc}

0c0161ac <__sinit>:
 c0161ac:	6983      	ldr	r3, [r0, #24]
 c0161ae:	b510      	push	{r4, lr}
 c0161b0:	4604      	mov	r4, r0
 c0161b2:	bb33      	cbnz	r3, c016202 <__sinit+0x56>
 c0161b4:	6503      	str	r3, [r0, #80]	; 0x50
 c0161b6:	4a13      	ldr	r2, [pc, #76]	; (c016204 <__sinit+0x58>)
 c0161b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 c0161bc:	4b12      	ldr	r3, [pc, #72]	; (c016208 <__sinit+0x5c>)
 c0161be:	6282      	str	r2, [r0, #40]	; 0x28
 c0161c0:	681b      	ldr	r3, [r3, #0]
 c0161c2:	4298      	cmp	r0, r3
 c0161c4:	bf04      	itt	eq
 c0161c6:	2301      	moveq	r3, #1
 c0161c8:	6183      	streq	r3, [r0, #24]
 c0161ca:	f000 f81f 	bl	c01620c <__sfp>
 c0161ce:	6060      	str	r0, [r4, #4]
 c0161d0:	4620      	mov	r0, r4
 c0161d2:	f000 f81b 	bl	c01620c <__sfp>
 c0161d6:	60a0      	str	r0, [r4, #8]
 c0161d8:	4620      	mov	r0, r4
 c0161da:	f000 f817 	bl	c01620c <__sfp>
 c0161de:	2200      	movs	r2, #0
 c0161e0:	60e0      	str	r0, [r4, #12]
 c0161e2:	2104      	movs	r1, #4
 c0161e4:	6860      	ldr	r0, [r4, #4]
 c0161e6:	f7ff ffa1 	bl	c01612c <std>
 c0161ea:	2201      	movs	r2, #1
 c0161ec:	2109      	movs	r1, #9
 c0161ee:	68a0      	ldr	r0, [r4, #8]
 c0161f0:	f7ff ff9c 	bl	c01612c <std>
 c0161f4:	2202      	movs	r2, #2
 c0161f6:	2112      	movs	r1, #18
 c0161f8:	68e0      	ldr	r0, [r4, #12]
 c0161fa:	f7ff ff97 	bl	c01612c <std>
 c0161fe:	2301      	movs	r3, #1
 c016200:	61a3      	str	r3, [r4, #24]
 c016202:	bd10      	pop	{r4, pc}
 c016204:	0c016175 	.word	0x0c016175
 c016208:	0c017074 	.word	0x0c017074

0c01620c <__sfp>:
 c01620c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c01620e:	4b1b      	ldr	r3, [pc, #108]	; (c01627c <__sfp+0x70>)
 c016210:	4607      	mov	r7, r0
 c016212:	681e      	ldr	r6, [r3, #0]
 c016214:	69b3      	ldr	r3, [r6, #24]
 c016216:	b913      	cbnz	r3, c01621e <__sfp+0x12>
 c016218:	4630      	mov	r0, r6
 c01621a:	f7ff ffc7 	bl	c0161ac <__sinit>
 c01621e:	3648      	adds	r6, #72	; 0x48
 c016220:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 c016224:	3b01      	subs	r3, #1
 c016226:	d503      	bpl.n	c016230 <__sfp+0x24>
 c016228:	6833      	ldr	r3, [r6, #0]
 c01622a:	b133      	cbz	r3, c01623a <__sfp+0x2e>
 c01622c:	6836      	ldr	r6, [r6, #0]
 c01622e:	e7f7      	b.n	c016220 <__sfp+0x14>
 c016230:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 c016234:	b16d      	cbz	r5, c016252 <__sfp+0x46>
 c016236:	3468      	adds	r4, #104	; 0x68
 c016238:	e7f4      	b.n	c016224 <__sfp+0x18>
 c01623a:	2104      	movs	r1, #4
 c01623c:	4638      	mov	r0, r7
 c01623e:	f7ff ff9f 	bl	c016180 <__sfmoreglue>
 c016242:	6030      	str	r0, [r6, #0]
 c016244:	2800      	cmp	r0, #0
 c016246:	d1f1      	bne.n	c01622c <__sfp+0x20>
 c016248:	230c      	movs	r3, #12
 c01624a:	4604      	mov	r4, r0
 c01624c:	603b      	str	r3, [r7, #0]
 c01624e:	4620      	mov	r0, r4
 c016250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c016252:	4b0b      	ldr	r3, [pc, #44]	; (c016280 <__sfp+0x74>)
 c016254:	2208      	movs	r2, #8
 c016256:	6665      	str	r5, [r4, #100]	; 0x64
 c016258:	4629      	mov	r1, r5
 c01625a:	60a5      	str	r5, [r4, #8]
 c01625c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 c016260:	e9c4 5500 	strd	r5, r5, [r4]
 c016264:	e9c4 3503 	strd	r3, r5, [r4, #12]
 c016268:	e9c4 5505 	strd	r5, r5, [r4, #20]
 c01626c:	f7fe fbab 	bl	c0149c6 <memset>
 c016270:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 c016274:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 c016278:	e7e9      	b.n	c01624e <__sfp+0x42>
 c01627a:	bf00      	nop
 c01627c:	0c017074 	.word	0x0c017074
 c016280:	ffff0001 	.word	0xffff0001

0c016284 <_fwalk_reent>:
 c016284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c016288:	4680      	mov	r8, r0
 c01628a:	4689      	mov	r9, r1
 c01628c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 c016290:	2600      	movs	r6, #0
 c016292:	b914      	cbnz	r4, c01629a <_fwalk_reent+0x16>
 c016294:	4630      	mov	r0, r6
 c016296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c01629a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 c01629e:	3f01      	subs	r7, #1
 c0162a0:	d501      	bpl.n	c0162a6 <_fwalk_reent+0x22>
 c0162a2:	6824      	ldr	r4, [r4, #0]
 c0162a4:	e7f5      	b.n	c016292 <_fwalk_reent+0xe>
 c0162a6:	89ab      	ldrh	r3, [r5, #12]
 c0162a8:	2b01      	cmp	r3, #1
 c0162aa:	d907      	bls.n	c0162bc <_fwalk_reent+0x38>
 c0162ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 c0162b0:	3301      	adds	r3, #1
 c0162b2:	d003      	beq.n	c0162bc <_fwalk_reent+0x38>
 c0162b4:	4629      	mov	r1, r5
 c0162b6:	4640      	mov	r0, r8
 c0162b8:	47c8      	blx	r9
 c0162ba:	4306      	orrs	r6, r0
 c0162bc:	3568      	adds	r5, #104	; 0x68
 c0162be:	e7ee      	b.n	c01629e <_fwalk_reent+0x1a>

0c0162c0 <_localeconv_r>:
 c0162c0:	4b04      	ldr	r3, [pc, #16]	; (c0162d4 <_localeconv_r+0x14>)
 c0162c2:	681b      	ldr	r3, [r3, #0]
 c0162c4:	6a18      	ldr	r0, [r3, #32]
 c0162c6:	4b04      	ldr	r3, [pc, #16]	; (c0162d8 <_localeconv_r+0x18>)
 c0162c8:	2800      	cmp	r0, #0
 c0162ca:	bf08      	it	eq
 c0162cc:	4618      	moveq	r0, r3
 c0162ce:	30f0      	adds	r0, #240	; 0xf0
 c0162d0:	4770      	bx	lr
 c0162d2:	bf00      	nop
 c0162d4:	30035b5c 	.word	0x30035b5c
 c0162d8:	30035bc0 	.word	0x30035bc0

0c0162dc <memchr>:
 c0162dc:	b2c9      	uxtb	r1, r1
 c0162de:	4402      	add	r2, r0
 c0162e0:	b510      	push	{r4, lr}
 c0162e2:	4290      	cmp	r0, r2
 c0162e4:	4603      	mov	r3, r0
 c0162e6:	d101      	bne.n	c0162ec <memchr+0x10>
 c0162e8:	2300      	movs	r3, #0
 c0162ea:	e003      	b.n	c0162f4 <memchr+0x18>
 c0162ec:	781c      	ldrb	r4, [r3, #0]
 c0162ee:	3001      	adds	r0, #1
 c0162f0:	428c      	cmp	r4, r1
 c0162f2:	d1f6      	bne.n	c0162e2 <memchr+0x6>
 c0162f4:	4618      	mov	r0, r3
 c0162f6:	bd10      	pop	{r4, pc}

0c0162f8 <__malloc_lock>:
 c0162f8:	4770      	bx	lr

0c0162fa <__malloc_unlock>:
 c0162fa:	4770      	bx	lr

0c0162fc <_Balloc>:
 c0162fc:	b570      	push	{r4, r5, r6, lr}
 c0162fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 c016300:	4604      	mov	r4, r0
 c016302:	460e      	mov	r6, r1
 c016304:	b93d      	cbnz	r5, c016316 <_Balloc+0x1a>
 c016306:	2010      	movs	r0, #16
 c016308:	f7fe fb1a 	bl	c014940 <malloc>
 c01630c:	6260      	str	r0, [r4, #36]	; 0x24
 c01630e:	6005      	str	r5, [r0, #0]
 c016310:	60c5      	str	r5, [r0, #12]
 c016312:	e9c0 5501 	strd	r5, r5, [r0, #4]
 c016316:	6a65      	ldr	r5, [r4, #36]	; 0x24
 c016318:	68eb      	ldr	r3, [r5, #12]
 c01631a:	b183      	cbz	r3, c01633e <_Balloc+0x42>
 c01631c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c01631e:	68db      	ldr	r3, [r3, #12]
 c016320:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 c016324:	b9b8      	cbnz	r0, c016356 <_Balloc+0x5a>
 c016326:	2101      	movs	r1, #1
 c016328:	4620      	mov	r0, r4
 c01632a:	fa01 f506 	lsl.w	r5, r1, r6
 c01632e:	1d6a      	adds	r2, r5, #5
 c016330:	0092      	lsls	r2, r2, #2
 c016332:	f7fe fb50 	bl	c0149d6 <_calloc_r>
 c016336:	b160      	cbz	r0, c016352 <_Balloc+0x56>
 c016338:	e9c0 6501 	strd	r6, r5, [r0, #4]
 c01633c:	e00e      	b.n	c01635c <_Balloc+0x60>
 c01633e:	2221      	movs	r2, #33	; 0x21
 c016340:	2104      	movs	r1, #4
 c016342:	4620      	mov	r0, r4
 c016344:	f7fe fb47 	bl	c0149d6 <_calloc_r>
 c016348:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c01634a:	60e8      	str	r0, [r5, #12]
 c01634c:	68db      	ldr	r3, [r3, #12]
 c01634e:	2b00      	cmp	r3, #0
 c016350:	d1e4      	bne.n	c01631c <_Balloc+0x20>
 c016352:	2000      	movs	r0, #0
 c016354:	bd70      	pop	{r4, r5, r6, pc}
 c016356:	6802      	ldr	r2, [r0, #0]
 c016358:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 c01635c:	2300      	movs	r3, #0
 c01635e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 c016362:	e7f7      	b.n	c016354 <_Balloc+0x58>

0c016364 <_Bfree>:
 c016364:	b570      	push	{r4, r5, r6, lr}
 c016366:	6a44      	ldr	r4, [r0, #36]	; 0x24
 c016368:	4606      	mov	r6, r0
 c01636a:	460d      	mov	r5, r1
 c01636c:	b93c      	cbnz	r4, c01637e <_Bfree+0x1a>
 c01636e:	2010      	movs	r0, #16
 c016370:	f7fe fae6 	bl	c014940 <malloc>
 c016374:	6270      	str	r0, [r6, #36]	; 0x24
 c016376:	6004      	str	r4, [r0, #0]
 c016378:	60c4      	str	r4, [r0, #12]
 c01637a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 c01637e:	b13d      	cbz	r5, c016390 <_Bfree+0x2c>
 c016380:	6a73      	ldr	r3, [r6, #36]	; 0x24
 c016382:	686a      	ldr	r2, [r5, #4]
 c016384:	68db      	ldr	r3, [r3, #12]
 c016386:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c01638a:	6029      	str	r1, [r5, #0]
 c01638c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 c016390:	bd70      	pop	{r4, r5, r6, pc}

0c016392 <__multadd>:
 c016392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c016396:	f101 0c14 	add.w	ip, r1, #20
 c01639a:	461f      	mov	r7, r3
 c01639c:	4606      	mov	r6, r0
 c01639e:	460c      	mov	r4, r1
 c0163a0:	690d      	ldr	r5, [r1, #16]
 c0163a2:	2300      	movs	r3, #0
 c0163a4:	f8dc 0000 	ldr.w	r0, [ip]
 c0163a8:	3301      	adds	r3, #1
 c0163aa:	b281      	uxth	r1, r0
 c0163ac:	429d      	cmp	r5, r3
 c0163ae:	ea4f 4010 	mov.w	r0, r0, lsr #16
 c0163b2:	fb02 7101 	mla	r1, r2, r1, r7
 c0163b6:	ea4f 4711 	mov.w	r7, r1, lsr #16
 c0163ba:	b289      	uxth	r1, r1
 c0163bc:	fb02 7000 	mla	r0, r2, r0, r7
 c0163c0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 c0163c4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 c0163c8:	f84c 1b04 	str.w	r1, [ip], #4
 c0163cc:	dcea      	bgt.n	c0163a4 <__multadd+0x12>
 c0163ce:	b1d7      	cbz	r7, c016406 <__multadd+0x74>
 c0163d0:	68a3      	ldr	r3, [r4, #8]
 c0163d2:	42ab      	cmp	r3, r5
 c0163d4:	dc12      	bgt.n	c0163fc <__multadd+0x6a>
 c0163d6:	6861      	ldr	r1, [r4, #4]
 c0163d8:	4630      	mov	r0, r6
 c0163da:	3101      	adds	r1, #1
 c0163dc:	f7ff ff8e 	bl	c0162fc <_Balloc>
 c0163e0:	6922      	ldr	r2, [r4, #16]
 c0163e2:	4680      	mov	r8, r0
 c0163e4:	f104 010c 	add.w	r1, r4, #12
 c0163e8:	3202      	adds	r2, #2
 c0163ea:	300c      	adds	r0, #12
 c0163ec:	0092      	lsls	r2, r2, #2
 c0163ee:	f7fe fac6 	bl	c01497e <memcpy>
 c0163f2:	4621      	mov	r1, r4
 c0163f4:	4644      	mov	r4, r8
 c0163f6:	4630      	mov	r0, r6
 c0163f8:	f7ff ffb4 	bl	c016364 <_Bfree>
 c0163fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 c016400:	3501      	adds	r5, #1
 c016402:	615f      	str	r7, [r3, #20]
 c016404:	6125      	str	r5, [r4, #16]
 c016406:	4620      	mov	r0, r4
 c016408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0c01640c <__hi0bits>:
 c01640c:	0c02      	lsrs	r2, r0, #16
 c01640e:	4603      	mov	r3, r0
 c016410:	0412      	lsls	r2, r2, #16
 c016412:	b9b2      	cbnz	r2, c016442 <__hi0bits+0x36>
 c016414:	0403      	lsls	r3, r0, #16
 c016416:	2010      	movs	r0, #16
 c016418:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 c01641c:	bf04      	itt	eq
 c01641e:	021b      	lsleq	r3, r3, #8
 c016420:	3008      	addeq	r0, #8
 c016422:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 c016426:	bf04      	itt	eq
 c016428:	011b      	lsleq	r3, r3, #4
 c01642a:	3004      	addeq	r0, #4
 c01642c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 c016430:	bf04      	itt	eq
 c016432:	009b      	lsleq	r3, r3, #2
 c016434:	3002      	addeq	r0, #2
 c016436:	2b00      	cmp	r3, #0
 c016438:	db06      	blt.n	c016448 <__hi0bits+0x3c>
 c01643a:	005b      	lsls	r3, r3, #1
 c01643c:	d503      	bpl.n	c016446 <__hi0bits+0x3a>
 c01643e:	3001      	adds	r0, #1
 c016440:	4770      	bx	lr
 c016442:	2000      	movs	r0, #0
 c016444:	e7e8      	b.n	c016418 <__hi0bits+0xc>
 c016446:	2020      	movs	r0, #32
 c016448:	4770      	bx	lr

0c01644a <__lo0bits>:
 c01644a:	6803      	ldr	r3, [r0, #0]
 c01644c:	4601      	mov	r1, r0
 c01644e:	f013 0207 	ands.w	r2, r3, #7
 c016452:	d00b      	beq.n	c01646c <__lo0bits+0x22>
 c016454:	07da      	lsls	r2, r3, #31
 c016456:	d423      	bmi.n	c0164a0 <__lo0bits+0x56>
 c016458:	0798      	lsls	r0, r3, #30
 c01645a:	bf47      	ittee	mi
 c01645c:	085b      	lsrmi	r3, r3, #1
 c01645e:	2001      	movmi	r0, #1
 c016460:	089b      	lsrpl	r3, r3, #2
 c016462:	2002      	movpl	r0, #2
 c016464:	bf4c      	ite	mi
 c016466:	600b      	strmi	r3, [r1, #0]
 c016468:	600b      	strpl	r3, [r1, #0]
 c01646a:	4770      	bx	lr
 c01646c:	b298      	uxth	r0, r3
 c01646e:	b9a8      	cbnz	r0, c01649c <__lo0bits+0x52>
 c016470:	0c1b      	lsrs	r3, r3, #16
 c016472:	2010      	movs	r0, #16
 c016474:	f013 0fff 	tst.w	r3, #255	; 0xff
 c016478:	bf04      	itt	eq
 c01647a:	0a1b      	lsreq	r3, r3, #8
 c01647c:	3008      	addeq	r0, #8
 c01647e:	071a      	lsls	r2, r3, #28
 c016480:	bf04      	itt	eq
 c016482:	091b      	lsreq	r3, r3, #4
 c016484:	3004      	addeq	r0, #4
 c016486:	079a      	lsls	r2, r3, #30
 c016488:	bf04      	itt	eq
 c01648a:	089b      	lsreq	r3, r3, #2
 c01648c:	3002      	addeq	r0, #2
 c01648e:	07da      	lsls	r2, r3, #31
 c016490:	d402      	bmi.n	c016498 <__lo0bits+0x4e>
 c016492:	085b      	lsrs	r3, r3, #1
 c016494:	d006      	beq.n	c0164a4 <__lo0bits+0x5a>
 c016496:	3001      	adds	r0, #1
 c016498:	600b      	str	r3, [r1, #0]
 c01649a:	4770      	bx	lr
 c01649c:	4610      	mov	r0, r2
 c01649e:	e7e9      	b.n	c016474 <__lo0bits+0x2a>
 c0164a0:	2000      	movs	r0, #0
 c0164a2:	4770      	bx	lr
 c0164a4:	2020      	movs	r0, #32
 c0164a6:	4770      	bx	lr

0c0164a8 <__i2b>:
 c0164a8:	b510      	push	{r4, lr}
 c0164aa:	460c      	mov	r4, r1
 c0164ac:	2101      	movs	r1, #1
 c0164ae:	f7ff ff25 	bl	c0162fc <_Balloc>
 c0164b2:	2201      	movs	r2, #1
 c0164b4:	6144      	str	r4, [r0, #20]
 c0164b6:	6102      	str	r2, [r0, #16]
 c0164b8:	bd10      	pop	{r4, pc}

0c0164ba <__multiply>:
 c0164ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0164be:	4614      	mov	r4, r2
 c0164c0:	690a      	ldr	r2, [r1, #16]
 c0164c2:	4688      	mov	r8, r1
 c0164c4:	6923      	ldr	r3, [r4, #16]
 c0164c6:	429a      	cmp	r2, r3
 c0164c8:	bfbe      	ittt	lt
 c0164ca:	460b      	movlt	r3, r1
 c0164cc:	46a0      	movlt	r8, r4
 c0164ce:	461c      	movlt	r4, r3
 c0164d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 c0164d4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 c0164d8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 c0164dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 c0164e0:	eb07 0609 	add.w	r6, r7, r9
 c0164e4:	42b3      	cmp	r3, r6
 c0164e6:	bfb8      	it	lt
 c0164e8:	3101      	addlt	r1, #1
 c0164ea:	f7ff ff07 	bl	c0162fc <_Balloc>
 c0164ee:	f100 0514 	add.w	r5, r0, #20
 c0164f2:	2200      	movs	r2, #0
 c0164f4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 c0164f8:	462b      	mov	r3, r5
 c0164fa:	4573      	cmp	r3, lr
 c0164fc:	d316      	bcc.n	c01652c <__multiply+0x72>
 c0164fe:	f108 0114 	add.w	r1, r8, #20
 c016502:	f104 0214 	add.w	r2, r4, #20
 c016506:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 c01650a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 c01650e:	9300      	str	r3, [sp, #0]
 c016510:	9b00      	ldr	r3, [sp, #0]
 c016512:	9201      	str	r2, [sp, #4]
 c016514:	4293      	cmp	r3, r2
 c016516:	d80c      	bhi.n	c016532 <__multiply+0x78>
 c016518:	2e00      	cmp	r6, #0
 c01651a:	dd03      	ble.n	c016524 <__multiply+0x6a>
 c01651c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 c016520:	2b00      	cmp	r3, #0
 c016522:	d05d      	beq.n	c0165e0 <__multiply+0x126>
 c016524:	6106      	str	r6, [r0, #16]
 c016526:	b003      	add	sp, #12
 c016528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c01652c:	f843 2b04 	str.w	r2, [r3], #4
 c016530:	e7e3      	b.n	c0164fa <__multiply+0x40>
 c016532:	f8b2 b000 	ldrh.w	fp, [r2]
 c016536:	f1bb 0f00 	cmp.w	fp, #0
 c01653a:	d023      	beq.n	c016584 <__multiply+0xca>
 c01653c:	4689      	mov	r9, r1
 c01653e:	46ac      	mov	ip, r5
 c016540:	f04f 0800 	mov.w	r8, #0
 c016544:	f859 4b04 	ldr.w	r4, [r9], #4
 c016548:	f8dc a000 	ldr.w	sl, [ip]
 c01654c:	b2a3      	uxth	r3, r4
 c01654e:	454f      	cmp	r7, r9
 c016550:	fa1f fa8a 	uxth.w	sl, sl
 c016554:	fb0b a303 	mla	r3, fp, r3, sl
 c016558:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 c01655c:	f8dc 4000 	ldr.w	r4, [ip]
 c016560:	4443      	add	r3, r8
 c016562:	ea4f 4814 	mov.w	r8, r4, lsr #16
 c016566:	fb0b 840a 	mla	r4, fp, sl, r8
 c01656a:	46e2      	mov	sl, ip
 c01656c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 c016570:	b29b      	uxth	r3, r3
 c016572:	ea4f 4814 	mov.w	r8, r4, lsr #16
 c016576:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 c01657a:	f84a 3b04 	str.w	r3, [sl], #4
 c01657e:	d82b      	bhi.n	c0165d8 <__multiply+0x11e>
 c016580:	f8cc 8004 	str.w	r8, [ip, #4]
 c016584:	9b01      	ldr	r3, [sp, #4]
 c016586:	3204      	adds	r2, #4
 c016588:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 c01658c:	f1ba 0f00 	cmp.w	sl, #0
 c016590:	d020      	beq.n	c0165d4 <__multiply+0x11a>
 c016592:	682b      	ldr	r3, [r5, #0]
 c016594:	4689      	mov	r9, r1
 c016596:	46a8      	mov	r8, r5
 c016598:	f04f 0b00 	mov.w	fp, #0
 c01659c:	f8b9 c000 	ldrh.w	ip, [r9]
 c0165a0:	b29b      	uxth	r3, r3
 c0165a2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 c0165a6:	fb0a 440c 	mla	r4, sl, ip, r4
 c0165aa:	46c4      	mov	ip, r8
 c0165ac:	445c      	add	r4, fp
 c0165ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 c0165b2:	f84c 3b04 	str.w	r3, [ip], #4
 c0165b6:	f859 3b04 	ldr.w	r3, [r9], #4
 c0165ba:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 c0165be:	0c1b      	lsrs	r3, r3, #16
 c0165c0:	454f      	cmp	r7, r9
 c0165c2:	fb0a b303 	mla	r3, sl, r3, fp
 c0165c6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 c0165ca:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 c0165ce:	d805      	bhi.n	c0165dc <__multiply+0x122>
 c0165d0:	f8c8 3004 	str.w	r3, [r8, #4]
 c0165d4:	3504      	adds	r5, #4
 c0165d6:	e79b      	b.n	c016510 <__multiply+0x56>
 c0165d8:	46d4      	mov	ip, sl
 c0165da:	e7b3      	b.n	c016544 <__multiply+0x8a>
 c0165dc:	46e0      	mov	r8, ip
 c0165de:	e7dd      	b.n	c01659c <__multiply+0xe2>
 c0165e0:	3e01      	subs	r6, #1
 c0165e2:	e799      	b.n	c016518 <__multiply+0x5e>

0c0165e4 <__pow5mult>:
 c0165e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c0165e8:	4615      	mov	r5, r2
 c0165ea:	f012 0203 	ands.w	r2, r2, #3
 c0165ee:	4606      	mov	r6, r0
 c0165f0:	460f      	mov	r7, r1
 c0165f2:	d007      	beq.n	c016604 <__pow5mult+0x20>
 c0165f4:	3a01      	subs	r2, #1
 c0165f6:	4c21      	ldr	r4, [pc, #132]	; (c01667c <__pow5mult+0x98>)
 c0165f8:	2300      	movs	r3, #0
 c0165fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 c0165fe:	f7ff fec8 	bl	c016392 <__multadd>
 c016602:	4607      	mov	r7, r0
 c016604:	10ad      	asrs	r5, r5, #2
 c016606:	d035      	beq.n	c016674 <__pow5mult+0x90>
 c016608:	6a74      	ldr	r4, [r6, #36]	; 0x24
 c01660a:	b93c      	cbnz	r4, c01661c <__pow5mult+0x38>
 c01660c:	2010      	movs	r0, #16
 c01660e:	f7fe f997 	bl	c014940 <malloc>
 c016612:	6270      	str	r0, [r6, #36]	; 0x24
 c016614:	6004      	str	r4, [r0, #0]
 c016616:	60c4      	str	r4, [r0, #12]
 c016618:	e9c0 4401 	strd	r4, r4, [r0, #4]
 c01661c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 c016620:	f8d8 4008 	ldr.w	r4, [r8, #8]
 c016624:	b94c      	cbnz	r4, c01663a <__pow5mult+0x56>
 c016626:	f240 2171 	movw	r1, #625	; 0x271
 c01662a:	4630      	mov	r0, r6
 c01662c:	f7ff ff3c 	bl	c0164a8 <__i2b>
 c016630:	2300      	movs	r3, #0
 c016632:	4604      	mov	r4, r0
 c016634:	f8c8 0008 	str.w	r0, [r8, #8]
 c016638:	6003      	str	r3, [r0, #0]
 c01663a:	f04f 0800 	mov.w	r8, #0
 c01663e:	07eb      	lsls	r3, r5, #31
 c016640:	d50a      	bpl.n	c016658 <__pow5mult+0x74>
 c016642:	4639      	mov	r1, r7
 c016644:	4622      	mov	r2, r4
 c016646:	4630      	mov	r0, r6
 c016648:	f7ff ff37 	bl	c0164ba <__multiply>
 c01664c:	4681      	mov	r9, r0
 c01664e:	4639      	mov	r1, r7
 c016650:	4630      	mov	r0, r6
 c016652:	464f      	mov	r7, r9
 c016654:	f7ff fe86 	bl	c016364 <_Bfree>
 c016658:	106d      	asrs	r5, r5, #1
 c01665a:	d00b      	beq.n	c016674 <__pow5mult+0x90>
 c01665c:	6820      	ldr	r0, [r4, #0]
 c01665e:	b938      	cbnz	r0, c016670 <__pow5mult+0x8c>
 c016660:	4622      	mov	r2, r4
 c016662:	4621      	mov	r1, r4
 c016664:	4630      	mov	r0, r6
 c016666:	f7ff ff28 	bl	c0164ba <__multiply>
 c01666a:	6020      	str	r0, [r4, #0]
 c01666c:	f8c0 8000 	str.w	r8, [r0]
 c016670:	4604      	mov	r4, r0
 c016672:	e7e4      	b.n	c01663e <__pow5mult+0x5a>
 c016674:	4638      	mov	r0, r7
 c016676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c01667a:	bf00      	nop
 c01667c:	0c017210 	.word	0x0c017210

0c016680 <__lshift>:
 c016680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c016684:	460c      	mov	r4, r1
 c016686:	ea4f 1a62 	mov.w	sl, r2, asr #5
 c01668a:	4607      	mov	r7, r0
 c01668c:	4616      	mov	r6, r2
 c01668e:	6923      	ldr	r3, [r4, #16]
 c016690:	6849      	ldr	r1, [r1, #4]
 c016692:	eb0a 0903 	add.w	r9, sl, r3
 c016696:	68a3      	ldr	r3, [r4, #8]
 c016698:	f109 0501 	add.w	r5, r9, #1
 c01669c:	42ab      	cmp	r3, r5
 c01669e:	db32      	blt.n	c016706 <__lshift+0x86>
 c0166a0:	4638      	mov	r0, r7
 c0166a2:	f7ff fe2b 	bl	c0162fc <_Balloc>
 c0166a6:	2300      	movs	r3, #0
 c0166a8:	4680      	mov	r8, r0
 c0166aa:	f100 0114 	add.w	r1, r0, #20
 c0166ae:	461a      	mov	r2, r3
 c0166b0:	4553      	cmp	r3, sl
 c0166b2:	db2b      	blt.n	c01670c <__lshift+0x8c>
 c0166b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 c0166b8:	f104 0314 	add.w	r3, r4, #20
 c0166bc:	6920      	ldr	r0, [r4, #16]
 c0166be:	f016 021f 	ands.w	r2, r6, #31
 c0166c2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 c0166c6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 c0166ca:	d025      	beq.n	c016718 <__lshift+0x98>
 c0166cc:	f1c2 0e20 	rsb	lr, r2, #32
 c0166d0:	2000      	movs	r0, #0
 c0166d2:	681e      	ldr	r6, [r3, #0]
 c0166d4:	468a      	mov	sl, r1
 c0166d6:	4096      	lsls	r6, r2
 c0166d8:	4330      	orrs	r0, r6
 c0166da:	f84a 0b04 	str.w	r0, [sl], #4
 c0166de:	f853 0b04 	ldr.w	r0, [r3], #4
 c0166e2:	459c      	cmp	ip, r3
 c0166e4:	fa20 f00e 	lsr.w	r0, r0, lr
 c0166e8:	d814      	bhi.n	c016714 <__lshift+0x94>
 c0166ea:	6048      	str	r0, [r1, #4]
 c0166ec:	b108      	cbz	r0, c0166f2 <__lshift+0x72>
 c0166ee:	f109 0502 	add.w	r5, r9, #2
 c0166f2:	3d01      	subs	r5, #1
 c0166f4:	4638      	mov	r0, r7
 c0166f6:	4621      	mov	r1, r4
 c0166f8:	f8c8 5010 	str.w	r5, [r8, #16]
 c0166fc:	f7ff fe32 	bl	c016364 <_Bfree>
 c016700:	4640      	mov	r0, r8
 c016702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c016706:	3101      	adds	r1, #1
 c016708:	005b      	lsls	r3, r3, #1
 c01670a:	e7c7      	b.n	c01669c <__lshift+0x1c>
 c01670c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 c016710:	3301      	adds	r3, #1
 c016712:	e7cd      	b.n	c0166b0 <__lshift+0x30>
 c016714:	4651      	mov	r1, sl
 c016716:	e7dc      	b.n	c0166d2 <__lshift+0x52>
 c016718:	3904      	subs	r1, #4
 c01671a:	f853 2b04 	ldr.w	r2, [r3], #4
 c01671e:	459c      	cmp	ip, r3
 c016720:	f841 2f04 	str.w	r2, [r1, #4]!
 c016724:	d8f9      	bhi.n	c01671a <__lshift+0x9a>
 c016726:	e7e4      	b.n	c0166f2 <__lshift+0x72>

0c016728 <__mcmp>:
 c016728:	6903      	ldr	r3, [r0, #16]
 c01672a:	690a      	ldr	r2, [r1, #16]
 c01672c:	1a9b      	subs	r3, r3, r2
 c01672e:	b530      	push	{r4, r5, lr}
 c016730:	d10c      	bne.n	c01674c <__mcmp+0x24>
 c016732:	0092      	lsls	r2, r2, #2
 c016734:	3014      	adds	r0, #20
 c016736:	3114      	adds	r1, #20
 c016738:	1884      	adds	r4, r0, r2
 c01673a:	4411      	add	r1, r2
 c01673c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 c016740:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 c016744:	4295      	cmp	r5, r2
 c016746:	d003      	beq.n	c016750 <__mcmp+0x28>
 c016748:	d305      	bcc.n	c016756 <__mcmp+0x2e>
 c01674a:	2301      	movs	r3, #1
 c01674c:	4618      	mov	r0, r3
 c01674e:	bd30      	pop	{r4, r5, pc}
 c016750:	42a0      	cmp	r0, r4
 c016752:	d3f3      	bcc.n	c01673c <__mcmp+0x14>
 c016754:	e7fa      	b.n	c01674c <__mcmp+0x24>
 c016756:	f04f 33ff 	mov.w	r3, #4294967295
 c01675a:	e7f7      	b.n	c01674c <__mcmp+0x24>

0c01675c <__mdiff>:
 c01675c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c016760:	460d      	mov	r5, r1
 c016762:	4607      	mov	r7, r0
 c016764:	4611      	mov	r1, r2
 c016766:	4614      	mov	r4, r2
 c016768:	4628      	mov	r0, r5
 c01676a:	f7ff ffdd 	bl	c016728 <__mcmp>
 c01676e:	1e06      	subs	r6, r0, #0
 c016770:	d108      	bne.n	c016784 <__mdiff+0x28>
 c016772:	4631      	mov	r1, r6
 c016774:	4638      	mov	r0, r7
 c016776:	f7ff fdc1 	bl	c0162fc <_Balloc>
 c01677a:	2301      	movs	r3, #1
 c01677c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 c016780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c016784:	bfa3      	ittte	ge
 c016786:	4623      	movge	r3, r4
 c016788:	462c      	movge	r4, r5
 c01678a:	2600      	movge	r6, #0
 c01678c:	2601      	movlt	r6, #1
 c01678e:	bfa8      	it	ge
 c016790:	461d      	movge	r5, r3
 c016792:	6861      	ldr	r1, [r4, #4]
 c016794:	4638      	mov	r0, r7
 c016796:	f7ff fdb1 	bl	c0162fc <_Balloc>
 c01679a:	f105 0914 	add.w	r9, r5, #20
 c01679e:	60c6      	str	r6, [r0, #12]
 c0167a0:	f104 0214 	add.w	r2, r4, #20
 c0167a4:	6926      	ldr	r6, [r4, #16]
 c0167a6:	f100 0114 	add.w	r1, r0, #20
 c0167aa:	692b      	ldr	r3, [r5, #16]
 c0167ac:	f04f 0e00 	mov.w	lr, #0
 c0167b0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 c0167b4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 c0167b8:	f852 ab04 	ldr.w	sl, [r2], #4
 c0167bc:	f859 5b04 	ldr.w	r5, [r9], #4
 c0167c0:	fa1f f38a 	uxth.w	r3, sl
 c0167c4:	4694      	mov	ip, r2
 c0167c6:	b2ac      	uxth	r4, r5
 c0167c8:	45c8      	cmp	r8, r9
 c0167ca:	4473      	add	r3, lr
 c0167cc:	eba3 0304 	sub.w	r3, r3, r4
 c0167d0:	ea4f 4415 	mov.w	r4, r5, lsr #16
 c0167d4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 c0167d8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 c0167dc:	b29b      	uxth	r3, r3
 c0167de:	ea4f 4e24 	mov.w	lr, r4, asr #16
 c0167e2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 c0167e6:	f841 4b04 	str.w	r4, [r1], #4
 c0167ea:	d8e5      	bhi.n	c0167b8 <__mdiff+0x5c>
 c0167ec:	45bc      	cmp	ip, r7
 c0167ee:	d304      	bcc.n	c0167fa <__mdiff+0x9e>
 c0167f0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 c0167f4:	b183      	cbz	r3, c016818 <__mdiff+0xbc>
 c0167f6:	6106      	str	r6, [r0, #16]
 c0167f8:	e7c2      	b.n	c016780 <__mdiff+0x24>
 c0167fa:	f85c 4b04 	ldr.w	r4, [ip], #4
 c0167fe:	b2a2      	uxth	r2, r4
 c016800:	4472      	add	r2, lr
 c016802:	1413      	asrs	r3, r2, #16
 c016804:	b292      	uxth	r2, r2
 c016806:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 c01680a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 c01680e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 c016812:	f841 2b04 	str.w	r2, [r1], #4
 c016816:	e7e9      	b.n	c0167ec <__mdiff+0x90>
 c016818:	3e01      	subs	r6, #1
 c01681a:	e7e9      	b.n	c0167f0 <__mdiff+0x94>

0c01681c <__d2b>:
 c01681c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 c016820:	4699      	mov	r9, r3
 c016822:	2101      	movs	r1, #1
 c016824:	4690      	mov	r8, r2
 c016826:	f3c9 540a 	ubfx	r4, r9, #20, #11
 c01682a:	e9dd 650a 	ldrd	r6, r5, [sp, #40]	; 0x28
 c01682e:	f7ff fd65 	bl	c0162fc <_Balloc>
 c016832:	f3c9 0313 	ubfx	r3, r9, #0, #20
 c016836:	4607      	mov	r7, r0
 c016838:	bb34      	cbnz	r4, c016888 <__d2b+0x6c>
 c01683a:	f1b8 0200 	subs.w	r2, r8, #0
 c01683e:	9301      	str	r3, [sp, #4]
 c016840:	d027      	beq.n	c016892 <__d2b+0x76>
 c016842:	a802      	add	r0, sp, #8
 c016844:	f840 2d08 	str.w	r2, [r0, #-8]!
 c016848:	f7ff fdff 	bl	c01644a <__lo0bits>
 c01684c:	9900      	ldr	r1, [sp, #0]
 c01684e:	b1f0      	cbz	r0, c01688e <__d2b+0x72>
 c016850:	9a01      	ldr	r2, [sp, #4]
 c016852:	f1c0 0320 	rsb	r3, r0, #32
 c016856:	fa02 f303 	lsl.w	r3, r2, r3
 c01685a:	40c2      	lsrs	r2, r0
 c01685c:	430b      	orrs	r3, r1
 c01685e:	9201      	str	r2, [sp, #4]
 c016860:	617b      	str	r3, [r7, #20]
 c016862:	9b01      	ldr	r3, [sp, #4]
 c016864:	2b00      	cmp	r3, #0
 c016866:	61bb      	str	r3, [r7, #24]
 c016868:	bf14      	ite	ne
 c01686a:	2102      	movne	r1, #2
 c01686c:	2101      	moveq	r1, #1
 c01686e:	6139      	str	r1, [r7, #16]
 c016870:	b1c4      	cbz	r4, c0168a4 <__d2b+0x88>
 c016872:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 c016876:	4404      	add	r4, r0
 c016878:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 c01687c:	6034      	str	r4, [r6, #0]
 c01687e:	6028      	str	r0, [r5, #0]
 c016880:	4638      	mov	r0, r7
 c016882:	b003      	add	sp, #12
 c016884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 c016888:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c01688c:	e7d5      	b.n	c01683a <__d2b+0x1e>
 c01688e:	6179      	str	r1, [r7, #20]
 c016890:	e7e7      	b.n	c016862 <__d2b+0x46>
 c016892:	a801      	add	r0, sp, #4
 c016894:	f7ff fdd9 	bl	c01644a <__lo0bits>
 c016898:	9b01      	ldr	r3, [sp, #4]
 c01689a:	2101      	movs	r1, #1
 c01689c:	3020      	adds	r0, #32
 c01689e:	617b      	str	r3, [r7, #20]
 c0168a0:	6139      	str	r1, [r7, #16]
 c0168a2:	e7e5      	b.n	c016870 <__d2b+0x54>
 c0168a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 c0168a8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 c0168ac:	6030      	str	r0, [r6, #0]
 c0168ae:	6918      	ldr	r0, [r3, #16]
 c0168b0:	f7ff fdac 	bl	c01640c <__hi0bits>
 c0168b4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 c0168b8:	e7e1      	b.n	c01687e <__d2b+0x62>

0c0168ba <__sfputc_r>:
 c0168ba:	6893      	ldr	r3, [r2, #8]
 c0168bc:	3b01      	subs	r3, #1
 c0168be:	2b00      	cmp	r3, #0
 c0168c0:	6093      	str	r3, [r2, #8]
 c0168c2:	b410      	push	{r4}
 c0168c4:	da08      	bge.n	c0168d8 <__sfputc_r+0x1e>
 c0168c6:	6994      	ldr	r4, [r2, #24]
 c0168c8:	42a3      	cmp	r3, r4
 c0168ca:	db01      	blt.n	c0168d0 <__sfputc_r+0x16>
 c0168cc:	290a      	cmp	r1, #10
 c0168ce:	d103      	bne.n	c0168d8 <__sfputc_r+0x1e>
 c0168d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 c0168d4:	f000 b974 	b.w	c016bc0 <__swbuf_r>
 c0168d8:	6813      	ldr	r3, [r2, #0]
 c0168da:	1c58      	adds	r0, r3, #1
 c0168dc:	6010      	str	r0, [r2, #0]
 c0168de:	4608      	mov	r0, r1
 c0168e0:	7019      	strb	r1, [r3, #0]
 c0168e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 c0168e6:	4770      	bx	lr

0c0168e8 <__sfputs_r>:
 c0168e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0168ea:	4606      	mov	r6, r0
 c0168ec:	460f      	mov	r7, r1
 c0168ee:	4614      	mov	r4, r2
 c0168f0:	18d5      	adds	r5, r2, r3
 c0168f2:	42ac      	cmp	r4, r5
 c0168f4:	d101      	bne.n	c0168fa <__sfputs_r+0x12>
 c0168f6:	2000      	movs	r0, #0
 c0168f8:	e007      	b.n	c01690a <__sfputs_r+0x22>
 c0168fa:	463a      	mov	r2, r7
 c0168fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 c016900:	4630      	mov	r0, r6
 c016902:	f7ff ffda 	bl	c0168ba <__sfputc_r>
 c016906:	1c43      	adds	r3, r0, #1
 c016908:	d1f3      	bne.n	c0168f2 <__sfputs_r+0xa>
 c01690a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0c01690c <_vfiprintf_r>:
 c01690c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c016910:	460c      	mov	r4, r1
 c016912:	b09d      	sub	sp, #116	; 0x74
 c016914:	4617      	mov	r7, r2
 c016916:	461d      	mov	r5, r3
 c016918:	4606      	mov	r6, r0
 c01691a:	b118      	cbz	r0, c016924 <_vfiprintf_r+0x18>
 c01691c:	6983      	ldr	r3, [r0, #24]
 c01691e:	b90b      	cbnz	r3, c016924 <_vfiprintf_r+0x18>
 c016920:	f7ff fc44 	bl	c0161ac <__sinit>
 c016924:	4b7c      	ldr	r3, [pc, #496]	; (c016b18 <_vfiprintf_r+0x20c>)
 c016926:	429c      	cmp	r4, r3
 c016928:	d158      	bne.n	c0169dc <_vfiprintf_r+0xd0>
 c01692a:	6874      	ldr	r4, [r6, #4]
 c01692c:	89a3      	ldrh	r3, [r4, #12]
 c01692e:	0718      	lsls	r0, r3, #28
 c016930:	d55e      	bpl.n	c0169f0 <_vfiprintf_r+0xe4>
 c016932:	6923      	ldr	r3, [r4, #16]
 c016934:	2b00      	cmp	r3, #0
 c016936:	d05b      	beq.n	c0169f0 <_vfiprintf_r+0xe4>
 c016938:	2300      	movs	r3, #0
 c01693a:	f04f 0b01 	mov.w	fp, #1
 c01693e:	9503      	str	r5, [sp, #12]
 c016940:	9309      	str	r3, [sp, #36]	; 0x24
 c016942:	2320      	movs	r3, #32
 c016944:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 c016948:	2330      	movs	r3, #48	; 0x30
 c01694a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 c01694e:	46b8      	mov	r8, r7
 c016950:	4645      	mov	r5, r8
 c016952:	f815 3b01 	ldrb.w	r3, [r5], #1
 c016956:	b10b      	cbz	r3, c01695c <_vfiprintf_r+0x50>
 c016958:	2b25      	cmp	r3, #37	; 0x25
 c01695a:	d154      	bne.n	c016a06 <_vfiprintf_r+0xfa>
 c01695c:	ebb8 0a07 	subs.w	sl, r8, r7
 c016960:	d00b      	beq.n	c01697a <_vfiprintf_r+0x6e>
 c016962:	4653      	mov	r3, sl
 c016964:	463a      	mov	r2, r7
 c016966:	4621      	mov	r1, r4
 c016968:	4630      	mov	r0, r6
 c01696a:	f7ff ffbd 	bl	c0168e8 <__sfputs_r>
 c01696e:	3001      	adds	r0, #1
 c016970:	f000 80c2 	beq.w	c016af8 <_vfiprintf_r+0x1ec>
 c016974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c016976:	4453      	add	r3, sl
 c016978:	9309      	str	r3, [sp, #36]	; 0x24
 c01697a:	f898 3000 	ldrb.w	r3, [r8]
 c01697e:	2b00      	cmp	r3, #0
 c016980:	f000 80ba 	beq.w	c016af8 <_vfiprintf_r+0x1ec>
 c016984:	2300      	movs	r3, #0
 c016986:	f04f 32ff 	mov.w	r2, #4294967295
 c01698a:	9304      	str	r3, [sp, #16]
 c01698c:	9307      	str	r3, [sp, #28]
 c01698e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 c016992:	931a      	str	r3, [sp, #104]	; 0x68
 c016994:	e9cd 2305 	strd	r2, r3, [sp, #20]
 c016998:	46a8      	mov	r8, r5
 c01699a:	2205      	movs	r2, #5
 c01699c:	485f      	ldr	r0, [pc, #380]	; (c016b1c <_vfiprintf_r+0x210>)
 c01699e:	f818 1b01 	ldrb.w	r1, [r8], #1
 c0169a2:	f7ff fc9b 	bl	c0162dc <memchr>
 c0169a6:	9b04      	ldr	r3, [sp, #16]
 c0169a8:	bb78      	cbnz	r0, c016a0a <_vfiprintf_r+0xfe>
 c0169aa:	06d9      	lsls	r1, r3, #27
 c0169ac:	bf44      	itt	mi
 c0169ae:	2220      	movmi	r2, #32
 c0169b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 c0169b4:	071a      	lsls	r2, r3, #28
 c0169b6:	bf44      	itt	mi
 c0169b8:	222b      	movmi	r2, #43	; 0x2b
 c0169ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 c0169be:	782a      	ldrb	r2, [r5, #0]
 c0169c0:	2a2a      	cmp	r2, #42	; 0x2a
 c0169c2:	d02a      	beq.n	c016a1a <_vfiprintf_r+0x10e>
 c0169c4:	46a8      	mov	r8, r5
 c0169c6:	9a07      	ldr	r2, [sp, #28]
 c0169c8:	2000      	movs	r0, #0
 c0169ca:	250a      	movs	r5, #10
 c0169cc:	4641      	mov	r1, r8
 c0169ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 c0169d2:	3b30      	subs	r3, #48	; 0x30
 c0169d4:	2b09      	cmp	r3, #9
 c0169d6:	d969      	bls.n	c016aac <_vfiprintf_r+0x1a0>
 c0169d8:	b360      	cbz	r0, c016a34 <_vfiprintf_r+0x128>
 c0169da:	e024      	b.n	c016a26 <_vfiprintf_r+0x11a>
 c0169dc:	4b50      	ldr	r3, [pc, #320]	; (c016b20 <_vfiprintf_r+0x214>)
 c0169de:	429c      	cmp	r4, r3
 c0169e0:	d101      	bne.n	c0169e6 <_vfiprintf_r+0xda>
 c0169e2:	68b4      	ldr	r4, [r6, #8]
 c0169e4:	e7a2      	b.n	c01692c <_vfiprintf_r+0x20>
 c0169e6:	4b4f      	ldr	r3, [pc, #316]	; (c016b24 <_vfiprintf_r+0x218>)
 c0169e8:	429c      	cmp	r4, r3
 c0169ea:	bf08      	it	eq
 c0169ec:	68f4      	ldreq	r4, [r6, #12]
 c0169ee:	e79d      	b.n	c01692c <_vfiprintf_r+0x20>
 c0169f0:	4621      	mov	r1, r4
 c0169f2:	4630      	mov	r0, r6
 c0169f4:	f000 f948 	bl	c016c88 <__swsetup_r>
 c0169f8:	2800      	cmp	r0, #0
 c0169fa:	d09d      	beq.n	c016938 <_vfiprintf_r+0x2c>
 c0169fc:	f04f 30ff 	mov.w	r0, #4294967295
 c016a00:	b01d      	add	sp, #116	; 0x74
 c016a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c016a06:	46a8      	mov	r8, r5
 c016a08:	e7a2      	b.n	c016950 <_vfiprintf_r+0x44>
 c016a0a:	4a44      	ldr	r2, [pc, #272]	; (c016b1c <_vfiprintf_r+0x210>)
 c016a0c:	4645      	mov	r5, r8
 c016a0e:	1a80      	subs	r0, r0, r2
 c016a10:	fa0b f000 	lsl.w	r0, fp, r0
 c016a14:	4318      	orrs	r0, r3
 c016a16:	9004      	str	r0, [sp, #16]
 c016a18:	e7be      	b.n	c016998 <_vfiprintf_r+0x8c>
 c016a1a:	9a03      	ldr	r2, [sp, #12]
 c016a1c:	1d11      	adds	r1, r2, #4
 c016a1e:	6812      	ldr	r2, [r2, #0]
 c016a20:	2a00      	cmp	r2, #0
 c016a22:	9103      	str	r1, [sp, #12]
 c016a24:	db01      	blt.n	c016a2a <_vfiprintf_r+0x11e>
 c016a26:	9207      	str	r2, [sp, #28]
 c016a28:	e004      	b.n	c016a34 <_vfiprintf_r+0x128>
 c016a2a:	4252      	negs	r2, r2
 c016a2c:	f043 0302 	orr.w	r3, r3, #2
 c016a30:	9207      	str	r2, [sp, #28]
 c016a32:	9304      	str	r3, [sp, #16]
 c016a34:	f898 3000 	ldrb.w	r3, [r8]
 c016a38:	2b2e      	cmp	r3, #46	; 0x2e
 c016a3a:	d10e      	bne.n	c016a5a <_vfiprintf_r+0x14e>
 c016a3c:	f898 3001 	ldrb.w	r3, [r8, #1]
 c016a40:	2b2a      	cmp	r3, #42	; 0x2a
 c016a42:	d138      	bne.n	c016ab6 <_vfiprintf_r+0x1aa>
 c016a44:	9b03      	ldr	r3, [sp, #12]
 c016a46:	f108 0802 	add.w	r8, r8, #2
 c016a4a:	1d1a      	adds	r2, r3, #4
 c016a4c:	681b      	ldr	r3, [r3, #0]
 c016a4e:	2b00      	cmp	r3, #0
 c016a50:	9203      	str	r2, [sp, #12]
 c016a52:	bfb8      	it	lt
 c016a54:	f04f 33ff 	movlt.w	r3, #4294967295
 c016a58:	9305      	str	r3, [sp, #20]
 c016a5a:	4d33      	ldr	r5, [pc, #204]	; (c016b28 <_vfiprintf_r+0x21c>)
 c016a5c:	2203      	movs	r2, #3
 c016a5e:	f898 1000 	ldrb.w	r1, [r8]
 c016a62:	4628      	mov	r0, r5
 c016a64:	f7ff fc3a 	bl	c0162dc <memchr>
 c016a68:	b140      	cbz	r0, c016a7c <_vfiprintf_r+0x170>
 c016a6a:	2340      	movs	r3, #64	; 0x40
 c016a6c:	1b40      	subs	r0, r0, r5
 c016a6e:	f108 0801 	add.w	r8, r8, #1
 c016a72:	fa03 f000 	lsl.w	r0, r3, r0
 c016a76:	9b04      	ldr	r3, [sp, #16]
 c016a78:	4303      	orrs	r3, r0
 c016a7a:	9304      	str	r3, [sp, #16]
 c016a7c:	f898 1000 	ldrb.w	r1, [r8]
 c016a80:	2206      	movs	r2, #6
 c016a82:	482a      	ldr	r0, [pc, #168]	; (c016b2c <_vfiprintf_r+0x220>)
 c016a84:	f108 0701 	add.w	r7, r8, #1
 c016a88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 c016a8c:	f7ff fc26 	bl	c0162dc <memchr>
 c016a90:	2800      	cmp	r0, #0
 c016a92:	d037      	beq.n	c016b04 <_vfiprintf_r+0x1f8>
 c016a94:	4b26      	ldr	r3, [pc, #152]	; (c016b30 <_vfiprintf_r+0x224>)
 c016a96:	bb1b      	cbnz	r3, c016ae0 <_vfiprintf_r+0x1d4>
 c016a98:	9b03      	ldr	r3, [sp, #12]
 c016a9a:	3307      	adds	r3, #7
 c016a9c:	f023 0307 	bic.w	r3, r3, #7
 c016aa0:	3308      	adds	r3, #8
 c016aa2:	9303      	str	r3, [sp, #12]
 c016aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c016aa6:	444b      	add	r3, r9
 c016aa8:	9309      	str	r3, [sp, #36]	; 0x24
 c016aaa:	e750      	b.n	c01694e <_vfiprintf_r+0x42>
 c016aac:	fb05 3202 	mla	r2, r5, r2, r3
 c016ab0:	2001      	movs	r0, #1
 c016ab2:	4688      	mov	r8, r1
 c016ab4:	e78a      	b.n	c0169cc <_vfiprintf_r+0xc0>
 c016ab6:	2300      	movs	r3, #0
 c016ab8:	f108 0801 	add.w	r8, r8, #1
 c016abc:	250a      	movs	r5, #10
 c016abe:	4619      	mov	r1, r3
 c016ac0:	9305      	str	r3, [sp, #20]
 c016ac2:	4640      	mov	r0, r8
 c016ac4:	f810 2b01 	ldrb.w	r2, [r0], #1
 c016ac8:	3a30      	subs	r2, #48	; 0x30
 c016aca:	2a09      	cmp	r2, #9
 c016acc:	d903      	bls.n	c016ad6 <_vfiprintf_r+0x1ca>
 c016ace:	2b00      	cmp	r3, #0
 c016ad0:	d0c3      	beq.n	c016a5a <_vfiprintf_r+0x14e>
 c016ad2:	9105      	str	r1, [sp, #20]
 c016ad4:	e7c1      	b.n	c016a5a <_vfiprintf_r+0x14e>
 c016ad6:	fb05 2101 	mla	r1, r5, r1, r2
 c016ada:	2301      	movs	r3, #1
 c016adc:	4680      	mov	r8, r0
 c016ade:	e7f0      	b.n	c016ac2 <_vfiprintf_r+0x1b6>
 c016ae0:	ab03      	add	r3, sp, #12
 c016ae2:	4622      	mov	r2, r4
 c016ae4:	a904      	add	r1, sp, #16
 c016ae6:	4630      	mov	r0, r6
 c016ae8:	9300      	str	r3, [sp, #0]
 c016aea:	4b12      	ldr	r3, [pc, #72]	; (c016b34 <_vfiprintf_r+0x228>)
 c016aec:	f7fe f8bc 	bl	c014c68 <_printf_float>
 c016af0:	f1b0 3fff 	cmp.w	r0, #4294967295
 c016af4:	4681      	mov	r9, r0
 c016af6:	d1d5      	bne.n	c016aa4 <_vfiprintf_r+0x198>
 c016af8:	89a3      	ldrh	r3, [r4, #12]
 c016afa:	065b      	lsls	r3, r3, #25
 c016afc:	f53f af7e 	bmi.w	c0169fc <_vfiprintf_r+0xf0>
 c016b00:	9809      	ldr	r0, [sp, #36]	; 0x24
 c016b02:	e77d      	b.n	c016a00 <_vfiprintf_r+0xf4>
 c016b04:	ab03      	add	r3, sp, #12
 c016b06:	4622      	mov	r2, r4
 c016b08:	a904      	add	r1, sp, #16
 c016b0a:	4630      	mov	r0, r6
 c016b0c:	9300      	str	r3, [sp, #0]
 c016b0e:	4b09      	ldr	r3, [pc, #36]	; (c016b34 <_vfiprintf_r+0x228>)
 c016b10:	f7fe fb68 	bl	c0151e4 <_printf_i>
 c016b14:	e7ec      	b.n	c016af0 <_vfiprintf_r+0x1e4>
 c016b16:	bf00      	nop
 c016b18:	0c0170dc 	.word	0x0c0170dc
 c016b1c:	0c01721c 	.word	0x0c01721c
 c016b20:	0c0170fc 	.word	0x0c0170fc
 c016b24:	0c0170bc 	.word	0x0c0170bc
 c016b28:	0c017222 	.word	0x0c017222
 c016b2c:	0c017226 	.word	0x0c017226
 c016b30:	0c014c69 	.word	0x0c014c69
 c016b34:	0c0168e9 	.word	0x0c0168e9

0c016b38 <__sread>:
 c016b38:	b510      	push	{r4, lr}
 c016b3a:	460c      	mov	r4, r1
 c016b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c016b40:	f000 fa56 	bl	c016ff0 <_read_r>
 c016b44:	2800      	cmp	r0, #0
 c016b46:	bfab      	itete	ge
 c016b48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 c016b4a:	89a3      	ldrhlt	r3, [r4, #12]
 c016b4c:	181b      	addge	r3, r3, r0
 c016b4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 c016b52:	bfac      	ite	ge
 c016b54:	6563      	strge	r3, [r4, #84]	; 0x54
 c016b56:	81a3      	strhlt	r3, [r4, #12]
 c016b58:	bd10      	pop	{r4, pc}

0c016b5a <__swrite>:
 c016b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c016b5e:	461f      	mov	r7, r3
 c016b60:	898b      	ldrh	r3, [r1, #12]
 c016b62:	4605      	mov	r5, r0
 c016b64:	460c      	mov	r4, r1
 c016b66:	05db      	lsls	r3, r3, #23
 c016b68:	4616      	mov	r6, r2
 c016b6a:	d505      	bpl.n	c016b78 <__swrite+0x1e>
 c016b6c:	2302      	movs	r3, #2
 c016b6e:	2200      	movs	r2, #0
 c016b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c016b74:	f000 f9b4 	bl	c016ee0 <_lseek_r>
 c016b78:	89a3      	ldrh	r3, [r4, #12]
 c016b7a:	4632      	mov	r2, r6
 c016b7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c016b80:	4628      	mov	r0, r5
 c016b82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 c016b86:	81a3      	strh	r3, [r4, #12]
 c016b88:	463b      	mov	r3, r7
 c016b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 c016b8e:	f000 b869 	b.w	c016c64 <_write_r>

0c016b92 <__sseek>:
 c016b92:	b510      	push	{r4, lr}
 c016b94:	460c      	mov	r4, r1
 c016b96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c016b9a:	f000 f9a1 	bl	c016ee0 <_lseek_r>
 c016b9e:	1c43      	adds	r3, r0, #1
 c016ba0:	89a3      	ldrh	r3, [r4, #12]
 c016ba2:	bf15      	itete	ne
 c016ba4:	6560      	strne	r0, [r4, #84]	; 0x54
 c016ba6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 c016baa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 c016bae:	81a3      	strheq	r3, [r4, #12]
 c016bb0:	bf18      	it	ne
 c016bb2:	81a3      	strhne	r3, [r4, #12]
 c016bb4:	bd10      	pop	{r4, pc}

0c016bb6 <__sclose>:
 c016bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c016bba:	f000 b8d3 	b.w	c016d64 <_close_r>
	...

0c016bc0 <__swbuf_r>:
 c016bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c016bc2:	460e      	mov	r6, r1
 c016bc4:	4614      	mov	r4, r2
 c016bc6:	4605      	mov	r5, r0
 c016bc8:	b118      	cbz	r0, c016bd2 <__swbuf_r+0x12>
 c016bca:	6983      	ldr	r3, [r0, #24]
 c016bcc:	b90b      	cbnz	r3, c016bd2 <__swbuf_r+0x12>
 c016bce:	f7ff faed 	bl	c0161ac <__sinit>
 c016bd2:	4b21      	ldr	r3, [pc, #132]	; (c016c58 <__swbuf_r+0x98>)
 c016bd4:	429c      	cmp	r4, r3
 c016bd6:	d12a      	bne.n	c016c2e <__swbuf_r+0x6e>
 c016bd8:	686c      	ldr	r4, [r5, #4]
 c016bda:	69a3      	ldr	r3, [r4, #24]
 c016bdc:	60a3      	str	r3, [r4, #8]
 c016bde:	89a3      	ldrh	r3, [r4, #12]
 c016be0:	071a      	lsls	r2, r3, #28
 c016be2:	d52e      	bpl.n	c016c42 <__swbuf_r+0x82>
 c016be4:	6923      	ldr	r3, [r4, #16]
 c016be6:	b363      	cbz	r3, c016c42 <__swbuf_r+0x82>
 c016be8:	6923      	ldr	r3, [r4, #16]
 c016bea:	b2f6      	uxtb	r6, r6
 c016bec:	6820      	ldr	r0, [r4, #0]
 c016bee:	4637      	mov	r7, r6
 c016bf0:	1ac0      	subs	r0, r0, r3
 c016bf2:	6963      	ldr	r3, [r4, #20]
 c016bf4:	4283      	cmp	r3, r0
 c016bf6:	dc04      	bgt.n	c016c02 <__swbuf_r+0x42>
 c016bf8:	4621      	mov	r1, r4
 c016bfa:	4628      	mov	r0, r5
 c016bfc:	f000 f946 	bl	c016e8c <_fflush_r>
 c016c00:	bb28      	cbnz	r0, c016c4e <__swbuf_r+0x8e>
 c016c02:	68a3      	ldr	r3, [r4, #8]
 c016c04:	3001      	adds	r0, #1
 c016c06:	3b01      	subs	r3, #1
 c016c08:	60a3      	str	r3, [r4, #8]
 c016c0a:	6823      	ldr	r3, [r4, #0]
 c016c0c:	1c5a      	adds	r2, r3, #1
 c016c0e:	6022      	str	r2, [r4, #0]
 c016c10:	701e      	strb	r6, [r3, #0]
 c016c12:	6963      	ldr	r3, [r4, #20]
 c016c14:	4283      	cmp	r3, r0
 c016c16:	d004      	beq.n	c016c22 <__swbuf_r+0x62>
 c016c18:	89a3      	ldrh	r3, [r4, #12]
 c016c1a:	07db      	lsls	r3, r3, #31
 c016c1c:	d519      	bpl.n	c016c52 <__swbuf_r+0x92>
 c016c1e:	2e0a      	cmp	r6, #10
 c016c20:	d117      	bne.n	c016c52 <__swbuf_r+0x92>
 c016c22:	4621      	mov	r1, r4
 c016c24:	4628      	mov	r0, r5
 c016c26:	f000 f931 	bl	c016e8c <_fflush_r>
 c016c2a:	b190      	cbz	r0, c016c52 <__swbuf_r+0x92>
 c016c2c:	e00f      	b.n	c016c4e <__swbuf_r+0x8e>
 c016c2e:	4b0b      	ldr	r3, [pc, #44]	; (c016c5c <__swbuf_r+0x9c>)
 c016c30:	429c      	cmp	r4, r3
 c016c32:	d101      	bne.n	c016c38 <__swbuf_r+0x78>
 c016c34:	68ac      	ldr	r4, [r5, #8]
 c016c36:	e7d0      	b.n	c016bda <__swbuf_r+0x1a>
 c016c38:	4b09      	ldr	r3, [pc, #36]	; (c016c60 <__swbuf_r+0xa0>)
 c016c3a:	429c      	cmp	r4, r3
 c016c3c:	bf08      	it	eq
 c016c3e:	68ec      	ldreq	r4, [r5, #12]
 c016c40:	e7cb      	b.n	c016bda <__swbuf_r+0x1a>
 c016c42:	4621      	mov	r1, r4
 c016c44:	4628      	mov	r0, r5
 c016c46:	f000 f81f 	bl	c016c88 <__swsetup_r>
 c016c4a:	2800      	cmp	r0, #0
 c016c4c:	d0cc      	beq.n	c016be8 <__swbuf_r+0x28>
 c016c4e:	f04f 37ff 	mov.w	r7, #4294967295
 c016c52:	4638      	mov	r0, r7
 c016c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c016c56:	bf00      	nop
 c016c58:	0c0170dc 	.word	0x0c0170dc
 c016c5c:	0c0170fc 	.word	0x0c0170fc
 c016c60:	0c0170bc 	.word	0x0c0170bc

0c016c64 <_write_r>:
 c016c64:	b538      	push	{r3, r4, r5, lr}
 c016c66:	4605      	mov	r5, r0
 c016c68:	4c06      	ldr	r4, [pc, #24]	; (c016c84 <_write_r+0x20>)
 c016c6a:	4608      	mov	r0, r1
 c016c6c:	4611      	mov	r1, r2
 c016c6e:	2200      	movs	r2, #0
 c016c70:	6022      	str	r2, [r4, #0]
 c016c72:	461a      	mov	r2, r3
 c016c74:	f01b ff80 	bl	c032b78 <_write>
 c016c78:	1c43      	adds	r3, r0, #1
 c016c7a:	d102      	bne.n	c016c82 <_write_r+0x1e>
 c016c7c:	6823      	ldr	r3, [r4, #0]
 c016c7e:	b103      	cbz	r3, c016c82 <_write_r+0x1e>
 c016c80:	602b      	str	r3, [r5, #0]
 c016c82:	bd38      	pop	{r3, r4, r5, pc}
 c016c84:	3003f2b0 	.word	0x3003f2b0

0c016c88 <__swsetup_r>:
 c016c88:	4b32      	ldr	r3, [pc, #200]	; (c016d54 <__swsetup_r+0xcc>)
 c016c8a:	b570      	push	{r4, r5, r6, lr}
 c016c8c:	681d      	ldr	r5, [r3, #0]
 c016c8e:	4606      	mov	r6, r0
 c016c90:	460c      	mov	r4, r1
 c016c92:	b125      	cbz	r5, c016c9e <__swsetup_r+0x16>
 c016c94:	69ab      	ldr	r3, [r5, #24]
 c016c96:	b913      	cbnz	r3, c016c9e <__swsetup_r+0x16>
 c016c98:	4628      	mov	r0, r5
 c016c9a:	f7ff fa87 	bl	c0161ac <__sinit>
 c016c9e:	4b2e      	ldr	r3, [pc, #184]	; (c016d58 <__swsetup_r+0xd0>)
 c016ca0:	429c      	cmp	r4, r3
 c016ca2:	d10f      	bne.n	c016cc4 <__swsetup_r+0x3c>
 c016ca4:	686c      	ldr	r4, [r5, #4]
 c016ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c016caa:	b29a      	uxth	r2, r3
 c016cac:	0715      	lsls	r5, r2, #28
 c016cae:	d42c      	bmi.n	c016d0a <__swsetup_r+0x82>
 c016cb0:	06d0      	lsls	r0, r2, #27
 c016cb2:	d411      	bmi.n	c016cd8 <__swsetup_r+0x50>
 c016cb4:	2209      	movs	r2, #9
 c016cb6:	6032      	str	r2, [r6, #0]
 c016cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c016cbc:	f04f 30ff 	mov.w	r0, #4294967295
 c016cc0:	81a3      	strh	r3, [r4, #12]
 c016cc2:	e03e      	b.n	c016d42 <__swsetup_r+0xba>
 c016cc4:	4b25      	ldr	r3, [pc, #148]	; (c016d5c <__swsetup_r+0xd4>)
 c016cc6:	429c      	cmp	r4, r3
 c016cc8:	d101      	bne.n	c016cce <__swsetup_r+0x46>
 c016cca:	68ac      	ldr	r4, [r5, #8]
 c016ccc:	e7eb      	b.n	c016ca6 <__swsetup_r+0x1e>
 c016cce:	4b24      	ldr	r3, [pc, #144]	; (c016d60 <__swsetup_r+0xd8>)
 c016cd0:	429c      	cmp	r4, r3
 c016cd2:	bf08      	it	eq
 c016cd4:	68ec      	ldreq	r4, [r5, #12]
 c016cd6:	e7e6      	b.n	c016ca6 <__swsetup_r+0x1e>
 c016cd8:	0751      	lsls	r1, r2, #29
 c016cda:	d512      	bpl.n	c016d02 <__swsetup_r+0x7a>
 c016cdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c016cde:	b141      	cbz	r1, c016cf2 <__swsetup_r+0x6a>
 c016ce0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c016ce4:	4299      	cmp	r1, r3
 c016ce6:	d002      	beq.n	c016cee <__swsetup_r+0x66>
 c016ce8:	4630      	mov	r0, r6
 c016cea:	f7fd fe83 	bl	c0149f4 <_free_r>
 c016cee:	2300      	movs	r3, #0
 c016cf0:	6363      	str	r3, [r4, #52]	; 0x34
 c016cf2:	89a3      	ldrh	r3, [r4, #12]
 c016cf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 c016cf8:	81a3      	strh	r3, [r4, #12]
 c016cfa:	2300      	movs	r3, #0
 c016cfc:	6063      	str	r3, [r4, #4]
 c016cfe:	6923      	ldr	r3, [r4, #16]
 c016d00:	6023      	str	r3, [r4, #0]
 c016d02:	89a3      	ldrh	r3, [r4, #12]
 c016d04:	f043 0308 	orr.w	r3, r3, #8
 c016d08:	81a3      	strh	r3, [r4, #12]
 c016d0a:	6923      	ldr	r3, [r4, #16]
 c016d0c:	b94b      	cbnz	r3, c016d22 <__swsetup_r+0x9a>
 c016d0e:	89a3      	ldrh	r3, [r4, #12]
 c016d10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 c016d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c016d18:	d003      	beq.n	c016d22 <__swsetup_r+0x9a>
 c016d1a:	4621      	mov	r1, r4
 c016d1c:	4630      	mov	r0, r6
 c016d1e:	f000 f915 	bl	c016f4c <__smakebuf_r>
 c016d22:	89a2      	ldrh	r2, [r4, #12]
 c016d24:	f012 0301 	ands.w	r3, r2, #1
 c016d28:	d00c      	beq.n	c016d44 <__swsetup_r+0xbc>
 c016d2a:	2300      	movs	r3, #0
 c016d2c:	60a3      	str	r3, [r4, #8]
 c016d2e:	6963      	ldr	r3, [r4, #20]
 c016d30:	425b      	negs	r3, r3
 c016d32:	61a3      	str	r3, [r4, #24]
 c016d34:	6923      	ldr	r3, [r4, #16]
 c016d36:	b953      	cbnz	r3, c016d4e <__swsetup_r+0xc6>
 c016d38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c016d3c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 c016d40:	d1ba      	bne.n	c016cb8 <__swsetup_r+0x30>
 c016d42:	bd70      	pop	{r4, r5, r6, pc}
 c016d44:	0792      	lsls	r2, r2, #30
 c016d46:	bf58      	it	pl
 c016d48:	6963      	ldrpl	r3, [r4, #20]
 c016d4a:	60a3      	str	r3, [r4, #8]
 c016d4c:	e7f2      	b.n	c016d34 <__swsetup_r+0xac>
 c016d4e:	2000      	movs	r0, #0
 c016d50:	e7f7      	b.n	c016d42 <__swsetup_r+0xba>
 c016d52:	bf00      	nop
 c016d54:	30035b5c 	.word	0x30035b5c
 c016d58:	0c0170dc 	.word	0x0c0170dc
 c016d5c:	0c0170fc 	.word	0x0c0170fc
 c016d60:	0c0170bc 	.word	0x0c0170bc

0c016d64 <_close_r>:
 c016d64:	b538      	push	{r3, r4, r5, lr}
 c016d66:	2300      	movs	r3, #0
 c016d68:	4c05      	ldr	r4, [pc, #20]	; (c016d80 <_close_r+0x1c>)
 c016d6a:	4605      	mov	r5, r0
 c016d6c:	4608      	mov	r0, r1
 c016d6e:	6023      	str	r3, [r4, #0]
 c016d70:	f01b ff28 	bl	c032bc4 <_close>
 c016d74:	1c43      	adds	r3, r0, #1
 c016d76:	d102      	bne.n	c016d7e <_close_r+0x1a>
 c016d78:	6823      	ldr	r3, [r4, #0]
 c016d7a:	b103      	cbz	r3, c016d7e <_close_r+0x1a>
 c016d7c:	602b      	str	r3, [r5, #0]
 c016d7e:	bd38      	pop	{r3, r4, r5, pc}
 c016d80:	3003f2b0 	.word	0x3003f2b0

0c016d84 <__sflush_r>:
 c016d84:	898a      	ldrh	r2, [r1, #12]
 c016d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c016d8a:	4605      	mov	r5, r0
 c016d8c:	0710      	lsls	r0, r2, #28
 c016d8e:	460c      	mov	r4, r1
 c016d90:	d458      	bmi.n	c016e44 <__sflush_r+0xc0>
 c016d92:	684b      	ldr	r3, [r1, #4]
 c016d94:	2b00      	cmp	r3, #0
 c016d96:	dc05      	bgt.n	c016da4 <__sflush_r+0x20>
 c016d98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 c016d9a:	2b00      	cmp	r3, #0
 c016d9c:	dc02      	bgt.n	c016da4 <__sflush_r+0x20>
 c016d9e:	2000      	movs	r0, #0
 c016da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c016da4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 c016da6:	2e00      	cmp	r6, #0
 c016da8:	d0f9      	beq.n	c016d9e <__sflush_r+0x1a>
 c016daa:	2300      	movs	r3, #0
 c016dac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 c016db0:	682f      	ldr	r7, [r5, #0]
 c016db2:	6a21      	ldr	r1, [r4, #32]
 c016db4:	602b      	str	r3, [r5, #0]
 c016db6:	d032      	beq.n	c016e1e <__sflush_r+0x9a>
 c016db8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 c016dba:	89a3      	ldrh	r3, [r4, #12]
 c016dbc:	075a      	lsls	r2, r3, #29
 c016dbe:	d505      	bpl.n	c016dcc <__sflush_r+0x48>
 c016dc0:	6863      	ldr	r3, [r4, #4]
 c016dc2:	1ac0      	subs	r0, r0, r3
 c016dc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 c016dc6:	b10b      	cbz	r3, c016dcc <__sflush_r+0x48>
 c016dc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 c016dca:	1ac0      	subs	r0, r0, r3
 c016dcc:	2300      	movs	r3, #0
 c016dce:	4602      	mov	r2, r0
 c016dd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 c016dd2:	4628      	mov	r0, r5
 c016dd4:	6a21      	ldr	r1, [r4, #32]
 c016dd6:	47b0      	blx	r6
 c016dd8:	1c43      	adds	r3, r0, #1
 c016dda:	89a3      	ldrh	r3, [r4, #12]
 c016ddc:	d106      	bne.n	c016dec <__sflush_r+0x68>
 c016dde:	6829      	ldr	r1, [r5, #0]
 c016de0:	291d      	cmp	r1, #29
 c016de2:	d847      	bhi.n	c016e74 <__sflush_r+0xf0>
 c016de4:	4a28      	ldr	r2, [pc, #160]	; (c016e88 <__sflush_r+0x104>)
 c016de6:	40ca      	lsrs	r2, r1
 c016de8:	07d6      	lsls	r6, r2, #31
 c016dea:	d543      	bpl.n	c016e74 <__sflush_r+0xf0>
 c016dec:	2200      	movs	r2, #0
 c016dee:	04d9      	lsls	r1, r3, #19
 c016df0:	6062      	str	r2, [r4, #4]
 c016df2:	6922      	ldr	r2, [r4, #16]
 c016df4:	6022      	str	r2, [r4, #0]
 c016df6:	d504      	bpl.n	c016e02 <__sflush_r+0x7e>
 c016df8:	1c42      	adds	r2, r0, #1
 c016dfa:	d101      	bne.n	c016e00 <__sflush_r+0x7c>
 c016dfc:	682b      	ldr	r3, [r5, #0]
 c016dfe:	b903      	cbnz	r3, c016e02 <__sflush_r+0x7e>
 c016e00:	6560      	str	r0, [r4, #84]	; 0x54
 c016e02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c016e04:	602f      	str	r7, [r5, #0]
 c016e06:	2900      	cmp	r1, #0
 c016e08:	d0c9      	beq.n	c016d9e <__sflush_r+0x1a>
 c016e0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c016e0e:	4299      	cmp	r1, r3
 c016e10:	d002      	beq.n	c016e18 <__sflush_r+0x94>
 c016e12:	4628      	mov	r0, r5
 c016e14:	f7fd fdee 	bl	c0149f4 <_free_r>
 c016e18:	2000      	movs	r0, #0
 c016e1a:	6360      	str	r0, [r4, #52]	; 0x34
 c016e1c:	e7c0      	b.n	c016da0 <__sflush_r+0x1c>
 c016e1e:	2301      	movs	r3, #1
 c016e20:	4628      	mov	r0, r5
 c016e22:	47b0      	blx	r6
 c016e24:	1c41      	adds	r1, r0, #1
 c016e26:	d1c8      	bne.n	c016dba <__sflush_r+0x36>
 c016e28:	682b      	ldr	r3, [r5, #0]
 c016e2a:	2b00      	cmp	r3, #0
 c016e2c:	d0c5      	beq.n	c016dba <__sflush_r+0x36>
 c016e2e:	2b1d      	cmp	r3, #29
 c016e30:	d001      	beq.n	c016e36 <__sflush_r+0xb2>
 c016e32:	2b16      	cmp	r3, #22
 c016e34:	d101      	bne.n	c016e3a <__sflush_r+0xb6>
 c016e36:	602f      	str	r7, [r5, #0]
 c016e38:	e7b1      	b.n	c016d9e <__sflush_r+0x1a>
 c016e3a:	89a3      	ldrh	r3, [r4, #12]
 c016e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c016e40:	81a3      	strh	r3, [r4, #12]
 c016e42:	e7ad      	b.n	c016da0 <__sflush_r+0x1c>
 c016e44:	690f      	ldr	r7, [r1, #16]
 c016e46:	2f00      	cmp	r7, #0
 c016e48:	d0a9      	beq.n	c016d9e <__sflush_r+0x1a>
 c016e4a:	0793      	lsls	r3, r2, #30
 c016e4c:	680e      	ldr	r6, [r1, #0]
 c016e4e:	600f      	str	r7, [r1, #0]
 c016e50:	bf0c      	ite	eq
 c016e52:	694b      	ldreq	r3, [r1, #20]
 c016e54:	2300      	movne	r3, #0
 c016e56:	eba6 0807 	sub.w	r8, r6, r7
 c016e5a:	608b      	str	r3, [r1, #8]
 c016e5c:	f1b8 0f00 	cmp.w	r8, #0
 c016e60:	dd9d      	ble.n	c016d9e <__sflush_r+0x1a>
 c016e62:	4643      	mov	r3, r8
 c016e64:	463a      	mov	r2, r7
 c016e66:	6a21      	ldr	r1, [r4, #32]
 c016e68:	4628      	mov	r0, r5
 c016e6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 c016e6c:	47b0      	blx	r6
 c016e6e:	2800      	cmp	r0, #0
 c016e70:	dc06      	bgt.n	c016e80 <__sflush_r+0xfc>
 c016e72:	89a3      	ldrh	r3, [r4, #12]
 c016e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c016e78:	f04f 30ff 	mov.w	r0, #4294967295
 c016e7c:	81a3      	strh	r3, [r4, #12]
 c016e7e:	e78f      	b.n	c016da0 <__sflush_r+0x1c>
 c016e80:	4407      	add	r7, r0
 c016e82:	eba8 0800 	sub.w	r8, r8, r0
 c016e86:	e7e9      	b.n	c016e5c <__sflush_r+0xd8>
 c016e88:	20400001 	.word	0x20400001

0c016e8c <_fflush_r>:
 c016e8c:	b538      	push	{r3, r4, r5, lr}
 c016e8e:	690b      	ldr	r3, [r1, #16]
 c016e90:	4605      	mov	r5, r0
 c016e92:	460c      	mov	r4, r1
 c016e94:	b1db      	cbz	r3, c016ece <_fflush_r+0x42>
 c016e96:	b118      	cbz	r0, c016ea0 <_fflush_r+0x14>
 c016e98:	6983      	ldr	r3, [r0, #24]
 c016e9a:	b90b      	cbnz	r3, c016ea0 <_fflush_r+0x14>
 c016e9c:	f7ff f986 	bl	c0161ac <__sinit>
 c016ea0:	4b0c      	ldr	r3, [pc, #48]	; (c016ed4 <_fflush_r+0x48>)
 c016ea2:	429c      	cmp	r4, r3
 c016ea4:	d109      	bne.n	c016eba <_fflush_r+0x2e>
 c016ea6:	686c      	ldr	r4, [r5, #4]
 c016ea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c016eac:	b17b      	cbz	r3, c016ece <_fflush_r+0x42>
 c016eae:	4621      	mov	r1, r4
 c016eb0:	4628      	mov	r0, r5
 c016eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 c016eb6:	f7ff bf65 	b.w	c016d84 <__sflush_r>
 c016eba:	4b07      	ldr	r3, [pc, #28]	; (c016ed8 <_fflush_r+0x4c>)
 c016ebc:	429c      	cmp	r4, r3
 c016ebe:	d101      	bne.n	c016ec4 <_fflush_r+0x38>
 c016ec0:	68ac      	ldr	r4, [r5, #8]
 c016ec2:	e7f1      	b.n	c016ea8 <_fflush_r+0x1c>
 c016ec4:	4b05      	ldr	r3, [pc, #20]	; (c016edc <_fflush_r+0x50>)
 c016ec6:	429c      	cmp	r4, r3
 c016ec8:	bf08      	it	eq
 c016eca:	68ec      	ldreq	r4, [r5, #12]
 c016ecc:	e7ec      	b.n	c016ea8 <_fflush_r+0x1c>
 c016ece:	2000      	movs	r0, #0
 c016ed0:	bd38      	pop	{r3, r4, r5, pc}
 c016ed2:	bf00      	nop
 c016ed4:	0c0170dc 	.word	0x0c0170dc
 c016ed8:	0c0170fc 	.word	0x0c0170fc
 c016edc:	0c0170bc 	.word	0x0c0170bc

0c016ee0 <_lseek_r>:
 c016ee0:	b538      	push	{r3, r4, r5, lr}
 c016ee2:	4605      	mov	r5, r0
 c016ee4:	4c06      	ldr	r4, [pc, #24]	; (c016f00 <_lseek_r+0x20>)
 c016ee6:	4608      	mov	r0, r1
 c016ee8:	4611      	mov	r1, r2
 c016eea:	2200      	movs	r2, #0
 c016eec:	6022      	str	r2, [r4, #0]
 c016eee:	461a      	mov	r2, r3
 c016ef0:	f01b fe80 	bl	c032bf4 <_lseek>
 c016ef4:	1c43      	adds	r3, r0, #1
 c016ef6:	d102      	bne.n	c016efe <_lseek_r+0x1e>
 c016ef8:	6823      	ldr	r3, [r4, #0]
 c016efa:	b103      	cbz	r3, c016efe <_lseek_r+0x1e>
 c016efc:	602b      	str	r3, [r5, #0]
 c016efe:	bd38      	pop	{r3, r4, r5, pc}
 c016f00:	3003f2b0 	.word	0x3003f2b0

0c016f04 <__swhatbuf_r>:
 c016f04:	b570      	push	{r4, r5, r6, lr}
 c016f06:	460e      	mov	r6, r1
 c016f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c016f0c:	b096      	sub	sp, #88	; 0x58
 c016f0e:	4614      	mov	r4, r2
 c016f10:	2900      	cmp	r1, #0
 c016f12:	461d      	mov	r5, r3
 c016f14:	da07      	bge.n	c016f26 <__swhatbuf_r+0x22>
 c016f16:	2300      	movs	r3, #0
 c016f18:	602b      	str	r3, [r5, #0]
 c016f1a:	89b3      	ldrh	r3, [r6, #12]
 c016f1c:	061a      	lsls	r2, r3, #24
 c016f1e:	d410      	bmi.n	c016f42 <__swhatbuf_r+0x3e>
 c016f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c016f24:	e00e      	b.n	c016f44 <__swhatbuf_r+0x40>
 c016f26:	466a      	mov	r2, sp
 c016f28:	f000 f882 	bl	c017030 <_fstat_r>
 c016f2c:	2800      	cmp	r0, #0
 c016f2e:	dbf2      	blt.n	c016f16 <__swhatbuf_r+0x12>
 c016f30:	9a01      	ldr	r2, [sp, #4]
 c016f32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 c016f36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 c016f3a:	425a      	negs	r2, r3
 c016f3c:	415a      	adcs	r2, r3
 c016f3e:	602a      	str	r2, [r5, #0]
 c016f40:	e7ee      	b.n	c016f20 <__swhatbuf_r+0x1c>
 c016f42:	2340      	movs	r3, #64	; 0x40
 c016f44:	2000      	movs	r0, #0
 c016f46:	6023      	str	r3, [r4, #0]
 c016f48:	b016      	add	sp, #88	; 0x58
 c016f4a:	bd70      	pop	{r4, r5, r6, pc}

0c016f4c <__smakebuf_r>:
 c016f4c:	898b      	ldrh	r3, [r1, #12]
 c016f4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c016f50:	079d      	lsls	r5, r3, #30
 c016f52:	4606      	mov	r6, r0
 c016f54:	460c      	mov	r4, r1
 c016f56:	d507      	bpl.n	c016f68 <__smakebuf_r+0x1c>
 c016f58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 c016f5c:	6023      	str	r3, [r4, #0]
 c016f5e:	6123      	str	r3, [r4, #16]
 c016f60:	2301      	movs	r3, #1
 c016f62:	6163      	str	r3, [r4, #20]
 c016f64:	b002      	add	sp, #8
 c016f66:	bd70      	pop	{r4, r5, r6, pc}
 c016f68:	ab01      	add	r3, sp, #4
 c016f6a:	466a      	mov	r2, sp
 c016f6c:	f7ff ffca 	bl	c016f04 <__swhatbuf_r>
 c016f70:	9900      	ldr	r1, [sp, #0]
 c016f72:	4605      	mov	r5, r0
 c016f74:	4630      	mov	r0, r6
 c016f76:	f7fd fd8b 	bl	c014a90 <_malloc_r>
 c016f7a:	b948      	cbnz	r0, c016f90 <__smakebuf_r+0x44>
 c016f7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c016f80:	059a      	lsls	r2, r3, #22
 c016f82:	d4ef      	bmi.n	c016f64 <__smakebuf_r+0x18>
 c016f84:	f023 0303 	bic.w	r3, r3, #3
 c016f88:	f043 0302 	orr.w	r3, r3, #2
 c016f8c:	81a3      	strh	r3, [r4, #12]
 c016f8e:	e7e3      	b.n	c016f58 <__smakebuf_r+0xc>
 c016f90:	4b0d      	ldr	r3, [pc, #52]	; (c016fc8 <__smakebuf_r+0x7c>)
 c016f92:	62b3      	str	r3, [r6, #40]	; 0x28
 c016f94:	89a3      	ldrh	r3, [r4, #12]
 c016f96:	6020      	str	r0, [r4, #0]
 c016f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c016f9c:	6120      	str	r0, [r4, #16]
 c016f9e:	81a3      	strh	r3, [r4, #12]
 c016fa0:	9b00      	ldr	r3, [sp, #0]
 c016fa2:	6163      	str	r3, [r4, #20]
 c016fa4:	9b01      	ldr	r3, [sp, #4]
 c016fa6:	b15b      	cbz	r3, c016fc0 <__smakebuf_r+0x74>
 c016fa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c016fac:	4630      	mov	r0, r6
 c016fae:	f000 f851 	bl	c017054 <_isatty_r>
 c016fb2:	b128      	cbz	r0, c016fc0 <__smakebuf_r+0x74>
 c016fb4:	89a3      	ldrh	r3, [r4, #12]
 c016fb6:	f023 0303 	bic.w	r3, r3, #3
 c016fba:	f043 0301 	orr.w	r3, r3, #1
 c016fbe:	81a3      	strh	r3, [r4, #12]
 c016fc0:	89a3      	ldrh	r3, [r4, #12]
 c016fc2:	431d      	orrs	r5, r3
 c016fc4:	81a5      	strh	r5, [r4, #12]
 c016fc6:	e7cd      	b.n	c016f64 <__smakebuf_r+0x18>
 c016fc8:	0c016175 	.word	0x0c016175

0c016fcc <__ascii_mbtowc>:
 c016fcc:	b082      	sub	sp, #8
 c016fce:	b901      	cbnz	r1, c016fd2 <__ascii_mbtowc+0x6>
 c016fd0:	a901      	add	r1, sp, #4
 c016fd2:	b142      	cbz	r2, c016fe6 <__ascii_mbtowc+0x1a>
 c016fd4:	b14b      	cbz	r3, c016fea <__ascii_mbtowc+0x1e>
 c016fd6:	7813      	ldrb	r3, [r2, #0]
 c016fd8:	600b      	str	r3, [r1, #0]
 c016fda:	7812      	ldrb	r2, [r2, #0]
 c016fdc:	1c10      	adds	r0, r2, #0
 c016fde:	bf18      	it	ne
 c016fe0:	2001      	movne	r0, #1
 c016fe2:	b002      	add	sp, #8
 c016fe4:	4770      	bx	lr
 c016fe6:	4610      	mov	r0, r2
 c016fe8:	e7fb      	b.n	c016fe2 <__ascii_mbtowc+0x16>
 c016fea:	f06f 0001 	mvn.w	r0, #1
 c016fee:	e7f8      	b.n	c016fe2 <__ascii_mbtowc+0x16>

0c016ff0 <_read_r>:
 c016ff0:	b538      	push	{r3, r4, r5, lr}
 c016ff2:	4605      	mov	r5, r0
 c016ff4:	4c06      	ldr	r4, [pc, #24]	; (c017010 <_read_r+0x20>)
 c016ff6:	4608      	mov	r0, r1
 c016ff8:	4611      	mov	r1, r2
 c016ffa:	2200      	movs	r2, #0
 c016ffc:	6022      	str	r2, [r4, #0]
 c016ffe:	461a      	mov	r2, r3
 c017000:	f01b fe00 	bl	c032c04 <_read>
 c017004:	1c43      	adds	r3, r0, #1
 c017006:	d102      	bne.n	c01700e <_read_r+0x1e>
 c017008:	6823      	ldr	r3, [r4, #0]
 c01700a:	b103      	cbz	r3, c01700e <_read_r+0x1e>
 c01700c:	602b      	str	r3, [r5, #0]
 c01700e:	bd38      	pop	{r3, r4, r5, pc}
 c017010:	3003f2b0 	.word	0x3003f2b0

0c017014 <__ascii_wctomb>:
 c017014:	b149      	cbz	r1, c01702a <__ascii_wctomb+0x16>
 c017016:	2aff      	cmp	r2, #255	; 0xff
 c017018:	bf8d      	iteet	hi
 c01701a:	238a      	movhi	r3, #138	; 0x8a
 c01701c:	700a      	strbls	r2, [r1, #0]
 c01701e:	2001      	movls	r0, #1
 c017020:	6003      	strhi	r3, [r0, #0]
 c017022:	bf88      	it	hi
 c017024:	f04f 30ff 	movhi.w	r0, #4294967295
 c017028:	4770      	bx	lr
 c01702a:	4608      	mov	r0, r1
 c01702c:	4770      	bx	lr
	...

0c017030 <_fstat_r>:
 c017030:	b538      	push	{r3, r4, r5, lr}
 c017032:	2300      	movs	r3, #0
 c017034:	4c06      	ldr	r4, [pc, #24]	; (c017050 <_fstat_r+0x20>)
 c017036:	4605      	mov	r5, r0
 c017038:	4608      	mov	r0, r1
 c01703a:	4611      	mov	r1, r2
 c01703c:	6023      	str	r3, [r4, #0]
 c01703e:	f01b fdc9 	bl	c032bd4 <_fstat>
 c017042:	1c43      	adds	r3, r0, #1
 c017044:	d102      	bne.n	c01704c <_fstat_r+0x1c>
 c017046:	6823      	ldr	r3, [r4, #0]
 c017048:	b103      	cbz	r3, c01704c <_fstat_r+0x1c>
 c01704a:	602b      	str	r3, [r5, #0]
 c01704c:	bd38      	pop	{r3, r4, r5, pc}
 c01704e:	bf00      	nop
 c017050:	3003f2b0 	.word	0x3003f2b0

0c017054 <_isatty_r>:
 c017054:	b538      	push	{r3, r4, r5, lr}
 c017056:	2300      	movs	r3, #0
 c017058:	4c05      	ldr	r4, [pc, #20]	; (c017070 <_isatty_r+0x1c>)
 c01705a:	4605      	mov	r5, r0
 c01705c:	4608      	mov	r0, r1
 c01705e:	6023      	str	r3, [r4, #0]
 c017060:	f01b fdc0 	bl	c032be4 <_isatty>
 c017064:	1c43      	adds	r3, r0, #1
 c017066:	d102      	bne.n	c01706e <_isatty_r+0x1a>
 c017068:	6823      	ldr	r3, [r4, #0]
 c01706a:	b103      	cbz	r3, c01706e <_isatty_r+0x1a>
 c01706c:	602b      	str	r3, [r5, #0]
 c01706e:	bd38      	pop	{r3, r4, r5, pc}
 c017070:	3003f2b0 	.word	0x3003f2b0

0c017074 <_global_impure_ptr>:
 c017074:	30035b60 00464e49 00666e69 004e414e     `[.0INF.inf.NAN.
 c017084:	006e616e 31300030 35343332 39383736     nan.0.0123456789
 c017094:	44434241 30004645 34333231 38373635     ABCDEF.012345678
 c0170a4:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
 c0170b4:	4e614e00 00000000                       .NaN....

0c0170bc <__sf_fake_stderr>:
	...

0c0170dc <__sf_fake_stdin>:
	...

0c0170fc <__sf_fake_stdout>:
	...

0c017120 <__mprec_bigtens>:
 c017120:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 c017130:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 c017140:	7f73bf3c 75154fdd                       <.s..O.u

0c017148 <__mprec_tens>:
 c017148:	00000000 3ff00000 00000000 40240000     .......?......$@
 c017158:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 c017168:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 c017178:	00000000 412e8480 00000000 416312d0     .......A......cA
 c017188:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 c017198:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 c0171a8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 c0171b8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 c0171c8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 c0171d8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 c0171e8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 c0171f8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 c017208:	79d99db4 44ea7843                       ...yCx.D

0c017210 <p05.7359>:
 c017210:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
 c017220:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
 c017230:	5849534f                                 OSIX...

0c017237 <_ctype_>:
 c017237:	20202000 20202020 28282020 20282828     .         ((((( 
 c017247:	20202020 20202020 20202020 20202020                     
 c017257:	10108820 10101010 10101010 10101010      ...............
 c017267:	04040410 04040404 10040404 10101010     ................
 c017277:	41411010 41414141 01010101 01010101     ..AAAAAA........
 c017287:	01010101 01010101 01010101 10101010     ................
 c017297:	42421010 42424242 02020202 02020202     ..BBBBBB........
 c0172a7:	02020202 02020202 02020202 10101010     ................
 c0172b7:	00000020 00000000 00000000 00000000      ...............
	...

0c017338 <jump_to_ns_code>:
#pragma diag_suppress=Pe940
#endif
nsfptr_t ns_entry;

void jump_to_ns_code(void)
{
 c017338:	b510      	push	{r4, lr}
    /* Calls the non-secure Reset_Handler to jump to the non-secure binary */
    ns_entry();
 c01733a:	4b05      	ldr	r3, [pc, #20]	; (c017350 <jump_to_ns_code+0x18>)
 c01733c:	681c      	ldr	r4, [r3, #0]
 c01733e:	0864      	lsrs	r4, r4, #1
 c017340:	0064      	lsls	r4, r4, #1
 c017342:	4620      	mov	r0, r4
 c017344:	4621      	mov	r1, r4
 c017346:	4622      	mov	r2, r4
 c017348:	4623      	mov	r3, r4
 c01734a:	f001 fbc3 	bl	c018ad4 <__gnu_cmse_nonsecure_call>
}
 c01734e:	bd10      	pop	{r4, pc}
 c017350:	30031000 	.word	0x30031000

0c017354 <tfm_core_get_boot_data>:
__attribute__((naked))
int32_t tfm_core_get_boot_data(uint8_t major_type,
                               struct tfm_boot_data *boot_status,
                               uint32_t len)
{
    __ASM volatile(
 c017354:	df07      	svc	7
 c017356:	4770      	bx	lr

0c017358 <tfm_core_get_boot_value>:
__attribute__((naked))
int32_t tfm_core_get_boot_value(uint16_t tlv_value,
                               void *ptr,
                               uint32_t len)
{
    __ASM volatile(
 c017358:	df1d      	svc	29
 c01735a:	4770      	bx	lr

0c01735c <tfm_plat_get_crypto_huk>:
  * \param[in]   size   Length of the key
  *
  */

enum tfm_plat_err_t tfm_plat_get_crypto_huk(uint8_t *key, uint32_t size)
{
 c01735c:	b530      	push	{r4, r5, lr}
  enum tfm_status_e tfm_res;
  uint8_t full_huk[TFM_PROVISION_HUK_LEN_BYTES];
  uint32_t i;
  if (size > TFM_HUK_KEY_LEN_BYTES)
 c01735e:	2910      	cmp	r1, #16
{
 c017360:	b089      	sub	sp, #36	; 0x24
 c017362:	4605      	mov	r5, r0
 c017364:	460c      	mov	r4, r1
  if (size > TFM_HUK_KEY_LEN_BYTES)
 c017366:	d902      	bls.n	c01736e <tfm_plat_get_crypto_huk+0x12>
  {
    return TFM_PLAT_ERR_SYSTEM_ERR;
 c017368:	2001      	movs	r0, #1
  {
      key[i]  = full_huk[i];
      full_huk[i]=0;
  }
  return TFM_PLAT_ERR_SUCCESS;
}
 c01736a:	b009      	add	sp, #36	; 0x24
 c01736c:	bd30      	pop	{r4, r5, pc}
  tfm_res = (enum tfm_status_e)tfm_core_get_boot_value(SET_TLV_TYPE(TLV_MAJOR_SST, TLV_MINOR_CORE_HUK),full_huk, sizeof(full_huk));
 c01736e:	2220      	movs	r2, #32
 c017370:	4669      	mov	r1, sp
 c017372:	f642 0055 	movw	r0, #10325	; 0x2855
 c017376:	f7ff ffef 	bl	c017358 <tfm_core_get_boot_value>
  if (tfm_res != TFM_SUCCESS)
 c01737a:	b2c0      	uxtb	r0, r0
 c01737c:	2800      	cmp	r0, #0
 c01737e:	d1f3      	bne.n	c017368 <tfm_plat_get_crypto_huk+0xc>
 c017380:	4603      	mov	r3, r0
  for (i = 0; i < size ; i++)
 c017382:	42a0      	cmp	r0, r4
 c017384:	d101      	bne.n	c01738a <tfm_plat_get_crypto_huk+0x2e>
  return TFM_PLAT_ERR_SUCCESS;
 c017386:	2000      	movs	r0, #0
 c017388:	e7ef      	b.n	c01736a <tfm_plat_get_crypto_huk+0xe>
      key[i]  = full_huk[i];
 c01738a:	f81d 2000 	ldrb.w	r2, [sp, r0]
      full_huk[i]=0;
 c01738e:	f80d 3000 	strb.w	r3, [sp, r0]
      key[i]  = full_huk[i];
 c017392:	542a      	strb	r2, [r5, r0]
  for (i = 0; i < size ; i++)
 c017394:	3001      	adds	r0, #1
 c017396:	e7f4      	b.n	c017382 <tfm_plat_get_crypto_huk+0x26>

0c017398 <tfm_plat_get_initial_attest_key>:
  uint32_t i;
  uint32_t *priv_key_dst;
  uint8_t *key_dst;
  uint32_t key_size;
  uint32_t full_key_size = 3 * TFM_IAS_KEY_LEN_BYTES;
  if (size < full_key_size)
 c017398:	295f      	cmp	r1, #95	; 0x5f
{
 c01739a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c01739c:	4604      	mov	r4, r0
 c01739e:	4615      	mov	r5, r2
  if (size < full_key_size)
 c0173a0:	d801      	bhi.n	c0173a6 <tfm_plat_get_initial_attest_key+0xe>
  {
    return TFM_PLAT_ERR_SYSTEM_ERR;
 c0173a2:	2001      	movs	r0, #1
  }
  ecc_key->puby_key = key_dst;
  ecc_key->puby_key_size = key_size;

  return TFM_PLAT_ERR_SUCCESS;
}
 c0173a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tfm_res = (enum tfm_status_e)tfm_core_get_boot_value(SET_TLV_TYPE(TLV_MAJOR_CORE, TLV_MINOR_CORE_IAS_KEY_TYPE),
 c0173a6:	2201      	movs	r2, #1
 c0173a8:	4619      	mov	r1, r3
 c0173aa:	f640 3054 	movw	r0, #2900	; 0xb54
 c0173ae:	f7ff ffd3 	bl	c017358 <tfm_core_get_boot_value>
  if (tfm_res != TFM_SUCCESS)
 c0173b2:	f010 0fff 	tst.w	r0, #255	; 0xff
 c0173b6:	d1f4      	bne.n	c0173a2 <tfm_plat_get_initial_attest_key+0xa>
 c0173b8:	4b12      	ldr	r3, [pc, #72]	; (c017404 <tfm_plat_get_initial_attest_key+0x6c>)
  for (i = 0; i < (key_size / 4) ; i++)
 c0173ba:	4913      	ldr	r1, [pc, #76]	; (c017408 <tfm_plat_get_initial_attest_key+0x70>)
 c0173bc:	1f22      	subs	r2, r4, #4

  tmp = (uint32_t)(&(TAMP->BKP0R));
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 c0173be:	f853 0b04 	ldr.w	r0, [r3], #4
 c0173c2:	428b      	cmp	r3, r1
    priv_key_dst[i]  = LL_RTC_BKP_GetRegister(NULL, i);
 c0173c4:	f842 0f04 	str.w	r0, [r2, #4]!
  for (i = 0; i < (key_size / 4) ; i++)
 c0173c8:	d1f9      	bne.n	c0173be <tfm_plat_get_initial_attest_key+0x26>
  ecc_key->priv_key_size = key_size;
 c0173ca:	2620      	movs	r6, #32
  key_dst  = key_dst + key_size;
 c0173cc:	19a7      	adds	r7, r4, r6
  ecc_key->priv_key = key_dst;
 c0173ce:	602c      	str	r4, [r5, #0]
  ecc_key->priv_key_size = key_size;
 c0173d0:	606e      	str	r6, [r5, #4]
  tfm_res = (enum tfm_status_e)tfm_core_get_boot_value(SET_TLV_TYPE(TLV_MAJOR_CORE, TLV_MINOR_CORE_IAS_PUB_KEY_X), key_dst, key_size);
 c0173d2:	4632      	mov	r2, r6
 c0173d4:	4639      	mov	r1, r7
 c0173d6:	f640 3058 	movw	r0, #2904	; 0xb58
 c0173da:	f7ff ffbd 	bl	c017358 <tfm_core_get_boot_value>
  if (tfm_res != TFM_SUCCESS)
 c0173de:	f010 0fff 	tst.w	r0, #255	; 0xff
 c0173e2:	d1de      	bne.n	c0173a2 <tfm_plat_get_initial_attest_key+0xa>
  key_dst  = key_dst + key_size;
 c0173e4:	3440      	adds	r4, #64	; 0x40
  ecc_key->pubx_key_size = key_size;
 c0173e6:	e9c5 7602 	strd	r7, r6, [r5, #8]
  tfm_res = (enum tfm_status_e)tfm_core_get_boot_value(SET_TLV_TYPE(TLV_MAJOR_CORE, TLV_MINOR_CORE_IAS_PUB_KEY_Y), key_dst, key_size);
 c0173ea:	4632      	mov	r2, r6
 c0173ec:	4621      	mov	r1, r4
 c0173ee:	f640 3059 	movw	r0, #2905	; 0xb59
 c0173f2:	f7ff ffb1 	bl	c017358 <tfm_core_get_boot_value>
  if (tfm_res != TFM_SUCCESS)
 c0173f6:	b2c0      	uxtb	r0, r0
 c0173f8:	2800      	cmp	r0, #0
 c0173fa:	d1d2      	bne.n	c0173a2 <tfm_plat_get_initial_attest_key+0xa>
  ecc_key->puby_key_size = key_size;
 c0173fc:	e9c5 4604 	strd	r4, r6, [r5, #16]
  return TFM_PLAT_ERR_SUCCESS;
 c017400:	e7d0      	b.n	c0173a4 <tfm_plat_get_initial_attest_key+0xc>
 c017402:	bf00      	nop
 c017404:	50003500 	.word	0x50003500
 c017408:	50003520 	.word	0x50003520

0c01740c <tfm_plat_get_boot_seed>:
#include "tfm_secure_api.h"

enum tfm_plat_err_t tfm_plat_get_boot_seed(uint32_t size, uint8_t *buf)
{
    return  TFM_PLAT_ERR_SYSTEM_ERR;
}
 c01740c:	2001      	movs	r0, #1
 c01740e:	4770      	bx	lr

0c017410 <tfm_plat_get_instance_id>:
  *  - byte 0:    0x01 indicates the type of UEID to be GUID
  *  - byte 1-32: Hash of attestation public key. Public key is hashed in raw
  *               format without any encoding.
  */
enum tfm_plat_err_t tfm_plat_get_instance_id(uint32_t *size, uint8_t *buf)
{
 c017410:	b508      	push	{r3, lr}
  uint8_t *p_dst;
  int32_t tfm_res;

  if (*size < INSTANCE_ID_MAX_SIZE)
 c017412:	6803      	ldr	r3, [r0, #0]
 c017414:	2b20      	cmp	r3, #32
 c017416:	f04f 0301 	mov.w	r3, #1
 c01741a:	d90d      	bls.n	c017438 <tfm_plat_get_instance_id+0x28>
  {
    return TFM_PLAT_ERR_SYSTEM_ERR;
  }
  /*  platform support maximum size */
  *size = INSTANCE_ID_MAX_SIZE;
 c01741c:	2221      	movs	r2, #33	; 0x21
 c01741e:	6002      	str	r2, [r0, #0]

  buf[0] = 0x01; /* First byte is type byte:  0x01 indicates GUID */
 c017420:	f801 3b01 	strb.w	r3, [r1], #1
  p_dst = &buf[1];
  tfm_res = tfm_core_get_boot_value(SET_TLV_TYPE(TLV_MAJOR_CORE, TLV_MINOR_CORE_IAS_PUB_KEY_HASH), p_dst, (*size) - 1);
 c017424:	6802      	ldr	r2, [r0, #0]
 c017426:	f640 3048 	movw	r0, #2888	; 0xb48
 c01742a:	3a01      	subs	r2, #1
 c01742c:	f7ff ff94 	bl	c017358 <tfm_core_get_boot_value>
  if (tfm_res != TFM_SUCCESS)
 c017430:	3000      	adds	r0, #0
 c017432:	bf18      	it	ne
 c017434:	2001      	movne	r0, #1
  {
    return  TFM_PLAT_ERR_SYSTEM_ERR;
  }
  return TFM_PLAT_ERR_SUCCESS;
}
 c017436:	bd08      	pop	{r3, pc}
    return TFM_PLAT_ERR_SYSTEM_ERR;
 c017438:	4618      	mov	r0, r3
 c01743a:	e7fc      	b.n	c017436 <tfm_plat_get_instance_id+0x26>

0c01743c <tfm_plat_get_implementation_id>:

enum tfm_plat_err_t tfm_plat_get_implementation_id(uint32_t *size,
                                                   uint8_t  *buf)
{
 c01743c:	b508      	push	{r3, lr}
  uint8_t *p_dst;
  int32_t tfm_res;;
  p_dst = &buf[0];
  if (*size < IMPLEMENTATION_ID_MAX_SIZE)
 c01743e:	6803      	ldr	r3, [r0, #0]
 c017440:	2b1f      	cmp	r3, #31
 c017442:	d909      	bls.n	c017458 <tfm_plat_get_implementation_id+0x1c>
  {
    return TFM_PLAT_ERR_SYSTEM_ERR;
  }
  /*  platform support maximum size */
  *size = IMPLEMENTATION_ID_MAX_SIZE;
 c017444:	2220      	movs	r2, #32
 c017446:	6002      	str	r2, [r0, #0]

  tfm_res = tfm_core_get_boot_value(SET_TLV_TYPE(TLV_MAJOR_CORE, TLV_MINOR_CORE_IAS_IMPLEMENTATION_ID), p_dst, (*size));
 c017448:	f640 10cd 	movw	r0, #2509	; 0x9cd
 c01744c:	f7ff ff84 	bl	c017358 <tfm_core_get_boot_value>
  if (tfm_res != (int32_t)TFM_SUCCESS)
 c017450:	3000      	adds	r0, #0
 c017452:	bf18      	it	ne
 c017454:	2001      	movne	r0, #1
  {
    return  TFM_PLAT_ERR_SYSTEM_ERR;
  }
  return TFM_PLAT_ERR_SUCCESS;
}
 c017456:	bd08      	pop	{r3, pc}
    return TFM_PLAT_ERR_SYSTEM_ERR;
 c017458:	2001      	movs	r0, #1
 c01745a:	e7fc      	b.n	c017456 <tfm_plat_get_implementation_id+0x1a>

0c01745c <tfm_plat_get_hw_version>:
  uint32_t hw_version_size = 12;
#else
  const uint8_t *p_hw_version = (uint8_t *)&DBGMCU->IDCODE;
  uint32_t hw_version_size = 4;
#endif
  if (*size < hw_version_size)
 c01745c:	6803      	ldr	r3, [r0, #0]
 c01745e:	2b03      	cmp	r3, #3
 c017460:	d90f      	bls.n	c017482 <tfm_plat_get_hw_version+0x26>
    *p_dst = *p_src;
 c017462:	4b09      	ldr	r3, [pc, #36]	; (c017488 <tfm_plat_get_hw_version+0x2c>)
 c017464:	781b      	ldrb	r3, [r3, #0]
 c017466:	700b      	strb	r3, [r1, #0]
 c017468:	4b08      	ldr	r3, [pc, #32]	; (c01748c <tfm_plat_get_hw_version+0x30>)
 c01746a:	781b      	ldrb	r3, [r3, #0]
 c01746c:	704b      	strb	r3, [r1, #1]
 c01746e:	4b08      	ldr	r3, [pc, #32]	; (c017490 <tfm_plat_get_hw_version+0x34>)
 c017470:	781b      	ldrb	r3, [r3, #0]
 c017472:	708b      	strb	r3, [r1, #2]
 c017474:	4b07      	ldr	r3, [pc, #28]	; (c017494 <tfm_plat_get_hw_version+0x38>)
 c017476:	781b      	ldrb	r3, [r3, #0]
 c017478:	70cb      	strb	r3, [r1, #3]
  {
    return TFM_PLAT_ERR_SYSTEM_ERR;
  }
  /*  recopy  */
  copy_id(buf, p_hw_version, hw_version_size);
  *size = hw_version_size;
 c01747a:	2304      	movs	r3, #4
 c01747c:	6003      	str	r3, [r0, #0]

  return TFM_PLAT_ERR_SUCCESS;
 c01747e:	2000      	movs	r0, #0
 c017480:	4770      	bx	lr
    return TFM_PLAT_ERR_SYSTEM_ERR;
 c017482:	2001      	movs	r0, #1
}
 c017484:	4770      	bx	lr
 c017486:	bf00      	nop
 c017488:	e0044000 	.word	0xe0044000
 c01748c:	e0044001 	.word	0xe0044001
 c017490:	e0044002 	.word	0xe0044002
 c017494:	e0044003 	.word	0xe0044003

0c017498 <psa_framework_version>:
#pragma diag_suppress=Pe940
#endif
__attribute__((naked, section("SFN")))
uint32_t psa_framework_version(void)
{
    __ASM volatile("SVC %0           \n"
 c017498:	df10      	svc	16
 c01749a:	4770      	bx	lr

0c01749c <psa_version>:
}

__attribute__((naked, section("SFN")))
uint32_t psa_version(uint32_t sid)
{
    __ASM volatile("SVC %0           \n"
 c01749c:	df11      	svc	17
 c01749e:	4770      	bx	lr

0c0174a0 <psa_connect>:
}

__attribute__((naked, section("SFN")))
psa_handle_t psa_connect(uint32_t sid, uint32_t version)
{
    __ASM volatile("SVC %0           \n"
 c0174a0:	df12      	svc	18
 c0174a2:	4770      	bx	lr

0c0174a4 <psa_call>:
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
    __ASM volatile("SVC %0           \n"
 c0174a4:	df13      	svc	19
 c0174a6:	4770      	bx	lr

0c0174a8 <psa_close>:
#endif

__attribute__((naked, section("SFN")))
void psa_close(psa_handle_t handle)
{
    __ASM volatile("SVC %0           \n"
 c0174a8:	df14      	svc	20
 c0174aa:	4770      	bx	lr

0c0174ac <psa_wait>:
#endif
__attribute__((naked, section("SFN")))
psa_signal_t psa_wait(psa_signal_t signal_mask, uint32_t timeout)

{
    __ASM volatile("SVC %0           \n"
 c0174ac:	df0c      	svc	12
 c0174ae:	4770      	bx	lr

0c0174b0 <psa_get>:
}

__attribute__((naked, section("SFN")))
psa_status_t psa_get(psa_signal_t signal, psa_msg_t *msg)
{
    __ASM volatile("SVC %0           \n"
 c0174b0:	df15      	svc	21
 c0174b2:	4770      	bx	lr

0c0174b4 <psa_set_rhandle>:
}

__attribute__((naked, section("SFN")))
void psa_set_rhandle(psa_handle_t msg_handle, void *rhandle)
{
    __ASM volatile("SVC %0           \n"
 c0174b4:	df16      	svc	22
 c0174b6:	4770      	bx	lr

0c0174b8 <psa_read>:
__attribute__((naked, section("SFN")))
size_t psa_read(psa_handle_t msg_handle, uint32_t invec_idx,
                void *buffer, size_t num_bytes)

{
    __ASM volatile("SVC %0           \n"
 c0174b8:	df17      	svc	23
 c0174ba:	4770      	bx	lr

0c0174bc <psa_skip>:
}

__attribute__((naked, section("SFN")))
size_t psa_skip(psa_handle_t msg_handle, uint32_t invec_idx, size_t num_bytes)
{
    __ASM volatile("SVC %0           \n"
 c0174bc:	df18      	svc	24
 c0174be:	4770      	bx	lr

0c0174c0 <psa_write>:

__attribute__((naked, section("SFN")))
void psa_write(psa_handle_t msg_handle, uint32_t outvec_idx,
               const void *buffer, size_t num_bytes)
{
    __ASM volatile("SVC %0           \n"
 c0174c0:	df19      	svc	25
 c0174c2:	4770      	bx	lr

0c0174c4 <psa_reply>:
}

__attribute__((naked, section("SFN")))
void psa_reply(psa_handle_t msg_handle, psa_status_t retval)
{
    __ASM volatile("SVC %0           \n"
 c0174c4:	df1a      	svc	26
 c0174c6:	4770      	bx	lr

0c0174c8 <psa_notify>:
}

__attribute__((naked, section("SFN")))
void psa_notify(int32_t partition_id)
{
    __ASM volatile("SVC %0           \n"
 c0174c8:	df1b      	svc	27
 c0174ca:	4770      	bx	lr

0c0174cc <psa_clear>:
}

__attribute__((naked, section("SFN")))
void psa_clear(void)
{
    __ASM volatile("SVC %0           \n"
 c0174cc:	df1c      	svc	28
 c0174ce:	4770      	bx	lr

0c0174d0 <psa_eoi>:
}

__attribute__((naked, section("SFN")))
void psa_eoi(psa_signal_t irq_signal)
{
    __ASM volatile("SVC %0           \n"
 c0174d0:	df0d      	svc	13
 c0174d2:	4770      	bx	lr

0c0174d4 <tfm_spm_partition_change_privilege>:
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 c0174d4:	f3ef 8314 	mrs	r3, CONTROL
{
    CONTROL_Type ctrl;

    ctrl.w = __get_CONTROL();

    if (privileged == TFM_PARTITION_PRIVILEGED_MODE) {
 c0174d8:	2801      	cmp	r0, #1
        ctrl.b.nPRIV = 0;
 c0174da:	bf0c      	ite	eq
 c0174dc:	f36f 0300 	bfceq	r3, #0, #1
    } else {
        ctrl.b.nPRIV = 1;
 c0174e0:	f043 0301 	orrne.w	r3, r3, #1
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 c0174e4:	f383 8814 	msr	CONTROL, r3
    }

    __set_CONTROL(ctrl.w);
}
 c0174e8:	4770      	bx	lr

0c0174ea <psa_crypto_init>:
{
    /* Service init is performed during TFM boot up,
     * so application level initialisation is empty
     */
    return PSA_SUCCESS;
}
 c0174ea:	2000      	movs	r0, #0
 c0174ec:	4770      	bx	lr

0c0174ee <psa_allocate_key>:

__attribute__((section("SFN")))
psa_status_t psa_allocate_key(psa_key_handle_t *handle)
{
 c0174ee:	b530      	push	{r4, r5, lr}
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    const struct tfm_crypto_pack_iovec iov = {
 c0174f0:	2434      	movs	r4, #52	; 0x34
{
 c0174f2:	b095      	sub	sp, #84	; 0x54
    const struct tfm_crypto_pack_iovec iov = {
 c0174f4:	ab07      	add	r3, sp, #28
{
 c0174f6:	4605      	mov	r5, r0
    const struct tfm_crypto_pack_iovec iov = {
 c0174f8:	4622      	mov	r2, r4
 c0174fa:	2100      	movs	r1, #0
 c0174fc:	4618      	mov	r0, r3
 c0174fe:	f7fd fa62 	bl	c0149c6 <memset>
        .sfn_id = TFM_CRYPTO_ALLOCATE_KEY_SID,
    };
    psa_invec in_vec[] = {
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };
    psa_outvec out_vec[] = {
 c017502:	2302      	movs	r3, #2
    psa_invec in_vec[] = {
 c017504:	e9cd 0403 	strd	r0, r4, [sp, #12]
        {.base = handle, .len = sizeof(psa_key_handle_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c017508:	2101      	movs	r1, #1
 c01750a:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c01750c:	9505      	str	r5, [sp, #20]
 c01750e:	9306      	str	r3, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c017510:	f7ff ffc6 	bl	c0174a0 <psa_connect>
 c017514:	1e05      	subs	r5, r0, #0
 c017516:	dd0e      	ble.n	c017536 <psa_allocate_key+0x48>
#endif

    status = API_DISPATCH(tfm_crypto_allocate_key,
 c017518:	2301      	movs	r3, #1
 c01751a:	aa05      	add	r2, sp, #20
 c01751c:	9200      	str	r2, [sp, #0]
 c01751e:	9301      	str	r3, [sp, #4]
 c017520:	aa03      	add	r2, sp, #12
 c017522:	2100      	movs	r1, #0
 c017524:	f7ff ffbe 	bl	c0174a4 <psa_call>
 c017528:	4604      	mov	r4, r0
                          TFM_CRYPTO_ALLOCATE_KEY);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01752a:	4628      	mov	r0, r5
 c01752c:	f7ff ffbc 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c017530:	4620      	mov	r0, r4
 c017532:	b015      	add	sp, #84	; 0x54
 c017534:	bd30      	pop	{r4, r5, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c017536:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01753a:	e7f9      	b.n	c017530 <psa_allocate_key+0x42>

0c01753c <psa_open_key>:
    (void)handle;

    /* TODO: Persistent key APIs are not supported yet */
    return PSA_ERROR_NOT_SUPPORTED;
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c01753c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 c017540:	4770      	bx	lr

0c017542 <psa_create_key>:
 c017542:	f06f 0085 	mvn.w	r0, #133	; 0x85
 c017546:	4770      	bx	lr

0c017548 <psa_close_key>:
    (void)handle;

    /* TODO: Persistent key APIs are not supported yet */
    return PSA_ERROR_NOT_SUPPORTED;
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c017548:	f06f 0085 	mvn.w	r0, #133	; 0x85
 c01754c:	4770      	bx	lr

0c01754e <psa_import_key>:
__attribute__((section("SFN")))
psa_status_t psa_import_key(psa_key_handle_t handle,
                            psa_key_type_t type,
                            const uint8_t *data,
                            size_t data_length)
{
 c01754e:	b5f0      	push	{r4, r5, r6, r7, lr}
 c017550:	b095      	sub	sp, #84	; 0x54
 c017552:	4615      	mov	r5, r2
 c017554:	4607      	mov	r7, r0
 c017556:	460e      	mov	r6, r1
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c017558:	222e      	movs	r2, #46	; 0x2e
 c01755a:	2100      	movs	r1, #0
 c01755c:	f10d 0022 	add.w	r0, sp, #34	; 0x22
{
 c017560:	461c      	mov	r4, r3
    struct tfm_crypto_pack_iovec iov = {
 c017562:	f7fd fa30 	bl	c0149c6 <memset>
        .sfn_id = TFM_CRYPTO_IMPORT_KEY_SID,
        .key_handle = handle,
        .type = type,
    };
    psa_invec in_vec[] = {
 c017566:	ab07      	add	r3, sp, #28
    struct tfm_crypto_pack_iovec iov = {
 c017568:	2101      	movs	r1, #1
    psa_invec in_vec[] = {
 c01756a:	9303      	str	r3, [sp, #12]
 c01756c:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
        {.base = data, .len = data_length}
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01756e:	2080      	movs	r0, #128	; 0x80
    psa_invec in_vec[] = {
 c017570:	e9cd 3504 	strd	r3, r5, [sp, #16]
    struct tfm_crypto_pack_iovec iov = {
 c017574:	9107      	str	r1, [sp, #28]
 c017576:	f8ad 7020 	strh.w	r7, [sp, #32]
 c01757a:	9609      	str	r6, [sp, #36]	; 0x24
    psa_invec in_vec[] = {
 c01757c:	9406      	str	r4, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c01757e:	f7ff ff8f 	bl	c0174a0 <psa_connect>
 c017582:	1e05      	subs	r5, r0, #0
 c017584:	dd0d      	ble.n	c0175a2 <psa_import_key+0x54>
#endif

    status = API_DISPATCH_NO_OUTVEC(tfm_crypto_import_key,
 c017586:	2100      	movs	r1, #0
 c017588:	2302      	movs	r3, #2
 c01758a:	e9cd 1100 	strd	r1, r1, [sp]
 c01758e:	aa03      	add	r2, sp, #12
 c017590:	f7ff ff88 	bl	c0174a4 <psa_call>
 c017594:	4604      	mov	r4, r0
                                    TFM_CRYPTO_IMPORT_KEY);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c017596:	4628      	mov	r0, r5
 c017598:	f7ff ff86 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c01759c:	4620      	mov	r0, r4
 c01759e:	b015      	add	sp, #84	; 0x54
 c0175a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c0175a2:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c0175a6:	e7f9      	b.n	c01759c <psa_import_key+0x4e>

0c0175a8 <psa_destroy_key>:

__attribute__((section("SFN")))
psa_status_t psa_destroy_key(psa_key_handle_t handle)
{
 c0175a8:	b530      	push	{r4, r5, lr}
 c0175aa:	b093      	sub	sp, #76	; 0x4c
 c0175ac:	4604      	mov	r4, r0
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c0175ae:	222e      	movs	r2, #46	; 0x2e
 c0175b0:	2100      	movs	r1, #0
 c0175b2:	f10d 001a 	add.w	r0, sp, #26
 c0175b6:	f7fd fa06 	bl	c0149c6 <memset>
 c0175ba:	2302      	movs	r3, #2
 c0175bc:	9305      	str	r3, [sp, #20]
        .sfn_id = TFM_CRYPTO_DESTROY_KEY_SID,
        .key_handle = handle,
    };
    psa_invec in_vec[] = {
 c0175be:	ab05      	add	r3, sp, #20
 c0175c0:	9303      	str	r3, [sp, #12]
 c0175c2:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c0175c4:	2101      	movs	r1, #1
 c0175c6:	2080      	movs	r0, #128	; 0x80
    struct tfm_crypto_pack_iovec iov = {
 c0175c8:	f8ad 4018 	strh.w	r4, [sp, #24]
    psa_invec in_vec[] = {
 c0175cc:	9304      	str	r3, [sp, #16]
    PSA_CONNECT(TFM_CRYPTO);
 c0175ce:	f7ff ff67 	bl	c0174a0 <psa_connect>
 c0175d2:	1e05      	subs	r5, r0, #0
 c0175d4:	dd0d      	ble.n	c0175f2 <psa_destroy_key+0x4a>
#endif

    status = API_DISPATCH_NO_OUTVEC(tfm_crypto_destroy_key,
 c0175d6:	2100      	movs	r1, #0
 c0175d8:	2301      	movs	r3, #1
 c0175da:	e9cd 1100 	strd	r1, r1, [sp]
 c0175de:	aa03      	add	r2, sp, #12
 c0175e0:	f7ff ff60 	bl	c0174a4 <psa_call>
 c0175e4:	4604      	mov	r4, r0
                                    TFM_CRYPTO_DESTROY_KEY);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c0175e6:	4628      	mov	r0, r5
 c0175e8:	f7ff ff5e 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c0175ec:	4620      	mov	r0, r4
 c0175ee:	b013      	add	sp, #76	; 0x4c
 c0175f0:	bd30      	pop	{r4, r5, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c0175f2:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c0175f6:	e7f9      	b.n	c0175ec <psa_destroy_key+0x44>

0c0175f8 <psa_get_key_information>:

__attribute__((section("SFN")))
psa_status_t psa_get_key_information(psa_key_handle_t handle,
                                     psa_key_type_t *type,
                                     size_t *bits)
{
 c0175f8:	b570      	push	{r4, r5, r6, lr}
 c0175fa:	b096      	sub	sp, #88	; 0x58
 c0175fc:	460d      	mov	r5, r1
 c0175fe:	4606      	mov	r6, r0
 c017600:	4614      	mov	r4, r2
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c017602:	2100      	movs	r1, #0
 c017604:	222e      	movs	r2, #46	; 0x2e
 c017606:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 c01760a:	f7fd f9dc 	bl	c0149c6 <memset>
 c01760e:	2303      	movs	r3, #3
 c017610:	9309      	str	r3, [sp, #36]	; 0x24
        .sfn_id = TFM_CRYPTO_GET_KEY_INFORMATION_SID,
        .key_handle = handle,
    };
    psa_invec in_vec[] = {
 c017612:	ab09      	add	r3, sp, #36	; 0x24
 c017614:	9303      	str	r3, [sp, #12]
 c017616:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };
    psa_outvec out_vec[] = {
 c017618:	e9cd 3504 	strd	r3, r5, [sp, #16]
 c01761c:	2304      	movs	r3, #4
        {.base = type, .len = sizeof(psa_key_type_t)},
        {.base = bits, .len = sizeof(size_t)}
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01761e:	2101      	movs	r1, #1
 c017620:	2080      	movs	r0, #128	; 0x80
    struct tfm_crypto_pack_iovec iov = {
 c017622:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
    psa_outvec out_vec[] = {
 c017626:	e9cd 3406 	strd	r3, r4, [sp, #24]
 c01762a:	9308      	str	r3, [sp, #32]
    PSA_CONNECT(TFM_CRYPTO);
 c01762c:	f7ff ff38 	bl	c0174a0 <psa_connect>
 c017630:	1e05      	subs	r5, r0, #0
 c017632:	dd0f      	ble.n	c017654 <psa_get_key_information+0x5c>
#endif

    status = API_DISPATCH(tfm_crypto_get_key_information,
 c017634:	2302      	movs	r3, #2
 c017636:	9301      	str	r3, [sp, #4]
 c017638:	ab05      	add	r3, sp, #20
 c01763a:	9300      	str	r3, [sp, #0]
 c01763c:	aa03      	add	r2, sp, #12
 c01763e:	2301      	movs	r3, #1
 c017640:	2100      	movs	r1, #0
 c017642:	f7ff ff2f 	bl	c0174a4 <psa_call>
 c017646:	4604      	mov	r4, r0
                          TFM_CRYPTO_GET_KEY_INFORMATION);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c017648:	4628      	mov	r0, r5
 c01764a:	f7ff ff2d 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c01764e:	4620      	mov	r0, r4
 c017650:	b016      	add	sp, #88	; 0x58
 c017652:	bd70      	pop	{r4, r5, r6, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c017654:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c017658:	e7f9      	b.n	c01764e <psa_get_key_information+0x56>

0c01765a <psa_export_key>:
__attribute__((section("SFN")))
psa_status_t psa_export_key(psa_key_handle_t handle,
                            uint8_t *data,
                            size_t data_size,
                            size_t *data_length)
{
 c01765a:	b5f0      	push	{r4, r5, r6, r7, lr}
 c01765c:	b095      	sub	sp, #84	; 0x54
 c01765e:	460d      	mov	r5, r1
 c017660:	4607      	mov	r7, r0
 c017662:	4614      	mov	r4, r2
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c017664:	2100      	movs	r1, #0
 c017666:	222e      	movs	r2, #46	; 0x2e
 c017668:	f10d 0022 	add.w	r0, sp, #34	; 0x22
{
 c01766c:	461e      	mov	r6, r3
    struct tfm_crypto_pack_iovec iov = {
 c01766e:	f7fd f9aa 	bl	c0149c6 <memset>
 c017672:	2304      	movs	r3, #4
 c017674:	9307      	str	r3, [sp, #28]
        .sfn_id = TFM_CRYPTO_EXPORT_KEY_SID,
        .key_handle = handle,
    };
    psa_invec in_vec[] = {
 c017676:	ab07      	add	r3, sp, #28
 c017678:	9303      	str	r3, [sp, #12]
 c01767a:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
        {.base = data, .len = data_size}
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01767c:	2101      	movs	r1, #1
 c01767e:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c017680:	e9cd 3504 	strd	r3, r5, [sp, #16]
    struct tfm_crypto_pack_iovec iov = {
 c017684:	f8ad 7020 	strh.w	r7, [sp, #32]
    psa_outvec out_vec[] = {
 c017688:	9406      	str	r4, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c01768a:	f7ff ff09 	bl	c0174a0 <psa_connect>
 c01768e:	1e05      	subs	r5, r0, #0
 c017690:	dd10      	ble.n	c0176b4 <psa_export_key+0x5a>
#endif

    status = API_DISPATCH(tfm_crypto_export_key,
 c017692:	2301      	movs	r3, #1
 c017694:	aa05      	add	r2, sp, #20
 c017696:	9301      	str	r3, [sp, #4]
 c017698:	9200      	str	r2, [sp, #0]
 c01769a:	2100      	movs	r1, #0
 c01769c:	aa03      	add	r2, sp, #12
 c01769e:	f7ff ff01 	bl	c0174a4 <psa_call>
                          TFM_CRYPTO_EXPORT_KEY);

    *data_length = out_vec[0].len;
 c0176a2:	9b06      	ldr	r3, [sp, #24]
    status = API_DISPATCH(tfm_crypto_export_key,
 c0176a4:	4604      	mov	r4, r0
    *data_length = out_vec[0].len;
 c0176a6:	6033      	str	r3, [r6, #0]

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c0176a8:	4628      	mov	r0, r5
 c0176aa:	f7ff fefd 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c0176ae:	4620      	mov	r0, r4
 c0176b0:	b015      	add	sp, #84	; 0x54
 c0176b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c0176b4:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c0176b8:	e7f9      	b.n	c0176ae <psa_export_key+0x54>

0c0176ba <psa_export_public_key>:
__attribute__((section("SFN")))
psa_status_t psa_export_public_key(psa_key_handle_t handle,
                                   uint8_t *data,
                                   size_t data_size,
                                   size_t *data_length)
{
 c0176ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 c0176bc:	b095      	sub	sp, #84	; 0x54
 c0176be:	460d      	mov	r5, r1
 c0176c0:	4607      	mov	r7, r0
 c0176c2:	4614      	mov	r4, r2
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c0176c4:	2100      	movs	r1, #0
 c0176c6:	222e      	movs	r2, #46	; 0x2e
 c0176c8:	f10d 0022 	add.w	r0, sp, #34	; 0x22
{
 c0176cc:	461e      	mov	r6, r3
    struct tfm_crypto_pack_iovec iov = {
 c0176ce:	f7fd f97a 	bl	c0149c6 <memset>
 c0176d2:	2305      	movs	r3, #5
 c0176d4:	9307      	str	r3, [sp, #28]
        .sfn_id = TFM_CRYPTO_EXPORT_PUBLIC_KEY_SID,
        .key_handle = handle,
    };

    psa_invec in_vec[] = {
 c0176d6:	ab07      	add	r3, sp, #28
 c0176d8:	9303      	str	r3, [sp, #12]
 c0176da:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
        {.base = data, .len = data_size}
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c0176dc:	2101      	movs	r1, #1
 c0176de:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c0176e0:	e9cd 3504 	strd	r3, r5, [sp, #16]
    struct tfm_crypto_pack_iovec iov = {
 c0176e4:	f8ad 7020 	strh.w	r7, [sp, #32]
    psa_outvec out_vec[] = {
 c0176e8:	9406      	str	r4, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c0176ea:	f7ff fed9 	bl	c0174a0 <psa_connect>
 c0176ee:	1e05      	subs	r5, r0, #0
 c0176f0:	dd10      	ble.n	c017714 <psa_export_public_key+0x5a>
#endif

    status = API_DISPATCH(tfm_crypto_export_public_key,
 c0176f2:	2301      	movs	r3, #1
 c0176f4:	aa05      	add	r2, sp, #20
 c0176f6:	9301      	str	r3, [sp, #4]
 c0176f8:	9200      	str	r2, [sp, #0]
 c0176fa:	2100      	movs	r1, #0
 c0176fc:	aa03      	add	r2, sp, #12
 c0176fe:	f7ff fed1 	bl	c0174a4 <psa_call>
                          TFM_CRYPTO_EXPORT_PUBLIC_KEY);

    *data_length = out_vec[0].len;
 c017702:	9b06      	ldr	r3, [sp, #24]
    status = API_DISPATCH(tfm_crypto_export_public_key,
 c017704:	4604      	mov	r4, r0
    *data_length = out_vec[0].len;
 c017706:	6033      	str	r3, [r6, #0]

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c017708:	4628      	mov	r0, r5
 c01770a:	f7ff fecd 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c01770e:	4620      	mov	r0, r4
 c017710:	b015      	add	sp, #84	; 0x54
 c017712:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c017714:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c017718:	e7f9      	b.n	c01770e <psa_export_public_key+0x54>

0c01771a <psa_copy_key>:

__attribute__((section("SFN")))
psa_status_t psa_copy_key(psa_key_handle_t source_handle,
                          psa_key_handle_t target_handle,
                          const psa_key_policy_t *constraint)
{
 c01771a:	b530      	push	{r4, r5, lr}
 c01771c:	b099      	sub	sp, #100	; 0x64
 c01771e:	4605      	mov	r5, r0
 c017720:	4614      	mov	r4, r2
 c017722:	f8ad 100e 	strh.w	r1, [sp, #14]
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c017726:	222e      	movs	r2, #46	; 0x2e
 c017728:	2100      	movs	r1, #0
 c01772a:	f10d 0032 	add.w	r0, sp, #50	; 0x32
 c01772e:	f7fd f94a 	bl	c0149c6 <memset>
 c017732:	2306      	movs	r3, #6
 c017734:	930b      	str	r3, [sp, #44]	; 0x2c
        .sfn_id = TFM_CRYPTO_COPY_KEY_SID,
        .key_handle = source_handle,
    };

    psa_invec in_vec[] = {
 c017736:	ab0b      	add	r3, sp, #44	; 0x2c
 c017738:	9305      	str	r3, [sp, #20]
 c01773a:	2334      	movs	r3, #52	; 0x34
 c01773c:	9306      	str	r3, [sp, #24]
 c01773e:	f10d 030e 	add.w	r3, sp, #14
 c017742:	9307      	str	r3, [sp, #28]
 c017744:	2302      	movs	r3, #2
 c017746:	e9cd 3408 	strd	r3, r4, [sp, #32]
 c01774a:	230c      	movs	r3, #12
        {.base = &target_handle, .len = sizeof(psa_key_handle_t)},
        {.base = constraint, .len = sizeof(psa_key_policy_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01774c:	2101      	movs	r1, #1
 c01774e:	2080      	movs	r0, #128	; 0x80
    struct tfm_crypto_pack_iovec iov = {
 c017750:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
    psa_invec in_vec[] = {
 c017754:	930a      	str	r3, [sp, #40]	; 0x28
    PSA_CONNECT(TFM_CRYPTO);
 c017756:	f7ff fea3 	bl	c0174a0 <psa_connect>
 c01775a:	1e05      	subs	r5, r0, #0
 c01775c:	dd0d      	ble.n	c01777a <psa_copy_key+0x60>
#endif

    status = API_DISPATCH_NO_OUTVEC(tfm_crypto_copy_key,
 c01775e:	2100      	movs	r1, #0
 c017760:	2303      	movs	r3, #3
 c017762:	e9cd 1100 	strd	r1, r1, [sp]
 c017766:	aa05      	add	r2, sp, #20
 c017768:	f7ff fe9c 	bl	c0174a4 <psa_call>
 c01776c:	4604      	mov	r4, r0
                                    TFM_CRYPTO_COPY_KEY);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01776e:	4628      	mov	r0, r5
 c017770:	f7ff fe9a 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c017774:	4620      	mov	r0, r4
 c017776:	b019      	add	sp, #100	; 0x64
 c017778:	bd30      	pop	{r4, r5, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01777a:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01777e:	e7f9      	b.n	c017774 <psa_copy_key+0x5a>

0c017780 <psa_key_policy_set_usage>:
void psa_key_policy_set_usage(psa_key_policy_t *policy,
                              psa_key_usage_t usage,
                              psa_algorithm_t alg)
{
    policy->usage = usage;
    policy->alg = alg;
 c017780:	e9c0 1200 	strd	r1, r2, [r0]
}
 c017784:	4770      	bx	lr

0c017786 <psa_key_policy_get_usage>:

__attribute__((section("SFN")))
psa_key_usage_t psa_key_policy_get_usage(const psa_key_policy_t *policy)
{
    return policy->usage;
}
 c017786:	6800      	ldr	r0, [r0, #0]
 c017788:	4770      	bx	lr

0c01778a <psa_key_policy_get_algorithm>:

__attribute__((section("SFN")))
psa_algorithm_t psa_key_policy_get_algorithm(const psa_key_policy_t *policy)
{
    return policy->alg;
}
 c01778a:	6840      	ldr	r0, [r0, #4]
 c01778c:	4770      	bx	lr

0c01778e <psa_set_key_policy>:

__attribute__((section("SFN")))
psa_status_t psa_set_key_policy(psa_key_handle_t handle,
                                const psa_key_policy_t *policy)
{
 c01778e:	b530      	push	{r4, r5, lr}
 c017790:	b095      	sub	sp, #84	; 0x54
 c017792:	4605      	mov	r5, r0
 c017794:	460c      	mov	r4, r1
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c017796:	222e      	movs	r2, #46	; 0x2e
 c017798:	2100      	movs	r1, #0
 c01779a:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 c01779e:	f7fd f912 	bl	c0149c6 <memset>
 c0177a2:	2307      	movs	r3, #7
 c0177a4:	9307      	str	r3, [sp, #28]
        .sfn_id = TFM_CRYPTO_SET_KEY_POLICY_SID,
        .key_handle = handle,
    };

    psa_invec in_vec[] = {
 c0177a6:	ab07      	add	r3, sp, #28
 c0177a8:	9303      	str	r3, [sp, #12]
 c0177aa:	2334      	movs	r3, #52	; 0x34
 c0177ac:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c0177b0:	230c      	movs	r3, #12
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
        {.base = policy, .len = sizeof(psa_key_policy_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c0177b2:	2101      	movs	r1, #1
 c0177b4:	2080      	movs	r0, #128	; 0x80
    struct tfm_crypto_pack_iovec iov = {
 c0177b6:	f8ad 5020 	strh.w	r5, [sp, #32]
    psa_invec in_vec[] = {
 c0177ba:	9306      	str	r3, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c0177bc:	f7ff fe70 	bl	c0174a0 <psa_connect>
 c0177c0:	1e05      	subs	r5, r0, #0
 c0177c2:	dd0d      	ble.n	c0177e0 <psa_set_key_policy+0x52>
#endif

    status = API_DISPATCH_NO_OUTVEC(tfm_crypto_set_key_policy,
 c0177c4:	2100      	movs	r1, #0
 c0177c6:	2302      	movs	r3, #2
 c0177c8:	e9cd 1100 	strd	r1, r1, [sp]
 c0177cc:	aa03      	add	r2, sp, #12
 c0177ce:	f7ff fe69 	bl	c0174a4 <psa_call>
 c0177d2:	4604      	mov	r4, r0
                                    TFM_CRYPTO_SET_KEY_POLICY);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c0177d4:	4628      	mov	r0, r5
 c0177d6:	f7ff fe67 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c0177da:	4620      	mov	r0, r4
 c0177dc:	b015      	add	sp, #84	; 0x54
 c0177de:	bd30      	pop	{r4, r5, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c0177e0:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c0177e4:	e7f9      	b.n	c0177da <psa_set_key_policy+0x4c>

0c0177e6 <psa_get_key_policy>:

__attribute__((section("SFN")))
psa_status_t psa_get_key_policy(psa_key_handle_t handle,
                                psa_key_policy_t *policy)
{
 c0177e6:	b530      	push	{r4, r5, lr}
 c0177e8:	b095      	sub	sp, #84	; 0x54
 c0177ea:	4605      	mov	r5, r0
 c0177ec:	460c      	mov	r4, r1
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c0177ee:	222e      	movs	r2, #46	; 0x2e
 c0177f0:	2100      	movs	r1, #0
 c0177f2:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 c0177f6:	f7fd f8e6 	bl	c0149c6 <memset>
 c0177fa:	2308      	movs	r3, #8
 c0177fc:	9307      	str	r3, [sp, #28]
        .sfn_id = TFM_CRYPTO_GET_KEY_POLICY_SID,
        .key_handle = handle,
    };

    psa_invec in_vec[] = {
 c0177fe:	ab07      	add	r3, sp, #28
 c017800:	9303      	str	r3, [sp, #12]
 c017802:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };
    psa_outvec out_vec[] = {
 c017804:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c017808:	230c      	movs	r3, #12
        {.base = policy, .len = sizeof(psa_key_policy_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01780a:	2101      	movs	r1, #1
 c01780c:	2080      	movs	r0, #128	; 0x80
    struct tfm_crypto_pack_iovec iov = {
 c01780e:	f8ad 5020 	strh.w	r5, [sp, #32]
    psa_outvec out_vec[] = {
 c017812:	9306      	str	r3, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c017814:	f7ff fe44 	bl	c0174a0 <psa_connect>
 c017818:	1e05      	subs	r5, r0, #0
 c01781a:	dd0e      	ble.n	c01783a <psa_get_key_policy+0x54>
#endif

    status = API_DISPATCH(tfm_crypto_get_key_policy,
 c01781c:	2301      	movs	r3, #1
 c01781e:	aa05      	add	r2, sp, #20
 c017820:	9200      	str	r2, [sp, #0]
 c017822:	9301      	str	r3, [sp, #4]
 c017824:	aa03      	add	r2, sp, #12
 c017826:	2100      	movs	r1, #0
 c017828:	f7ff fe3c 	bl	c0174a4 <psa_call>
 c01782c:	4604      	mov	r4, r0
                          TFM_CRYPTO_GET_KEY_POLICY);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01782e:	4628      	mov	r0, r5
 c017830:	f7ff fe3a 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c017834:	4620      	mov	r0, r4
 c017836:	b015      	add	sp, #84	; 0x54
 c017838:	bd30      	pop	{r4, r5, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01783a:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01783e:	e7f9      	b.n	c017834 <psa_get_key_policy+0x4e>

0c017840 <psa_get_key_lifetime>:

__attribute__((section("SFN")))
psa_status_t psa_get_key_lifetime(psa_key_handle_t handle,
                                  psa_key_lifetime_t *lifetime)
{
 c017840:	b530      	push	{r4, r5, lr}
 c017842:	b095      	sub	sp, #84	; 0x54
 c017844:	4605      	mov	r5, r0
 c017846:	460c      	mov	r4, r1
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c017848:	222e      	movs	r2, #46	; 0x2e
 c01784a:	2100      	movs	r1, #0
 c01784c:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 c017850:	f7fd f8b9 	bl	c0149c6 <memset>
 c017854:	2309      	movs	r3, #9
 c017856:	9307      	str	r3, [sp, #28]
        .sfn_id = TFM_CRYPTO_GET_KEY_LIFETIME_SID,
        .key_handle = handle,
    };

    psa_invec in_vec[] = {
 c017858:	ab07      	add	r3, sp, #28
 c01785a:	9303      	str	r3, [sp, #12]
 c01785c:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };
    psa_outvec out_vec[] = {
 c01785e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c017862:	2304      	movs	r3, #4
        {.base = lifetime, .len = sizeof(psa_key_lifetime_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c017864:	2101      	movs	r1, #1
 c017866:	2080      	movs	r0, #128	; 0x80
    struct tfm_crypto_pack_iovec iov = {
 c017868:	f8ad 5020 	strh.w	r5, [sp, #32]
    psa_outvec out_vec[] = {
 c01786c:	9306      	str	r3, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c01786e:	f7ff fe17 	bl	c0174a0 <psa_connect>
 c017872:	1e05      	subs	r5, r0, #0
 c017874:	dd0e      	ble.n	c017894 <psa_get_key_lifetime+0x54>
#endif

    status = API_DISPATCH(tfm_crypto_get_key_lifetime,
 c017876:	2301      	movs	r3, #1
 c017878:	aa05      	add	r2, sp, #20
 c01787a:	9200      	str	r2, [sp, #0]
 c01787c:	9301      	str	r3, [sp, #4]
 c01787e:	aa03      	add	r2, sp, #12
 c017880:	2100      	movs	r1, #0
 c017882:	f7ff fe0f 	bl	c0174a4 <psa_call>
 c017886:	4604      	mov	r4, r0
                          TFM_CRYPTO_GET_KEY_LIFETIME);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c017888:	4628      	mov	r0, r5
 c01788a:	f7ff fe0d 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c01788e:	4620      	mov	r0, r4
 c017890:	b015      	add	sp, #84	; 0x54
 c017892:	bd30      	pop	{r4, r5, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c017894:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c017898:	e7f9      	b.n	c01788e <psa_get_key_lifetime+0x4e>

0c01789a <psa_cipher_generate_iv>:
__attribute__((section("SFN")))
psa_status_t psa_cipher_generate_iv(psa_cipher_operation_t *operation,
                                    unsigned char *iv,
                                    size_t iv_size,
                                    size_t *iv_length)
{
 c01789a:	b5f0      	push	{r4, r5, r6, r7, lr}
 c01789c:	b097      	sub	sp, #92	; 0x5c
 c01789e:	4604      	mov	r4, r0
 c0178a0:	4615      	mov	r5, r2
 c0178a2:	460f      	mov	r7, r1
#if (TFM_CRYPTO_CIPHER_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c0178a4:	2230      	movs	r2, #48	; 0x30
 c0178a6:	2100      	movs	r1, #0
 c0178a8:	a80a      	add	r0, sp, #40	; 0x28
{
 c0178aa:	461e      	mov	r6, r3
    struct tfm_crypto_pack_iovec iov = {
 c0178ac:	f7fd f88b 	bl	c0149c6 <memset>
 c0178b0:	230a      	movs	r3, #10
 c0178b2:	9309      	str	r3, [sp, #36]	; 0x24
 c0178b4:	6823      	ldr	r3, [r4, #0]
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
        {.base = iv, .len = iv_size},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c0178b6:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c0178b8:	930f      	str	r3, [sp, #60]	; 0x3c
    psa_invec in_vec[] = {
 c0178ba:	ab09      	add	r3, sp, #36	; 0x24
 c0178bc:	9303      	str	r3, [sp, #12]
 c0178be:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
 c0178c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c0178c4:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c0178c6:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c0178c8:	9508      	str	r5, [sp, #32]
 c0178ca:	e9cd 3706 	strd	r3, r7, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c0178ce:	f7ff fde7 	bl	c0174a0 <psa_connect>
 c0178d2:	1e05      	subs	r5, r0, #0
 c0178d4:	dd11      	ble.n	c0178fa <psa_cipher_generate_iv+0x60>
#endif

    status = API_DISPATCH(tfm_crypto_cipher_generate_iv,
 c0178d6:	2302      	movs	r3, #2
 c0178d8:	9301      	str	r3, [sp, #4]
 c0178da:	ab05      	add	r3, sp, #20
 c0178dc:	9300      	str	r3, [sp, #0]
 c0178de:	aa03      	add	r2, sp, #12
 c0178e0:	2301      	movs	r3, #1
 c0178e2:	2100      	movs	r1, #0
 c0178e4:	f7ff fdde 	bl	c0174a4 <psa_call>
                          TFM_CRYPTO_CIPHER_GENERATE_IV);

    *iv_length = out_vec[1].len;
 c0178e8:	9b08      	ldr	r3, [sp, #32]
    status = API_DISPATCH(tfm_crypto_cipher_generate_iv,
 c0178ea:	4604      	mov	r4, r0
    *iv_length = out_vec[1].len;
 c0178ec:	6033      	str	r3, [r6, #0]

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c0178ee:	4628      	mov	r0, r5
 c0178f0:	f7ff fdda 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_CIPHER_MODULE_DISABLED */
}
 c0178f4:	4620      	mov	r0, r4
 c0178f6:	b017      	add	sp, #92	; 0x5c
 c0178f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c0178fa:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c0178fe:	e7f9      	b.n	c0178f4 <psa_cipher_generate_iv+0x5a>

0c017900 <psa_cipher_set_iv>:

__attribute__((section("SFN")))
psa_status_t psa_cipher_set_iv(psa_cipher_operation_t *operation,
                               const unsigned char *iv,
                               size_t iv_length)
{
 c017900:	b570      	push	{r4, r5, r6, lr}
 c017902:	b096      	sub	sp, #88	; 0x58
 c017904:	4604      	mov	r4, r0
 c017906:	4615      	mov	r5, r2
 c017908:	460e      	mov	r6, r1
#if (TFM_CRYPTO_CIPHER_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01790a:	2230      	movs	r2, #48	; 0x30
 c01790c:	2100      	movs	r1, #0
 c01790e:	a80a      	add	r0, sp, #40	; 0x28
 c017910:	f7fd f859 	bl	c0149c6 <memset>
 c017914:	230b      	movs	r3, #11
 c017916:	9309      	str	r3, [sp, #36]	; 0x24
 c017918:	6823      	ldr	r3, [r4, #0]
    psa_outvec out_vec[] = {
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01791a:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c01791c:	930f      	str	r3, [sp, #60]	; 0x3c
    psa_invec in_vec[] = {
 c01791e:	ab09      	add	r3, sp, #36	; 0x24
 c017920:	9305      	str	r3, [sp, #20]
 c017922:	2334      	movs	r3, #52	; 0x34
 c017924:	e9cd 3606 	strd	r3, r6, [sp, #24]
    psa_outvec out_vec[] = {
 c017928:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c01792a:	2080      	movs	r0, #128	; 0x80
    psa_invec in_vec[] = {
 c01792c:	9508      	str	r5, [sp, #32]
    psa_outvec out_vec[] = {
 c01792e:	9403      	str	r4, [sp, #12]
 c017930:	9304      	str	r3, [sp, #16]
    PSA_CONNECT(TFM_CRYPTO);
 c017932:	f7ff fdb5 	bl	c0174a0 <psa_connect>
 c017936:	1e05      	subs	r5, r0, #0
 c017938:	dd0f      	ble.n	c01795a <psa_cipher_set_iv+0x5a>
#endif

    status = API_DISPATCH(tfm_crypto_cipher_set_iv,
 c01793a:	2301      	movs	r3, #1
 c01793c:	9301      	str	r3, [sp, #4]
 c01793e:	ab03      	add	r3, sp, #12
 c017940:	9300      	str	r3, [sp, #0]
 c017942:	aa05      	add	r2, sp, #20
 c017944:	2302      	movs	r3, #2
 c017946:	2100      	movs	r1, #0
 c017948:	f7ff fdac 	bl	c0174a4 <psa_call>
 c01794c:	4604      	mov	r4, r0
                          TFM_CRYPTO_CIPHER_SET_IV);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01794e:	4628      	mov	r0, r5
 c017950:	f7ff fdaa 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_CIPHER_MODULE_DISABLED */
}
 c017954:	4620      	mov	r0, r4
 c017956:	b016      	add	sp, #88	; 0x58
 c017958:	bd70      	pop	{r4, r5, r6, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01795a:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01795e:	e7f9      	b.n	c017954 <psa_cipher_set_iv+0x54>

0c017960 <psa_cipher_encrypt_setup>:

__attribute__((section("SFN")))
psa_status_t psa_cipher_encrypt_setup(psa_cipher_operation_t *operation,
                                      psa_key_handle_t handle,
                                      psa_algorithm_t alg)
{
 c017960:	b570      	push	{r4, r5, r6, lr}
 c017962:	b094      	sub	sp, #80	; 0x50
 c017964:	4604      	mov	r4, r0
 c017966:	4615      	mov	r5, r2
 c017968:	460e      	mov	r6, r1
#if (TFM_CRYPTO_CIPHER_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01796a:	222e      	movs	r2, #46	; 0x2e
 c01796c:	2100      	movs	r1, #0
 c01796e:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 c017972:	f7fd f828 	bl	c0149c6 <memset>
 c017976:	230c      	movs	r3, #12
 c017978:	9307      	str	r3, [sp, #28]
 c01797a:	6823      	ldr	r3, [r4, #0]
    psa_outvec out_vec[] = {
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01797c:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c01797e:	930d      	str	r3, [sp, #52]	; 0x34
    psa_invec in_vec[] = {
 c017980:	ab07      	add	r3, sp, #28
 c017982:	9303      	str	r3, [sp, #12]
 c017984:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
 c017986:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c01798a:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c01798c:	2080      	movs	r0, #128	; 0x80
    struct tfm_crypto_pack_iovec iov = {
 c01798e:	950b      	str	r5, [sp, #44]	; 0x2c
 c017990:	f8ad 6020 	strh.w	r6, [sp, #32]
    psa_outvec out_vec[] = {
 c017994:	9306      	str	r3, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c017996:	f7ff fd83 	bl	c0174a0 <psa_connect>
 c01799a:	1e05      	subs	r5, r0, #0
 c01799c:	dd0e      	ble.n	c0179bc <psa_cipher_encrypt_setup+0x5c>
#endif

    status = API_DISPATCH(tfm_crypto_cipher_encrypt_setup,
 c01799e:	2301      	movs	r3, #1
 c0179a0:	aa05      	add	r2, sp, #20
 c0179a2:	9200      	str	r2, [sp, #0]
 c0179a4:	9301      	str	r3, [sp, #4]
 c0179a6:	aa03      	add	r2, sp, #12
 c0179a8:	2100      	movs	r1, #0
 c0179aa:	f7ff fd7b 	bl	c0174a4 <psa_call>
 c0179ae:	4604      	mov	r4, r0
                          TFM_CRYPTO_CIPHER_ENCRYPT_SETUP);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c0179b0:	4628      	mov	r0, r5
 c0179b2:	f7ff fd79 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_CIPHER_MODULE_DISABLED */
}
 c0179b6:	4620      	mov	r0, r4
 c0179b8:	b014      	add	sp, #80	; 0x50
 c0179ba:	bd70      	pop	{r4, r5, r6, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c0179bc:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c0179c0:	e7f9      	b.n	c0179b6 <psa_cipher_encrypt_setup+0x56>

0c0179c2 <psa_cipher_decrypt_setup>:

__attribute__((section("SFN")))
psa_status_t psa_cipher_decrypt_setup(psa_cipher_operation_t *operation,
                                      psa_key_handle_t handle,
                                      psa_algorithm_t alg)
{
 c0179c2:	b570      	push	{r4, r5, r6, lr}
 c0179c4:	b094      	sub	sp, #80	; 0x50
 c0179c6:	4604      	mov	r4, r0
 c0179c8:	4615      	mov	r5, r2
 c0179ca:	460e      	mov	r6, r1
#if (TFM_CRYPTO_CIPHER_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c0179cc:	222e      	movs	r2, #46	; 0x2e
 c0179ce:	2100      	movs	r1, #0
 c0179d0:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 c0179d4:	f7fc fff7 	bl	c0149c6 <memset>
 c0179d8:	230d      	movs	r3, #13
 c0179da:	9307      	str	r3, [sp, #28]
 c0179dc:	6823      	ldr	r3, [r4, #0]
    psa_outvec out_vec[] = {
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c0179de:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c0179e0:	930d      	str	r3, [sp, #52]	; 0x34
    psa_invec in_vec[] = {
 c0179e2:	ab07      	add	r3, sp, #28
 c0179e4:	9303      	str	r3, [sp, #12]
 c0179e6:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
 c0179e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c0179ec:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c0179ee:	2080      	movs	r0, #128	; 0x80
    struct tfm_crypto_pack_iovec iov = {
 c0179f0:	950b      	str	r5, [sp, #44]	; 0x2c
 c0179f2:	f8ad 6020 	strh.w	r6, [sp, #32]
    psa_outvec out_vec[] = {
 c0179f6:	9306      	str	r3, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c0179f8:	f7ff fd52 	bl	c0174a0 <psa_connect>
 c0179fc:	1e05      	subs	r5, r0, #0
 c0179fe:	dd0e      	ble.n	c017a1e <psa_cipher_decrypt_setup+0x5c>
#endif

    status = API_DISPATCH(tfm_crypto_cipher_decrypt_setup,
 c017a00:	2301      	movs	r3, #1
 c017a02:	aa05      	add	r2, sp, #20
 c017a04:	9200      	str	r2, [sp, #0]
 c017a06:	9301      	str	r3, [sp, #4]
 c017a08:	aa03      	add	r2, sp, #12
 c017a0a:	2100      	movs	r1, #0
 c017a0c:	f7ff fd4a 	bl	c0174a4 <psa_call>
 c017a10:	4604      	mov	r4, r0
                          TFM_CRYPTO_CIPHER_DECRYPT_SETUP);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c017a12:	4628      	mov	r0, r5
 c017a14:	f7ff fd48 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_CIPHER_MODULE_DISABLED */
}
 c017a18:	4620      	mov	r0, r4
 c017a1a:	b014      	add	sp, #80	; 0x50
 c017a1c:	bd70      	pop	{r4, r5, r6, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c017a1e:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c017a22:	e7f9      	b.n	c017a18 <psa_cipher_decrypt_setup+0x56>

0c017a24 <psa_cipher_update>:
                               const uint8_t *input,
                               size_t input_length,
                               unsigned char *output,
                               size_t output_size,
                               size_t *output_length)
{
 c017a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 c017a26:	4616      	mov	r6, r2
#if (TFM_CRYPTO_CIPHER_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c017a28:	2230      	movs	r2, #48	; 0x30
{
 c017a2a:	b099      	sub	sp, #100	; 0x64
 c017a2c:	4604      	mov	r4, r0
 c017a2e:	460f      	mov	r7, r1
    struct tfm_crypto_pack_iovec iov = {
 c017a30:	eb0d 0002 	add.w	r0, sp, r2
 c017a34:	2100      	movs	r1, #0
{
 c017a36:	461d      	mov	r5, r3
    struct tfm_crypto_pack_iovec iov = {
 c017a38:	f7fc ffc5 	bl	c0149c6 <memset>
 c017a3c:	230e      	movs	r3, #14
 c017a3e:	930b      	str	r3, [sp, #44]	; 0x2c
 c017a40:	6823      	ldr	r3, [r4, #0]
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
        {.base = output, .len = output_size}
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c017a42:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c017a44:	9311      	str	r3, [sp, #68]	; 0x44
    psa_invec in_vec[] = {
 c017a46:	ab0b      	add	r3, sp, #44	; 0x2c
 c017a48:	9303      	str	r3, [sp, #12]
 c017a4a:	2334      	movs	r3, #52	; 0x34
 c017a4c:	e9cd 3704 	strd	r3, r7, [sp, #16]
    psa_outvec out_vec[] = {
 c017a50:	2304      	movs	r3, #4
 c017a52:	e9cd 3508 	strd	r3, r5, [sp, #32]
 c017a56:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    PSA_CONNECT(TFM_CRYPTO);
 c017a58:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c017a5a:	e9cd 6406 	strd	r6, r4, [sp, #24]
 c017a5e:	930a      	str	r3, [sp, #40]	; 0x28
    PSA_CONNECT(TFM_CRYPTO);
 c017a60:	f7ff fd1e 	bl	c0174a0 <psa_connect>
 c017a64:	1e05      	subs	r5, r0, #0
 c017a66:	dd11      	ble.n	c017a8c <psa_cipher_update+0x68>
#endif

    status = API_DISPATCH(tfm_crypto_cipher_update,
 c017a68:	2302      	movs	r3, #2
 c017a6a:	aa07      	add	r2, sp, #28
 c017a6c:	9301      	str	r3, [sp, #4]
 c017a6e:	9200      	str	r2, [sp, #0]
 c017a70:	2100      	movs	r1, #0
 c017a72:	aa03      	add	r2, sp, #12
 c017a74:	f7ff fd16 	bl	c0174a4 <psa_call>
                          TFM_CRYPTO_CIPHER_UPDATE);

    *output_length = out_vec[1].len;
 c017a78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 c017a7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    status = API_DISPATCH(tfm_crypto_cipher_update,
 c017a7c:	4604      	mov	r4, r0
    *output_length = out_vec[1].len;
 c017a7e:	601a      	str	r2, [r3, #0]

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c017a80:	4628      	mov	r0, r5
 c017a82:	f7ff fd11 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_CIPHER_MODULE_DISABLED */
}
 c017a86:	4620      	mov	r0, r4
 c017a88:	b019      	add	sp, #100	; 0x64
 c017a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c017a8c:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c017a90:	e7f9      	b.n	c017a86 <psa_cipher_update+0x62>

0c017a92 <psa_cipher_abort>:

__attribute__((section("SFN")))
psa_status_t psa_cipher_abort(psa_cipher_operation_t *operation)
{
 c017a92:	b530      	push	{r4, r5, lr}
 c017a94:	b095      	sub	sp, #84	; 0x54
 c017a96:	4604      	mov	r4, r0
#if (TFM_CRYPTO_CIPHER_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c017a98:	2230      	movs	r2, #48	; 0x30
 c017a9a:	2100      	movs	r1, #0
 c017a9c:	a808      	add	r0, sp, #32
 c017a9e:	f7fc ff92 	bl	c0149c6 <memset>
 c017aa2:	230f      	movs	r3, #15
 c017aa4:	9307      	str	r3, [sp, #28]
 c017aa6:	6823      	ldr	r3, [r4, #0]
    psa_outvec out_vec[] = {
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c017aa8:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c017aaa:	930d      	str	r3, [sp, #52]	; 0x34
    psa_invec in_vec[] = {
 c017aac:	ab07      	add	r3, sp, #28
 c017aae:	9303      	str	r3, [sp, #12]
 c017ab0:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
 c017ab2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c017ab6:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c017ab8:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c017aba:	9306      	str	r3, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c017abc:	f7ff fcf0 	bl	c0174a0 <psa_connect>
 c017ac0:	1e05      	subs	r5, r0, #0
 c017ac2:	dd0e      	ble.n	c017ae2 <psa_cipher_abort+0x50>
#endif

    status = API_DISPATCH(tfm_crypto_cipher_abort,
 c017ac4:	2301      	movs	r3, #1
 c017ac6:	aa05      	add	r2, sp, #20
 c017ac8:	9200      	str	r2, [sp, #0]
 c017aca:	9301      	str	r3, [sp, #4]
 c017acc:	aa03      	add	r2, sp, #12
 c017ace:	2100      	movs	r1, #0
 c017ad0:	f7ff fce8 	bl	c0174a4 <psa_call>
 c017ad4:	4604      	mov	r4, r0
                          TFM_CRYPTO_CIPHER_ABORT);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c017ad6:	4628      	mov	r0, r5
 c017ad8:	f7ff fce6 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_CIPHER_MODULE_DISABLED */
}
 c017adc:	4620      	mov	r0, r4
 c017ade:	b015      	add	sp, #84	; 0x54
 c017ae0:	bd30      	pop	{r4, r5, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c017ae2:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c017ae6:	e7f9      	b.n	c017adc <psa_cipher_abort+0x4a>

0c017ae8 <psa_cipher_finish>:
__attribute__((section("SFN")))
psa_status_t psa_cipher_finish(psa_cipher_operation_t *operation,
                               uint8_t *output,
                               size_t output_size,
                               size_t *output_length)
{
 c017ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 c017aea:	b097      	sub	sp, #92	; 0x5c
 c017aec:	4604      	mov	r4, r0
 c017aee:	4615      	mov	r5, r2
 c017af0:	460f      	mov	r7, r1
#if (TFM_CRYPTO_CIPHER_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c017af2:	2230      	movs	r2, #48	; 0x30
 c017af4:	2100      	movs	r1, #0
 c017af6:	a80a      	add	r0, sp, #40	; 0x28
{
 c017af8:	461e      	mov	r6, r3
    struct tfm_crypto_pack_iovec iov = {
 c017afa:	f7fc ff64 	bl	c0149c6 <memset>
 c017afe:	2310      	movs	r3, #16
 c017b00:	9309      	str	r3, [sp, #36]	; 0x24
 c017b02:	6823      	ldr	r3, [r4, #0]
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
        {.base = output, .len = output_size},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c017b04:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c017b06:	930f      	str	r3, [sp, #60]	; 0x3c
    psa_invec in_vec[] = {
 c017b08:	ab09      	add	r3, sp, #36	; 0x24
 c017b0a:	9303      	str	r3, [sp, #12]
 c017b0c:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
 c017b0e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c017b12:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c017b14:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c017b16:	9508      	str	r5, [sp, #32]
 c017b18:	e9cd 3706 	strd	r3, r7, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c017b1c:	f7ff fcc0 	bl	c0174a0 <psa_connect>
 c017b20:	1e05      	subs	r5, r0, #0
 c017b22:	dd11      	ble.n	c017b48 <psa_cipher_finish+0x60>
#endif

    status = API_DISPATCH(tfm_crypto_cipher_finish,
 c017b24:	2302      	movs	r3, #2
 c017b26:	9301      	str	r3, [sp, #4]
 c017b28:	ab05      	add	r3, sp, #20
 c017b2a:	9300      	str	r3, [sp, #0]
 c017b2c:	aa03      	add	r2, sp, #12
 c017b2e:	2301      	movs	r3, #1
 c017b30:	2100      	movs	r1, #0
 c017b32:	f7ff fcb7 	bl	c0174a4 <psa_call>
                          TFM_CRYPTO_CIPHER_FINISH);

    *output_length = out_vec[1].len;
 c017b36:	9b08      	ldr	r3, [sp, #32]
    status = API_DISPATCH(tfm_crypto_cipher_finish,
 c017b38:	4604      	mov	r4, r0
    *output_length = out_vec[1].len;
 c017b3a:	6033      	str	r3, [r6, #0]

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c017b3c:	4628      	mov	r0, r5
 c017b3e:	f7ff fcb3 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_CIPHER_MODULE_DISABLED */
}
 c017b42:	4620      	mov	r0, r4
 c017b44:	b017      	add	sp, #92	; 0x5c
 c017b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c017b48:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c017b4c:	e7f9      	b.n	c017b42 <psa_cipher_finish+0x5a>

0c017b4e <psa_hash_setup>:

__attribute__((section("SFN")))
psa_status_t psa_hash_setup(psa_hash_operation_t *operation,
                            psa_algorithm_t alg)
{
 c017b4e:	b530      	push	{r4, r5, lr}
 c017b50:	b095      	sub	sp, #84	; 0x54
 c017b52:	4604      	mov	r4, r0
 c017b54:	460d      	mov	r5, r1
#if (TFM_CRYPTO_HASH_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c017b56:	2230      	movs	r2, #48	; 0x30
 c017b58:	2100      	movs	r1, #0
 c017b5a:	a808      	add	r0, sp, #32
 c017b5c:	f7fc ff33 	bl	c0149c6 <memset>
 c017b60:	2311      	movs	r3, #17
 c017b62:	9307      	str	r3, [sp, #28]
 c017b64:	6823      	ldr	r3, [r4, #0]
    psa_outvec out_vec[] = {
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c017b66:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c017b68:	930d      	str	r3, [sp, #52]	; 0x34
    psa_invec in_vec[] = {
 c017b6a:	ab07      	add	r3, sp, #28
 c017b6c:	9303      	str	r3, [sp, #12]
 c017b6e:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
 c017b70:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c017b74:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c017b76:	2080      	movs	r0, #128	; 0x80
    struct tfm_crypto_pack_iovec iov = {
 c017b78:	950b      	str	r5, [sp, #44]	; 0x2c
    psa_outvec out_vec[] = {
 c017b7a:	9306      	str	r3, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c017b7c:	f7ff fc90 	bl	c0174a0 <psa_connect>
 c017b80:	1e05      	subs	r5, r0, #0
 c017b82:	dd0e      	ble.n	c017ba2 <psa_hash_setup+0x54>
#endif

    status = API_DISPATCH(tfm_crypto_hash_setup,
 c017b84:	2301      	movs	r3, #1
 c017b86:	aa05      	add	r2, sp, #20
 c017b88:	9200      	str	r2, [sp, #0]
 c017b8a:	9301      	str	r3, [sp, #4]
 c017b8c:	aa03      	add	r2, sp, #12
 c017b8e:	2100      	movs	r1, #0
 c017b90:	f7ff fc88 	bl	c0174a4 <psa_call>
 c017b94:	4604      	mov	r4, r0
                          TFM_CRYPTO_HASH_SETUP);

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c017b96:	4628      	mov	r0, r5
 c017b98:	f7ff fc86 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_HASH_MODULE_DISABLED */
}
 c017b9c:	4620      	mov	r0, r4
 c017b9e:	b015      	add	sp, #84	; 0x54
 c017ba0:	bd30      	pop	{r4, r5, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c017ba2:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c017ba6:	e7f9      	b.n	c017b9c <psa_hash_setup+0x4e>

0c017ba8 <psa_hash_update>:

__attribute__((section("SFN")))
psa_status_t psa_hash_update(psa_hash_operation_t *operation,
                             const uint8_t *input,
                             size_t input_length)
{
 c017ba8:	b570      	push	{r4, r5, r6, lr}
 c017baa:	b096      	sub	sp, #88	; 0x58
 c017bac:	4604      	mov	r4, r0
 c017bae:	4615      	mov	r5, r2
 c017bb0:	460e      	mov	r6, r1
#if (TFM_CRYPTO_HASH_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c017bb2:	2230      	movs	r2, #48	; 0x30
 c017bb4:	2100      	movs	r1, #0
 c017bb6:	a80a      	add	r0, sp, #40	; 0x28
 c017bb8:	f7fc ff05 	bl	c0149c6 <memset>
 c017bbc:	2312      	movs	r3, #18
 c017bbe:	9309      	str	r3, [sp, #36]	; 0x24
 c017bc0:	6823      	ldr	r3, [r4, #0]
    psa_outvec out_vec[] = {
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c017bc2:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c017bc4:	930f      	str	r3, [sp, #60]	; 0x3c
    psa_invec in_vec[] = {
 c017bc6:	ab09      	add	r3, sp, #36	; 0x24
 c017bc8:	9305      	str	r3, [sp, #20]
 c017bca:	2334      	movs	r3, #52	; 0x34
 c017bcc:	e9cd 3606 	strd	r3, r6, [sp, #24]
    psa_outvec out_vec[] = {
 c017bd0:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c017bd2:	2080      	movs	r0, #128	; 0x80
    psa_invec in_vec[] = {
 c017bd4:	9508      	str	r5, [sp, #32]
    psa_outvec out_vec[] = {
 c017bd6:	9403      	str	r4, [sp, #12]
 c017bd8:	9304      	str	r3, [sp, #16]
    PSA_CONNECT(TFM_CRYPTO);
 c017bda:	f7ff fc61 	bl	c0174a0 <psa_connect>
 c017bde:	1e05      	subs	r5, r0, #0
 c017be0:	dd0f      	ble.n	c017c02 <psa_hash_update+0x5a>
#endif

    status = API_DISPATCH(tfm_crypto_hash_update,
 c017be2:	2301      	movs	r3, #1
 c017be4:	9301      	str	r3, [sp, #4]
 c017be6:	ab03      	add	r3, sp, #12
 c017be8:	9300      	str	r3, [sp, #0]
 c017bea:	aa05      	add	r2, sp, #20
 c017bec:	2302      	movs	r3, #2
 c017bee:	2100      	movs	r1, #0
 c017bf0:	f7ff fc58 	bl	c0174a4 <psa_call>
 c017bf4:	4604      	mov	r4, r0
                          TFM_CRYPTO_HASH_UPDATE);

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c017bf6:	4628      	mov	r0, r5
 c017bf8:	f7ff fc56 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_HASH_MODULE_DISABLED */
}
 c017bfc:	4620      	mov	r0, r4
 c017bfe:	b016      	add	sp, #88	; 0x58
 c017c00:	bd70      	pop	{r4, r5, r6, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c017c02:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c017c06:	e7f9      	b.n	c017bfc <psa_hash_update+0x54>

0c017c08 <psa_hash_finish>:
__attribute__((section("SFN")))
psa_status_t psa_hash_finish(psa_hash_operation_t *operation,
                             uint8_t *hash,
                             size_t hash_size,
                             size_t *hash_length)
{
 c017c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 c017c0a:	b097      	sub	sp, #92	; 0x5c
 c017c0c:	4604      	mov	r4, r0
 c017c0e:	4615      	mov	r5, r2
 c017c10:	460f      	mov	r7, r1
#if (TFM_CRYPTO_HASH_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c017c12:	2230      	movs	r2, #48	; 0x30
 c017c14:	2100      	movs	r1, #0
 c017c16:	a80a      	add	r0, sp, #40	; 0x28
{
 c017c18:	461e      	mov	r6, r3
    struct tfm_crypto_pack_iovec iov = {
 c017c1a:	f7fc fed4 	bl	c0149c6 <memset>
 c017c1e:	2313      	movs	r3, #19
 c017c20:	9309      	str	r3, [sp, #36]	; 0x24
 c017c22:	6823      	ldr	r3, [r4, #0]
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
        {.base = hash, .len = hash_size},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c017c24:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c017c26:	930f      	str	r3, [sp, #60]	; 0x3c
    psa_invec in_vec[] = {
 c017c28:	ab09      	add	r3, sp, #36	; 0x24
 c017c2a:	9303      	str	r3, [sp, #12]
 c017c2c:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
 c017c2e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c017c32:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c017c34:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c017c36:	9508      	str	r5, [sp, #32]
 c017c38:	e9cd 3706 	strd	r3, r7, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c017c3c:	f7ff fc30 	bl	c0174a0 <psa_connect>
 c017c40:	1e05      	subs	r5, r0, #0
 c017c42:	dd11      	ble.n	c017c68 <psa_hash_finish+0x60>
#endif

    status = API_DISPATCH(tfm_crypto_hash_finish,
 c017c44:	2302      	movs	r3, #2
 c017c46:	9301      	str	r3, [sp, #4]
 c017c48:	ab05      	add	r3, sp, #20
 c017c4a:	9300      	str	r3, [sp, #0]
 c017c4c:	aa03      	add	r2, sp, #12
 c017c4e:	2301      	movs	r3, #1
 c017c50:	2100      	movs	r1, #0
 c017c52:	f7ff fc27 	bl	c0174a4 <psa_call>
                          TFM_CRYPTO_HASH_FINISH);

    *hash_length = out_vec[1].len;
 c017c56:	9b08      	ldr	r3, [sp, #32]
    status = API_DISPATCH(tfm_crypto_hash_finish,
 c017c58:	4604      	mov	r4, r0
    *hash_length = out_vec[1].len;
 c017c5a:	6033      	str	r3, [r6, #0]

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c017c5c:	4628      	mov	r0, r5
 c017c5e:	f7ff fc23 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_HASH_MODULE_DISABLED */
}
 c017c62:	4620      	mov	r0, r4
 c017c64:	b017      	add	sp, #92	; 0x5c
 c017c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c017c68:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c017c6c:	e7f9      	b.n	c017c62 <psa_hash_finish+0x5a>

0c017c6e <psa_hash_verify>:

__attribute__((section("SFN")))
psa_status_t psa_hash_verify(psa_hash_operation_t *operation,
                             const uint8_t *hash,
                             size_t hash_length)
{
 c017c6e:	b570      	push	{r4, r5, r6, lr}
 c017c70:	b096      	sub	sp, #88	; 0x58
 c017c72:	4604      	mov	r4, r0
 c017c74:	4615      	mov	r5, r2
 c017c76:	460e      	mov	r6, r1
#if (TFM_CRYPTO_HASH_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c017c78:	2230      	movs	r2, #48	; 0x30
 c017c7a:	2100      	movs	r1, #0
 c017c7c:	a80a      	add	r0, sp, #40	; 0x28
 c017c7e:	f7fc fea2 	bl	c0149c6 <memset>
 c017c82:	2314      	movs	r3, #20
 c017c84:	9309      	str	r3, [sp, #36]	; 0x24
 c017c86:	6823      	ldr	r3, [r4, #0]
    psa_outvec out_vec[] = {
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c017c88:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c017c8a:	930f      	str	r3, [sp, #60]	; 0x3c
    psa_invec in_vec[] = {
 c017c8c:	ab09      	add	r3, sp, #36	; 0x24
 c017c8e:	9305      	str	r3, [sp, #20]
 c017c90:	2334      	movs	r3, #52	; 0x34
 c017c92:	e9cd 3606 	strd	r3, r6, [sp, #24]
    psa_outvec out_vec[] = {
 c017c96:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c017c98:	2080      	movs	r0, #128	; 0x80
    psa_invec in_vec[] = {
 c017c9a:	9508      	str	r5, [sp, #32]
    psa_outvec out_vec[] = {
 c017c9c:	9403      	str	r4, [sp, #12]
 c017c9e:	9304      	str	r3, [sp, #16]
    PSA_CONNECT(TFM_CRYPTO);
 c017ca0:	f7ff fbfe 	bl	c0174a0 <psa_connect>
 c017ca4:	1e05      	subs	r5, r0, #0
 c017ca6:	dd0f      	ble.n	c017cc8 <psa_hash_verify+0x5a>
#endif

    status = API_DISPATCH(tfm_crypto_hash_verify,
 c017ca8:	2301      	movs	r3, #1
 c017caa:	9301      	str	r3, [sp, #4]
 c017cac:	ab03      	add	r3, sp, #12
 c017cae:	9300      	str	r3, [sp, #0]
 c017cb0:	aa05      	add	r2, sp, #20
 c017cb2:	2302      	movs	r3, #2
 c017cb4:	2100      	movs	r1, #0
 c017cb6:	f7ff fbf5 	bl	c0174a4 <psa_call>
 c017cba:	4604      	mov	r4, r0
                          TFM_CRYPTO_HASH_VERIFY);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c017cbc:	4628      	mov	r0, r5
 c017cbe:	f7ff fbf3 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_HASH_MODULE_DISABLED */
}
 c017cc2:	4620      	mov	r0, r4
 c017cc4:	b016      	add	sp, #88	; 0x58
 c017cc6:	bd70      	pop	{r4, r5, r6, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c017cc8:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c017ccc:	e7f9      	b.n	c017cc2 <psa_hash_verify+0x54>

0c017cce <psa_hash_abort>:

__attribute__((section("SFN")))
psa_status_t psa_hash_abort(psa_hash_operation_t *operation)
{
 c017cce:	b530      	push	{r4, r5, lr}
 c017cd0:	b095      	sub	sp, #84	; 0x54
 c017cd2:	4604      	mov	r4, r0
#if (TFM_CRYPTO_HASH_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c017cd4:	2230      	movs	r2, #48	; 0x30
 c017cd6:	2100      	movs	r1, #0
 c017cd8:	a808      	add	r0, sp, #32
 c017cda:	f7fc fe74 	bl	c0149c6 <memset>
 c017cde:	2315      	movs	r3, #21
 c017ce0:	9307      	str	r3, [sp, #28]
 c017ce2:	6823      	ldr	r3, [r4, #0]
    psa_outvec out_vec[] = {
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c017ce4:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c017ce6:	930d      	str	r3, [sp, #52]	; 0x34
    psa_invec in_vec[] = {
 c017ce8:	ab07      	add	r3, sp, #28
 c017cea:	9303      	str	r3, [sp, #12]
 c017cec:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
 c017cee:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c017cf2:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c017cf4:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c017cf6:	9306      	str	r3, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c017cf8:	f7ff fbd2 	bl	c0174a0 <psa_connect>
 c017cfc:	1e05      	subs	r5, r0, #0
 c017cfe:	dd0e      	ble.n	c017d1e <psa_hash_abort+0x50>
#endif

    status = API_DISPATCH(tfm_crypto_hash_abort,
 c017d00:	2301      	movs	r3, #1
 c017d02:	aa05      	add	r2, sp, #20
 c017d04:	9200      	str	r2, [sp, #0]
 c017d06:	9301      	str	r3, [sp, #4]
 c017d08:	aa03      	add	r2, sp, #12
 c017d0a:	2100      	movs	r1, #0
 c017d0c:	f7ff fbca 	bl	c0174a4 <psa_call>
 c017d10:	4604      	mov	r4, r0
                          TFM_CRYPTO_HASH_ABORT);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c017d12:	4628      	mov	r0, r5
 c017d14:	f7ff fbc8 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_HASH_MODULE_DISABLED */
}
 c017d18:	4620      	mov	r0, r4
 c017d1a:	b015      	add	sp, #84	; 0x54
 c017d1c:	bd30      	pop	{r4, r5, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c017d1e:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c017d22:	e7f9      	b.n	c017d18 <psa_hash_abort+0x4a>

0c017d24 <psa_hash_clone>:

__attribute__((section("SFN")))
psa_status_t psa_hash_clone(const psa_hash_operation_t *source_operation,
                            psa_hash_operation_t *target_operation)
{
 c017d24:	b530      	push	{r4, r5, lr}
 c017d26:	b095      	sub	sp, #84	; 0x54
 c017d28:	4605      	mov	r5, r0
 c017d2a:	460c      	mov	r4, r1
#if (TFM_CRYPTO_HASH_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c017d2c:	2230      	movs	r2, #48	; 0x30
 c017d2e:	2100      	movs	r1, #0
 c017d30:	a808      	add	r0, sp, #32
 c017d32:	f7fc fe48 	bl	c0149c6 <memset>
 c017d36:	2316      	movs	r3, #22
 c017d38:	9307      	str	r3, [sp, #28]
 c017d3a:	682b      	ldr	r3, [r5, #0]
    psa_outvec out_vec[] = {
        {.base = target_operation, .len = sizeof(psa_hash_operation_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c017d3c:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c017d3e:	930d      	str	r3, [sp, #52]	; 0x34
    psa_invec in_vec[] = {
 c017d40:	ab07      	add	r3, sp, #28
 c017d42:	9303      	str	r3, [sp, #12]
 c017d44:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
 c017d46:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c017d4a:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c017d4c:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c017d4e:	9306      	str	r3, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c017d50:	f7ff fba6 	bl	c0174a0 <psa_connect>
 c017d54:	1e05      	subs	r5, r0, #0
 c017d56:	dd0e      	ble.n	c017d76 <psa_hash_clone+0x52>
#endif

    status = API_DISPATCH(tfm_crypto_hash_clone,
 c017d58:	2301      	movs	r3, #1
 c017d5a:	aa05      	add	r2, sp, #20
 c017d5c:	9200      	str	r2, [sp, #0]
 c017d5e:	9301      	str	r3, [sp, #4]
 c017d60:	aa03      	add	r2, sp, #12
 c017d62:	2100      	movs	r1, #0
 c017d64:	f7ff fb9e 	bl	c0174a4 <psa_call>
 c017d68:	4604      	mov	r4, r0
                          TFM_CRYPTO_HASH_CLONE);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c017d6a:	4628      	mov	r0, r5
 c017d6c:	f7ff fb9c 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_HASH_MODULE_DISABLED */
}
 c017d70:	4620      	mov	r0, r4
 c017d72:	b015      	add	sp, #84	; 0x54
 c017d74:	bd30      	pop	{r4, r5, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c017d76:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c017d7a:	e7f9      	b.n	c017d70 <psa_hash_clone+0x4c>

0c017d7c <psa_mac_sign_setup>:

__attribute__((section("SFN")))
psa_status_t psa_mac_sign_setup(psa_mac_operation_t *operation,
                                psa_key_handle_t handle,
                                psa_algorithm_t alg)
{
 c017d7c:	b570      	push	{r4, r5, r6, lr}
 c017d7e:	b094      	sub	sp, #80	; 0x50
 c017d80:	4604      	mov	r4, r0
 c017d82:	4615      	mov	r5, r2
 c017d84:	460e      	mov	r6, r1
#if (TFM_CRYPTO_MAC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c017d86:	222e      	movs	r2, #46	; 0x2e
 c017d88:	2100      	movs	r1, #0
 c017d8a:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 c017d8e:	f7fc fe1a 	bl	c0149c6 <memset>
 c017d92:	2317      	movs	r3, #23
 c017d94:	9307      	str	r3, [sp, #28]
 c017d96:	6823      	ldr	r3, [r4, #0]
    psa_outvec out_vec[] = {
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c017d98:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c017d9a:	930d      	str	r3, [sp, #52]	; 0x34
    psa_invec in_vec[] = {
 c017d9c:	ab07      	add	r3, sp, #28
 c017d9e:	9303      	str	r3, [sp, #12]
 c017da0:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
 c017da2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c017da6:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c017da8:	2080      	movs	r0, #128	; 0x80
    struct tfm_crypto_pack_iovec iov = {
 c017daa:	950b      	str	r5, [sp, #44]	; 0x2c
 c017dac:	f8ad 6020 	strh.w	r6, [sp, #32]
    psa_outvec out_vec[] = {
 c017db0:	9306      	str	r3, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c017db2:	f7ff fb75 	bl	c0174a0 <psa_connect>
 c017db6:	1e05      	subs	r5, r0, #0
 c017db8:	dd0e      	ble.n	c017dd8 <psa_mac_sign_setup+0x5c>
#endif

    status = API_DISPATCH(tfm_crypto_mac_sign_setup,
 c017dba:	2301      	movs	r3, #1
 c017dbc:	aa05      	add	r2, sp, #20
 c017dbe:	9200      	str	r2, [sp, #0]
 c017dc0:	9301      	str	r3, [sp, #4]
 c017dc2:	aa03      	add	r2, sp, #12
 c017dc4:	2100      	movs	r1, #0
 c017dc6:	f7ff fb6d 	bl	c0174a4 <psa_call>
 c017dca:	4604      	mov	r4, r0
                          TFM_CRYPTO_MAC_SIGN_SETUP);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c017dcc:	4628      	mov	r0, r5
 c017dce:	f7ff fb6b 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_MAC_MODULE_DISABLED */
}
 c017dd2:	4620      	mov	r0, r4
 c017dd4:	b014      	add	sp, #80	; 0x50
 c017dd6:	bd70      	pop	{r4, r5, r6, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c017dd8:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c017ddc:	e7f9      	b.n	c017dd2 <psa_mac_sign_setup+0x56>

0c017dde <psa_mac_verify_setup>:

__attribute__((section("SFN")))
psa_status_t psa_mac_verify_setup(psa_mac_operation_t *operation,
                                  psa_key_handle_t handle,
                                  psa_algorithm_t alg)
{
 c017dde:	b570      	push	{r4, r5, r6, lr}
 c017de0:	b094      	sub	sp, #80	; 0x50
 c017de2:	4604      	mov	r4, r0
 c017de4:	4615      	mov	r5, r2
 c017de6:	460e      	mov	r6, r1
#if (TFM_CRYPTO_MAC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c017de8:	222e      	movs	r2, #46	; 0x2e
 c017dea:	2100      	movs	r1, #0
 c017dec:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 c017df0:	f7fc fde9 	bl	c0149c6 <memset>
 c017df4:	2318      	movs	r3, #24
 c017df6:	9307      	str	r3, [sp, #28]
 c017df8:	6823      	ldr	r3, [r4, #0]
    psa_outvec out_vec[] = {
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c017dfa:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c017dfc:	930d      	str	r3, [sp, #52]	; 0x34
    psa_invec in_vec[] = {
 c017dfe:	ab07      	add	r3, sp, #28
 c017e00:	9303      	str	r3, [sp, #12]
 c017e02:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
 c017e04:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c017e08:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c017e0a:	2080      	movs	r0, #128	; 0x80
    struct tfm_crypto_pack_iovec iov = {
 c017e0c:	950b      	str	r5, [sp, #44]	; 0x2c
 c017e0e:	f8ad 6020 	strh.w	r6, [sp, #32]
    psa_outvec out_vec[] = {
 c017e12:	9306      	str	r3, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c017e14:	f7ff fb44 	bl	c0174a0 <psa_connect>
 c017e18:	1e05      	subs	r5, r0, #0
 c017e1a:	dd0e      	ble.n	c017e3a <psa_mac_verify_setup+0x5c>
#endif

    status = API_DISPATCH(tfm_crypto_mac_verify_setup,
 c017e1c:	2301      	movs	r3, #1
 c017e1e:	aa05      	add	r2, sp, #20
 c017e20:	9200      	str	r2, [sp, #0]
 c017e22:	9301      	str	r3, [sp, #4]
 c017e24:	aa03      	add	r2, sp, #12
 c017e26:	2100      	movs	r1, #0
 c017e28:	f7ff fb3c 	bl	c0174a4 <psa_call>
 c017e2c:	4604      	mov	r4, r0
                          TFM_CRYPTO_MAC_VERIFY_SETUP);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c017e2e:	4628      	mov	r0, r5
 c017e30:	f7ff fb3a 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_MAC_MODULE_DISABLED */
}
 c017e34:	4620      	mov	r0, r4
 c017e36:	b014      	add	sp, #80	; 0x50
 c017e38:	bd70      	pop	{r4, r5, r6, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c017e3a:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c017e3e:	e7f9      	b.n	c017e34 <psa_mac_verify_setup+0x56>

0c017e40 <psa_mac_update>:

__attribute__((section("SFN")))
psa_status_t psa_mac_update(psa_mac_operation_t *operation,
                            const uint8_t *input,
                            size_t input_length)
{
 c017e40:	b570      	push	{r4, r5, r6, lr}
 c017e42:	b096      	sub	sp, #88	; 0x58
 c017e44:	4604      	mov	r4, r0
 c017e46:	4615      	mov	r5, r2
 c017e48:	460e      	mov	r6, r1
#if (TFM_CRYPTO_MAC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c017e4a:	2230      	movs	r2, #48	; 0x30
 c017e4c:	2100      	movs	r1, #0
 c017e4e:	a80a      	add	r0, sp, #40	; 0x28
 c017e50:	f7fc fdb9 	bl	c0149c6 <memset>
 c017e54:	2319      	movs	r3, #25
 c017e56:	9309      	str	r3, [sp, #36]	; 0x24
 c017e58:	6823      	ldr	r3, [r4, #0]
    psa_outvec out_vec[] = {
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c017e5a:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c017e5c:	930f      	str	r3, [sp, #60]	; 0x3c
    psa_invec in_vec[] = {
 c017e5e:	ab09      	add	r3, sp, #36	; 0x24
 c017e60:	9305      	str	r3, [sp, #20]
 c017e62:	2334      	movs	r3, #52	; 0x34
 c017e64:	e9cd 3606 	strd	r3, r6, [sp, #24]
    psa_outvec out_vec[] = {
 c017e68:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c017e6a:	2080      	movs	r0, #128	; 0x80
    psa_invec in_vec[] = {
 c017e6c:	9508      	str	r5, [sp, #32]
    psa_outvec out_vec[] = {
 c017e6e:	9403      	str	r4, [sp, #12]
 c017e70:	9304      	str	r3, [sp, #16]
    PSA_CONNECT(TFM_CRYPTO);
 c017e72:	f7ff fb15 	bl	c0174a0 <psa_connect>
 c017e76:	1e05      	subs	r5, r0, #0
 c017e78:	dd0f      	ble.n	c017e9a <psa_mac_update+0x5a>
#endif

    status = API_DISPATCH(tfm_crypto_mac_update,
 c017e7a:	2301      	movs	r3, #1
 c017e7c:	9301      	str	r3, [sp, #4]
 c017e7e:	ab03      	add	r3, sp, #12
 c017e80:	9300      	str	r3, [sp, #0]
 c017e82:	aa05      	add	r2, sp, #20
 c017e84:	2302      	movs	r3, #2
 c017e86:	2100      	movs	r1, #0
 c017e88:	f7ff fb0c 	bl	c0174a4 <psa_call>
 c017e8c:	4604      	mov	r4, r0
                          TFM_CRYPTO_MAC_UPDATE);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c017e8e:	4628      	mov	r0, r5
 c017e90:	f7ff fb0a 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_MAC_MODULE_DISABLED */
}
 c017e94:	4620      	mov	r0, r4
 c017e96:	b016      	add	sp, #88	; 0x58
 c017e98:	bd70      	pop	{r4, r5, r6, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c017e9a:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c017e9e:	e7f9      	b.n	c017e94 <psa_mac_update+0x54>

0c017ea0 <psa_mac_sign_finish>:
__attribute__((section("SFN")))
psa_status_t psa_mac_sign_finish(psa_mac_operation_t *operation,
                                 uint8_t *mac,
                                 size_t mac_size,
                                 size_t *mac_length)
{
 c017ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 c017ea2:	b097      	sub	sp, #92	; 0x5c
 c017ea4:	4604      	mov	r4, r0
 c017ea6:	4615      	mov	r5, r2
 c017ea8:	460f      	mov	r7, r1
#if (TFM_CRYPTO_MAC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c017eaa:	2230      	movs	r2, #48	; 0x30
 c017eac:	2100      	movs	r1, #0
 c017eae:	a80a      	add	r0, sp, #40	; 0x28
{
 c017eb0:	461e      	mov	r6, r3
    struct tfm_crypto_pack_iovec iov = {
 c017eb2:	f7fc fd88 	bl	c0149c6 <memset>
 c017eb6:	231a      	movs	r3, #26
 c017eb8:	9309      	str	r3, [sp, #36]	; 0x24
 c017eba:	6823      	ldr	r3, [r4, #0]
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
        {.base = mac, .len = mac_size},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c017ebc:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c017ebe:	930f      	str	r3, [sp, #60]	; 0x3c
    psa_invec in_vec[] = {
 c017ec0:	ab09      	add	r3, sp, #36	; 0x24
 c017ec2:	9303      	str	r3, [sp, #12]
 c017ec4:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
 c017ec6:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c017eca:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c017ecc:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c017ece:	9508      	str	r5, [sp, #32]
 c017ed0:	e9cd 3706 	strd	r3, r7, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c017ed4:	f7ff fae4 	bl	c0174a0 <psa_connect>
 c017ed8:	1e05      	subs	r5, r0, #0
 c017eda:	dd11      	ble.n	c017f00 <psa_mac_sign_finish+0x60>
#endif

    status = API_DISPATCH(tfm_crypto_mac_sign_finish,
 c017edc:	2302      	movs	r3, #2
 c017ede:	9301      	str	r3, [sp, #4]
 c017ee0:	ab05      	add	r3, sp, #20
 c017ee2:	9300      	str	r3, [sp, #0]
 c017ee4:	aa03      	add	r2, sp, #12
 c017ee6:	2301      	movs	r3, #1
 c017ee8:	2100      	movs	r1, #0
 c017eea:	f7ff fadb 	bl	c0174a4 <psa_call>
                          TFM_CRYPTO_MAC_SIGN_FINISH);

    *mac_length = out_vec[1].len;
 c017eee:	9b08      	ldr	r3, [sp, #32]
    status = API_DISPATCH(tfm_crypto_mac_sign_finish,
 c017ef0:	4604      	mov	r4, r0
    *mac_length = out_vec[1].len;
 c017ef2:	6033      	str	r3, [r6, #0]

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c017ef4:	4628      	mov	r0, r5
 c017ef6:	f7ff fad7 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_MAC_MODULE_DISABLED */
}
 c017efa:	4620      	mov	r0, r4
 c017efc:	b017      	add	sp, #92	; 0x5c
 c017efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c017f00:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c017f04:	e7f9      	b.n	c017efa <psa_mac_sign_finish+0x5a>

0c017f06 <psa_mac_verify_finish>:

__attribute__((section("SFN")))
psa_status_t psa_mac_verify_finish(psa_mac_operation_t *operation,
                                   const uint8_t *mac,
                                   size_t mac_length)
{
 c017f06:	b570      	push	{r4, r5, r6, lr}
 c017f08:	b096      	sub	sp, #88	; 0x58
 c017f0a:	4604      	mov	r4, r0
 c017f0c:	4615      	mov	r5, r2
 c017f0e:	460e      	mov	r6, r1
#if (TFM_CRYPTO_MAC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c017f10:	2230      	movs	r2, #48	; 0x30
 c017f12:	2100      	movs	r1, #0
 c017f14:	a80a      	add	r0, sp, #40	; 0x28
 c017f16:	f7fc fd56 	bl	c0149c6 <memset>
 c017f1a:	231b      	movs	r3, #27
 c017f1c:	9309      	str	r3, [sp, #36]	; 0x24
 c017f1e:	6823      	ldr	r3, [r4, #0]
    psa_outvec out_vec[] = {
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c017f20:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c017f22:	930f      	str	r3, [sp, #60]	; 0x3c
    psa_invec in_vec[] = {
 c017f24:	ab09      	add	r3, sp, #36	; 0x24
 c017f26:	9305      	str	r3, [sp, #20]
 c017f28:	2334      	movs	r3, #52	; 0x34
 c017f2a:	e9cd 3606 	strd	r3, r6, [sp, #24]
    psa_outvec out_vec[] = {
 c017f2e:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c017f30:	2080      	movs	r0, #128	; 0x80
    psa_invec in_vec[] = {
 c017f32:	9508      	str	r5, [sp, #32]
    psa_outvec out_vec[] = {
 c017f34:	9403      	str	r4, [sp, #12]
 c017f36:	9304      	str	r3, [sp, #16]
    PSA_CONNECT(TFM_CRYPTO);
 c017f38:	f7ff fab2 	bl	c0174a0 <psa_connect>
 c017f3c:	1e05      	subs	r5, r0, #0
 c017f3e:	dd0f      	ble.n	c017f60 <psa_mac_verify_finish+0x5a>
#endif

    status = API_DISPATCH(tfm_crypto_mac_verify_finish,
 c017f40:	2301      	movs	r3, #1
 c017f42:	9301      	str	r3, [sp, #4]
 c017f44:	ab03      	add	r3, sp, #12
 c017f46:	9300      	str	r3, [sp, #0]
 c017f48:	aa05      	add	r2, sp, #20
 c017f4a:	2302      	movs	r3, #2
 c017f4c:	2100      	movs	r1, #0
 c017f4e:	f7ff faa9 	bl	c0174a4 <psa_call>
 c017f52:	4604      	mov	r4, r0
                          TFM_CRYPTO_MAC_VERIFY_FINISH);

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c017f54:	4628      	mov	r0, r5
 c017f56:	f7ff faa7 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_MAC_MODULE_DISABLED */
}
 c017f5a:	4620      	mov	r0, r4
 c017f5c:	b016      	add	sp, #88	; 0x58
 c017f5e:	bd70      	pop	{r4, r5, r6, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c017f60:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c017f64:	e7f9      	b.n	c017f5a <psa_mac_verify_finish+0x54>

0c017f66 <psa_mac_abort>:

__attribute__((section("SFN")))
psa_status_t psa_mac_abort(psa_mac_operation_t *operation)
{
 c017f66:	b530      	push	{r4, r5, lr}
 c017f68:	b095      	sub	sp, #84	; 0x54
 c017f6a:	4604      	mov	r4, r0
#if (TFM_CRYPTO_MAC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c017f6c:	2230      	movs	r2, #48	; 0x30
 c017f6e:	2100      	movs	r1, #0
 c017f70:	a808      	add	r0, sp, #32
 c017f72:	f7fc fd28 	bl	c0149c6 <memset>
 c017f76:	231c      	movs	r3, #28
 c017f78:	9307      	str	r3, [sp, #28]
 c017f7a:	6823      	ldr	r3, [r4, #0]
    psa_outvec out_vec[] = {
        {.base = &(operation->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c017f7c:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c017f7e:	930d      	str	r3, [sp, #52]	; 0x34
    psa_invec in_vec[] = {
 c017f80:	ab07      	add	r3, sp, #28
 c017f82:	9303      	str	r3, [sp, #12]
 c017f84:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
 c017f86:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c017f8a:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c017f8c:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c017f8e:	9306      	str	r3, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c017f90:	f7ff fa86 	bl	c0174a0 <psa_connect>
 c017f94:	1e05      	subs	r5, r0, #0
 c017f96:	dd0e      	ble.n	c017fb6 <psa_mac_abort+0x50>
#endif

    status = API_DISPATCH(tfm_crypto_mac_abort,
 c017f98:	2301      	movs	r3, #1
 c017f9a:	aa05      	add	r2, sp, #20
 c017f9c:	9200      	str	r2, [sp, #0]
 c017f9e:	9301      	str	r3, [sp, #4]
 c017fa0:	aa03      	add	r2, sp, #12
 c017fa2:	2100      	movs	r1, #0
 c017fa4:	f7ff fa7e 	bl	c0174a4 <psa_call>
 c017fa8:	4604      	mov	r4, r0
                          TFM_CRYPTO_MAC_ABORT);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c017faa:	4628      	mov	r0, r5
 c017fac:	f7ff fa7c 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_MAC_MODULE_DISABLED */
}
 c017fb0:	4620      	mov	r0, r4
 c017fb2:	b015      	add	sp, #84	; 0x54
 c017fb4:	bd30      	pop	{r4, r5, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c017fb6:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c017fba:	e7f9      	b.n	c017fb0 <psa_mac_abort+0x4a>

0c017fbc <psa_aead_encrypt>:
                              const uint8_t *plaintext,
                              size_t plaintext_length,
                              uint8_t *ciphertext,
                              size_t ciphertext_size,
                              size_t *ciphertext_length)
{
 c017fbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c017fc0:	b099      	sub	sp, #100	; 0x64
 c017fc2:	4681      	mov	r9, r0
 c017fc4:	e9dd 4720 	ldrd	r4, r7, [sp, #128]	; 0x80
 c017fc8:	4688      	mov	r8, r1
 c017fca:	4616      	mov	r6, r2
#if (TFM_CRYPTO_AEAD_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c017fcc:	2100      	movs	r1, #0
 c017fce:	222a      	movs	r2, #42	; 0x2a
 c017fd0:	f10d 0032 	add.w	r0, sp, #50	; 0x32
{
 c017fd4:	461d      	mov	r5, r3
    struct tfm_crypto_pack_iovec iov = {
 c017fd6:	f7fc fcf6 	bl	c0149c6 <memset>
 c017fda:	231d      	movs	r3, #29
 c017fdc:	f8ad 9030 	strh.w	r9, [sp, #48]	; 0x30
 c017fe0:	930b      	str	r3, [sp, #44]	; 0x2c
 c017fe2:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 c017fe6:	9517      	str	r5, [sp, #92]	; 0x5c
        .alg = alg,
        .aead_in = {.nonce = {0}, .nonce_length = nonce_length}
    };

    /* Sanitize the optional input */
    if ((additional_data == NULL) && (additional_data_length != 0)) {
 c017fe8:	b934      	cbnz	r4, c017ff8 <psa_aead_encrypt+0x3c>
 c017fea:	b12f      	cbz	r7, c017ff8 <psa_aead_encrypt+0x3c>
        return PSA_ERROR_INVALID_ARGUMENT;
 c017fec:	f06f 0486 	mvn.w	r4, #134	; 0x86
    PSA_CLOSE();
#endif

    return status;
#endif /* TFM_CRYPTO_AEAD_MODULE_DISABLED */
}
 c017ff0:	4620      	mov	r0, r4
 c017ff2:	b019      	add	sp, #100	; 0x64
 c017ff4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    psa_invec in_vec[] = {
 c017ff8:	2234      	movs	r2, #52	; 0x34
 c017ffa:	9206      	str	r2, [sp, #24]
 c017ffc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 c017ffe:	ab0b      	add	r3, sp, #44	; 0x2c
 c018000:	9207      	str	r2, [sp, #28]
 c018002:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    if (nonce_length > TFM_CRYPTO_MAX_NONCE_LENGTH) {
 c018004:	2d10      	cmp	r5, #16
    psa_invec in_vec[] = {
 c018006:	e9cd 2408 	strd	r2, r4, [sp, #32]
    psa_outvec out_vec[] = {
 c01800a:	9a24      	ldr	r2, [sp, #144]	; 0x90
    psa_invec in_vec[] = {
 c01800c:	9305      	str	r3, [sp, #20]
    psa_outvec out_vec[] = {
 c01800e:	9203      	str	r2, [sp, #12]
 c018010:	9a25      	ldr	r2, [sp, #148]	; 0x94
    psa_invec in_vec[] = {
 c018012:	970a      	str	r7, [sp, #40]	; 0x28
    psa_outvec out_vec[] = {
 c018014:	9204      	str	r2, [sp, #16]
    if (nonce_length > TFM_CRYPTO_MAX_NONCE_LENGTH) {
 c018016:	d8e9      	bhi.n	c017fec <psa_aead_encrypt+0x30>
    if (nonce != NULL) {
 c018018:	b986      	cbnz	r6, c01803c <psa_aead_encrypt+0x80>
    PSA_CONNECT(TFM_CRYPTO);
 c01801a:	2101      	movs	r1, #1
 c01801c:	2080      	movs	r0, #128	; 0x80
 c01801e:	f7ff fa3f 	bl	c0174a0 <psa_connect>
 c018022:	1e05      	subs	r5, r0, #0
 c018024:	dc0c      	bgt.n	c018040 <psa_aead_encrypt+0x84>
 c018026:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01802a:	e7e1      	b.n	c017ff0 <psa_aead_encrypt+0x34>
            iov.aead_in.nonce[idx] = nonce[idx];
 c01802c:	5cb0      	ldrb	r0, [r6, r2]
 c01802e:	1899      	adds	r1, r3, r2
 c018030:	f881 0020 	strb.w	r0, [r1, #32]
        for (idx = 0; idx < nonce_length; idx++) {
 c018034:	3201      	adds	r2, #1
 c018036:	42aa      	cmp	r2, r5
 c018038:	d1f8      	bne.n	c01802c <psa_aead_encrypt+0x70>
 c01803a:	e7ee      	b.n	c01801a <psa_aead_encrypt+0x5e>
 c01803c:	2200      	movs	r2, #0
 c01803e:	e7fa      	b.n	c018036 <psa_aead_encrypt+0x7a>
    status = psa_call(ipc_handle, PSA_IPC_CALL, in_vec, in_len,
 c018040:	2301      	movs	r3, #1
        in_len--;
 c018042:	2c00      	cmp	r4, #0
    status = psa_call(ipc_handle, PSA_IPC_CALL, in_vec, in_len,
 c018044:	9301      	str	r3, [sp, #4]
 c018046:	ab03      	add	r3, sp, #12
 c018048:	9300      	str	r3, [sp, #0]
 c01804a:	aa05      	add	r2, sp, #20
 c01804c:	bf14      	ite	ne
 c01804e:	2303      	movne	r3, #3
 c018050:	2302      	moveq	r3, #2
 c018052:	2100      	movs	r1, #0
 c018054:	f7ff fa26 	bl	c0174a4 <psa_call>
    *ciphertext_length = out_vec[0].len;
 c018058:	9b26      	ldr	r3, [sp, #152]	; 0x98
 c01805a:	9a04      	ldr	r2, [sp, #16]
    status = psa_call(ipc_handle, PSA_IPC_CALL, in_vec, in_len,
 c01805c:	4604      	mov	r4, r0
    *ciphertext_length = out_vec[0].len;
 c01805e:	601a      	str	r2, [r3, #0]
    PSA_CLOSE();
 c018060:	4628      	mov	r0, r5
 c018062:	f7ff fa21 	bl	c0174a8 <psa_close>
    return status;
 c018066:	e7c3      	b.n	c017ff0 <psa_aead_encrypt+0x34>

0c018068 <psa_aead_decrypt>:
                              const uint8_t *ciphertext,
                              size_t ciphertext_length,
                              uint8_t *plaintext,
                              size_t plaintext_size,
                              size_t *plaintext_length)
{
 c018068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c01806c:	b099      	sub	sp, #100	; 0x64
 c01806e:	4681      	mov	r9, r0
 c018070:	e9dd 4720 	ldrd	r4, r7, [sp, #128]	; 0x80
 c018074:	4688      	mov	r8, r1
 c018076:	4616      	mov	r6, r2
#if (TFM_CRYPTO_AEAD_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c018078:	2100      	movs	r1, #0
 c01807a:	222a      	movs	r2, #42	; 0x2a
 c01807c:	f10d 0032 	add.w	r0, sp, #50	; 0x32
{
 c018080:	461d      	mov	r5, r3
    struct tfm_crypto_pack_iovec iov = {
 c018082:	f7fc fca0 	bl	c0149c6 <memset>
 c018086:	231e      	movs	r3, #30
 c018088:	f8ad 9030 	strh.w	r9, [sp, #48]	; 0x30
 c01808c:	930b      	str	r3, [sp, #44]	; 0x2c
 c01808e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 c018092:	9517      	str	r5, [sp, #92]	; 0x5c
        .alg = alg,
        .aead_in = {.nonce = {0}, .nonce_length = nonce_length}
    };

    /* Sanitize the optional input */
    if ((additional_data == NULL) && (additional_data_length != 0)) {
 c018094:	b934      	cbnz	r4, c0180a4 <psa_aead_decrypt+0x3c>
 c018096:	b12f      	cbz	r7, c0180a4 <psa_aead_decrypt+0x3c>
        return PSA_ERROR_INVALID_ARGUMENT;
 c018098:	f06f 0486 	mvn.w	r4, #134	; 0x86
    PSA_CLOSE();
#endif

    return status;
#endif /* TFM_CRYPTO_AEAD_MODULE_DISABLED */
}
 c01809c:	4620      	mov	r0, r4
 c01809e:	b019      	add	sp, #100	; 0x64
 c0180a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    psa_invec in_vec[] = {
 c0180a4:	2234      	movs	r2, #52	; 0x34
 c0180a6:	9206      	str	r2, [sp, #24]
 c0180a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 c0180aa:	ab0b      	add	r3, sp, #44	; 0x2c
 c0180ac:	9207      	str	r2, [sp, #28]
 c0180ae:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    if (nonce_length > TFM_CRYPTO_MAX_NONCE_LENGTH) {
 c0180b0:	2d10      	cmp	r5, #16
    psa_invec in_vec[] = {
 c0180b2:	e9cd 2408 	strd	r2, r4, [sp, #32]
    psa_outvec out_vec[] = {
 c0180b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
    psa_invec in_vec[] = {
 c0180b8:	9305      	str	r3, [sp, #20]
    psa_outvec out_vec[] = {
 c0180ba:	9203      	str	r2, [sp, #12]
 c0180bc:	9a25      	ldr	r2, [sp, #148]	; 0x94
    psa_invec in_vec[] = {
 c0180be:	970a      	str	r7, [sp, #40]	; 0x28
    psa_outvec out_vec[] = {
 c0180c0:	9204      	str	r2, [sp, #16]
    if (nonce_length > TFM_CRYPTO_MAX_NONCE_LENGTH) {
 c0180c2:	d8e9      	bhi.n	c018098 <psa_aead_decrypt+0x30>
    if (nonce != NULL) {
 c0180c4:	b986      	cbnz	r6, c0180e8 <psa_aead_decrypt+0x80>
    PSA_CONNECT(TFM_CRYPTO);
 c0180c6:	2101      	movs	r1, #1
 c0180c8:	2080      	movs	r0, #128	; 0x80
 c0180ca:	f7ff f9e9 	bl	c0174a0 <psa_connect>
 c0180ce:	1e05      	subs	r5, r0, #0
 c0180d0:	dc0c      	bgt.n	c0180ec <psa_aead_decrypt+0x84>
 c0180d2:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c0180d6:	e7e1      	b.n	c01809c <psa_aead_decrypt+0x34>
            iov.aead_in.nonce[idx] = nonce[idx];
 c0180d8:	5cb0      	ldrb	r0, [r6, r2]
 c0180da:	1899      	adds	r1, r3, r2
 c0180dc:	f881 0020 	strb.w	r0, [r1, #32]
        for (idx = 0; idx < nonce_length; idx++) {
 c0180e0:	3201      	adds	r2, #1
 c0180e2:	42aa      	cmp	r2, r5
 c0180e4:	d1f8      	bne.n	c0180d8 <psa_aead_decrypt+0x70>
 c0180e6:	e7ee      	b.n	c0180c6 <psa_aead_decrypt+0x5e>
 c0180e8:	2200      	movs	r2, #0
 c0180ea:	e7fa      	b.n	c0180e2 <psa_aead_decrypt+0x7a>
    status = psa_call(ipc_handle, PSA_IPC_CALL, in_vec, in_len,
 c0180ec:	2301      	movs	r3, #1
        in_len--;
 c0180ee:	2c00      	cmp	r4, #0
    status = psa_call(ipc_handle, PSA_IPC_CALL, in_vec, in_len,
 c0180f0:	9301      	str	r3, [sp, #4]
 c0180f2:	ab03      	add	r3, sp, #12
 c0180f4:	9300      	str	r3, [sp, #0]
 c0180f6:	aa05      	add	r2, sp, #20
 c0180f8:	bf14      	ite	ne
 c0180fa:	2303      	movne	r3, #3
 c0180fc:	2302      	moveq	r3, #2
 c0180fe:	2100      	movs	r1, #0
 c018100:	f7ff f9d0 	bl	c0174a4 <psa_call>
    *plaintext_length = out_vec[0].len;
 c018104:	9b26      	ldr	r3, [sp, #152]	; 0x98
 c018106:	9a04      	ldr	r2, [sp, #16]
    status = psa_call(ipc_handle, PSA_IPC_CALL, in_vec, in_len,
 c018108:	4604      	mov	r4, r0
    *plaintext_length = out_vec[0].len;
 c01810a:	601a      	str	r2, [r3, #0]
    PSA_CLOSE();
 c01810c:	4628      	mov	r0, r5
 c01810e:	f7ff f9cb 	bl	c0174a8 <psa_close>
    return status;
 c018112:	e7c3      	b.n	c01809c <psa_aead_decrypt+0x34>

0c018114 <psa_asymmetric_sign>:
                                 const uint8_t *hash,
                                 size_t hash_length,
                                 uint8_t *signature,
                                 size_t signature_size,
                                 size_t *signature_length)
{
 c018114:	b5f0      	push	{r4, r5, r6, r7, lr}
 c018116:	b097      	sub	sp, #92	; 0x5c
 c018118:	4615      	mov	r5, r2
 c01811a:	4607      	mov	r7, r0
 c01811c:	460e      	mov	r6, r1
#if (TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01811e:	222e      	movs	r2, #46	; 0x2e
 c018120:	2100      	movs	r1, #0
 c018122:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
{
 c018126:	461c      	mov	r4, r3
    struct tfm_crypto_pack_iovec iov = {
 c018128:	f7fc fc4d 	bl	c0149c6 <memset>
 c01812c:	231f      	movs	r3, #31
 c01812e:	9309      	str	r3, [sp, #36]	; 0x24
        .sfn_id = TFM_CRYPTO_ASYMMETRIC_SIGN_SID,
        .key_handle = handle,
        .alg = alg,
    };

    psa_invec in_vec[] = {
 c018130:	ab09      	add	r3, sp, #36	; 0x24
 c018132:	9305      	str	r3, [sp, #20]
 c018134:	2334      	movs	r3, #52	; 0x34
 c018136:	e9cd 3506 	strd	r3, r5, [sp, #24]
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
        {.base = hash, .len = hash_length},
    };
    psa_outvec out_vec[] = {
 c01813a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
        {.base = signature, .len = signature_size},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c01813c:	2101      	movs	r1, #1
    psa_outvec out_vec[] = {
 c01813e:	9303      	str	r3, [sp, #12]
 c018140:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    PSA_CONNECT(TFM_CRYPTO);
 c018142:	2080      	movs	r0, #128	; 0x80
    struct tfm_crypto_pack_iovec iov = {
 c018144:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 c018148:	960d      	str	r6, [sp, #52]	; 0x34
    psa_invec in_vec[] = {
 c01814a:	9408      	str	r4, [sp, #32]
    psa_outvec out_vec[] = {
 c01814c:	9304      	str	r3, [sp, #16]
    PSA_CONNECT(TFM_CRYPTO);
 c01814e:	f7ff f9a7 	bl	c0174a0 <psa_connect>
 c018152:	1e05      	subs	r5, r0, #0
 c018154:	dd12      	ble.n	c01817c <psa_asymmetric_sign+0x68>
#endif

    status = API_DISPATCH(tfm_crypto_asymmetric_sign,
 c018156:	2301      	movs	r3, #1
 c018158:	9301      	str	r3, [sp, #4]
 c01815a:	ab03      	add	r3, sp, #12
 c01815c:	9300      	str	r3, [sp, #0]
 c01815e:	aa05      	add	r2, sp, #20
 c018160:	2302      	movs	r3, #2
 c018162:	2100      	movs	r1, #0
 c018164:	f7ff f99e 	bl	c0174a4 <psa_call>
                          TFM_CRYPTO_ASYMMETRIC_SIGN);

    *signature_length = out_vec[0].len;
 c018168:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 c01816a:	9a04      	ldr	r2, [sp, #16]
    status = API_DISPATCH(tfm_crypto_asymmetric_sign,
 c01816c:	4604      	mov	r4, r0
    *signature_length = out_vec[0].len;
 c01816e:	601a      	str	r2, [r3, #0]

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c018170:	4628      	mov	r0, r5
 c018172:	f7ff f999 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED */
}
 c018176:	4620      	mov	r0, r4
 c018178:	b017      	add	sp, #92	; 0x5c
 c01817a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01817c:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c018180:	e7f9      	b.n	c018176 <psa_asymmetric_sign+0x62>

0c018182 <psa_asymmetric_verify>:
                                   psa_algorithm_t alg,
                                   const uint8_t *hash,
                                   size_t hash_length,
                                   const uint8_t *signature,
                                   size_t signature_length)
{
 c018182:	b5f0      	push	{r4, r5, r6, r7, lr}
 c018184:	b097      	sub	sp, #92	; 0x5c
 c018186:	4615      	mov	r5, r2
 c018188:	4607      	mov	r7, r0
 c01818a:	460e      	mov	r6, r1
#if (TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01818c:	222e      	movs	r2, #46	; 0x2e
 c01818e:	2100      	movs	r1, #0
 c018190:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
{
 c018194:	461c      	mov	r4, r3
    struct tfm_crypto_pack_iovec iov = {
 c018196:	f7fc fc16 	bl	c0149c6 <memset>
 c01819a:	2320      	movs	r3, #32
 c01819c:	9309      	str	r3, [sp, #36]	; 0x24
        .sfn_id = TFM_CRYPTO_ASYMMETRIC_VERIFY_SID,
        .key_handle = handle,
        .alg = alg
    };

    psa_invec in_vec[] = {
 c01819e:	ab09      	add	r3, sp, #36	; 0x24
 c0181a0:	9303      	str	r3, [sp, #12]
 c0181a2:	2334      	movs	r3, #52	; 0x34
 c0181a4:	e9cd 3504 	strd	r3, r5, [sp, #16]
 c0181a8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
        {.base = hash, .len = hash_length},
        {.base = signature, .len = signature_length}
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c0181aa:	2101      	movs	r1, #1
    psa_invec in_vec[] = {
 c0181ac:	9307      	str	r3, [sp, #28]
 c0181ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    PSA_CONNECT(TFM_CRYPTO);
 c0181b0:	2080      	movs	r0, #128	; 0x80
    struct tfm_crypto_pack_iovec iov = {
 c0181b2:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 c0181b6:	960d      	str	r6, [sp, #52]	; 0x34
    psa_invec in_vec[] = {
 c0181b8:	9406      	str	r4, [sp, #24]
 c0181ba:	9308      	str	r3, [sp, #32]
    PSA_CONNECT(TFM_CRYPTO);
 c0181bc:	f7ff f970 	bl	c0174a0 <psa_connect>
 c0181c0:	1e05      	subs	r5, r0, #0
 c0181c2:	dd0d      	ble.n	c0181e0 <psa_asymmetric_verify+0x5e>
#endif

    status = API_DISPATCH_NO_OUTVEC(tfm_crypto_asymmetric_verify,
 c0181c4:	2100      	movs	r1, #0
 c0181c6:	2303      	movs	r3, #3
 c0181c8:	e9cd 1100 	strd	r1, r1, [sp]
 c0181cc:	aa03      	add	r2, sp, #12
 c0181ce:	f7ff f969 	bl	c0174a4 <psa_call>
 c0181d2:	4604      	mov	r4, r0
                                    TFM_CRYPTO_ASYMMETRIC_VERIFY);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c0181d4:	4628      	mov	r0, r5
 c0181d6:	f7ff f967 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED */
}
 c0181da:	4620      	mov	r0, r4
 c0181dc:	b017      	add	sp, #92	; 0x5c
 c0181de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c0181e0:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c0181e4:	e7f9      	b.n	c0181da <psa_asymmetric_verify+0x58>

0c0181e6 <psa_asymmetric_encrypt>:
                                    const uint8_t *salt,
                                    size_t salt_length,
                                    uint8_t *output,
                                    size_t output_size,
                                    size_t *output_length)
{
 c0181e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c0181ea:	b099      	sub	sp, #100	; 0x64
 c0181ec:	4681      	mov	r9, r0
 c0181ee:	e9dd 4520 	ldrd	r4, r5, [sp, #128]	; 0x80
 c0181f2:	4688      	mov	r8, r1
 c0181f4:	4617      	mov	r7, r2
#if (TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c0181f6:	2100      	movs	r1, #0
 c0181f8:	222e      	movs	r2, #46	; 0x2e
 c0181fa:	f10d 0032 	add.w	r0, sp, #50	; 0x32
{
 c0181fe:	461e      	mov	r6, r3
    struct tfm_crypto_pack_iovec iov = {
 c018200:	f7fc fbe1 	bl	c0149c6 <memset>
 c018204:	2321      	movs	r3, #33	; 0x21
 c018206:	f8ad 9030 	strh.w	r9, [sp, #48]	; 0x30
 c01820a:	930b      	str	r3, [sp, #44]	; 0x2c
 c01820c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
        .key_handle = handle,
        .alg = alg
    };

    /* Sanitize the optional input */
    if ((salt == NULL) && (salt_length != 0)) {
 c018210:	b904      	cbnz	r4, c018214 <psa_asymmetric_encrypt+0x2e>
 c018212:	bb45      	cbnz	r5, c018266 <psa_asymmetric_encrypt+0x80>
        return PSA_ERROR_INVALID_ARGUMENT;
    }

    psa_invec in_vec[] = {
 c018214:	ab0b      	add	r3, sp, #44	; 0x2c
 c018216:	9305      	str	r3, [sp, #20]
 c018218:	2334      	movs	r3, #52	; 0x34
 c01821a:	e9cd 3706 	strd	r3, r7, [sp, #24]
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
        {.base = input, .len = input_length},
        {.base = salt, .len = salt_length}
    };

    psa_outvec out_vec[] = {
 c01821e:	9b22      	ldr	r3, [sp, #136]	; 0x88
        {.base = output, .len = output_size},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c018220:	2101      	movs	r1, #1
    psa_outvec out_vec[] = {
 c018222:	9303      	str	r3, [sp, #12]
 c018224:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    PSA_CONNECT(TFM_CRYPTO);
 c018226:	2080      	movs	r0, #128	; 0x80
    psa_invec in_vec[] = {
 c018228:	950a      	str	r5, [sp, #40]	; 0x28
 c01822a:	e9cd 6408 	strd	r6, r4, [sp, #32]
    psa_outvec out_vec[] = {
 c01822e:	9304      	str	r3, [sp, #16]
    PSA_CONNECT(TFM_CRYPTO);
 c018230:	f7ff f936 	bl	c0174a0 <psa_connect>
 c018234:	1e05      	subs	r5, r0, #0
 c018236:	dd19      	ble.n	c01826c <psa_asymmetric_encrypt+0x86>
#ifdef TFM_PSA_API
    size_t in_len = ARRAY_SIZE(in_vec);
    if (salt == NULL) {
        in_len--;
    }
    status = psa_call(ipc_handle, PSA_IPC_CALL, in_vec, in_len,
 c018238:	2301      	movs	r3, #1
        in_len--;
 c01823a:	2c00      	cmp	r4, #0
    status = psa_call(ipc_handle, PSA_IPC_CALL, in_vec, in_len,
 c01823c:	9301      	str	r3, [sp, #4]
 c01823e:	ab03      	add	r3, sp, #12
 c018240:	9300      	str	r3, [sp, #0]
 c018242:	aa05      	add	r2, sp, #20
 c018244:	bf14      	ite	ne
 c018246:	2303      	movne	r3, #3
 c018248:	2302      	moveq	r3, #2
 c01824a:	2100      	movs	r1, #0
 c01824c:	f7ff f92a 	bl	c0174a4 <psa_call>
#else
    status = API_DISPATCH(tfm_crypto_asymmetric_encrypt,
                          TFM_CRYPTO_ASYMMETRIC_ENCRYPT);
#endif

    *output_length = out_vec[0].len;
 c018250:	9b24      	ldr	r3, [sp, #144]	; 0x90
 c018252:	9a04      	ldr	r2, [sp, #16]
    status = psa_call(ipc_handle, PSA_IPC_CALL, in_vec, in_len,
 c018254:	4604      	mov	r4, r0
    *output_length = out_vec[0].len;
 c018256:	601a      	str	r2, [r3, #0]

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c018258:	4628      	mov	r0, r5
 c01825a:	f7ff f925 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED */
}
 c01825e:	4620      	mov	r0, r4
 c018260:	b019      	add	sp, #100	; 0x64
 c018262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return PSA_ERROR_INVALID_ARGUMENT;
 c018266:	f06f 0486 	mvn.w	r4, #134	; 0x86
 c01826a:	e7f8      	b.n	c01825e <psa_asymmetric_encrypt+0x78>
    PSA_CONNECT(TFM_CRYPTO);
 c01826c:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c018270:	e7f5      	b.n	c01825e <psa_asymmetric_encrypt+0x78>

0c018272 <psa_asymmetric_decrypt>:
                                    const uint8_t *salt,
                                    size_t salt_length,
                                    uint8_t *output,
                                    size_t output_size,
                                    size_t *output_length)
{
 c018272:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c018276:	b099      	sub	sp, #100	; 0x64
 c018278:	4681      	mov	r9, r0
 c01827a:	e9dd 4520 	ldrd	r4, r5, [sp, #128]	; 0x80
 c01827e:	4688      	mov	r8, r1
 c018280:	4617      	mov	r7, r2
#if (TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c018282:	2100      	movs	r1, #0
 c018284:	222e      	movs	r2, #46	; 0x2e
 c018286:	f10d 0032 	add.w	r0, sp, #50	; 0x32
{
 c01828a:	461e      	mov	r6, r3
    struct tfm_crypto_pack_iovec iov = {
 c01828c:	f7fc fb9b 	bl	c0149c6 <memset>
 c018290:	2322      	movs	r3, #34	; 0x22
 c018292:	f8ad 9030 	strh.w	r9, [sp, #48]	; 0x30
 c018296:	930b      	str	r3, [sp, #44]	; 0x2c
 c018298:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
        .key_handle = handle,
        .alg = alg
    };

    /* Sanitize the optional input */
    if ((salt == NULL) && (salt_length != 0)) {
 c01829c:	b904      	cbnz	r4, c0182a0 <psa_asymmetric_decrypt+0x2e>
 c01829e:	bb45      	cbnz	r5, c0182f2 <psa_asymmetric_decrypt+0x80>
        return PSA_ERROR_INVALID_ARGUMENT;
    }

    psa_invec in_vec[] = {
 c0182a0:	ab0b      	add	r3, sp, #44	; 0x2c
 c0182a2:	9305      	str	r3, [sp, #20]
 c0182a4:	2334      	movs	r3, #52	; 0x34
 c0182a6:	e9cd 3706 	strd	r3, r7, [sp, #24]
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
        {.base = input, .len = input_length},
        {.base = salt, .len = salt_length}
    };

    psa_outvec out_vec[] = {
 c0182aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
        {.base = output, .len = output_size},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c0182ac:	2101      	movs	r1, #1
    psa_outvec out_vec[] = {
 c0182ae:	9303      	str	r3, [sp, #12]
 c0182b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    PSA_CONNECT(TFM_CRYPTO);
 c0182b2:	2080      	movs	r0, #128	; 0x80
    psa_invec in_vec[] = {
 c0182b4:	950a      	str	r5, [sp, #40]	; 0x28
 c0182b6:	e9cd 6408 	strd	r6, r4, [sp, #32]
    psa_outvec out_vec[] = {
 c0182ba:	9304      	str	r3, [sp, #16]
    PSA_CONNECT(TFM_CRYPTO);
 c0182bc:	f7ff f8f0 	bl	c0174a0 <psa_connect>
 c0182c0:	1e05      	subs	r5, r0, #0
 c0182c2:	dd19      	ble.n	c0182f8 <psa_asymmetric_decrypt+0x86>
#ifdef TFM_PSA_API
    size_t in_len = ARRAY_SIZE(in_vec);
    if (salt == NULL) {
        in_len--;
    }
    status = psa_call(ipc_handle, PSA_IPC_CALL, in_vec, in_len,
 c0182c4:	2301      	movs	r3, #1
        in_len--;
 c0182c6:	2c00      	cmp	r4, #0
    status = psa_call(ipc_handle, PSA_IPC_CALL, in_vec, in_len,
 c0182c8:	9301      	str	r3, [sp, #4]
 c0182ca:	ab03      	add	r3, sp, #12
 c0182cc:	9300      	str	r3, [sp, #0]
 c0182ce:	aa05      	add	r2, sp, #20
 c0182d0:	bf14      	ite	ne
 c0182d2:	2303      	movne	r3, #3
 c0182d4:	2302      	moveq	r3, #2
 c0182d6:	2100      	movs	r1, #0
 c0182d8:	f7ff f8e4 	bl	c0174a4 <psa_call>
#else
    status = API_DISPATCH(tfm_crypto_asymmetric_decrypt,
                          TFM_CRYPTO_ASYMMETRIC_DECRYPT);
#endif

    *output_length = out_vec[0].len;
 c0182dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 c0182de:	9a04      	ldr	r2, [sp, #16]
    status = psa_call(ipc_handle, PSA_IPC_CALL, in_vec, in_len,
 c0182e0:	4604      	mov	r4, r0
    *output_length = out_vec[0].len;
 c0182e2:	601a      	str	r2, [r3, #0]

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c0182e4:	4628      	mov	r0, r5
 c0182e6:	f7ff f8df 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED */
}
 c0182ea:	4620      	mov	r0, r4
 c0182ec:	b019      	add	sp, #100	; 0x64
 c0182ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return PSA_ERROR_INVALID_ARGUMENT;
 c0182f2:	f06f 0486 	mvn.w	r4, #134	; 0x86
 c0182f6:	e7f8      	b.n	c0182ea <psa_asymmetric_decrypt+0x78>
    PSA_CONNECT(TFM_CRYPTO);
 c0182f8:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c0182fc:	e7f5      	b.n	c0182ea <psa_asymmetric_decrypt+0x78>

0c0182fe <psa_get_generator_capacity>:

__attribute__((section("SFN")))
psa_status_t psa_get_generator_capacity(const psa_crypto_generator_t *generator,
                                        size_t *capacity)
{
 c0182fe:	b530      	push	{r4, r5, lr}
 c018300:	b095      	sub	sp, #84	; 0x54
 c018302:	4605      	mov	r5, r0
 c018304:	460c      	mov	r4, r1
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c018306:	2230      	movs	r2, #48	; 0x30
 c018308:	2100      	movs	r1, #0
 c01830a:	a808      	add	r0, sp, #32
 c01830c:	f7fc fb5b 	bl	c0149c6 <memset>
 c018310:	2323      	movs	r3, #35	; 0x23
 c018312:	9307      	str	r3, [sp, #28]
 c018314:	682b      	ldr	r3, [r5, #0]
    psa_outvec out_vec[] = {
        {.base = capacity, .len = sizeof(size_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c018316:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c018318:	930d      	str	r3, [sp, #52]	; 0x34
    psa_invec in_vec[] = {
 c01831a:	ab07      	add	r3, sp, #28
 c01831c:	9303      	str	r3, [sp, #12]
 c01831e:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
 c018320:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c018324:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c018326:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c018328:	9306      	str	r3, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c01832a:	f7ff f8b9 	bl	c0174a0 <psa_connect>
 c01832e:	1e05      	subs	r5, r0, #0
 c018330:	dd0e      	ble.n	c018350 <psa_get_generator_capacity+0x52>
#endif

    status = API_DISPATCH(tfm_crypto_get_generator_capacity,
 c018332:	2301      	movs	r3, #1
 c018334:	aa05      	add	r2, sp, #20
 c018336:	9200      	str	r2, [sp, #0]
 c018338:	9301      	str	r3, [sp, #4]
 c01833a:	aa03      	add	r2, sp, #12
 c01833c:	2100      	movs	r1, #0
 c01833e:	f7ff f8b1 	bl	c0174a4 <psa_call>
 c018342:	4604      	mov	r4, r0
                          TFM_CRYPTO_GET_GENERATOR_CAPACITY);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c018344:	4628      	mov	r0, r5
 c018346:	f7ff f8af 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c01834a:	4620      	mov	r0, r4
 c01834c:	b015      	add	sp, #84	; 0x54
 c01834e:	bd30      	pop	{r4, r5, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c018350:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c018354:	e7f9      	b.n	c01834a <psa_get_generator_capacity+0x4c>

0c018356 <psa_generator_read>:

__attribute__((section("SFN")))
psa_status_t psa_generator_read(psa_crypto_generator_t *generator,
                                uint8_t *output,
                                size_t output_length)
{
 c018356:	b570      	push	{r4, r5, r6, lr}
 c018358:	b094      	sub	sp, #80	; 0x50
 c01835a:	460d      	mov	r5, r1
 c01835c:	4606      	mov	r6, r0
 c01835e:	4614      	mov	r4, r2
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c018360:	2100      	movs	r1, #0
 c018362:	2230      	movs	r2, #48	; 0x30
 c018364:	a808      	add	r0, sp, #32
 c018366:	f7fc fb2e 	bl	c0149c6 <memset>
 c01836a:	2324      	movs	r3, #36	; 0x24
 c01836c:	9307      	str	r3, [sp, #28]
 c01836e:	6833      	ldr	r3, [r6, #0]
    psa_outvec out_vec[] = {
        {.base = output, .len = output_length},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c018370:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c018372:	930d      	str	r3, [sp, #52]	; 0x34
    psa_invec in_vec[] = {
 c018374:	ab07      	add	r3, sp, #28
 c018376:	9303      	str	r3, [sp, #12]
 c018378:	2334      	movs	r3, #52	; 0x34
    PSA_CONNECT(TFM_CRYPTO);
 c01837a:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c01837c:	e9cd 3504 	strd	r3, r5, [sp, #16]
 c018380:	9406      	str	r4, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c018382:	f7ff f88d 	bl	c0174a0 <psa_connect>
 c018386:	1e05      	subs	r5, r0, #0
 c018388:	dd0e      	ble.n	c0183a8 <psa_generator_read+0x52>
#endif

    status = API_DISPATCH(tfm_crypto_generator_read,
 c01838a:	2301      	movs	r3, #1
 c01838c:	aa05      	add	r2, sp, #20
 c01838e:	9200      	str	r2, [sp, #0]
 c018390:	9301      	str	r3, [sp, #4]
 c018392:	aa03      	add	r2, sp, #12
 c018394:	2100      	movs	r1, #0
 c018396:	f7ff f885 	bl	c0174a4 <psa_call>
 c01839a:	4604      	mov	r4, r0
                          TFM_CRYPTO_GENERATOR_READ);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c01839c:	4628      	mov	r0, r5
 c01839e:	f7ff f883 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c0183a2:	4620      	mov	r0, r4
 c0183a4:	b014      	add	sp, #80	; 0x50
 c0183a6:	bd70      	pop	{r4, r5, r6, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c0183a8:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c0183ac:	e7f9      	b.n	c0183a2 <psa_generator_read+0x4c>

0c0183ae <psa_generator_import_key>:
__attribute__((section("SFN")))
psa_status_t psa_generator_import_key(psa_key_handle_t handle,
                                      psa_key_type_t type,
                                      size_t bits,
                                      psa_crypto_generator_t *generator)
{
 c0183ae:	b570      	push	{r4, r5, r6, lr}
 c0183b0:	b096      	sub	sp, #88	; 0x58
 c0183b2:	460d      	mov	r5, r1
 c0183b4:	4606      	mov	r6, r0
 c0183b6:	9203      	str	r2, [sp, #12]
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c0183b8:	2100      	movs	r1, #0
 c0183ba:	222e      	movs	r2, #46	; 0x2e
 c0183bc:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
{
 c0183c0:	461c      	mov	r4, r3
    struct tfm_crypto_pack_iovec iov = {
 c0183c2:	f7fc fb00 	bl	c0149c6 <memset>
 c0183c6:	2325      	movs	r3, #37	; 0x25
 c0183c8:	9309      	str	r3, [sp, #36]	; 0x24
 c0183ca:	6823      	ldr	r3, [r4, #0]
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
        {.base = &bits, .len = sizeof(size_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c0183cc:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c0183ce:	930f      	str	r3, [sp, #60]	; 0x3c
    psa_invec in_vec[] = {
 c0183d0:	ab09      	add	r3, sp, #36	; 0x24
 c0183d2:	9305      	str	r3, [sp, #20]
 c0183d4:	2334      	movs	r3, #52	; 0x34
 c0183d6:	9306      	str	r3, [sp, #24]
 c0183d8:	ab03      	add	r3, sp, #12
 c0183da:	9307      	str	r3, [sp, #28]
 c0183dc:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c0183de:	2080      	movs	r0, #128	; 0x80
    struct tfm_crypto_pack_iovec iov = {
 c0183e0:	950b      	str	r5, [sp, #44]	; 0x2c
 c0183e2:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
    psa_invec in_vec[] = {
 c0183e6:	9308      	str	r3, [sp, #32]
    PSA_CONNECT(TFM_CRYPTO);
 c0183e8:	f7ff f85a 	bl	c0174a0 <psa_connect>
 c0183ec:	1e05      	subs	r5, r0, #0
 c0183ee:	dd0d      	ble.n	c01840c <psa_generator_import_key+0x5e>
#endif

    status = API_DISPATCH_NO_OUTVEC(tfm_crypto_generator_import_key,
 c0183f0:	2100      	movs	r1, #0
 c0183f2:	2302      	movs	r3, #2
 c0183f4:	e9cd 1100 	strd	r1, r1, [sp]
 c0183f8:	aa05      	add	r2, sp, #20
 c0183fa:	f7ff f853 	bl	c0174a4 <psa_call>
 c0183fe:	4604      	mov	r4, r0
                                    TFM_CRYPTO_GENERATOR_IMPORT_KEY);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c018400:	4628      	mov	r0, r5
 c018402:	f7ff f851 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c018406:	4620      	mov	r0, r4
 c018408:	b016      	add	sp, #88	; 0x58
 c01840a:	bd70      	pop	{r4, r5, r6, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01840c:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c018410:	e7f9      	b.n	c018406 <psa_generator_import_key+0x58>

0c018412 <psa_generator_abort>:

__attribute__((section("SFN")))
psa_status_t psa_generator_abort(psa_crypto_generator_t *generator)
{
 c018412:	b530      	push	{r4, r5, lr}
 c018414:	b095      	sub	sp, #84	; 0x54
 c018416:	4604      	mov	r4, r0
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c018418:	2230      	movs	r2, #48	; 0x30
 c01841a:	2100      	movs	r1, #0
 c01841c:	a808      	add	r0, sp, #32
 c01841e:	f7fc fad2 	bl	c0149c6 <memset>
 c018422:	2326      	movs	r3, #38	; 0x26
 c018424:	9307      	str	r3, [sp, #28]
 c018426:	6823      	ldr	r3, [r4, #0]
    psa_outvec out_vec[] = {
        {.base = &(generator->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c018428:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c01842a:	930d      	str	r3, [sp, #52]	; 0x34
    psa_invec in_vec[] = {
 c01842c:	ab07      	add	r3, sp, #28
 c01842e:	9303      	str	r3, [sp, #12]
 c018430:	2334      	movs	r3, #52	; 0x34
    psa_outvec out_vec[] = {
 c018432:	e9cd 3404 	strd	r3, r4, [sp, #16]
 c018436:	2304      	movs	r3, #4
    PSA_CONNECT(TFM_CRYPTO);
 c018438:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c01843a:	9306      	str	r3, [sp, #24]
    PSA_CONNECT(TFM_CRYPTO);
 c01843c:	f7ff f830 	bl	c0174a0 <psa_connect>
 c018440:	1e05      	subs	r5, r0, #0
 c018442:	dd0e      	ble.n	c018462 <psa_generator_abort+0x50>
#endif

    status = API_DISPATCH(tfm_crypto_generator_abort,
 c018444:	2301      	movs	r3, #1
 c018446:	aa05      	add	r2, sp, #20
 c018448:	9200      	str	r2, [sp, #0]
 c01844a:	9301      	str	r3, [sp, #4]
 c01844c:	aa03      	add	r2, sp, #12
 c01844e:	2100      	movs	r1, #0
 c018450:	f7ff f828 	bl	c0174a4 <psa_call>
 c018454:	4604      	mov	r4, r0
                          TFM_CRYPTO_GENERATOR_ABORT);
#ifdef TFM_PSA_API
    PSA_CLOSE();
 c018456:	4628      	mov	r0, r5
 c018458:	f7ff f826 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c01845c:	4620      	mov	r0, r4
 c01845e:	b015      	add	sp, #84	; 0x54
 c018460:	bd30      	pop	{r4, r5, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c018462:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c018466:	e7f9      	b.n	c01845c <psa_generator_abort+0x4a>

0c018468 <psa_key_derivation>:
                                const uint8_t *salt,
                                size_t salt_length,
                                const uint8_t *label,
                                size_t label_length,
                                size_t capacity)
{
 c018468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c01846c:	b098      	sub	sp, #96	; 0x60
 c01846e:	4606      	mov	r6, r0
 c018470:	e9dd 8520 	ldrd	r8, r5, [sp, #128]	; 0x80
 c018474:	468a      	mov	sl, r1
 c018476:	4691      	mov	r9, r2
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c018478:	2100      	movs	r1, #0
 c01847a:	222e      	movs	r2, #46	; 0x2e
 c01847c:	f10d 0032 	add.w	r0, sp, #50	; 0x32
{
 c018480:	461c      	mov	r4, r3
 c018482:	9f22      	ldr	r7, [sp, #136]	; 0x88
    struct tfm_crypto_pack_iovec iov = {
 c018484:	f7fc fa9f 	bl	c0149c6 <memset>
 c018488:	2327      	movs	r3, #39	; 0x27
 c01848a:	930b      	str	r3, [sp, #44]	; 0x2c
 c01848c:	6833      	ldr	r3, [r6, #0]
 c01848e:	f8ad a030 	strh.w	sl, [sp, #48]	; 0x30
 c018492:	9311      	str	r3, [sp, #68]	; 0x44
 c018494:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 c018496:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 c01849a:	9312      	str	r3, [sp, #72]	; 0x48
        .op_handle = generator->handle,
        .capacity = capacity,
    };

    /* Sanitize the optional input */
    if ((salt == NULL) && (salt_length != 0)) {
 c01849c:	b914      	cbnz	r4, c0184a4 <psa_key_derivation+0x3c>
 c01849e:	f1b8 0f00 	cmp.w	r8, #0
 c0184a2:	d12a      	bne.n	c0184fa <psa_key_derivation+0x92>
        return PSA_ERROR_INVALID_ARGUMENT;
    }

    if ((label == NULL) && (label_length != 0)) {
 c0184a4:	b905      	cbnz	r5, c0184a8 <psa_key_derivation+0x40>
 c0184a6:	bb47      	cbnz	r7, c0184fa <psa_key_derivation+0x92>
        return PSA_ERROR_INVALID_ARGUMENT;
    }

    psa_invec in_vec[] = {
 c0184a8:	ab0b      	add	r3, sp, #44	; 0x2c
 c0184aa:	9305      	str	r3, [sp, #20]
 c0184ac:	2334      	movs	r3, #52	; 0x34
 c0184ae:	e9cd 3406 	strd	r3, r4, [sp, #24]
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
        {.base = salt, .len = salt_length},
        {.base = label, .len = label_length},
    };

    psa_outvec out_vec[] = {
 c0184b2:	2304      	movs	r3, #4
        {.base = &(generator->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c0184b4:	2101      	movs	r1, #1
 c0184b6:	2080      	movs	r0, #128	; 0x80
    psa_outvec out_vec[] = {
 c0184b8:	9603      	str	r6, [sp, #12]
    psa_invec in_vec[] = {
 c0184ba:	e9cd 8508 	strd	r8, r5, [sp, #32]
 c0184be:	970a      	str	r7, [sp, #40]	; 0x28
    psa_outvec out_vec[] = {
 c0184c0:	9304      	str	r3, [sp, #16]
    PSA_CONNECT(TFM_CRYPTO);
 c0184c2:	f7fe ffed 	bl	c0174a0 <psa_connect>
 c0184c6:	1e06      	subs	r6, r0, #0
 c0184c8:	dd1a      	ble.n	c018500 <psa_key_derivation+0x98>
#endif

#ifdef TFM_PSA_API
    size_t in_len = ARRAY_SIZE(in_vec);
    if (label == NULL) {
 c0184ca:	b9a5      	cbnz	r5, c0184f6 <psa_key_derivation+0x8e>
        in_len--;
        if (salt == NULL) {
            in_len--;
 c0184cc:	2c00      	cmp	r4, #0
 c0184ce:	bf14      	ite	ne
 c0184d0:	2302      	movne	r3, #2
 c0184d2:	2301      	moveq	r3, #1
        }
    }
    status = psa_call(ipc_handle, PSA_IPC_CALL, in_vec, in_len,
 c0184d4:	2201      	movs	r2, #1
 c0184d6:	9201      	str	r2, [sp, #4]
 c0184d8:	aa03      	add	r2, sp, #12
 c0184da:	9200      	str	r2, [sp, #0]
 c0184dc:	2100      	movs	r1, #0
 c0184de:	aa05      	add	r2, sp, #20
 c0184e0:	4630      	mov	r0, r6
 c0184e2:	f7fe ffdf 	bl	c0174a4 <psa_call>
 c0184e6:	4604      	mov	r4, r0
    status = API_DISPATCH(tfm_crypto_key_derivation,
                          TFM_CRYPTO_KEY_DERIVATION);
#endif

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c0184e8:	4630      	mov	r0, r6
 c0184ea:	f7fe ffdd 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c0184ee:	4620      	mov	r0, r4
 c0184f0:	b018      	add	sp, #96	; 0x60
 c0184f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    size_t in_len = ARRAY_SIZE(in_vec);
 c0184f6:	2303      	movs	r3, #3
 c0184f8:	e7ec      	b.n	c0184d4 <psa_key_derivation+0x6c>
        return PSA_ERROR_INVALID_ARGUMENT;
 c0184fa:	f06f 0486 	mvn.w	r4, #134	; 0x86
 c0184fe:	e7f6      	b.n	c0184ee <psa_key_derivation+0x86>
    PSA_CONNECT(TFM_CRYPTO);
 c018500:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c018504:	e7f3      	b.n	c0184ee <psa_key_derivation+0x86>

0c018506 <psa_key_agreement>:
psa_status_t psa_key_agreement(psa_crypto_generator_t *generator,
                               psa_key_handle_t private_key,
                               const uint8_t *peer_key,
                               size_t peer_key_length,
                               psa_algorithm_t alg)
{
 c018506:	b5f0      	push	{r4, r5, r6, r7, lr}
 c018508:	b097      	sub	sp, #92	; 0x5c
 c01850a:	4604      	mov	r4, r0
 c01850c:	460f      	mov	r7, r1
 c01850e:	4616      	mov	r6, r2
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c018510:	2100      	movs	r1, #0
 c018512:	222e      	movs	r2, #46	; 0x2e
 c018514:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
{
 c018518:	461d      	mov	r5, r3
    struct tfm_crypto_pack_iovec iov = {
 c01851a:	f7fc fa54 	bl	c0149c6 <memset>
 c01851e:	2328      	movs	r3, #40	; 0x28
 c018520:	9309      	str	r3, [sp, #36]	; 0x24
 c018522:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    psa_outvec out_vec[] = {
        {.base = &(generator->handle), .len = sizeof(uint32_t)},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c018524:	2101      	movs	r1, #1
    struct tfm_crypto_pack_iovec iov = {
 c018526:	930d      	str	r3, [sp, #52]	; 0x34
 c018528:	6823      	ldr	r3, [r4, #0]
    PSA_CONNECT(TFM_CRYPTO);
 c01852a:	2080      	movs	r0, #128	; 0x80
    struct tfm_crypto_pack_iovec iov = {
 c01852c:	930f      	str	r3, [sp, #60]	; 0x3c
    psa_invec in_vec[] = {
 c01852e:	ab09      	add	r3, sp, #36	; 0x24
 c018530:	9305      	str	r3, [sp, #20]
 c018532:	2334      	movs	r3, #52	; 0x34
 c018534:	e9cd 3606 	strd	r3, r6, [sp, #24]
    psa_outvec out_vec[] = {
 c018538:	2304      	movs	r3, #4
    psa_invec in_vec[] = {
 c01853a:	9508      	str	r5, [sp, #32]
    struct tfm_crypto_pack_iovec iov = {
 c01853c:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
    psa_outvec out_vec[] = {
 c018540:	9403      	str	r4, [sp, #12]
 c018542:	9304      	str	r3, [sp, #16]
    PSA_CONNECT(TFM_CRYPTO);
 c018544:	f7fe ffac 	bl	c0174a0 <psa_connect>
 c018548:	1e05      	subs	r5, r0, #0
 c01854a:	dd0f      	ble.n	c01856c <psa_key_agreement+0x66>
#endif

    status = API_DISPATCH(tfm_crypto_key_agreement,
 c01854c:	2301      	movs	r3, #1
 c01854e:	9301      	str	r3, [sp, #4]
 c018550:	ab03      	add	r3, sp, #12
 c018552:	9300      	str	r3, [sp, #0]
 c018554:	aa05      	add	r2, sp, #20
 c018556:	2302      	movs	r3, #2
 c018558:	2100      	movs	r1, #0
 c01855a:	f7fe ffa3 	bl	c0174a4 <psa_call>
 c01855e:	4604      	mov	r4, r0
                          TFM_CRYPTO_KEY_AGREEMENT);

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c018560:	4628      	mov	r0, r5
 c018562:	f7fe ffa1 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c018566:	4620      	mov	r0, r4
 c018568:	b017      	add	sp, #92	; 0x5c
 c01856a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c01856c:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c018570:	e7f9      	b.n	c018566 <psa_key_agreement+0x60>

0c018572 <psa_generate_random>:

__attribute__((section("SFN")))
psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
 c018572:	b530      	push	{r4, r5, lr}
 c018574:	b095      	sub	sp, #84	; 0x54
 c018576:	4605      	mov	r5, r0
 c018578:	460c      	mov	r4, r1
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c01857a:	2230      	movs	r2, #48	; 0x30
 c01857c:	2100      	movs	r1, #0
 c01857e:	a808      	add	r0, sp, #32
 c018580:	f7fc fa21 	bl	c0149c6 <memset>
 c018584:	2229      	movs	r2, #41	; 0x29
 c018586:	ab14      	add	r3, sp, #80	; 0x50
 c018588:	f843 2d34 	str.w	r2, [r3, #-52]!
        .sfn_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
 c01858c:	9303      	str	r3, [sp, #12]
 c01858e:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
 c018590:	9406      	str	r4, [sp, #24]
 c018592:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
 c018596:	b18c      	cbz	r4, c0185bc <psa_generate_random+0x4a>
        return PSA_SUCCESS;
    }

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c018598:	2101      	movs	r1, #1
 c01859a:	2080      	movs	r0, #128	; 0x80
 c01859c:	f7fe ff80 	bl	c0174a0 <psa_connect>
 c0185a0:	1e05      	subs	r5, r0, #0
 c0185a2:	dd0e      	ble.n	c0185c2 <psa_generate_random+0x50>
#endif

    status = API_DISPATCH(tfm_crypto_generate_random,
 c0185a4:	2301      	movs	r3, #1
 c0185a6:	aa05      	add	r2, sp, #20
 c0185a8:	9200      	str	r2, [sp, #0]
 c0185aa:	9301      	str	r3, [sp, #4]
 c0185ac:	aa03      	add	r2, sp, #12
 c0185ae:	2100      	movs	r1, #0
 c0185b0:	f7fe ff78 	bl	c0174a4 <psa_call>
 c0185b4:	4604      	mov	r4, r0
                          TFM_CRYPTO_GENERATE_RANDOM);

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c0185b6:	4628      	mov	r0, r5
 c0185b8:	f7fe ff76 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c0185bc:	4620      	mov	r0, r4
 c0185be:	b015      	add	sp, #84	; 0x54
 c0185c0:	bd30      	pop	{r4, r5, pc}
    PSA_CONNECT(TFM_CRYPTO);
 c0185c2:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c0185c6:	e7f9      	b.n	c0185bc <psa_generate_random+0x4a>

0c0185c8 <psa_generate_key>:
psa_status_t psa_generate_key(psa_key_handle_t handle,
                              psa_key_type_t type,
                              size_t bits,
                              const void *extra,
                              size_t extra_size)
{
 c0185c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 c0185ca:	b099      	sub	sp, #100	; 0x64
 c0185cc:	4607      	mov	r7, r0
 c0185ce:	460e      	mov	r6, r1
 c0185d0:	9203      	str	r2, [sp, #12]
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
 c0185d2:	2100      	movs	r1, #0
 c0185d4:	222e      	movs	r2, #46	; 0x2e
 c0185d6:	f10d 0032 	add.w	r0, sp, #50	; 0x32
{
 c0185da:	461c      	mov	r4, r3
 c0185dc:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    struct tfm_crypto_pack_iovec iov = {
 c0185de:	f7fc f9f2 	bl	c0149c6 <memset>
 c0185e2:	232a      	movs	r3, #42	; 0x2a
 c0185e4:	f8ad 7030 	strh.w	r7, [sp, #48]	; 0x30
 c0185e8:	930b      	str	r3, [sp, #44]	; 0x2c
 c0185ea:	960d      	str	r6, [sp, #52]	; 0x34
        .key_handle = handle,
        .type = type,
    };

    /* Sanitize the optional input */
    if ((extra == NULL) && (extra_size != 0)) {
 c0185ec:	b904      	cbnz	r4, c0185f0 <psa_generate_key+0x28>
 c0185ee:	bb05      	cbnz	r5, c018632 <psa_generate_key+0x6a>
        return PSA_ERROR_INVALID_ARGUMENT;
    }

    psa_invec in_vec[] = {
 c0185f0:	ab0b      	add	r3, sp, #44	; 0x2c
 c0185f2:	9305      	str	r3, [sp, #20]
 c0185f4:	2334      	movs	r3, #52	; 0x34
 c0185f6:	9306      	str	r3, [sp, #24]
 c0185f8:	ab03      	add	r3, sp, #12
 c0185fa:	9307      	str	r3, [sp, #28]
 c0185fc:	2304      	movs	r3, #4
        {.base = &bits, .len = sizeof(size_t)},
        {.base = extra, .len = extra_size},
    };

#ifdef TFM_PSA_API
    PSA_CONNECT(TFM_CRYPTO);
 c0185fe:	2101      	movs	r1, #1
 c018600:	2080      	movs	r0, #128	; 0x80
    psa_invec in_vec[] = {
 c018602:	950a      	str	r5, [sp, #40]	; 0x28
 c018604:	e9cd 3408 	strd	r3, r4, [sp, #32]
    PSA_CONNECT(TFM_CRYPTO);
 c018608:	f7fe ff4a 	bl	c0174a0 <psa_connect>
 c01860c:	1e05      	subs	r5, r0, #0
 c01860e:	dd13      	ble.n	c018638 <psa_generate_key+0x70>
    size_t in_len = ARRAY_SIZE(in_vec);
    if (extra == NULL) {
        in_len--;
    }

    status = psa_call(ipc_handle, PSA_IPC_CALL, in_vec, in_len, NULL, 0);
 c018610:	2100      	movs	r1, #0
        in_len--;
 c018612:	2c00      	cmp	r4, #0
    status = psa_call(ipc_handle, PSA_IPC_CALL, in_vec, in_len, NULL, 0);
 c018614:	e9cd 1100 	strd	r1, r1, [sp]
 c018618:	bf14      	ite	ne
 c01861a:	2303      	movne	r3, #3
 c01861c:	2302      	moveq	r3, #2
 c01861e:	aa05      	add	r2, sp, #20
 c018620:	f7fe ff40 	bl	c0174a4 <psa_call>
 c018624:	4604      	mov	r4, r0
    status = API_DISPATCH_NO_OUTVEC(tfm_crypto_generate_key,
                                    TFM_CRYPTO_GENERATE_KEY);
#endif

#ifdef TFM_PSA_API
    PSA_CLOSE();
 c018626:	4628      	mov	r0, r5
 c018628:	f7fe ff3e 	bl	c0174a8 <psa_close>
#endif

    return status;
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c01862c:	4620      	mov	r0, r4
 c01862e:	b019      	add	sp, #100	; 0x64
 c018630:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return PSA_ERROR_INVALID_ARGUMENT;
 c018632:	f06f 0486 	mvn.w	r4, #134	; 0x86
 c018636:	e7f9      	b.n	c01862c <psa_generate_key+0x64>
    PSA_CONNECT(TFM_CRYPTO);
 c018638:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c01863c:	e7f6      	b.n	c01862c <psa_generate_key+0x64>
	...

0c018640 <tfm_nspm_thread_entry>:
    return 1U;
}

__attribute__((section("SFN")))
psa_status_t tfm_nspm_thread_entry(void)
{
 c018640:	b508      	push	{r3, lr}
#ifdef TFM_CORE_DEBUG
    /* Jumps to non-secure code */
    LOG_MSG("Jumping to non-secure code...");
#endif

    jump_to_ns_code();
 c018642:	f7fe fe79 	bl	c017338 <jump_to_ns_code>

    /* Should not run here */
    TFM_ASSERT(false);
 c018646:	2263      	movs	r2, #99	; 0x63
 c018648:	4902      	ldr	r1, [pc, #8]	; (c018654 <tfm_nspm_thread_entry+0x14>)
 c01864a:	4803      	ldr	r0, [pc, #12]	; (c018658 <tfm_nspm_thread_entry+0x18>)
 c01864c:	f7fc fedc 	bl	c015408 <iprintf>
 c018650:	e7fe      	b.n	c018650 <tfm_nspm_thread_entry+0x10>
 c018652:	bf00      	nop
 c018654:	0c03587b 	.word	0x0c03587b
 c018658:	0c0357d2 	.word	0x0c0357d2

0c01865c <tfm_core_ipc_request>:
                (int32_t)c, (int32_t)d)

__attribute__ ((naked, section("SFN")))
static int32_t tfm_core_ipc_request(const struct tfm_sfn_req_s *desc_ptr)
{
    __ASM volatile("SVC %0           \n"
 c01865c:	df0e      	svc	14
 c01865e:	4770      	bx	lr

0c018660 <__acle_se_tfm_psa_framework_version_veneer>:
    desc.sfn = (sfn_t)0;
    desc.args = (int32_t *)0;
    desc.caller_part_idx = 0UL;
    desc.ns_caller = 0UL;
#else
    struct tfm_sfn_req_s desc={0};
 c018660:	2214      	movs	r2, #20
    int32_t args[4] = {arg1, arg2, arg3, arg4};
 c018662:	2100      	movs	r1, #0
 * They won't call legacy SFN but instead will be handlers for TF-M
 */

__tfm_secure_gateway_attributes__
uint32_t tfm_psa_framework_version_veneer(void)
{
 c018664:	b510      	push	{r4, lr}
 c018666:	4674      	mov	r4, lr
 c018668:	b08a      	sub	sp, #40	; 0x28
    struct tfm_sfn_req_s desc={0};
 c01866a:	eb0d 0002 	add.w	r0, sp, r2
    int32_t args[4] = {arg1, arg2, arg3, arg4};
 c01866e:	e9cd 1101 	strd	r1, r1, [sp, #4]
 c018672:	e9cd 1103 	strd	r1, r1, [sp, #12]
    struct tfm_sfn_req_s desc={0};
 c018676:	f7fc f9a6 	bl	c0149c6 <memset>
    desc.sfn = (sfn_t)fn;
 c01867a:	4b25      	ldr	r3, [pc, #148]	; (c018710 <__acle_se_tfm_psa_framework_version_veneer+0xb0>)

/* FIXME: diagnose use outside cmse_nonsecure_entry functions.  */
__extension__ static __inline int __attribute__ ((__always_inline__))
cmse_nonsecure_caller (void)
{
  return __builtin_arm_cmse_nonsecure_caller ();
 c01867c:	f014 0f01 	tst.w	r4, #1
 c018680:	9306      	str	r3, [sp, #24]
    desc.args = args;
 c018682:	ab01      	add	r3, sp, #4
 c018684:	9307      	str	r3, [sp, #28]
 c018686:	bf0c      	ite	eq
 c018688:	2301      	moveq	r3, #1
 c01868a:	2300      	movne	r3, #0
    desc.ns_caller = cmse_nonsecure_caller() ;
 c01868c:	9309      	str	r3, [sp, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 c01868e:	f3ef 8305 	mrs	r3, IPSR
{
    IPSR_Type IPSR;

    /* if non-zero, exception is active. NOT banked S/NS */
    IPSR.w = __get_IPSR();
    return IPSR.b.ISR;
 c018692:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (__get_active_exc_num() != EXC_NUM_THREAD_MODE)
 c018696:	bbc3      	cbnz	r3, c01870a <__acle_se_tfm_psa_framework_version_veneer+0xaa>
        return tfm_core_ipc_request(&desc);
 c018698:	a805      	add	r0, sp, #20
 c01869a:	f7ff ffdf 	bl	c01865c <tfm_core_ipc_request>
    TFM_CORE_NS_IPC_REQUEST_VENEER((void *) tfm_svcall_psa_framework_version, 0,
                                   0, 0, 0);
}
 c01869e:	b00a      	add	sp, #40	; 0x28
 c0186a0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0186a4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0186a8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0186ac:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0186b0:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0186b4:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0186b8:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0186bc:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0186c0:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0186c4:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0186c8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0186cc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0186d0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0186d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0186d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0186dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c0186e0:	4671      	mov	r1, lr
 c0186e2:	4672      	mov	r2, lr
 c0186e4:	4673      	mov	r3, lr
 c0186e6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0186ea:	f38e 8c00 	msr	CPSR_fs, lr
 c0186ee:	b410      	push	{r4}
 c0186f0:	eef1 ca10 	vmrs	ip, fpscr
 c0186f4:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0186f8:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0186fc:	ea0c 0c04 	and.w	ip, ip, r4
 c018700:	eee1 ca10 	vmsr	fpscr, ip
 c018704:	bc10      	pop	{r4}
 c018706:	46f4      	mov	ip, lr
 c018708:	4774      	bxns	lr
        return TFM_ERROR_INVALID_EXC_MODE;
 c01870a:	2008      	movs	r0, #8
 c01870c:	e7c7      	b.n	c01869e <__acle_se_tfm_psa_framework_version_veneer+0x3e>
 c01870e:	bf00      	nop
 c018710:	0c032125 	.word	0x0c032125

0c018714 <__acle_se_tfm_psa_version_veneer>:
    struct tfm_sfn_req_s desc={0};
 c018714:	2214      	movs	r2, #20
    int32_t args[4] = {arg1, arg2, arg3, arg4};
 c018716:	2100      	movs	r1, #0

__tfm_secure_gateway_attributes__
uint32_t tfm_psa_version_veneer(uint32_t sid)
{
 c018718:	b510      	push	{r4, lr}
 c01871a:	4674      	mov	r4, lr
 c01871c:	b08a      	sub	sp, #40	; 0x28
    int32_t args[4] = {arg1, arg2, arg3, arg4};
 c01871e:	9001      	str	r0, [sp, #4]
    struct tfm_sfn_req_s desc={0};
 c018720:	eb0d 0002 	add.w	r0, sp, r2
    int32_t args[4] = {arg1, arg2, arg3, arg4};
 c018724:	e9cd 1102 	strd	r1, r1, [sp, #8]
 c018728:	9104      	str	r1, [sp, #16]
    struct tfm_sfn_req_s desc={0};
 c01872a:	f7fc f94c 	bl	c0149c6 <memset>
    desc.sfn = (sfn_t)fn;
 c01872e:	4b25      	ldr	r3, [pc, #148]	; (c0187c4 <__acle_se_tfm_psa_version_veneer+0xb0>)
 c018730:	f014 0f01 	tst.w	r4, #1
 c018734:	9306      	str	r3, [sp, #24]
    desc.args = args;
 c018736:	ab01      	add	r3, sp, #4
 c018738:	9307      	str	r3, [sp, #28]
 c01873a:	bf0c      	ite	eq
 c01873c:	2301      	moveq	r3, #1
 c01873e:	2300      	movne	r3, #0
    desc.ns_caller = cmse_nonsecure_caller() ;
 c018740:	9309      	str	r3, [sp, #36]	; 0x24
 c018742:	f3ef 8305 	mrs	r3, IPSR
 c018746:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (__get_active_exc_num() != EXC_NUM_THREAD_MODE)
 c01874a:	bbc3      	cbnz	r3, c0187be <__acle_se_tfm_psa_version_veneer+0xaa>
        return tfm_core_ipc_request(&desc);
 c01874c:	a805      	add	r0, sp, #20
 c01874e:	f7ff ff85 	bl	c01865c <tfm_core_ipc_request>
    TFM_CORE_NS_IPC_REQUEST_VENEER((void *) tfm_svcall_psa_version, sid, 0, 0,
                                   0);
}
 c018752:	b00a      	add	sp, #40	; 0x28
 c018754:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c018758:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c01875c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c018760:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c018764:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c018768:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c01876c:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c018770:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c018774:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c018778:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c01877c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c018780:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c018784:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c018788:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c01878c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c018790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c018794:	4671      	mov	r1, lr
 c018796:	4672      	mov	r2, lr
 c018798:	4673      	mov	r3, lr
 c01879a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c01879e:	f38e 8c00 	msr	CPSR_fs, lr
 c0187a2:	b410      	push	{r4}
 c0187a4:	eef1 ca10 	vmrs	ip, fpscr
 c0187a8:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0187ac:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0187b0:	ea0c 0c04 	and.w	ip, ip, r4
 c0187b4:	eee1 ca10 	vmsr	fpscr, ip
 c0187b8:	bc10      	pop	{r4}
 c0187ba:	46f4      	mov	ip, lr
 c0187bc:	4774      	bxns	lr
        return TFM_ERROR_INVALID_EXC_MODE;
 c0187be:	2008      	movs	r0, #8
 c0187c0:	e7c7      	b.n	c018752 <__acle_se_tfm_psa_version_veneer+0x3e>
 c0187c2:	bf00      	nop
 c0187c4:	0c03212d 	.word	0x0c03212d

0c0187c8 <__acle_se_tfm_psa_connect_veneer>:

__tfm_secure_gateway_attributes__
psa_handle_t tfm_psa_connect_veneer(uint32_t sid, uint32_t version)
{
 c0187c8:	b510      	push	{r4, lr}
    struct tfm_sfn_req_s desc={0};
 c0187ca:	2214      	movs	r2, #20
{
 c0187cc:	b08a      	sub	sp, #40	; 0x28
    int32_t args[4] = {arg1, arg2, arg3, arg4};
 c0187ce:	e9cd 0101 	strd	r0, r1, [sp, #4]
 c0187d2:	2100      	movs	r1, #0
 c0187d4:	4674      	mov	r4, lr
    struct tfm_sfn_req_s desc={0};
 c0187d6:	eb0d 0002 	add.w	r0, sp, r2
    int32_t args[4] = {arg1, arg2, arg3, arg4};
 c0187da:	e9cd 1103 	strd	r1, r1, [sp, #12]
    struct tfm_sfn_req_s desc={0};
 c0187de:	f7fc f8f2 	bl	c0149c6 <memset>
    desc.sfn = (sfn_t)fn;
 c0187e2:	4b25      	ldr	r3, [pc, #148]	; (c018878 <__acle_se_tfm_psa_connect_veneer+0xb0>)
 c0187e4:	f014 0f01 	tst.w	r4, #1
 c0187e8:	9306      	str	r3, [sp, #24]
    desc.args = args;
 c0187ea:	ab01      	add	r3, sp, #4
 c0187ec:	9307      	str	r3, [sp, #28]
 c0187ee:	bf0c      	ite	eq
 c0187f0:	2301      	moveq	r3, #1
 c0187f2:	2300      	movne	r3, #0
    desc.ns_caller = cmse_nonsecure_caller() ;
 c0187f4:	9309      	str	r3, [sp, #36]	; 0x24
 c0187f6:	f3ef 8305 	mrs	r3, IPSR
 c0187fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (__get_active_exc_num() != EXC_NUM_THREAD_MODE)
 c0187fe:	bbc3      	cbnz	r3, c018872 <__acle_se_tfm_psa_connect_veneer+0xaa>
        return tfm_core_ipc_request(&desc);
 c018800:	a805      	add	r0, sp, #20
 c018802:	f7ff ff2b 	bl	c01865c <tfm_core_ipc_request>
    TFM_CORE_NS_IPC_REQUEST_VENEER((void *) tfm_svcall_psa_connect, sid,
                                   version, 0, 0);
}
 c018806:	b00a      	add	sp, #40	; 0x28
 c018808:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c01880c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c018810:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c018814:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c018818:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c01881c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c018820:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c018824:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c018828:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c01882c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c018830:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c018834:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c018838:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c01883c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c018840:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c018844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c018848:	4671      	mov	r1, lr
 c01884a:	4672      	mov	r2, lr
 c01884c:	4673      	mov	r3, lr
 c01884e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c018852:	f38e 8c00 	msr	CPSR_fs, lr
 c018856:	b410      	push	{r4}
 c018858:	eef1 ca10 	vmrs	ip, fpscr
 c01885c:	f64f 7460 	movw	r4, #65376	; 0xff60
 c018860:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c018864:	ea0c 0c04 	and.w	ip, ip, r4
 c018868:	eee1 ca10 	vmsr	fpscr, ip
 c01886c:	bc10      	pop	{r4}
 c01886e:	46f4      	mov	ip, lr
 c018870:	4774      	bxns	lr
        return TFM_ERROR_INVALID_EXC_MODE;
 c018872:	2008      	movs	r0, #8
    TFM_CORE_NS_IPC_REQUEST_VENEER((void *) tfm_svcall_psa_connect, sid,
 c018874:	e7c7      	b.n	c018806 <__acle_se_tfm_psa_connect_veneer+0x3e>
 c018876:	bf00      	nop
 c018878:	0c03215d 	.word	0x0c03215d

0c01887c <__acle_se_tfm_psa_call_veneer>:

__tfm_secure_gateway_attributes__
psa_status_t tfm_psa_call_veneer(psa_handle_t handle, int32_t type,
                                 const psa_invec *in_vecs,
                                 const psa_invec *out_vecs)
{
 c01887c:	b510      	push	{r4, lr}
 c01887e:	b08a      	sub	sp, #40	; 0x28
    int32_t args[4] = {arg1, arg2, arg3, arg4};
 c018880:	e9cd 2303 	strd	r2, r3, [sp, #12]
    struct tfm_sfn_req_s desc={0};
 c018884:	2214      	movs	r2, #20
 c018886:	4674      	mov	r4, lr
    int32_t args[4] = {arg1, arg2, arg3, arg4};
 c018888:	e9cd 0101 	strd	r0, r1, [sp, #4]
    struct tfm_sfn_req_s desc={0};
 c01888c:	2100      	movs	r1, #0
 c01888e:	eb0d 0002 	add.w	r0, sp, r2
 c018892:	f7fc f898 	bl	c0149c6 <memset>
    desc.sfn = (sfn_t)fn;
 c018896:	4b25      	ldr	r3, [pc, #148]	; (c01892c <__acle_se_tfm_psa_call_veneer+0xb0>)
 c018898:	f014 0f01 	tst.w	r4, #1
 c01889c:	9306      	str	r3, [sp, #24]
    desc.args = args;
 c01889e:	ab01      	add	r3, sp, #4
 c0188a0:	9307      	str	r3, [sp, #28]
 c0188a2:	bf0c      	ite	eq
 c0188a4:	2301      	moveq	r3, #1
 c0188a6:	2300      	movne	r3, #0
    desc.ns_caller = cmse_nonsecure_caller() ;
 c0188a8:	9309      	str	r3, [sp, #36]	; 0x24
 c0188aa:	f3ef 8305 	mrs	r3, IPSR
 c0188ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (__get_active_exc_num() != EXC_NUM_THREAD_MODE)
 c0188b2:	bbc3      	cbnz	r3, c018926 <__acle_se_tfm_psa_call_veneer+0xaa>
        return tfm_core_ipc_request(&desc);
 c0188b4:	a805      	add	r0, sp, #20
 c0188b6:	f7ff fed1 	bl	c01865c <tfm_core_ipc_request>
    TFM_CORE_NS_IPC_REQUEST_VENEER((void *) tfm_svcall_psa_call, handle, type,
                                   in_vecs, out_vecs);
}
 c0188ba:	b00a      	add	sp, #40	; 0x28
 c0188bc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0188c0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0188c4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0188c8:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0188cc:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0188d0:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0188d4:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0188d8:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0188dc:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0188e0:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0188e4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0188e8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0188ec:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0188f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0188f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0188f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c0188fc:	4671      	mov	r1, lr
 c0188fe:	4672      	mov	r2, lr
 c018900:	4673      	mov	r3, lr
 c018902:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c018906:	f38e 8c00 	msr	CPSR_fs, lr
 c01890a:	b410      	push	{r4}
 c01890c:	eef1 ca10 	vmrs	ip, fpscr
 c018910:	f64f 7460 	movw	r4, #65376	; 0xff60
 c018914:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c018918:	ea0c 0c04 	and.w	ip, ip, r4
 c01891c:	eee1 ca10 	vmsr	fpscr, ip
 c018920:	bc10      	pop	{r4}
 c018922:	46f4      	mov	ip, lr
 c018924:	4774      	bxns	lr
        return TFM_ERROR_INVALID_EXC_MODE;
 c018926:	2008      	movs	r0, #8
    TFM_CORE_NS_IPC_REQUEST_VENEER((void *) tfm_svcall_psa_call, handle, type,
 c018928:	e7c7      	b.n	c0188ba <__acle_se_tfm_psa_call_veneer+0x3e>
 c01892a:	bf00      	nop
 c01892c:	0c0321ed 	.word	0x0c0321ed

0c018930 <__acle_se_tfm_psa_close_veneer>:
    struct tfm_sfn_req_s desc={0};
 c018930:	2214      	movs	r2, #20
    int32_t args[4] = {arg1, arg2, arg3, arg4};
 c018932:	2100      	movs	r1, #0

__tfm_secure_gateway_attributes__
psa_status_t tfm_psa_close_veneer(psa_handle_t handle)
{
 c018934:	b510      	push	{r4, lr}
 c018936:	4674      	mov	r4, lr
 c018938:	b08a      	sub	sp, #40	; 0x28
    int32_t args[4] = {arg1, arg2, arg3, arg4};
 c01893a:	9001      	str	r0, [sp, #4]
    struct tfm_sfn_req_s desc={0};
 c01893c:	eb0d 0002 	add.w	r0, sp, r2
    int32_t args[4] = {arg1, arg2, arg3, arg4};
 c018940:	e9cd 1102 	strd	r1, r1, [sp, #8]
 c018944:	9104      	str	r1, [sp, #16]
    struct tfm_sfn_req_s desc={0};
 c018946:	f7fc f83e 	bl	c0149c6 <memset>
    desc.sfn = (sfn_t)fn;
 c01894a:	4b25      	ldr	r3, [pc, #148]	; (c0189e0 <__acle_se_tfm_psa_close_veneer+0xb0>)
 c01894c:	f014 0f01 	tst.w	r4, #1
 c018950:	9306      	str	r3, [sp, #24]
    desc.args = args;
 c018952:	ab01      	add	r3, sp, #4
 c018954:	9307      	str	r3, [sp, #28]
 c018956:	bf0c      	ite	eq
 c018958:	2301      	moveq	r3, #1
 c01895a:	2300      	movne	r3, #0
    desc.ns_caller = cmse_nonsecure_caller() ;
 c01895c:	9309      	str	r3, [sp, #36]	; 0x24
 c01895e:	f3ef 8305 	mrs	r3, IPSR
 c018962:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (__get_active_exc_num() != EXC_NUM_THREAD_MODE)
 c018966:	bbc3      	cbnz	r3, c0189da <__acle_se_tfm_psa_close_veneer+0xaa>
        return tfm_core_ipc_request(&desc);
 c018968:	a805      	add	r0, sp, #20
 c01896a:	f7ff fe77 	bl	c01865c <tfm_core_ipc_request>
    TFM_CORE_NS_IPC_REQUEST_VENEER((void *) tfm_svcall_psa_close, handle, 0, 0,
                                   0);
}
 c01896e:	b00a      	add	sp, #40	; 0x28
 c018970:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c018974:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c018978:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c01897c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c018980:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c018984:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c018988:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c01898c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c018990:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c018994:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c018998:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c01899c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0189a0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0189a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0189a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0189ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c0189b0:	4671      	mov	r1, lr
 c0189b2:	4672      	mov	r2, lr
 c0189b4:	4673      	mov	r3, lr
 c0189b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0189ba:	f38e 8c00 	msr	CPSR_fs, lr
 c0189be:	b410      	push	{r4}
 c0189c0:	eef1 ca10 	vmrs	ip, fpscr
 c0189c4:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0189c8:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0189cc:	ea0c 0c04 	and.w	ip, ip, r4
 c0189d0:	eee1 ca10 	vmsr	fpscr, ip
 c0189d4:	bc10      	pop	{r4}
 c0189d6:	46f4      	mov	ip, lr
 c0189d8:	4774      	bxns	lr
        return TFM_ERROR_INVALID_EXC_MODE;
 c0189da:	2008      	movs	r0, #8
    TFM_CORE_NS_IPC_REQUEST_VENEER((void *) tfm_svcall_psa_close, handle, 0, 0,
 c0189dc:	e7c7      	b.n	c01896e <__acle_se_tfm_psa_close_veneer+0x3e>
 c0189de:	bf00      	nop
 c0189e0:	0c0323a9 	.word	0x0c0323a9

0c0189e4 <exit_zone>:
 c0189e4:	df0f      	svc	15
 c0189e6:	e7fe      	b.n	c0189e6 <exit_zone+0x2>

0c0189e8 <tfm_thrd_exit>:
}

__attribute__((section("SFN")))
void tfm_thrd_exit(void)
{
    SVC(TFM_SVC_EXIT_THRD);
 c0189e8:	df0f      	svc	15
 c0189ea:	e7fe      	b.n	c0189ea <tfm_thrd_exit+0x2>

0c0189ec <cmse_check_address_range>:
 c0189ec:	43c3      	mvns	r3, r0
 c0189ee:	428b      	cmp	r3, r1
 c0189f0:	d36d      	bcc.n	c018ace <cmse_check_address_range+0xe2>
 c0189f2:	f032 031f 	bics.w	r3, r2, #31
 c0189f6:	d16a      	bne.n	c018ace <cmse_check_address_range+0xe2>
 c0189f8:	3901      	subs	r1, #1
 c0189fa:	f002 0314 	and.w	r3, r2, #20
 c0189fe:	4401      	add	r1, r0
 c018a00:	b410      	push	{r4}
 c018a02:	ea81 0400 	eor.w	r4, r1, r0
 c018a06:	2b14      	cmp	r3, #20
 c018a08:	d80e      	bhi.n	c018a28 <cmse_check_address_range+0x3c>
 c018a0a:	e8df f003 	tbb	[pc, r3]
 c018a0e:	0d39      	.short	0x0d39
 c018a10:	0d420d0d 	.word	0x0d420d0d
 c018a14:	0d0d0d0d 	.word	0x0d0d0d0d
 c018a18:	0d0d0d0d 	.word	0x0d0d0d0d
 c018a1c:	0d4b0d0d 	.word	0x0d4b0d0d
 c018a20:	0d0d      	.short	0x0d0d
 c018a22:	11          	.byte	0x11
 c018a23:	00          	.byte	0x00
 c018a24:	029b      	lsls	r3, r3, #10
 c018a26:	d400      	bmi.n	c018a2a <cmse_check_address_range+0x3e>
 c018a28:	2000      	movs	r0, #0
 c018a2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 c018a2e:	4770      	bx	lr
 c018a30:	2c1f      	cmp	r4, #31
 c018a32:	e840 f3c0 	ttat	r3, r0
 c018a36:	d905      	bls.n	c018a44 <cmse_check_address_range+0x58>
 c018a38:	e841 f1c0 	ttat	r1, r1
 c018a3c:	461c      	mov	r4, r3
 c018a3e:	460b      	mov	r3, r1
 c018a40:	429c      	cmp	r4, r3
 c018a42:	d1f1      	bne.n	c018a28 <cmse_check_address_range+0x3c>
 c018a44:	f022 0214 	bic.w	r2, r2, #20
 c018a48:	3a01      	subs	r2, #1
 c018a4a:	2a0a      	cmp	r2, #10
 c018a4c:	d8ec      	bhi.n	c018a28 <cmse_check_address_range+0x3c>
 c018a4e:	a101      	add	r1, pc, #4	; (adr r1, c018a54 <cmse_check_address_range+0x68>)
 c018a50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 c018a54:	0c018ac9 	.word	0x0c018ac9
 c018a58:	0c018ac3 	.word	0x0c018ac3
 c018a5c:	0c018a25 	.word	0x0c018a25
 c018a60:	0c018a29 	.word	0x0c018a29
 c018a64:	0c018a29 	.word	0x0c018a29
 c018a68:	0c018a29 	.word	0x0c018a29
 c018a6c:	0c018a29 	.word	0x0c018a29
 c018a70:	0c018abd 	.word	0x0c018abd
 c018a74:	0c018ac9 	.word	0x0c018ac9
 c018a78:	0c018ab7 	.word	0x0c018ab7
 c018a7c:	0c018a25 	.word	0x0c018a25
 c018a80:	2c1f      	cmp	r4, #31
 c018a82:	e840 f300 	tt	r3, r0
 c018a86:	d9dd      	bls.n	c018a44 <cmse_check_address_range+0x58>
 c018a88:	e841 f100 	tt	r1, r1
 c018a8c:	461c      	mov	r4, r3
 c018a8e:	460b      	mov	r3, r1
 c018a90:	e7d6      	b.n	c018a40 <cmse_check_address_range+0x54>
 c018a92:	2c1f      	cmp	r4, #31
 c018a94:	e840 f340 	ttt	r3, r0
 c018a98:	d9d4      	bls.n	c018a44 <cmse_check_address_range+0x58>
 c018a9a:	e841 f140 	ttt	r1, r1
 c018a9e:	461c      	mov	r4, r3
 c018aa0:	460b      	mov	r3, r1
 c018aa2:	e7cd      	b.n	c018a40 <cmse_check_address_range+0x54>
 c018aa4:	2c1f      	cmp	r4, #31
 c018aa6:	e840 f380 	tta	r3, r0
 c018aaa:	d9cb      	bls.n	c018a44 <cmse_check_address_range+0x58>
 c018aac:	e841 f180 	tta	r1, r1
 c018ab0:	461c      	mov	r4, r3
 c018ab2:	460b      	mov	r3, r1
 c018ab4:	e7c4      	b.n	c018a40 <cmse_check_address_range+0x54>
 c018ab6:	02dc      	lsls	r4, r3, #11
 c018ab8:	d4b7      	bmi.n	c018a2a <cmse_check_address_range+0x3e>
 c018aba:	e7b5      	b.n	c018a28 <cmse_check_address_range+0x3c>
 c018abc:	035b      	lsls	r3, r3, #13
 c018abe:	d5b3      	bpl.n	c018a28 <cmse_check_address_range+0x3c>
 c018ac0:	e7b3      	b.n	c018a2a <cmse_check_address_range+0x3e>
 c018ac2:	0259      	lsls	r1, r3, #9
 c018ac4:	d5b1      	bpl.n	c018a2a <cmse_check_address_range+0x3e>
 c018ac6:	e7af      	b.n	c018a28 <cmse_check_address_range+0x3c>
 c018ac8:	031a      	lsls	r2, r3, #12
 c018aca:	d4ae      	bmi.n	c018a2a <cmse_check_address_range+0x3e>
 c018acc:	e7ac      	b.n	c018a28 <cmse_check_address_range+0x3c>
 c018ace:	2000      	movs	r0, #0
 c018ad0:	4770      	bx	lr
 c018ad2:	bf00      	nop

0c018ad4 <__gnu_cmse_nonsecure_call>:
 c018ad4:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c018ad8:	4627      	mov	r7, r4
 c018ada:	46a0      	mov	r8, r4
 c018adc:	46a1      	mov	r9, r4
 c018ade:	46a2      	mov	sl, r4
 c018ae0:	46a3      	mov	fp, r4
 c018ae2:	46a4      	mov	ip, r4
 c018ae4:	b0a2      	sub	sp, #136	; 0x88
 c018ae6:	ec2d 0a00 	vlstm	sp
 c018aea:	f384 8800 	msr	CPSR_f, r4
 c018aee:	4625      	mov	r5, r4
 c018af0:	4626      	mov	r6, r4
 c018af2:	47a4      	blxns	r4
 c018af4:	ec3d 0a00 	vlldm	sp
 c018af8:	b022      	add	sp, #136	; 0x88
 c018afa:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}
	...

0c018b00 <__aeabi_drsub>:
 c018b00:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 c018b04:	e002      	b.n	c018b0c <__adddf3>
 c018b06:	bf00      	nop

0c018b08 <__aeabi_dsub>:
 c018b08:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0c018b0c <__adddf3>:
 c018b0c:	b530      	push	{r4, r5, lr}
 c018b0e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 c018b12:	ea4f 0543 	mov.w	r5, r3, lsl #1
 c018b16:	ea94 0f05 	teq	r4, r5
 c018b1a:	bf08      	it	eq
 c018b1c:	ea90 0f02 	teqeq	r0, r2
 c018b20:	bf1f      	itttt	ne
 c018b22:	ea54 0c00 	orrsne.w	ip, r4, r0
 c018b26:	ea55 0c02 	orrsne.w	ip, r5, r2
 c018b2a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 c018b2e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 c018b32:	f000 80e2 	beq.w	c018cfa <__adddf3+0x1ee>
 c018b36:	ea4f 5454 	mov.w	r4, r4, lsr #21
 c018b3a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 c018b3e:	bfb8      	it	lt
 c018b40:	426d      	neglt	r5, r5
 c018b42:	dd0c      	ble.n	c018b5e <__adddf3+0x52>
 c018b44:	442c      	add	r4, r5
 c018b46:	ea80 0202 	eor.w	r2, r0, r2
 c018b4a:	ea81 0303 	eor.w	r3, r1, r3
 c018b4e:	ea82 0000 	eor.w	r0, r2, r0
 c018b52:	ea83 0101 	eor.w	r1, r3, r1
 c018b56:	ea80 0202 	eor.w	r2, r0, r2
 c018b5a:	ea81 0303 	eor.w	r3, r1, r3
 c018b5e:	2d36      	cmp	r5, #54	; 0x36
 c018b60:	bf88      	it	hi
 c018b62:	bd30      	pophi	{r4, r5, pc}
 c018b64:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 c018b68:	ea4f 3101 	mov.w	r1, r1, lsl #12
 c018b6c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 c018b70:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 c018b74:	d002      	beq.n	c018b7c <__adddf3+0x70>
 c018b76:	4240      	negs	r0, r0
 c018b78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 c018b7c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 c018b80:	ea4f 3303 	mov.w	r3, r3, lsl #12
 c018b84:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 c018b88:	d002      	beq.n	c018b90 <__adddf3+0x84>
 c018b8a:	4252      	negs	r2, r2
 c018b8c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 c018b90:	ea94 0f05 	teq	r4, r5
 c018b94:	f000 80a7 	beq.w	c018ce6 <__adddf3+0x1da>
 c018b98:	f1a4 0401 	sub.w	r4, r4, #1
 c018b9c:	f1d5 0e20 	rsbs	lr, r5, #32
 c018ba0:	db0d      	blt.n	c018bbe <__adddf3+0xb2>
 c018ba2:	fa02 fc0e 	lsl.w	ip, r2, lr
 c018ba6:	fa22 f205 	lsr.w	r2, r2, r5
 c018baa:	1880      	adds	r0, r0, r2
 c018bac:	f141 0100 	adc.w	r1, r1, #0
 c018bb0:	fa03 f20e 	lsl.w	r2, r3, lr
 c018bb4:	1880      	adds	r0, r0, r2
 c018bb6:	fa43 f305 	asr.w	r3, r3, r5
 c018bba:	4159      	adcs	r1, r3
 c018bbc:	e00e      	b.n	c018bdc <__adddf3+0xd0>
 c018bbe:	f1a5 0520 	sub.w	r5, r5, #32
 c018bc2:	f10e 0e20 	add.w	lr, lr, #32
 c018bc6:	2a01      	cmp	r2, #1
 c018bc8:	fa03 fc0e 	lsl.w	ip, r3, lr
 c018bcc:	bf28      	it	cs
 c018bce:	f04c 0c02 	orrcs.w	ip, ip, #2
 c018bd2:	fa43 f305 	asr.w	r3, r3, r5
 c018bd6:	18c0      	adds	r0, r0, r3
 c018bd8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 c018bdc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 c018be0:	d507      	bpl.n	c018bf2 <__adddf3+0xe6>
 c018be2:	f04f 0e00 	mov.w	lr, #0
 c018be6:	f1dc 0c00 	rsbs	ip, ip, #0
 c018bea:	eb7e 0000 	sbcs.w	r0, lr, r0
 c018bee:	eb6e 0101 	sbc.w	r1, lr, r1
 c018bf2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 c018bf6:	d31b      	bcc.n	c018c30 <__adddf3+0x124>
 c018bf8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 c018bfc:	d30c      	bcc.n	c018c18 <__adddf3+0x10c>
 c018bfe:	0849      	lsrs	r1, r1, #1
 c018c00:	ea5f 0030 	movs.w	r0, r0, rrx
 c018c04:	ea4f 0c3c 	mov.w	ip, ip, rrx
 c018c08:	f104 0401 	add.w	r4, r4, #1
 c018c0c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 c018c10:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 c018c14:	f080 809a 	bcs.w	c018d4c <__adddf3+0x240>
 c018c18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 c018c1c:	bf08      	it	eq
 c018c1e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 c018c22:	f150 0000 	adcs.w	r0, r0, #0
 c018c26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 c018c2a:	ea41 0105 	orr.w	r1, r1, r5
 c018c2e:	bd30      	pop	{r4, r5, pc}
 c018c30:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 c018c34:	4140      	adcs	r0, r0
 c018c36:	eb41 0101 	adc.w	r1, r1, r1
 c018c3a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 c018c3e:	f1a4 0401 	sub.w	r4, r4, #1
 c018c42:	d1e9      	bne.n	c018c18 <__adddf3+0x10c>
 c018c44:	f091 0f00 	teq	r1, #0
 c018c48:	bf04      	itt	eq
 c018c4a:	4601      	moveq	r1, r0
 c018c4c:	2000      	moveq	r0, #0
 c018c4e:	fab1 f381 	clz	r3, r1
 c018c52:	bf08      	it	eq
 c018c54:	3320      	addeq	r3, #32
 c018c56:	f1a3 030b 	sub.w	r3, r3, #11
 c018c5a:	f1b3 0220 	subs.w	r2, r3, #32
 c018c5e:	da0c      	bge.n	c018c7a <__adddf3+0x16e>
 c018c60:	320c      	adds	r2, #12
 c018c62:	dd08      	ble.n	c018c76 <__adddf3+0x16a>
 c018c64:	f102 0c14 	add.w	ip, r2, #20
 c018c68:	f1c2 020c 	rsb	r2, r2, #12
 c018c6c:	fa01 f00c 	lsl.w	r0, r1, ip
 c018c70:	fa21 f102 	lsr.w	r1, r1, r2
 c018c74:	e00c      	b.n	c018c90 <__adddf3+0x184>
 c018c76:	f102 0214 	add.w	r2, r2, #20
 c018c7a:	bfd8      	it	le
 c018c7c:	f1c2 0c20 	rsble	ip, r2, #32
 c018c80:	fa01 f102 	lsl.w	r1, r1, r2
 c018c84:	fa20 fc0c 	lsr.w	ip, r0, ip
 c018c88:	bfdc      	itt	le
 c018c8a:	ea41 010c 	orrle.w	r1, r1, ip
 c018c8e:	4090      	lslle	r0, r2
 c018c90:	1ae4      	subs	r4, r4, r3
 c018c92:	bfa2      	ittt	ge
 c018c94:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 c018c98:	4329      	orrge	r1, r5
 c018c9a:	bd30      	popge	{r4, r5, pc}
 c018c9c:	ea6f 0404 	mvn.w	r4, r4
 c018ca0:	3c1f      	subs	r4, #31
 c018ca2:	da1c      	bge.n	c018cde <__adddf3+0x1d2>
 c018ca4:	340c      	adds	r4, #12
 c018ca6:	dc0e      	bgt.n	c018cc6 <__adddf3+0x1ba>
 c018ca8:	f104 0414 	add.w	r4, r4, #20
 c018cac:	f1c4 0220 	rsb	r2, r4, #32
 c018cb0:	fa20 f004 	lsr.w	r0, r0, r4
 c018cb4:	fa01 f302 	lsl.w	r3, r1, r2
 c018cb8:	ea40 0003 	orr.w	r0, r0, r3
 c018cbc:	fa21 f304 	lsr.w	r3, r1, r4
 c018cc0:	ea45 0103 	orr.w	r1, r5, r3
 c018cc4:	bd30      	pop	{r4, r5, pc}
 c018cc6:	f1c4 040c 	rsb	r4, r4, #12
 c018cca:	f1c4 0220 	rsb	r2, r4, #32
 c018cce:	fa20 f002 	lsr.w	r0, r0, r2
 c018cd2:	fa01 f304 	lsl.w	r3, r1, r4
 c018cd6:	ea40 0003 	orr.w	r0, r0, r3
 c018cda:	4629      	mov	r1, r5
 c018cdc:	bd30      	pop	{r4, r5, pc}
 c018cde:	fa21 f004 	lsr.w	r0, r1, r4
 c018ce2:	4629      	mov	r1, r5
 c018ce4:	bd30      	pop	{r4, r5, pc}
 c018ce6:	f094 0f00 	teq	r4, #0
 c018cea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 c018cee:	bf06      	itte	eq
 c018cf0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 c018cf4:	3401      	addeq	r4, #1
 c018cf6:	3d01      	subne	r5, #1
 c018cf8:	e74e      	b.n	c018b98 <__adddf3+0x8c>
 c018cfa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 c018cfe:	bf18      	it	ne
 c018d00:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 c018d04:	d029      	beq.n	c018d5a <__adddf3+0x24e>
 c018d06:	ea94 0f05 	teq	r4, r5
 c018d0a:	bf08      	it	eq
 c018d0c:	ea90 0f02 	teqeq	r0, r2
 c018d10:	d005      	beq.n	c018d1e <__adddf3+0x212>
 c018d12:	ea54 0c00 	orrs.w	ip, r4, r0
 c018d16:	bf04      	itt	eq
 c018d18:	4619      	moveq	r1, r3
 c018d1a:	4610      	moveq	r0, r2
 c018d1c:	bd30      	pop	{r4, r5, pc}
 c018d1e:	ea91 0f03 	teq	r1, r3
 c018d22:	bf1e      	ittt	ne
 c018d24:	2100      	movne	r1, #0
 c018d26:	2000      	movne	r0, #0
 c018d28:	bd30      	popne	{r4, r5, pc}
 c018d2a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 c018d2e:	d105      	bne.n	c018d3c <__adddf3+0x230>
 c018d30:	0040      	lsls	r0, r0, #1
 c018d32:	4149      	adcs	r1, r1
 c018d34:	bf28      	it	cs
 c018d36:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 c018d3a:	bd30      	pop	{r4, r5, pc}
 c018d3c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 c018d40:	bf3c      	itt	cc
 c018d42:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 c018d46:	bd30      	popcc	{r4, r5, pc}
 c018d48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 c018d4c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 c018d50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 c018d54:	f04f 0000 	mov.w	r0, #0
 c018d58:	bd30      	pop	{r4, r5, pc}
 c018d5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 c018d5e:	bf1a      	itte	ne
 c018d60:	4619      	movne	r1, r3
 c018d62:	4610      	movne	r0, r2
 c018d64:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 c018d68:	bf1c      	itt	ne
 c018d6a:	460b      	movne	r3, r1
 c018d6c:	4602      	movne	r2, r0
 c018d6e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 c018d72:	bf06      	itte	eq
 c018d74:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 c018d78:	ea91 0f03 	teqeq	r1, r3
 c018d7c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 c018d80:	bd30      	pop	{r4, r5, pc}
 c018d82:	bf00      	nop

0c018d84 <__aeabi_ui2d>:
 c018d84:	f090 0f00 	teq	r0, #0
 c018d88:	bf04      	itt	eq
 c018d8a:	2100      	moveq	r1, #0
 c018d8c:	4770      	bxeq	lr
 c018d8e:	b530      	push	{r4, r5, lr}
 c018d90:	f44f 6480 	mov.w	r4, #1024	; 0x400
 c018d94:	f104 0432 	add.w	r4, r4, #50	; 0x32
 c018d98:	f04f 0500 	mov.w	r5, #0
 c018d9c:	f04f 0100 	mov.w	r1, #0
 c018da0:	e750      	b.n	c018c44 <__adddf3+0x138>
 c018da2:	bf00      	nop

0c018da4 <__aeabi_i2d>:
 c018da4:	f090 0f00 	teq	r0, #0
 c018da8:	bf04      	itt	eq
 c018daa:	2100      	moveq	r1, #0
 c018dac:	4770      	bxeq	lr
 c018dae:	b530      	push	{r4, r5, lr}
 c018db0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 c018db4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 c018db8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 c018dbc:	bf48      	it	mi
 c018dbe:	4240      	negmi	r0, r0
 c018dc0:	f04f 0100 	mov.w	r1, #0
 c018dc4:	e73e      	b.n	c018c44 <__adddf3+0x138>
 c018dc6:	bf00      	nop

0c018dc8 <__aeabi_f2d>:
 c018dc8:	0042      	lsls	r2, r0, #1
 c018dca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 c018dce:	ea4f 0131 	mov.w	r1, r1, rrx
 c018dd2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 c018dd6:	bf1f      	itttt	ne
 c018dd8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 c018ddc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 c018de0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 c018de4:	4770      	bxne	lr
 c018de6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 c018dea:	bf08      	it	eq
 c018dec:	4770      	bxeq	lr
 c018dee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 c018df2:	bf04      	itt	eq
 c018df4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 c018df8:	4770      	bxeq	lr
 c018dfa:	b530      	push	{r4, r5, lr}
 c018dfc:	f44f 7460 	mov.w	r4, #896	; 0x380
 c018e00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 c018e04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 c018e08:	e71c      	b.n	c018c44 <__adddf3+0x138>
 c018e0a:	bf00      	nop

0c018e0c <__aeabi_ul2d>:
 c018e0c:	ea50 0201 	orrs.w	r2, r0, r1
 c018e10:	bf08      	it	eq
 c018e12:	4770      	bxeq	lr
 c018e14:	b530      	push	{r4, r5, lr}
 c018e16:	f04f 0500 	mov.w	r5, #0
 c018e1a:	e00a      	b.n	c018e32 <__aeabi_l2d+0x16>

0c018e1c <__aeabi_l2d>:
 c018e1c:	ea50 0201 	orrs.w	r2, r0, r1
 c018e20:	bf08      	it	eq
 c018e22:	4770      	bxeq	lr
 c018e24:	b530      	push	{r4, r5, lr}
 c018e26:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 c018e2a:	d502      	bpl.n	c018e32 <__aeabi_l2d+0x16>
 c018e2c:	4240      	negs	r0, r0
 c018e2e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 c018e32:	f44f 6480 	mov.w	r4, #1024	; 0x400
 c018e36:	f104 0432 	add.w	r4, r4, #50	; 0x32
 c018e3a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 c018e3e:	f43f aed8 	beq.w	c018bf2 <__adddf3+0xe6>
 c018e42:	f04f 0203 	mov.w	r2, #3
 c018e46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 c018e4a:	bf18      	it	ne
 c018e4c:	3203      	addne	r2, #3
 c018e4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 c018e52:	bf18      	it	ne
 c018e54:	3203      	addne	r2, #3
 c018e56:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 c018e5a:	f1c2 0320 	rsb	r3, r2, #32
 c018e5e:	fa00 fc03 	lsl.w	ip, r0, r3
 c018e62:	fa20 f002 	lsr.w	r0, r0, r2
 c018e66:	fa01 fe03 	lsl.w	lr, r1, r3
 c018e6a:	ea40 000e 	orr.w	r0, r0, lr
 c018e6e:	fa21 f102 	lsr.w	r1, r1, r2
 c018e72:	4414      	add	r4, r2
 c018e74:	e6bd      	b.n	c018bf2 <__adddf3+0xe6>
 c018e76:	bf00      	nop

0c018e78 <__aeabi_dmul>:
 c018e78:	b570      	push	{r4, r5, r6, lr}
 c018e7a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 c018e7e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 c018e82:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 c018e86:	bf1d      	ittte	ne
 c018e88:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 c018e8c:	ea94 0f0c 	teqne	r4, ip
 c018e90:	ea95 0f0c 	teqne	r5, ip
 c018e94:	f000 f8de 	bleq	c019054 <__aeabi_dmul+0x1dc>
 c018e98:	442c      	add	r4, r5
 c018e9a:	ea81 0603 	eor.w	r6, r1, r3
 c018e9e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 c018ea2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 c018ea6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 c018eaa:	bf18      	it	ne
 c018eac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 c018eb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 c018eb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c018eb8:	d038      	beq.n	c018f2c <__aeabi_dmul+0xb4>
 c018eba:	fba0 ce02 	umull	ip, lr, r0, r2
 c018ebe:	f04f 0500 	mov.w	r5, #0
 c018ec2:	fbe1 e502 	umlal	lr, r5, r1, r2
 c018ec6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 c018eca:	fbe0 e503 	umlal	lr, r5, r0, r3
 c018ece:	f04f 0600 	mov.w	r6, #0
 c018ed2:	fbe1 5603 	umlal	r5, r6, r1, r3
 c018ed6:	f09c 0f00 	teq	ip, #0
 c018eda:	bf18      	it	ne
 c018edc:	f04e 0e01 	orrne.w	lr, lr, #1
 c018ee0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 c018ee4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 c018ee8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 c018eec:	d204      	bcs.n	c018ef8 <__aeabi_dmul+0x80>
 c018eee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 c018ef2:	416d      	adcs	r5, r5
 c018ef4:	eb46 0606 	adc.w	r6, r6, r6
 c018ef8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 c018efc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 c018f00:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 c018f04:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 c018f08:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 c018f0c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 c018f10:	bf88      	it	hi
 c018f12:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 c018f16:	d81e      	bhi.n	c018f56 <__aeabi_dmul+0xde>
 c018f18:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 c018f1c:	bf08      	it	eq
 c018f1e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 c018f22:	f150 0000 	adcs.w	r0, r0, #0
 c018f26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 c018f2a:	bd70      	pop	{r4, r5, r6, pc}
 c018f2c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 c018f30:	ea46 0101 	orr.w	r1, r6, r1
 c018f34:	ea40 0002 	orr.w	r0, r0, r2
 c018f38:	ea81 0103 	eor.w	r1, r1, r3
 c018f3c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 c018f40:	bfc2      	ittt	gt
 c018f42:	ebd4 050c 	rsbsgt	r5, r4, ip
 c018f46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 c018f4a:	bd70      	popgt	{r4, r5, r6, pc}
 c018f4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 c018f50:	f04f 0e00 	mov.w	lr, #0
 c018f54:	3c01      	subs	r4, #1
 c018f56:	f300 80ab 	bgt.w	c0190b0 <__aeabi_dmul+0x238>
 c018f5a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 c018f5e:	bfde      	ittt	le
 c018f60:	2000      	movle	r0, #0
 c018f62:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 c018f66:	bd70      	pople	{r4, r5, r6, pc}
 c018f68:	f1c4 0400 	rsb	r4, r4, #0
 c018f6c:	3c20      	subs	r4, #32
 c018f6e:	da35      	bge.n	c018fdc <__aeabi_dmul+0x164>
 c018f70:	340c      	adds	r4, #12
 c018f72:	dc1b      	bgt.n	c018fac <__aeabi_dmul+0x134>
 c018f74:	f104 0414 	add.w	r4, r4, #20
 c018f78:	f1c4 0520 	rsb	r5, r4, #32
 c018f7c:	fa00 f305 	lsl.w	r3, r0, r5
 c018f80:	fa20 f004 	lsr.w	r0, r0, r4
 c018f84:	fa01 f205 	lsl.w	r2, r1, r5
 c018f88:	ea40 0002 	orr.w	r0, r0, r2
 c018f8c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 c018f90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 c018f94:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 c018f98:	fa21 f604 	lsr.w	r6, r1, r4
 c018f9c:	eb42 0106 	adc.w	r1, r2, r6
 c018fa0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 c018fa4:	bf08      	it	eq
 c018fa6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 c018faa:	bd70      	pop	{r4, r5, r6, pc}
 c018fac:	f1c4 040c 	rsb	r4, r4, #12
 c018fb0:	f1c4 0520 	rsb	r5, r4, #32
 c018fb4:	fa00 f304 	lsl.w	r3, r0, r4
 c018fb8:	fa20 f005 	lsr.w	r0, r0, r5
 c018fbc:	fa01 f204 	lsl.w	r2, r1, r4
 c018fc0:	ea40 0002 	orr.w	r0, r0, r2
 c018fc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 c018fc8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 c018fcc:	f141 0100 	adc.w	r1, r1, #0
 c018fd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 c018fd4:	bf08      	it	eq
 c018fd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 c018fda:	bd70      	pop	{r4, r5, r6, pc}
 c018fdc:	f1c4 0520 	rsb	r5, r4, #32
 c018fe0:	fa00 f205 	lsl.w	r2, r0, r5
 c018fe4:	ea4e 0e02 	orr.w	lr, lr, r2
 c018fe8:	fa20 f304 	lsr.w	r3, r0, r4
 c018fec:	fa01 f205 	lsl.w	r2, r1, r5
 c018ff0:	ea43 0302 	orr.w	r3, r3, r2
 c018ff4:	fa21 f004 	lsr.w	r0, r1, r4
 c018ff8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 c018ffc:	fa21 f204 	lsr.w	r2, r1, r4
 c019000:	ea20 0002 	bic.w	r0, r0, r2
 c019004:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 c019008:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 c01900c:	bf08      	it	eq
 c01900e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 c019012:	bd70      	pop	{r4, r5, r6, pc}
 c019014:	f094 0f00 	teq	r4, #0
 c019018:	d10f      	bne.n	c01903a <__aeabi_dmul+0x1c2>
 c01901a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 c01901e:	0040      	lsls	r0, r0, #1
 c019020:	eb41 0101 	adc.w	r1, r1, r1
 c019024:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 c019028:	bf08      	it	eq
 c01902a:	3c01      	subeq	r4, #1
 c01902c:	d0f7      	beq.n	c01901e <__aeabi_dmul+0x1a6>
 c01902e:	ea41 0106 	orr.w	r1, r1, r6
 c019032:	f095 0f00 	teq	r5, #0
 c019036:	bf18      	it	ne
 c019038:	4770      	bxne	lr
 c01903a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 c01903e:	0052      	lsls	r2, r2, #1
 c019040:	eb43 0303 	adc.w	r3, r3, r3
 c019044:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 c019048:	bf08      	it	eq
 c01904a:	3d01      	subeq	r5, #1
 c01904c:	d0f7      	beq.n	c01903e <__aeabi_dmul+0x1c6>
 c01904e:	ea43 0306 	orr.w	r3, r3, r6
 c019052:	4770      	bx	lr
 c019054:	ea94 0f0c 	teq	r4, ip
 c019058:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 c01905c:	bf18      	it	ne
 c01905e:	ea95 0f0c 	teqne	r5, ip
 c019062:	d00c      	beq.n	c01907e <__aeabi_dmul+0x206>
 c019064:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 c019068:	bf18      	it	ne
 c01906a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 c01906e:	d1d1      	bne.n	c019014 <__aeabi_dmul+0x19c>
 c019070:	ea81 0103 	eor.w	r1, r1, r3
 c019074:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 c019078:	f04f 0000 	mov.w	r0, #0
 c01907c:	bd70      	pop	{r4, r5, r6, pc}
 c01907e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 c019082:	bf06      	itte	eq
 c019084:	4610      	moveq	r0, r2
 c019086:	4619      	moveq	r1, r3
 c019088:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 c01908c:	d019      	beq.n	c0190c2 <__aeabi_dmul+0x24a>
 c01908e:	ea94 0f0c 	teq	r4, ip
 c019092:	d102      	bne.n	c01909a <__aeabi_dmul+0x222>
 c019094:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 c019098:	d113      	bne.n	c0190c2 <__aeabi_dmul+0x24a>
 c01909a:	ea95 0f0c 	teq	r5, ip
 c01909e:	d105      	bne.n	c0190ac <__aeabi_dmul+0x234>
 c0190a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 c0190a4:	bf1c      	itt	ne
 c0190a6:	4610      	movne	r0, r2
 c0190a8:	4619      	movne	r1, r3
 c0190aa:	d10a      	bne.n	c0190c2 <__aeabi_dmul+0x24a>
 c0190ac:	ea81 0103 	eor.w	r1, r1, r3
 c0190b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 c0190b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 c0190b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 c0190bc:	f04f 0000 	mov.w	r0, #0
 c0190c0:	bd70      	pop	{r4, r5, r6, pc}
 c0190c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 c0190c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 c0190ca:	bd70      	pop	{r4, r5, r6, pc}

0c0190cc <__aeabi_ddiv>:
 c0190cc:	b570      	push	{r4, r5, r6, lr}
 c0190ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 c0190d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 c0190d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 c0190da:	bf1d      	ittte	ne
 c0190dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 c0190e0:	ea94 0f0c 	teqne	r4, ip
 c0190e4:	ea95 0f0c 	teqne	r5, ip
 c0190e8:	f000 f8a7 	bleq	c01923a <__aeabi_ddiv+0x16e>
 c0190ec:	eba4 0405 	sub.w	r4, r4, r5
 c0190f0:	ea81 0e03 	eor.w	lr, r1, r3
 c0190f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 c0190f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 c0190fc:	f000 8088 	beq.w	c019210 <__aeabi_ddiv+0x144>
 c019100:	ea4f 3303 	mov.w	r3, r3, lsl #12
 c019104:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 c019108:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 c01910c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 c019110:	ea4f 2202 	mov.w	r2, r2, lsl #8
 c019114:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 c019118:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 c01911c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 c019120:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 c019124:	429d      	cmp	r5, r3
 c019126:	bf08      	it	eq
 c019128:	4296      	cmpeq	r6, r2
 c01912a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 c01912e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 c019132:	d202      	bcs.n	c01913a <__aeabi_ddiv+0x6e>
 c019134:	085b      	lsrs	r3, r3, #1
 c019136:	ea4f 0232 	mov.w	r2, r2, rrx
 c01913a:	1ab6      	subs	r6, r6, r2
 c01913c:	eb65 0503 	sbc.w	r5, r5, r3
 c019140:	085b      	lsrs	r3, r3, #1
 c019142:	ea4f 0232 	mov.w	r2, r2, rrx
 c019146:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 c01914a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 c01914e:	ebb6 0e02 	subs.w	lr, r6, r2
 c019152:	eb75 0e03 	sbcs.w	lr, r5, r3
 c019156:	bf22      	ittt	cs
 c019158:	1ab6      	subcs	r6, r6, r2
 c01915a:	4675      	movcs	r5, lr
 c01915c:	ea40 000c 	orrcs.w	r0, r0, ip
 c019160:	085b      	lsrs	r3, r3, #1
 c019162:	ea4f 0232 	mov.w	r2, r2, rrx
 c019166:	ebb6 0e02 	subs.w	lr, r6, r2
 c01916a:	eb75 0e03 	sbcs.w	lr, r5, r3
 c01916e:	bf22      	ittt	cs
 c019170:	1ab6      	subcs	r6, r6, r2
 c019172:	4675      	movcs	r5, lr
 c019174:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 c019178:	085b      	lsrs	r3, r3, #1
 c01917a:	ea4f 0232 	mov.w	r2, r2, rrx
 c01917e:	ebb6 0e02 	subs.w	lr, r6, r2
 c019182:	eb75 0e03 	sbcs.w	lr, r5, r3
 c019186:	bf22      	ittt	cs
 c019188:	1ab6      	subcs	r6, r6, r2
 c01918a:	4675      	movcs	r5, lr
 c01918c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 c019190:	085b      	lsrs	r3, r3, #1
 c019192:	ea4f 0232 	mov.w	r2, r2, rrx
 c019196:	ebb6 0e02 	subs.w	lr, r6, r2
 c01919a:	eb75 0e03 	sbcs.w	lr, r5, r3
 c01919e:	bf22      	ittt	cs
 c0191a0:	1ab6      	subcs	r6, r6, r2
 c0191a2:	4675      	movcs	r5, lr
 c0191a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 c0191a8:	ea55 0e06 	orrs.w	lr, r5, r6
 c0191ac:	d018      	beq.n	c0191e0 <__aeabi_ddiv+0x114>
 c0191ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 c0191b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 c0191b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 c0191ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 c0191be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 c0191c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 c0191c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 c0191ca:	d1c0      	bne.n	c01914e <__aeabi_ddiv+0x82>
 c0191cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 c0191d0:	d10b      	bne.n	c0191ea <__aeabi_ddiv+0x11e>
 c0191d2:	ea41 0100 	orr.w	r1, r1, r0
 c0191d6:	f04f 0000 	mov.w	r0, #0
 c0191da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 c0191de:	e7b6      	b.n	c01914e <__aeabi_ddiv+0x82>
 c0191e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 c0191e4:	bf04      	itt	eq
 c0191e6:	4301      	orreq	r1, r0
 c0191e8:	2000      	moveq	r0, #0
 c0191ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 c0191ee:	bf88      	it	hi
 c0191f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 c0191f4:	f63f aeaf 	bhi.w	c018f56 <__aeabi_dmul+0xde>
 c0191f8:	ebb5 0c03 	subs.w	ip, r5, r3
 c0191fc:	bf04      	itt	eq
 c0191fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 c019202:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 c019206:	f150 0000 	adcs.w	r0, r0, #0
 c01920a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 c01920e:	bd70      	pop	{r4, r5, r6, pc}
 c019210:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 c019214:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 c019218:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 c01921c:	bfc2      	ittt	gt
 c01921e:	ebd4 050c 	rsbsgt	r5, r4, ip
 c019222:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 c019226:	bd70      	popgt	{r4, r5, r6, pc}
 c019228:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 c01922c:	f04f 0e00 	mov.w	lr, #0
 c019230:	3c01      	subs	r4, #1
 c019232:	e690      	b.n	c018f56 <__aeabi_dmul+0xde>
 c019234:	ea45 0e06 	orr.w	lr, r5, r6
 c019238:	e68d      	b.n	c018f56 <__aeabi_dmul+0xde>
 c01923a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 c01923e:	ea94 0f0c 	teq	r4, ip
 c019242:	bf08      	it	eq
 c019244:	ea95 0f0c 	teqeq	r5, ip
 c019248:	f43f af3b 	beq.w	c0190c2 <__aeabi_dmul+0x24a>
 c01924c:	ea94 0f0c 	teq	r4, ip
 c019250:	d10a      	bne.n	c019268 <__aeabi_ddiv+0x19c>
 c019252:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 c019256:	f47f af34 	bne.w	c0190c2 <__aeabi_dmul+0x24a>
 c01925a:	ea95 0f0c 	teq	r5, ip
 c01925e:	f47f af25 	bne.w	c0190ac <__aeabi_dmul+0x234>
 c019262:	4610      	mov	r0, r2
 c019264:	4619      	mov	r1, r3
 c019266:	e72c      	b.n	c0190c2 <__aeabi_dmul+0x24a>
 c019268:	ea95 0f0c 	teq	r5, ip
 c01926c:	d106      	bne.n	c01927c <__aeabi_ddiv+0x1b0>
 c01926e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 c019272:	f43f aefd 	beq.w	c019070 <__aeabi_dmul+0x1f8>
 c019276:	4610      	mov	r0, r2
 c019278:	4619      	mov	r1, r3
 c01927a:	e722      	b.n	c0190c2 <__aeabi_dmul+0x24a>
 c01927c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 c019280:	bf18      	it	ne
 c019282:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 c019286:	f47f aec5 	bne.w	c019014 <__aeabi_dmul+0x19c>
 c01928a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 c01928e:	f47f af0d 	bne.w	c0190ac <__aeabi_dmul+0x234>
 c019292:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 c019296:	f47f aeeb 	bne.w	c019070 <__aeabi_dmul+0x1f8>
 c01929a:	e712      	b.n	c0190c2 <__aeabi_dmul+0x24a>

0c01929c <__gedf2>:
 c01929c:	f04f 3cff 	mov.w	ip, #4294967295
 c0192a0:	e006      	b.n	c0192b0 <__cmpdf2+0x4>
 c0192a2:	bf00      	nop

0c0192a4 <__ledf2>:
 c0192a4:	f04f 0c01 	mov.w	ip, #1
 c0192a8:	e002      	b.n	c0192b0 <__cmpdf2+0x4>
 c0192aa:	bf00      	nop

0c0192ac <__cmpdf2>:
 c0192ac:	f04f 0c01 	mov.w	ip, #1
 c0192b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 c0192b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 c0192b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 c0192bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 c0192c0:	bf18      	it	ne
 c0192c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 c0192c6:	d01b      	beq.n	c019300 <__cmpdf2+0x54>
 c0192c8:	b001      	add	sp, #4
 c0192ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 c0192ce:	bf0c      	ite	eq
 c0192d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 c0192d4:	ea91 0f03 	teqne	r1, r3
 c0192d8:	bf02      	ittt	eq
 c0192da:	ea90 0f02 	teqeq	r0, r2
 c0192de:	2000      	moveq	r0, #0
 c0192e0:	4770      	bxeq	lr
 c0192e2:	f110 0f00 	cmn.w	r0, #0
 c0192e6:	ea91 0f03 	teq	r1, r3
 c0192ea:	bf58      	it	pl
 c0192ec:	4299      	cmppl	r1, r3
 c0192ee:	bf08      	it	eq
 c0192f0:	4290      	cmpeq	r0, r2
 c0192f2:	bf2c      	ite	cs
 c0192f4:	17d8      	asrcs	r0, r3, #31
 c0192f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 c0192fa:	f040 0001 	orr.w	r0, r0, #1
 c0192fe:	4770      	bx	lr
 c019300:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 c019304:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 c019308:	d102      	bne.n	c019310 <__cmpdf2+0x64>
 c01930a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 c01930e:	d107      	bne.n	c019320 <__cmpdf2+0x74>
 c019310:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 c019314:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 c019318:	d1d6      	bne.n	c0192c8 <__cmpdf2+0x1c>
 c01931a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 c01931e:	d0d3      	beq.n	c0192c8 <__cmpdf2+0x1c>
 c019320:	f85d 0b04 	ldr.w	r0, [sp], #4
 c019324:	4770      	bx	lr
 c019326:	bf00      	nop

0c019328 <__aeabi_cdrcmple>:
 c019328:	4684      	mov	ip, r0
 c01932a:	4610      	mov	r0, r2
 c01932c:	4662      	mov	r2, ip
 c01932e:	468c      	mov	ip, r1
 c019330:	4619      	mov	r1, r3
 c019332:	4663      	mov	r3, ip
 c019334:	e000      	b.n	c019338 <__aeabi_cdcmpeq>
 c019336:	bf00      	nop

0c019338 <__aeabi_cdcmpeq>:
 c019338:	b501      	push	{r0, lr}
 c01933a:	f7ff ffb7 	bl	c0192ac <__cmpdf2>
 c01933e:	2800      	cmp	r0, #0
 c019340:	bf48      	it	mi
 c019342:	f110 0f00 	cmnmi.w	r0, #0
 c019346:	bd01      	pop	{r0, pc}

0c019348 <__aeabi_dcmpeq>:
 c019348:	f84d ed08 	str.w	lr, [sp, #-8]!
 c01934c:	f7ff fff4 	bl	c019338 <__aeabi_cdcmpeq>
 c019350:	bf0c      	ite	eq
 c019352:	2001      	moveq	r0, #1
 c019354:	2000      	movne	r0, #0
 c019356:	f85d fb08 	ldr.w	pc, [sp], #8
 c01935a:	bf00      	nop

0c01935c <__aeabi_dcmplt>:
 c01935c:	f84d ed08 	str.w	lr, [sp, #-8]!
 c019360:	f7ff ffea 	bl	c019338 <__aeabi_cdcmpeq>
 c019364:	bf34      	ite	cc
 c019366:	2001      	movcc	r0, #1
 c019368:	2000      	movcs	r0, #0
 c01936a:	f85d fb08 	ldr.w	pc, [sp], #8
 c01936e:	bf00      	nop

0c019370 <__aeabi_dcmple>:
 c019370:	f84d ed08 	str.w	lr, [sp, #-8]!
 c019374:	f7ff ffe0 	bl	c019338 <__aeabi_cdcmpeq>
 c019378:	bf94      	ite	ls
 c01937a:	2001      	movls	r0, #1
 c01937c:	2000      	movhi	r0, #0
 c01937e:	f85d fb08 	ldr.w	pc, [sp], #8
 c019382:	bf00      	nop

0c019384 <__aeabi_dcmpge>:
 c019384:	f84d ed08 	str.w	lr, [sp, #-8]!
 c019388:	f7ff ffce 	bl	c019328 <__aeabi_cdrcmple>
 c01938c:	bf94      	ite	ls
 c01938e:	2001      	movls	r0, #1
 c019390:	2000      	movhi	r0, #0
 c019392:	f85d fb08 	ldr.w	pc, [sp], #8
 c019396:	bf00      	nop

0c019398 <__aeabi_dcmpgt>:
 c019398:	f84d ed08 	str.w	lr, [sp, #-8]!
 c01939c:	f7ff ffc4 	bl	c019328 <__aeabi_cdrcmple>
 c0193a0:	bf34      	ite	cc
 c0193a2:	2001      	movcc	r0, #1
 c0193a4:	2000      	movcs	r0, #0
 c0193a6:	f85d fb08 	ldr.w	pc, [sp], #8
 c0193aa:	bf00      	nop

0c0193ac <__aeabi_dcmpun>:
 c0193ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 c0193b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 c0193b4:	d102      	bne.n	c0193bc <__aeabi_dcmpun+0x10>
 c0193b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 c0193ba:	d10a      	bne.n	c0193d2 <__aeabi_dcmpun+0x26>
 c0193bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 c0193c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 c0193c4:	d102      	bne.n	c0193cc <__aeabi_dcmpun+0x20>
 c0193c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 c0193ca:	d102      	bne.n	c0193d2 <__aeabi_dcmpun+0x26>
 c0193cc:	f04f 0000 	mov.w	r0, #0
 c0193d0:	4770      	bx	lr
 c0193d2:	f04f 0001 	mov.w	r0, #1
 c0193d6:	4770      	bx	lr

0c0193d8 <__aeabi_d2iz>:
 c0193d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 c0193dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 c0193e0:	d215      	bcs.n	c01940e <__aeabi_d2iz+0x36>
 c0193e2:	d511      	bpl.n	c019408 <__aeabi_d2iz+0x30>
 c0193e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 c0193e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 c0193ec:	d912      	bls.n	c019414 <__aeabi_d2iz+0x3c>
 c0193ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 c0193f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 c0193f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 c0193fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 c0193fe:	fa23 f002 	lsr.w	r0, r3, r2
 c019402:	bf18      	it	ne
 c019404:	4240      	negne	r0, r0
 c019406:	4770      	bx	lr
 c019408:	f04f 0000 	mov.w	r0, #0
 c01940c:	4770      	bx	lr
 c01940e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 c019412:	d105      	bne.n	c019420 <__aeabi_d2iz+0x48>
 c019414:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 c019418:	bf08      	it	eq
 c01941a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 c01941e:	4770      	bx	lr
 c019420:	f04f 0000 	mov.w	r0, #0
 c019424:	4770      	bx	lr
 c019426:	bf00      	nop

0c019428 <__aeabi_uldivmod>:
 c019428:	b953      	cbnz	r3, c019440 <__aeabi_uldivmod+0x18>
 c01942a:	b94a      	cbnz	r2, c019440 <__aeabi_uldivmod+0x18>
 c01942c:	2900      	cmp	r1, #0
 c01942e:	bf08      	it	eq
 c019430:	2800      	cmpeq	r0, #0
 c019432:	bf1c      	itt	ne
 c019434:	f04f 31ff 	movne.w	r1, #4294967295
 c019438:	f04f 30ff 	movne.w	r0, #4294967295
 c01943c:	f000 b97c 	b.w	c019738 <__aeabi_idiv0>
 c019440:	f1ad 0c08 	sub.w	ip, sp, #8
 c019444:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 c019448:	f000 f806 	bl	c019458 <__udivmoddi4>
 c01944c:	f8dd e004 	ldr.w	lr, [sp, #4]
 c019450:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c019454:	b004      	add	sp, #16
 c019456:	4770      	bx	lr

0c019458 <__udivmoddi4>:
 c019458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c01945c:	468c      	mov	ip, r1
 c01945e:	9d08      	ldr	r5, [sp, #32]
 c019460:	4604      	mov	r4, r0
 c019462:	468a      	mov	sl, r1
 c019464:	2b00      	cmp	r3, #0
 c019466:	d14a      	bne.n	c0194fe <__udivmoddi4+0xa6>
 c019468:	428a      	cmp	r2, r1
 c01946a:	4617      	mov	r7, r2
 c01946c:	d962      	bls.n	c019534 <__udivmoddi4+0xdc>
 c01946e:	fab2 f682 	clz	r6, r2
 c019472:	b14e      	cbz	r6, c019488 <__udivmoddi4+0x30>
 c019474:	f1c6 0e20 	rsb	lr, r6, #32
 c019478:	fa01 f306 	lsl.w	r3, r1, r6
 c01947c:	40b7      	lsls	r7, r6
 c01947e:	40b4      	lsls	r4, r6
 c019480:	fa20 fe0e 	lsr.w	lr, r0, lr
 c019484:	ea4e 0a03 	orr.w	sl, lr, r3
 c019488:	ea4f 4817 	mov.w	r8, r7, lsr #16
 c01948c:	0c23      	lsrs	r3, r4, #16
 c01948e:	fa1f f987 	uxth.w	r9, r7
 c019492:	fbba fef8 	udiv	lr, sl, r8
 c019496:	fb08 aa1e 	mls	sl, r8, lr, sl
 c01949a:	fb0e f209 	mul.w	r2, lr, r9
 c01949e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 c0194a2:	429a      	cmp	r2, r3
 c0194a4:	d90b      	bls.n	c0194be <__udivmoddi4+0x66>
 c0194a6:	18fb      	adds	r3, r7, r3
 c0194a8:	f10e 31ff 	add.w	r1, lr, #4294967295
 c0194ac:	bf2c      	ite	cs
 c0194ae:	2001      	movcs	r0, #1
 c0194b0:	2000      	movcc	r0, #0
 c0194b2:	429a      	cmp	r2, r3
 c0194b4:	d902      	bls.n	c0194bc <__udivmoddi4+0x64>
 c0194b6:	2800      	cmp	r0, #0
 c0194b8:	f000 812a 	beq.w	c019710 <__udivmoddi4+0x2b8>
 c0194bc:	468e      	mov	lr, r1
 c0194be:	1a9a      	subs	r2, r3, r2
 c0194c0:	b2a3      	uxth	r3, r4
 c0194c2:	fbb2 f0f8 	udiv	r0, r2, r8
 c0194c6:	fb08 2210 	mls	r2, r8, r0, r2
 c0194ca:	fb00 f909 	mul.w	r9, r0, r9
 c0194ce:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
 c0194d2:	45a1      	cmp	r9, r4
 c0194d4:	d907      	bls.n	c0194e6 <__udivmoddi4+0x8e>
 c0194d6:	193c      	adds	r4, r7, r4
 c0194d8:	f100 33ff 	add.w	r3, r0, #4294967295
 c0194dc:	d202      	bcs.n	c0194e4 <__udivmoddi4+0x8c>
 c0194de:	45a1      	cmp	r9, r4
 c0194e0:	f200 8110 	bhi.w	c019704 <__udivmoddi4+0x2ac>
 c0194e4:	4618      	mov	r0, r3
 c0194e6:	eba4 0409 	sub.w	r4, r4, r9
 c0194ea:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 c0194ee:	2100      	movs	r1, #0
 c0194f0:	b11d      	cbz	r5, c0194fa <__udivmoddi4+0xa2>
 c0194f2:	40f4      	lsrs	r4, r6
 c0194f4:	2300      	movs	r3, #0
 c0194f6:	e9c5 4300 	strd	r4, r3, [r5]
 c0194fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c0194fe:	428b      	cmp	r3, r1
 c019500:	d908      	bls.n	c019514 <__udivmoddi4+0xbc>
 c019502:	2d00      	cmp	r5, #0
 c019504:	f000 80f2 	beq.w	c0196ec <__udivmoddi4+0x294>
 c019508:	2100      	movs	r1, #0
 c01950a:	e9c5 0c00 	strd	r0, ip, [r5]
 c01950e:	4608      	mov	r0, r1
 c019510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c019514:	fab3 f183 	clz	r1, r3
 c019518:	2900      	cmp	r1, #0
 c01951a:	d14e      	bne.n	c0195ba <__udivmoddi4+0x162>
 c01951c:	4563      	cmp	r3, ip
 c01951e:	f0c0 80e8 	bcc.w	c0196f2 <__udivmoddi4+0x29a>
 c019522:	4282      	cmp	r2, r0
 c019524:	f240 80e5 	bls.w	c0196f2 <__udivmoddi4+0x29a>
 c019528:	4608      	mov	r0, r1
 c01952a:	2d00      	cmp	r5, #0
 c01952c:	d0e5      	beq.n	c0194fa <__udivmoddi4+0xa2>
 c01952e:	e9c5 4a00 	strd	r4, sl, [r5]
 c019532:	e7e2      	b.n	c0194fa <__udivmoddi4+0xa2>
 c019534:	b902      	cbnz	r2, c019538 <__udivmoddi4+0xe0>
 c019536:	deff      	udf	#255	; 0xff
 c019538:	fab2 f682 	clz	r6, r2
 c01953c:	2e00      	cmp	r6, #0
 c01953e:	f040 8099 	bne.w	c019674 <__udivmoddi4+0x21c>
 c019542:	1a8b      	subs	r3, r1, r2
 c019544:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 c019548:	fa1f f882 	uxth.w	r8, r2
 c01954c:	2101      	movs	r1, #1
 c01954e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 c019552:	fbb3 f2fe 	udiv	r2, r3, lr
 c019556:	fb0e 3012 	mls	r0, lr, r2, r3
 c01955a:	fb08 f902 	mul.w	r9, r8, r2
 c01955e:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 c019562:	45e1      	cmp	r9, ip
 c019564:	d908      	bls.n	c019578 <__udivmoddi4+0x120>
 c019566:	eb17 0c0c 	adds.w	ip, r7, ip
 c01956a:	f102 33ff 	add.w	r3, r2, #4294967295
 c01956e:	d202      	bcs.n	c019576 <__udivmoddi4+0x11e>
 c019570:	45e1      	cmp	r9, ip
 c019572:	f200 80ca 	bhi.w	c01970a <__udivmoddi4+0x2b2>
 c019576:	461a      	mov	r2, r3
 c019578:	ebac 0c09 	sub.w	ip, ip, r9
 c01957c:	b2a3      	uxth	r3, r4
 c01957e:	fbbc f0fe 	udiv	r0, ip, lr
 c019582:	fb0e cc10 	mls	ip, lr, r0, ip
 c019586:	fb08 f800 	mul.w	r8, r8, r0
 c01958a:	ea43 440c 	orr.w	r4, r3, ip, lsl #16
 c01958e:	45a0      	cmp	r8, r4
 c019590:	d90e      	bls.n	c0195b0 <__udivmoddi4+0x158>
 c019592:	193c      	adds	r4, r7, r4
 c019594:	f100 33ff 	add.w	r3, r0, #4294967295
 c019598:	bf2c      	ite	cs
 c01959a:	f04f 0c01 	movcs.w	ip, #1
 c01959e:	f04f 0c00 	movcc.w	ip, #0
 c0195a2:	45a0      	cmp	r8, r4
 c0195a4:	d903      	bls.n	c0195ae <__udivmoddi4+0x156>
 c0195a6:	f1bc 0f00 	cmp.w	ip, #0
 c0195aa:	f000 80a8 	beq.w	c0196fe <__udivmoddi4+0x2a6>
 c0195ae:	4618      	mov	r0, r3
 c0195b0:	eba4 0408 	sub.w	r4, r4, r8
 c0195b4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 c0195b8:	e79a      	b.n	c0194f0 <__udivmoddi4+0x98>
 c0195ba:	f1c1 0420 	rsb	r4, r1, #32
 c0195be:	408b      	lsls	r3, r1
 c0195c0:	fa02 fe01 	lsl.w	lr, r2, r1
 c0195c4:	fa0c f601 	lsl.w	r6, ip, r1
 c0195c8:	40e2      	lsrs	r2, r4
 c0195ca:	fa20 f704 	lsr.w	r7, r0, r4
 c0195ce:	fa2c fc04 	lsr.w	ip, ip, r4
 c0195d2:	fa00 f801 	lsl.w	r8, r0, r1
 c0195d6:	4313      	orrs	r3, r2
 c0195d8:	433e      	orrs	r6, r7
 c0195da:	0c1f      	lsrs	r7, r3, #16
 c0195dc:	0c32      	lsrs	r2, r6, #16
 c0195de:	fa1f f983 	uxth.w	r9, r3
 c0195e2:	fbbc f0f7 	udiv	r0, ip, r7
 c0195e6:	fb07 cc10 	mls	ip, r7, r0, ip
 c0195ea:	fb00 fa09 	mul.w	sl, r0, r9
 c0195ee:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 c0195f2:	45e2      	cmp	sl, ip
 c0195f4:	d908      	bls.n	c019608 <__udivmoddi4+0x1b0>
 c0195f6:	eb13 0c0c 	adds.w	ip, r3, ip
 c0195fa:	f100 32ff 	add.w	r2, r0, #4294967295
 c0195fe:	d202      	bcs.n	c019606 <__udivmoddi4+0x1ae>
 c019600:	45e2      	cmp	sl, ip
 c019602:	f200 8089 	bhi.w	c019718 <__udivmoddi4+0x2c0>
 c019606:	4610      	mov	r0, r2
 c019608:	ebac 0c0a 	sub.w	ip, ip, sl
 c01960c:	b2b6      	uxth	r6, r6
 c01960e:	fbbc faf7 	udiv	sl, ip, r7
 c019612:	fb07 cc1a 	mls	ip, r7, sl, ip
 c019616:	fb0a f909 	mul.w	r9, sl, r9
 c01961a:	ea46 420c 	orr.w	r2, r6, ip, lsl #16
 c01961e:	4591      	cmp	r9, r2
 c019620:	d906      	bls.n	c019630 <__udivmoddi4+0x1d8>
 c019622:	189a      	adds	r2, r3, r2
 c019624:	f10a 36ff 	add.w	r6, sl, #4294967295
 c019628:	d201      	bcs.n	c01962e <__udivmoddi4+0x1d6>
 c01962a:	4591      	cmp	r9, r2
 c01962c:	d87a      	bhi.n	c019724 <__udivmoddi4+0x2cc>
 c01962e:	46b2      	mov	sl, r6
 c019630:	ea4a 4000 	orr.w	r0, sl, r0, lsl #16
 c019634:	eba2 0209 	sub.w	r2, r2, r9
 c019638:	fba0 670e 	umull	r6, r7, r0, lr
 c01963c:	42ba      	cmp	r2, r7
 c01963e:	46b4      	mov	ip, r6
 c019640:	46b9      	mov	r9, r7
 c019642:	d302      	bcc.n	c01964a <__udivmoddi4+0x1f2>
 c019644:	d107      	bne.n	c019656 <__udivmoddi4+0x1fe>
 c019646:	45b0      	cmp	r8, r6
 c019648:	d205      	bcs.n	c019656 <__udivmoddi4+0x1fe>
 c01964a:	ebb6 0c0e 	subs.w	ip, r6, lr
 c01964e:	eb67 0303 	sbc.w	r3, r7, r3
 c019652:	3801      	subs	r0, #1
 c019654:	4699      	mov	r9, r3
 c019656:	2d00      	cmp	r5, #0
 c019658:	d06b      	beq.n	c019732 <__udivmoddi4+0x2da>
 c01965a:	ebb8 030c 	subs.w	r3, r8, ip
 c01965e:	eb62 0209 	sbc.w	r2, r2, r9
 c019662:	fa02 f404 	lsl.w	r4, r2, r4
 c019666:	40cb      	lsrs	r3, r1
 c019668:	40ca      	lsrs	r2, r1
 c01966a:	2100      	movs	r1, #0
 c01966c:	431c      	orrs	r4, r3
 c01966e:	e9c5 4200 	strd	r4, r2, [r5]
 c019672:	e742      	b.n	c0194fa <__udivmoddi4+0xa2>
 c019674:	40b7      	lsls	r7, r6
 c019676:	f1c6 0220 	rsb	r2, r6, #32
 c01967a:	fa01 f306 	lsl.w	r3, r1, r6
 c01967e:	40b4      	lsls	r4, r6
 c019680:	fa21 fc02 	lsr.w	ip, r1, r2
 c019684:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 c019688:	fa20 f202 	lsr.w	r2, r0, r2
 c01968c:	fa1f f887 	uxth.w	r8, r7
 c019690:	fbbc f1fe 	udiv	r1, ip, lr
 c019694:	431a      	orrs	r2, r3
 c019696:	fb0e cc11 	mls	ip, lr, r1, ip
 c01969a:	fb01 f008 	mul.w	r0, r1, r8
 c01969e:	0c13      	lsrs	r3, r2, #16
 c0196a0:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 c0196a4:	4560      	cmp	r0, ip
 c0196a6:	d907      	bls.n	c0196b8 <__udivmoddi4+0x260>
 c0196a8:	eb17 0c0c 	adds.w	ip, r7, ip
 c0196ac:	f101 33ff 	add.w	r3, r1, #4294967295
 c0196b0:	d201      	bcs.n	c0196b6 <__udivmoddi4+0x25e>
 c0196b2:	4560      	cmp	r0, ip
 c0196b4:	d833      	bhi.n	c01971e <__udivmoddi4+0x2c6>
 c0196b6:	4619      	mov	r1, r3
 c0196b8:	ebac 0c00 	sub.w	ip, ip, r0
 c0196bc:	b292      	uxth	r2, r2
 c0196be:	fbbc f0fe 	udiv	r0, ip, lr
 c0196c2:	fb0e cc10 	mls	ip, lr, r0, ip
 c0196c6:	fb00 f308 	mul.w	r3, r0, r8
 c0196ca:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 c0196ce:	4563      	cmp	r3, ip
 c0196d0:	d907      	bls.n	c0196e2 <__udivmoddi4+0x28a>
 c0196d2:	eb17 0c0c 	adds.w	ip, r7, ip
 c0196d6:	f100 32ff 	add.w	r2, r0, #4294967295
 c0196da:	d201      	bcs.n	c0196e0 <__udivmoddi4+0x288>
 c0196dc:	4563      	cmp	r3, ip
 c0196de:	d825      	bhi.n	c01972c <__udivmoddi4+0x2d4>
 c0196e0:	4610      	mov	r0, r2
 c0196e2:	ebac 0303 	sub.w	r3, ip, r3
 c0196e6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 c0196ea:	e730      	b.n	c01954e <__udivmoddi4+0xf6>
 c0196ec:	4629      	mov	r1, r5
 c0196ee:	4628      	mov	r0, r5
 c0196f0:	e703      	b.n	c0194fa <__udivmoddi4+0xa2>
 c0196f2:	1a84      	subs	r4, r0, r2
 c0196f4:	eb6c 0303 	sbc.w	r3, ip, r3
 c0196f8:	2001      	movs	r0, #1
 c0196fa:	469a      	mov	sl, r3
 c0196fc:	e715      	b.n	c01952a <__udivmoddi4+0xd2>
 c0196fe:	3802      	subs	r0, #2
 c019700:	443c      	add	r4, r7
 c019702:	e755      	b.n	c0195b0 <__udivmoddi4+0x158>
 c019704:	3802      	subs	r0, #2
 c019706:	443c      	add	r4, r7
 c019708:	e6ed      	b.n	c0194e6 <__udivmoddi4+0x8e>
 c01970a:	3a02      	subs	r2, #2
 c01970c:	44bc      	add	ip, r7
 c01970e:	e733      	b.n	c019578 <__udivmoddi4+0x120>
 c019710:	f1ae 0e02 	sub.w	lr, lr, #2
 c019714:	443b      	add	r3, r7
 c019716:	e6d2      	b.n	c0194be <__udivmoddi4+0x66>
 c019718:	3802      	subs	r0, #2
 c01971a:	449c      	add	ip, r3
 c01971c:	e774      	b.n	c019608 <__udivmoddi4+0x1b0>
 c01971e:	3902      	subs	r1, #2
 c019720:	44bc      	add	ip, r7
 c019722:	e7c9      	b.n	c0196b8 <__udivmoddi4+0x260>
 c019724:	f1aa 0a02 	sub.w	sl, sl, #2
 c019728:	441a      	add	r2, r3
 c01972a:	e781      	b.n	c019630 <__udivmoddi4+0x1d8>
 c01972c:	3802      	subs	r0, #2
 c01972e:	44bc      	add	ip, r7
 c019730:	e7d7      	b.n	c0196e2 <__udivmoddi4+0x28a>
 c019732:	4629      	mov	r1, r5
 c019734:	e6e1      	b.n	c0194fa <__udivmoddi4+0xa2>
 c019736:	bf00      	nop

0c019738 <__aeabi_idiv0>:
 c019738:	4770      	bx	lr
 c01973a:	bf00      	nop
 c01973c:	0000      	movs	r0, r0
	...

Disassembly of section .ER_TFM_CODE:

0c019748 <__do_global_dtors_aux>:
 c019748:	b510      	push	{r4, lr}
 c01974a:	4c05      	ldr	r4, [pc, #20]	; (c019760 <__do_global_dtors_aux+0x18>)
 c01974c:	7823      	ldrb	r3, [r4, #0]
 c01974e:	b933      	cbnz	r3, c01975e <__do_global_dtors_aux+0x16>
 c019750:	4b04      	ldr	r3, [pc, #16]	; (c019764 <__do_global_dtors_aux+0x1c>)
 c019752:	b113      	cbz	r3, c01975a <__do_global_dtors_aux+0x12>
 c019754:	4804      	ldr	r0, [pc, #16]	; (c019768 <__do_global_dtors_aux+0x20>)
 c019756:	e000      	b.n	c01975a <__do_global_dtors_aux+0x12>
 c019758:	bf00      	nop
 c01975a:	2301      	movs	r3, #1
 c01975c:	7023      	strb	r3, [r4, #0]
 c01975e:	bd10      	pop	{r4, pc}
 c019760:	30035d38 	.word	0x30035d38
 c019764:	00000000 	.word	0x00000000
 c019768:	0c035a40 	.word	0x0c035a40

0c01976c <frame_dummy>:
 c01976c:	b508      	push	{r3, lr}
 c01976e:	4b03      	ldr	r3, [pc, #12]	; (c01977c <frame_dummy+0x10>)
 c019770:	b11b      	cbz	r3, c01977a <frame_dummy+0xe>
 c019772:	4903      	ldr	r1, [pc, #12]	; (c019780 <frame_dummy+0x14>)
 c019774:	4803      	ldr	r0, [pc, #12]	; (c019784 <frame_dummy+0x18>)
 c019776:	e000      	b.n	c01977a <frame_dummy+0xe>
 c019778:	bf00      	nop
 c01977a:	bd08      	pop	{r3, pc}
 c01977c:	00000000 	.word	0x00000000
 c019780:	30035d3c 	.word	0x30035d3c
 c019784:	0c035a40 	.word	0x0c035a40

0c019788 <_mainCRTStartup>:
 c019788:	4b15      	ldr	r3, [pc, #84]	; (c0197e0 <_mainCRTStartup+0x58>)
 c01978a:	2b00      	cmp	r3, #0
 c01978c:	bf08      	it	eq
 c01978e:	4b13      	ldreq	r3, [pc, #76]	; (c0197dc <_mainCRTStartup+0x54>)
 c019790:	469d      	mov	sp, r3
 c019792:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 c019796:	2100      	movs	r1, #0
 c019798:	468b      	mov	fp, r1
 c01979a:	460f      	mov	r7, r1
 c01979c:	4813      	ldr	r0, [pc, #76]	; (c0197ec <_mainCRTStartup+0x64>)
 c01979e:	4a14      	ldr	r2, [pc, #80]	; (c0197f0 <_mainCRTStartup+0x68>)
 c0197a0:	1a12      	subs	r2, r2, r0
 c0197a2:	f7fb f910 	bl	c0149c6 <memset>
 c0197a6:	4b0f      	ldr	r3, [pc, #60]	; (c0197e4 <_mainCRTStartup+0x5c>)
 c0197a8:	2b00      	cmp	r3, #0
 c0197aa:	d000      	beq.n	c0197ae <_mainCRTStartup+0x26>
 c0197ac:	4798      	blx	r3
 c0197ae:	4b0e      	ldr	r3, [pc, #56]	; (c0197e8 <_mainCRTStartup+0x60>)
 c0197b0:	2b00      	cmp	r3, #0
 c0197b2:	d000      	beq.n	c0197b6 <_mainCRTStartup+0x2e>
 c0197b4:	4798      	blx	r3
 c0197b6:	2000      	movs	r0, #0
 c0197b8:	2100      	movs	r1, #0
 c0197ba:	0004      	movs	r4, r0
 c0197bc:	000d      	movs	r5, r1
 c0197be:	480d      	ldr	r0, [pc, #52]	; (c0197f4 <_mainCRTStartup+0x6c>)
 c0197c0:	2800      	cmp	r0, #0
 c0197c2:	d002      	beq.n	c0197ca <_mainCRTStartup+0x42>
 c0197c4:	480c      	ldr	r0, [pc, #48]	; (c0197f8 <_mainCRTStartup+0x70>)
 c0197c6:	e000      	b.n	c0197ca <_mainCRTStartup+0x42>
 c0197c8:	bf00      	nop
 c0197ca:	f7fb f895 	bl	c0148f8 <__libc_init_array>
 c0197ce:	0020      	movs	r0, r4
 c0197d0:	0029      	movs	r1, r5
 c0197d2:	f017 fe67 	bl	c0314a4 <main>
 c0197d6:	f7fb f87b 	bl	c0148d0 <exit>
 c0197da:	bf00      	nop
 c0197dc:	00080000 	.word	0x00080000
 c0197e0:	30031000 	.word	0x30031000
	...
 c0197ec:	30035d38 	.word	0x30035d38
 c0197f0:	3003f2b4 	.word	0x3003f2b4
	...

0c0197fc <tfm_attest_hal_get_security_lifecycle>:
static const char attestation_profile_definition[] = "psa-tfm-profile-1.md";

enum tfm_security_lifecycle_t tfm_attest_hal_get_security_lifecycle(void)
{
    return TFM_SLC_UNKNOWN;
}
 c0197fc:	2000      	movs	r0, #0
 c0197fe:	4770      	bx	lr

0c019800 <ARM_USART_GetVersion>:
    0  /* Reserved */
};

static ARM_DRIVER_VERSION ARM_USART_GetVersion(void)
{
    return DriverVersion;
 c019800:	4b03      	ldr	r3, [pc, #12]	; (c019810 <ARM_USART_GetVersion+0x10>)
{
 c019802:	b082      	sub	sp, #8
    return DriverVersion;
 c019804:	6818      	ldr	r0, [r3, #0]
 c019806:	b283      	uxth	r3, r0
}
 c019808:	f363 000f 	bfi	r0, r3, #0, #16
 c01980c:	b002      	add	sp, #8
 c01980e:	4770      	bx	lr
 c019810:	0c032c4c 	.word	0x0c032c4c

0c019814 <ARM_USART_GetCapabilities>:

static ARM_USART_CAPABILITIES ARM_USART_GetCapabilities(void)
{
    return DriverCapabilities;
}
 c019814:	2001      	movs	r0, #1
 c019816:	4770      	bx	lr

0c019818 <ARM_USART0_Uninitialize>:

static int32_t ARM_USART0_Uninitialize(void)
{
    /* Nothing to be done */
    return ARM_DRIVER_OK;
}
 c019818:	2000      	movs	r0, #0
 c01981a:	4770      	bx	lr

0c01981c <ARM_USART0_PowerControl>:

static int32_t ARM_USART0_PowerControl(ARM_POWER_STATE state)
{
    return ARM_DRIVER_ERROR_UNSUPPORTED;
}
 c01981c:	f06f 0003 	mvn.w	r0, #3
 c019820:	4770      	bx	lr

0c019822 <ARM_USART0_Transfer>:
    ARG_UNUSED(data_out);
    ARG_UNUSED(data_in);
    ARG_UNUSED(num);

    return ARM_DRIVER_ERROR_UNSUPPORTED;
}
 c019822:	f06f 0003 	mvn.w	r0, #3
 c019826:	4770      	bx	lr

0c019828 <ARM_USART0_GetTxCount>:

static uint32_t ARM_USART0_GetTxCount(void)
{
    return (uint32_t)ARM_DRIVER_ERROR_UNSUPPORTED;
}
 c019828:	f06f 0003 	mvn.w	r0, #3
 c01982c:	4770      	bx	lr

0c01982e <ARM_USART0_Control>:
    return (uint32_t)ARM_DRIVER_ERROR_UNSUPPORTED;
}
static int32_t ARM_USART0_Control(uint32_t control, uint32_t arg)
{
    return ARM_DRIVER_OK;
}
 c01982e:	2000      	movs	r0, #0
 c019830:	4770      	bx	lr

0c019832 <ARM_USART0_GetStatus>:

static ARM_USART_STATUS ARM_USART0_GetStatus(void)
{
    ARM_USART_STATUS status = {0, 0, 0, 0, 0, 0, 0, 0};
 c019832:	2300      	movs	r3, #0
{
 c019834:	b082      	sub	sp, #8
    ARM_USART_STATUS status = {0, 0, 0, 0, 0, 0, 0, 0};
 c019836:	9301      	str	r3, [sp, #4]
    return status;
 c019838:	9801      	ldr	r0, [sp, #4]
}
 c01983a:	b002      	add	sp, #8
 c01983c:	4770      	bx	lr

0c01983e <ARM_USART0_GetModemStatus>:
    return ARM_DRIVER_ERROR_UNSUPPORTED;
}

static ARM_USART_MODEM_STATUS ARM_USART0_GetModemStatus(void)
{
    ARM_USART_MODEM_STATUS modem_status = {0, 0, 0, 0, 0};
 c01983e:	2300      	movs	r3, #0
{
 c019840:	b082      	sub	sp, #8
    ARM_USART_MODEM_STATUS modem_status = {0, 0, 0, 0, 0};
 c019842:	9301      	str	r3, [sp, #4]
    return modem_status;
 c019844:	9801      	ldr	r0, [sp, #4]
}
 c019846:	b002      	add	sp, #8
 c019848:	4770      	bx	lr
	...

0c01984c <ARM_USART0_Receive>:
{
 c01984c:	b510      	push	{r4, lr}
 c01984e:	460c      	mov	r4, r1
   if ((data == NULL) || (num == 0U)) {
 c019850:	4601      	mov	r1, r0
 c019852:	b130      	cbz	r0, c019862 <ARM_USART0_Receive+0x16>
 c019854:	b12c      	cbz	r4, c019862 <ARM_USART0_Receive+0x16>
  HAL_UART_Receive_IT(&uart_device, data, num);
 c019856:	b2a2      	uxth	r2, r4
 c019858:	4803      	ldr	r0, [pc, #12]	; (c019868 <ARM_USART0_Receive+0x1c>)
 c01985a:	f001 fd3f 	bl	c01b2dc <HAL_UART_Receive_IT>
  return num;
 c01985e:	4620      	mov	r0, r4
}
 c019860:	bd10      	pop	{r4, pc}
        return ARM_DRIVER_ERROR_PARAMETER;
 c019862:	f06f 0004 	mvn.w	r0, #4
 c019866:	e7fb      	b.n	c019860 <ARM_USART0_Receive+0x14>
 c019868:	30035d54 	.word	0x30035d54

0c01986c <ARM_USART0_Send>:
{
 c01986c:	b508      	push	{r3, lr}
    if ((data == NULL) || (num == 0U)) {
 c01986e:	b148      	cbz	r0, c019884 <ARM_USART0_Send+0x18>
 c019870:	b141      	cbz	r1, c019884 <ARM_USART0_Send+0x18>
    HAL_UART_Transmit(&uart_device, (uint8_t *) data, num,  1000);
 c019872:	b28a      	uxth	r2, r1
 c019874:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c019878:	4601      	mov	r1, r0
 c01987a:	4804      	ldr	r0, [pc, #16]	; (c01988c <ARM_USART0_Send+0x20>)
 c01987c:	f002 fc40 	bl	c01c100 <HAL_UART_Transmit>
    return ARM_DRIVER_OK;
 c019880:	2000      	movs	r0, #0
}
 c019882:	bd08      	pop	{r3, pc}
        return ARM_DRIVER_ERROR_PARAMETER;
 c019884:	f06f 0004 	mvn.w	r0, #4
 c019888:	e7fb      	b.n	c019882 <ARM_USART0_Send+0x16>
 c01988a:	bf00      	nop
 c01988c:	30035d54 	.word	0x30035d54

0c019890 <ARM_USART0_Initialize>:
  COM_TX_GPIO_CLK_ENABLE();
 c019890:	4b27      	ldr	r3, [pc, #156]	; (c019930 <ARM_USART0_Initialize+0xa0>)
{
 c019892:	b530      	push	{r4, r5, lr}
  COM_TX_GPIO_CLK_ENABLE();
 c019894:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{
 c019896:	b089      	sub	sp, #36	; 0x24
  COM_TX_GPIO_CLK_ENABLE();
 c019898:	f042 0201 	orr.w	r2, r2, #1
 c01989c:	64da      	str	r2, [r3, #76]	; 0x4c
 c01989e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  GPIO_Init.Alternate = COM_TX_AF;
 c0198a0:	2507      	movs	r5, #7
  COM_TX_GPIO_CLK_ENABLE();
 c0198a2:	f002 0201 	and.w	r2, r2, #1
 c0198a6:	9200      	str	r2, [sp, #0]
 c0198a8:	9a00      	ldr	r2, [sp, #0]
  COM_RX_GPIO_CLK_ENABLE();
 c0198aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  HAL_GPIO_Init(COM_TX_GPIO_PORT, &GPIO_Init);
 c0198ac:	4c21      	ldr	r4, [pc, #132]	; (c019934 <ARM_USART0_Initialize+0xa4>)
  COM_RX_GPIO_CLK_ENABLE();
 c0198ae:	f042 0201 	orr.w	r2, r2, #1
 c0198b2:	64da      	str	r2, [r3, #76]	; 0x4c
 c0198b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  HAL_GPIO_Init(COM_TX_GPIO_PORT, &GPIO_Init);
 c0198b6:	a903      	add	r1, sp, #12
  COM_RX_GPIO_CLK_ENABLE();
 c0198b8:	f002 0201 	and.w	r2, r2, #1
 c0198bc:	9201      	str	r2, [sp, #4]
 c0198be:	9a01      	ldr	r2, [sp, #4]
  COM_CLK_ENABLE();
 c0198c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  HAL_GPIO_Init(COM_TX_GPIO_PORT, &GPIO_Init);
 c0198c2:	4620      	mov	r0, r4
  COM_CLK_ENABLE();
 c0198c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 c0198c8:	661a      	str	r2, [r3, #96]	; 0x60
 c0198ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 c0198cc:	f44f 7200 	mov.w	r2, #512	; 0x200
  COM_CLK_ENABLE();
 c0198d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c0198d4:	9302      	str	r3, [sp, #8]
 c0198d6:	9b02      	ldr	r3, [sp, #8]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 c0198d8:	2302      	movs	r3, #2
 c0198da:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
 c0198de:	9306      	str	r3, [sp, #24]
  GPIO_Init.Pull      = GPIO_PULLUP;
 c0198e0:	2301      	movs	r3, #1
  GPIO_Init.Alternate = COM_TX_AF;
 c0198e2:	9507      	str	r5, [sp, #28]
  GPIO_Init.Pull      = GPIO_PULLUP;
 c0198e4:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(COM_TX_GPIO_PORT, &GPIO_Init);
 c0198e6:	f000 fed7 	bl	c01a698 <HAL_GPIO_Init>
  GPIO_Init.Pin       = COM_RX_PIN;
 c0198ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(COM_RX_GPIO_PORT, &GPIO_Init);
 c0198ee:	a903      	add	r1, sp, #12
 c0198f0:	4620      	mov	r0, r4
  GPIO_Init.Pin       = COM_RX_PIN;
 c0198f2:	9303      	str	r3, [sp, #12]
  GPIO_Init.Alternate = COM_RX_AF;
 c0198f4:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(COM_RX_GPIO_PORT, &GPIO_Init);
 c0198f6:	f000 fecf 	bl	c01a698 <HAL_GPIO_Init>
  uart_device.Init.BaudRate       = 115200;
 c0198fa:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  uart_device.Instance = COM_INSTANCE;
 c0198fe:	480e      	ldr	r0, [pc, #56]	; (c019938 <ARM_USART0_Initialize+0xa8>)
  uart_device.Init.BaudRate       = 115200;
 c019900:	490e      	ldr	r1, [pc, #56]	; (c01993c <ARM_USART0_Initialize+0xac>)
  uart_device.Init.Mode           = UART_MODE_TX_RX;
 c019902:	220c      	movs	r2, #12
  uart_device.Init.BaudRate       = 115200;
 c019904:	e9c0 1300 	strd	r1, r3, [r0]
  uart_device.Init.WordLength     = UART_WORDLENGTH_8B;
 c019908:	2300      	movs	r3, #0
  uart_device.Init.HwFlowCtl      = UART_HWCONTROL_NONE;
 c01990a:	e9c0 2305 	strd	r2, r3, [r0, #20]
  uart_device.Init.OverSampling   = UART_OVERSAMPLING_8;
 c01990e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  uart_device.Init.StopBits       = UART_STOPBITS_1;
 c019912:	e9c0 3302 	strd	r3, r3, [r0, #8]
  uart_device.Init.Parity         = UART_PARITY_NONE;
 c019916:	6103      	str	r3, [r0, #16]
  uart_device.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 c019918:	e9c0 2307 	strd	r2, r3, [r0, #28]
  uart_device.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 c01991c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&uart_device) != HAL_OK)
 c01991e:	f002 fc7e 	bl	c01c21e <HAL_UART_Init>
 c019922:	3000      	adds	r0, #0
 c019924:	bf18      	it	ne
 c019926:	2001      	movne	r0, #1
}
 c019928:	4240      	negs	r0, r0
 c01992a:	b009      	add	sp, #36	; 0x24
 c01992c:	bd30      	pop	{r4, r5, pc}
 c01992e:	bf00      	nop
 c019930:	50021000 	.word	0x50021000
 c019934:	52020000 	.word	0x52020000
 c019938:	30035d54 	.word	0x30035d54
 c01993c:	50013800 	.word	0x50013800

0c019940 <ARM_USART0_SetModemControl>:
 c019940:	f06f 0003 	mvn.w	r0, #3
 c019944:	4770      	bx	lr

0c019946 <ARM_USART0_GetRxCount>:
 c019946:	f06f 0003 	mvn.w	r0, #3
 c01994a:	4770      	bx	lr

0c01994c <ARM_Flash_GetVersion>:
/* Flash Status */
static ARM_FLASH_STATUS ARM_FLASH0_STATUS = {0, 0, 0};

static ARM_DRIVER_VERSION ARM_Flash_GetVersion(void)
{
    return DriverVersion;
 c01994c:	4b03      	ldr	r3, [pc, #12]	; (c01995c <ARM_Flash_GetVersion+0x10>)
{
 c01994e:	b082      	sub	sp, #8
    return DriverVersion;
 c019950:	6818      	ldr	r0, [r3, #0]
 c019952:	b283      	uxth	r3, r0
}
 c019954:	f363 000f 	bfi	r0, r3, #0, #16
 c019958:	b002      	add	sp, #8
 c01995a:	4770      	bx	lr
 c01995c:	0c032ca0 	.word	0x0c032ca0

0c019960 <ARM_Flash_GetCapabilities>:

static ARM_FLASH_CAPABILITIES ARM_Flash_GetCapabilities(void)
{
    return DriverCapabilities;
}
 c019960:	200c      	movs	r0, #12
 c019962:	4770      	bx	lr

0c019964 <ARM_Flash_Uninitialize>:
}

static int32_t ARM_Flash_Uninitialize(void)
{
    return ARM_DRIVER_OK;
}
 c019964:	2000      	movs	r0, #0
 c019966:	4770      	bx	lr

0c019968 <ARM_Flash_PowerControl>:

static int32_t ARM_Flash_PowerControl(ARM_POWER_STATE state)
{
    switch(state) {
 c019968:	2801      	cmp	r0, #1
 c01996a:	d905      	bls.n	c019978 <ARM_Flash_PowerControl+0x10>
 c01996c:	2802      	cmp	r0, #2
        return ARM_DRIVER_OK;
    case ARM_POWER_OFF:
    case ARM_POWER_LOW:
        return ARM_DRIVER_ERROR_UNSUPPORTED;
    default:
        return ARM_DRIVER_ERROR_PARAMETER;
 c01996e:	bf0c      	ite	eq
 c019970:	2000      	moveq	r0, #0
 c019972:	f06f 0004 	mvnne.w	r0, #4
 c019976:	4770      	bx	lr
        return ARM_DRIVER_ERROR_UNSUPPORTED;
 c019978:	f06f 0003 	mvn.w	r0, #3
    }
}
 c01997c:	4770      	bx	lr

0c01997e <ARM_Flash_EraseChip>:
}

static int32_t ARM_Flash_EraseChip(void)
{
    return ARM_DRIVER_ERROR_UNSUPPORTED;
}
 c01997e:	f06f 0003 	mvn.w	r0, #3
 c019982:	4770      	bx	lr

0c019984 <ARM_Flash_GetStatus>:

static ARM_FLASH_STATUS ARM_Flash_GetStatus(void)
{
    return ARM_FLASH0_STATUS;
 c019984:	4b01      	ldr	r3, [pc, #4]	; (c01998c <ARM_Flash_GetStatus+0x8>)
 c019986:	6818      	ldr	r0, [r3, #0]
}
 c019988:	4770      	bx	lr
 c01998a:	bf00      	nop
 c01998c:	30035de0 	.word	0x30035de0

0c019990 <ARM_Flash_GetInfo>:

static ARM_FLASH_INFO * ARM_Flash_GetInfo(void)
{
    return ARM_FLASH0_DEV.data;
}
 c019990:	4b01      	ldr	r3, [pc, #4]	; (c019998 <ARM_Flash_GetInfo+0x8>)
 c019992:	6818      	ldr	r0, [r3, #0]
 c019994:	4770      	bx	lr
 c019996:	bf00      	nop
 c019998:	30035b00 	.word	0x30035b00

0c01999c <ARM_Flash_ReadData>:
{
 c01999c:	b510      	push	{r4, lr}
    ARM_FLASH0_STATUS.error = DRIVER_STATUS_NO_ERROR;
 c01999e:	4b0c      	ldr	r3, [pc, #48]	; (c0199d0 <ARM_Flash_ReadData+0x34>)
{
 c0199a0:	460c      	mov	r4, r1
    ARM_FLASH0_STATUS.error = DRIVER_STATUS_NO_ERROR;
 c0199a2:	6819      	ldr	r1, [r3, #0]
 c0199a4:	f36f 0141 	bfc	r1, #1, #1
 c0199a8:	6019      	str	r1, [r3, #0]
    is_valid = is_range_valid(&ARM_FLASH0_DEV, addr + cnt -1);
 c0199aa:	1e51      	subs	r1, r2, #1
 c0199ac:	4401      	add	r1, r0
    if(is_valid != true) {
 c0199ae:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 c0199b2:	d306      	bcc.n	c0199c2 <ARM_Flash_ReadData+0x26>
        return ARM_DRIVER_ERROR_PARAMETER;
 c0199b4:	f06f 0004 	mvn.w	r0, #4
        ARM_FLASH0_STATUS.error = DRIVER_STATUS_ERROR;
 c0199b8:	681a      	ldr	r2, [r3, #0]
 c0199ba:	f042 0202 	orr.w	r2, r2, #2
 c0199be:	601a      	str	r2, [r3, #0]
}
 c0199c0:	bd10      	pop	{r4, pc}
    memcpy(data,(void*)((uint32_t)addr+FLASH_BASE), cnt);
 c0199c2:	f100 6140 	add.w	r1, r0, #201326592	; 0xc000000
 c0199c6:	4620      	mov	r0, r4
 c0199c8:	f7fa ffd9 	bl	c01497e <memcpy>
    return ARM_DRIVER_OK;
 c0199cc:	2000      	movs	r0, #0
 c0199ce:	e7f7      	b.n	c0199c0 <ARM_Flash_ReadData+0x24>
 c0199d0:	30035de0 	.word	0x30035de0

0c0199d4 <ARM_Flash_Initialize>:
{
 c0199d4:	b508      	push	{r3, lr}
  FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 c0199d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 c0199da:	f000 fd2d 	bl	c01a438 <FLASH_WaitForLastOperation>
}
 c0199de:	2000      	movs	r0, #0
 c0199e0:	bd08      	pop	{r3, pc}
	...

0c0199e4 <ARM_Flash_ProgramData>:
{
 c0199e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    ARM_FLASH0_STATUS.error = DRIVER_STATUS_NO_ERROR;
 c0199e8:	4c2c      	ldr	r4, [pc, #176]	; (c019a9c <ARM_Flash_ProgramData+0xb8>)
{
 c0199ea:	4688      	mov	r8, r1
    ARM_FLASH0_STATUS.error = DRIVER_STATUS_NO_ERROR;
 c0199ec:	6823      	ldr	r3, [r4, #0]
  if ((!is_range_valid(&ARM_FLASH0_DEV, addr + cnt - 1)) ||
 c0199ee:	1881      	adds	r1, r0, r2
    ARM_FLASH0_STATUS.error = DRIVER_STATUS_NO_ERROR;
 c0199f0:	f36f 0341 	bfc	r3, #1, #1
 c0199f4:	6023      	str	r3, [r4, #0]
  if ((!is_range_valid(&ARM_FLASH0_DEV, addr + cnt - 1)) ||
 c0199f6:	1e4b      	subs	r3, r1, #1
 c0199f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
{
 c0199fc:	4606      	mov	r6, r0
 c0199fe:	4617      	mov	r7, r2
  if ((!is_range_valid(&ARM_FLASH0_DEV, addr + cnt - 1)) ||
 c019a00:	d212      	bcs.n	c019a28 <ARM_Flash_ProgramData+0x44>
    return ((param % flash_dev->data->program_unit) != 0) ? (false) : (true);
 c019a02:	4b27      	ldr	r3, [pc, #156]	; (c019aa0 <ARM_Flash_ProgramData+0xbc>)
 c019a04:	681b      	ldr	r3, [r3, #0]
 c019a06:	691b      	ldr	r3, [r3, #16]
 c019a08:	fbb0 f2f3 	udiv	r2, r0, r3
 c019a0c:	fb03 0212 	mls	r2, r3, r2, r0
  if ((!is_range_valid(&ARM_FLASH0_DEV, addr + cnt - 1)) ||
 c019a10:	b952      	cbnz	r2, c019a28 <ARM_Flash_ProgramData+0x44>
    return ((param % flash_dev->data->program_unit) != 0) ? (false) : (true);
 c019a12:	fbb7 f5f3 	udiv	r5, r7, r3
 c019a16:	fb03 7515 	mls	r5, r3, r5, r7
      (!is_write_aligned(&ARM_FLASH0_DEV, addr))     ||
 c019a1a:	b92d      	cbnz	r5, c019a28 <ARM_Flash_ProgramData+0x44>
         ? true : false;
 c019a1c:	f5b1 3fa0 	cmp.w	r1, #81920	; 0x14000
 c019a20:	d202      	bcs.n	c019a28 <ARM_Flash_ProgramData+0x44>
      (!is_write_aligned(&ARM_FLASH0_DEV, cnt))      ||
 c019a22:	f5b0 4f70 	cmp.w	r0, #61440	; 0xf000
 c019a26:	d208      	bcs.n	c019a3a <ARM_Flash_ProgramData+0x56>
        return ARM_DRIVER_ERROR_PARAMETER;
 c019a28:	f06f 0004 	mvn.w	r0, #4
        ARM_FLASH0_STATUS.error = DRIVER_STATUS_ERROR;
 c019a2c:	6823      	ldr	r3, [r4, #0]
 c019a2e:	f043 0302 	orr.w	r3, r3, #2
 c019a32:	6023      	str	r3, [r4, #0]
}
 c019a34:	b003      	add	sp, #12
 c019a36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    HAL_FLASH_Unlock();
 c019a3a:	f000 fcc9 	bl	c01a3d0 <HAL_FLASH_Unlock>
    ARM_FLASH0_STATUS.busy = DRIVER_STATUS_BUSY;
 c019a3e:	6823      	ldr	r3, [r4, #0]
 c019a40:	f106 6640 	add.w	r6, r6, #201326592	; 0xc000000
 c019a44:	f043 0301 	orr.w	r3, r3, #1
 c019a48:	6023      	str	r3, [r4, #0]
        memcpy(&dword,  (void *)((uint32_t)data+loop), sizeof(dword));
 c019a4a:	466b      	mov	r3, sp
 c019a4c:	eb08 0205 	add.w	r2, r8, r5
 c019a50:	6810      	ldr	r0, [r2, #0]
 c019a52:	6851      	ldr	r1, [r2, #4]
 c019a54:	c303      	stmia	r3!, {r0, r1}
        err = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (FLASH_BASE+addr), dword);
 c019a56:	1971      	adds	r1, r6, r5
 c019a58:	e9dd 2300 	ldrd	r2, r3, [sp]
 c019a5c:	2001      	movs	r0, #1
 c019a5e:	f000 fd29 	bl	c01a4b4 <HAL_FLASH_Program>
        loop += sizeof(dword);
 c019a62:	3508      	adds	r5, #8
    }while((loop!=cnt) && (err == HAL_OK));
 c019a64:	42af      	cmp	r7, r5
        err = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (FLASH_BASE+addr), dword);
 c019a66:	4681      	mov	r9, r0
    }while((loop!=cnt) && (err == HAL_OK));
 c019a68:	d001      	beq.n	c019a6e <ARM_Flash_ProgramData+0x8a>
 c019a6a:	2800      	cmp	r0, #0
 c019a6c:	d0ed      	beq.n	c019a4a <ARM_Flash_ProgramData+0x66>
    ARM_FLASH0_STATUS.busy = DRIVER_STATUS_IDLE;
 c019a6e:	6823      	ldr	r3, [r4, #0]
 c019a70:	f36f 0300 	bfc	r3, #0, #1
 c019a74:	6023      	str	r3, [r4, #0]
    HAL_FLASH_Lock();
 c019a76:	f000 fccb 	bl	c01a410 <HAL_FLASH_Lock>
    if ((err == HAL_OK) && memcmp(dest,data,cnt)){
 c019a7a:	f1b9 0f00 	cmp.w	r9, #0
 c019a7e:	d109      	bne.n	c019a94 <ARM_Flash_ProgramData+0xb0>
 c019a80:	463a      	mov	r2, r7
 c019a82:	4641      	mov	r1, r8
 c019a84:	4630      	mov	r0, r6
 c019a86:	f7fa ff6b 	bl	c014960 <memcmp>
 c019a8a:	3000      	adds	r0, #0
 c019a8c:	bf18      	it	ne
 c019a8e:	2001      	movne	r0, #1
 c019a90:	4240      	negs	r0, r0
 c019a92:	e7cf      	b.n	c019a34 <ARM_Flash_ProgramData+0x50>
    return (err == HAL_OK) ? ARM_DRIVER_OK :ARM_DRIVER_ERROR;
 c019a94:	f04f 30ff 	mov.w	r0, #4294967295
 c019a98:	e7cc      	b.n	c019a34 <ARM_Flash_ProgramData+0x50>
 c019a9a:	bf00      	nop
 c019a9c:	30035de0 	.word	0x30035de0
 c019aa0:	30035b00 	.word	0x30035b00

0c019aa4 <ARM_Flash_EraseSector>:
{
 c019aa4:	b530      	push	{r4, r5, lr}
  if (!(is_range_valid(&ARM_FLASH0_DEV, addr)) ||
 c019aa6:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
{
 c019aaa:	b087      	sub	sp, #28
 c019aac:	4c1e      	ldr	r4, [pc, #120]	; (c019b28 <ARM_Flash_EraseSector+0x84>)
  if (!(is_range_valid(&ARM_FLASH0_DEV, addr)) ||
 c019aae:	d20c      	bcs.n	c019aca <ARM_Flash_EraseSector+0x26>
    return ((param % (flash_dev->data->sector_size)) != 0) ? (false) : (true);
 c019ab0:	4b1e      	ldr	r3, [pc, #120]	; (c019b2c <ARM_Flash_EraseSector+0x88>)
 c019ab2:	681b      	ldr	r3, [r3, #0]
 c019ab4:	6899      	ldr	r1, [r3, #8]
 c019ab6:	fbb0 f2f1 	udiv	r2, r0, r1
 c019aba:	fb01 0212 	mls	r2, r1, r2, r0
  if (!(is_range_valid(&ARM_FLASH0_DEV, addr)) ||
 c019abe:	b922      	cbnz	r2, c019aca <ARM_Flash_EraseSector+0x26>
    ((param >= FLASH_NV_COUNTERS_AREA_OFFSET) && 
 c019ac0:	f5a0 4270 	sub.w	r2, r0, #61440	; 0xf000
      !(is_erase_aligned(&ARM_FLASH0_DEV, addr)) ||
 c019ac4:	f5b2 4fa0 	cmp.w	r2, #20480	; 0x5000
 c019ac8:	d307      	bcc.n	c019ada <ARM_Flash_EraseSector+0x36>
         return ARM_DRIVER_ERROR_PARAMETER;
 c019aca:	f06f 0004 	mvn.w	r0, #4
         ARM_FLASH0_STATUS.error = DRIVER_STATUS_ERROR;
 c019ace:	6823      	ldr	r3, [r4, #0]
 c019ad0:	f043 0302 	orr.w	r3, r3, #2
 c019ad4:	6023      	str	r3, [r4, #0]
}
 c019ad6:	b007      	add	sp, #28
 c019ad8:	bd30      	pop	{r4, r5, pc}
    EraseInit.Banks = bank_number(&ARM_FLASH0_DEV, addr);
 c019ada:	2202      	movs	r2, #2
 c019adc:	2101      	movs	r1, #1
    EraseInit.NbPages = 2;
 c019ade:	9205      	str	r2, [sp, #20]
    EraseInit.Banks = bank_number(&ARM_FLASH0_DEV, addr);
 c019ae0:	e9cd 2102 	strd	r2, r1, [sp, #8]
    uint32_t page = param / flash_dev->data->page_size ;
 c019ae4:	68da      	ldr	r2, [r3, #12]
    page = ((page > (flash_dev->data->sector_count))) ? page -((flash_dev->data->sector_count)) : page;
 c019ae6:	685b      	ldr	r3, [r3, #4]
    uint32_t page = param / flash_dev->data->page_size ;
 c019ae8:	fbb0 f0f2 	udiv	r0, r0, r2
    page = ((page > (flash_dev->data->sector_count))) ? page -((flash_dev->data->sector_count)) : page;
 c019aec:	4298      	cmp	r0, r3
 c019aee:	bf88      	it	hi
 c019af0:	1ac0      	subhi	r0, r0, r3
    ARM_FLASH0_STATUS.error = DRIVER_STATUS_NO_ERROR;
 c019af2:	6823      	ldr	r3, [r4, #0]
    EraseInit.Page = page_number(&ARM_FLASH0_DEV, addr);
 c019af4:	9004      	str	r0, [sp, #16]
    ARM_FLASH0_STATUS.error = DRIVER_STATUS_NO_ERROR;
 c019af6:	f36f 0341 	bfc	r3, #1, #1
 c019afa:	6023      	str	r3, [r4, #0]
    HAL_FLASH_Unlock();
 c019afc:	f000 fc68 	bl	c01a3d0 <HAL_FLASH_Unlock>
    ARM_FLASH0_STATUS.busy = DRIVER_STATUS_BUSY;
 c019b00:	6823      	ldr	r3, [r4, #0]
    err = HAL_FLASHEx_Erase(&EraseInit, &pageError);
 c019b02:	a901      	add	r1, sp, #4
    ARM_FLASH0_STATUS.busy = DRIVER_STATUS_BUSY;
 c019b04:	f043 0301 	orr.w	r3, r3, #1
    err = HAL_FLASHEx_Erase(&EraseInit, &pageError);
 c019b08:	a802      	add	r0, sp, #8
    ARM_FLASH0_STATUS.busy = DRIVER_STATUS_BUSY;
 c019b0a:	6023      	str	r3, [r4, #0]
    err = HAL_FLASHEx_Erase(&EraseInit, &pageError);
 c019b0c:	f000 fd6e 	bl	c01a5ec <HAL_FLASHEx_Erase>
 c019b10:	4605      	mov	r5, r0
    ARM_FLASH0_STATUS.busy = DRIVER_STATUS_IDLE;
 c019b12:	6823      	ldr	r3, [r4, #0]
 c019b14:	f36f 0300 	bfc	r3, #0, #1
 c019b18:	6023      	str	r3, [r4, #0]
    HAL_FLASH_Lock();
 c019b1a:	f000 fc79 	bl	c01a410 <HAL_FLASH_Lock>
  return (err == HAL_OK) ? ARM_DRIVER_OK :ARM_DRIVER_ERROR;
 c019b1e:	1c28      	adds	r0, r5, #0
 c019b20:	bf18      	it	ne
 c019b22:	2001      	movne	r0, #1
 c019b24:	4240      	negs	r0, r0
 c019b26:	e7d6      	b.n	c019ad6 <ARM_Flash_EraseSector+0x32>
 c019b28:	30035de0 	.word	0x30035de0
 c019b2c:	30035b00 	.word	0x30035b00

0c019b30 <mbedtls_hardware_poll>:
}


/*  interface for mbed-crypto */
int mbedtls_hardware_poll(void *data, unsigned char *output, size_t len, size_t *olen)
{
 c019b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c019b34:	460d      	mov	r5, r1
 c019b36:	b0a8      	sub	sp, #160	; 0xa0
 c019b38:	4614      	mov	r4, r2
 c019b3a:	4698      	mov	r8, r3
__STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
{
    uint32_t result;

#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
   __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 c019b3c:	4b36      	ldr	r3, [pc, #216]	; (c019c18 <mbedtls_hardware_poll+0xe8>)
 c019b3e:	461e      	mov	r6, r3
 c019b40:	e8d3 2f4f 	ldrexb	r2, [r3]
    newValue = __LDREXB(valuePtr) + delta;
 c019b44:	3201      	adds	r2, #1
 c019b46:	b2d2      	uxtb	r2, r2
 */
__STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
{
   uint32_t result;

   __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 c019b48:	e8c3 2f41 	strexb	r1, r2, [r3]
  } while (__STREXB(newValue, valuePtr));
 c019b4c:	2900      	cmp	r1, #0
 c019b4e:	d1f7      	bne.n	c019b40 <mbedtls_hardware_poll+0x10>
  if (atomic_incr_u8(&users, 1) > 1)
 c019b50:	2a01      	cmp	r2, #1
 c019b52:	d900      	bls.n	c019b56 <mbedtls_hardware_poll+0x26>
 c019b54:	e7fe      	b.n	c019b54 <mbedtls_hardware_poll+0x24>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 c019b56:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 c019b5a:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_MSI;
 c019b5c:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 c019b60:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_MSI;
 c019b62:	9322      	str	r3, [sp, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 c019b64:	f001 f8ba 	bl	c01acdc <HAL_RCCEx_PeriphCLKConfig>
 c019b68:	4681      	mov	r9, r0
 c019b6a:	b100      	cbz	r0, c019b6e <mbedtls_hardware_poll+0x3e>
 c019b6c:	e7fe      	b.n	c019b6c <mbedtls_hardware_poll+0x3c>
  handle.Instance = RNG;
 c019b6e:	4f2b      	ldr	r7, [pc, #172]	; (c019c1c <mbedtls_hardware_poll+0xec>)
  __HAL_RCC_RNG_CLK_ENABLE();
 c019b70:	4b2b      	ldr	r3, [pc, #172]	; (c019c20 <mbedtls_hardware_poll+0xf0>)
    if (HAL_RNG_GenerateRandomNumber(&handle, (uint32_t *)random) != HAL_OK)
 c019b72:	46ba      	mov	sl, r7
  __HAL_RCC_RNG_CLK_ENABLE();
 c019b74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c019b76:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 c019b7a:	64da      	str	r2, [r3, #76]	; 0x4c
 c019b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  handle.Lock = HAL_UNLOCKED;
 c019b7e:	7238      	strb	r0, [r7, #8]
  __HAL_RCC_RNG_CLK_ENABLE();
 c019b80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c019b84:	9302      	str	r3, [sp, #8]
 c019b86:	9b02      	ldr	r3, [sp, #8]
  handle.Instance = RNG;
 c019b88:	4b26      	ldr	r3, [pc, #152]	; (c019c24 <mbedtls_hardware_poll+0xf4>)
  handle.State = HAL_RNG_STATE_RESET;
 c019b8a:	7278      	strb	r0, [r7, #9]
  HAL_RNG_Init(&handle);
 c019b8c:	4638      	mov	r0, r7
  handle.Instance = RNG;
 c019b8e:	603b      	str	r3, [r7, #0]
  HAL_RNG_Init(&handle);
 c019b90:	f001 faef 	bl	c01b172 <HAL_RNG_Init>
  HAL_RNG_GenerateRandomNumber(&handle, &dummy);
 c019b94:	a901      	add	r1, sp, #4
 c019b96:	4638      	mov	r0, r7
 c019b98:	f001 fb71 	bl	c01b27e <HAL_RNG_GenerateRandomNumber>
  *output_length = 0;
 c019b9c:	f8c8 9000 	str.w	r9, [r8]
  while ((*output_length < length) && (ret == 0))
 c019ba0:	f8d8 3000 	ldr.w	r3, [r8]
 c019ba4:	429c      	cmp	r4, r3
 c019ba6:	d904      	bls.n	c019bb2 <mbedtls_hardware_poll+0x82>
    if (HAL_RNG_GenerateRandomNumber(&handle, (uint32_t *)random) != HAL_OK)
 c019ba8:	a903      	add	r1, sp, #12
 c019baa:	4650      	mov	r0, sl
 c019bac:	f001 fb67 	bl	c01b27e <HAL_RNG_GenerateRandomNumber>
 c019bb0:	b360      	cbz	r0, c019c0c <mbedtls_hardware_poll+0xdc>
  if ((__HAL_RNG_GET_FLAG(&handle, (RNG_FLAG_CECS | RNG_FLAG_SECS))) != 0)
 c019bb2:	683b      	ldr	r3, [r7, #0]
  HAL_RNG_DeInit(&handle);
 c019bb4:	4819      	ldr	r0, [pc, #100]	; (c019c1c <mbedtls_hardware_poll+0xec>)
  if ((__HAL_RNG_GET_FLAG(&handle, (RNG_FLAG_CECS | RNG_FLAG_SECS))) != 0)
 c019bb6:	685b      	ldr	r3, [r3, #4]
 c019bb8:	f003 0306 	and.w	r3, r3, #6
 c019bbc:	2b06      	cmp	r3, #6
    *output_length = 0;
 c019bbe:	bf04      	itt	eq
 c019bc0:	2300      	moveq	r3, #0
 c019bc2:	f8c8 3000 	streq.w	r3, [r8]
  HAL_RNG_DeInit(&handle);
 c019bc6:	f001 fb26 	bl	c01b216 <HAL_RNG_DeInit>
  __HAL_RCC_RNG_CLK_DISABLE();
 c019bca:	4a15      	ldr	r2, [pc, #84]	; (c019c20 <mbedtls_hardware_poll+0xf0>)
 c019bcc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 c019bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c019bd2:	64d3      	str	r3, [r2, #76]	; 0x4c
  users = 0;
 c019bd4:	2300      	movs	r3, #0
 c019bd6:	7033      	strb	r3, [r6, #0]
  RNG_Init();
  RNG_GetBytes(output, len, olen);
  RNG_DeInit();
  if (*olen != len)
 c019bd8:	f8d8 0000 	ldr.w	r0, [r8]
  {
    return -1;
  }
  return 0;
}
 c019bdc:	1b00      	subs	r0, r0, r4
 c019bde:	bf18      	it	ne
 c019be0:	f04f 30ff 	movne.w	r0, #4294967295
 c019be4:	b028      	add	sp, #160	; 0xa0
 c019be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        *output++ = random[i];
 c019bea:	ab28      	add	r3, sp, #160	; 0xa0
 c019bec:	181a      	adds	r2, r3, r0
 c019bee:	f812 3c94 	ldrb.w	r3, [r2, #-148]
 c019bf2:	3001      	adds	r0, #1
 c019bf4:	f805 3b01 	strb.w	r3, [r5], #1
        *output_length += 1;
 c019bf8:	f8d8 3000 	ldr.w	r3, [r8]
      for (uint8_t i = 0; (i < 4) && (*output_length < length) ; i++)
 c019bfc:	2804      	cmp	r0, #4
        *output_length += 1;
 c019bfe:	f103 0301 	add.w	r3, r3, #1
 c019c02:	f8c8 3000 	str.w	r3, [r8]
        random[i] = 0;
 c019c06:	f802 9c94 	strb.w	r9, [r2, #-148]
      for (uint8_t i = 0; (i < 4) && (*output_length < length) ; i++)
 c019c0a:	d0c9      	beq.n	c019ba0 <mbedtls_hardware_poll+0x70>
 c019c0c:	f8d8 3000 	ldr.w	r3, [r8]
 c019c10:	429c      	cmp	r4, r3
 c019c12:	d8ea      	bhi.n	c019bea <mbedtls_hardware_poll+0xba>
 c019c14:	e7c4      	b.n	c019ba0 <mbedtls_hardware_poll+0x70>
 c019c16:	bf00      	nop
 c019c18:	30035df8 	.word	0x30035df8
 c019c1c:	30035de4 	.word	0x30035de4
 c019c20:	50021000 	.word	0x50021000
 c019c24:	520c0800 	.word	0x520c0800

0c019c28 <mpu_armv8m_enable>:
  mpu->MAIR0 = (MPU_ARMV8M_MAIR_ATTR_DEVICE_VAL << MPU_MAIR0_Attr0_Pos) |
               (MPU_ARMV8M_MAIR_ATTR_CODE_VAL << MPU_MAIR0_Attr1_Pos) |
               (MPU_ARMV8M_MAIR_ATTR_DATA_VAL << MPU_MAIR0_Attr2_Pos);

  mpu->CTRL =
    (privdef_en ? MPU_CTRL_PRIVDEFENA_Msk : 0) |
 c019c28:	2900      	cmp	r1, #0
 c019c2a:	bf14      	ite	ne
 c019c2c:	2104      	movne	r1, #4
 c019c2e:	2100      	moveq	r1, #0
    (hfnmi_en   ? MPU_CTRL_HFNMIENA_Msk   : 0);
 c019c30:	2a00      	cmp	r2, #0
 c019c32:	bf14      	ite	ne
 c019c34:	2202      	movne	r2, #2
 c019c36:	2200      	moveq	r2, #0
  MPU_Type *mpu = (MPU_Type *)dev->base;
 c019c38:	6803      	ldr	r3, [r0, #0]
  mpu->MAIR0 = (MPU_ARMV8M_MAIR_ATTR_DEVICE_VAL << MPU_MAIR0_Attr0_Pos) |
 c019c3a:	4807      	ldr	r0, [pc, #28]	; (c019c58 <mpu_armv8m_enable+0x30>)
    (privdef_en ? MPU_CTRL_PRIVDEFENA_Msk : 0) |
 c019c3c:	4311      	orrs	r1, r2
  mpu->MAIR0 = (MPU_ARMV8M_MAIR_ATTR_DEVICE_VAL << MPU_MAIR0_Attr0_Pos) |
 c019c3e:	6318      	str	r0, [r3, #48]	; 0x30
  mpu->CTRL =
 c019c40:	6059      	str	r1, [r3, #4]

  /*Ensure all configuration is written before enable*/

  mpu->CTRL |= MPU_CTRL_ENABLE_Msk;
 c019c42:	685a      	ldr	r2, [r3, #4]
 c019c44:	f042 0201 	orr.w	r2, r2, #1
 c019c48:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 c019c4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 c019c4e:	f3bf 8f6f 	isb	sy

  /* Enable MPU before next instruction */
  __DSB();
  __ISB();
  return MPU_ARMV8M_OK;
}
 c019c52:	2000      	movs	r0, #0
 c019c54:	4770      	bx	lr
 c019c56:	bf00      	nop
 c019c58:	00ffaa04 	.word	0x00ffaa04

0c019c5c <mpu_armv8m_region_enable>:
  uint32_t ctrl_before;
  uint32_t base_cfg;
  uint32_t limit_cfg;

  /*FIXME : Add complete error checking*/
  if ((region_cfg->region_base & ~MPU_RBAR_BASE_Msk) != 0)
 c019c5c:	684a      	ldr	r2, [r1, #4]
{
 c019c5e:	b530      	push	{r4, r5, lr}
  if ((region_cfg->region_base & ~MPU_RBAR_BASE_Msk) != 0)
 c019c60:	f012 051f 	ands.w	r5, r2, #31
 c019c64:	d128      	bne.n	c019cb8 <mpu_armv8m_region_enable+0x5c>
  MPU_Type *mpu = (MPU_Type *)dev->base;
 c019c66:	6804      	ldr	r4, [r0, #0]
   */

  ctrl_before = mpu->CTRL;
  mpu->CTRL = 0;

  mpu->RNR  = region_cfg->region_nr & MPU_RNR_REGION_Msk;
 c019c68:	780b      	ldrb	r3, [r1, #0]
  ctrl_before = mpu->CTRL;
 c019c6a:	6860      	ldr	r0, [r4, #4]
  mpu->CTRL = 0;
 c019c6c:	6065      	str	r5, [r4, #4]
  mpu->RNR  = region_cfg->region_nr & MPU_RNR_REGION_Msk;
 c019c6e:	60a3      	str	r3, [r4, #8]

  /* This 0s the lower bits of the base address */
  base_cfg = region_cfg->region_base & MPU_RBAR_BASE_Msk;
  base_cfg |= (region_cfg->attr_sh << MPU_RBAR_SH_Pos) & MPU_RBAR_SH_Msk;
  base_cfg |= (region_cfg->attr_access << MPU_RBAR_AP_Pos) & MPU_RBAR_AP_Msk;
  base_cfg |= (region_cfg->attr_exec << MPU_RBAR_XN_Pos) & MPU_RBAR_XN_Msk;
 c019c70:	7c0b      	ldrb	r3, [r1, #16]
  base_cfg = region_cfg->region_base & MPU_RBAR_BASE_Msk;
 c019c72:	f022 021f 	bic.w	r2, r2, #31
  base_cfg |= (region_cfg->attr_exec << MPU_RBAR_XN_Pos) & MPU_RBAR_XN_Msk;
 c019c76:	f003 0301 	and.w	r3, r3, #1
 c019c7a:	4313      	orrs	r3, r2
  base_cfg |= (region_cfg->attr_sh << MPU_RBAR_SH_Pos) & MPU_RBAR_SH_Msk;
 c019c7c:	7c8a      	ldrb	r2, [r1, #18]
 c019c7e:	00d2      	lsls	r2, r2, #3
 c019c80:	f002 0218 	and.w	r2, r2, #24
 c019c84:	431a      	orrs	r2, r3
  base_cfg |= (region_cfg->attr_access << MPU_RBAR_AP_Pos) & MPU_RBAR_AP_Msk;
 c019c86:	7c4b      	ldrb	r3, [r1, #17]
 c019c88:	005b      	lsls	r3, r3, #1
 c019c8a:	f003 0306 	and.w	r3, r3, #6
  base_cfg |= (region_cfg->attr_exec << MPU_RBAR_XN_Pos) & MPU_RBAR_XN_Msk;
 c019c8e:	4313      	orrs	r3, r2

  mpu->RBAR = base_cfg;
 c019c90:	60e3      	str	r3, [r4, #12]

  /*This 0s the lower bits of base address but they are treated as 1 */
  limit_cfg = (region_cfg->region_limit - 1) & MPU_RLAR_LIMIT_Msk;
 c019c92:	688b      	ldr	r3, [r1, #8]
 c019c94:	3b01      	subs	r3, #1
 c019c96:	f023 021f 	bic.w	r2, r3, #31

  limit_cfg |= (region_cfg->region_attridx << MPU_RLAR_AttrIndx_Pos) &
 c019c9a:	68cb      	ldr	r3, [r1, #12]
 c019c9c:	005b      	lsls	r3, r3, #1
 c019c9e:	f003 030e 	and.w	r3, r3, #14
 c019ca2:	4313      	orrs	r3, r2
               MPU_RLAR_AttrIndx_Msk;

  limit_cfg |= MPU_RLAR_EN_Msk;
 c019ca4:	f043 0301 	orr.w	r3, r3, #1

  mpu->RLAR = limit_cfg;
 c019ca8:	6123      	str	r3, [r4, #16]

  /*Restore main MPU control*/
  mpu->CTRL = ctrl_before;
 c019caa:	6060      	str	r0, [r4, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 c019cac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 c019cb0:	f3bf 8f6f 	isb	sy

  /* Enable MPU before the next instruction */
  __DSB();
  __ISB();

  return ret_val;
 c019cb4:	4628      	mov	r0, r5
}
 c019cb6:	bd30      	pop	{r4, r5, pc}
    return MPU_ARMV8M_ERROR;
 c019cb8:	2001      	movs	r0, #1
 c019cba:	e7fc      	b.n	c019cb6 <mpu_armv8m_region_enable+0x5a>

0c019cbc <mpu_armv8m_region_disable>:
enum mpu_armv8m_error_t mpu_armv8m_region_disable(
  struct mpu_armv8m_dev_t *dev,
  uint32_t region_nr)
{

  MPU_Type *mpu = (MPU_Type *)dev->base;
 c019cbc:	6803      	ldr	r3, [r0, #0]
  uint32_t ctrl_before;

  /*FIXME : Add complete error checking*/

  ctrl_before = mpu->CTRL;
  mpu->CTRL = 0;
 c019cbe:	2000      	movs	r0, #0
  ctrl_before = mpu->CTRL;
 c019cc0:	685a      	ldr	r2, [r3, #4]

  mpu->RNR  = region_nr & MPU_RNR_REGION_Msk;
 c019cc2:	b2c9      	uxtb	r1, r1
  mpu->CTRL = 0;
 c019cc4:	6058      	str	r0, [r3, #4]
  mpu->RNR  = region_nr & MPU_RNR_REGION_Msk;
 c019cc6:	6099      	str	r1, [r3, #8]

  mpu->RBAR = 0;
 c019cc8:	60d8      	str	r0, [r3, #12]
  mpu->RLAR = 0;
 c019cca:	6118      	str	r0, [r3, #16]

  /*Restore main MPU control*/
  mpu->CTRL = ctrl_before;
 c019ccc:	605a      	str	r2, [r3, #4]

  return ret_val;
}
 c019cce:	4770      	bx	lr

0c019cd0 <mpu_armv8m_clean>:

enum mpu_armv8m_error_t mpu_armv8m_clean(struct mpu_armv8m_dev_t *dev)
{
 c019cd0:	b538      	push	{r3, r4, r5, lr}
 c019cd2:	4605      	mov	r5, r0
  MPU_Type *mpu = (MPU_Type *)dev->base;
 c019cd4:	6803      	ldr	r3, [r0, #0]
  uint32_t i = (mpu->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos;
 c019cd6:	681c      	ldr	r4, [r3, #0]
 c019cd8:	f3c4 2407 	ubfx	r4, r4, #8, #8

  while (i > 0)
 c019cdc:	b90c      	cbnz	r4, c019ce2 <mpu_armv8m_clean+0x12>
    i--;
  }

  return MPU_ARMV8M_OK;

}
 c019cde:	4620      	mov	r0, r4
 c019ce0:	bd38      	pop	{r3, r4, r5, pc}
    mpu_armv8m_region_disable(dev, i - 1);
 c019ce2:	3c01      	subs	r4, #1
 c019ce4:	4621      	mov	r1, r4
 c019ce6:	4628      	mov	r0, r5
 c019ce8:	f7ff ffe8 	bl	c019cbc <mpu_armv8m_region_disable>
 c019cec:	e7f6      	b.n	c019cdc <mpu_armv8m_clean+0xc>

0c019cee <tfm_spm_hal_init_isolation_hw>:

struct mpu_armv8m_dev_t dev_mpu_s = { MPU_BASE };
struct mpu_armv8m_dev_t dev_mpu_ns = { MPU_BASE_NS };

enum tfm_plat_err_t tfm_spm_hal_init_isolation_hw(void)
{
 c019cee:	b508      	push	{r3, lr}
  /* Configures non-secure memory spaces in the target */
  mpc_init_cfg();
 c019cf0:	f000 fb00 	bl	c01a2f4 <mpc_init_cfg>
  sau_and_idau_cfg();
 c019cf4:	f000 fa3c 	bl	c01a170 <sau_and_idau_cfg>
  ppc_init_cfg();
 c019cf8:	f000 fb2c 	bl	c01a354 <ppc_init_cfg>
  return TFM_PLAT_ERR_SUCCESS;
}
 c019cfc:	2000      	movs	r0, #0
 c019cfe:	bd08      	pop	{r3, pc}

0c019d00 <tfm_spm_hal_configure_default_isolation>:

void tfm_spm_hal_configure_default_isolation(
  const struct tfm_spm_partition_platform_data_t *platform_data)
{
  if (platform_data)
 c019d00:	b100      	cbz	r0, c019d04 <tfm_spm_hal_configure_default_isolation+0x4>
 c019d02:	e7fe      	b.n	c019d02 <tfm_spm_hal_configure_default_isolation+0x2>
  {
    /* fix me : not supported*/
    while (1);
  }

}
 c019d04:	4770      	bx	lr
	...

0c019d08 <tfm_spm_hal_setup_isolation_hw>:
}
#endif /* !defined(TFM_PSA_API) */
#endif /* TFM_LVL != 1 */

enum tfm_plat_err_t tfm_spm_hal_setup_isolation_hw(void)
{
 c019d08:	b570      	push	{r4, r5, r6, lr}
  mpu_armv8m_clean(&dev_mpu_s);
 c019d0a:	484c      	ldr	r0, [pc, #304]	; (c019e3c <tfm_spm_hal_setup_isolation_hw+0x134>)
{
 c019d0c:	b086      	sub	sp, #24
  mpu_armv8m_clean(&dev_mpu_s);
 c019d0e:	f7ff ffdf 	bl	c019cd0 <mpu_armv8m_clean>
  region_cfg.region_attridx = MPU_ARMV8M_MAIR_ATTR_CODE_IDX;
 c019d12:	2401      	movs	r4, #1
  region_cfg.region_nr = MPU_REGION_VENEERS;
 c019d14:	2300      	movs	r3, #0
  region_cfg.attr_access = MPU_ARMV8M_AP_RO_PRIV_UNPRIV;
 c019d16:	2603      	movs	r6, #3
  region_cfg.region_base = memory_regions.veneer_base;
 c019d18:	4a49      	ldr	r2, [pc, #292]	; (c019e40 <tfm_spm_hal_setup_isolation_hw+0x138>)
  if (mpu_armv8m_region_enable(&dev_mpu_s, &region_cfg) != MPU_ARMV8M_OK)
 c019d1a:	4848      	ldr	r0, [pc, #288]	; (c019e3c <tfm_spm_hal_setup_isolation_hw+0x134>)
  region_cfg.region_base = memory_regions.veneer_base;
 c019d1c:	68d1      	ldr	r1, [r2, #12]
  region_cfg.region_limit = memory_regions.veneer_limit;
 c019d1e:	6912      	ldr	r2, [r2, #16]
  region_cfg.region_base = memory_regions.veneer_base;
 c019d20:	9102      	str	r1, [sp, #8]
  if (mpu_armv8m_region_enable(&dev_mpu_s, &region_cfg) != MPU_ARMV8M_OK)
 c019d22:	a901      	add	r1, sp, #4
  region_cfg.region_nr = MPU_REGION_VENEERS;
 c019d24:	9301      	str	r3, [sp, #4]
  region_cfg.region_limit = memory_regions.veneer_limit;
 c019d26:	9203      	str	r2, [sp, #12]
  region_cfg.region_attridx = MPU_ARMV8M_MAIR_ATTR_CODE_IDX;
 c019d28:	9404      	str	r4, [sp, #16]
  region_cfg.attr_access = MPU_ARMV8M_AP_RO_PRIV_UNPRIV;
 c019d2a:	f88d 6015 	strb.w	r6, [sp, #21]
  region_cfg.attr_sh = MPU_ARMV8M_SH_NONE;
 c019d2e:	f88d 3016 	strb.w	r3, [sp, #22]
  region_cfg.attr_exec = MPU_ARMV8M_XN_EXEC_OK;
 c019d32:	f88d 3014 	strb.w	r3, [sp, #20]
  if (mpu_armv8m_region_enable(&dev_mpu_s, &region_cfg) != MPU_ARMV8M_OK)
 c019d36:	f7ff ff91 	bl	c019c5c <mpu_armv8m_region_enable>
 c019d3a:	b148      	cbz	r0, c019d50 <tfm_spm_hal_setup_isolation_hw+0x48>
#if TFM_LVL != 1
  if (tfm_spm_mpu_init() != SPM_ERR_OK)
  {
    ERROR_MSG("Failed to set up initial MPU configuration! Halting.");
 c019d3c:	4841      	ldr	r0, [pc, #260]	; (c019e44 <tfm_spm_hal_setup_isolation_hw+0x13c>)
 c019d3e:	f017 fbdb 	bl	c0314f8 <tfm_core_log_puts>
 c019d42:	4841      	ldr	r0, [pc, #260]	; (c019e48 <tfm_spm_hal_setup_isolation_hw+0x140>)
 c019d44:	f017 fbd8 	bl	c0314f8 <tfm_core_log_puts>
 c019d48:	4840      	ldr	r0, [pc, #256]	; (c019e4c <tfm_spm_hal_setup_isolation_hw+0x144>)
 c019d4a:	f017 fbd5 	bl	c0314f8 <tfm_core_log_puts>
 c019d4e:	e7fe      	b.n	c019d4e <tfm_spm_hal_setup_isolation_hw+0x46>
  region_cfg.region_base =
 c019d50:	4b3f      	ldr	r3, [pc, #252]	; (c019e50 <tfm_spm_hal_setup_isolation_hw+0x148>)
  region_cfg.attr_sh = MPU_ARMV8M_SH_NONE;
 c019d52:	f88d 0016 	strb.w	r0, [sp, #22]
  region_cfg.region_base =
 c019d56:	9302      	str	r3, [sp, #8]
  region_cfg.region_limit =
 c019d58:	4b3e      	ldr	r3, [pc, #248]	; (c019e54 <tfm_spm_hal_setup_isolation_hw+0x14c>)
  region_cfg.attr_exec = MPU_ARMV8M_XN_EXEC_OK;
 c019d5a:	f88d 0014 	strb.w	r0, [sp, #20]
  if (mpu_armv8m_region_enable(&dev_mpu_s, &region_cfg) != MPU_ARMV8M_OK)
 c019d5e:	a901      	add	r1, sp, #4
 c019d60:	4836      	ldr	r0, [pc, #216]	; (c019e3c <tfm_spm_hal_setup_isolation_hw+0x134>)
  region_cfg.region_nr = MPU_REGION_TFM_UNPRIV_CODE;
 c019d62:	9401      	str	r4, [sp, #4]
  region_cfg.region_attridx = MPU_ARMV8M_MAIR_ATTR_CODE_IDX;
 c019d64:	e9cd 3403 	strd	r3, r4, [sp, #12]
  region_cfg.attr_access = MPU_ARMV8M_AP_RO_PRIV_UNPRIV;
 c019d68:	f88d 6015 	strb.w	r6, [sp, #21]
  if (mpu_armv8m_region_enable(&dev_mpu_s, &region_cfg) != MPU_ARMV8M_OK)
 c019d6c:	f7ff ff76 	bl	c019c5c <mpu_armv8m_region_enable>
 c019d70:	2800      	cmp	r0, #0
 c019d72:	d1e3      	bne.n	c019d3c <tfm_spm_hal_setup_isolation_hw+0x34>
  region_cfg.region_nr = MPU_REGION_TFM_UNPRIV_DATA;
 c019d74:	2502      	movs	r5, #2
  region_cfg.region_base =
 c019d76:	4b38      	ldr	r3, [pc, #224]	; (c019e58 <tfm_spm_hal_setup_isolation_hw+0x150>)
  region_cfg.attr_sh = MPU_ARMV8M_SH_NONE;
 c019d78:	f88d 0016 	strb.w	r0, [sp, #22]
  region_cfg.region_base =
 c019d7c:	9302      	str	r3, [sp, #8]
  region_cfg.region_limit =
 c019d7e:	4b37      	ldr	r3, [pc, #220]	; (c019e5c <tfm_spm_hal_setup_isolation_hw+0x154>)
  if (mpu_armv8m_region_enable(&dev_mpu_s, &region_cfg) != MPU_ARMV8M_OK)
 c019d80:	a901      	add	r1, sp, #4
 c019d82:	482e      	ldr	r0, [pc, #184]	; (c019e3c <tfm_spm_hal_setup_isolation_hw+0x134>)
  region_cfg.region_nr = MPU_REGION_TFM_UNPRIV_DATA;
 c019d84:	9501      	str	r5, [sp, #4]
  region_cfg.region_attridx = MPU_ARMV8M_MAIR_ATTR_DATA_IDX;
 c019d86:	e9cd 3503 	strd	r3, r5, [sp, #12]
  region_cfg.attr_access = MPU_ARMV8M_AP_RW_PRIV_UNPRIV;
 c019d8a:	f88d 4015 	strb.w	r4, [sp, #21]
  region_cfg.attr_exec = MPU_ARMV8M_XN_EXEC_NEVER;
 c019d8e:	f88d 4014 	strb.w	r4, [sp, #20]
  if (mpu_armv8m_region_enable(&dev_mpu_s, &region_cfg) != MPU_ARMV8M_OK)
 c019d92:	f7ff ff63 	bl	c019c5c <mpu_armv8m_region_enable>
 c019d96:	2800      	cmp	r0, #0
 c019d98:	d1d0      	bne.n	c019d3c <tfm_spm_hal_setup_isolation_hw+0x34>
  region_cfg.region_base =
 c019d9a:	4b31      	ldr	r3, [pc, #196]	; (c019e60 <tfm_spm_hal_setup_isolation_hw+0x158>)
  region_cfg.attr_sh = MPU_ARMV8M_SH_NONE;
 c019d9c:	f88d 0016 	strb.w	r0, [sp, #22]
  region_cfg.region_base =
 c019da0:	9302      	str	r3, [sp, #8]
  region_cfg.region_limit =
 c019da2:	4b30      	ldr	r3, [pc, #192]	; (c019e64 <tfm_spm_hal_setup_isolation_hw+0x15c>)
  if (mpu_armv8m_region_enable(&dev_mpu_s, &region_cfg) != MPU_ARMV8M_OK)
 c019da4:	a901      	add	r1, sp, #4
 c019da6:	4825      	ldr	r0, [pc, #148]	; (c019e3c <tfm_spm_hal_setup_isolation_hw+0x134>)
  region_cfg.region_nr = MPU_REGION_NS_STACK;
 c019da8:	9601      	str	r6, [sp, #4]
  region_cfg.region_attridx = MPU_ARMV8M_MAIR_ATTR_DATA_IDX;
 c019daa:	e9cd 3503 	strd	r3, r5, [sp, #12]
  region_cfg.attr_access = MPU_ARMV8M_AP_RW_PRIV_UNPRIV;
 c019dae:	f88d 4015 	strb.w	r4, [sp, #21]
  region_cfg.attr_exec = MPU_ARMV8M_XN_EXEC_NEVER;
 c019db2:	f88d 4014 	strb.w	r4, [sp, #20]
  if (mpu_armv8m_region_enable(&dev_mpu_s, &region_cfg) != MPU_ARMV8M_OK)
 c019db6:	f7ff ff51 	bl	c019c5c <mpu_armv8m_region_enable>
 c019dba:	2800      	cmp	r0, #0
 c019dbc:	d1be      	bne.n	c019d3c <tfm_spm_hal_setup_isolation_hw+0x34>
  region_cfg.region_nr = PARTITION_REGION_RO;
 c019dbe:	2304      	movs	r3, #4
 c019dc0:	9301      	str	r3, [sp, #4]
  region_cfg.region_base =
 c019dc2:	4b29      	ldr	r3, [pc, #164]	; (c019e68 <tfm_spm_hal_setup_isolation_hw+0x160>)
  region_cfg.attr_sh = MPU_ARMV8M_SH_NONE;
 c019dc4:	f88d 0016 	strb.w	r0, [sp, #22]
  region_cfg.region_base =
 c019dc8:	9302      	str	r3, [sp, #8]
  region_cfg.region_limit =
 c019dca:	4b28      	ldr	r3, [pc, #160]	; (c019e6c <tfm_spm_hal_setup_isolation_hw+0x164>)
  region_cfg.attr_exec = MPU_ARMV8M_XN_EXEC_OK;
 c019dcc:	f88d 0014 	strb.w	r0, [sp, #20]
  if (mpu_armv8m_region_enable(&dev_mpu_s, &region_cfg) != MPU_ARMV8M_OK)
 c019dd0:	a901      	add	r1, sp, #4
 c019dd2:	481a      	ldr	r0, [pc, #104]	; (c019e3c <tfm_spm_hal_setup_isolation_hw+0x134>)
  region_cfg.region_attridx = MPU_ARMV8M_MAIR_ATTR_CODE_IDX;
 c019dd4:	e9cd 3403 	strd	r3, r4, [sp, #12]
  region_cfg.attr_access = MPU_ARMV8M_AP_RO_PRIV_UNPRIV;
 c019dd8:	f88d 6015 	strb.w	r6, [sp, #21]
  if (mpu_armv8m_region_enable(&dev_mpu_s, &region_cfg) != MPU_ARMV8M_OK)
 c019ddc:	f7ff ff3e 	bl	c019c5c <mpu_armv8m_region_enable>
 c019de0:	2800      	cmp	r0, #0
 c019de2:	d1ab      	bne.n	c019d3c <tfm_spm_hal_setup_isolation_hw+0x34>
  region_cfg.region_nr = PARTITION_REGION_RW_STACK;
 c019de4:	2305      	movs	r3, #5
 c019de6:	9301      	str	r3, [sp, #4]
  region_cfg.region_base =
 c019de8:	4b21      	ldr	r3, [pc, #132]	; (c019e70 <tfm_spm_hal_setup_isolation_hw+0x168>)
  region_cfg.attr_sh = MPU_ARMV8M_SH_NONE;
 c019dea:	f88d 0016 	strb.w	r0, [sp, #22]
  region_cfg.region_base =
 c019dee:	9302      	str	r3, [sp, #8]
  region_cfg.region_limit =
 c019df0:	4b20      	ldr	r3, [pc, #128]	; (c019e74 <tfm_spm_hal_setup_isolation_hw+0x16c>)
  if (mpu_armv8m_region_enable(&dev_mpu_s, &region_cfg) != MPU_ARMV8M_OK)
 c019df2:	a901      	add	r1, sp, #4
 c019df4:	4811      	ldr	r0, [pc, #68]	; (c019e3c <tfm_spm_hal_setup_isolation_hw+0x134>)
  region_cfg.region_attridx = MPU_ARMV8M_MAIR_ATTR_DATA_IDX;
 c019df6:	e9cd 3503 	strd	r3, r5, [sp, #12]
  region_cfg.attr_access = MPU_ARMV8M_AP_RW_PRIV_UNPRIV;
 c019dfa:	f88d 4015 	strb.w	r4, [sp, #21]
  region_cfg.attr_exec = MPU_ARMV8M_XN_EXEC_NEVER;
 c019dfe:	f88d 4014 	strb.w	r4, [sp, #20]
  if (mpu_armv8m_region_enable(&dev_mpu_s, &region_cfg) != MPU_ARMV8M_OK)
 c019e02:	f7ff ff2b 	bl	c019c5c <mpu_armv8m_region_enable>
 c019e06:	4605      	mov	r5, r0
 c019e08:	2800      	cmp	r0, #0
 c019e0a:	d197      	bne.n	c019d3c <tfm_spm_hal_setup_isolation_hw+0x34>
  mpu_armv8m_enable(&dev_mpu_s, PRIVILEGED_DEFAULT_ENABLE,
 c019e0c:	4622      	mov	r2, r4
 c019e0e:	4621      	mov	r1, r4
 c019e10:	480a      	ldr	r0, [pc, #40]	; (c019e3c <tfm_spm_hal_setup_isolation_hw+0x134>)
 c019e12:	f7ff ff09 	bl	c019c28 <mpu_armv8m_enable>
      ;
    }
  }
#endif /* TFM_LVL != 1 */
  return TFM_PLAT_ERR_SUCCESS;
}
 c019e16:	4628      	mov	r0, r5
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c019e18:	4b17      	ldr	r3, [pc, #92]	; (c019e78 <tfm_spm_hal_setup_isolation_hw+0x170>)
 c019e1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 c019e1c:	f042 0201 	orr.w	r2, r2, #1
 c019e20:	661a      	str	r2, [r3, #96]	; 0x60
 c019e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  SYSCFG->CSLCKR |= SYSCFG_CSLCKR_LOCKSMPU;
 c019e24:	4a15      	ldr	r2, [pc, #84]	; (c019e7c <tfm_spm_hal_setup_isolation_hw+0x174>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c019e26:	f003 0301 	and.w	r3, r3, #1
 c019e2a:	9300      	str	r3, [sp, #0]
 c019e2c:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->CSLCKR |= SYSCFG_CSLCKR_LOCKSMPU;
 c019e2e:	6913      	ldr	r3, [r2, #16]
 c019e30:	f043 0302 	orr.w	r3, r3, #2
 c019e34:	6113      	str	r3, [r2, #16]
}
 c019e36:	b006      	add	sp, #24
 c019e38:	bd70      	pop	{r4, r5, r6, pc}
 c019e3a:	bf00      	nop
 c019e3c:	30035b04 	.word	0x30035b04
 c019e40:	0c032d6c 	.word	0x0c032d6c
 c019e44:	0c032cd0 	.word	0x0c032cd0
 c019e48:	0c032cdf 	.word	0x0c032cdf
 c019e4c:	0c035863 	.word	0x0c035863
 c019e50:	0c0148c0 	.word	0x0c0148c0
 c019e54:	0c019740 	.word	0x0c019740
 c019e58:	30031000 	.word	0x30031000
 c019e5c:	30031020 	.word	0x30031020
 c019e60:	30030800 	.word	0x30030800
 c019e64:	30031000 	.word	0x30031000
 c019e68:	0c019740 	.word	0x0c019740
 c019e6c:	0c019740 	.word	0x0c019740
 c019e70:	30034b00 	.word	0x30034b00
 c019e74:	30034b00 	.word	0x30034b00
 c019e78:	50021000 	.word	0x50021000
 c019e7c:	50010000 	.word	0x50010000

0c019e80 <tfm_spm_hal_get_ns_VTOR>:

uint32_t tfm_spm_hal_get_ns_VTOR(void)
{
  return memory_regions.non_secure_code_start;
}
 c019e80:	4b01      	ldr	r3, [pc, #4]	; (c019e88 <tfm_spm_hal_get_ns_VTOR+0x8>)
 c019e82:	6818      	ldr	r0, [r3, #0]
 c019e84:	4770      	bx	lr
 c019e86:	bf00      	nop
 c019e88:	0c032d6c 	.word	0x0c032d6c

0c019e8c <tfm_spm_hal_get_ns_MSP>:

uint32_t tfm_spm_hal_get_ns_MSP(void)
{
  return *((uint32_t *)memory_regions.non_secure_code_start);
 c019e8c:	4b01      	ldr	r3, [pc, #4]	; (c019e94 <tfm_spm_hal_get_ns_MSP+0x8>)
 c019e8e:	681b      	ldr	r3, [r3, #0]
}
 c019e90:	6818      	ldr	r0, [r3, #0]
 c019e92:	4770      	bx	lr
 c019e94:	0c032d6c 	.word	0x0c032d6c

0c019e98 <tfm_spm_hal_get_ns_entry_point>:

uint32_t tfm_spm_hal_get_ns_entry_point(void)
{
  return *((uint32_t *)(memory_regions.non_secure_code_start + 4));
 c019e98:	4b01      	ldr	r3, [pc, #4]	; (c019ea0 <tfm_spm_hal_get_ns_entry_point+0x8>)
 c019e9a:	681b      	ldr	r3, [r3, #0]
}
 c019e9c:	6858      	ldr	r0, [r3, #4]
 c019e9e:	4770      	bx	lr
 c019ea0:	0c032d6c 	.word	0x0c032d6c

0c019ea4 <tfm_spm_hal_set_ns_mpu>:
  mpu_armv8m_enable(&dev_mpu_ns, PRIVILEGED_DEFAULT_ENABLE,
                    HARDFAULT_NMI_ENABLE);

  /* NS MPU config not locked: User choice. */
#endif
}
 c019ea4:	4770      	bx	lr
	...

0c019ea8 <tfm_spm_hal_set_secure_irq_priority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 c019ea8:	2800      	cmp	r0, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c019eaa:	bfac      	ite	ge
 c019eac:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c019eb0:	4b06      	ldrlt	r3, [pc, #24]	; (c019ecc <tfm_spm_hal_set_secure_irq_priority+0x24>)
 c019eb2:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c019eb6:	bfab      	itete	ge
 c019eb8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c019ebc:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c019ec0:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c019ec4:	5419      	strblt	r1, [r3, r0]
                                                        uint32_t priority)
{
  uint32_t quantized_priority = priority >> (8U - __NVIC_PRIO_BITS);
  NVIC_SetPriority(irq_line, quantized_priority);
  return TFM_PLAT_ERR_SUCCESS;
}
 c019ec6:	2000      	movs	r0, #0
 c019ec8:	4770      	bx	lr
 c019eca:	bf00      	nop
 c019ecc:	e000ed14 	.word	0xe000ed14

0c019ed0 <tfm_spm_hal_clear_pending_irq>:
  if ((int32_t)(IRQn) >= 0)
 c019ed0:	2800      	cmp	r0, #0
 c019ed2:	db09      	blt.n	c019ee8 <tfm_spm_hal_clear_pending_irq+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c019ed4:	2201      	movs	r2, #1
 c019ed6:	0943      	lsrs	r3, r0, #5
 c019ed8:	f000 001f 	and.w	r0, r0, #31
 c019edc:	fa02 f000 	lsl.w	r0, r2, r0
 c019ee0:	4a02      	ldr	r2, [pc, #8]	; (c019eec <tfm_spm_hal_clear_pending_irq+0x1c>)
 c019ee2:	3360      	adds	r3, #96	; 0x60
 c019ee4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]

void tfm_spm_hal_clear_pending_irq(IRQn_Type irq_line)
{
  NVIC_ClearPendingIRQ(irq_line);
}
 c019ee8:	4770      	bx	lr
 c019eea:	bf00      	nop
 c019eec:	e000e100 	.word	0xe000e100

0c019ef0 <tfm_spm_hal_enable_irq>:
  if ((int32_t)(IRQn) >= 0)
 c019ef0:	2800      	cmp	r0, #0
 c019ef2:	db08      	blt.n	c019f06 <tfm_spm_hal_enable_irq+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c019ef4:	2301      	movs	r3, #1
 c019ef6:	0942      	lsrs	r2, r0, #5
 c019ef8:	f000 001f 	and.w	r0, r0, #31
 c019efc:	fa03 f000 	lsl.w	r0, r3, r0
 c019f00:	4b01      	ldr	r3, [pc, #4]	; (c019f08 <tfm_spm_hal_enable_irq+0x18>)
 c019f02:	f843 0022 	str.w	r0, [r3, r2, lsl #2]

void tfm_spm_hal_enable_irq(IRQn_Type irq_line)
{
  NVIC_EnableIRQ(irq_line);
}
 c019f06:	4770      	bx	lr
 c019f08:	e000e100 	.word	0xe000e100

0c019f0c <tfm_spm_hal_disable_irq>:
  if ((int32_t)(IRQn) >= 0)
 c019f0c:	2800      	cmp	r0, #0
 c019f0e:	db0d      	blt.n	c019f2c <tfm_spm_hal_disable_irq+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c019f10:	2201      	movs	r2, #1
 c019f12:	0943      	lsrs	r3, r0, #5
 c019f14:	f000 001f 	and.w	r0, r0, #31
 c019f18:	fa02 f000 	lsl.w	r0, r2, r0
 c019f1c:	4a04      	ldr	r2, [pc, #16]	; (c019f30 <tfm_spm_hal_disable_irq+0x24>)
 c019f1e:	3320      	adds	r3, #32
 c019f20:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 c019f24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 c019f28:	f3bf 8f6f 	isb	sy

void tfm_spm_hal_disable_irq(IRQn_Type irq_line)
{
  NVIC_DisableIRQ(irq_line);
}
 c019f2c:	4770      	bx	lr
 c019f2e:	bf00      	nop
 c019f30:	e000e100 	.word	0xe000e100

0c019f34 <tfm_spm_hal_set_irq_target_state>:
  IRQn_Type irq_line,
  enum irq_target_state_t target_state)
{
  uint32_t result;

  if (target_state == TFM_IRQ_TARGET_STATE_SECURE)
 c019f34:	b9c9      	cbnz	r1, c019f6a <tfm_spm_hal_set_irq_target_state+0x36>
  if ((int32_t)(IRQn) >= 0)
 c019f36:	2800      	cmp	r0, #0
 c019f38:	db15      	blt.n	c019f66 <tfm_spm_hal_set_irq_target_state+0x32>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
 c019f3a:	2101      	movs	r1, #1
 c019f3c:	0943      	lsrs	r3, r0, #5
 c019f3e:	009b      	lsls	r3, r3, #2
 c019f40:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 c019f44:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 c019f48:	f8d3 2280 	ldr.w	r2, [r3, #640]	; 0x280
 c019f4c:	f000 001f 	and.w	r0, r0, #31
 c019f50:	4081      	lsls	r1, r0
 c019f52:	ea22 0201 	bic.w	r2, r2, r1
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
 c019f56:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 c019f5a:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
 c019f5e:	40c1      	lsrs	r1, r0
 c019f60:	f001 0101 	and.w	r1, r1, #1
    result = NVIC_SetTargetState(irq_line);
  }

  if (result)
  {
    return TFM_IRQ_TARGET_STATE_NON_SECURE;
 c019f64:	b2c9      	uxtb	r1, r1
  }
  else
  {
    return TFM_IRQ_TARGET_STATE_SECURE;
  }
}
 c019f66:	4608      	mov	r0, r1
 c019f68:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
 c019f6a:	2800      	cmp	r0, #0
 c019f6c:	db0d      	blt.n	c019f8a <tfm_spm_hal_set_irq_target_state+0x56>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
 c019f6e:	2201      	movs	r2, #1
 c019f70:	0943      	lsrs	r3, r0, #5
 c019f72:	009b      	lsls	r3, r3, #2
 c019f74:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 c019f78:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 c019f7c:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
 c019f80:	f000 001f 	and.w	r0, r0, #31
 c019f84:	4082      	lsls	r2, r0
 c019f86:	430a      	orrs	r2, r1
 c019f88:	e7e5      	b.n	c019f56 <tfm_spm_hal_set_irq_target_state+0x22>
    return TFM_IRQ_TARGET_STATE_SECURE;
 c019f8a:	2100      	movs	r1, #0
 c019f8c:	e7eb      	b.n	c019f66 <tfm_spm_hal_set_irq_target_state+0x32>

0c019f8e <tfm_spm_hal_enable_fault_handlers>:

enum tfm_plat_err_t tfm_spm_hal_enable_fault_handlers(void)
{
    return enable_fault_handlers();
 c019f8e:	f000 b87b 	b.w	c01a088 <enable_fault_handlers>

0c019f92 <tfm_spm_hal_system_reset_cfg>:

enum tfm_plat_err_t tfm_spm_hal_system_reset_cfg(void)
{
  /*    return system_reset_cfg();*/
  return TFM_PLAT_ERR_SUCCESS;
}
 c019f92:	2000      	movs	r0, #0
 c019f94:	4770      	bx	lr

0c019f96 <tfm_spm_hal_nvic_interrupt_target_state_cfg>:
 c019f96:	2000      	movs	r0, #0
 c019f98:	4770      	bx	lr

0c019f9a <tfm_spm_hal_nvic_interrupt_enable>:
 c019f9a:	2000      	movs	r0, #0
 c019f9c:	4770      	bx	lr
	...

0c019fa0 <SystemInit>:
void SystemInit(void)
{
  __IO uint32_t tmp;
#if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
  extern uint32_t __Vectors;
  SCB->VTOR = (uint32_t) &__Vectors;
 c019fa0:	4b0c      	ldr	r3, [pc, #48]	; (c019fd4 <SystemInit+0x34>)
 c019fa2:	4a0d      	ldr	r2, [pc, #52]	; (c019fd8 <SystemInit+0x38>)
{
 c019fa4:	b082      	sub	sp, #8
  SCB->VTOR = (uint32_t) &__Vectors;
 c019fa6:	609a      	str	r2, [r3, #8]
#endif /* __VTOR_PRESENT */
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 c019fa8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 c019fac:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 c019fb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* VECT_TAB_SRAM */


  /* Lock Secure Vector Table */
  /* Enable SYSCFG interface clock */
  RCC->APB2ENR       |= RCC_APB2ENR_SYSCFGEN;
 c019fb4:	4b09      	ldr	r3, [pc, #36]	; (c019fdc <SystemInit+0x3c>)
 c019fb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 c019fb8:	f042 0201 	orr.w	r2, r2, #1
 c019fbc:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmp = RCC->APB2ENR;
 c019fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  SYSCFG->CSLCKR |= SYSCFG_CSLCKR_LOCKSVTAIRCR;
 c019fc0:	4a07      	ldr	r2, [pc, #28]	; (c019fe0 <SystemInit+0x40>)
  tmp = RCC->APB2ENR;
 c019fc2:	9301      	str	r3, [sp, #4]
  SYSCFG->CSLCKR |= SYSCFG_CSLCKR_LOCKSVTAIRCR;
 c019fc4:	6913      	ldr	r3, [r2, #16]
 c019fc6:	f043 0301 	orr.w	r3, r3, #1
 c019fca:	6113      	str	r3, [r2, #16]
  (void)(tmp);
 c019fcc:	9b01      	ldr	r3, [sp, #4]

}
 c019fce:	b002      	add	sp, #8
 c019fd0:	4770      	bx	lr
 c019fd2:	bf00      	nop
 c019fd4:	e000ed00 	.word	0xe000ed00
 c019fd8:	0c014400 	.word	0x0c014400
 c019fdc:	50021000 	.word	0x50021000
 c019fe0:	50010000 	.word	0x50010000

0c019fe4 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if ((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c019fe4:	4a23      	ldr	r2, [pc, #140]	; (c01a074 <SystemCoreClockUpdate+0x90>)
  {
    /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c019fe6:	4924      	ldr	r1, [pc, #144]	; (c01a078 <SystemCoreClockUpdate+0x94>)
  if ((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c019fe8:	6813      	ldr	r3, [r2, #0]
{
 c019fea:	b510      	push	{r4, lr}
  if ((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c019fec:	071b      	lsls	r3, r3, #28
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c019fee:	bf54      	ite	pl
 c019ff0:	f8d2 3094 	ldrpl.w	r3, [r2, #148]	; 0x94
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c019ff4:	6813      	ldrmi	r3, [r2, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c019ff6:	6890      	ldr	r0, [r2, #8]
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c019ff8:	bf58      	it	pl
 c019ffa:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c019ffe:	f000 000c 	and.w	r0, r0, #12
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c01a002:	bf48      	it	mi
 c01a004:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c01a008:	2808      	cmp	r0, #8
  msirange = MSIRangeTable[msirange];
 c01a00a:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 c01a00e:	491b      	ldr	r1, [pc, #108]	; (c01a07c <SystemCoreClockUpdate+0x98>)
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c01a010:	d003      	beq.n	c01a01a <SystemCoreClockUpdate+0x36>
 c01a012:	280c      	cmp	r0, #12
 c01a014:	d00d      	beq.n	c01a032 <SystemCoreClockUpdate+0x4e>
 c01a016:	2804      	cmp	r0, #4
 c01a018:	d129      	bne.n	c01a06e <SystemCoreClockUpdate+0x8a>
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
      break;

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 c01a01a:	4b19      	ldr	r3, [pc, #100]	; (c01a080 <SystemCoreClockUpdate+0x9c>)
          pllvco = (msirange / pllm);
          break;
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
      SystemCoreClock = pllvco / pllr;
 c01a01c:	600b      	str	r3, [r1, #0]
      SystemCoreClock = msirange;
      break;
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c01a01e:	4b15      	ldr	r3, [pc, #84]	; (c01a074 <SystemCoreClockUpdate+0x90>)
 c01a020:	4a18      	ldr	r2, [pc, #96]	; (c01a084 <SystemCoreClockUpdate+0xa0>)
 c01a022:	689b      	ldr	r3, [r3, #8]
 c01a024:	f3c3 1303 	ubfx	r3, r3, #4, #4
 c01a028:	5cd2      	ldrb	r2, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c01a02a:	680b      	ldr	r3, [r1, #0]
 c01a02c:	40d3      	lsrs	r3, r2
 c01a02e:	600b      	str	r3, [r1, #0]
}
 c01a030:	bd10      	pop	{r4, pc}
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c01a032:	68d0      	ldr	r0, [r2, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c01a034:	68d3      	ldr	r3, [r2, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c01a036:	f000 0203 	and.w	r2, r0, #3
      switch (pllsource)
 c01a03a:	3a02      	subs	r2, #2
 c01a03c:	2a01      	cmp	r2, #1
          pllvco = (HSE_VALUE / pllm);
 c01a03e:	bf98      	it	ls
 c01a040:	4a0f      	ldrls	r2, [pc, #60]	; (c01a080 <SystemCoreClockUpdate+0x9c>)
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c01a042:	f3c3 1303 	ubfx	r3, r3, #4, #4
 c01a046:	f103 0301 	add.w	r3, r3, #1
          pllvco = (HSE_VALUE / pllm);
 c01a04a:	bf94      	ite	ls
 c01a04c:	fbb2 f3f3 	udivls	r3, r2, r3
          pllvco = (msirange / pllm);
 c01a050:	fbb4 f3f3 	udivhi	r3, r4, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c01a054:	4a07      	ldr	r2, [pc, #28]	; (c01a074 <SystemCoreClockUpdate+0x90>)
 c01a056:	68d0      	ldr	r0, [r2, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c01a058:	68d2      	ldr	r2, [r2, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c01a05a:	f3c0 2006 	ubfx	r0, r0, #8, #7
 c01a05e:	4343      	muls	r3, r0
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c01a060:	f3c2 6241 	ubfx	r2, r2, #25, #2
 c01a064:	3201      	adds	r2, #1
 c01a066:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco / pllr;
 c01a068:	fbb3 f3f2 	udiv	r3, r3, r2
 c01a06c:	e7d6      	b.n	c01a01c <SystemCoreClockUpdate+0x38>
      SystemCoreClock = msirange;
 c01a06e:	600c      	str	r4, [r1, #0]
      break;
 c01a070:	e7d5      	b.n	c01a01e <SystemCoreClockUpdate+0x3a>
 c01a072:	bf00      	nop
 c01a074:	50021000 	.word	0x50021000
 c01a078:	0c032d2c 	.word	0x0c032d2c
 c01a07c:	30035b08 	.word	0x30035b08
 c01a080:	00f42400 	.word	0x00f42400
 c01a084:	0c032d14 	.word	0x0c032d14

0c01a088 <enable_fault_handlers>:
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c01a088:	2000      	movs	r0, #0
 c01a08a:	4b03      	ldr	r3, [pc, #12]	; (c01a098 <enable_fault_handlers+0x10>)
 c01a08c:	76d8      	strb	r0, [r3, #27]

enum tfm_plat_err_t enable_fault_handlers(void)
{
  NVIC_SetPriority(SecureFault_IRQn, 0);
  /* Enables BUS, MEM, USG and Secure faults */
  SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk
 c01a08e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c01a090:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 c01a094:	625a      	str	r2, [r3, #36]	; 0x24
                | SCB_SHCSR_BUSFAULTENA_Msk
                | SCB_SHCSR_MEMFAULTENA_Msk
                | SCB_SHCSR_SECUREFAULTENA_Msk;
  return TFM_PLAT_ERR_SUCCESS;

}
 c01a096:	4770      	bx	lr
 c01a098:	e000ed00 	.word	0xe000ed00

0c01a09c <pinmux_conf_init_ns>:
}
/*----------------- GPIO Pin mux configuration for non secure --------------- */
/*  set all pin mux to un-secure */
void pinmux_conf_init_ns(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c01a09c:	4b32      	ldr	r3, [pc, #200]	; (c01a168 <pinmux_conf_init_ns+0xcc>)
{
 c01a09e:	b088      	sub	sp, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c01a0a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c01a0a2:	f042 0201 	orr.w	r2, r2, #1
 c01a0a6:	64da      	str	r2, [r3, #76]	; 0x4c
 c01a0a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c01a0aa:	f002 0201 	and.w	r2, r2, #1
 c01a0ae:	9200      	str	r2, [sp, #0]
 c01a0b0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c01a0b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c01a0b4:	f042 0202 	orr.w	r2, r2, #2
 c01a0b8:	64da      	str	r2, [r3, #76]	; 0x4c
 c01a0ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c01a0bc:	f002 0202 	and.w	r2, r2, #2
 c01a0c0:	9201      	str	r2, [sp, #4]
 c01a0c2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c01a0c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c01a0c6:	f042 0204 	orr.w	r2, r2, #4
 c01a0ca:	64da      	str	r2, [r3, #76]	; 0x4c
 c01a0cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c01a0ce:	f002 0204 	and.w	r2, r2, #4
 c01a0d2:	9202      	str	r2, [sp, #8]
 c01a0d4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 c01a0d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c01a0d8:	f042 0208 	orr.w	r2, r2, #8
 c01a0dc:	64da      	str	r2, [r3, #76]	; 0x4c
 c01a0de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c01a0e0:	f002 0208 	and.w	r2, r2, #8
 c01a0e4:	9203      	str	r2, [sp, #12]
 c01a0e6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 c01a0e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c01a0ea:	f042 0210 	orr.w	r2, r2, #16
 c01a0ee:	64da      	str	r2, [r3, #76]	; 0x4c
 c01a0f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c01a0f2:	f002 0210 	and.w	r2, r2, #16
 c01a0f6:	9204      	str	r2, [sp, #16]
 c01a0f8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 c01a0fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c01a0fc:	f042 0220 	orr.w	r2, r2, #32
 c01a100:	64da      	str	r2, [r3, #76]	; 0x4c
 c01a102:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c01a104:	f002 0220 	and.w	r2, r2, #32
 c01a108:	9205      	str	r2, [sp, #20]
 c01a10a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 c01a10c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c01a10e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 c01a112:	64da      	str	r2, [r3, #76]	; 0x4c
 c01a114:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c01a116:	f002 0240 	and.w	r2, r2, #64	; 0x40
 c01a11a:	9206      	str	r2, [sp, #24]
 c01a11c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 c01a11e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c01a120:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 c01a124:	64da      	str	r2, [r3, #76]	; 0x4c
 c01a126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  GPIOA_S->SECCFGR = 0x0;
 c01a128:	4a10      	ldr	r2, [pc, #64]	; (c01a16c <pinmux_conf_init_ns+0xd0>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 c01a12a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c01a12e:	9307      	str	r3, [sp, #28]
 c01a130:	9b07      	ldr	r3, [sp, #28]
  GPIOA_S->SECCFGR = 0x0;
 c01a132:	2300      	movs	r3, #0
 c01a134:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOB_S->SECCFGR = 0x0;
 c01a136:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  GPIOC_S->SECCFGR = 0x0;
 c01a13a:	f8c2 3830 	str.w	r3, [r2, #2096]	; 0x830
  GPIOD_S->SECCFGR = 0x0;
 c01a13e:	f8c2 3c30 	str.w	r3, [r2, #3120]	; 0xc30
  GPIOB_S->SECCFGR = 0x0;
 c01a142:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  GPIOE_S->SECCFGR = 0x0;
 c01a146:	f8c2 3c30 	str.w	r3, [r2, #3120]	; 0xc30
  GPIOC_S->SECCFGR = 0x0;
 c01a14a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  GPIOF_S->SECCFGR = 0x0;
 c01a14e:	f8c2 3c30 	str.w	r3, [r2, #3120]	; 0xc30
  GPIOD_S->SECCFGR = 0x0;
 c01a152:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  GPIOG_S->SECCFGR = 0x0;
 c01a156:	f8c2 3c30 	str.w	r3, [r2, #3120]	; 0xc30
  GPIOE_S->SECCFGR = 0x0;
 c01a15a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  GPIOH_S->SECCFGR = 0x0;
 c01a15e:	f8c2 3c30 	str.w	r3, [r2, #3120]	; 0xc30

}
 c01a162:	b008      	add	sp, #32
 c01a164:	4770      	bx	lr
 c01a166:	bf00      	nop
 c01a168:	50021000 	.word	0x50021000
 c01a16c:	52020000 	.word	0x52020000

0c01a170 <sau_and_idau_cfg>:
/*------------------- SAU/IDAU configuration functions -----------------------*/

void sau_and_idau_cfg(void)
{
  SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c01a170:	4a2d      	ldr	r2, [pc, #180]	; (c01a228 <sau_and_idau_cfg+0xb8>)
{
 c01a172:	b082      	sub	sp, #8
  SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c01a174:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 c01a178:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c01a17c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
               ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

  FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c01a180:	f8d2 3234 	ldr.w	r3, [r2, #564]	; 0x234
               ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos) & FPU_FPCCR_TS_Msk) |
 c01a184:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
               ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c01a188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
  FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c01a18c:	f8c2 3234 	str.w	r3, [r2, #564]	; 0x234
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
 c01a190:	4b26      	ldr	r3, [pc, #152]	; (c01a22c <sau_and_idau_cfg+0xbc>)
 c01a192:	681a      	ldr	r2, [r3, #0]
 c01a194:	f022 0201 	bic.w	r2, r2, #1
 c01a198:	601a      	str	r2, [r3, #0]

  /* Disable SAU */
  TZ_SAU_Disable();

  /* Configures SAU regions to be non-secure */
  SAU->RNR  = TFM_NS_REGION_CODE;
 c01a19a:	2200      	movs	r2, #0
 c01a19c:	609a      	str	r2, [r3, #8]
  SAU->RBAR = (memory_regions.non_secure_partition_base
 c01a19e:	4a24      	ldr	r2, [pc, #144]	; (c01a230 <sau_and_idau_cfg+0xc0>)
               & SAU_RBAR_BADDR_Msk);
 c01a1a0:	6851      	ldr	r1, [r2, #4]
 c01a1a2:	f021 011f 	bic.w	r1, r1, #31
  SAU->RBAR = (memory_regions.non_secure_partition_base
 c01a1a6:	60d9      	str	r1, [r3, #12]
  SAU->RLAR = (memory_regions.non_secure_partition_limit
 c01a1a8:	4922      	ldr	r1, [pc, #136]	; (c01a234 <sau_and_idau_cfg+0xc4>)
 c01a1aa:	6119      	str	r1, [r3, #16]
               & SAU_RLAR_LADDR_Msk)
              | SAU_RLAR_ENABLE_Msk;

  SAU->RNR  = TFM_NS_REGION_DATA;
 c01a1ac:	2101      	movs	r1, #1
 c01a1ae:	6099      	str	r1, [r3, #8]
  SAU->RBAR = (NS_DATA_START & SAU_RBAR_BADDR_Msk);
 c01a1b0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 c01a1b4:	60d9      	str	r1, [r3, #12]
  SAU->RLAR = (NS_DATA_LIMIT & SAU_RLAR_LADDR_Msk) | SAU_RLAR_ENABLE_Msk;
 c01a1b6:	f501 313f 	add.w	r1, r1, #195584	; 0x2fc00
 c01a1ba:	f201 31e1 	addw	r1, r1, #993	; 0x3e1
 c01a1be:	6119      	str	r1, [r3, #16]

  /* Configures veneers region to be non-secure callable */
  SAU->RNR  = TFM_NS_REGION_VENEER;
 c01a1c0:	2102      	movs	r1, #2
 c01a1c2:	6099      	str	r1, [r3, #8]
  SAU->RBAR = (memory_regions.veneer_base  & SAU_RBAR_BADDR_Msk);
 c01a1c4:	68d1      	ldr	r1, [r2, #12]
  SAU->RLAR = (memory_regions.veneer_limit & SAU_RLAR_LADDR_Msk)
 c01a1c6:	6912      	ldr	r2, [r2, #16]
  SAU->RBAR = (memory_regions.veneer_base  & SAU_RBAR_BADDR_Msk);
 c01a1c8:	f021 011f 	bic.w	r1, r1, #31
  SAU->RLAR = (memory_regions.veneer_limit & SAU_RLAR_LADDR_Msk)
 c01a1cc:	f022 021f 	bic.w	r2, r2, #31
              | SAU_RLAR_ENABLE_Msk
              | SAU_RLAR_NSC_Msk;
 c01a1d0:	f042 0203 	orr.w	r2, r2, #3
  SAU->RBAR = (memory_regions.veneer_base  & SAU_RBAR_BADDR_Msk);
 c01a1d4:	60d9      	str	r1, [r3, #12]
  SAU->RLAR = (memory_regions.veneer_limit & SAU_RLAR_LADDR_Msk)
 c01a1d6:	611a      	str	r2, [r3, #16]

  /* Configure the peripherals space */
  SAU->RNR  = TFM_NS_REGION_PERIPH_1;
 c01a1d8:	2203      	movs	r2, #3
 c01a1da:	609a      	str	r2, [r3, #8]
  SAU->RBAR = (PERIPHERALS_BASE_NS_START & SAU_RBAR_BADDR_Msk);
 c01a1dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c01a1e0:	60da      	str	r2, [r3, #12]
  SAU->RLAR = (PERIPHERALS_BASE_NS_END & SAU_RLAR_LADDR_Msk)
 c01a1e2:	4a15      	ldr	r2, [pc, #84]	; (c01a238 <sau_and_idau_cfg+0xc8>)
 c01a1e4:	611a      	str	r2, [r3, #16]
              | SAU_RLAR_ENABLE_Msk;
  /* Configure the peripherals space 2 to access package information */
  SAU->RNR  = TFM_NS_REGION_PERIPH_2;
 c01a1e6:	2204      	movs	r2, #4
 c01a1e8:	609a      	str	r2, [r3, #8]
  SAU->RBAR = (PACKAGE_BASE & SAU_RBAR_BADDR_Msk);
 c01a1ea:	4a14      	ldr	r2, [pc, #80]	; (c01a23c <sau_and_idau_cfg+0xcc>)
 c01a1ec:	60da      	str	r2, [r3, #12]
  SAU->RLAR = ((PACKAGE_BASE + 0xfff) & SAU_RLAR_LADDR_Msk)
 c01a1ee:	f602 72e1 	addw	r2, r2, #4065	; 0xfe1
 c01a1f2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 c01a1f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 c01a1f8:	f3bf 8f6f 	isb	sy
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
 c01a1fc:	681a      	ldr	r2, [r3, #0]
 c01a1fe:	f042 0201 	orr.w	r2, r2, #1
 c01a202:	601a      	str	r2, [r3, #0]

  /* Enable SAU */
  TZ_SAU_Enable();

  /* Lock SAU config */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c01a204:	4b0e      	ldr	r3, [pc, #56]	; (c01a240 <sau_and_idau_cfg+0xd0>)
 c01a206:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 c01a208:	f042 0201 	orr.w	r2, r2, #1
 c01a20c:	661a      	str	r2, [r3, #96]	; 0x60
 c01a20e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  SYSCFG->CSLCKR |= SYSCFG_CSLCKR_LOCKSAU;
 c01a210:	4a0c      	ldr	r2, [pc, #48]	; (c01a244 <sau_and_idau_cfg+0xd4>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c01a212:	f003 0301 	and.w	r3, r3, #1
 c01a216:	9301      	str	r3, [sp, #4]
 c01a218:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->CSLCKR |= SYSCFG_CSLCKR_LOCKSAU;
 c01a21a:	6913      	ldr	r3, [r2, #16]
 c01a21c:	f043 0304 	orr.w	r3, r3, #4
 c01a220:	6113      	str	r3, [r2, #16]
}
 c01a222:	b002      	add	sp, #8
 c01a224:	4770      	bx	lr
 c01a226:	bf00      	nop
 c01a228:	e000ed00 	.word	0xe000ed00
 c01a22c:	e000edd0 	.word	0xe000edd0
 c01a230:	0c032d6c 	.word	0x0c032d6c
 c01a234:	0807ffe1 	.word	0x0807ffe1
 c01a238:	4fffffe1 	.word	0x4fffffe1
 c01a23c:	0bfa0500 	.word	0x0bfa0500
 c01a240:	50021000 	.word	0x50021000
 c01a244:	50010000 	.word	0x50010000

0c01a248 <unsecure_sram1>:
void  unsecure_sram2(uint32_t start, uint32_t end);
void  lock_sram_config(uint32_t MemBaseAddress);

/*------------------- Memory configuration functions -------------------------*/
void  unsecure_sram1(uint32_t start, uint32_t end)
{
 c01a248:	b570      	push	{r4, r5, r6, lr}
  uint32_t regwrite = 0xffffffff;
  uint32_t index;
  uint32_t block_start = (start - 0x20000000) / (256);
  uint32_t block_end = block_start + ((end - start) + 1) / (256);

  if (start & 0xff)
 c01a24a:	f010 0fff 	tst.w	r0, #255	; 0xff
{
 c01a24e:	b09c      	sub	sp, #112	; 0x70
 c01a250:	4605      	mov	r5, r0
 c01a252:	460c      	mov	r4, r1
  if (start & 0xff)
 c01a254:	d000      	beq.n	c01a258 <unsecure_sram1+0x10>
 c01a256:	e7fe      	b.n	c01a256 <unsecure_sram1+0xe>
    /*  Check alignment to avoid futher problem  */
    /*  FIX ME  */
    while (1);

  if (HAL_GTZC_MPCBB_GetConfigMem(SRAM1_BASE, &MPCBB_desc) != HAL_OK)
 c01a258:	a901      	add	r1, sp, #4
 c01a25a:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c01a25e:	f000 fb95 	bl	c01a98c <HAL_GTZC_MPCBB_GetConfigMem>
 c01a262:	b100      	cbz	r0, c01a266 <unsecure_sram1+0x1e>
 c01a264:	e7fe      	b.n	c01a264 <unsecure_sram1+0x1c>
  uint32_t block_end = block_start + ((end - start) + 1) / (256);
 c01a266:	1c61      	adds	r1, r4, #1
  uint32_t block_start = (start - 0x20000000) / (256);
 c01a268:	f105 4260 	add.w	r2, r5, #3758096384	; 0xe0000000
  uint32_t block_end = block_start + ((end - start) + 1) / (256);
 c01a26c:	1b49      	subs	r1, r1, r5
  uint32_t regwrite = 0xffffffff;
 c01a26e:	f04f 33ff 	mov.w	r3, #4294967295
    {
      regwrite = 0xffffffff;
    }
    if ((index >= block_start) && (index < block_end))
    {
      regwrite = regwrite & ~(1 << (index & 0x1f));
 c01a272:	2501      	movs	r5, #1
  uint32_t block_start = (start - 0x20000000) / (256);
 c01a274:	0a12      	lsrs	r2, r2, #8
  uint32_t block_end = block_start + ((end - start) + 1) / (256);
 c01a276:	eb02 2111 	add.w	r1, r2, r1, lsr #8
    if (!(index & 0x1f))
 c01a27a:	f010 041f 	ands.w	r4, r0, #31
 c01a27e:	d01d      	beq.n	c01a2bc <unsecure_sram1+0x74>
    if ((index >= block_start) && (index < block_end))
 c01a280:	4282      	cmp	r2, r0
 c01a282:	d805      	bhi.n	c01a290 <unsecure_sram1+0x48>
 c01a284:	4281      	cmp	r1, r0
 c01a286:	d903      	bls.n	c01a290 <unsecure_sram1+0x48>
      regwrite = regwrite & ~(1 << (index & 0x1f));
 c01a288:	fa05 f604 	lsl.w	r6, r5, r4
 c01a28c:	ea23 0306 	bic.w	r3, r3, r6
    }
    /* write register when 32 sub block are set  */
    if ((index & 0x1f) == 0x1f)
 c01a290:	2c1f      	cmp	r4, #31
 c01a292:	d105      	bne.n	c01a2a0 <unsecure_sram1+0x58>
    {
      MPCBB_desc.AttributeConfig.MPCBB_SecConfig_array[index >> 5] = regwrite;
 c01a294:	0944      	lsrs	r4, r0, #5
 c01a296:	ae1c      	add	r6, sp, #112	; 0x70
 c01a298:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 c01a29c:	f844 3c64 	str.w	r3, [r4, #-100]
  for (index = 0; index < 768; index++)
 c01a2a0:	3001      	adds	r0, #1
 c01a2a2:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 c01a2a6:	d1e8      	bne.n	c01a27a <unsecure_sram1+0x32>
    }
  }
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_desc) != HAL_OK)
 c01a2a8:	a901      	add	r1, sp, #4
 c01a2aa:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c01a2ae:	f000 fb2d 	bl	c01a90c <HAL_GTZC_MPCBB_ConfigMem>
 c01a2b2:	b150      	cbz	r0, c01a2ca <unsecure_sram1+0x82>
 c01a2b4:	e7fe      	b.n	c01a2b4 <unsecure_sram1+0x6c>
      regwrite = 0xffffffff;
 c01a2b6:	f04f 33ff 	mov.w	r3, #4294967295
 c01a2ba:	e7e5      	b.n	c01a288 <unsecure_sram1+0x40>
    if ((index >= block_start) && (index < block_end))
 c01a2bc:	4282      	cmp	r2, r0
 c01a2be:	d801      	bhi.n	c01a2c4 <unsecure_sram1+0x7c>
 c01a2c0:	4281      	cmp	r1, r0
 c01a2c2:	d8f8      	bhi.n	c01a2b6 <unsecure_sram1+0x6e>
      regwrite = 0xffffffff;
 c01a2c4:	f04f 33ff 	mov.w	r3, #4294967295
 c01a2c8:	e7ea      	b.n	c01a2a0 <unsecure_sram1+0x58>
    /* FIX ME */
    while (1);

}
 c01a2ca:	b01c      	add	sp, #112	; 0x70
 c01a2cc:	bd70      	pop	{r4, r5, r6, pc}

0c01a2ce <lock_sram_config>:
    while (1);

}

void  lock_sram_config(uint32_t MemBaseAddress)
{
 c01a2ce:	b510      	push	{r4, lr}
 c01a2d0:	b09c      	sub	sp, #112	; 0x70
  MPCBB_ConfigTypeDef MPCBB_desc;
  uint32_t index;
  if (HAL_GTZC_MPCBB_GetConfigMem(MemBaseAddress, &MPCBB_desc) != HAL_OK)
 c01a2d2:	a901      	add	r1, sp, #4
{
 c01a2d4:	4604      	mov	r4, r0
  if (HAL_GTZC_MPCBB_GetConfigMem(MemBaseAddress, &MPCBB_desc) != HAL_OK)
 c01a2d6:	f000 fb59 	bl	c01a98c <HAL_GTZC_MPCBB_GetConfigMem>
 c01a2da:	b940      	cbnz	r0, c01a2ee <lock_sram_config+0x20>
    /* FIX ME */
    while (1);

  for (index = 0; index < GTZC_MCPBB_NB_LCK_VCTR_REG_MAX; index ++)
  {
    MPCBB_desc.AttributeConfig.MPCBB_LockConfig_array[index] = 0xffffffff;
 c01a2dc:	f04f 33ff 	mov.w	r3, #4294967295
  }
  if (HAL_GTZC_MPCBB_ConfigMem(MemBaseAddress, &MPCBB_desc) != HAL_OK)
 c01a2e0:	a901      	add	r1, sp, #4
 c01a2e2:	4620      	mov	r0, r4
    MPCBB_desc.AttributeConfig.MPCBB_LockConfig_array[index] = 0xffffffff;
 c01a2e4:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(MemBaseAddress, &MPCBB_desc) != HAL_OK)
 c01a2e6:	f000 fb11 	bl	c01a90c <HAL_GTZC_MPCBB_ConfigMem>
 c01a2ea:	b108      	cbz	r0, c01a2f0 <lock_sram_config+0x22>
 c01a2ec:	e7fe      	b.n	c01a2ec <lock_sram_config+0x1e>
 c01a2ee:	e7fe      	b.n	c01a2ee <lock_sram_config+0x20>
    /* FIX ME */
    while (1);
}
 c01a2f0:	b01c      	add	sp, #112	; 0x70
 c01a2f2:	bd10      	pop	{r4, pc}

0c01a2f4 <mpc_init_cfg>:

void mpc_init_cfg(void)
{
  /* Enable GTZC clock */
  __HAL_RCC_GTZC_CLK_ENABLE();
 c01a2f4:	4b12      	ldr	r3, [pc, #72]	; (c01a340 <mpc_init_cfg+0x4c>)
{
 c01a2f6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_GTZC_CLK_ENABLE();
 c01a2f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  /* assume non secure ram is only in SRAM 1 , SRAM 2 is reserved for secure */
  unsecure_sram1(NS_DATA_START, NS_DATA_START + NS_DATA_SIZE - 1);
 c01a2fa:	4912      	ldr	r1, [pc, #72]	; (c01a344 <mpc_init_cfg+0x50>)
  __HAL_RCC_GTZC_CLK_ENABLE();
 c01a2fc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 c01a300:	649a      	str	r2, [r3, #72]	; 0x48
 c01a302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  unsecure_sram1(NS_DATA_START, NS_DATA_START + NS_DATA_SIZE - 1);
 c01a304:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
  __HAL_RCC_GTZC_CLK_ENABLE();
 c01a308:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c01a30c:	9301      	str	r3, [sp, #4]
 c01a30e:	9b01      	ldr	r3, [sp, #4]
  unsecure_sram1(NS_DATA_START, NS_DATA_START + NS_DATA_SIZE - 1);
 c01a310:	f7ff ff9a 	bl	c01a248 <unsecure_sram1>
  lock_sram_config(SRAM1_BASE);
 c01a314:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c01a318:	f7ff ffd9 	bl	c01a2ce <lock_sram_config>
  lock_sram_config(SRAM2_BASE);
 c01a31c:	480a      	ldr	r0, [pc, #40]	; (c01a348 <mpc_init_cfg+0x54>)
 c01a31e:	f7ff ffd6 	bl	c01a2ce <lock_sram_config>

  /*  use sticky bit to lock all SRAM config  */
  /*  enable interruption on illegal access on FLASH */
  HAL_GTZC_TZIC_EnableIT(GTZC_PERIPH_FLASH);
 c01a322:	480a      	ldr	r0, [pc, #40]	; (c01a34c <mpc_init_cfg+0x58>)
 c01a324:	f000 fb66 	bl	c01a9f4 <HAL_GTZC_TZIC_EnableIT>

  /* Configure Secure peripherals */
  HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_RNG, GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_NPRIV);
 c01a328:	f240 3101 	movw	r1, #769	; 0x301
 c01a32c:	4808      	ldr	r0, [pc, #32]	; (c01a350 <mpc_init_cfg+0x5c>)
 c01a32e:	f000 fa7b 	bl	c01a828 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
  __ASM volatile ("dsb 0xF":::"memory");
 c01a332:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 c01a336:	f3bf 8f6f 	isb	sy
  /* Add barriers to assure the MPC configuration is done before continue
   * the execution.
   */
  __DSB();
  __ISB();
}
 c01a33a:	b003      	add	sp, #12
 c01a33c:	f85d fb04 	ldr.w	pc, [sp], #4
 c01a340:	50021000 	.word	0x50021000
 c01a344:	2002ffff 	.word	0x2002ffff
 c01a348:	30030000 	.word	0x30030000
 c01a34c:	1000001a 	.word	0x1000001a
 c01a350:	1000000e 	.word	0x1000000e

0c01a354 <ppc_init_cfg>:
/*---------------------- PPC configuration functions -------------------------*/

void ppc_init_cfg(void)
{
  /*  pinmux is secured after reset : configure all pin mux as non secure*/
  pinmux_conf_init_ns();
 c01a354:	f7ff bea2 	b.w	c01a09c <pinmux_conf_init_ns>

0c01a358 <tfm_spm_hal_init_debug>:
 c01a358:	4770      	bx	lr
	...

0c01a35c <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 c01a35c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 c01a360:	4905      	ldr	r1, [pc, #20]	; (c01a378 <__NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 c01a362:	4b06      	ldr	r3, [pc, #24]	; (c01a37c <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 c01a364:	68ca      	ldr	r2, [r1, #12]
 c01a366:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 c01a36a:	4313      	orrs	r3, r2
 c01a36c:	60cb      	str	r3, [r1, #12]
 c01a36e:	f3bf 8f4f 	dsb	sy
    __NOP();
 c01a372:	bf00      	nop
 c01a374:	e7fd      	b.n	c01a372 <__NVIC_SystemReset+0x16>
 c01a376:	bf00      	nop
 c01a378:	e000ed00 	.word	0xe000ed00
 c01a37c:	05fa0004 	.word	0x05fa0004

0c01a380 <Error_Handler>:
 */

#include "platform/include/tfm_platform_system.h"
#include "cmsis.h"
void Error_Handler(void)
{
 c01a380:	b508      	push	{r3, lr}
	/* Reset the system */
    NVIC_SystemReset();
 c01a382:	f7ff ffeb 	bl	c01a35c <__NVIC_SystemReset>
	...

0c01a388 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 c01a388:	4b01      	ldr	r3, [pc, #4]	; (c01a390 <HAL_GetTick+0x8>)
 c01a38a:	6818      	ldr	r0, [r3, #0]
}
 c01a38c:	4770      	bx	lr
 c01a38e:	bf00      	nop
 c01a390:	3003f284 	.word	0x3003f284

0c01a394 <FLASH_Program_DoubleWord>:
  __IO uint32_t *reg;
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
  
  /* Access to SECCR or NSCR registers depends on operation type */
  reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 c01a394:	490b      	ldr	r1, [pc, #44]	; (c01a3c4 <FLASH_Program_DoubleWord+0x30>)
{
 c01a396:	b530      	push	{r4, r5, lr}
  reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 c01a398:	688d      	ldr	r5, [r1, #8]
 c01a39a:	4c0b      	ldr	r4, [pc, #44]	; (c01a3c8 <FLASH_Program_DoubleWord+0x34>)
 c01a39c:	490b      	ldr	r1, [pc, #44]	; (c01a3cc <FLASH_Program_DoubleWord+0x38>)
 c01a39e:	ea31 0125 	bics.w	r1, r1, r5, asr #32
 c01a3a2:	bf28      	it	cs
 c01a3a4:	4621      	movcs	r1, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 c01a3a6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 c01a3aa:	b672      	cpsid	i
  /* Disable interrupts to avoid any interruption during the double word programming */
  primask_bit = __get_PRIMASK();
  __disable_irq();

  /* Set PG bit */
  SET_BIT((*reg), FLASH_NSCR_NSPG);
 c01a3ac:	680c      	ldr	r4, [r1, #0]
 c01a3ae:	f044 0401 	orr.w	r4, r4, #1
 c01a3b2:	600c      	str	r4, [r1, #0]

  /* Program first word */
  *(uint32_t*)Address = (uint32_t)Data;
 c01a3b4:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 c01a3b6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t*)(Address+4U) = (uint32_t)(Data >> 32U);
 c01a3ba:	6043      	str	r3, [r0, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 c01a3bc:	f385 8810 	msr	PRIMASK, r5

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 c01a3c0:	bd30      	pop	{r4, r5, pc}
 c01a3c2:	bf00      	nop
 c01a3c4:	30035b0c 	.word	0x30035b0c
 c01a3c8:	40022028 	.word	0x40022028
 c01a3cc:	5002202c 	.word	0x5002202c

0c01a3d0 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK) != 0u)
 c01a3d0:	4b0d      	ldr	r3, [pc, #52]	; (c01a408 <HAL_FLASH_Unlock+0x38>)
 c01a3d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 c01a3d4:	2a00      	cmp	r2, #0
 c01a3d6:	461a      	mov	r2, r3
 c01a3d8:	db04      	blt.n	c01a3e4 <HAL_FLASH_Unlock+0x14>
    if(READ_BIT(FLASH->SECCR, FLASH_SECCR_SECLOCK) != 0u)
 c01a3da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 c01a3dc:	2b00      	cmp	r3, #0
 c01a3de:	db0b      	blt.n	c01a3f8 <HAL_FLASH_Unlock+0x28>
 c01a3e0:	2000      	movs	r0, #0
 c01a3e2:	4770      	bx	lr
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 c01a3e4:	4909      	ldr	r1, [pc, #36]	; (c01a40c <HAL_FLASH_Unlock+0x3c>)
 c01a3e6:	6099      	str	r1, [r3, #8]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 c01a3e8:	f101 3188 	add.w	r1, r1, #2290649224	; 0x88888888
 c01a3ec:	6099      	str	r1, [r3, #8]
    if (READ_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK) != 0u)
 c01a3ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c01a3f0:	2b00      	cmp	r3, #0
 c01a3f2:	daf2      	bge.n	c01a3da <HAL_FLASH_Unlock+0xa>
      status = HAL_ERROR;
 c01a3f4:	2001      	movs	r0, #1
}
 c01a3f6:	4770      	bx	lr
      WRITE_REG(FLASH->SECKEYR, FLASH_KEY1);
 c01a3f8:	4b04      	ldr	r3, [pc, #16]	; (c01a40c <HAL_FLASH_Unlock+0x3c>)
 c01a3fa:	60d3      	str	r3, [r2, #12]
      WRITE_REG(FLASH->SECKEYR, FLASH_KEY2);
 c01a3fc:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 c01a400:	60d3      	str	r3, [r2, #12]
      if (READ_BIT(FLASH->SECCR, FLASH_SECCR_SECLOCK) != 0u)
 c01a402:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
      status = HAL_ERROR;
 c01a404:	0fc0      	lsrs	r0, r0, #31
 c01a406:	4770      	bx	lr
 c01a408:	50022000 	.word	0x50022000
 c01a40c:	45670123 	.word	0x45670123

0c01a410 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK);
 c01a410:	4b08      	ldr	r3, [pc, #32]	; (c01a434 <HAL_FLASH_Lock+0x24>)
 c01a412:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 c01a414:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 c01a418:	629a      	str	r2, [r3, #40]	; 0x28
  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK) != 0u)
 c01a41a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 c01a41c:	2a00      	cmp	r2, #0
    SET_BIT(FLASH->SECCR, FLASH_SECCR_SECLOCK);
 c01a41e:	bfbf      	itttt	lt
 c01a420:	6ada      	ldrlt	r2, [r3, #44]	; 0x2c
    status = HAL_OK;
 c01a422:	2000      	movlt	r0, #0
    SET_BIT(FLASH->SECCR, FLASH_SECCR_SECLOCK);
 c01a424:	f042 4200 	orrlt.w	r2, r2, #2147483648	; 0x80000000
 c01a428:	62da      	strlt	r2, [r3, #44]	; 0x2c
    if (READ_BIT(FLASH->SECCR, FLASH_SECCR_SECLOCK) != 0u)
 c01a42a:	bfb4      	ite	lt
 c01a42c:	6adb      	ldrlt	r3, [r3, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_ERROR;
 c01a42e:	2001      	movge	r0, #1
}
 c01a430:	4770      	bx	lr
 c01a432:	bf00      	nop
 c01a434:	50022000 	.word	0x50022000

0c01a438 <FLASH_WaitForLastOperation>:
{
 c01a438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 c01a43a:	4d1a      	ldr	r5, [pc, #104]	; (c01a4a4 <FLASH_WaitForLastOperation+0x6c>)
{
 c01a43c:	4606      	mov	r6, r0
  uint32_t timeout = HAL_GetTick() + Timeout;
 c01a43e:	f7ff ffa3 	bl	c01a388 <HAL_GetTick>
 c01a442:	462c      	mov	r4, r5
 c01a444:	1987      	adds	r7, r0, r6
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 c01a446:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 c01a448:	03da      	lsls	r2, r3, #15
 c01a44a:	d41a      	bmi.n	c01a482 <FLASH_WaitForLastOperation+0x4a>
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 c01a44c:	4b16      	ldr	r3, [pc, #88]	; (c01a4a8 <FLASH_WaitForLastOperation+0x70>)
 c01a44e:	4a17      	ldr	r2, [pc, #92]	; (c01a4ac <FLASH_WaitForLastOperation+0x74>)
 c01a450:	6898      	ldr	r0, [r3, #8]
 c01a452:	4917      	ldr	r1, [pc, #92]	; (c01a4b0 <FLASH_WaitForLastOperation+0x78>)
 c01a454:	ea31 0120 	bics.w	r1, r1, r0, asr #32
 c01a458:	bf28      	it	cs
 c01a45a:	4611      	movcs	r1, r2
  error = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 c01a45c:	680a      	ldr	r2, [r1, #0]
  error |= (FLASH->NSSR & FLASH_FLAG_OPTWERR);
 c01a45e:	6a20      	ldr	r0, [r4, #32]
  error = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 c01a460:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
  error |= (FLASH->NSSR & FLASH_FLAG_OPTWERR);
 c01a464:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
  if(error != 0u)
 c01a468:	4302      	orrs	r2, r0
 c01a46a:	d012      	beq.n	c01a492 <FLASH_WaitForLastOperation+0x5a>
    pFlash.ErrorCode |= error;
 c01a46c:	6858      	ldr	r0, [r3, #4]
 c01a46e:	4310      	orrs	r0, r2
 c01a470:	6058      	str	r0, [r3, #4]
    if ((error & FLASH_FLAG_OPTWERR) != 0U)
 c01a472:	0493      	lsls	r3, r2, #18
    (*reg_sr) = error;
 c01a474:	600a      	str	r2, [r1, #0]
    if ((error & FLASH_FLAG_OPTWERR) != 0U)
 c01a476:	d502      	bpl.n	c01a47e <FLASH_WaitForLastOperation+0x46>
      FLASH->NSSR = FLASH_FLAG_OPTWERR;
 c01a478:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 c01a47c:	6223      	str	r3, [r4, #32]
    return HAL_ERROR;
 c01a47e:	2001      	movs	r0, #1
 c01a480:	e00e      	b.n	c01a4a0 <FLASH_WaitForLastOperation+0x68>
    if(Timeout != HAL_MAX_DELAY)
 c01a482:	1c71      	adds	r1, r6, #1
 c01a484:	d0df      	beq.n	c01a446 <FLASH_WaitForLastOperation+0xe>
      if(HAL_GetTick() >= timeout)
 c01a486:	f7ff ff7f 	bl	c01a388 <HAL_GetTick>
 c01a48a:	42b8      	cmp	r0, r7
 c01a48c:	d3db      	bcc.n	c01a446 <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 c01a48e:	2003      	movs	r0, #3
 c01a490:	e006      	b.n	c01a4a0 <FLASH_WaitForLastOperation+0x68>
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 c01a492:	6808      	ldr	r0, [r1, #0]
 c01a494:	f010 0001 	ands.w	r0, r0, #1
 c01a498:	d002      	beq.n	c01a4a0 <FLASH_WaitForLastOperation+0x68>
    (*reg_sr) = FLASH_FLAG_EOP;
 c01a49a:	2301      	movs	r3, #1
  return HAL_OK;
 c01a49c:	4610      	mov	r0, r2
    (*reg_sr) = FLASH_FLAG_EOP;
 c01a49e:	600b      	str	r3, [r1, #0]
}
 c01a4a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c01a4a2:	bf00      	nop
 c01a4a4:	50022000 	.word	0x50022000
 c01a4a8:	30035b0c 	.word	0x30035b0c
 c01a4ac:	40022020 	.word	0x40022020
 c01a4b0:	50022024 	.word	0x50022024

0c01a4b4 <HAL_FLASH_Program>:
{
 c01a4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 c01a4b8:	4c16      	ldr	r4, [pc, #88]	; (c01a514 <HAL_FLASH_Program+0x60>)
{
 c01a4ba:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 c01a4bc:	7823      	ldrb	r3, [r4, #0]
{
 c01a4be:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 c01a4c0:	2b01      	cmp	r3, #1
{
 c01a4c2:	4688      	mov	r8, r1
 c01a4c4:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 c01a4c6:	d023      	beq.n	c01a510 <HAL_FLASH_Program+0x5c>
 c01a4c8:	2301      	movs	r3, #1
 c01a4ca:	7023      	strb	r3, [r4, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 c01a4cc:	2300      	movs	r3, #0
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 c01a4ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 c01a4d2:	6063      	str	r3, [r4, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 c01a4d4:	f7ff ffb0 	bl	c01a438 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 c01a4d8:	b9b0      	cbnz	r0, c01a508 <HAL_FLASH_Program+0x54>
    reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 c01a4da:	4a0f      	ldr	r2, [pc, #60]	; (c01a518 <HAL_FLASH_Program+0x64>)
 c01a4dc:	4b0f      	ldr	r3, [pc, #60]	; (c01a51c <HAL_FLASH_Program+0x68>)
    pFlash.ProcedureOnGoing = TypeProgram;
 c01a4de:	60a5      	str	r5, [r4, #8]
    reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 c01a4e0:	ea32 0525 	bics.w	r5, r2, r5, asr #32
 c01a4e4:	bf28      	it	cs
 c01a4e6:	461d      	movcs	r5, r3
    FLASH_Program_DoubleWord(Address, Data);
 c01a4e8:	4640      	mov	r0, r8
 c01a4ea:	4632      	mov	r2, r6
 c01a4ec:	463b      	mov	r3, r7
 c01a4ee:	f7ff ff51 	bl	c01a394 <FLASH_Program_DoubleWord>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 c01a4f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 c01a4f6:	f7ff ff9f 	bl	c01a438 <FLASH_WaitForLastOperation>
    CLEAR_BIT((*reg), (pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)));
 c01a4fa:	68a2      	ldr	r2, [r4, #8]
 c01a4fc:	682b      	ldr	r3, [r5, #0]
 c01a4fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 c01a502:	ea23 0302 	bic.w	r3, r3, r2
 c01a506:	602b      	str	r3, [r5, #0]
  __HAL_UNLOCK(&pFlash);
 c01a508:	2300      	movs	r3, #0
 c01a50a:	7023      	strb	r3, [r4, #0]
}
 c01a50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(&pFlash);
 c01a510:	2002      	movs	r0, #2
 c01a512:	e7fb      	b.n	c01a50c <HAL_FLASH_Program+0x58>
 c01a514:	30035b0c 	.word	0x30035b0c
 c01a518:	5002202c 	.word	0x5002202c
 c01a51c:	40022028 	.word	0x40022028

0c01a520 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 c01a520:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 c01a522:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 c01a526:	b672      	cpsid	i
  primask_bit = __get_PRIMASK();
  __disable_irq();
#endif
  
  /* Access to SECCR or NSCR registers depends on operation type */
  reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 c01a528:	4b12      	ldr	r3, [pc, #72]	; (c01a574 <FLASH_MassErase+0x54>)
 c01a52a:	4a13      	ldr	r2, [pc, #76]	; (c01a578 <FLASH_MassErase+0x58>)
 c01a52c:	689c      	ldr	r4, [r3, #8]
 c01a52e:	4b13      	ldr	r3, [pc, #76]	; (c01a57c <FLASH_MassErase+0x5c>)
 c01a530:	ea33 0324 	bics.w	r3, r3, r4, asr #32
 c01a534:	bf28      	it	cs
 c01a536:	4613      	movcs	r3, r2

  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 c01a538:	4a11      	ldr	r2, [pc, #68]	; (c01a580 <FLASH_MassErase+0x60>)
 c01a53a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 c01a53c:	0252      	lsls	r2, r2, #9
 c01a53e:	d512      	bpl.n	c01a566 <FLASH_MassErase+0x46>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 c01a540:	07c4      	lsls	r4, r0, #31
    {
      SET_BIT((*reg), FLASH_NSCR_NSMER1);
 c01a542:	bf42      	ittt	mi
 c01a544:	681a      	ldrmi	r2, [r3, #0]
 c01a546:	f042 0204 	orrmi.w	r2, r2, #4
 c01a54a:	601a      	strmi	r2, [r3, #0]
    }

    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 c01a54c:	0782      	lsls	r2, r0, #30
 c01a54e:	d503      	bpl.n	c01a558 <FLASH_MassErase+0x38>
    {
      SET_BIT((*reg), FLASH_NSCR_NSMER2);
 c01a550:	681a      	ldr	r2, [r3, #0]
 c01a552:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    }
  }
  else
  {
    SET_BIT((*reg), (FLASH_NSCR_NSMER1 | FLASH_NSCR_NSMER2));
 c01a556:	601a      	str	r2, [r3, #0]
  }

  /* Proceed to erase all sectors */
  SET_BIT((*reg), FLASH_NSCR_NSSTRT);
 c01a558:	681a      	ldr	r2, [r3, #0]
 c01a55a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 c01a55e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 c01a560:	f381 8810 	msr	PRIMASK, r1

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
#endif
}
 c01a564:	bd10      	pop	{r4, pc}
    SET_BIT((*reg), (FLASH_NSCR_NSMER1 | FLASH_NSCR_NSMER2));
 c01a566:	681a      	ldr	r2, [r3, #0]
 c01a568:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 c01a56c:	f042 0204 	orr.w	r2, r2, #4
 c01a570:	e7f1      	b.n	c01a556 <FLASH_MassErase+0x36>
 c01a572:	bf00      	nop
 c01a574:	30035b0c 	.word	0x30035b0c
 c01a578:	40022028 	.word	0x40022028
 c01a57c:	5002202c 	.word	0x5002202c
 c01a580:	50022000 	.word	0x50022000

0c01a584 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 c01a584:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 c01a586:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 c01a58a:	b672      	cpsid	i
  primask_bit = __get_PRIMASK();
  __disable_irq();
#endif

  /* Access to SECCR or NSCR registers depends on operation type */
  reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 c01a58c:	4b13      	ldr	r3, [pc, #76]	; (c01a5dc <FLASH_PageErase+0x58>)
 c01a58e:	4a14      	ldr	r2, [pc, #80]	; (c01a5e0 <FLASH_PageErase+0x5c>)
 c01a590:	689d      	ldr	r5, [r3, #8]
 c01a592:	4b14      	ldr	r3, [pc, #80]	; (c01a5e4 <FLASH_PageErase+0x60>)
 c01a594:	ea33 0325 	bics.w	r3, r3, r5, asr #32
 c01a598:	bf28      	it	cs
 c01a59a:	4613      	movcs	r3, r2

  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 c01a59c:	4a12      	ldr	r2, [pc, #72]	; (c01a5e8 <FLASH_PageErase+0x64>)
 c01a59e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 c01a5a0:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
  {
    CLEAR_BIT((*reg), FLASH_NSCR_NSBKER);
 c01a5a4:	681a      	ldr	r2, [r3, #0]
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 c01a5a6:	d113      	bne.n	c01a5d0 <FLASH_PageErase+0x4c>
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
    {
      CLEAR_BIT((*reg), FLASH_NSCR_NSBKER);
 c01a5a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    }
    else
    {
      SET_BIT((*reg), FLASH_NSCR_NSBKER);
 c01a5ac:	601a      	str	r2, [r3, #0]
    }
  }

  /* Proceed to erase the page */
  MODIFY_REG((*reg), (FLASH_NSCR_NSPNB | FLASH_NSCR_NSPER), ((Page << FLASH_NSCR_NSPNB_Pos) | FLASH_NSCR_NSPER));
 c01a5ae:	681a      	ldr	r2, [r3, #0]
 c01a5b0:	00c0      	lsls	r0, r0, #3
 c01a5b2:	f422 727e 	bic.w	r2, r2, #1016	; 0x3f8
 c01a5b6:	f022 0202 	bic.w	r2, r2, #2
 c01a5ba:	f040 0002 	orr.w	r0, r0, #2
 c01a5be:	4310      	orrs	r0, r2
 c01a5c0:	6018      	str	r0, [r3, #0]
  SET_BIT((*reg), FLASH_NSCR_NSSTRT);
 c01a5c2:	681a      	ldr	r2, [r3, #0]
 c01a5c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 c01a5c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 c01a5ca:	f384 8810 	msr	PRIMASK, r4

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
#endif
}
 c01a5ce:	bd30      	pop	{r4, r5, pc}
    if((Banks & FLASH_BANK_1) != 0U)
 c01a5d0:	07c9      	lsls	r1, r1, #31
 c01a5d2:	d4e9      	bmi.n	c01a5a8 <FLASH_PageErase+0x24>
      SET_BIT((*reg), FLASH_NSCR_NSBKER);
 c01a5d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 c01a5d8:	e7e8      	b.n	c01a5ac <FLASH_PageErase+0x28>
 c01a5da:	bf00      	nop
 c01a5dc:	30035b0c 	.word	0x30035b0c
 c01a5e0:	40022028 	.word	0x40022028
 c01a5e4:	5002202c 	.word	0x5002202c
 c01a5e8:	50022000 	.word	0x50022000

0c01a5ec <HAL_FLASHEx_Erase>:
{
 c01a5ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 c01a5f0:	4c26      	ldr	r4, [pc, #152]	; (c01a68c <HAL_FLASHEx_Erase+0xa0>)
{
 c01a5f2:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 c01a5f4:	7823      	ldrb	r3, [r4, #0]
{
 c01a5f6:	4689      	mov	r9, r1
  __HAL_LOCK(&pFlash);
 c01a5f8:	2b01      	cmp	r3, #1
 c01a5fa:	d045      	beq.n	c01a688 <HAL_FLASHEx_Erase+0x9c>
 c01a5fc:	2301      	movs	r3, #1
 c01a5fe:	7023      	strb	r3, [r4, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 c01a600:	2300      	movs	r3, #0
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 c01a602:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 c01a606:	6063      	str	r3, [r4, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 c01a608:	f7ff ff16 	bl	c01a438 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 c01a60c:	4606      	mov	r6, r0
 c01a60e:	b9f0      	cbnz	r0, c01a64e <HAL_FLASHEx_Erase+0x62>
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 c01a610:	682b      	ldr	r3, [r5, #0]
    reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 c01a612:	4a1f      	ldr	r2, [pc, #124]	; (c01a690 <HAL_FLASHEx_Erase+0xa4>)
 c01a614:	491f      	ldr	r1, [pc, #124]	; (c01a694 <HAL_FLASHEx_Erase+0xa8>)
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 c01a616:	60a3      	str	r3, [r4, #8]
    reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 c01a618:	ea31 0823 	bics.w	r8, r1, r3, asr #32
 c01a61c:	bf28      	it	cs
 c01a61e:	4690      	movcs	r8, r2
    if ((pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 c01a620:	f248 0204 	movw	r2, #32772	; 0x8004
 c01a624:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 c01a628:	4293      	cmp	r3, r2
 c01a62a:	d115      	bne.n	c01a658 <HAL_FLASHEx_Erase+0x6c>
      FLASH_MassErase(pEraseInit->Banks);
 c01a62c:	6868      	ldr	r0, [r5, #4]
 c01a62e:	f7ff ff77 	bl	c01a520 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 c01a632:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 c01a636:	f7ff feff 	bl	c01a438 <FLASH_WaitForLastOperation>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 c01a63a:	4606      	mov	r6, r0
    CLEAR_BIT((*reg), (pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)));
 c01a63c:	68a2      	ldr	r2, [r4, #8]
 c01a63e:	f8d8 3000 	ldr.w	r3, [r8]
 c01a642:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 c01a646:	ea23 0302 	bic.w	r3, r3, r2
 c01a64a:	f8c8 3000 	str.w	r3, [r8]
  __HAL_UNLOCK(&pFlash);
 c01a64e:	2300      	movs	r3, #0
 c01a650:	7023      	strb	r3, [r4, #0]
}
 c01a652:	4630      	mov	r0, r6
 c01a654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      *PageError = 0xFFFFFFFFU;
 c01a658:	f04f 33ff 	mov.w	r3, #4294967295
 c01a65c:	f8c9 3000 	str.w	r3, [r9]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 c01a660:	68af      	ldr	r7, [r5, #8]
 c01a662:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 c01a666:	4413      	add	r3, r2
 c01a668:	42bb      	cmp	r3, r7
 c01a66a:	d9e7      	bls.n	c01a63c <HAL_FLASHEx_Erase+0x50>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 c01a66c:	4638      	mov	r0, r7
 c01a66e:	6869      	ldr	r1, [r5, #4]
 c01a670:	f7ff ff88 	bl	c01a584 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 c01a674:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 c01a678:	f7ff fede 	bl	c01a438 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 c01a67c:	b110      	cbz	r0, c01a684 <HAL_FLASHEx_Erase+0x98>
          *PageError = page_index;
 c01a67e:	f8c9 7000 	str.w	r7, [r9]
 c01a682:	e7da      	b.n	c01a63a <HAL_FLASHEx_Erase+0x4e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 c01a684:	3701      	adds	r7, #1
 c01a686:	e7ec      	b.n	c01a662 <HAL_FLASHEx_Erase+0x76>
  __HAL_LOCK(&pFlash);
 c01a688:	2602      	movs	r6, #2
 c01a68a:	e7e2      	b.n	c01a652 <HAL_FLASHEx_Erase+0x66>
 c01a68c:	30035b0c 	.word	0x30035b0c
 c01a690:	40022028 	.word	0x40022028
 c01a694:	5002202c 	.word	0x5002202c

0c01a698 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0U;
 c01a698:	2300      	movs	r3, #0
{
 c01a69a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
        EXTI->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 c01a69e:	4a5f      	ldr	r2, [pc, #380]	; (c01a81c <HAL_GPIO_Init+0x184>)
  while (((GPIO_Init->Pin) >> position) != 0U)
 c01a6a0:	f8d1 8000 	ldr.w	r8, [r1]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c01a6a4:	f8df 917c 	ldr.w	r9, [pc, #380]	; c01a824 <HAL_GPIO_Init+0x18c>
  while (((GPIO_Init->Pin) >> position) != 0U)
 c01a6a8:	fa38 f403 	lsrs.w	r4, r8, r3
 c01a6ac:	d101      	bne.n	c01a6b2 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 c01a6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c01a6b2:	f04f 0c01 	mov.w	ip, #1
 c01a6b6:	fa0c fc03 	lsl.w	ip, ip, r3
    if(iocurrent != 0U)
 c01a6ba:	ea1c 0608 	ands.w	r6, ip, r8
 c01a6be:	f000 809f 	beq.w	c01a800 <HAL_GPIO_Init+0x168>
 c01a6c2:	2503      	movs	r5, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c01a6c4:	684c      	ldr	r4, [r1, #4]
 c01a6c6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 c01a6ca:	f024 0a10 	bic.w	sl, r4, #16
 c01a6ce:	f10a 37ff 	add.w	r7, sl, #4294967295
 c01a6d2:	fa05 f50e 	lsl.w	r5, r5, lr
 c01a6d6:	2f01      	cmp	r7, #1
 c01a6d8:	ea6f 0505 	mvn.w	r5, r5
 c01a6dc:	d811      	bhi.n	c01a702 <HAL_GPIO_Init+0x6a>
        temp = GPIOx->OSPEEDR;
 c01a6de:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c01a6e0:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 c01a6e4:	68cf      	ldr	r7, [r1, #12]
 c01a6e6:	fa07 f70e 	lsl.w	r7, r7, lr
 c01a6ea:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 c01a6ee:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 c01a6f0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 c01a6f2:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 c01a6f6:	f3c4 1700 	ubfx	r7, r4, #4, #1
 c01a6fa:	409f      	lsls	r7, r3
 c01a6fc:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 c01a700:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 c01a702:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c01a704:	f1ba 0f02 	cmp.w	sl, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c01a708:	ea07 0c05 	and.w	ip, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 c01a70c:	688f      	ldr	r7, [r1, #8]
 c01a70e:	fa07 f70e 	lsl.w	r7, r7, lr
 c01a712:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->PUPDR = temp;
 c01a716:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c01a718:	d116      	bne.n	c01a748 <HAL_GPIO_Init+0xb0>
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c01a71a:	f04f 0c0f 	mov.w	ip, #15
        temp = GPIOx->AFR[position >> 3U];
 c01a71e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 c01a722:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c01a726:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 c01a72a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c01a72e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 c01a732:	fa0c fc0b 	lsl.w	ip, ip, fp
 c01a736:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c01a73a:	690f      	ldr	r7, [r1, #16]
 c01a73c:	fa07 f70b 	lsl.w	r7, r7, fp
 c01a740:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 c01a744:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 c01a748:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c01a74a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c01a74c:	f004 0703 	and.w	r7, r4, #3
 c01a750:	fa07 fe0e 	lsl.w	lr, r7, lr
 c01a754:	ea4e 0505 	orr.w	r5, lr, r5
      GPIOx->MODER = temp;
 c01a758:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 c01a75a:	00e5      	lsls	r5, r4, #3
 c01a75c:	d550      	bpl.n	c01a800 <HAL_GPIO_Init+0x168>
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c01a75e:	f04f 0c0f 	mov.w	ip, #15
 c01a762:	f023 0703 	bic.w	r7, r3, #3
 c01a766:	f107 47a0 	add.w	r7, r7, #1342177280	; 0x50000000
 c01a76a:	f507 373d 	add.w	r7, r7, #193536	; 0x2f400
 c01a76e:	f003 0e03 	and.w	lr, r3, #3
        temp = EXTI->EXTICR[position >> 2U];
 c01a772:	6e3d      	ldr	r5, [r7, #96]	; 0x60
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c01a774:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 c01a778:	fa0c fc0e 	lsl.w	ip, ip, lr
 c01a77c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c01a780:	4d27      	ldr	r5, [pc, #156]	; (c01a820 <HAL_GPIO_Init+0x188>)
 c01a782:	42a8      	cmp	r0, r5
 c01a784:	d03e      	beq.n	c01a804 <HAL_GPIO_Init+0x16c>
 c01a786:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 c01a78a:	42a8      	cmp	r0, r5
 c01a78c:	d03c      	beq.n	c01a808 <HAL_GPIO_Init+0x170>
 c01a78e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 c01a792:	42a8      	cmp	r0, r5
 c01a794:	d03a      	beq.n	c01a80c <HAL_GPIO_Init+0x174>
 c01a796:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 c01a79a:	42a8      	cmp	r0, r5
 c01a79c:	d038      	beq.n	c01a810 <HAL_GPIO_Init+0x178>
 c01a79e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 c01a7a2:	42a8      	cmp	r0, r5
 c01a7a4:	d036      	beq.n	c01a814 <HAL_GPIO_Init+0x17c>
 c01a7a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 c01a7aa:	42a8      	cmp	r0, r5
 c01a7ac:	d034      	beq.n	c01a818 <HAL_GPIO_Init+0x180>
 c01a7ae:	4548      	cmp	r0, r9
 c01a7b0:	bf14      	ite	ne
 c01a7b2:	2507      	movne	r5, #7
 c01a7b4:	2506      	moveq	r5, #6
 c01a7b6:	fa05 f50e 	lsl.w	r5, r5, lr
 c01a7ba:	ea45 050c 	orr.w	r5, r5, ip
        EXTI->EXTICR[position >> 2U] = temp;
 c01a7be:	663d      	str	r5, [r7, #96]	; 0x60
        temp &= ~(iocurrent);
 c01a7c0:	43f7      	mvns	r7, r6
        temp = EXTI->IMR1;
 c01a7c2:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 c01a7c6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 c01a7ca:	bf0c      	ite	eq
 c01a7cc:	403d      	andeq	r5, r7
          temp |= iocurrent;
 c01a7ce:	4335      	orrne	r5, r6
        EXTI->IMR1 = temp;
 c01a7d0:	f8c2 5080 	str.w	r5, [r2, #128]	; 0x80
        temp = EXTI->EMR1;
 c01a7d4:	f8d2 5084 	ldr.w	r5, [r2, #132]	; 0x84
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 c01a7d8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 c01a7dc:	bf0c      	ite	eq
 c01a7de:	403d      	andeq	r5, r7
          temp |= iocurrent;
 c01a7e0:	4335      	orrne	r5, r6
        EXTI->EMR1 = temp;
 c01a7e2:	f8c2 5084 	str.w	r5, [r2, #132]	; 0x84
        temp = EXTI->RTSR1;
 c01a7e6:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 c01a7e8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 c01a7ec:	bf0c      	ite	eq
 c01a7ee:	403d      	andeq	r5, r7
          temp |= iocurrent;
 c01a7f0:	4335      	orrne	r5, r6
        EXTI->RTSR1 = temp;
 c01a7f2:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 c01a7f4:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 c01a7f6:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 c01a7f8:	bf54      	ite	pl
 c01a7fa:	403d      	andpl	r5, r7
          temp |= iocurrent;
 c01a7fc:	4335      	orrmi	r5, r6
        EXTI->FTSR1 = temp;
 c01a7fe:	6055      	str	r5, [r2, #4]
    position++;
 c01a800:	3301      	adds	r3, #1
 c01a802:	e751      	b.n	c01a6a8 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c01a804:	2500      	movs	r5, #0
 c01a806:	e7d6      	b.n	c01a7b6 <HAL_GPIO_Init+0x11e>
 c01a808:	2501      	movs	r5, #1
 c01a80a:	e7d4      	b.n	c01a7b6 <HAL_GPIO_Init+0x11e>
 c01a80c:	2502      	movs	r5, #2
 c01a80e:	e7d2      	b.n	c01a7b6 <HAL_GPIO_Init+0x11e>
 c01a810:	2503      	movs	r5, #3
 c01a812:	e7d0      	b.n	c01a7b6 <HAL_GPIO_Init+0x11e>
 c01a814:	2504      	movs	r5, #4
 c01a816:	e7ce      	b.n	c01a7b6 <HAL_GPIO_Init+0x11e>
 c01a818:	2505      	movs	r5, #5
 c01a81a:	e7cc      	b.n	c01a7b6 <HAL_GPIO_Init+0x11e>
 c01a81c:	5002f400 	.word	0x5002f400
 c01a820:	52020000 	.word	0x52020000
 c01a824:	52021800 	.word	0x52021800

0c01a828 <HAL_GTZC_TZSC_ConfigPeriphAttributes>:
                                                       uint32_t PeriphAttributes)
{
  uint32_t register_address;

  /* check entry parameters */
  if (   (PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c01a828:	f5b1 7f41 	cmp.w	r1, #772	; 0x304
{
 c01a82c:	b530      	push	{r4, r5, lr}
  if (   (PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c01a82e:	d265      	bcs.n	c01a8fc <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xd4>
      || (  HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c01a830:	0f05      	lsrs	r5, r0, #28
 c01a832:	f000 021f 	and.w	r2, r0, #31
 c01a836:	eb02 1445 	add.w	r4, r2, r5, lsl #5
 c01a83a:	2c32      	cmp	r4, #50	; 0x32
 c01a83c:	d85e      	bhi.n	c01a8fc <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xd4>
      || (   ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c01a83e:	0683      	lsls	r3, r0, #26
 c01a840:	d533      	bpl.n	c01a8aa <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x82>
          && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c01a842:	2c00      	cmp	r4, #0
 c01a844:	d15a      	bne.n	c01a8fc <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xd4>
  {
    /* special case where same attributes are applied to all peripherals */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c01a846:	f240 1301 	movw	r3, #257	; 0x101
 c01a84a:	438b      	bics	r3, r1
 c01a84c:	d119      	bne.n	c01a882 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x5a>
    {
      SET_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c01a84e:	4b2c      	ldr	r3, [pc, #176]	; (c01a900 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xd8>)
 c01a850:	691a      	ldr	r2, [r3, #16]
 c01a852:	f04f 32ff 	mov.w	r2, #4294967295
 c01a856:	611a      	str	r2, [r3, #16]
      SET_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c01a858:	6958      	ldr	r0, [r3, #20]
 c01a85a:	f502 22ee 	add.w	r2, r2, #487424	; 0x77000
 c01a85e:	4302      	orrs	r2, r0
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
    {
      CLEAR_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
      CLEAR_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c01a860:	615a      	str	r2, [r3, #20]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c01a862:	f240 2302 	movw	r3, #514	; 0x202
 c01a866:	438b      	bics	r3, r1
 c01a868:	d114      	bne.n	c01a894 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x6c>
    {
      SET_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c01a86a:	4b25      	ldr	r3, [pc, #148]	; (c01a900 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xd8>)
 c01a86c:	6a1a      	ldr	r2, [r3, #32]
 c01a86e:	f04f 32ff 	mov.w	r2, #4294967295
 c01a872:	621a      	str	r2, [r3, #32]
      SET_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c01a874:	6a59      	ldr	r1, [r3, #36]	; 0x24
 c01a876:	f502 22ee 	add.w	r2, r2, #487424	; 0x77000
 c01a87a:	430a      	orrs	r2, r1
 c01a87c:	625a      	str	r2, [r3, #36]	; 0x24
    else
    {
      /* do nothing */
    }
  }
  return HAL_OK;
 c01a87e:	2000      	movs	r0, #0
 c01a880:	e012      	b.n	c01a8a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x80>
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c01a882:	05cd      	lsls	r5, r1, #23
 c01a884:	d5ed      	bpl.n	c01a862 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x3a>
      CLEAR_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c01a886:	4b1e      	ldr	r3, [pc, #120]	; (c01a900 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xd8>)
 c01a888:	691a      	ldr	r2, [r3, #16]
 c01a88a:	611c      	str	r4, [r3, #16]
      CLEAR_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c01a88c:	6958      	ldr	r0, [r3, #20]
 c01a88e:	4a1d      	ldr	r2, [pc, #116]	; (c01a904 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xdc>)
 c01a890:	4002      	ands	r2, r0
 c01a892:	e7e5      	b.n	c01a860 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x38>
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c01a894:	058c      	lsls	r4, r1, #22
 c01a896:	d5f2      	bpl.n	c01a87e <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x56>
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c01a898:	2000      	movs	r0, #0
 c01a89a:	4b19      	ldr	r3, [pc, #100]	; (c01a900 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xd8>)
 c01a89c:	6a1a      	ldr	r2, [r3, #32]
 c01a89e:	6218      	str	r0, [r3, #32]
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c01a8a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 c01a8a2:	4a18      	ldr	r2, [pc, #96]	; (c01a904 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xdc>)
 c01a8a4:	400a      	ands	r2, r1
 c01a8a6:	625a      	str	r2, [r3, #36]	; 0x24
}
 c01a8a8:	bd30      	pop	{r4, r5, pc}
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c01a8aa:	f240 1001 	movw	r0, #257	; 0x101
                       + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c01a8ae:	4b16      	ldr	r3, [pc, #88]	; (c01a908 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xe0>)
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c01a8b0:	4388      	bics	r0, r1
                       + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c01a8b2:	442b      	add	r3, r5
    register_address =   (uint32_t)&(GTZC_TZSC->SECCFGR1)
 c01a8b4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c01a8b8:	d10f      	bne.n	c01a8da <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xb2>
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c01a8ba:	2001      	movs	r0, #1
 c01a8bc:	681c      	ldr	r4, [r3, #0]
 c01a8be:	4090      	lsls	r0, r2
 c01a8c0:	4320      	orrs	r0, r4
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c01a8c2:	6018      	str	r0, [r3, #0]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c01a8c4:	f240 2002 	movw	r0, #514	; 0x202
 c01a8c8:	4388      	bics	r0, r1
 c01a8ca:	d10e      	bne.n	c01a8ea <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xc2>
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c01a8cc:	2101      	movs	r1, #1
 c01a8ce:	6918      	ldr	r0, [r3, #16]
 c01a8d0:	fa01 f202 	lsl.w	r2, r1, r2
 c01a8d4:	4302      	orrs	r2, r0
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c01a8d6:	611a      	str	r2, [r3, #16]
 c01a8d8:	e7d1      	b.n	c01a87e <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x56>
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c01a8da:	05c8      	lsls	r0, r1, #23
 c01a8dc:	d5f2      	bpl.n	c01a8c4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x9c>
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c01a8de:	2401      	movs	r4, #1
 c01a8e0:	6818      	ldr	r0, [r3, #0]
 c01a8e2:	4094      	lsls	r4, r2
 c01a8e4:	ea20 0004 	bic.w	r0, r0, r4
 c01a8e8:	e7eb      	b.n	c01a8c2 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x9a>
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c01a8ea:	0589      	lsls	r1, r1, #22
 c01a8ec:	d5c7      	bpl.n	c01a87e <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x56>
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c01a8ee:	2001      	movs	r0, #1
 c01a8f0:	6919      	ldr	r1, [r3, #16]
 c01a8f2:	fa00 f202 	lsl.w	r2, r0, r2
 c01a8f6:	ea21 0202 	bic.w	r2, r1, r2
 c01a8fa:	e7ec      	b.n	c01a8d6 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xae>
    return HAL_ERROR;
 c01a8fc:	2001      	movs	r0, #1
 c01a8fe:	e7d3      	b.n	c01a8a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x80>
 c01a900:	50032400 	.word	0x50032400
 c01a904:	fff89000 	.word	0xfff89000
 c01a908:	1400c904 	.word	0x1400c904

0c01a90c <HAL_GTZC_MPCBB_ConfigMem>:
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if (   (     !(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c01a90c:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
 c01a910:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
{
 c01a914:	b530      	push	{r4, r5, lr}
  if (   (     !(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c01a916:	d002      	beq.n	c01a91e <HAL_GTZC_MPCBB_ConfigMem+0x12>
           &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c01a918:	4b19      	ldr	r3, [pc, #100]	; (c01a980 <HAL_GTZC_MPCBB_ConfigMem+0x74>)
 c01a91a:	4298      	cmp	r0, r3
 c01a91c:	d12e      	bne.n	c01a97c <HAL_GTZC_MPCBB_ConfigMem+0x70>
      || (   (    pMPCBB_desc->SecureRWIllegalMode
 c01a91e:	680b      	ldr	r3, [r1, #0]
 c01a920:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 c01a924:	d12a      	bne.n	c01a97c <HAL_GTZC_MPCBB_ConfigMem+0x70>
               != GTZC_MPCBB_SRWILADIS_ENABLE)
          && (    pMPCBB_desc->SecureRWIllegalMode
               != GTZC_MPCBB_SRWILADIS_DISABLE))
      || (   (    pMPCBB_desc->InvertSecureState
 c01a926:	684c      	ldr	r4, [r1, #4]
 c01a928:	f034 4280 	bics.w	r2, r4, #1073741824	; 0x40000000
 c01a92c:	d126      	bne.n	c01a97c <HAL_GTZC_MPCBB_ConfigMem+0x70>
  reg_value = pMPCBB_desc->InvertSecureState;
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
  {
    mpcbb_ptr = GTZC_MPCBB1_S;
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c01a92e:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 c01a932:	4814      	ldr	r0, [pc, #80]	; (c01a984 <HAL_GTZC_MPCBB_ConfigMem+0x78>)
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c01a934:	ea44 0403 	orr.w	r4, r4, r3
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c01a938:	4b13      	ldr	r3, [pc, #76]	; (c01a988 <HAL_GTZC_MPCBB_ConfigMem+0x7c>)
 c01a93a:	bf18      	it	ne
 c01a93c:	4603      	movne	r3, r0
    mpcbb_ptr = GTZC_MPCBB2_S;
    mem_size = GTZC_MEM_SIZE(SRAM2);
  }

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c01a93e:	6818      	ldr	r0, [r3, #0]
 c01a940:	f101 0108 	add.w	r1, r1, #8
 c01a944:	f020 4040 	bic.w	r0, r0, #3221225472	; 0xc0000000
 c01a948:	ea40 0004 	orr.w	r0, r0, r4
 c01a94c:	6018      	str	r0, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);
  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
  /* limitation: code not portable with memory > 256K */
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c01a94e:	bf15      	itete	ne
 c01a950:	f06f 00ff 	mvnne.w	r0, #255	; 0xff
 c01a954:	f04f 407f 	moveq.w	r0, #4278190080	; 0xff000000
  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c01a958:	2408      	movne	r4, #8
 c01a95a:	2418      	moveq	r4, #24
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c01a95c:	691d      	ldr	r5, [r3, #16]
 c01a95e:	4028      	ands	r0, r5
 c01a960:	6e0d      	ldr	r5, [r1, #96]	; 0x60
 c01a962:	4328      	orrs	r0, r5
 c01a964:	6118      	str	r0, [r3, #16]

  /* write vector register information */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
  for (i = 0U; i < size_in_superblocks; i++)
  {
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c01a966:	f102 0040 	add.w	r0, r2, #64	; 0x40
 c01a96a:	f851 5b04 	ldr.w	r5, [r1], #4
  for (i = 0U; i < size_in_superblocks; i++)
 c01a96e:	3201      	adds	r2, #1
 c01a970:	4294      	cmp	r4, r2
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c01a972:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c01a976:	d1f6      	bne.n	c01a966 <HAL_GTZC_MPCBB_ConfigMem+0x5a>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  return HAL_OK;
 c01a978:	2000      	movs	r0, #0
}
 c01a97a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 c01a97c:	2001      	movs	r0, #1
 c01a97e:	e7fc      	b.n	c01a97a <HAL_GTZC_MPCBB_ConfigMem+0x6e>
 c01a980:	20030000 	.word	0x20030000
 c01a984:	50033000 	.word	0x50033000
 c01a988:	50032c00 	.word	0x50032c00

0c01a98c <HAL_GTZC_MPCBB_GetConfigMem>:
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if (    !(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c01a98c:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
 c01a990:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
{
 c01a994:	b510      	push	{r4, lr}
  if (    !(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c01a996:	d021      	beq.n	c01a9dc <HAL_GTZC_MPCBB_GetConfigMem+0x50>
       && !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c01a998:	4b13      	ldr	r3, [pc, #76]	; (c01a9e8 <HAL_GTZC_MPCBB_GetConfigMem+0x5c>)
 c01a99a:	4298      	cmp	r0, r3
 c01a99c:	d122      	bne.n	c01a9e4 <HAL_GTZC_MPCBB_GetConfigMem+0x58>
    mem_size = GTZC_MEM_SIZE(SRAM1);
  }
  else
  {
    mpcbb_ptr = GTZC_MPCBB2_S;
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c01a99e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    mpcbb_ptr = GTZC_MPCBB2_S;
 c01a9a2:	4812      	ldr	r0, [pc, #72]	; (c01a9ec <HAL_GTZC_MPCBB_GetConfigMem+0x60>)
  }

  /* read configuration and lock register information */
  reg_value = READ_REG(mpcbb_ptr->CR);
 c01a9a4:	6802      	ldr	r2, [r0, #0]
  pMPCBB_desc->InvertSecureState = (reg_value & GTZC_MPCBB_CR_INVSECSTATE_Msk);
  pMPCBB_desc->SecureRWIllegalMode = (reg_value & GTZC_MPCBB_CR_SRWILADIS_Msk);
  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c01a9a6:	0b5b      	lsrs	r3, r3, #13
  pMPCBB_desc->InvertSecureState = (reg_value & GTZC_MPCBB_CR_INVSECSTATE_Msk);
 c01a9a8:	f002 4480 	and.w	r4, r2, #1073741824	; 0x40000000
 c01a9ac:	604c      	str	r4, [r1, #4]
  /* limitation: code not portable with memory > 256K */
  pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0] = READ_REG(mpcbb_ptr->LCKVTR1)
                                                         & size_mask;
 c01a9ae:	f04f 34ff 	mov.w	r4, #4294967295
  pMPCBB_desc->SecureRWIllegalMode = (reg_value & GTZC_MPCBB_CR_SRWILADIS_Msk);
 c01a9b2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 c01a9b6:	600a      	str	r2, [r1, #0]
  pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0] = READ_REG(mpcbb_ptr->LCKVTR1)
 c01a9b8:	6902      	ldr	r2, [r0, #16]
                                                         & size_mask;
 c01a9ba:	409c      	lsls	r4, r3
 c01a9bc:	ea22 0204 	bic.w	r2, r2, r4
  pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0] = READ_REG(mpcbb_ptr->LCKVTR1)
 c01a9c0:	668a      	str	r2, [r1, #104]	; 0x68

  /* read vector register information */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
  for (i = 0U; i < size_in_superblocks; i++)
 c01a9c2:	2200      	movs	r2, #0
 c01a9c4:	3108      	adds	r1, #8
  {
    pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i] = mpcbb_ptr->VCTR[i];
 c01a9c6:	f102 0440 	add.w	r4, r2, #64	; 0x40
 c01a9ca:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c01a9ce:	3201      	adds	r2, #1
 c01a9d0:	4293      	cmp	r3, r2
    pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i] = mpcbb_ptr->VCTR[i];
 c01a9d2:	f841 4b04 	str.w	r4, [r1], #4
  for (i = 0U; i < size_in_superblocks; i++)
 c01a9d6:	d1f6      	bne.n	c01a9c6 <HAL_GTZC_MPCBB_GetConfigMem+0x3a>
  }

  return HAL_OK;
 c01a9d8:	2000      	movs	r0, #0
}
 c01a9da:	bd10      	pop	{r4, pc}
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c01a9dc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    mpcbb_ptr = GTZC_MPCBB1_S;
 c01a9e0:	4803      	ldr	r0, [pc, #12]	; (c01a9f0 <HAL_GTZC_MPCBB_GetConfigMem+0x64>)
 c01a9e2:	e7df      	b.n	c01a9a4 <HAL_GTZC_MPCBB_GetConfigMem+0x18>
    return HAL_ERROR;
 c01a9e4:	2001      	movs	r0, #1
 c01a9e6:	e7f8      	b.n	c01a9da <HAL_GTZC_MPCBB_GetConfigMem+0x4e>
 c01a9e8:	20030000 	.word	0x20030000
 c01a9ec:	50033000 	.word	0x50033000
 c01a9f0:	50032c00 	.word	0x50032c00

0c01a9f4 <HAL_GTZC_TZIC_EnableIT>:
  *         This parameter can be a value of @ref GTZC_TZSC_TZIC_PeriphId.
  *         Use GTZC_PERIPH_ALL to select all peripherals.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZIC_EnableIT(uint32_t PeriphId)
{
 c01a9f4:	b510      	push	{r4, lr}
  uint32_t register_address;

  /* check entry parameters */
  if (   (   HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZIC_PERIPH_NUMBER)
 c01a9f6:	0f03      	lsrs	r3, r0, #28
 c01a9f8:	f000 041f 	and.w	r4, r0, #31
 c01a9fc:	eb04 1143 	add.w	r1, r4, r3, lsl #5
 c01aa00:	2947      	cmp	r1, #71	; 0x47
 c01aa02:	d818      	bhi.n	c01aa36 <HAL_GTZC_TZIC_EnableIT+0x42>
      || (    ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c01aa04:	f010 0020 	ands.w	r0, r0, #32
 c01aa08:	d00a      	beq.n	c01aa20 <HAL_GTZC_TZIC_EnableIT+0x2c>
           && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c01aa0a:	b9a1      	cbnz	r1, c01aa36 <HAL_GTZC_TZIC_EnableIT+0x42>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
  {
    /* same configuration is applied to all peripherals */
    WRITE_REG(GTZC_TZIC->IER1, TZIC_IER1_ALL);
 c01aa0c:	f04f 32ff 	mov.w	r2, #4294967295
 c01aa10:	4b0a      	ldr	r3, [pc, #40]	; (c01aa3c <HAL_GTZC_TZIC_EnableIT+0x48>)
    register_address =   (uint32_t)&(GTZC_TZIC->IER1)
                       + (4U * GTZC_GET_REG_INDEX(PeriphId));
    SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
  }

  return HAL_OK;
 c01aa12:	4608      	mov	r0, r1
    WRITE_REG(GTZC_TZIC->IER1, TZIC_IER1_ALL);
 c01aa14:	601a      	str	r2, [r3, #0]
    WRITE_REG(GTZC_TZIC->IER2, TZIC_IER2_ALL);
 c01aa16:	4a0a      	ldr	r2, [pc, #40]	; (c01aa40 <HAL_GTZC_TZIC_EnableIT+0x4c>)
 c01aa18:	605a      	str	r2, [r3, #4]
    WRITE_REG(GTZC_TZIC->IER3, TZIC_IER3_ALL);
 c01aa1a:	22ff      	movs	r2, #255	; 0xff
 c01aa1c:	609a      	str	r2, [r3, #8]
}
 c01aa1e:	bd10      	pop	{r4, pc}
    SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c01aa20:	2201      	movs	r2, #1
                       + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c01aa22:	f103 53a0 	add.w	r3, r3, #335544320	; 0x14000000
 c01aa26:	f503 434a 	add.w	r3, r3, #51712	; 0xca00
    register_address =   (uint32_t)&(GTZC_TZIC->IER1)
 c01aa2a:	009b      	lsls	r3, r3, #2
    SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c01aa2c:	6819      	ldr	r1, [r3, #0]
 c01aa2e:	40a2      	lsls	r2, r4
 c01aa30:	430a      	orrs	r2, r1
 c01aa32:	601a      	str	r2, [r3, #0]
 c01aa34:	e7f3      	b.n	c01aa1e <HAL_GTZC_TZIC_EnableIT+0x2a>
    return HAL_ERROR;
 c01aa36:	2001      	movs	r0, #1
 c01aa38:	e7f1      	b.n	c01aa1e <HAL_GTZC_TZIC_EnableIT+0x2a>
 c01aa3a:	bf00      	nop
 c01aa3c:	50032800 	.word	0x50032800
 c01aa40:	3fff6fff 	.word	0x3fff6fff

0c01aa44 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t msirange = 0U, sysclockfreq = 0U;
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c01aa44:	4a24      	ldr	r2, [pc, #144]	; (c01aad8 <HAL_RCC_GetSysClockFreq+0x94>)
 c01aa46:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c01aa48:	68d1      	ldr	r1, [r2, #12]

  if ((sysclk_source == RCC_CFGR_SWS_MSI) ||
 c01aa4a:	f013 030c 	ands.w	r3, r3, #12
 c01aa4e:	d005      	beq.n	c01aa5c <HAL_RCC_GetSysClockFreq+0x18>
 c01aa50:	2b0c      	cmp	r3, #12
 c01aa52:	d116      	bne.n	c01aa82 <HAL_RCC_GetSysClockFreq+0x3e>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c01aa54:	f001 0103 	and.w	r1, r1, #3
      ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c01aa58:	2901      	cmp	r1, #1
 c01aa5a:	d119      	bne.n	c01aa90 <HAL_RCC_GetSysClockFreq+0x4c>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c01aa5c:	6811      	ldr	r1, [r2, #0]
 c01aa5e:	0709      	lsls	r1, r1, #28
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c01aa60:	bf54      	ite	pl
 c01aa62:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c01aa66:	6812      	ldrmi	r2, [r2, #0]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c01aa68:	491c      	ldr	r1, [pc, #112]	; (c01aadc <HAL_RCC_GetSysClockFreq+0x98>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c01aa6a:	bf54      	ite	pl
 c01aa6c:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c01aa70:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 c01aa74:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]

    if (sysclk_source == RCC_CFGR_SWS_MSI)
 c01aa78:	b113      	cbz	r3, c01aa80 <HAL_RCC_GetSysClockFreq+0x3c>
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_CFGR_SWS_PLL)
 c01aa7a:	2b0c      	cmp	r3, #12
 c01aa7c:	d009      	beq.n	c01aa92 <HAL_RCC_GetSysClockFreq+0x4e>
 c01aa7e:	2000      	movs	r0, #0
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
    sysclockfreq = pllvco / pllr;
  }

  return sysclockfreq;
}
 c01aa80:	4770      	bx	lr
  else if (sysclk_source == RCC_CFGR_SWS_HSI)
 c01aa82:	2b04      	cmp	r3, #4
 c01aa84:	d026      	beq.n	c01aad4 <HAL_RCC_GetSysClockFreq+0x90>
  else if (sysclk_source == RCC_CFGR_SWS_HSE)
 c01aa86:	2b08      	cmp	r3, #8
 c01aa88:	4815      	ldr	r0, [pc, #84]	; (c01aae0 <HAL_RCC_GetSysClockFreq+0x9c>)
 c01aa8a:	bf18      	it	ne
 c01aa8c:	2000      	movne	r0, #0
 c01aa8e:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c01aa90:	2000      	movs	r0, #0
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c01aa92:	4a11      	ldr	r2, [pc, #68]	; (c01aad8 <HAL_RCC_GetSysClockFreq+0x94>)
 c01aa94:	68d1      	ldr	r1, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c01aa96:	68d3      	ldr	r3, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c01aa98:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c01aa9c:	f3c3 1303 	ubfx	r3, r3, #4, #4
    switch (pllsource)
 c01aaa0:	2902      	cmp	r1, #2
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c01aaa2:	f103 0301 	add.w	r3, r3, #1
    switch (pllsource)
 c01aaa6:	d005      	beq.n	c01aab4 <HAL_RCC_GetSysClockFreq+0x70>
 c01aaa8:	2903      	cmp	r1, #3
 c01aaaa:	d003      	beq.n	c01aab4 <HAL_RCC_GetSysClockFreq+0x70>
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c01aaac:	68d2      	ldr	r2, [r2, #12]
 c01aaae:	f3c2 2206 	ubfx	r2, r2, #8, #7
 c01aab2:	e003      	b.n	c01aabc <HAL_RCC_GetSysClockFreq+0x78>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c01aab4:	68d2      	ldr	r2, [r2, #12]
 c01aab6:	480a      	ldr	r0, [pc, #40]	; (c01aae0 <HAL_RCC_GetSysClockFreq+0x9c>)
 c01aab8:	f3c2 2206 	ubfx	r2, r2, #8, #7
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c01aabc:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c01aac0:	4b05      	ldr	r3, [pc, #20]	; (c01aad8 <HAL_RCC_GetSysClockFreq+0x94>)
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c01aac2:	4350      	muls	r0, r2
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c01aac4:	68db      	ldr	r3, [r3, #12]
 c01aac6:	f3c3 6341 	ubfx	r3, r3, #25, #2
 c01aaca:	3301      	adds	r3, #1
 c01aacc:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 c01aace:	fbb0 f0f3 	udiv	r0, r0, r3
 c01aad2:	4770      	bx	lr
 c01aad4:	4802      	ldr	r0, [pc, #8]	; (c01aae0 <HAL_RCC_GetSysClockFreq+0x9c>)
 c01aad6:	4770      	bx	lr
 c01aad8:	50021000 	.word	0x50021000
 c01aadc:	0c032d2c 	.word	0x0c032d2c
 c01aae0:	00f42400 	.word	0x00f42400

0c01aae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 c01aae4:	b508      	push	{r3, lr}
  SystemCoreClockUpdate();
 c01aae6:	f7ff fa7d 	bl	c019fe4 <SystemCoreClockUpdate>
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 c01aaea:	4b05      	ldr	r3, [pc, #20]	; (c01ab00 <HAL_RCC_GetPCLK1Freq+0x1c>)
 c01aaec:	4a05      	ldr	r2, [pc, #20]	; (c01ab04 <HAL_RCC_GetPCLK1Freq+0x20>)
 c01aaee:	689b      	ldr	r3, [r3, #8]
 c01aaf0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 c01aaf4:	5cd3      	ldrb	r3, [r2, r3]
 c01aaf6:	4a04      	ldr	r2, [pc, #16]	; (c01ab08 <HAL_RCC_GetPCLK1Freq+0x24>)
 c01aaf8:	6810      	ldr	r0, [r2, #0]
}
 c01aafa:	40d8      	lsrs	r0, r3
 c01aafc:	bd08      	pop	{r3, pc}
 c01aafe:	bf00      	nop
 c01ab00:	50021000 	.word	0x50021000
 c01ab04:	0c032d24 	.word	0x0c032d24
 c01ab08:	30035b08 	.word	0x30035b08

0c01ab0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 c01ab0c:	b508      	push	{r3, lr}
  SystemCoreClockUpdate();
 c01ab0e:	f7ff fa69 	bl	c019fe4 <SystemCoreClockUpdate>
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 c01ab12:	4b05      	ldr	r3, [pc, #20]	; (c01ab28 <HAL_RCC_GetPCLK2Freq+0x1c>)
 c01ab14:	4a05      	ldr	r2, [pc, #20]	; (c01ab2c <HAL_RCC_GetPCLK2Freq+0x20>)
 c01ab16:	689b      	ldr	r3, [r3, #8]
 c01ab18:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 c01ab1c:	5cd3      	ldrb	r3, [r2, r3]
 c01ab1e:	4a04      	ldr	r2, [pc, #16]	; (c01ab30 <HAL_RCC_GetPCLK2Freq+0x24>)
 c01ab20:	6810      	ldr	r0, [r2, #0]
}
 c01ab22:	40d8      	lsrs	r0, r3
 c01ab24:	bd08      	pop	{r3, pc}
 c01ab26:	bf00      	nop
 c01ab28:	50021000 	.word	0x50021000
 c01ab2c:	0c032d24 	.word	0x0c032d24
 c01ab30:	30035b08 	.word	0x30035b08

0c01ab34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 c01ab34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c01ab36:	4605      	mov	r5, r0
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 c01ab38:	6800      	ldr	r0, [r0, #0]
{
 c01ab3a:	460f      	mov	r7, r1
  switch (pPllSai1->PLLSAI1Source)
 c01ab3c:	2802      	cmp	r0, #2
 c01ab3e:	d008      	beq.n	c01ab52 <RCCEx_PLLSAI1_Config+0x1e>
 c01ab40:	2803      	cmp	r0, #3
 c01ab42:	d02d      	beq.n	c01aba0 <RCCEx_PLLSAI1_Config+0x6c>
 c01ab44:	2801      	cmp	r0, #1
 c01ab46:	d166      	bne.n	c01ac16 <RCCEx_PLLSAI1_Config+0xe2>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c01ab48:	4b34      	ldr	r3, [pc, #208]	; (c01ac1c <RCCEx_PLLSAI1_Config+0xe8>)
 c01ab4a:	681b      	ldr	r3, [r3, #0]
 c01ab4c:	0799      	lsls	r1, r3, #30
 c01ab4e:	d405      	bmi.n	c01ab5c <RCCEx_PLLSAI1_Config+0x28>
      }
    }
  }

  return status;
}
 c01ab50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c01ab52:	4b32      	ldr	r3, [pc, #200]	; (c01ac1c <RCCEx_PLLSAI1_Config+0xe8>)
 c01ab54:	681b      	ldr	r3, [r3, #0]
 c01ab56:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c01ab5a:	d05c      	beq.n	c01ac16 <RCCEx_PLLSAI1_Config+0xe2>
    __HAL_RCC_PLLSAI1_DISABLE();
 c01ab5c:	4c2f      	ldr	r4, [pc, #188]	; (c01ac1c <RCCEx_PLLSAI1_Config+0xe8>)
 c01ab5e:	6823      	ldr	r3, [r4, #0]
 c01ab60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 c01ab64:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 c01ab66:	f7ff fc0f 	bl	c01a388 <HAL_GetTick>
 c01ab6a:	4606      	mov	r6, r0
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c01ab6c:	6823      	ldr	r3, [r4, #0]
 c01ab6e:	011a      	lsls	r2, r3, #4
 c01ab70:	d41b      	bmi.n	c01abaa <RCCEx_PLLSAI1_Config+0x76>
 c01ab72:	68ab      	ldr	r3, [r5, #8]
 c01ab74:	f8d5 c000 	ldr.w	ip, [r5]
 c01ab78:	021e      	lsls	r6, r3, #8
 c01ab7a:	686b      	ldr	r3, [r5, #4]
 c01ab7c:	3b01      	subs	r3, #1
 c01ab7e:	0118      	lsls	r0, r3, #4
      if (Divider == DIVIDER_P_UPDATE)
 c01ab80:	b1d7      	cbz	r7, c01abb8 <RCCEx_PLLSAI1_Config+0x84>
      else if (Divider == DIVIDER_Q_UPDATE)
 c01ab82:	2f01      	cmp	r7, #1
 c01ab84:	d134      	bne.n	c01abf0 <RCCEx_PLLSAI1_Config+0xbc>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c01ab86:	6923      	ldr	r3, [r4, #16]
 c01ab88:	4a25      	ldr	r2, [pc, #148]	; (c01ac20 <RCCEx_PLLSAI1_Config+0xec>)
 c01ab8a:	692f      	ldr	r7, [r5, #16]
 c01ab8c:	401a      	ands	r2, r3
 c01ab8e:	ea42 030c 	orr.w	r3, r2, ip
 c01ab92:	087f      	lsrs	r7, r7, #1
 c01ab94:	4333      	orrs	r3, r6
 c01ab96:	3f01      	subs	r7, #1
 c01ab98:	4303      	orrs	r3, r0
 c01ab9a:	ea43 5347 	orr.w	r3, r3, r7, lsl #21
 c01ab9e:	e015      	b.n	c01abcc <RCCEx_PLLSAI1_Config+0x98>
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c01aba0:	4b1e      	ldr	r3, [pc, #120]	; (c01ac1c <RCCEx_PLLSAI1_Config+0xe8>)
 c01aba2:	681b      	ldr	r3, [r3, #0]
 c01aba4:	f413 2fc0 	tst.w	r3, #393216	; 0x60000
 c01aba8:	e7d7      	b.n	c01ab5a <RCCEx_PLLSAI1_Config+0x26>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c01abaa:	f7ff fbed 	bl	c01a388 <HAL_GetTick>
 c01abae:	1b80      	subs	r0, r0, r6
 c01abb0:	2802      	cmp	r0, #2
 c01abb2:	d9db      	bls.n	c01ab6c <RCCEx_PLLSAI1_Config+0x38>
        status = HAL_TIMEOUT;
 c01abb4:	2003      	movs	r0, #3
 c01abb6:	e7cb      	b.n	c01ab50 <RCCEx_PLLSAI1_Config+0x1c>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c01abb8:	6923      	ldr	r3, [r4, #16]
 c01abba:	491a      	ldr	r1, [pc, #104]	; (c01ac24 <RCCEx_PLLSAI1_Config+0xf0>)
 c01abbc:	4019      	ands	r1, r3
 c01abbe:	ea41 030c 	orr.w	r3, r1, ip
 c01abc2:	68e9      	ldr	r1, [r5, #12]
 c01abc4:	4333      	orrs	r3, r6
 c01abc6:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
 c01abca:	4303      	orrs	r3, r0
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c01abcc:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 c01abce:	4c13      	ldr	r4, [pc, #76]	; (c01ac1c <RCCEx_PLLSAI1_Config+0xe8>)
 c01abd0:	6823      	ldr	r3, [r4, #0]
 c01abd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 c01abd6:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 c01abd8:	f7ff fbd6 	bl	c01a388 <HAL_GetTick>
 c01abdc:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c01abde:	6823      	ldr	r3, [r4, #0]
 c01abe0:	011b      	lsls	r3, r3, #4
 c01abe2:	d512      	bpl.n	c01ac0a <RCCEx_PLLSAI1_Config+0xd6>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 c01abe4:	6923      	ldr	r3, [r4, #16]
 c01abe6:	69aa      	ldr	r2, [r5, #24]
 c01abe8:	2000      	movs	r0, #0
 c01abea:	4313      	orrs	r3, r2
 c01abec:	6123      	str	r3, [r4, #16]
  return status;
 c01abee:	e7af      	b.n	c01ab50 <RCCEx_PLLSAI1_Config+0x1c>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c01abf0:	6922      	ldr	r2, [r4, #16]
 c01abf2:	4b0d      	ldr	r3, [pc, #52]	; (c01ac28 <RCCEx_PLLSAI1_Config+0xf4>)
 c01abf4:	696f      	ldr	r7, [r5, #20]
 c01abf6:	4013      	ands	r3, r2
 c01abf8:	ea43 030c 	orr.w	r3, r3, ip
 c01abfc:	087f      	lsrs	r7, r7, #1
 c01abfe:	4333      	orrs	r3, r6
 c01ac00:	3f01      	subs	r7, #1
 c01ac02:	4303      	orrs	r3, r0
 c01ac04:	ea43 6347 	orr.w	r3, r3, r7, lsl #25
 c01ac08:	e7e0      	b.n	c01abcc <RCCEx_PLLSAI1_Config+0x98>
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c01ac0a:	f7ff fbbd 	bl	c01a388 <HAL_GetTick>
 c01ac0e:	1b80      	subs	r0, r0, r6
 c01ac10:	2802      	cmp	r0, #2
 c01ac12:	d9e4      	bls.n	c01abde <RCCEx_PLLSAI1_Config+0xaa>
 c01ac14:	e7ce      	b.n	c01abb4 <RCCEx_PLLSAI1_Config+0x80>
        status = HAL_ERROR;
 c01ac16:	2001      	movs	r0, #1
 c01ac18:	e79a      	b.n	c01ab50 <RCCEx_PLLSAI1_Config+0x1c>
 c01ac1a:	bf00      	nop
 c01ac1c:	50021000 	.word	0x50021000
 c01ac20:	ff9f800c 	.word	0xff9f800c
 c01ac24:	07ff800c 	.word	0x07ff800c
 c01ac28:	f9ff800c 	.word	0xf9ff800c

0c01ac2c <RCCEx_PLLSAI2_Config.constprop.4>:
  *
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
 c01ac2c:	b570      	push	{r4, r5, r6, lr}
 c01ac2e:	4605      	mov	r5, r0
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 c01ac30:	6800      	ldr	r0, [r0, #0]
 c01ac32:	2802      	cmp	r0, #2
 c01ac34:	d008      	beq.n	c01ac48 <RCCEx_PLLSAI2_Config.constprop.4+0x1c>
 c01ac36:	2803      	cmp	r0, #3
 c01ac38:	d02f      	beq.n	c01ac9a <RCCEx_PLLSAI2_Config.constprop.4+0x6e>
 c01ac3a:	2801      	cmp	r0, #1
 c01ac3c:	d147      	bne.n	c01acce <RCCEx_PLLSAI2_Config.constprop.4+0xa2>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c01ac3e:	4b25      	ldr	r3, [pc, #148]	; (c01acd4 <RCCEx_PLLSAI2_Config.constprop.4+0xa8>)
 c01ac40:	681b      	ldr	r3, [r3, #0]
 c01ac42:	0799      	lsls	r1, r3, #30
 c01ac44:	d405      	bmi.n	c01ac52 <RCCEx_PLLSAI2_Config.constprop.4+0x26>
      }
    }
  }

  return status;
}
 c01ac46:	bd70      	pop	{r4, r5, r6, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c01ac48:	4b22      	ldr	r3, [pc, #136]	; (c01acd4 <RCCEx_PLLSAI2_Config.constprop.4+0xa8>)
 c01ac4a:	681b      	ldr	r3, [r3, #0]
 c01ac4c:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c01ac50:	d03d      	beq.n	c01acce <RCCEx_PLLSAI2_Config.constprop.4+0xa2>
    __HAL_RCC_PLLSAI2_DISABLE();
 c01ac52:	4c20      	ldr	r4, [pc, #128]	; (c01acd4 <RCCEx_PLLSAI2_Config.constprop.4+0xa8>)
 c01ac54:	6823      	ldr	r3, [r4, #0]
 c01ac56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c01ac5a:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 c01ac5c:	f7ff fb94 	bl	c01a388 <HAL_GetTick>
 c01ac60:	4606      	mov	r6, r0
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c01ac62:	6823      	ldr	r3, [r4, #0]
 c01ac64:	009a      	lsls	r2, r3, #2
 c01ac66:	d41d      	bmi.n	c01aca4 <RCCEx_PLLSAI2_Config.constprop.4+0x78>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 c01ac68:	6962      	ldr	r2, [r4, #20]
 c01ac6a:	4b1b      	ldr	r3, [pc, #108]	; (c01acd8 <RCCEx_PLLSAI2_Config.constprop.4+0xac>)
 c01ac6c:	4013      	ands	r3, r2
 c01ac6e:	682a      	ldr	r2, [r5, #0]
 c01ac70:	4313      	orrs	r3, r2
 c01ac72:	68aa      	ldr	r2, [r5, #8]
 c01ac74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 c01ac78:	68ea      	ldr	r2, [r5, #12]
 c01ac7a:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 c01ac7e:	686a      	ldr	r2, [r5, #4]
 c01ac80:	3a01      	subs	r2, #1
 c01ac82:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 c01ac86:	6163      	str	r3, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 c01ac88:	6823      	ldr	r3, [r4, #0]
 c01ac8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c01ac8e:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 c01ac90:	f7ff fb7a 	bl	c01a388 <HAL_GetTick>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c01ac94:	4c0f      	ldr	r4, [pc, #60]	; (c01acd4 <RCCEx_PLLSAI2_Config.constprop.4+0xa8>)
      tickstart = HAL_GetTick();
 c01ac96:	4606      	mov	r6, r0
 c01ac98:	e010      	b.n	c01acbc <RCCEx_PLLSAI2_Config.constprop.4+0x90>
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c01ac9a:	4b0e      	ldr	r3, [pc, #56]	; (c01acd4 <RCCEx_PLLSAI2_Config.constprop.4+0xa8>)
 c01ac9c:	681b      	ldr	r3, [r3, #0]
 c01ac9e:	f413 2fc0 	tst.w	r3, #393216	; 0x60000
 c01aca2:	e7d5      	b.n	c01ac50 <RCCEx_PLLSAI2_Config.constprop.4+0x24>
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c01aca4:	f7ff fb70 	bl	c01a388 <HAL_GetTick>
 c01aca8:	1b80      	subs	r0, r0, r6
 c01acaa:	2802      	cmp	r0, #2
 c01acac:	d9d9      	bls.n	c01ac62 <RCCEx_PLLSAI2_Config.constprop.4+0x36>
        status = HAL_TIMEOUT;
 c01acae:	2003      	movs	r0, #3
 c01acb0:	e7c9      	b.n	c01ac46 <RCCEx_PLLSAI2_Config.constprop.4+0x1a>
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c01acb2:	f7ff fb69 	bl	c01a388 <HAL_GetTick>
 c01acb6:	1b80      	subs	r0, r0, r6
 c01acb8:	2802      	cmp	r0, #2
 c01acba:	d8f8      	bhi.n	c01acae <RCCEx_PLLSAI2_Config.constprop.4+0x82>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c01acbc:	6823      	ldr	r3, [r4, #0]
 c01acbe:	009b      	lsls	r3, r3, #2
 c01acc0:	d5f7      	bpl.n	c01acb2 <RCCEx_PLLSAI2_Config.constprop.4+0x86>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 c01acc2:	6963      	ldr	r3, [r4, #20]
 c01acc4:	692a      	ldr	r2, [r5, #16]
 c01acc6:	2000      	movs	r0, #0
 c01acc8:	4313      	orrs	r3, r2
 c01acca:	6163      	str	r3, [r4, #20]
 c01accc:	e7bb      	b.n	c01ac46 <RCCEx_PLLSAI2_Config.constprop.4+0x1a>
        status = HAL_ERROR;
 c01acce:	2001      	movs	r0, #1
 c01acd0:	e7b9      	b.n	c01ac46 <RCCEx_PLLSAI2_Config.constprop.4+0x1a>
 c01acd2:	bf00      	nop
 c01acd4:	50021000 	.word	0x50021000
 c01acd8:	07ff800c 	.word	0x07ff800c

0c01acdc <HAL_RCCEx_PeriphCLKConfig>:
{
 c01acdc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 c01ace0:	6805      	ldr	r5, [r0, #0]
{
 c01ace2:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 c01ace4:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 c01ace8:	d023      	beq.n	c01ad32 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch (PeriphClkInit->Sai1ClockSelection)
 c01acea:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 c01acec:	2940      	cmp	r1, #64	; 0x40
 c01acee:	d014      	beq.n	c01ad1a <HAL_RCCEx_PeriphCLKConfig+0x3e>
 c01acf0:	d804      	bhi.n	c01acfc <HAL_RCCEx_PeriphCLKConfig+0x20>
 c01acf2:	b1c1      	cbz	r1, c01ad26 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 c01acf4:	2920      	cmp	r1, #32
 c01acf6:	d02b      	beq.n	c01ad50 <HAL_RCCEx_PeriphCLKConfig+0x74>
        ret = HAL_ERROR;
 c01acf8:	2501      	movs	r5, #1
 c01acfa:	e01a      	b.n	c01ad32 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch (PeriphClkInit->Sai1ClockSelection)
 c01acfc:	2960      	cmp	r1, #96	; 0x60
 c01acfe:	d001      	beq.n	c01ad04 <HAL_RCCEx_PeriphCLKConfig+0x28>
 c01ad00:	2980      	cmp	r1, #128	; 0x80
 c01ad02:	d1f9      	bne.n	c01acf8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 c01ad04:	4a4e      	ldr	r2, [pc, #312]	; (c01ae40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 c01ad06:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 c01ad08:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 c01ad0c:	2500      	movs	r5, #0
 c01ad0e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 c01ad12:	430b      	orrs	r3, r1
 c01ad14:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 c01ad18:	e00b      	b.n	c01ad32 <HAL_RCCEx_PeriphCLKConfig+0x56>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c01ad1a:	4a49      	ldr	r2, [pc, #292]	; (c01ae40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 c01ad1c:	68d3      	ldr	r3, [r2, #12]
 c01ad1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c01ad22:	60d3      	str	r3, [r2, #12]
 c01ad24:	e7ee      	b.n	c01ad04 <HAL_RCCEx_PeriphCLKConfig+0x28>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c01ad26:	3004      	adds	r0, #4
 c01ad28:	f7ff ff04 	bl	c01ab34 <RCCEx_PLLSAI1_Config>
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c01ad2c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 c01ad2e:	2800      	cmp	r0, #0
 c01ad30:	d0e8      	beq.n	c01ad04 <HAL_RCCEx_PeriphCLKConfig+0x28>
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 c01ad32:	6823      	ldr	r3, [r4, #0]
 c01ad34:	04d8      	lsls	r0, r3, #19
 c01ad36:	d509      	bpl.n	c01ad4c <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch (PeriphClkInit->Sai2ClockSelection)
 c01ad38:	6f21      	ldr	r1, [r4, #112]	; 0x70
 c01ad3a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 c01ad3e:	d013      	beq.n	c01ad68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 c01ad40:	d80a      	bhi.n	c01ad58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 c01ad42:	b1b9      	cbz	r1, c01ad74 <HAL_RCCEx_PeriphCLKConfig+0x98>
 c01ad44:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 c01ad48:	d070      	beq.n	c01ae2c <HAL_RCCEx_PeriphCLKConfig+0x150>
        ret = HAL_ERROR;
 c01ad4a:	2501      	movs	r5, #1
 c01ad4c:	462e      	mov	r6, r5
 c01ad4e:	e020      	b.n	c01ad92 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c01ad50:	3020      	adds	r0, #32
 c01ad52:	f7ff ff6b 	bl	c01ac2c <RCCEx_PLLSAI2_Config.constprop.4>
 c01ad56:	e7e9      	b.n	c01ad2c <HAL_RCCEx_PeriphCLKConfig+0x50>
    switch (PeriphClkInit->Sai2ClockSelection)
 c01ad58:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 c01ad5c:	d002      	beq.n	c01ad64 <HAL_RCCEx_PeriphCLKConfig+0x88>
 c01ad5e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 c01ad62:	d1f2      	bne.n	c01ad4a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 c01ad64:	462e      	mov	r6, r5
 c01ad66:	e009      	b.n	c01ad7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c01ad68:	4a35      	ldr	r2, [pc, #212]	; (c01ae40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 c01ad6a:	68d3      	ldr	r3, [r2, #12]
 c01ad6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c01ad70:	60d3      	str	r3, [r2, #12]
 c01ad72:	e7f7      	b.n	c01ad64 <HAL_RCCEx_PeriphCLKConfig+0x88>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c01ad74:	1d20      	adds	r0, r4, #4
 c01ad76:	f7ff fedd 	bl	c01ab34 <RCCEx_PLLSAI1_Config>
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c01ad7a:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 c01ad7c:	2e00      	cmp	r6, #0
 c01ad7e:	d15a      	bne.n	c01ae36 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 c01ad80:	4a2f      	ldr	r2, [pc, #188]	; (c01ae40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 c01ad82:	6f21      	ldr	r1, [r4, #112]	; 0x70
 c01ad84:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 c01ad88:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 c01ad8c:	430b      	orrs	r3, r1
 c01ad8e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 c01ad92:	6823      	ldr	r3, [r4, #0]
 c01ad94:	0399      	lsls	r1, r3, #14
 c01ad96:	d565      	bpl.n	c01ae64 <HAL_RCCEx_PeriphCLKConfig+0x188>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c01ad98:	4b29      	ldr	r3, [pc, #164]	; (c01ae40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 c01ad9a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 c01ad9c:	00d2      	lsls	r2, r2, #3
 c01ad9e:	d44c      	bmi.n	c01ae3a <HAL_RCCEx_PeriphCLKConfig+0x15e>
      pwrclkchanged = SET;
 c01ada0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 c01ada2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 c01ada4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 c01ada8:	659a      	str	r2, [r3, #88]	; 0x58
 c01adaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c01adac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c01adb0:	9301      	str	r3, [sp, #4]
 c01adb2:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c01adb4:	f8df 808c 	ldr.w	r8, [pc, #140]	; c01ae44 <HAL_RCCEx_PeriphCLKConfig+0x168>
 c01adb8:	f8d8 3000 	ldr.w	r3, [r8]
 c01adbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c01adc0:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 c01adc4:	f7ff fae0 	bl	c01a388 <HAL_GetTick>
 c01adc8:	4681      	mov	r9, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c01adca:	f8d8 3000 	ldr.w	r3, [r8]
 c01adce:	05db      	lsls	r3, r3, #23
 c01add0:	d53a      	bpl.n	c01ae48 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if (ret == HAL_OK)
 c01add2:	2e00      	cmp	r6, #0
 c01add4:	f040 8126 	bne.w	c01b024 <HAL_RCCEx_PeriphCLKConfig+0x348>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 c01add8:	4a19      	ldr	r2, [pc, #100]	; (c01ae40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 c01adda:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 c01adde:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 c01ade2:	d015      	beq.n	c01ae10 <HAL_RCCEx_PeriphCLKConfig+0x134>
 c01ade4:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 c01ade8:	4299      	cmp	r1, r3
 c01adea:	d011      	beq.n	c01ae10 <HAL_RCCEx_PeriphCLKConfig+0x134>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 c01adec:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 c01adf0:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 c01adf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 c01adf8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 c01adfc:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 c01ae00:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 c01ae04:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 c01ae08:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 c01ae0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 c01ae10:	07d8      	lsls	r0, r3, #31
 c01ae12:	f100 80f4 	bmi.w	c01affe <HAL_RCCEx_PeriphCLKConfig+0x322>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 c01ae16:	4a0a      	ldr	r2, [pc, #40]	; (c01ae40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 c01ae18:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 c01ae1c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 c01ae20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 c01ae24:	430b      	orrs	r3, r1
 c01ae26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c01ae2a:	e015      	b.n	c01ae58 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c01ae2c:	f104 0020 	add.w	r0, r4, #32
 c01ae30:	f7ff fefc 	bl	c01ac2c <RCCEx_PLLSAI2_Config.constprop.4>
 c01ae34:	e7a1      	b.n	c01ad7a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 c01ae36:	4635      	mov	r5, r6
 c01ae38:	e7ab      	b.n	c01ad92 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    FlagStatus       pwrclkchanged = RESET;
 c01ae3a:	2700      	movs	r7, #0
 c01ae3c:	e7ba      	b.n	c01adb4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 c01ae3e:	bf00      	nop
 c01ae40:	50021000 	.word	0x50021000
 c01ae44:	50007000 	.word	0x50007000
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c01ae48:	f7ff fa9e 	bl	c01a388 <HAL_GetTick>
 c01ae4c:	eba0 0009 	sub.w	r0, r0, r9
 c01ae50:	2802      	cmp	r0, #2
 c01ae52:	d9ba      	bls.n	c01adca <HAL_RCCEx_PeriphCLKConfig+0xee>
        ret = HAL_TIMEOUT;
 c01ae54:	2503      	movs	r5, #3
 c01ae56:	462e      	mov	r6, r5
    if (pwrclkchanged == SET)
 c01ae58:	b127      	cbz	r7, c01ae64 <HAL_RCCEx_PeriphCLKConfig+0x188>
      __HAL_RCC_PWR_CLK_DISABLE();
 c01ae5a:	4abb      	ldr	r2, [pc, #748]	; (c01b148 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 c01ae5c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 c01ae5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c01ae62:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 c01ae64:	6823      	ldr	r3, [r4, #0]
 c01ae66:	07da      	lsls	r2, r3, #31
 c01ae68:	d508      	bpl.n	c01ae7c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 c01ae6a:	49b7      	ldr	r1, [pc, #732]	; (c01b148 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 c01ae6c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 c01ae6e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 c01ae72:	f022 0203 	bic.w	r2, r2, #3
 c01ae76:	4302      	orrs	r2, r0
 c01ae78:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 c01ae7c:	079f      	lsls	r7, r3, #30
 c01ae7e:	d508      	bpl.n	c01ae92 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 c01ae80:	49b1      	ldr	r1, [pc, #708]	; (c01b148 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 c01ae82:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 c01ae84:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 c01ae88:	f022 020c 	bic.w	r2, r2, #12
 c01ae8c:	4302      	orrs	r2, r0
 c01ae8e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 c01ae92:	0758      	lsls	r0, r3, #29
 c01ae94:	d508      	bpl.n	c01aea8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 c01ae96:	49ac      	ldr	r1, [pc, #688]	; (c01b148 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 c01ae98:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 c01ae9a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 c01ae9e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 c01aea2:	4302      	orrs	r2, r0
 c01aea4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 c01aea8:	0719      	lsls	r1, r3, #28
 c01aeaa:	d508      	bpl.n	c01aebe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 c01aeac:	49a6      	ldr	r1, [pc, #664]	; (c01b148 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 c01aeae:	6c20      	ldr	r0, [r4, #64]	; 0x40
 c01aeb0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 c01aeb4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 c01aeb8:	4302      	orrs	r2, r0
 c01aeba:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 c01aebe:	06da      	lsls	r2, r3, #27
 c01aec0:	d508      	bpl.n	c01aed4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 c01aec2:	49a1      	ldr	r1, [pc, #644]	; (c01b148 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 c01aec4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 c01aec6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 c01aeca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 c01aece:	4302      	orrs	r2, r0
 c01aed0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 c01aed4:	069f      	lsls	r7, r3, #26
 c01aed6:	d508      	bpl.n	c01aeea <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 c01aed8:	499b      	ldr	r1, [pc, #620]	; (c01b148 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 c01aeda:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 c01aedc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 c01aee0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 c01aee4:	4302      	orrs	r2, r0
 c01aee6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 c01aeea:	0598      	lsls	r0, r3, #22
 c01aeec:	d508      	bpl.n	c01af00 <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 c01aeee:	4996      	ldr	r1, [pc, #600]	; (c01b148 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 c01aef0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 c01aef2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 c01aef6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 c01aefa:	4302      	orrs	r2, r0
 c01aefc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 c01af00:	0559      	lsls	r1, r3, #21
 c01af02:	d508      	bpl.n	c01af16 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 c01af04:	4990      	ldr	r1, [pc, #576]	; (c01b148 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 c01af06:	6e20      	ldr	r0, [r4, #96]	; 0x60
 c01af08:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 c01af0c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 c01af10:	4302      	orrs	r2, r0
 c01af12:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 c01af16:	025a      	lsls	r2, r3, #9
 c01af18:	d508      	bpl.n	c01af2c <HAL_RCCEx_PeriphCLKConfig+0x250>
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 c01af1a:	498b      	ldr	r1, [pc, #556]	; (c01b148 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 c01af1c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 c01af1e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 c01af22:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 c01af26:	4302      	orrs	r2, r0
 c01af28:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 c01af2c:	019b      	lsls	r3, r3, #6
 c01af2e:	d513      	bpl.n	c01af58 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    switch (PeriphClkInit->FdcanClockSelection)
 c01af30:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 c01af32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c01af36:	d077      	beq.n	c01b028 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 c01af38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c01af3c:	d07a      	beq.n	c01b034 <HAL_RCCEx_PeriphCLKConfig+0x358>
 c01af3e:	2b00      	cmp	r3, #0
 c01af40:	d17e      	bne.n	c01b040 <HAL_RCCEx_PeriphCLKConfig+0x364>
    if (ret == HAL_OK)
 c01af42:	2e00      	cmp	r6, #0
 c01af44:	d17e      	bne.n	c01b044 <HAL_RCCEx_PeriphCLKConfig+0x368>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 c01af46:	4a80      	ldr	r2, [pc, #512]	; (c01b148 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 c01af48:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 c01af4a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 c01af4e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 c01af52:	430b      	orrs	r3, r1
 c01af54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 c01af58:	6823      	ldr	r3, [r4, #0]
 c01af5a:	065f      	lsls	r7, r3, #25
 c01af5c:	d508      	bpl.n	c01af70 <HAL_RCCEx_PeriphCLKConfig+0x294>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 c01af5e:	497a      	ldr	r1, [pc, #488]	; (c01b148 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 c01af60:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 c01af62:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 c01af66:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 c01af6a:	4302      	orrs	r2, r0
 c01af6c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 c01af70:	061e      	lsls	r6, r3, #24
 c01af72:	d508      	bpl.n	c01af86 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 c01af74:	4974      	ldr	r1, [pc, #464]	; (c01b148 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 c01af76:	6d20      	ldr	r0, [r4, #80]	; 0x50
 c01af78:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 c01af7c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 c01af80:	4302      	orrs	r2, r0
 c01af82:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 c01af86:	05d8      	lsls	r0, r3, #23
 c01af88:	d508      	bpl.n	c01af9c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 c01af8a:	496f      	ldr	r1, [pc, #444]	; (c01b148 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 c01af8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 c01af8e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 c01af92:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 c01af96:	4302      	orrs	r2, r0
 c01af98:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 c01af9c:	02d9      	lsls	r1, r3, #11
 c01af9e:	d508      	bpl.n	c01afb2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 c01afa0:	4969      	ldr	r1, [pc, #420]	; (c01b148 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 c01afa2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c01afa4:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 c01afa8:	f022 0203 	bic.w	r2, r2, #3
 c01afac:	4302      	orrs	r2, r0
 c01afae:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 c01afb2:	049a      	lsls	r2, r3, #18
 c01afb4:	d510      	bpl.n	c01afd8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 c01afb6:	4a64      	ldr	r2, [pc, #400]	; (c01b148 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 c01afb8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 c01afba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 c01afbe:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 c01afc2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 c01afc6:	ea43 0301 	orr.w	r3, r3, r1
 c01afca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 c01afce:	d13b      	bne.n	c01b048 <HAL_RCCEx_PeriphCLKConfig+0x36c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c01afd0:	68d3      	ldr	r3, [r2, #12]
 c01afd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c01afd6:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 c01afd8:	6823      	ldr	r3, [r4, #0]
 c01afda:	031b      	lsls	r3, r3, #12
 c01afdc:	d557      	bpl.n	c01b08e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 c01afde:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 c01afe0:	4b59      	ldr	r3, [pc, #356]	; (c01b148 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 c01afe2:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 c01afe6:	d13a      	bne.n	c01b05e <HAL_RCCEx_PeriphCLKConfig+0x382>
 c01afe8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 c01afec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 c01aff0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c01aff4:	68da      	ldr	r2, [r3, #12]
 c01aff6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c01affa:	60da      	str	r2, [r3, #12]
 c01affc:	e047      	b.n	c01b08e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
        tickstart = HAL_GetTick();
 c01affe:	f7ff f9c3 	bl	c01a388 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c01b002:	f241 3a88 	movw	sl, #5000	; 0x1388
        tickstart = HAL_GetTick();
 c01b006:	4681      	mov	r9, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c01b008:	f8df 813c 	ldr.w	r8, [pc, #316]	; c01b148 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 c01b00c:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 c01b010:	0799      	lsls	r1, r3, #30
 c01b012:	f53f af00 	bmi.w	c01ae16 <HAL_RCCEx_PeriphCLKConfig+0x13a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c01b016:	f7ff f9b7 	bl	c01a388 <HAL_GetTick>
 c01b01a:	eba0 0009 	sub.w	r0, r0, r9
 c01b01e:	4550      	cmp	r0, sl
 c01b020:	d9f4      	bls.n	c01b00c <HAL_RCCEx_PeriphCLKConfig+0x330>
 c01b022:	e717      	b.n	c01ae54 <HAL_RCCEx_PeriphCLKConfig+0x178>
 c01b024:	4635      	mov	r5, r6
 c01b026:	e717      	b.n	c01ae58 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c01b028:	4a47      	ldr	r2, [pc, #284]	; (c01b148 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 c01b02a:	68d3      	ldr	r3, [r2, #12]
 c01b02c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c01b030:	60d3      	str	r3, [r2, #12]
        break;
 c01b032:	e786      	b.n	c01af42 <HAL_RCCEx_PeriphCLKConfig+0x266>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c01b034:	2100      	movs	r1, #0
 c01b036:	1d20      	adds	r0, r4, #4
 c01b038:	f7ff fd7c 	bl	c01ab34 <RCCEx_PLLSAI1_Config>
 c01b03c:	4606      	mov	r6, r0
        break;
 c01b03e:	e780      	b.n	c01af42 <HAL_RCCEx_PeriphCLKConfig+0x266>
        ret = HAL_ERROR;
 c01b040:	2501      	movs	r5, #1
 c01b042:	e789      	b.n	c01af58 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 c01b044:	4635      	mov	r5, r6
 c01b046:	e787      	b.n	c01af58 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 c01b048:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 c01b04c:	d1c4      	bne.n	c01afd8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c01b04e:	2101      	movs	r1, #1
 c01b050:	1d20      	adds	r0, r4, #4
 c01b052:	f7ff fd6f 	bl	c01ab34 <RCCEx_PLLSAI1_Config>
 c01b056:	2800      	cmp	r0, #0
 c01b058:	bf18      	it	ne
 c01b05a:	4605      	movne	r5, r0
 c01b05c:	e7bc      	b.n	c01afd8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 c01b05e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 c01b062:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 c01b066:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 c01b06a:	ea42 0201 	orr.w	r2, r2, r1
 c01b06e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 c01b072:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 c01b076:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 c01b07a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 c01b07e:	d165      	bne.n	c01b14c <HAL_RCCEx_PeriphCLKConfig+0x470>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c01b080:	2101      	movs	r1, #1
 c01b082:	1d20      	adds	r0, r4, #4
 c01b084:	f7ff fd56 	bl	c01ab34 <RCCEx_PLLSAI1_Config>
 c01b088:	2800      	cmp	r0, #0
 c01b08a:	bf18      	it	ne
 c01b08c:	4605      	movne	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 c01b08e:	6823      	ldr	r3, [r4, #0]
 c01b090:	035f      	lsls	r7, r3, #13
 c01b092:	d510      	bpl.n	c01b0b6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 c01b094:	4a2c      	ldr	r2, [pc, #176]	; (c01b148 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 c01b096:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 c01b098:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 c01b09c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 c01b0a0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 c01b0a4:	ea43 0301 	orr.w	r3, r3, r1
 c01b0a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 c01b0ac:	d155      	bne.n	c01b15a <HAL_RCCEx_PeriphCLKConfig+0x47e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c01b0ae:	68d3      	ldr	r3, [r2, #12]
 c01b0b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c01b0b4:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 c01b0b6:	6823      	ldr	r3, [r4, #0]
 c01b0b8:	045e      	lsls	r6, r3, #17
 c01b0ba:	d514      	bpl.n	c01b0e6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 c01b0bc:	4922      	ldr	r1, [pc, #136]	; (c01b148 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 c01b0be:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 c01b0c2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 c01b0c6:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 c01b0ca:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 c01b0ce:	ea43 0302 	orr.w	r3, r3, r2
 c01b0d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 c01b0d6:	d106      	bne.n	c01b0e6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 c01b0d8:	2102      	movs	r1, #2
 c01b0da:	1d20      	adds	r0, r4, #4
 c01b0dc:	f7ff fd2a 	bl	c01ab34 <RCCEx_PLLSAI1_Config>
 c01b0e0:	2800      	cmp	r0, #0
 c01b0e2:	bf18      	it	ne
 c01b0e4:	4605      	movne	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 c01b0e6:	6822      	ldr	r2, [r4, #0]
 c01b0e8:	03d0      	lsls	r0, r2, #15
 c01b0ea:	d509      	bpl.n	c01b100 <HAL_RCCEx_PeriphCLKConfig+0x424>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 c01b0ec:	4916      	ldr	r1, [pc, #88]	; (c01b148 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 c01b0ee:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 c01b0f2:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 c01b0f6:	f023 0304 	bic.w	r3, r3, #4
 c01b0fa:	4303      	orrs	r3, r0
 c01b0fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 c01b100:	0291      	lsls	r1, r2, #10
 c01b102:	d509      	bpl.n	c01b118 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 c01b104:	4910      	ldr	r1, [pc, #64]	; (c01b148 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 c01b106:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 c01b10a:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 c01b10e:	f023 0318 	bic.w	r3, r3, #24
 c01b112:	4303      	orrs	r3, r0
 c01b114:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 c01b118:	01d3      	lsls	r3, r2, #7
 c01b11a:	d511      	bpl.n	c01b140 <HAL_RCCEx_PeriphCLKConfig+0x464>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 c01b11c:	4a0a      	ldr	r2, [pc, #40]	; (c01b148 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 c01b11e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 c01b122:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 c01b126:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 c01b12a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 c01b12e:	ea43 0301 	orr.w	r3, r3, r1
 c01b132:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c01b136:	bf02      	ittt	eq
 c01b138:	68d3      	ldreq	r3, [r2, #12]
 c01b13a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 c01b13e:	60d3      	streq	r3, [r2, #12]
}
 c01b140:	4628      	mov	r0, r5
 c01b142:	b002      	add	sp, #8
 c01b144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c01b148:	50021000 	.word	0x50021000
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 c01b14c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 c01b150:	d19d      	bne.n	c01b08e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c01b152:	68da      	ldr	r2, [r3, #12]
 c01b154:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 c01b158:	e74f      	b.n	c01affa <HAL_RCCEx_PeriphCLKConfig+0x31e>
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 c01b15a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 c01b15e:	d1aa      	bne.n	c01b0b6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c01b160:	2101      	movs	r1, #1
 c01b162:	1d20      	adds	r0, r4, #4
 c01b164:	f7ff fce6 	bl	c01ab34 <RCCEx_PLLSAI1_Config>
 c01b168:	2800      	cmp	r0, #0
 c01b16a:	bf18      	it	ne
 c01b16c:	4605      	movne	r5, r0
 c01b16e:	e7a2      	b.n	c01b0b6 <HAL_RCCEx_PeriphCLKConfig+0x3da>

0c01b170 <HAL_RNG_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_MspInit must be implemented in the user file.
   */
}
 c01b170:	4770      	bx	lr

0c01b172 <HAL_RNG_Init>:
{
 c01b172:	b538      	push	{r3, r4, r5, lr}
  if (hrng == NULL)
 c01b174:	4604      	mov	r4, r0
 c01b176:	b358      	cbz	r0, c01b1d0 <HAL_RNG_Init+0x5e>
  if (hrng->State == HAL_RNG_STATE_RESET)
 c01b178:	7a43      	ldrb	r3, [r0, #9]
 c01b17a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 c01b17e:	b913      	cbnz	r3, c01b186 <HAL_RNG_Init+0x14>
    hrng->Lock = HAL_UNLOCKED;
 c01b180:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 c01b182:	f7ff fff5 	bl	c01b170 <HAL_RNG_MspInit>
  hrng->State = HAL_RNG_STATE_BUSY;
 c01b186:	2302      	movs	r3, #2
 c01b188:	7263      	strb	r3, [r4, #9]
  __HAL_RNG_DISABLE(hrng);
 c01b18a:	6823      	ldr	r3, [r4, #0]
 c01b18c:	681a      	ldr	r2, [r3, #0]
 c01b18e:	f022 0204 	bic.w	r2, r2, #4
 c01b192:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 c01b194:	6819      	ldr	r1, [r3, #0]
 c01b196:	6862      	ldr	r2, [r4, #4]
 c01b198:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
 c01b19c:	f021 0120 	bic.w	r1, r1, #32
 c01b1a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 c01b1a4:	430a      	orrs	r2, r1
 c01b1a6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 c01b1a8:	681a      	ldr	r2, [r3, #0]
 c01b1aa:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 c01b1ae:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 c01b1b0:	f7ff f8ea 	bl	c01a388 <HAL_GetTick>
 c01b1b4:	4605      	mov	r5, r0
  while(HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 c01b1b6:	6823      	ldr	r3, [r4, #0]
 c01b1b8:	681a      	ldr	r2, [r3, #0]
 c01b1ba:	0052      	lsls	r2, r2, #1
 c01b1bc:	d40a      	bmi.n	c01b1d4 <HAL_RNG_Init+0x62>
  __HAL_RNG_ENABLE(hrng);
 c01b1be:	681a      	ldr	r2, [r3, #0]
 c01b1c0:	f042 0204 	orr.w	r2, r2, #4
 c01b1c4:	601a      	str	r2, [r3, #0]
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 c01b1c6:	685b      	ldr	r3, [r3, #4]
 c01b1c8:	065b      	lsls	r3, r3, #25
 c01b1ca:	d50d      	bpl.n	c01b1e8 <HAL_RNG_Init+0x76>
    hrng->State = HAL_RNG_STATE_ERROR;
 c01b1cc:	2304      	movs	r3, #4
 c01b1ce:	7263      	strb	r3, [r4, #9]
    return HAL_ERROR;
 c01b1d0:	2001      	movs	r0, #1
 c01b1d2:	e008      	b.n	c01b1e6 <HAL_RNG_Init+0x74>
    if((HAL_GetTick() - tickstart ) > RNG_TIMEOUT_VALUE)
 c01b1d4:	f7ff f8d8 	bl	c01a388 <HAL_GetTick>
 c01b1d8:	1b40      	subs	r0, r0, r5
 c01b1da:	2802      	cmp	r0, #2
 c01b1dc:	d9eb      	bls.n	c01b1b6 <HAL_RNG_Init+0x44>
      hrng->State = HAL_RNG_STATE_READY;
 c01b1de:	2001      	movs	r0, #1
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 c01b1e0:	2302      	movs	r3, #2
      hrng->State = HAL_RNG_STATE_READY;
 c01b1e2:	7260      	strb	r0, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 c01b1e4:	60e3      	str	r3, [r4, #12]
}
 c01b1e6:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 c01b1e8:	f7ff f8ce 	bl	c01a388 <HAL_GetTick>
 c01b1ec:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 c01b1ee:	6823      	ldr	r3, [r4, #0]
 c01b1f0:	6858      	ldr	r0, [r3, #4]
 c01b1f2:	f010 0004 	ands.w	r0, r0, #4
 c01b1f6:	d103      	bne.n	c01b200 <HAL_RNG_Init+0x8e>
  hrng->State = HAL_RNG_STATE_READY;
 c01b1f8:	2301      	movs	r3, #1
 c01b1fa:	7263      	strb	r3, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 c01b1fc:	60e0      	str	r0, [r4, #12]
  return HAL_OK;
 c01b1fe:	e7f2      	b.n	c01b1e6 <HAL_RNG_Init+0x74>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 c01b200:	f7ff f8c2 	bl	c01a388 <HAL_GetTick>
 c01b204:	1b40      	subs	r0, r0, r5
 c01b206:	2802      	cmp	r0, #2
 c01b208:	d9f1      	bls.n	c01b1ee <HAL_RNG_Init+0x7c>
      hrng->State = HAL_RNG_STATE_ERROR;
 c01b20a:	2304      	movs	r3, #4
 c01b20c:	7263      	strb	r3, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 c01b20e:	2302      	movs	r3, #2
 c01b210:	60e3      	str	r3, [r4, #12]
 c01b212:	e7dd      	b.n	c01b1d0 <HAL_RNG_Init+0x5e>

0c01b214 <HAL_RNG_MspDeInit>:
 c01b214:	4770      	bx	lr

0c01b216 <HAL_RNG_DeInit>:
{
 c01b216:	b570      	push	{r4, r5, r6, lr}
  if (hrng == NULL)
 c01b218:	4605      	mov	r5, r0
 c01b21a:	b370      	cbz	r0, c01b27a <HAL_RNG_DeInit+0x64>
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, RNG_CED_ENABLE | RNG_CR_CONDRST);
 c01b21c:	6802      	ldr	r2, [r0, #0]
 c01b21e:	6813      	ldr	r3, [r2, #0]
 c01b220:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 c01b224:	f023 0320 	bic.w	r3, r3, #32
 c01b228:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 c01b22c:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 c01b22e:	6813      	ldr	r3, [r2, #0]
 c01b230:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 c01b234:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 c01b236:	f7ff f8a7 	bl	c01a388 <HAL_GetTick>
 c01b23a:	4606      	mov	r6, r0
  while(HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 c01b23c:	682b      	ldr	r3, [r5, #0]
 c01b23e:	681c      	ldr	r4, [r3, #0]
 c01b240:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
 c01b244:	d10f      	bne.n	c01b266 <HAL_RNG_DeInit+0x50>
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 c01b246:	681a      	ldr	r2, [r3, #0]
  HAL_RNG_MspDeInit(hrng);
 c01b248:	4628      	mov	r0, r5
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 c01b24a:	f022 020c 	bic.w	r2, r2, #12
 c01b24e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(hrng->Instance->SR, RNG_SR_CEIS | RNG_SR_SEIS);
 c01b250:	685a      	ldr	r2, [r3, #4]
 c01b252:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 c01b256:	605a      	str	r2, [r3, #4]
  HAL_RNG_MspDeInit(hrng);
 c01b258:	f7ff ffdc 	bl	c01b214 <HAL_RNG_MspDeInit>
  hrng->State = HAL_RNG_STATE_RESET;
 c01b25c:	726c      	strb	r4, [r5, #9]
  __HAL_UNLOCK(hrng);
 c01b25e:	722c      	strb	r4, [r5, #8]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 c01b260:	60ec      	str	r4, [r5, #12]
  return HAL_OK;
 c01b262:	4620      	mov	r0, r4
 c01b264:	e008      	b.n	c01b278 <HAL_RNG_DeInit+0x62>
    if((HAL_GetTick() - tickstart ) > RNG_TIMEOUT_VALUE)
 c01b266:	f7ff f88f 	bl	c01a388 <HAL_GetTick>
 c01b26a:	1b80      	subs	r0, r0, r6
 c01b26c:	2802      	cmp	r0, #2
 c01b26e:	d9e5      	bls.n	c01b23c <HAL_RNG_DeInit+0x26>
      hrng->State = HAL_RNG_STATE_READY;
 c01b270:	2001      	movs	r0, #1
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 c01b272:	2302      	movs	r3, #2
      hrng->State = HAL_RNG_STATE_READY;
 c01b274:	7268      	strb	r0, [r5, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 c01b276:	60eb      	str	r3, [r5, #12]
}
 c01b278:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 c01b27a:	2001      	movs	r0, #1
 c01b27c:	e7fc      	b.n	c01b278 <HAL_RNG_DeInit+0x62>

0c01b27e <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 c01b27e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 c01b280:	7a03      	ldrb	r3, [r0, #8]
{
 c01b282:	4604      	mov	r4, r0
  __HAL_LOCK(hrng);
 c01b284:	2b01      	cmp	r3, #1
{
 c01b286:	460e      	mov	r6, r1
  __HAL_LOCK(hrng);
 c01b288:	d025      	beq.n	c01b2d6 <HAL_RNG_GenerateRandomNumber+0x58>
 c01b28a:	2001      	movs	r0, #1

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 c01b28c:	7a63      	ldrb	r3, [r4, #9]
  __HAL_LOCK(hrng);
 c01b28e:	7220      	strb	r0, [r4, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 c01b290:	4283      	cmp	r3, r0
 c01b292:	d11d      	bne.n	c01b2d0 <HAL_RNG_GenerateRandomNumber+0x52>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 c01b294:	2302      	movs	r3, #2
 c01b296:	7263      	strb	r3, [r4, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 c01b298:	f7ff f876 	bl	c01a388 <HAL_GetTick>
 c01b29c:	4607      	mov	r7, r0

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 c01b29e:	6822      	ldr	r2, [r4, #0]
 c01b2a0:	6855      	ldr	r5, [r2, #4]
 c01b2a2:	f015 0501 	ands.w	r5, r5, #1
 c01b2a6:	d008      	beq.n	c01b2ba <HAL_RNG_GenerateRandomNumber+0x3c>
        return HAL_ERROR;
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 c01b2a8:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 c01b2aa:	2000      	movs	r0, #0
    hrng->RandomNumber = hrng->Instance->DR;
 c01b2ac:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 c01b2ae:	6033      	str	r3, [r6, #0]

    hrng->State = HAL_RNG_STATE_READY;
 c01b2b0:	2301      	movs	r3, #1
 c01b2b2:	7263      	strb	r3, [r4, #9]
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
    status = HAL_ERROR;
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 c01b2b4:	2300      	movs	r3, #0
 c01b2b6:	7223      	strb	r3, [r4, #8]

  return status;
 c01b2b8:	e009      	b.n	c01b2ce <HAL_RNG_GenerateRandomNumber+0x50>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 c01b2ba:	f7ff f865 	bl	c01a388 <HAL_GetTick>
 c01b2be:	1bc0      	subs	r0, r0, r7
 c01b2c0:	2802      	cmp	r0, #2
 c01b2c2:	d9ec      	bls.n	c01b29e <HAL_RNG_GenerateRandomNumber+0x20>
        hrng->State = HAL_RNG_STATE_READY;
 c01b2c4:	2001      	movs	r0, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 c01b2c6:	2302      	movs	r3, #2
        hrng->State = HAL_RNG_STATE_READY;
 c01b2c8:	7260      	strb	r0, [r4, #9]
        __HAL_UNLOCK(hrng);
 c01b2ca:	7225      	strb	r5, [r4, #8]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 c01b2cc:	60e3      	str	r3, [r4, #12]
}
 c01b2ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 c01b2d0:	2304      	movs	r3, #4
 c01b2d2:	60e3      	str	r3, [r4, #12]
 c01b2d4:	e7ee      	b.n	c01b2b4 <HAL_RNG_GenerateRandomNumber+0x36>
  __HAL_LOCK(hrng);
 c01b2d6:	2002      	movs	r0, #2
 c01b2d8:	e7f9      	b.n	c01b2ce <HAL_RNG_GenerateRandomNumber+0x50>

0c01b2da <HAL_UART_MspInit>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 c01b2da:	4770      	bx	lr

0c01b2dc <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 c01b2dc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 c01b2e0:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 c01b2e2:	2b20      	cmp	r3, #32
 c01b2e4:	d167      	bne.n	c01b3b6 <HAL_UART_Receive_IT+0xda>
  {
    if ((pData == NULL) || (Size == 0U))
 c01b2e6:	2900      	cmp	r1, #0
 c01b2e8:	d063      	beq.n	c01b3b2 <HAL_UART_Receive_IT+0xd6>
 c01b2ea:	2a00      	cmp	r2, #0
 c01b2ec:	d061      	beq.n	c01b3b2 <HAL_UART_Receive_IT+0xd6>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 c01b2ee:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 c01b2f2:	2b01      	cmp	r3, #1
 c01b2f4:	d05f      	beq.n	c01b3b6 <HAL_UART_Receive_IT+0xda>
 c01b2f6:	2301      	movs	r3, #1

    huart->pRxBuffPtr  = pData;
 c01b2f8:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferSize  = Size;
    huart->RxXferCount = Size;
    huart->RxISR       = NULL;
 c01b2fa:	2100      	movs	r1, #0
    __HAL_LOCK(huart);
 c01b2fc:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 c01b300:	6883      	ldr	r3, [r0, #8]
    huart->RxXferSize  = Size;
 c01b302:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    UART_MASK_COMPUTATION(huart);
 c01b306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 c01b30a:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    huart->RxISR       = NULL;
 c01b30e:	66c1      	str	r1, [r0, #108]	; 0x6c
    UART_MASK_COMPUTATION(huart);
 c01b310:	d12e      	bne.n	c01b370 <HAL_UART_Receive_IT+0x94>
 c01b312:	6901      	ldr	r1, [r0, #16]
 c01b314:	bb51      	cbnz	r1, c01b36c <HAL_UART_Receive_IT+0x90>
 c01b316:	f240 11ff 	movw	r1, #511	; 0x1ff
 c01b31a:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c01b31e:	2100      	movs	r1, #0
 c01b320:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 c01b324:	2122      	movs	r1, #34	; 0x22
 c01b326:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c01b32a:	6801      	ldr	r1, [r0, #0]
 c01b32c:	688c      	ldr	r4, [r1, #8]
 c01b32e:	f044 0401 	orr.w	r4, r4, #1
 c01b332:	608c      	str	r4, [r1, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 c01b334:	6e44      	ldr	r4, [r0, #100]	; 0x64
 c01b336:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 c01b33a:	d129      	bne.n	c01b390 <HAL_UART_Receive_IT+0xb4>
 c01b33c:	f8b0 4068 	ldrh.w	r4, [r0, #104]	; 0x68
 c01b340:	4294      	cmp	r4, r2
 c01b342:	d825      	bhi.n	c01b390 <HAL_UART_Receive_IT+0xb4>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c01b344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c01b348:	d120      	bne.n	c01b38c <HAL_UART_Receive_IT+0xb0>
 c01b34a:	6903      	ldr	r3, [r0, #16]
 c01b34c:	b9f3      	cbnz	r3, c01b38c <HAL_UART_Receive_IT+0xb0>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 c01b34e:	4b1b      	ldr	r3, [pc, #108]	; (c01b3bc <HAL_UART_Receive_IT+0xe0>)
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 c01b350:	66c3      	str	r3, [r0, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 c01b352:	2300      	movs	r3, #0

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 c01b354:	680a      	ldr	r2, [r1, #0]
      __HAL_UNLOCK(huart);
 c01b356:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 c01b35a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 c01b35e:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 c01b360:	688a      	ldr	r2, [r1, #8]
 c01b362:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 c01b366:	608a      	str	r2, [r1, #8]

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }

    return HAL_OK;
 c01b368:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 c01b36a:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 c01b36c:	21ff      	movs	r1, #255	; 0xff
 c01b36e:	e7d4      	b.n	c01b31a <HAL_UART_Receive_IT+0x3e>
 c01b370:	b923      	cbnz	r3, c01b37c <HAL_UART_Receive_IT+0xa0>
 c01b372:	6901      	ldr	r1, [r0, #16]
 c01b374:	2900      	cmp	r1, #0
 c01b376:	d0f9      	beq.n	c01b36c <HAL_UART_Receive_IT+0x90>
 c01b378:	217f      	movs	r1, #127	; 0x7f
 c01b37a:	e7ce      	b.n	c01b31a <HAL_UART_Receive_IT+0x3e>
 c01b37c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 c01b380:	d1cb      	bne.n	c01b31a <HAL_UART_Receive_IT+0x3e>
 c01b382:	6901      	ldr	r1, [r0, #16]
 c01b384:	2900      	cmp	r1, #0
 c01b386:	d0f7      	beq.n	c01b378 <HAL_UART_Receive_IT+0x9c>
 c01b388:	213f      	movs	r1, #63	; 0x3f
 c01b38a:	e7c6      	b.n	c01b31a <HAL_UART_Receive_IT+0x3e>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 c01b38c:	4b0c      	ldr	r3, [pc, #48]	; (c01b3c0 <HAL_UART_Receive_IT+0xe4>)
 c01b38e:	e7df      	b.n	c01b350 <HAL_UART_Receive_IT+0x74>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c01b390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c01b394:	d10b      	bne.n	c01b3ae <HAL_UART_Receive_IT+0xd2>
 c01b396:	6903      	ldr	r3, [r0, #16]
 c01b398:	b94b      	cbnz	r3, c01b3ae <HAL_UART_Receive_IT+0xd2>
        huart->RxISR = UART_RxISR_16BIT;
 c01b39a:	4b0a      	ldr	r3, [pc, #40]	; (c01b3c4 <HAL_UART_Receive_IT+0xe8>)
        huart->RxISR = UART_RxISR_8BIT;
 c01b39c:	66c3      	str	r3, [r0, #108]	; 0x6c
      __HAL_UNLOCK(huart);
 c01b39e:	2300      	movs	r3, #0
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 c01b3a0:	680a      	ldr	r2, [r1, #0]
      __HAL_UNLOCK(huart);
 c01b3a2:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 c01b3a6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 c01b3aa:	600a      	str	r2, [r1, #0]
 c01b3ac:	e7dc      	b.n	c01b368 <HAL_UART_Receive_IT+0x8c>
        huart->RxISR = UART_RxISR_8BIT;
 c01b3ae:	4b06      	ldr	r3, [pc, #24]	; (c01b3c8 <HAL_UART_Receive_IT+0xec>)
 c01b3b0:	e7f4      	b.n	c01b39c <HAL_UART_Receive_IT+0xc0>
      return HAL_ERROR;
 c01b3b2:	2001      	movs	r0, #1
 c01b3b4:	e7d9      	b.n	c01b36a <HAL_UART_Receive_IT+0x8e>
    return HAL_BUSY;
 c01b3b6:	2002      	movs	r0, #2
 c01b3b8:	e7d7      	b.n	c01b36a <HAL_UART_Receive_IT+0x8e>
 c01b3ba:	bf00      	nop
 c01b3bc:	0c01b529 	.word	0x0c01b529
 c01b3c0:	0c01b485 	.word	0x0c01b485
 c01b3c4:	0c01b42b 	.word	0x0c01b42b
 c01b3c8:	0c01b3cf 	.word	0x0c01b3cf

0c01b3cc <HAL_UART_RxCpltCallback>:
 c01b3cc:	4770      	bx	lr

0c01b3ce <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 c01b3ce:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
{
 c01b3d2:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 c01b3d4:	2922      	cmp	r1, #34	; 0x22
 c01b3d6:	6802      	ldr	r2, [r0, #0]
 c01b3d8:	d122      	bne.n	c01b420 <UART_RxISR_8BIT+0x52>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 c01b3da:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 c01b3dc:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 c01b3e0:	6d81      	ldr	r1, [r0, #88]	; 0x58
 c01b3e2:	4022      	ands	r2, r4
 c01b3e4:	700a      	strb	r2, [r1, #0]
    huart->pRxBuffPtr++;
 c01b3e6:	6d82      	ldr	r2, [r0, #88]	; 0x58
 c01b3e8:	3201      	adds	r2, #1
 c01b3ea:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 c01b3ec:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 c01b3f0:	3a01      	subs	r2, #1
 c01b3f2:	b292      	uxth	r2, r2
 c01b3f4:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 c01b3f8:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 c01b3fc:	b292      	uxth	r2, r2
 c01b3fe:	b972      	cbnz	r2, c01b41e <UART_RxISR_8BIT+0x50>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 c01b400:	6801      	ldr	r1, [r0, #0]
 c01b402:	680c      	ldr	r4, [r1, #0]
 c01b404:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 c01b408:	600c      	str	r4, [r1, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c01b40a:	688c      	ldr	r4, [r1, #8]
 c01b40c:	f024 0401 	bic.w	r4, r4, #1
 c01b410:	608c      	str	r4, [r1, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 c01b412:	2120      	movs	r1, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 c01b414:	66c2      	str	r2, [r0, #108]	; 0x6c
      huart->RxState = HAL_UART_STATE_READY;
 c01b416:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 c01b41a:	f7ff ffd7 	bl	c01b3cc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 c01b41e:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 c01b420:	6993      	ldr	r3, [r2, #24]
 c01b422:	f043 0308 	orr.w	r3, r3, #8
 c01b426:	6193      	str	r3, [r2, #24]
}
 c01b428:	e7f9      	b.n	c01b41e <UART_RxISR_8BIT+0x50>

0c01b42a <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 c01b42a:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
{
 c01b42e:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 c01b430:	2922      	cmp	r1, #34	; 0x22
 c01b432:	6802      	ldr	r2, [r0, #0]
 c01b434:	d120      	bne.n	c01b478 <UART_RxISR_16BIT+0x4e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 c01b436:	6a54      	ldr	r4, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 c01b438:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
 c01b43c:	400c      	ands	r4, r1
 c01b43e:	6d81      	ldr	r1, [r0, #88]	; 0x58
 c01b440:	f821 4b02 	strh.w	r4, [r1], #2
    huart->pRxBuffPtr += 2U;
 c01b444:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 c01b446:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 c01b44a:	3901      	subs	r1, #1
 c01b44c:	b289      	uxth	r1, r1
 c01b44e:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 c01b452:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 c01b456:	b289      	uxth	r1, r1
 c01b458:	b969      	cbnz	r1, c01b476 <UART_RxISR_16BIT+0x4c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 c01b45a:	6814      	ldr	r4, [r2, #0]
 c01b45c:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 c01b460:	6014      	str	r4, [r2, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c01b462:	6894      	ldr	r4, [r2, #8]
 c01b464:	f024 0401 	bic.w	r4, r4, #1
 c01b468:	6094      	str	r4, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 c01b46a:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 c01b46c:	66c1      	str	r1, [r0, #108]	; 0x6c
      huart->RxState = HAL_UART_STATE_READY;
 c01b46e:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 c01b472:	f7ff ffab 	bl	c01b3cc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 c01b476:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 c01b478:	6993      	ldr	r3, [r2, #24]
 c01b47a:	f043 0308 	orr.w	r3, r3, #8
 c01b47e:	6193      	str	r3, [r2, #24]
}
 c01b480:	e7f9      	b.n	c01b476 <UART_RxISR_16BIT+0x4c>
	...

0c01b484 <UART_RxISR_8BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 c01b484:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 c01b488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 c01b48c:	2b22      	cmp	r3, #34	; 0x22
{
 c01b48e:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 c01b490:	d13f      	bne.n	c01b512 <UART_RxISR_8BIT_FIFOEN+0x8e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 c01b492:	f04f 0820 	mov.w	r8, #32
  uint16_t  uhMask = huart->Mask;
 c01b496:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 c01b49a:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 c01b49e:	4f20      	ldr	r7, [pc, #128]	; (c01b520 <UART_RxISR_8BIT_FIFOEN+0x9c>)
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 c01b4a0:	b9a5      	cbnz	r5, c01b4cc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 c01b4a2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 c01b4a6:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 c01b4a8:	b173      	cbz	r3, c01b4c8 <UART_RxISR_8BIT_FIFOEN+0x44>
 c01b4aa:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 c01b4ae:	429a      	cmp	r2, r3
 c01b4b0:	d90a      	bls.n	c01b4c8 <UART_RxISR_8BIT_FIFOEN+0x44>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 c01b4b2:	6823      	ldr	r3, [r4, #0]
 c01b4b4:	689a      	ldr	r2, [r3, #8]
 c01b4b6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 c01b4ba:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 c01b4bc:	4a19      	ldr	r2, [pc, #100]	; (c01b524 <UART_RxISR_8BIT_FIFOEN+0xa0>)
 c01b4be:	66e2      	str	r2, [r4, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 c01b4c0:	681a      	ldr	r2, [r3, #0]
 c01b4c2:	f042 0220 	orr.w	r2, r2, #32
 c01b4c6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 c01b4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 c01b4cc:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 c01b4ce:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 c01b4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 c01b4d2:	4033      	ands	r3, r6
 c01b4d4:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 c01b4d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 c01b4d8:	3301      	adds	r3, #1
 c01b4da:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 c01b4dc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 c01b4e0:	3b01      	subs	r3, #1
 c01b4e2:	b29b      	uxth	r3, r3
 c01b4e4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 c01b4e8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 c01b4ec:	b29b      	uxth	r3, r3
 c01b4ee:	b96b      	cbnz	r3, c01b50c <UART_RxISR_8BIT_FIFOEN+0x88>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 c01b4f0:	6822      	ldr	r2, [r4, #0]
        HAL_UART_RxCpltCallback(huart);
 c01b4f2:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 c01b4f4:	6811      	ldr	r1, [r2, #0]
 c01b4f6:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 c01b4fa:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 c01b4fc:	6891      	ldr	r1, [r2, #8]
 c01b4fe:	4039      	ands	r1, r7
 c01b500:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 c01b502:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 c01b506:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 c01b508:	f7ff ff60 	bl	c01b3cc <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 c01b50c:	3d01      	subs	r5, #1
 c01b50e:	b2ad      	uxth	r5, r5
 c01b510:	e7c6      	b.n	c01b4a0 <UART_RxISR_8BIT_FIFOEN+0x1c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 c01b512:	6802      	ldr	r2, [r0, #0]
 c01b514:	6993      	ldr	r3, [r2, #24]
 c01b516:	f043 0308 	orr.w	r3, r3, #8
 c01b51a:	6193      	str	r3, [r2, #24]
}
 c01b51c:	e7d4      	b.n	c01b4c8 <UART_RxISR_8BIT_FIFOEN+0x44>
 c01b51e:	bf00      	nop
 c01b520:	effffffe 	.word	0xeffffffe
 c01b524:	0c01b3cf 	.word	0x0c01b3cf

0c01b528 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 c01b528:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 c01b52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 c01b530:	2b22      	cmp	r3, #34	; 0x22
{
 c01b532:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 c01b534:	d13d      	bne.n	c01b5b2 <UART_RxISR_16BIT_FIFOEN+0x8a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 c01b536:	f04f 0820 	mov.w	r8, #32
  uint16_t  uhMask = huart->Mask;
 c01b53a:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 c01b53e:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 c01b542:	4f1f      	ldr	r7, [pc, #124]	; (c01b5c0 <UART_RxISR_16BIT_FIFOEN+0x98>)
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 c01b544:	b9a5      	cbnz	r5, c01b570 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 c01b546:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 c01b54a:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 c01b54c:	b173      	cbz	r3, c01b56c <UART_RxISR_16BIT_FIFOEN+0x44>
 c01b54e:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 c01b552:	429a      	cmp	r2, r3
 c01b554:	d90a      	bls.n	c01b56c <UART_RxISR_16BIT_FIFOEN+0x44>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 c01b556:	6823      	ldr	r3, [r4, #0]
 c01b558:	689a      	ldr	r2, [r3, #8]
 c01b55a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 c01b55e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 c01b560:	4a18      	ldr	r2, [pc, #96]	; (c01b5c4 <UART_RxISR_16BIT_FIFOEN+0x9c>)
 c01b562:	66e2      	str	r2, [r4, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 c01b564:	681a      	ldr	r2, [r3, #0]
 c01b566:	f042 0220 	orr.w	r2, r2, #32
 c01b56a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 c01b56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 c01b570:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 c01b572:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 c01b574:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 c01b576:	4031      	ands	r1, r6
 c01b578:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr += 2U;
 c01b57c:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 c01b57e:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 c01b582:	3a01      	subs	r2, #1
 c01b584:	b292      	uxth	r2, r2
 c01b586:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 c01b58a:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 c01b58e:	b292      	uxth	r2, r2
 c01b590:	b962      	cbnz	r2, c01b5ac <UART_RxISR_16BIT_FIFOEN+0x84>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 c01b592:	6819      	ldr	r1, [r3, #0]
        HAL_UART_RxCpltCallback(huart);
 c01b594:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 c01b596:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 c01b59a:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 c01b59c:	6899      	ldr	r1, [r3, #8]
 c01b59e:	4039      	ands	r1, r7
 c01b5a0:	6099      	str	r1, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 c01b5a2:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 c01b5a6:	66e2      	str	r2, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 c01b5a8:	f7ff ff10 	bl	c01b3cc <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 c01b5ac:	3d01      	subs	r5, #1
 c01b5ae:	b2ad      	uxth	r5, r5
 c01b5b0:	e7c8      	b.n	c01b544 <UART_RxISR_16BIT_FIFOEN+0x1c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 c01b5b2:	6802      	ldr	r2, [r0, #0]
 c01b5b4:	6993      	ldr	r3, [r2, #24]
 c01b5b6:	f043 0308 	orr.w	r3, r3, #8
 c01b5ba:	6193      	str	r3, [r2, #24]
}
 c01b5bc:	e7d6      	b.n	c01b56c <UART_RxISR_16BIT_FIFOEN+0x44>
 c01b5be:	bf00      	nop
 c01b5c0:	effffffe 	.word	0xeffffffe
 c01b5c4:	0c01b42b 	.word	0x0c01b42b

0c01b5c8 <UART_SetConfig>:
{
 c01b5c8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 c01b5cc:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 c01b5ce:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c01b5d0:	69c1      	ldr	r1, [r0, #28]
 c01b5d2:	6882      	ldr	r2, [r0, #8]
 c01b5d4:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 c01b5d6:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c01b5d8:	4302      	orrs	r2, r0
 c01b5da:	6960      	ldr	r0, [r4, #20]
 c01b5dc:	4302      	orrs	r2, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 c01b5de:	6e60      	ldr	r0, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c01b5e0:	430a      	orrs	r2, r1
  tmpreg |= (uint32_t)huart->FifoMode;
 c01b5e2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 c01b5e4:	48ad      	ldr	r0, [pc, #692]	; (c01b89c <UART_SetConfig+0x2d4>)
 c01b5e6:	4028      	ands	r0, r5
 c01b5e8:	4302      	orrs	r2, r0
 c01b5ea:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 c01b5ec:	685a      	ldr	r2, [r3, #4]
 c01b5ee:	68e0      	ldr	r0, [r4, #12]
 c01b5f0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 c01b5f4:	4302      	orrs	r2, r0
 c01b5f6:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 c01b5f8:	4aa9      	ldr	r2, [pc, #676]	; (c01b8a0 <UART_SetConfig+0x2d8>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 c01b5fa:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 c01b5fc:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 c01b5fe:	bf1c      	itt	ne
 c01b600:	6a22      	ldrne	r2, [r4, #32]
 c01b602:	4310      	orrne	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 c01b604:	689a      	ldr	r2, [r3, #8]
 c01b606:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 c01b60a:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 c01b60e:	4302      	orrs	r2, r0
 c01b610:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 c01b612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 c01b614:	6a60      	ldr	r0, [r4, #36]	; 0x24
 c01b616:	f022 020f 	bic.w	r2, r2, #15
 c01b61a:	4302      	orrs	r2, r0
 c01b61c:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 c01b61e:	4aa1      	ldr	r2, [pc, #644]	; (c01b8a4 <UART_SetConfig+0x2dc>)
 c01b620:	4293      	cmp	r3, r2
 c01b622:	d118      	bne.n	c01b656 <UART_SetConfig+0x8e>
 c01b624:	4ba0      	ldr	r3, [pc, #640]	; (c01b8a8 <UART_SetConfig+0x2e0>)
 c01b626:	4aa1      	ldr	r2, [pc, #644]	; (c01b8ac <UART_SetConfig+0x2e4>)
 c01b628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c01b62c:	f003 0303 	and.w	r3, r3, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c01b630:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 c01b634:	5cd3      	ldrb	r3, [r2, r3]
 c01b636:	f040 8494 	bne.w	c01bf62 <UART_SetConfig+0x99a>
    switch (clocksource)
 c01b63a:	2b08      	cmp	r3, #8
 c01b63c:	f200 82a5 	bhi.w	c01bb8a <UART_SetConfig+0x5c2>
 c01b640:	e8df f013 	tbh	[pc, r3, lsl #1]
 c01b644:	0253045d 	.word	0x0253045d
 c01b648:	02a303b5 	.word	0x02a303b5
 c01b64c:	02a30425 	.word	0x02a30425
 c01b650:	02a302a3 	.word	0x02a302a3
 c01b654:	042c      	.short	0x042c
  UART_GETCLOCKSOURCE(huart, clocksource);
 c01b656:	4a96      	ldr	r2, [pc, #600]	; (c01b8b0 <UART_SetConfig+0x2e8>)
 c01b658:	4293      	cmp	r3, r2
 c01b65a:	d106      	bne.n	c01b66a <UART_SetConfig+0xa2>
 c01b65c:	4b92      	ldr	r3, [pc, #584]	; (c01b8a8 <UART_SetConfig+0x2e0>)
 c01b65e:	4a95      	ldr	r2, [pc, #596]	; (c01b8b4 <UART_SetConfig+0x2ec>)
 c01b660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c01b664:	f003 030c 	and.w	r3, r3, #12
 c01b668:	e7e2      	b.n	c01b630 <UART_SetConfig+0x68>
 c01b66a:	4a93      	ldr	r2, [pc, #588]	; (c01b8b8 <UART_SetConfig+0x2f0>)
 c01b66c:	4293      	cmp	r3, r2
 c01b66e:	d144      	bne.n	c01b6fa <UART_SetConfig+0x132>
 c01b670:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 c01b674:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 c01b678:	f002 0230 	and.w	r2, r2, #48	; 0x30
 c01b67c:	2a10      	cmp	r2, #16
 c01b67e:	f000 83fe 	beq.w	c01be7e <UART_SetConfig+0x8b6>
 c01b682:	d82a      	bhi.n	c01b6da <UART_SetConfig+0x112>
 c01b684:	bb7a      	cbnz	r2, c01b6e6 <UART_SetConfig+0x11e>
  if (UART_INSTANCE_LOWPOWER(huart))
 c01b686:	4a86      	ldr	r2, [pc, #536]	; (c01b8a0 <UART_SetConfig+0x2d8>)
 c01b688:	4293      	cmp	r3, r2
 c01b68a:	f040 8434 	bne.w	c01bef6 <UART_SetConfig+0x92e>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 c01b68e:	f7ff fa29 	bl	c01aae4 <HAL_RCC_GetPCLK1Freq>
 c01b692:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c01b694:	2b00      	cmp	r3, #0
 c01b696:	d06b      	beq.n	c01b770 <UART_SetConfig+0x1a8>
 c01b698:	2b01      	cmp	r3, #1
 c01b69a:	d06b      	beq.n	c01b774 <UART_SetConfig+0x1ac>
 c01b69c:	2b02      	cmp	r3, #2
 c01b69e:	d06b      	beq.n	c01b778 <UART_SetConfig+0x1b0>
 c01b6a0:	2b03      	cmp	r3, #3
 c01b6a2:	d06b      	beq.n	c01b77c <UART_SetConfig+0x1b4>
 c01b6a4:	2b04      	cmp	r3, #4
 c01b6a6:	d06b      	beq.n	c01b780 <UART_SetConfig+0x1b8>
 c01b6a8:	2b05      	cmp	r3, #5
 c01b6aa:	d06b      	beq.n	c01b784 <UART_SetConfig+0x1bc>
 c01b6ac:	2b06      	cmp	r3, #6
 c01b6ae:	d06b      	beq.n	c01b788 <UART_SetConfig+0x1c0>
 c01b6b0:	2b07      	cmp	r3, #7
 c01b6b2:	d06b      	beq.n	c01b78c <UART_SetConfig+0x1c4>
 c01b6b4:	2b08      	cmp	r3, #8
 c01b6b6:	d06b      	beq.n	c01b790 <UART_SetConfig+0x1c8>
 c01b6b8:	2b09      	cmp	r3, #9
 c01b6ba:	d06b      	beq.n	c01b794 <UART_SetConfig+0x1cc>
 c01b6bc:	2b0a      	cmp	r3, #10
 c01b6be:	d06b      	beq.n	c01b798 <UART_SetConfig+0x1d0>
 c01b6c0:	2b0b      	cmp	r3, #11
 c01b6c2:	bf14      	ite	ne
 c01b6c4:	2301      	movne	r3, #1
 c01b6c6:	f44f 7380 	moveq.w	r3, #256	; 0x100
 c01b6ca:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 c01b6ce:	2100      	movs	r1, #0
    if (lpuart_ker_ck_pres != 0U)
 c01b6d0:	2800      	cmp	r0, #0
 c01b6d2:	f040 8082 	bne.w	c01b7da <UART_SetConfig+0x212>
 c01b6d6:	4602      	mov	r2, r0
 c01b6d8:	e086      	b.n	c01b7e8 <UART_SetConfig+0x220>
  UART_GETCLOCKSOURCE(huart, clocksource);
 c01b6da:	2a20      	cmp	r2, #32
 c01b6dc:	f000 835f 	beq.w	c01bd9e <UART_SetConfig+0x7d6>
 c01b6e0:	2a30      	cmp	r2, #48	; 0x30
 c01b6e2:	f000 83a1 	beq.w	c01be28 <UART_SetConfig+0x860>
  if (UART_INSTANCE_LOWPOWER(huart))
 c01b6e6:	4a6e      	ldr	r2, [pc, #440]	; (c01b8a0 <UART_SetConfig+0x2d8>)
 c01b6e8:	4293      	cmp	r3, r2
 c01b6ea:	d07c      	beq.n	c01b7e6 <UART_SetConfig+0x21e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c01b6ec:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 c01b6f0:	f000 824b 	beq.w	c01bb8a <UART_SetConfig+0x5c2>
        ret = HAL_ERROR;
 c01b6f4:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 c01b6f6:	2300      	movs	r3, #0
 c01b6f8:	e2d7      	b.n	c01bcaa <UART_SetConfig+0x6e2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 c01b6fa:	4a70      	ldr	r2, [pc, #448]	; (c01b8bc <UART_SetConfig+0x2f4>)
 c01b6fc:	4293      	cmp	r3, r2
 c01b6fe:	d10e      	bne.n	c01b71e <UART_SetConfig+0x156>
 c01b700:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 c01b704:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 c01b708:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 c01b70c:	2a40      	cmp	r2, #64	; 0x40
 c01b70e:	f000 83b6 	beq.w	c01be7e <UART_SetConfig+0x8b6>
 c01b712:	d9b7      	bls.n	c01b684 <UART_SetConfig+0xbc>
 c01b714:	2a80      	cmp	r2, #128	; 0x80
 c01b716:	f000 8342 	beq.w	c01bd9e <UART_SetConfig+0x7d6>
 c01b71a:	2ac0      	cmp	r2, #192	; 0xc0
 c01b71c:	e7e1      	b.n	c01b6e2 <UART_SetConfig+0x11a>
 c01b71e:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 c01b722:	d110      	bne.n	c01b746 <UART_SetConfig+0x17e>
 c01b724:	4a60      	ldr	r2, [pc, #384]	; (c01b8a8 <UART_SetConfig+0x2e0>)
 c01b726:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 c01b72a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 c01b72e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 c01b732:	f000 83a4 	beq.w	c01be7e <UART_SetConfig+0x8b6>
 c01b736:	d9a5      	bls.n	c01b684 <UART_SetConfig+0xbc>
 c01b738:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 c01b73c:	f000 832f 	beq.w	c01bd9e <UART_SetConfig+0x7d6>
 c01b740:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 c01b744:	e7cd      	b.n	c01b6e2 <UART_SetConfig+0x11a>
 c01b746:	4a56      	ldr	r2, [pc, #344]	; (c01b8a0 <UART_SetConfig+0x2d8>)
 c01b748:	4293      	cmp	r3, r2
 c01b74a:	d1cf      	bne.n	c01b6ec <UART_SetConfig+0x124>
 c01b74c:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 c01b750:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 c01b754:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 c01b758:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 c01b75c:	f000 838f 	beq.w	c01be7e <UART_SetConfig+0x8b6>
 c01b760:	d990      	bls.n	c01b684 <UART_SetConfig+0xbc>
 c01b762:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 c01b766:	f000 831a 	beq.w	c01bd9e <UART_SetConfig+0x7d6>
 c01b76a:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 c01b76e:	e7b8      	b.n	c01b6e2 <UART_SetConfig+0x11a>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 c01b770:	2301      	movs	r3, #1
 c01b772:	e7aa      	b.n	c01b6ca <UART_SetConfig+0x102>
 c01b774:	2302      	movs	r3, #2
 c01b776:	e7a8      	b.n	c01b6ca <UART_SetConfig+0x102>
 c01b778:	2304      	movs	r3, #4
 c01b77a:	e7a6      	b.n	c01b6ca <UART_SetConfig+0x102>
 c01b77c:	2306      	movs	r3, #6
 c01b77e:	e7a4      	b.n	c01b6ca <UART_SetConfig+0x102>
 c01b780:	2308      	movs	r3, #8
 c01b782:	e7a2      	b.n	c01b6ca <UART_SetConfig+0x102>
 c01b784:	230a      	movs	r3, #10
 c01b786:	e7a0      	b.n	c01b6ca <UART_SetConfig+0x102>
 c01b788:	230c      	movs	r3, #12
 c01b78a:	e79e      	b.n	c01b6ca <UART_SetConfig+0x102>
 c01b78c:	2310      	movs	r3, #16
 c01b78e:	e79c      	b.n	c01b6ca <UART_SetConfig+0x102>
 c01b790:	2320      	movs	r3, #32
 c01b792:	e79a      	b.n	c01b6ca <UART_SetConfig+0x102>
 c01b794:	2340      	movs	r3, #64	; 0x40
 c01b796:	e798      	b.n	c01b6ca <UART_SetConfig+0x102>
 c01b798:	2380      	movs	r3, #128	; 0x80
 c01b79a:	e796      	b.n	c01b6ca <UART_SetConfig+0x102>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 c01b79c:	2800      	cmp	r0, #0
 c01b79e:	d063      	beq.n	c01b868 <UART_SetConfig+0x2a0>
 c01b7a0:	2801      	cmp	r0, #1
 c01b7a2:	d064      	beq.n	c01b86e <UART_SetConfig+0x2a6>
 c01b7a4:	2802      	cmp	r0, #2
 c01b7a6:	d065      	beq.n	c01b874 <UART_SetConfig+0x2ac>
 c01b7a8:	2803      	cmp	r0, #3
 c01b7aa:	f04f 0102 	mov.w	r1, #2
 c01b7ae:	d064      	beq.n	c01b87a <UART_SetConfig+0x2b2>
 c01b7b0:	2804      	cmp	r0, #4
 c01b7b2:	d064      	beq.n	c01b87e <UART_SetConfig+0x2b6>
 c01b7b4:	2805      	cmp	r0, #5
 c01b7b6:	d064      	beq.n	c01b882 <UART_SetConfig+0x2ba>
 c01b7b8:	2806      	cmp	r0, #6
 c01b7ba:	d064      	beq.n	c01b886 <UART_SetConfig+0x2be>
 c01b7bc:	2807      	cmp	r0, #7
 c01b7be:	d064      	beq.n	c01b88a <UART_SetConfig+0x2c2>
 c01b7c0:	2808      	cmp	r0, #8
 c01b7c2:	d064      	beq.n	c01b88e <UART_SetConfig+0x2c6>
 c01b7c4:	2809      	cmp	r0, #9
 c01b7c6:	d064      	beq.n	c01b892 <UART_SetConfig+0x2ca>
 c01b7c8:	280a      	cmp	r0, #10
 c01b7ca:	d064      	beq.n	c01b896 <UART_SetConfig+0x2ce>
 c01b7cc:	f24f 4224 	movw	r2, #62500	; 0xf424
 c01b7d0:	4b3b      	ldr	r3, [pc, #236]	; (c01b8c0 <UART_SetConfig+0x2f8>)
 c01b7d2:	280b      	cmp	r0, #11
 c01b7d4:	bf14      	ite	ne
 c01b7d6:	4618      	movne	r0, r3
 c01b7d8:	4610      	moveq	r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c01b7da:	6862      	ldr	r2, [r4, #4]
 c01b7dc:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 c01b7e0:	4283      	cmp	r3, r0
 c01b7e2:	f240 80a4 	bls.w	c01b92e <UART_SetConfig+0x366>
        ret = HAL_ERROR;
 c01b7e6:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
 c01b7e8:	2300      	movs	r3, #0
 c01b7ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  huart->RxISR = NULL;
 c01b7ee:	6723      	str	r3, [r4, #112]	; 0x70
  huart->NbTxDataToProcess = 1;
 c01b7f0:	e9c4 131a 	strd	r1, r3, [r4, #104]	; 0x68
}
 c01b7f4:	4610      	mov	r0, r2
 c01b7f6:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 c01b7fa:	f7ff f923 	bl	c01aa44 <HAL_RCC_GetSysClockFreq>
 c01b7fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c01b800:	b1e3      	cbz	r3, c01b83c <UART_SetConfig+0x274>
 c01b802:	2b01      	cmp	r3, #1
 c01b804:	d01c      	beq.n	c01b840 <UART_SetConfig+0x278>
 c01b806:	2b02      	cmp	r3, #2
 c01b808:	d01c      	beq.n	c01b844 <UART_SetConfig+0x27c>
 c01b80a:	2b03      	cmp	r3, #3
 c01b80c:	d01c      	beq.n	c01b848 <UART_SetConfig+0x280>
 c01b80e:	2b04      	cmp	r3, #4
 c01b810:	d01c      	beq.n	c01b84c <UART_SetConfig+0x284>
 c01b812:	2b05      	cmp	r3, #5
 c01b814:	d01c      	beq.n	c01b850 <UART_SetConfig+0x288>
 c01b816:	2b06      	cmp	r3, #6
 c01b818:	d01c      	beq.n	c01b854 <UART_SetConfig+0x28c>
 c01b81a:	2b07      	cmp	r3, #7
 c01b81c:	d01c      	beq.n	c01b858 <UART_SetConfig+0x290>
 c01b81e:	2b08      	cmp	r3, #8
 c01b820:	d01c      	beq.n	c01b85c <UART_SetConfig+0x294>
 c01b822:	2b09      	cmp	r3, #9
 c01b824:	d01c      	beq.n	c01b860 <UART_SetConfig+0x298>
 c01b826:	2b0a      	cmp	r3, #10
 c01b828:	d01c      	beq.n	c01b864 <UART_SetConfig+0x29c>
 c01b82a:	2b0b      	cmp	r3, #11
 c01b82c:	bf14      	ite	ne
 c01b82e:	2301      	movne	r3, #1
 c01b830:	f44f 7380 	moveq.w	r3, #256	; 0x100
 c01b834:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 c01b838:	2104      	movs	r1, #4
 c01b83a:	e749      	b.n	c01b6d0 <UART_SetConfig+0x108>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 c01b83c:	2301      	movs	r3, #1
 c01b83e:	e7f9      	b.n	c01b834 <UART_SetConfig+0x26c>
 c01b840:	2302      	movs	r3, #2
 c01b842:	e7f7      	b.n	c01b834 <UART_SetConfig+0x26c>
 c01b844:	2304      	movs	r3, #4
 c01b846:	e7f5      	b.n	c01b834 <UART_SetConfig+0x26c>
 c01b848:	2306      	movs	r3, #6
 c01b84a:	e7f3      	b.n	c01b834 <UART_SetConfig+0x26c>
 c01b84c:	2308      	movs	r3, #8
 c01b84e:	e7f1      	b.n	c01b834 <UART_SetConfig+0x26c>
 c01b850:	230a      	movs	r3, #10
 c01b852:	e7ef      	b.n	c01b834 <UART_SetConfig+0x26c>
 c01b854:	230c      	movs	r3, #12
 c01b856:	e7ed      	b.n	c01b834 <UART_SetConfig+0x26c>
 c01b858:	2310      	movs	r3, #16
 c01b85a:	e7eb      	b.n	c01b834 <UART_SetConfig+0x26c>
 c01b85c:	2320      	movs	r3, #32
 c01b85e:	e7e9      	b.n	c01b834 <UART_SetConfig+0x26c>
 c01b860:	2340      	movs	r3, #64	; 0x40
 c01b862:	e7e7      	b.n	c01b834 <UART_SetConfig+0x26c>
 c01b864:	2380      	movs	r3, #128	; 0x80
 c01b866:	e7e5      	b.n	c01b834 <UART_SetConfig+0x26c>
 c01b868:	2102      	movs	r1, #2
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 c01b86a:	4815      	ldr	r0, [pc, #84]	; (c01b8c0 <UART_SetConfig+0x2f8>)
 c01b86c:	e7b5      	b.n	c01b7da <UART_SetConfig+0x212>
 c01b86e:	2102      	movs	r1, #2
 c01b870:	4814      	ldr	r0, [pc, #80]	; (c01b8c4 <UART_SetConfig+0x2fc>)
 c01b872:	e7b2      	b.n	c01b7da <UART_SetConfig+0x212>
 c01b874:	4601      	mov	r1, r0
 c01b876:	4814      	ldr	r0, [pc, #80]	; (c01b8c8 <UART_SetConfig+0x300>)
 c01b878:	e7af      	b.n	c01b7da <UART_SetConfig+0x212>
 c01b87a:	4814      	ldr	r0, [pc, #80]	; (c01b8cc <UART_SetConfig+0x304>)
 c01b87c:	e7ad      	b.n	c01b7da <UART_SetConfig+0x212>
 c01b87e:	4814      	ldr	r0, [pc, #80]	; (c01b8d0 <UART_SetConfig+0x308>)
 c01b880:	e7ab      	b.n	c01b7da <UART_SetConfig+0x212>
 c01b882:	4814      	ldr	r0, [pc, #80]	; (c01b8d4 <UART_SetConfig+0x30c>)
 c01b884:	e7a9      	b.n	c01b7da <UART_SetConfig+0x212>
 c01b886:	4814      	ldr	r0, [pc, #80]	; (c01b8d8 <UART_SetConfig+0x310>)
 c01b888:	e7a7      	b.n	c01b7da <UART_SetConfig+0x212>
 c01b88a:	4814      	ldr	r0, [pc, #80]	; (c01b8dc <UART_SetConfig+0x314>)
 c01b88c:	e7a5      	b.n	c01b7da <UART_SetConfig+0x212>
 c01b88e:	4814      	ldr	r0, [pc, #80]	; (c01b8e0 <UART_SetConfig+0x318>)
 c01b890:	e7a3      	b.n	c01b7da <UART_SetConfig+0x212>
 c01b892:	4814      	ldr	r0, [pc, #80]	; (c01b8e4 <UART_SetConfig+0x31c>)
 c01b894:	e7a1      	b.n	c01b7da <UART_SetConfig+0x212>
 c01b896:	4814      	ldr	r0, [pc, #80]	; (c01b8e8 <UART_SetConfig+0x320>)
 c01b898:	e79f      	b.n	c01b7da <UART_SetConfig+0x212>
 c01b89a:	bf00      	nop
 c01b89c:	cfff69f3 	.word	0xcfff69f3
 c01b8a0:	50008000 	.word	0x50008000
 c01b8a4:	50013800 	.word	0x50013800
 c01b8a8:	50021000 	.word	0x50021000
 c01b8ac:	0c032d80 	.word	0x0c032d80
 c01b8b0:	50004400 	.word	0x50004400
 c01b8b4:	0c032d84 	.word	0x0c032d84
 c01b8b8:	50004800 	.word	0x50004800
 c01b8bc:	50004c00 	.word	0x50004c00
 c01b8c0:	00f42400 	.word	0x00f42400
 c01b8c4:	007a1200 	.word	0x007a1200
 c01b8c8:	003d0900 	.word	0x003d0900
 c01b8cc:	0028b0aa 	.word	0x0028b0aa
 c01b8d0:	001e8480 	.word	0x001e8480
 c01b8d4:	00186a00 	.word	0x00186a00
 c01b8d8:	00145855 	.word	0x00145855
 c01b8dc:	000f4240 	.word	0x000f4240
 c01b8e0:	0007a120 	.word	0x0007a120
 c01b8e4:	0003d090 	.word	0x0003d090
 c01b8e8:	0001e848 	.word	0x0001e848
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 c01b8ec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 c01b8f0:	e773      	b.n	c01b7da <UART_SetConfig+0x212>
 c01b8f2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 c01b8f6:	e770      	b.n	c01b7da <UART_SetConfig+0x212>
 c01b8f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 c01b8fc:	e76d      	b.n	c01b7da <UART_SetConfig+0x212>
 c01b8fe:	f241 5055 	movw	r0, #5461	; 0x1555
 c01b902:	e76a      	b.n	c01b7da <UART_SetConfig+0x212>
 c01b904:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 c01b908:	e767      	b.n	c01b7da <UART_SetConfig+0x212>
 c01b90a:	f640 40cc 	movw	r0, #3276	; 0xccc
 c01b90e:	e764      	b.n	c01b7da <UART_SetConfig+0x212>
 c01b910:	f640 20aa 	movw	r0, #2730	; 0xaaa
 c01b914:	e761      	b.n	c01b7da <UART_SetConfig+0x212>
 c01b916:	f44f 6000 	mov.w	r0, #2048	; 0x800
 c01b91a:	e75e      	b.n	c01b7da <UART_SetConfig+0x212>
 c01b91c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 c01b920:	e75b      	b.n	c01b7da <UART_SetConfig+0x212>
 c01b922:	f44f 7000 	mov.w	r0, #512	; 0x200
 c01b926:	e758      	b.n	c01b7da <UART_SetConfig+0x212>
 c01b928:	f44f 7080 	mov.w	r0, #256	; 0x100
 c01b92c:	e755      	b.n	c01b7da <UART_SetConfig+0x212>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c01b92e:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 c01b932:	f63f af58 	bhi.w	c01b7e6 <UART_SetConfig+0x21e>
        switch (clocksource)
 c01b936:	2908      	cmp	r1, #8
 c01b938:	f200 80d4 	bhi.w	c01bae4 <UART_SetConfig+0x51c>
 c01b93c:	e8df f001 	tbb	[pc, r1]
 c01b940:	d2444105 	.word	0xd2444105
 c01b944:	d2d2d280 	.word	0xd2d2d280
 c01b948:	99          	.byte	0x99
 c01b949:	00          	.byte	0x00
            pclk = HAL_RCC_GetPCLK1Freq();
 c01b94a:	f7ff f8cb 	bl	c01aae4 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c01b94e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c01b950:	2b00      	cmp	r3, #0
 c01b952:	f000 808c 	beq.w	c01ba6e <UART_SetConfig+0x4a6>
 c01b956:	2b01      	cmp	r3, #1
 c01b958:	d075      	beq.n	c01ba46 <UART_SetConfig+0x47e>
 c01b95a:	2b02      	cmp	r3, #2
 c01b95c:	d075      	beq.n	c01ba4a <UART_SetConfig+0x482>
 c01b95e:	2b03      	cmp	r3, #3
 c01b960:	d075      	beq.n	c01ba4e <UART_SetConfig+0x486>
 c01b962:	2b04      	cmp	r3, #4
 c01b964:	d075      	beq.n	c01ba52 <UART_SetConfig+0x48a>
 c01b966:	2b05      	cmp	r3, #5
 c01b968:	d075      	beq.n	c01ba56 <UART_SetConfig+0x48e>
 c01b96a:	2b06      	cmp	r3, #6
 c01b96c:	d075      	beq.n	c01ba5a <UART_SetConfig+0x492>
 c01b96e:	2b07      	cmp	r3, #7
 c01b970:	d075      	beq.n	c01ba5e <UART_SetConfig+0x496>
 c01b972:	2b08      	cmp	r3, #8
 c01b974:	d075      	beq.n	c01ba62 <UART_SetConfig+0x49a>
 c01b976:	2b09      	cmp	r3, #9
 c01b978:	d075      	beq.n	c01ba66 <UART_SetConfig+0x49e>
 c01b97a:	2b0a      	cmp	r3, #10
 c01b97c:	d075      	beq.n	c01ba6a <UART_SetConfig+0x4a2>
 c01b97e:	2b0b      	cmp	r3, #11
 c01b980:	d175      	bne.n	c01ba6e <UART_SetConfig+0x4a6>
 c01b982:	f44f 7280 	mov.w	r2, #256	; 0x100
 c01b986:	2300      	movs	r3, #0
 c01b988:	2100      	movs	r1, #0
 c01b98a:	f7fd fd4d 	bl	c019428 <__aeabi_uldivmod>
 c01b98e:	6865      	ldr	r5, [r4, #4]
 c01b990:	020f      	lsls	r7, r1, #8
 c01b992:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 c01b996:	0206      	lsls	r6, r0, #8
 c01b998:	0868      	lsrs	r0, r5, #1
 c01b99a:	eb16 0b00 	adds.w	fp, r6, r0
 c01b99e:	f147 0c00 	adc.w	ip, r7, #0
 c01b9a2:	462a      	mov	r2, r5
 c01b9a4:	2300      	movs	r3, #0
 c01b9a6:	4658      	mov	r0, fp
 c01b9a8:	4661      	mov	r1, ip
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c01b9aa:	f7fd fd3d 	bl	c019428 <__aeabi_uldivmod>
            break;
 c01b9ae:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 c01b9b0:	4b95      	ldr	r3, [pc, #596]	; (c01bc08 <UART_SetConfig+0x640>)
 c01b9b2:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 c01b9b6:	4299      	cmp	r1, r3
 c01b9b8:	f63f af15 	bhi.w	c01b7e6 <UART_SetConfig+0x21e>
          huart->Instance->BRR = usartdiv;
 c01b9bc:	6823      	ldr	r3, [r4, #0]
 c01b9be:	60d8      	str	r0, [r3, #12]
 c01b9c0:	e712      	b.n	c01b7e8 <UART_SetConfig+0x220>
            pclk = HAL_RCC_GetPCLK2Freq();
 c01b9c2:	f7ff f8a3 	bl	c01ab0c <HAL_RCC_GetPCLK2Freq>
 c01b9c6:	e7c2      	b.n	c01b94e <UART_SetConfig+0x386>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c01b9c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c01b9ca:	2b00      	cmp	r3, #0
 c01b9cc:	d036      	beq.n	c01ba3c <UART_SetConfig+0x474>
 c01b9ce:	2b01      	cmp	r3, #1
 c01b9d0:	d016      	beq.n	c01ba00 <UART_SetConfig+0x438>
 c01b9d2:	2b02      	cmp	r3, #2
 c01b9d4:	d016      	beq.n	c01ba04 <UART_SetConfig+0x43c>
 c01b9d6:	2b03      	cmp	r3, #3
 c01b9d8:	d016      	beq.n	c01ba08 <UART_SetConfig+0x440>
 c01b9da:	2b04      	cmp	r3, #4
 c01b9dc:	d01e      	beq.n	c01ba1c <UART_SetConfig+0x454>
 c01b9de:	2b05      	cmp	r3, #5
 c01b9e0:	d01e      	beq.n	c01ba20 <UART_SetConfig+0x458>
 c01b9e2:	2b06      	cmp	r3, #6
 c01b9e4:	d01e      	beq.n	c01ba24 <UART_SetConfig+0x45c>
 c01b9e6:	2b07      	cmp	r3, #7
 c01b9e8:	d020      	beq.n	c01ba2c <UART_SetConfig+0x464>
 c01b9ea:	2b08      	cmp	r3, #8
 c01b9ec:	d020      	beq.n	c01ba30 <UART_SetConfig+0x468>
 c01b9ee:	2b09      	cmp	r3, #9
 c01b9f0:	d020      	beq.n	c01ba34 <UART_SetConfig+0x46c>
 c01b9f2:	2b0a      	cmp	r3, #10
 c01b9f4:	d020      	beq.n	c01ba38 <UART_SetConfig+0x470>
 c01b9f6:	2b0b      	cmp	r3, #11
 c01b9f8:	d120      	bne.n	c01ba3c <UART_SetConfig+0x474>
 c01b9fa:	4e84      	ldr	r6, [pc, #528]	; (c01bc0c <UART_SetConfig+0x644>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c01b9fc:	2700      	movs	r7, #0
 c01b9fe:	e006      	b.n	c01ba0e <UART_SetConfig+0x446>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c01ba00:	4e83      	ldr	r6, [pc, #524]	; (c01bc10 <UART_SetConfig+0x648>)
 c01ba02:	e7fb      	b.n	c01b9fc <UART_SetConfig+0x434>
 c01ba04:	4e83      	ldr	r6, [pc, #524]	; (c01bc14 <UART_SetConfig+0x64c>)
 c01ba06:	e7f9      	b.n	c01b9fc <UART_SetConfig+0x434>
 c01ba08:	a77b      	add	r7, pc, #492	; (adr r7, c01bbf8 <UART_SetConfig+0x630>)
 c01ba0a:	e9d7 6700 	ldrd	r6, r7, [r7]
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c01ba0e:	0855      	lsrs	r5, r2, #1
 c01ba10:	1970      	adds	r0, r6, r5
 c01ba12:	f04f 0300 	mov.w	r3, #0
 c01ba16:	f147 0100 	adc.w	r1, r7, #0
 c01ba1a:	e7c6      	b.n	c01b9aa <UART_SetConfig+0x3e2>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c01ba1c:	4e7e      	ldr	r6, [pc, #504]	; (c01bc18 <UART_SetConfig+0x650>)
 c01ba1e:	e7ed      	b.n	c01b9fc <UART_SetConfig+0x434>
 c01ba20:	4e7e      	ldr	r6, [pc, #504]	; (c01bc1c <UART_SetConfig+0x654>)
 c01ba22:	e7eb      	b.n	c01b9fc <UART_SetConfig+0x434>
 c01ba24:	a776      	add	r7, pc, #472	; (adr r7, c01bc00 <UART_SetConfig+0x638>)
 c01ba26:	e9d7 6700 	ldrd	r6, r7, [r7]
 c01ba2a:	e7f0      	b.n	c01ba0e <UART_SetConfig+0x446>
 c01ba2c:	4e7c      	ldr	r6, [pc, #496]	; (c01bc20 <UART_SetConfig+0x658>)
 c01ba2e:	e7e5      	b.n	c01b9fc <UART_SetConfig+0x434>
 c01ba30:	4e7c      	ldr	r6, [pc, #496]	; (c01bc24 <UART_SetConfig+0x65c>)
 c01ba32:	e7e3      	b.n	c01b9fc <UART_SetConfig+0x434>
 c01ba34:	4e7c      	ldr	r6, [pc, #496]	; (c01bc28 <UART_SetConfig+0x660>)
 c01ba36:	e7e1      	b.n	c01b9fc <UART_SetConfig+0x434>
 c01ba38:	4e7c      	ldr	r6, [pc, #496]	; (c01bc2c <UART_SetConfig+0x664>)
 c01ba3a:	e7df      	b.n	c01b9fc <UART_SetConfig+0x434>
 c01ba3c:	4e7c      	ldr	r6, [pc, #496]	; (c01bc30 <UART_SetConfig+0x668>)
 c01ba3e:	e7dd      	b.n	c01b9fc <UART_SetConfig+0x434>
            pclk = HAL_RCC_GetSysClockFreq();
 c01ba40:	f7ff f800 	bl	c01aa44 <HAL_RCC_GetSysClockFreq>
 c01ba44:	e783      	b.n	c01b94e <UART_SetConfig+0x386>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c01ba46:	2202      	movs	r2, #2
 c01ba48:	e79d      	b.n	c01b986 <UART_SetConfig+0x3be>
 c01ba4a:	2204      	movs	r2, #4
 c01ba4c:	e79b      	b.n	c01b986 <UART_SetConfig+0x3be>
 c01ba4e:	2206      	movs	r2, #6
 c01ba50:	e799      	b.n	c01b986 <UART_SetConfig+0x3be>
 c01ba52:	2208      	movs	r2, #8
 c01ba54:	e797      	b.n	c01b986 <UART_SetConfig+0x3be>
 c01ba56:	220a      	movs	r2, #10
 c01ba58:	e795      	b.n	c01b986 <UART_SetConfig+0x3be>
 c01ba5a:	220c      	movs	r2, #12
 c01ba5c:	e793      	b.n	c01b986 <UART_SetConfig+0x3be>
 c01ba5e:	2210      	movs	r2, #16
 c01ba60:	e791      	b.n	c01b986 <UART_SetConfig+0x3be>
 c01ba62:	2220      	movs	r2, #32
 c01ba64:	e78f      	b.n	c01b986 <UART_SetConfig+0x3be>
 c01ba66:	2240      	movs	r2, #64	; 0x40
 c01ba68:	e78d      	b.n	c01b986 <UART_SetConfig+0x3be>
 c01ba6a:	2280      	movs	r2, #128	; 0x80
 c01ba6c:	e78b      	b.n	c01b986 <UART_SetConfig+0x3be>
 c01ba6e:	2201      	movs	r2, #1
 c01ba70:	e789      	b.n	c01b986 <UART_SetConfig+0x3be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c01ba72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c01ba74:	b39b      	cbz	r3, c01bade <UART_SetConfig+0x516>
 c01ba76:	2b01      	cmp	r3, #1
 c01ba78:	d016      	beq.n	c01baa8 <UART_SetConfig+0x4e0>
 c01ba7a:	2b02      	cmp	r3, #2
 c01ba7c:	d017      	beq.n	c01baae <UART_SetConfig+0x4e6>
 c01ba7e:	2b03      	cmp	r3, #3
 c01ba80:	d018      	beq.n	c01bab4 <UART_SetConfig+0x4ec>
 c01ba82:	2b04      	cmp	r3, #4
 c01ba84:	d018      	beq.n	c01bab8 <UART_SetConfig+0x4f0>
 c01ba86:	2b05      	cmp	r3, #5
 c01ba88:	d019      	beq.n	c01babe <UART_SetConfig+0x4f6>
 c01ba8a:	2b06      	cmp	r3, #6
 c01ba8c:	d019      	beq.n	c01bac2 <UART_SetConfig+0x4fa>
 c01ba8e:	2b07      	cmp	r3, #7
 c01ba90:	d019      	beq.n	c01bac6 <UART_SetConfig+0x4fe>
 c01ba92:	2b08      	cmp	r3, #8
 c01ba94:	d01a      	beq.n	c01bacc <UART_SetConfig+0x504>
 c01ba96:	2b09      	cmp	r3, #9
 c01ba98:	d01b      	beq.n	c01bad2 <UART_SetConfig+0x50a>
 c01ba9a:	2b0a      	cmp	r3, #10
 c01ba9c:	d01c      	beq.n	c01bad8 <UART_SetConfig+0x510>
 c01ba9e:	2b0b      	cmp	r3, #11
 c01baa0:	d11d      	bne.n	c01bade <UART_SetConfig+0x516>
 c01baa2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 c01baa6:	e7a9      	b.n	c01b9fc <UART_SetConfig+0x434>
 c01baa8:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
 c01baac:	e7a6      	b.n	c01b9fc <UART_SetConfig+0x434>
 c01baae:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 c01bab2:	e7a3      	b.n	c01b9fc <UART_SetConfig+0x434>
 c01bab4:	4e5f      	ldr	r6, [pc, #380]	; (c01bc34 <UART_SetConfig+0x66c>)
 c01bab6:	e7a1      	b.n	c01b9fc <UART_SetConfig+0x434>
 c01bab8:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 c01babc:	e79e      	b.n	c01b9fc <UART_SetConfig+0x434>
 c01babe:	4e5e      	ldr	r6, [pc, #376]	; (c01bc38 <UART_SetConfig+0x670>)
 c01bac0:	e79c      	b.n	c01b9fc <UART_SetConfig+0x434>
 c01bac2:	4e5e      	ldr	r6, [pc, #376]	; (c01bc3c <UART_SetConfig+0x674>)
 c01bac4:	e79a      	b.n	c01b9fc <UART_SetConfig+0x434>
 c01bac6:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 c01baca:	e797      	b.n	c01b9fc <UART_SetConfig+0x434>
 c01bacc:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 c01bad0:	e794      	b.n	c01b9fc <UART_SetConfig+0x434>
 c01bad2:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 c01bad6:	e791      	b.n	c01b9fc <UART_SetConfig+0x434>
 c01bad8:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 c01badc:	e78e      	b.n	c01b9fc <UART_SetConfig+0x434>
 c01bade:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 c01bae2:	e78b      	b.n	c01b9fc <UART_SetConfig+0x434>
            ret = HAL_ERROR;
 c01bae4:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 c01bae6:	2000      	movs	r0, #0
 c01bae8:	e762      	b.n	c01b9b0 <UART_SetConfig+0x3e8>
        pclk = HAL_RCC_GetPCLK2Freq();
 c01baea:	f7ff f80f 	bl	c01ab0c <HAL_RCC_GetPCLK2Freq>
 c01baee:	e208      	b.n	c01bf02 <UART_SetConfig+0x93a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c01baf0:	484e      	ldr	r0, [pc, #312]	; (c01bc2c <UART_SetConfig+0x664>)
 c01baf2:	e183      	b.n	c01bdfc <UART_SetConfig+0x834>
 c01baf4:	4845      	ldr	r0, [pc, #276]	; (c01bc0c <UART_SetConfig+0x644>)
 c01baf6:	e181      	b.n	c01bdfc <UART_SetConfig+0x834>
 c01baf8:	4851      	ldr	r0, [pc, #324]	; (c01bc40 <UART_SetConfig+0x678>)
 c01bafa:	e17f      	b.n	c01bdfc <UART_SetConfig+0x834>
 c01bafc:	4851      	ldr	r0, [pc, #324]	; (c01bc44 <UART_SetConfig+0x67c>)
 c01bafe:	e17d      	b.n	c01bdfc <UART_SetConfig+0x834>
 c01bb00:	4851      	ldr	r0, [pc, #324]	; (c01bc48 <UART_SetConfig+0x680>)
 c01bb02:	e17b      	b.n	c01bdfc <UART_SetConfig+0x834>
 c01bb04:	4851      	ldr	r0, [pc, #324]	; (c01bc4c <UART_SetConfig+0x684>)
 c01bb06:	e179      	b.n	c01bdfc <UART_SetConfig+0x834>
 c01bb08:	4851      	ldr	r0, [pc, #324]	; (c01bc50 <UART_SetConfig+0x688>)
 c01bb0a:	e177      	b.n	c01bdfc <UART_SetConfig+0x834>
 c01bb0c:	4851      	ldr	r0, [pc, #324]	; (c01bc54 <UART_SetConfig+0x68c>)
 c01bb0e:	e175      	b.n	c01bdfc <UART_SetConfig+0x834>
 c01bb10:	4851      	ldr	r0, [pc, #324]	; (c01bc58 <UART_SetConfig+0x690>)
 c01bb12:	e173      	b.n	c01bdfc <UART_SetConfig+0x834>
 c01bb14:	4851      	ldr	r0, [pc, #324]	; (c01bc5c <UART_SetConfig+0x694>)
 c01bb16:	e171      	b.n	c01bdfc <UART_SetConfig+0x834>
 c01bb18:	4851      	ldr	r0, [pc, #324]	; (c01bc60 <UART_SetConfig+0x698>)
 c01bb1a:	e16f      	b.n	c01bdfc <UART_SetConfig+0x834>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c01bb1c:	2201      	movs	r2, #1
 c01bb1e:	e217      	b.n	c01bf50 <UART_SetConfig+0x988>
 c01bb20:	2202      	movs	r2, #2
 c01bb22:	e215      	b.n	c01bf50 <UART_SetConfig+0x988>
 c01bb24:	2204      	movs	r2, #4
 c01bb26:	e213      	b.n	c01bf50 <UART_SetConfig+0x988>
 c01bb28:	2206      	movs	r2, #6
 c01bb2a:	e211      	b.n	c01bf50 <UART_SetConfig+0x988>
 c01bb2c:	2208      	movs	r2, #8
 c01bb2e:	e20f      	b.n	c01bf50 <UART_SetConfig+0x988>
 c01bb30:	220a      	movs	r2, #10
 c01bb32:	e20d      	b.n	c01bf50 <UART_SetConfig+0x988>
 c01bb34:	220c      	movs	r2, #12
 c01bb36:	e20b      	b.n	c01bf50 <UART_SetConfig+0x988>
 c01bb38:	2210      	movs	r2, #16
 c01bb3a:	e209      	b.n	c01bf50 <UART_SetConfig+0x988>
 c01bb3c:	2220      	movs	r2, #32
 c01bb3e:	e207      	b.n	c01bf50 <UART_SetConfig+0x988>
 c01bb40:	2240      	movs	r2, #64	; 0x40
 c01bb42:	e205      	b.n	c01bf50 <UART_SetConfig+0x988>
 c01bb44:	2280      	movs	r2, #128	; 0x80
 c01bb46:	e203      	b.n	c01bf50 <UART_SetConfig+0x988>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c01bb48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c01bb4c:	e1cd      	b.n	c01beea <UART_SetConfig+0x922>
 c01bb4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c01bb52:	e1ca      	b.n	c01beea <UART_SetConfig+0x922>
 c01bb54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 c01bb58:	e1c7      	b.n	c01beea <UART_SetConfig+0x922>
 c01bb5a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 c01bb5e:	e1c4      	b.n	c01beea <UART_SetConfig+0x922>
 c01bb60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 c01bb64:	e1c1      	b.n	c01beea <UART_SetConfig+0x922>
 c01bb66:	f641 1398 	movw	r3, #6552	; 0x1998
 c01bb6a:	e1be      	b.n	c01beea <UART_SetConfig+0x922>
 c01bb6c:	f241 5354 	movw	r3, #5460	; 0x1554
 c01bb70:	e1bb      	b.n	c01beea <UART_SetConfig+0x922>
 c01bb72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c01bb76:	e1b8      	b.n	c01beea <UART_SetConfig+0x922>
 c01bb78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 c01bb7c:	e1b5      	b.n	c01beea <UART_SetConfig+0x922>
 c01bb7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c01bb82:	e1b2      	b.n	c01beea <UART_SetConfig+0x922>
 c01bb84:	f44f 7300 	mov.w	r3, #512	; 0x200
 c01bb88:	e1af      	b.n	c01beea <UART_SetConfig+0x922>
        ret = HAL_ERROR;
 c01bb8a:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 c01bb8c:	2300      	movs	r3, #0
 c01bb8e:	e13c      	b.n	c01be0a <UART_SetConfig+0x842>
        pclk = HAL_RCC_GetPCLK1Freq();
 c01bb90:	f7fe ffa8 	bl	c01aae4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c01bb94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c01bb96:	2b00      	cmp	r3, #0
 c01bb98:	f000 80aa 	beq.w	c01bcf0 <UART_SetConfig+0x728>
 c01bb9c:	2b01      	cmp	r3, #1
 c01bb9e:	f000 80a9 	beq.w	c01bcf4 <UART_SetConfig+0x72c>
 c01bba2:	2b02      	cmp	r3, #2
 c01bba4:	f000 80a8 	beq.w	c01bcf8 <UART_SetConfig+0x730>
 c01bba8:	2b03      	cmp	r3, #3
 c01bbaa:	f000 80a7 	beq.w	c01bcfc <UART_SetConfig+0x734>
 c01bbae:	2b04      	cmp	r3, #4
 c01bbb0:	f000 80a6 	beq.w	c01bd00 <UART_SetConfig+0x738>
 c01bbb4:	2b05      	cmp	r3, #5
 c01bbb6:	f000 80a5 	beq.w	c01bd04 <UART_SetConfig+0x73c>
 c01bbba:	2b06      	cmp	r3, #6
 c01bbbc:	f000 80a4 	beq.w	c01bd08 <UART_SetConfig+0x740>
 c01bbc0:	2b07      	cmp	r3, #7
 c01bbc2:	f000 80a3 	beq.w	c01bd0c <UART_SetConfig+0x744>
 c01bbc6:	2b08      	cmp	r3, #8
 c01bbc8:	f000 80a2 	beq.w	c01bd10 <UART_SetConfig+0x748>
 c01bbcc:	2b09      	cmp	r3, #9
 c01bbce:	f000 80a1 	beq.w	c01bd14 <UART_SetConfig+0x74c>
 c01bbd2:	2b0a      	cmp	r3, #10
 c01bbd4:	f000 80a0 	beq.w	c01bd18 <UART_SetConfig+0x750>
 c01bbd8:	2b0b      	cmp	r3, #11
 c01bbda:	bf14      	ite	ne
 c01bbdc:	2301      	movne	r3, #1
 c01bbde:	f44f 7380 	moveq.w	r3, #256	; 0x100
 c01bbe2:	fbb0 f3f3 	udiv	r3, r0, r3
 c01bbe6:	6862      	ldr	r2, [r4, #4]
 c01bbe8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 c01bbec:	fbb3 f3f2 	udiv	r3, r3, r2
 c01bbf0:	e059      	b.n	c01bca6 <UART_SetConfig+0x6de>
        pclk = HAL_RCC_GetPCLK2Freq();
 c01bbf2:	f7fe ff8b 	bl	c01ab0c <HAL_RCC_GetPCLK2Freq>
 c01bbf6:	e7cd      	b.n	c01bb94 <UART_SetConfig+0x5cc>
 c01bbf8:	28b0aa00 	.word	0x28b0aa00
 c01bbfc:	00000000 	.word	0x00000000
 c01bc00:	14585500 	.word	0x14585500
 c01bc04:	00000000 	.word	0x00000000
 c01bc08:	000ffcff 	.word	0x000ffcff
 c01bc0c:	00f42400 	.word	0x00f42400
 c01bc10:	7a120000 	.word	0x7a120000
 c01bc14:	3d090000 	.word	0x3d090000
 c01bc18:	1e848000 	.word	0x1e848000
 c01bc1c:	186a0000 	.word	0x186a0000
 c01bc20:	0f424000 	.word	0x0f424000
 c01bc24:	07a12000 	.word	0x07a12000
 c01bc28:	03d09000 	.word	0x03d09000
 c01bc2c:	01e84800 	.word	0x01e84800
 c01bc30:	f4240000 	.word	0xf4240000
 c01bc34:	00155500 	.word	0x00155500
 c01bc38:	000ccc00 	.word	0x000ccc00
 c01bc3c:	000aaa00 	.word	0x000aaa00
 c01bc40:	007a1200 	.word	0x007a1200
 c01bc44:	00516154 	.word	0x00516154
 c01bc48:	003d0900 	.word	0x003d0900
 c01bc4c:	0030d400 	.word	0x0030d400
 c01bc50:	0028b0aa 	.word	0x0028b0aa
 c01bc54:	001e8480 	.word	0x001e8480
 c01bc58:	000f4240 	.word	0x000f4240
 c01bc5c:	0007a120 	.word	0x0007a120
 c01bc60:	0003d090 	.word	0x0003d090
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c01bc64:	b358      	cbz	r0, c01bcbe <UART_SetConfig+0x6f6>
 c01bc66:	2801      	cmp	r0, #1
 c01bc68:	d02b      	beq.n	c01bcc2 <UART_SetConfig+0x6fa>
 c01bc6a:	2802      	cmp	r0, #2
 c01bc6c:	d02b      	beq.n	c01bcc6 <UART_SetConfig+0x6fe>
 c01bc6e:	2803      	cmp	r0, #3
 c01bc70:	d02b      	beq.n	c01bcca <UART_SetConfig+0x702>
 c01bc72:	2804      	cmp	r0, #4
 c01bc74:	d02b      	beq.n	c01bcce <UART_SetConfig+0x706>
 c01bc76:	2805      	cmp	r0, #5
 c01bc78:	d02b      	beq.n	c01bcd2 <UART_SetConfig+0x70a>
 c01bc7a:	2806      	cmp	r0, #6
 c01bc7c:	d02b      	beq.n	c01bcd6 <UART_SetConfig+0x70e>
 c01bc7e:	2807      	cmp	r0, #7
 c01bc80:	d02b      	beq.n	c01bcda <UART_SetConfig+0x712>
 c01bc82:	2808      	cmp	r0, #8
 c01bc84:	d02b      	beq.n	c01bcde <UART_SetConfig+0x716>
 c01bc86:	2809      	cmp	r0, #9
 c01bc88:	d02b      	beq.n	c01bce2 <UART_SetConfig+0x71a>
 c01bc8a:	280a      	cmp	r0, #10
 c01bc8c:	d02b      	beq.n	c01bce6 <UART_SetConfig+0x71e>
 c01bc8e:	f24f 4224 	movw	r2, #62500	; 0xf424
 c01bc92:	4bc0      	ldr	r3, [pc, #768]	; (c01bf94 <UART_SetConfig+0x9cc>)
 c01bc94:	280b      	cmp	r0, #11
 c01bc96:	bf14      	ite	ne
 c01bc98:	4618      	movne	r0, r3
 c01bc9a:	4610      	moveq	r0, r2
 c01bc9c:	6863      	ldr	r3, [r4, #4]
 c01bc9e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 c01bca2:	fbb0 f3f3 	udiv	r3, r0, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 c01bca6:	2200      	movs	r2, #0
 c01bca8:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c01bcaa:	f64f 71ef 	movw	r1, #65519	; 0xffef
 c01bcae:	f1a3 0010 	sub.w	r0, r3, #16
 c01bcb2:	4288      	cmp	r0, r1
 c01bcb4:	f63f ad97 	bhi.w	c01b7e6 <UART_SetConfig+0x21e>
      huart->Instance->BRR = usartdiv;
 c01bcb8:	6821      	ldr	r1, [r4, #0]
 c01bcba:	60cb      	str	r3, [r1, #12]
 c01bcbc:	e594      	b.n	c01b7e8 <UART_SetConfig+0x220>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c01bcbe:	48b5      	ldr	r0, [pc, #724]	; (c01bf94 <UART_SetConfig+0x9cc>)
 c01bcc0:	e7ec      	b.n	c01bc9c <UART_SetConfig+0x6d4>
 c01bcc2:	48b5      	ldr	r0, [pc, #724]	; (c01bf98 <UART_SetConfig+0x9d0>)
 c01bcc4:	e7ea      	b.n	c01bc9c <UART_SetConfig+0x6d4>
 c01bcc6:	48b5      	ldr	r0, [pc, #724]	; (c01bf9c <UART_SetConfig+0x9d4>)
 c01bcc8:	e7e8      	b.n	c01bc9c <UART_SetConfig+0x6d4>
 c01bcca:	48b5      	ldr	r0, [pc, #724]	; (c01bfa0 <UART_SetConfig+0x9d8>)
 c01bccc:	e7e6      	b.n	c01bc9c <UART_SetConfig+0x6d4>
 c01bcce:	48b5      	ldr	r0, [pc, #724]	; (c01bfa4 <UART_SetConfig+0x9dc>)
 c01bcd0:	e7e4      	b.n	c01bc9c <UART_SetConfig+0x6d4>
 c01bcd2:	48b5      	ldr	r0, [pc, #724]	; (c01bfa8 <UART_SetConfig+0x9e0>)
 c01bcd4:	e7e2      	b.n	c01bc9c <UART_SetConfig+0x6d4>
 c01bcd6:	48b5      	ldr	r0, [pc, #724]	; (c01bfac <UART_SetConfig+0x9e4>)
 c01bcd8:	e7e0      	b.n	c01bc9c <UART_SetConfig+0x6d4>
 c01bcda:	48b5      	ldr	r0, [pc, #724]	; (c01bfb0 <UART_SetConfig+0x9e8>)
 c01bcdc:	e7de      	b.n	c01bc9c <UART_SetConfig+0x6d4>
 c01bcde:	48b5      	ldr	r0, [pc, #724]	; (c01bfb4 <UART_SetConfig+0x9ec>)
 c01bce0:	e7dc      	b.n	c01bc9c <UART_SetConfig+0x6d4>
 c01bce2:	48b5      	ldr	r0, [pc, #724]	; (c01bfb8 <UART_SetConfig+0x9f0>)
 c01bce4:	e7da      	b.n	c01bc9c <UART_SetConfig+0x6d4>
 c01bce6:	48b5      	ldr	r0, [pc, #724]	; (c01bfbc <UART_SetConfig+0x9f4>)
 c01bce8:	e7d8      	b.n	c01bc9c <UART_SetConfig+0x6d4>
        pclk = HAL_RCC_GetSysClockFreq();
 c01bcea:	f7fe feab 	bl	c01aa44 <HAL_RCC_GetSysClockFreq>
 c01bcee:	e751      	b.n	c01bb94 <UART_SetConfig+0x5cc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c01bcf0:	2301      	movs	r3, #1
 c01bcf2:	e776      	b.n	c01bbe2 <UART_SetConfig+0x61a>
 c01bcf4:	2302      	movs	r3, #2
 c01bcf6:	e774      	b.n	c01bbe2 <UART_SetConfig+0x61a>
 c01bcf8:	2304      	movs	r3, #4
 c01bcfa:	e772      	b.n	c01bbe2 <UART_SetConfig+0x61a>
 c01bcfc:	2306      	movs	r3, #6
 c01bcfe:	e770      	b.n	c01bbe2 <UART_SetConfig+0x61a>
 c01bd00:	2308      	movs	r3, #8
 c01bd02:	e76e      	b.n	c01bbe2 <UART_SetConfig+0x61a>
 c01bd04:	230a      	movs	r3, #10
 c01bd06:	e76c      	b.n	c01bbe2 <UART_SetConfig+0x61a>
 c01bd08:	230c      	movs	r3, #12
 c01bd0a:	e76a      	b.n	c01bbe2 <UART_SetConfig+0x61a>
 c01bd0c:	2310      	movs	r3, #16
 c01bd0e:	e768      	b.n	c01bbe2 <UART_SetConfig+0x61a>
 c01bd10:	2320      	movs	r3, #32
 c01bd12:	e766      	b.n	c01bbe2 <UART_SetConfig+0x61a>
 c01bd14:	2340      	movs	r3, #64	; 0x40
 c01bd16:	e764      	b.n	c01bbe2 <UART_SetConfig+0x61a>
 c01bd18:	2380      	movs	r3, #128	; 0x80
 c01bd1a:	e762      	b.n	c01bbe2 <UART_SetConfig+0x61a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c01bd1c:	b1f0      	cbz	r0, c01bd5c <UART_SetConfig+0x794>
 c01bd1e:	2801      	cmp	r0, #1
 c01bd20:	d01f      	beq.n	c01bd62 <UART_SetConfig+0x79a>
 c01bd22:	2802      	cmp	r0, #2
 c01bd24:	d020      	beq.n	c01bd68 <UART_SetConfig+0x7a0>
 c01bd26:	2803      	cmp	r0, #3
 c01bd28:	d021      	beq.n	c01bd6e <UART_SetConfig+0x7a6>
 c01bd2a:	2804      	cmp	r0, #4
 c01bd2c:	d022      	beq.n	c01bd74 <UART_SetConfig+0x7ac>
 c01bd2e:	2805      	cmp	r0, #5
 c01bd30:	d023      	beq.n	c01bd7a <UART_SetConfig+0x7b2>
 c01bd32:	2806      	cmp	r0, #6
 c01bd34:	d024      	beq.n	c01bd80 <UART_SetConfig+0x7b8>
 c01bd36:	2807      	cmp	r0, #7
 c01bd38:	d025      	beq.n	c01bd86 <UART_SetConfig+0x7be>
 c01bd3a:	2808      	cmp	r0, #8
 c01bd3c:	d026      	beq.n	c01bd8c <UART_SetConfig+0x7c4>
 c01bd3e:	2809      	cmp	r0, #9
 c01bd40:	d027      	beq.n	c01bd92 <UART_SetConfig+0x7ca>
 c01bd42:	280a      	cmp	r0, #10
 c01bd44:	d028      	beq.n	c01bd98 <UART_SetConfig+0x7d0>
 c01bd46:	280b      	cmp	r0, #11
 c01bd48:	bf14      	ite	ne
 c01bd4a:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 c01bd4e:	2380      	moveq	r3, #128	; 0x80
 c01bd50:	6860      	ldr	r0, [r4, #4]
 c01bd52:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 c01bd56:	fbb3 f3f0 	udiv	r3, r3, r0
 c01bd5a:	e7a4      	b.n	c01bca6 <UART_SetConfig+0x6de>
 c01bd5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c01bd60:	e7f6      	b.n	c01bd50 <UART_SetConfig+0x788>
 c01bd62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 c01bd66:	e7f3      	b.n	c01bd50 <UART_SetConfig+0x788>
 c01bd68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 c01bd6c:	e7f0      	b.n	c01bd50 <UART_SetConfig+0x788>
 c01bd6e:	f241 5355 	movw	r3, #5461	; 0x1555
 c01bd72:	e7ed      	b.n	c01bd50 <UART_SetConfig+0x788>
 c01bd74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c01bd78:	e7ea      	b.n	c01bd50 <UART_SetConfig+0x788>
 c01bd7a:	f640 43cc 	movw	r3, #3276	; 0xccc
 c01bd7e:	e7e7      	b.n	c01bd50 <UART_SetConfig+0x788>
 c01bd80:	f640 23aa 	movw	r3, #2730	; 0xaaa
 c01bd84:	e7e4      	b.n	c01bd50 <UART_SetConfig+0x788>
 c01bd86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 c01bd8a:	e7e1      	b.n	c01bd50 <UART_SetConfig+0x788>
 c01bd8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c01bd90:	e7de      	b.n	c01bd50 <UART_SetConfig+0x788>
 c01bd92:	f44f 7300 	mov.w	r3, #512	; 0x200
 c01bd96:	e7db      	b.n	c01bd50 <UART_SetConfig+0x788>
 c01bd98:	f44f 7380 	mov.w	r3, #256	; 0x100
 c01bd9c:	e7d8      	b.n	c01bd50 <UART_SetConfig+0x788>
  if (UART_INSTANCE_LOWPOWER(huart))
 c01bd9e:	4a88      	ldr	r2, [pc, #544]	; (c01bfc0 <UART_SetConfig+0x9f8>)
 c01bda0:	4293      	cmp	r3, r2
 c01bda2:	f43f acfb 	beq.w	c01b79c <UART_SetConfig+0x1d4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c01bda6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 c01bdaa:	f47f af5b 	bne.w	c01bc64 <UART_SetConfig+0x69c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c01bdae:	2800      	cmp	r0, #0
 c01bdb0:	f43f ae9e 	beq.w	c01baf0 <UART_SetConfig+0x528>
 c01bdb4:	2801      	cmp	r0, #1
 c01bdb6:	f43f ae9d 	beq.w	c01baf4 <UART_SetConfig+0x52c>
 c01bdba:	2802      	cmp	r0, #2
 c01bdbc:	f43f ae9c 	beq.w	c01baf8 <UART_SetConfig+0x530>
 c01bdc0:	2803      	cmp	r0, #3
 c01bdc2:	f43f ae9b 	beq.w	c01bafc <UART_SetConfig+0x534>
 c01bdc6:	2804      	cmp	r0, #4
 c01bdc8:	f43f ae9a 	beq.w	c01bb00 <UART_SetConfig+0x538>
 c01bdcc:	2805      	cmp	r0, #5
 c01bdce:	f43f ae99 	beq.w	c01bb04 <UART_SetConfig+0x53c>
 c01bdd2:	2806      	cmp	r0, #6
 c01bdd4:	f43f ae98 	beq.w	c01bb08 <UART_SetConfig+0x540>
 c01bdd8:	2807      	cmp	r0, #7
 c01bdda:	f43f ae97 	beq.w	c01bb0c <UART_SetConfig+0x544>
 c01bdde:	2808      	cmp	r0, #8
 c01bde0:	f43f ae96 	beq.w	c01bb10 <UART_SetConfig+0x548>
 c01bde4:	2809      	cmp	r0, #9
 c01bde6:	f43f ae95 	beq.w	c01bb14 <UART_SetConfig+0x54c>
 c01bdea:	280a      	cmp	r0, #10
 c01bdec:	f43f ae94 	beq.w	c01bb18 <UART_SetConfig+0x550>
 c01bdf0:	4b74      	ldr	r3, [pc, #464]	; (c01bfc4 <UART_SetConfig+0x9fc>)
 c01bdf2:	4a72      	ldr	r2, [pc, #456]	; (c01bfbc <UART_SetConfig+0x9f4>)
 c01bdf4:	280b      	cmp	r0, #11
 c01bdf6:	bf14      	ite	ne
 c01bdf8:	4618      	movne	r0, r3
 c01bdfa:	4610      	moveq	r0, r2
 c01bdfc:	6863      	ldr	r3, [r4, #4]
 c01bdfe:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 c01be02:	fbb0 f3f3 	udiv	r3, r0, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 c01be06:	2200      	movs	r2, #0
 c01be08:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c01be0a:	f64f 71ef 	movw	r1, #65519	; 0xffef
 c01be0e:	f1a3 0010 	sub.w	r0, r3, #16
 c01be12:	4288      	cmp	r0, r1
 c01be14:	f63f ace7 	bhi.w	c01b7e6 <UART_SetConfig+0x21e>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 c01be18:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 c01be1c:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 c01be1e:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 c01be22:	430b      	orrs	r3, r1
 c01be24:	60c3      	str	r3, [r0, #12]
 c01be26:	e4df      	b.n	c01b7e8 <UART_SetConfig+0x220>
  if (UART_INSTANCE_LOWPOWER(huart))
 c01be28:	4a65      	ldr	r2, [pc, #404]	; (c01bfc0 <UART_SetConfig+0x9f8>)
 c01be2a:	4293      	cmp	r3, r2
 c01be2c:	d132      	bne.n	c01be94 <UART_SetConfig+0x8cc>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 c01be2e:	2108      	movs	r1, #8
 c01be30:	2800      	cmp	r0, #0
 c01be32:	f43f ad5b 	beq.w	c01b8ec <UART_SetConfig+0x324>
 c01be36:	2801      	cmp	r0, #1
 c01be38:	f43f ad5b 	beq.w	c01b8f2 <UART_SetConfig+0x32a>
 c01be3c:	2802      	cmp	r0, #2
 c01be3e:	f43f ad5b 	beq.w	c01b8f8 <UART_SetConfig+0x330>
 c01be42:	2803      	cmp	r0, #3
 c01be44:	f43f ad5b 	beq.w	c01b8fe <UART_SetConfig+0x336>
 c01be48:	2804      	cmp	r0, #4
 c01be4a:	f43f ad5b 	beq.w	c01b904 <UART_SetConfig+0x33c>
 c01be4e:	2805      	cmp	r0, #5
 c01be50:	f43f ad5b 	beq.w	c01b90a <UART_SetConfig+0x342>
 c01be54:	2806      	cmp	r0, #6
 c01be56:	f43f ad5b 	beq.w	c01b910 <UART_SetConfig+0x348>
 c01be5a:	2807      	cmp	r0, #7
 c01be5c:	f43f ad5b 	beq.w	c01b916 <UART_SetConfig+0x34e>
 c01be60:	2808      	cmp	r0, #8
 c01be62:	f43f ad5b 	beq.w	c01b91c <UART_SetConfig+0x354>
 c01be66:	2809      	cmp	r0, #9
 c01be68:	f43f ad5b 	beq.w	c01b922 <UART_SetConfig+0x35a>
 c01be6c:	280a      	cmp	r0, #10
 c01be6e:	f43f ad5b 	beq.w	c01b928 <UART_SetConfig+0x360>
 c01be72:	280b      	cmp	r0, #11
 c01be74:	bf0c      	ite	eq
 c01be76:	2080      	moveq	r0, #128	; 0x80
 c01be78:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 c01be7c:	e4ad      	b.n	c01b7da <UART_SetConfig+0x212>
  if (UART_INSTANCE_LOWPOWER(huart))
 c01be7e:	4a50      	ldr	r2, [pc, #320]	; (c01bfc0 <UART_SetConfig+0x9f8>)
 c01be80:	4293      	cmp	r3, r2
 c01be82:	f43f acba 	beq.w	c01b7fa <UART_SetConfig+0x232>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c01be86:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 c01be8a:	f47f af2e 	bne.w	c01bcea <UART_SetConfig+0x722>
        pclk = HAL_RCC_GetSysClockFreq();
 c01be8e:	f7fe fdd9 	bl	c01aa44 <HAL_RCC_GetSysClockFreq>
 c01be92:	e036      	b.n	c01bf02 <UART_SetConfig+0x93a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c01be94:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 c01be98:	f47f af40 	bne.w	c01bd1c <UART_SetConfig+0x754>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c01be9c:	2800      	cmp	r0, #0
 c01be9e:	f43f ae53 	beq.w	c01bb48 <UART_SetConfig+0x580>
 c01bea2:	2801      	cmp	r0, #1
 c01bea4:	f43f ae53 	beq.w	c01bb4e <UART_SetConfig+0x586>
 c01bea8:	2802      	cmp	r0, #2
 c01beaa:	f43f ae53 	beq.w	c01bb54 <UART_SetConfig+0x58c>
 c01beae:	2803      	cmp	r0, #3
 c01beb0:	f43f ae53 	beq.w	c01bb5a <UART_SetConfig+0x592>
 c01beb4:	2804      	cmp	r0, #4
 c01beb6:	f43f ae53 	beq.w	c01bb60 <UART_SetConfig+0x598>
 c01beba:	2805      	cmp	r0, #5
 c01bebc:	f43f ae53 	beq.w	c01bb66 <UART_SetConfig+0x59e>
 c01bec0:	2806      	cmp	r0, #6
 c01bec2:	f43f ae53 	beq.w	c01bb6c <UART_SetConfig+0x5a4>
 c01bec6:	2807      	cmp	r0, #7
 c01bec8:	f43f ae53 	beq.w	c01bb72 <UART_SetConfig+0x5aa>
 c01becc:	2808      	cmp	r0, #8
 c01bece:	f43f ae53 	beq.w	c01bb78 <UART_SetConfig+0x5b0>
 c01bed2:	2809      	cmp	r0, #9
 c01bed4:	f43f ae53 	beq.w	c01bb7e <UART_SetConfig+0x5b6>
 c01bed8:	280a      	cmp	r0, #10
 c01beda:	f43f ae53 	beq.w	c01bb84 <UART_SetConfig+0x5bc>
 c01bede:	280b      	cmp	r0, #11
 c01bee0:	bf14      	ite	ne
 c01bee2:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 c01bee6:	f44f 7380 	moveq.w	r3, #256	; 0x100
 c01beea:	6860      	ldr	r0, [r4, #4]
 c01beec:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 c01bef0:	fbb3 f3f0 	udiv	r3, r3, r0
 c01bef4:	e787      	b.n	c01be06 <UART_SetConfig+0x83e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c01bef6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 c01befa:	f47f ae49 	bne.w	c01bb90 <UART_SetConfig+0x5c8>
        pclk = HAL_RCC_GetPCLK1Freq();
 c01befe:	f7fe fdf1 	bl	c01aae4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c01bf02:	6a61      	ldr	r1, [r4, #36]	; 0x24
 c01bf04:	2900      	cmp	r1, #0
 c01bf06:	f43f ae09 	beq.w	c01bb1c <UART_SetConfig+0x554>
 c01bf0a:	2901      	cmp	r1, #1
 c01bf0c:	f43f ae08 	beq.w	c01bb20 <UART_SetConfig+0x558>
 c01bf10:	2902      	cmp	r1, #2
 c01bf12:	f43f ae07 	beq.w	c01bb24 <UART_SetConfig+0x55c>
 c01bf16:	2903      	cmp	r1, #3
 c01bf18:	f43f ae06 	beq.w	c01bb28 <UART_SetConfig+0x560>
 c01bf1c:	2904      	cmp	r1, #4
 c01bf1e:	f43f ae05 	beq.w	c01bb2c <UART_SetConfig+0x564>
 c01bf22:	2905      	cmp	r1, #5
 c01bf24:	f43f ae04 	beq.w	c01bb30 <UART_SetConfig+0x568>
 c01bf28:	2906      	cmp	r1, #6
 c01bf2a:	f43f ae03 	beq.w	c01bb34 <UART_SetConfig+0x56c>
 c01bf2e:	2907      	cmp	r1, #7
 c01bf30:	f43f ae02 	beq.w	c01bb38 <UART_SetConfig+0x570>
 c01bf34:	2908      	cmp	r1, #8
 c01bf36:	f43f ae01 	beq.w	c01bb3c <UART_SetConfig+0x574>
 c01bf3a:	2909      	cmp	r1, #9
 c01bf3c:	f43f ae00 	beq.w	c01bb40 <UART_SetConfig+0x578>
 c01bf40:	290a      	cmp	r1, #10
 c01bf42:	f43f adff 	beq.w	c01bb44 <UART_SetConfig+0x57c>
 c01bf46:	290b      	cmp	r1, #11
 c01bf48:	bf14      	ite	ne
 c01bf4a:	2201      	movne	r2, #1
 c01bf4c:	f44f 7280 	moveq.w	r2, #256	; 0x100
 c01bf50:	fbb0 f2f2 	udiv	r2, r0, r2
 c01bf54:	6861      	ldr	r1, [r4, #4]
 c01bf56:	084b      	lsrs	r3, r1, #1
 c01bf58:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 c01bf5c:	fbb3 f3f1 	udiv	r3, r3, r1
 c01bf60:	e751      	b.n	c01be06 <UART_SetConfig+0x83e>
    switch (clocksource)
 c01bf62:	2b08      	cmp	r3, #8
 c01bf64:	f63f ac3f 	bhi.w	c01b7e6 <UART_SetConfig+0x21e>
 c01bf68:	a201      	add	r2, pc, #4	; (adr r2, c01bf70 <UART_SetConfig+0x9a8>)
 c01bf6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c01bf6e:	bf00      	nop
 c01bf70:	0c01bb91 	.word	0x0c01bb91
 c01bf74:	0c01bbf3 	.word	0x0c01bbf3
 c01bf78:	0c01bc65 	.word	0x0c01bc65
 c01bf7c:	0c01b7e7 	.word	0x0c01b7e7
 c01bf80:	0c01bceb 	.word	0x0c01bceb
 c01bf84:	0c01b7e7 	.word	0x0c01b7e7
 c01bf88:	0c01b7e7 	.word	0x0c01b7e7
 c01bf8c:	0c01b7e7 	.word	0x0c01b7e7
 c01bf90:	0c01bd1d 	.word	0x0c01bd1d
 c01bf94:	00f42400 	.word	0x00f42400
 c01bf98:	007a1200 	.word	0x007a1200
 c01bf9c:	003d0900 	.word	0x003d0900
 c01bfa0:	0028b0aa 	.word	0x0028b0aa
 c01bfa4:	001e8480 	.word	0x001e8480
 c01bfa8:	00186a00 	.word	0x00186a00
 c01bfac:	00145855 	.word	0x00145855
 c01bfb0:	000f4240 	.word	0x000f4240
 c01bfb4:	0007a120 	.word	0x0007a120
 c01bfb8:	0003d090 	.word	0x0003d090
 c01bfbc:	0001e848 	.word	0x0001e848
 c01bfc0:	50008000 	.word	0x50008000
 c01bfc4:	01e84800 	.word	0x01e84800

0c01bfc8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 c01bfc8:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 c01bfca:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 c01bfcc:	07da      	lsls	r2, r3, #31
 c01bfce:	d506      	bpl.n	c01bfde <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 c01bfd0:	6801      	ldr	r1, [r0, #0]
 c01bfd2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 c01bfd4:	684a      	ldr	r2, [r1, #4]
 c01bfd6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 c01bfda:	4322      	orrs	r2, r4
 c01bfdc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 c01bfde:	079c      	lsls	r4, r3, #30
 c01bfe0:	d506      	bpl.n	c01bff0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 c01bfe2:	6801      	ldr	r1, [r0, #0]
 c01bfe4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 c01bfe6:	684a      	ldr	r2, [r1, #4]
 c01bfe8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 c01bfec:	4322      	orrs	r2, r4
 c01bfee:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 c01bff0:	0759      	lsls	r1, r3, #29
 c01bff2:	d506      	bpl.n	c01c002 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 c01bff4:	6801      	ldr	r1, [r0, #0]
 c01bff6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 c01bff8:	684a      	ldr	r2, [r1, #4]
 c01bffa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 c01bffe:	4322      	orrs	r2, r4
 c01c000:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 c01c002:	071a      	lsls	r2, r3, #28
 c01c004:	d506      	bpl.n	c01c014 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 c01c006:	6801      	ldr	r1, [r0, #0]
 c01c008:	6b84      	ldr	r4, [r0, #56]	; 0x38
 c01c00a:	684a      	ldr	r2, [r1, #4]
 c01c00c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 c01c010:	4322      	orrs	r2, r4
 c01c012:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 c01c014:	06dc      	lsls	r4, r3, #27
 c01c016:	d506      	bpl.n	c01c026 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 c01c018:	6801      	ldr	r1, [r0, #0]
 c01c01a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 c01c01c:	688a      	ldr	r2, [r1, #8]
 c01c01e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 c01c022:	4322      	orrs	r2, r4
 c01c024:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 c01c026:	0699      	lsls	r1, r3, #26
 c01c028:	d506      	bpl.n	c01c038 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 c01c02a:	6801      	ldr	r1, [r0, #0]
 c01c02c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 c01c02e:	688a      	ldr	r2, [r1, #8]
 c01c030:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 c01c034:	4322      	orrs	r2, r4
 c01c036:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 c01c038:	065a      	lsls	r2, r3, #25
 c01c03a:	d510      	bpl.n	c01c05e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 c01c03c:	6801      	ldr	r1, [r0, #0]
 c01c03e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 c01c040:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 c01c042:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 c01c046:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 c01c04a:	ea42 0204 	orr.w	r2, r2, r4
 c01c04e:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 c01c050:	d105      	bne.n	c01c05e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 c01c052:	684a      	ldr	r2, [r1, #4]
 c01c054:	6c84      	ldr	r4, [r0, #72]	; 0x48
 c01c056:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 c01c05a:	4322      	orrs	r2, r4
 c01c05c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 c01c05e:	061b      	lsls	r3, r3, #24
 c01c060:	d506      	bpl.n	c01c070 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 c01c062:	6802      	ldr	r2, [r0, #0]
 c01c064:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 c01c066:	6853      	ldr	r3, [r2, #4]
 c01c068:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 c01c06c:	430b      	orrs	r3, r1
 c01c06e:	6053      	str	r3, [r2, #4]
}
 c01c070:	bd10      	pop	{r4, pc}

0c01c072 <UART_WaitOnFlagUntilTimeout>:
{
 c01c072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c01c076:	4604      	mov	r4, r0
 c01c078:	460f      	mov	r7, r1
 c01c07a:	4616      	mov	r6, r2
 c01c07c:	4698      	mov	r8, r3
 c01c07e:	9d06      	ldr	r5, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c01c080:	6821      	ldr	r1, [r4, #0]
 c01c082:	69ca      	ldr	r2, [r1, #28]
 c01c084:	ea37 0302 	bics.w	r3, r7, r2
 c01c088:	bf0c      	ite	eq
 c01c08a:	2201      	moveq	r2, #1
 c01c08c:	2200      	movne	r2, #0
 c01c08e:	42b2      	cmp	r2, r6
 c01c090:	d001      	beq.n	c01c096 <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 c01c092:	2000      	movs	r0, #0
 c01c094:	e01a      	b.n	c01c0cc <UART_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 c01c096:	1c68      	adds	r0, r5, #1
 c01c098:	d0f3      	beq.n	c01c082 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c01c09a:	f7fe f975 	bl	c01a388 <HAL_GetTick>
 c01c09e:	eba0 0008 	sub.w	r0, r0, r8
 c01c0a2:	42a8      	cmp	r0, r5
 c01c0a4:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c01c0a6:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c01c0a8:	d800      	bhi.n	c01c0ac <UART_WaitOnFlagUntilTimeout+0x3a>
 c01c0aa:	b98d      	cbnz	r5, c01c0d0 <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c01c0ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 c01c0b0:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c01c0b2:	6883      	ldr	r3, [r0, #8]
 c01c0b4:	f023 0301 	bic.w	r3, r3, #1
 c01c0b8:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 c01c0ba:	2320      	movs	r3, #32
 c01c0bc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 c01c0c0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 c01c0c4:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 c01c0c6:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 c01c0c8:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 c01c0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 c01c0d0:	075a      	lsls	r2, r3, #29
 c01c0d2:	d5d5      	bpl.n	c01c080 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 c01c0d4:	69c3      	ldr	r3, [r0, #28]
 c01c0d6:	051b      	lsls	r3, r3, #20
 c01c0d8:	d5d2      	bpl.n	c01c080 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c01c0da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 c01c0de:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c01c0e0:	6803      	ldr	r3, [r0, #0]
 c01c0e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 c01c0e6:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c01c0e8:	6883      	ldr	r3, [r0, #8]
 c01c0ea:	f023 0301 	bic.w	r3, r3, #1
 c01c0ee:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 c01c0f0:	2320      	movs	r3, #32
 c01c0f2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 c01c0f6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 c01c0fa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 c01c0fe:	e7e1      	b.n	c01c0c4 <UART_WaitOnFlagUntilTimeout+0x52>

0c01c100 <HAL_UART_Transmit>:
{
 c01c100:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 c01c104:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 c01c106:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 c01c10a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 c01c10c:	2b20      	cmp	r3, #32
{
 c01c10e:	460e      	mov	r6, r1
 c01c110:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 c01c112:	d14f      	bne.n	c01c1b4 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 c01c114:	2900      	cmp	r1, #0
 c01c116:	d04b      	beq.n	c01c1b0 <HAL_UART_Transmit+0xb0>
 c01c118:	2a00      	cmp	r2, #0
 c01c11a:	d049      	beq.n	c01c1b0 <HAL_UART_Transmit+0xb0>
    __HAL_LOCK(huart);
 c01c11c:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 c01c120:	2b01      	cmp	r3, #1
 c01c122:	d047      	beq.n	c01c1b4 <HAL_UART_Transmit+0xb4>
 c01c124:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c01c126:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 c01c128:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 c01c12c:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c01c12e:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 c01c132:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    tickstart = HAL_GetTick();
 c01c136:	f7fe f927 	bl	c01a388 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c01c13a:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 c01c13c:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c01c13e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize  = Size;
 c01c142:	f8a4 9054 	strh.w	r9, [r4, #84]	; 0x54
    huart->TxXferCount = Size;
 c01c146:	f8a4 9056 	strh.w	r9, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c01c14a:	d103      	bne.n	c01c154 <HAL_UART_Transmit+0x54>
 c01c14c:	6923      	ldr	r3, [r4, #16]
 c01c14e:	b90b      	cbnz	r3, c01c154 <HAL_UART_Transmit+0x54>
 c01c150:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 c01c152:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 c01c154:	2300      	movs	r3, #0
 c01c156:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    while (huart->TxXferCount > 0U)
 c01c15a:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 c01c15e:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 c01c162:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 c01c164:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
 c01c166:	b942      	cbnz	r2, c01c17a <HAL_UART_Transmit+0x7a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 c01c168:	2140      	movs	r1, #64	; 0x40
 c01c16a:	4620      	mov	r0, r4
 c01c16c:	f7ff ff81 	bl	c01c072 <UART_WaitOnFlagUntilTimeout>
 c01c170:	b948      	cbnz	r0, c01c186 <HAL_UART_Transmit+0x86>
    huart->gState = HAL_UART_STATE_READY;
 c01c172:	2320      	movs	r3, #32
 c01c174:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return HAL_OK;
 c01c178:	e006      	b.n	c01c188 <HAL_UART_Transmit+0x88>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 c01c17a:	2200      	movs	r2, #0
 c01c17c:	2180      	movs	r1, #128	; 0x80
 c01c17e:	4620      	mov	r0, r4
 c01c180:	f7ff ff77 	bl	c01c072 <UART_WaitOnFlagUntilTimeout>
 c01c184:	b118      	cbz	r0, c01c18e <HAL_UART_Transmit+0x8e>
        return HAL_TIMEOUT;
 c01c186:	2003      	movs	r0, #3
}
 c01c188:	b003      	add	sp, #12
 c01c18a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 c01c18e:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 c01c190:	b95e      	cbnz	r6, c01c1aa <HAL_UART_Transmit+0xaa>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 c01c192:	f835 3b02 	ldrh.w	r3, [r5], #2
 c01c196:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 c01c19a:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 c01c19c:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 c01c1a0:	3b01      	subs	r3, #1
 c01c1a2:	b29b      	uxth	r3, r3
 c01c1a4:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 c01c1a8:	e7d7      	b.n	c01c15a <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 c01c1aa:	f816 3b01 	ldrb.w	r3, [r6], #1
 c01c1ae:	e7f4      	b.n	c01c19a <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 c01c1b0:	2001      	movs	r0, #1
 c01c1b2:	e7e9      	b.n	c01c188 <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 c01c1b4:	2002      	movs	r0, #2
 c01c1b6:	e7e7      	b.n	c01c188 <HAL_UART_Transmit+0x88>

0c01c1b8 <UART_CheckIdleState>:
{
 c01c1b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 c01c1ba:	2600      	movs	r6, #0
{
 c01c1bc:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 c01c1be:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 c01c1c2:	f7fe f8e1 	bl	c01a388 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 c01c1c6:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 c01c1c8:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 c01c1ca:	681b      	ldr	r3, [r3, #0]
 c01c1cc:	071a      	lsls	r2, r3, #28
 c01c1ce:	d417      	bmi.n	c01c200 <UART_CheckIdleState+0x48>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 c01c1d0:	6823      	ldr	r3, [r4, #0]
 c01c1d2:	681b      	ldr	r3, [r3, #0]
 c01c1d4:	075b      	lsls	r3, r3, #29
 c01c1d6:	d50a      	bpl.n	c01c1ee <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c01c1d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c01c1dc:	2200      	movs	r2, #0
 c01c1de:	9300      	str	r3, [sp, #0]
 c01c1e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 c01c1e4:	462b      	mov	r3, r5
 c01c1e6:	4620      	mov	r0, r4
 c01c1e8:	f7ff ff43 	bl	c01c072 <UART_WaitOnFlagUntilTimeout>
 c01c1ec:	b9a0      	cbnz	r0, c01c218 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 c01c1ee:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 c01c1f0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 c01c1f2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 c01c1f6:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 c01c1fa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 c01c1fe:	e00c      	b.n	c01c21a <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c01c200:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c01c204:	4632      	mov	r2, r6
 c01c206:	9300      	str	r3, [sp, #0]
 c01c208:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 c01c20c:	4603      	mov	r3, r0
 c01c20e:	4620      	mov	r0, r4
 c01c210:	f7ff ff2f 	bl	c01c072 <UART_WaitOnFlagUntilTimeout>
 c01c214:	2800      	cmp	r0, #0
 c01c216:	d0db      	beq.n	c01c1d0 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 c01c218:	2003      	movs	r0, #3
}
 c01c21a:	b002      	add	sp, #8
 c01c21c:	bd70      	pop	{r4, r5, r6, pc}

0c01c21e <HAL_UART_Init>:
{
 c01c21e:	b510      	push	{r4, lr}
  if (huart == NULL)
 c01c220:	4604      	mov	r4, r0
 c01c222:	b350      	cbz	r0, c01c27a <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 c01c224:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 c01c228:	b91b      	cbnz	r3, c01c232 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 c01c22a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 c01c22e:	f7ff f854 	bl	c01b2da <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 c01c232:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 c01c234:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 c01c236:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 c01c23a:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 c01c23c:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 c01c23e:	f023 0301 	bic.w	r3, r3, #1
 c01c242:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 c01c244:	f7ff f9c0 	bl	c01b5c8 <UART_SetConfig>
 c01c248:	2801      	cmp	r0, #1
 c01c24a:	d016      	beq.n	c01c27a <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 c01c24c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 c01c24e:	b113      	cbz	r3, c01c256 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 c01c250:	4620      	mov	r0, r4
 c01c252:	f7ff feb9 	bl	c01bfc8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 c01c256:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 c01c258:	4620      	mov	r0, r4
}
 c01c25a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 c01c25e:	685a      	ldr	r2, [r3, #4]
 c01c260:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 c01c264:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 c01c266:	689a      	ldr	r2, [r3, #8]
 c01c268:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 c01c26c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 c01c26e:	681a      	ldr	r2, [r3, #0]
 c01c270:	f042 0201 	orr.w	r2, r2, #1
 c01c274:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 c01c276:	f7ff bf9f 	b.w	c01c1b8 <UART_CheckIdleState>
}
 c01c27a:	2001      	movs	r0, #1
 c01c27c:	bd10      	pop	{r4, pc}
	...

0c01c280 <aes_gen_tables>:
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 c01c280:	2301      	movs	r3, #1
 c01c282:	2200      	movs	r2, #0
{
 c01c284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c01c288:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
    {
        pow[i] = x;
        log[x] = i;
 c01c28c:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
        pow[i] = x;
 c01c290:	a804      	add	r0, sp, #16
 c01c292:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        x = ( x ^ XTIME( x ) ) & 0xFF;
 c01c296:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 c01c29a:	bf18      	it	ne
 c01c29c:	201b      	movne	r0, #27
        log[x] = i;
 c01c29e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        x = ( x ^ XTIME( x ) ) & 0xFF;
 c01c2a2:	ea83 0343 	eor.w	r3, r3, r3, lsl #1
    for( i = 0, x = 1; i < 256; i++ )
 c01c2a6:	3201      	adds	r2, #1
        x = ( x ^ XTIME( x ) ) & 0xFF;
 c01c2a8:	4043      	eors	r3, r0
    for( i = 0, x = 1; i < 256; i++ )
 c01c2aa:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
        x = ( x ^ XTIME( x ) ) & 0xFF;
 c01c2ae:	b2db      	uxtb	r3, r3
    for( i = 0, x = 1; i < 256; i++ )
 c01c2b0:	d1ee      	bne.n	c01c290 <aes_gen_tables+0x10>
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 c01c2b2:	2301      	movs	r3, #1
 c01c2b4:	2200      	movs	r2, #0
    {
        RCON[i] = (uint32_t) x;
 c01c2b6:	4c67      	ldr	r4, [pc, #412]	; (c01c454 <aes_gen_tables+0x1d4>)
        x = XTIME( x ) & 0xFF;
 c01c2b8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 c01c2bc:	bf18      	it	ne
 c01c2be:	201b      	movne	r0, #27
        RCON[i] = (uint32_t) x;
 c01c2c0:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
    for( i = 0, x = 1; i < 10; i++ )
 c01c2c4:	3201      	adds	r2, #1
        x = XTIME( x ) & 0xFF;
 c01c2c6:	ea80 0343 	eor.w	r3, r0, r3, lsl #1
    for( i = 0, x = 1; i < 10; i++ )
 c01c2ca:	2a0a      	cmp	r2, #10
        x = XTIME( x ) & 0xFF;
 c01c2cc:	b2db      	uxtb	r3, r3
    for( i = 0, x = 1; i < 10; i++ )
 c01c2ce:	d1f3      	bne.n	c01c2b8 <aes_gen_tables+0x38>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 c01c2d0:	2363      	movs	r3, #99	; 0x63
 c01c2d2:	4e61      	ldr	r6, [pc, #388]	; (c01c458 <aes_gen_tables+0x1d8>)
    RSb[0x63] = 0x00;

    for( i = 1; i < 256; i++ )
 c01c2d4:	2401      	movs	r4, #1
    FSb[0x00] = 0x63;
 c01c2d6:	7033      	strb	r3, [r6, #0]
    RSb[0x63] = 0x00;
 c01c2d8:	2300      	movs	r3, #0
 c01c2da:	4d60      	ldr	r5, [pc, #384]	; (c01c45c <aes_gen_tables+0x1dc>)
 c01c2dc:	f885 3063 	strb.w	r3, [r5, #99]	; 0x63
    {
        x = pow[255 - log[i]];
 c01c2e0:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
 c01c2e4:	aa04      	add	r2, sp, #16
 c01c2e6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 c01c2ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 c01c2ee:	ea4f 1ce3 	mov.w	ip, r3, asr #7
 c01c2f2:	ea4c 0c43 	orr.w	ip, ip, r3, lsl #1
 c01c2f6:	fa5f fc8c 	uxtb.w	ip, ip
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 c01c2fa:	ea4f 17ec 	mov.w	r7, ip, asr #7
 c01c2fe:	ea47 074c 	orr.w	r7, r7, ip, lsl #1
 c01c302:	b2ff      	uxtb	r7, r7
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 c01c304:	11f8      	asrs	r0, r7, #7
 c01c306:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 c01c30a:	b2c0      	uxtb	r0, r0
 c01c30c:	f083 0363 	eor.w	r3, r3, #99	; 0x63
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 c01c310:	11c2      	asrs	r2, r0, #7
 c01c312:	ea83 030c 	eor.w	r3, r3, ip
 c01c316:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 c01c31a:	407b      	eors	r3, r7
 c01c31c:	4043      	eors	r3, r0
 c01c31e:	b2d2      	uxtb	r2, r2
        x ^= y ^ 0x63;
 c01c320:	4053      	eors	r3, r2

        FSb[i] = (unsigned char) x;
 c01c322:	5533      	strb	r3, [r6, r4]
        RSb[x] = (unsigned char) i;
 c01c324:	54ec      	strb	r4, [r5, r3]
    for( i = 1; i < 256; i++ )
 c01c326:	3401      	adds	r4, #1
 c01c328:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 c01c32c:	d1d8      	bne.n	c01c2e0 <aes_gen_tables+0x60>
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 c01c32e:	2200      	movs	r2, #0
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 c01c330:	6b8b      	ldr	r3, [r1, #56]	; 0x38
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 c01c332:	6acf      	ldr	r7, [r1, #44]	; 0x2c
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 c01c334:	9301      	str	r3, [sp, #4]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 c01c336:	6a4b      	ldr	r3, [r1, #36]	; 0x24
        x = FSb[i];
 c01c338:	f8df c11c 	ldr.w	ip, [pc, #284]	; c01c458 <aes_gen_tables+0x1d8>
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 c01c33c:	9302      	str	r3, [sp, #8]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 c01c33e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
        FT0[i] = ( (uint32_t) y       ) ^
 c01c340:	f8df e12c 	ldr.w	lr, [pc, #300]	; c01c470 <aes_gen_tables+0x1f0>
        FT1[i] = ROTL8( FT0[i] );
 c01c344:	f8df 812c 	ldr.w	r8, [pc, #300]	; c01c474 <aes_gen_tables+0x1f4>
        FT2[i] = ROTL8( FT1[i] );
 c01c348:	f8df 912c 	ldr.w	r9, [pc, #300]	; c01c478 <aes_gen_tables+0x1f8>
        FT3[i] = ROTL8( FT2[i] );
 c01c34c:	f8df a12c 	ldr.w	sl, [pc, #300]	; c01c47c <aes_gen_tables+0x1fc>
        x = RSb[i];
 c01c350:	f8df b108 	ldr.w	fp, [pc, #264]	; c01c45c <aes_gen_tables+0x1dc>
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 c01c354:	9303      	str	r3, [sp, #12]
        x = FSb[i];
 c01c356:	f812 100c 	ldrb.w	r1, [r2, ip]
 c01c35a:	0094      	lsls	r4, r2, #2
        y = XTIME( x ) & 0xFF;
 c01c35c:	f011 0f80 	tst.w	r1, #128	; 0x80
 c01c360:	bf14      	ite	ne
 c01c362:	201b      	movne	r0, #27
 c01c364:	2000      	moveq	r0, #0
                 ( (uint32_t) x << 16 ) ^
 c01c366:	040b      	lsls	r3, r1, #16
        y = XTIME( x ) & 0xFF;
 c01c368:	ea80 0041 	eor.w	r0, r0, r1, lsl #1
 c01c36c:	b2c0      	uxtb	r0, r0
                 ( (uint32_t) x <<  8 ) ^
 c01c36e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 c01c372:	4043      	eors	r3, r0
        z =  ( y ^ x ) & 0xFF;
 c01c374:	4041      	eors	r1, r0
                 ( (uint32_t) x << 16 ) ^
 c01c376:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
        FT1[i] = ROTL8( FT0[i] );
 c01c37a:	ea4f 6133 	mov.w	r1, r3, ror #24
        FT0[i] = ( (uint32_t) y       ) ^
 c01c37e:	f84e 3022 	str.w	r3, [lr, r2, lsl #2]
        FT1[i] = ROTL8( FT0[i] );
 c01c382:	f848 1022 	str.w	r1, [r8, r2, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 c01c386:	ea4f 4133 	mov.w	r1, r3, ror #16
        FT3[i] = ROTL8( FT2[i] );
 c01c38a:	ea4f 2333 	mov.w	r3, r3, ror #8
 c01c38e:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
        x = RSb[i];
 c01c392:	f81b 3002 	ldrb.w	r3, [fp, r2]
        FT2[i] = ROTL8( FT1[i] );
 c01c396:	f849 1022 	str.w	r1, [r9, r2, lsl #2]
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 c01c39a:	2b00      	cmp	r3, #0
 c01c39c:	d054      	beq.n	c01c448 <aes_gen_tables+0x1c8>
 c01c39e:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 c01c3a2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 c01c3a6:	9801      	ldr	r0, [sp, #4]
 c01c3a8:	1845      	adds	r5, r0, r1
 c01c3aa:	20ff      	movs	r0, #255	; 0xff
 c01c3ac:	fb95 f6f0 	sdiv	r6, r5, r0
 c01c3b0:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
 c01c3b4:	1bae      	subs	r6, r5, r6
 c01c3b6:	ad04      	add	r5, sp, #16
 c01c3b8:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 c01c3bc:	9e02      	ldr	r6, [sp, #8]
 c01c3be:	4431      	add	r1, r6
 c01c3c0:	fb91 f0f0 	sdiv	r0, r1, r0
 c01c3c4:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 c01c3c8:	1a09      	subs	r1, r1, r0
 c01c3ca:	a804      	add	r0, sp, #16
 c01c3cc:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 c01c3d0:	0209      	lsls	r1, r1, #8
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 c01c3d2:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 c01c3d4:	2b00      	cmp	r3, #0
 c01c3d6:	d03a      	beq.n	c01c44e <aes_gen_tables+0x1ce>
 c01c3d8:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 c01c3dc:	9803      	ldr	r0, [sp, #12]
 c01c3de:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 c01c3e2:	4401      	add	r1, r0
 c01c3e4:	20ff      	movs	r0, #255	; 0xff
 c01c3e6:	fb91 f0f0 	sdiv	r0, r1, r0
 c01c3ea:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 c01c3ee:	1a08      	subs	r0, r1, r0
 c01c3f0:	a904      	add	r1, sp, #16
 c01c3f2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 c01c3f6:	0409      	lsls	r1, r1, #16
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 c01c3f8:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 c01c3fa:	b173      	cbz	r3, c01c41a <aes_gen_tables+0x19a>
 c01c3fc:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 c01c400:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 c01c404:	21ff      	movs	r1, #255	; 0xff
 c01c406:	443b      	add	r3, r7
 c01c408:	fb93 f1f1 	sdiv	r1, r3, r1
 c01c40c:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 c01c410:	1a59      	subs	r1, r3, r1
 c01c412:	ab04      	add	r3, sp, #16
 c01c414:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 c01c418:	061b      	lsls	r3, r3, #24
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 c01c41a:	405d      	eors	r5, r3
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 c01c41c:	4b10      	ldr	r3, [pc, #64]	; (c01c460 <aes_gen_tables+0x1e0>)

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
 c01c41e:	ea4f 6135 	mov.w	r1, r5, ror #24
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 c01c422:	50e5      	str	r5, [r4, r3]
        RT1[i] = ROTL8( RT0[i] );
 c01c424:	4b0f      	ldr	r3, [pc, #60]	; (c01c464 <aes_gen_tables+0x1e4>)
    for( i = 0; i < 256; i++ )
 c01c426:	3201      	adds	r2, #1
        RT1[i] = ROTL8( RT0[i] );
 c01c428:	50e1      	str	r1, [r4, r3]
        RT2[i] = ROTL8( RT1[i] );
 c01c42a:	4b0f      	ldr	r3, [pc, #60]	; (c01c468 <aes_gen_tables+0x1e8>)
 c01c42c:	ea4f 4135 	mov.w	r1, r5, ror #16
 c01c430:	50e1      	str	r1, [r4, r3]
        RT3[i] = ROTL8( RT2[i] );
 c01c432:	4b0e      	ldr	r3, [pc, #56]	; (c01c46c <aes_gen_tables+0x1ec>)
 c01c434:	ea4f 2535 	mov.w	r5, r5, ror #8
    for( i = 0; i < 256; i++ )
 c01c438:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
        RT3[i] = ROTL8( RT2[i] );
 c01c43c:	50e5      	str	r5, [r4, r3]
    for( i = 0; i < 256; i++ )
 c01c43e:	d18a      	bne.n	c01c356 <aes_gen_tables+0xd6>
#endif /* !MBEDTLS_AES_FEWER_TABLES */
    }
}
 c01c440:	f60d 0d14 	addw	sp, sp, #2068	; 0x814
 c01c444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 c01c448:	461d      	mov	r5, r3
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 c01c44a:	4619      	mov	r1, r3
 c01c44c:	e7c1      	b.n	c01c3d2 <aes_gen_tables+0x152>
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 c01c44e:	4619      	mov	r1, r3
 c01c450:	e7d2      	b.n	c01c3f8 <aes_gen_tables+0x178>
 c01c452:	bf00      	nop
 c01c454:	30036efc 	.word	0x30036efc
 c01c458:	30035df9 	.word	0x30035df9
 c01c45c:	30036f24 	.word	0x30036f24
 c01c460:	30037024 	.word	0x30037024
 c01c464:	30037424 	.word	0x30037424
 c01c468:	30037824 	.word	0x30037824
 c01c46c:	30037c24 	.word	0x30037c24
 c01c470:	30035efc 	.word	0x30035efc
 c01c474:	300362fc 	.word	0x300362fc
 c01c478:	300366fc 	.word	0x300366fc
 c01c47c:	30036afc 	.word	0x30036afc

0c01c480 <mbedtls_aes_init>:

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 c01c480:	f44f 728c 	mov.w	r2, #280	; 0x118
 c01c484:	2100      	movs	r1, #0
 c01c486:	f7f8 ba9e 	b.w	c0149c6 <memset>

0c01c48a <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
 c01c48a:	b118      	cbz	r0, c01c494 <mbedtls_aes_free+0xa>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 c01c48c:	f44f 718c 	mov.w	r1, #280	; 0x118
 c01c490:	f00a b94a 	b.w	c026728 <mbedtls_platform_zeroize>
}
 c01c494:	4770      	bx	lr
	...

0c01c498 <mbedtls_aes_setkey_enc>:
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 c01c498:	2ac0      	cmp	r2, #192	; 0xc0
{
 c01c49a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c01c49c:	4605      	mov	r5, r0
 c01c49e:	460c      	mov	r4, r1
 c01c4a0:	4616      	mov	r6, r2
    switch( keybits )
 c01c4a2:	d050      	beq.n	c01c546 <mbedtls_aes_setkey_enc+0xae>
 c01c4a4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 c01c4a8:	d04f      	beq.n	c01c54a <mbedtls_aes_setkey_enc+0xb2>
 c01c4aa:	2a80      	cmp	r2, #128	; 0x80
 c01c4ac:	f040 80eb 	bne.w	c01c686 <mbedtls_aes_setkey_enc+0x1ee>
    {
        case 128: ctx->nr = 10; break;
 c01c4b0:	230a      	movs	r3, #10
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 c01c4b2:	4f76      	ldr	r7, [pc, #472]	; (c01c68c <mbedtls_aes_setkey_enc+0x1f4>)
        case 256: ctx->nr = 14; break;
 c01c4b4:	602b      	str	r3, [r5, #0]
    if( aes_init_done == 0 )
 c01c4b6:	683b      	ldr	r3, [r7, #0]
 c01c4b8:	b91b      	cbnz	r3, c01c4c2 <mbedtls_aes_setkey_enc+0x2a>
    {
        aes_gen_tables();
 c01c4ba:	f7ff fee1 	bl	c01c280 <aes_gen_tables>
        aes_init_done = 1;
 c01c4be:	2301      	movs	r3, #1
 c01c4c0:	603b      	str	r3, [r7, #0]
 c01c4c2:	4621      	mov	r1, r4
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 c01c4c4:	2200      	movs	r2, #0
    ctx->rk = RK = ctx->buf;
 c01c4c6:	f105 0308 	add.w	r3, r5, #8
 c01c4ca:	606b      	str	r3, [r5, #4]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 c01c4cc:	0976      	lsrs	r6, r6, #5
 c01c4ce:	4296      	cmp	r6, r2
 c01c4d0:	f101 0104 	add.w	r1, r1, #4
 c01c4d4:	d13b      	bne.n	c01c54e <mbedtls_aes_setkey_enc+0xb6>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 c01c4d6:	682a      	ldr	r2, [r5, #0]
 c01c4d8:	2a0c      	cmp	r2, #12
 c01c4da:	d04a      	beq.n	c01c572 <mbedtls_aes_setkey_enc+0xda>
 c01c4dc:	2a0e      	cmp	r2, #14
 c01c4de:	f000 8081 	beq.w	c01c5e4 <mbedtls_aes_setkey_enc+0x14c>
 c01c4e2:	2a0a      	cmp	r2, #10
 c01c4e4:	d12d      	bne.n	c01c542 <mbedtls_aes_setkey_enc+0xaa>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 c01c4e6:	2400      	movs	r4, #0
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 c01c4e8:	4e69      	ldr	r6, [pc, #420]	; (c01c690 <mbedtls_aes_setkey_enc+0x1f8>)
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 c01c4ea:	4d6a      	ldr	r5, [pc, #424]	; (c01c694 <mbedtls_aes_setkey_enc+0x1fc>)
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 c01c4ec:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 c01c4f0:	68d8      	ldr	r0, [r3, #12]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 c01c4f2:	681a      	ldr	r2, [r3, #0]
            for( i = 0; i < 10; i++, RK += 4 )
 c01c4f4:	3401      	adds	r4, #1
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 c01c4f6:	404a      	eors	r2, r1
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 c01c4f8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 c01c4fc:	5c69      	ldrb	r1, [r5, r1]
            for( i = 0; i < 10; i++, RK += 4 )
 c01c4fe:	2c0a      	cmp	r4, #10
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 c01c500:	ea82 0201 	eor.w	r2, r2, r1
 c01c504:	ea4f 6110 	mov.w	r1, r0, lsr #24
 c01c508:	5c69      	ldrb	r1, [r5, r1]
            for( i = 0; i < 10; i++, RK += 4 )
 c01c50a:	f103 0310 	add.w	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 c01c50e:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 c01c512:	b2c1      	uxtb	r1, r0
 c01c514:	5c69      	ldrb	r1, [r5, r1]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 c01c516:	ea82 6201 	eor.w	r2, r2, r1, lsl #24
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 c01c51a:	f3c0 4107 	ubfx	r1, r0, #16, #8
 c01c51e:	5c69      	ldrb	r1, [r5, r1]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 c01c520:	ea82 2201 	eor.w	r2, r2, r1, lsl #8

                RK[5]  = RK[1] ^ RK[4];
 c01c524:	f853 1c0c 	ldr.w	r1, [r3, #-12]
                RK[4]  = RK[0] ^ RCON[i] ^
 c01c528:	601a      	str	r2, [r3, #0]
                RK[5]  = RK[1] ^ RK[4];
 c01c52a:	ea82 0201 	eor.w	r2, r2, r1
                RK[6]  = RK[2] ^ RK[5];
 c01c52e:	f853 1c08 	ldr.w	r1, [r3, #-8]
                RK[5]  = RK[1] ^ RK[4];
 c01c532:	605a      	str	r2, [r3, #4]
                RK[6]  = RK[2] ^ RK[5];
 c01c534:	ea82 0201 	eor.w	r2, r2, r1
 c01c538:	609a      	str	r2, [r3, #8]
                RK[7]  = RK[3] ^ RK[6];
 c01c53a:	ea82 0200 	eor.w	r2, r2, r0
 c01c53e:	60da      	str	r2, [r3, #12]
            for( i = 0; i < 10; i++, RK += 4 )
 c01c540:	d1d4      	bne.n	c01c4ec <mbedtls_aes_setkey_enc+0x54>
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
 c01c542:	2000      	movs	r0, #0
 c01c544:	e0a1      	b.n	c01c68a <mbedtls_aes_setkey_enc+0x1f2>
        case 192: ctx->nr = 12; break;
 c01c546:	230c      	movs	r3, #12
 c01c548:	e7b3      	b.n	c01c4b2 <mbedtls_aes_setkey_enc+0x1a>
        case 256: ctx->nr = 14; break;
 c01c54a:	230e      	movs	r3, #14
 c01c54c:	e7b1      	b.n	c01c4b2 <mbedtls_aes_setkey_enc+0x1a>
        GET_UINT32_LE( RK[i], key, i << 2 );
 c01c54e:	f811 4c02 	ldrb.w	r4, [r1, #-2]
 c01c552:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 c01c556:	0424      	lsls	r4, r4, #16
 c01c558:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 c01c55c:	f811 0c04 	ldrb.w	r0, [r1, #-4]
 c01c560:	4304      	orrs	r4, r0
 c01c562:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 c01c566:	ea44 6400 	orr.w	r4, r4, r0, lsl #24
 c01c56a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 c01c56e:	3201      	adds	r2, #1
 c01c570:	e7ad      	b.n	c01c4ce <mbedtls_aes_setkey_enc+0x36>
            for( i = 0; i < 8; i++, RK += 6 )
 c01c572:	2400      	movs	r4, #0
                RK[6]  = RK[0] ^ RCON[i] ^
 c01c574:	4e46      	ldr	r6, [pc, #280]	; (c01c690 <mbedtls_aes_setkey_enc+0x1f8>)
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 c01c576:	4d47      	ldr	r5, [pc, #284]	; (c01c694 <mbedtls_aes_setkey_enc+0x1fc>)
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 c01c578:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 c01c57c:	6958      	ldr	r0, [r3, #20]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 c01c57e:	681a      	ldr	r2, [r3, #0]
            for( i = 0; i < 8; i++, RK += 6 )
 c01c580:	3401      	adds	r4, #1
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 c01c582:	404a      	eors	r2, r1
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 c01c584:	f3c0 2107 	ubfx	r1, r0, #8, #8
 c01c588:	5c69      	ldrb	r1, [r5, r1]
            for( i = 0; i < 8; i++, RK += 6 )
 c01c58a:	2c08      	cmp	r4, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 c01c58c:	ea82 0201 	eor.w	r2, r2, r1
 c01c590:	ea4f 6110 	mov.w	r1, r0, lsr #24
 c01c594:	5c69      	ldrb	r1, [r5, r1]
            for( i = 0; i < 8; i++, RK += 6 )
 c01c596:	f103 0318 	add.w	r3, r3, #24
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 c01c59a:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 c01c59e:	b2c1      	uxtb	r1, r0
 c01c5a0:	5c69      	ldrb	r1, [r5, r1]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 c01c5a2:	ea82 6201 	eor.w	r2, r2, r1, lsl #24
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 c01c5a6:	f3c0 4107 	ubfx	r1, r0, #16, #8
 c01c5aa:	5c69      	ldrb	r1, [r5, r1]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 c01c5ac:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
                RK[7]  = RK[1] ^ RK[6];
 c01c5b0:	f853 1c14 	ldr.w	r1, [r3, #-20]
                RK[6]  = RK[0] ^ RCON[i] ^
 c01c5b4:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[1] ^ RK[6];
 c01c5b6:	ea82 0201 	eor.w	r2, r2, r1
                RK[8]  = RK[2] ^ RK[7];
 c01c5ba:	f853 1c10 	ldr.w	r1, [r3, #-16]
                RK[7]  = RK[1] ^ RK[6];
 c01c5be:	605a      	str	r2, [r3, #4]
                RK[8]  = RK[2] ^ RK[7];
 c01c5c0:	ea82 0201 	eor.w	r2, r2, r1
                RK[9]  = RK[3] ^ RK[8];
 c01c5c4:	f853 1c0c 	ldr.w	r1, [r3, #-12]
                RK[8]  = RK[2] ^ RK[7];
 c01c5c8:	609a      	str	r2, [r3, #8]
                RK[9]  = RK[3] ^ RK[8];
 c01c5ca:	ea82 0201 	eor.w	r2, r2, r1
                RK[10] = RK[4] ^ RK[9];
 c01c5ce:	f853 1c08 	ldr.w	r1, [r3, #-8]
                RK[9]  = RK[3] ^ RK[8];
 c01c5d2:	60da      	str	r2, [r3, #12]
                RK[10] = RK[4] ^ RK[9];
 c01c5d4:	ea82 0201 	eor.w	r2, r2, r1
 c01c5d8:	611a      	str	r2, [r3, #16]
                RK[11] = RK[5] ^ RK[10];
 c01c5da:	ea82 0200 	eor.w	r2, r2, r0
 c01c5de:	615a      	str	r2, [r3, #20]
            for( i = 0; i < 8; i++, RK += 6 )
 c01c5e0:	d1ca      	bne.n	c01c578 <mbedtls_aes_setkey_enc+0xe0>
 c01c5e2:	e7ae      	b.n	c01c542 <mbedtls_aes_setkey_enc+0xaa>
            for( i = 0; i < 7; i++, RK += 8 )
 c01c5e4:	2400      	movs	r4, #0
                RK[8]  = RK[0] ^ RCON[i] ^
 c01c5e6:	4d2a      	ldr	r5, [pc, #168]	; (c01c690 <mbedtls_aes_setkey_enc+0x1f8>)
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 c01c5e8:	492a      	ldr	r1, [pc, #168]	; (c01c694 <mbedtls_aes_setkey_enc+0x1fc>)
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 c01c5ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 c01c5ee:	69d8      	ldr	r0, [r3, #28]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 c01c5f0:	681e      	ldr	r6, [r3, #0]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 c01c5f2:	691f      	ldr	r7, [r3, #16]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 c01c5f4:	4072      	eors	r2, r6
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 c01c5f6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 c01c5fa:	5d8e      	ldrb	r6, [r1, r6]
            for( i = 0; i < 7; i++, RK += 8 )
 c01c5fc:	3401      	adds	r4, #1
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 c01c5fe:	4072      	eors	r2, r6
 c01c600:	0e06      	lsrs	r6, r0, #24
 c01c602:	5d8e      	ldrb	r6, [r1, r6]
            for( i = 0; i < 7; i++, RK += 8 )
 c01c604:	2c07      	cmp	r4, #7
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 c01c606:	ea82 4206 	eor.w	r2, r2, r6, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 c01c60a:	b2c6      	uxtb	r6, r0
 c01c60c:	5d8e      	ldrb	r6, [r1, r6]
            for( i = 0; i < 7; i++, RK += 8 )
 c01c60e:	f103 0320 	add.w	r3, r3, #32
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 c01c612:	ea82 6206 	eor.w	r2, r2, r6, lsl #24
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 c01c616:	f3c0 4607 	ubfx	r6, r0, #16, #8
 c01c61a:	5d8e      	ldrb	r6, [r1, r6]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 c01c61c:	ea82 2206 	eor.w	r2, r2, r6, lsl #8
                RK[9]  = RK[1] ^ RK[8];
 c01c620:	f853 6c1c 	ldr.w	r6, [r3, #-28]
                RK[8]  = RK[0] ^ RCON[i] ^
 c01c624:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[1] ^ RK[8];
 c01c626:	ea82 0206 	eor.w	r2, r2, r6
                RK[10] = RK[2] ^ RK[9];
 c01c62a:	f853 6c18 	ldr.w	r6, [r3, #-24]
                RK[9]  = RK[1] ^ RK[8];
 c01c62e:	605a      	str	r2, [r3, #4]
                RK[10] = RK[2] ^ RK[9];
 c01c630:	ea82 0206 	eor.w	r2, r2, r6
                RK[11] = RK[3] ^ RK[10];
 c01c634:	f853 6c14 	ldr.w	r6, [r3, #-20]
                RK[10] = RK[2] ^ RK[9];
 c01c638:	609a      	str	r2, [r3, #8]
                RK[11] = RK[3] ^ RK[10];
 c01c63a:	ea82 0206 	eor.w	r2, r2, r6
 c01c63e:	60da      	str	r2, [r3, #12]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 c01c640:	b2d6      	uxtb	r6, r2
 c01c642:	5d8e      	ldrb	r6, [r1, r6]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 c01c644:	ea86 0607 	eor.w	r6, r6, r7
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 c01c648:	ea4f 6712 	mov.w	r7, r2, lsr #24
 c01c64c:	5dcf      	ldrb	r7, [r1, r7]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 c01c64e:	ea86 6607 	eor.w	r6, r6, r7, lsl #24
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 c01c652:	f3c2 2707 	ubfx	r7, r2, #8, #8
 c01c656:	5dcf      	ldrb	r7, [r1, r7]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 c01c658:	f3c2 4207 	ubfx	r2, r2, #16, #8
 c01c65c:	5c8a      	ldrb	r2, [r1, r2]
 c01c65e:	ea86 2607 	eor.w	r6, r6, r7, lsl #8
 c01c662:	ea86 4202 	eor.w	r2, r6, r2, lsl #16
                RK[13] = RK[5] ^ RK[12];
 c01c666:	f853 6c0c 	ldr.w	r6, [r3, #-12]
                RK[12] = RK[4] ^
 c01c66a:	611a      	str	r2, [r3, #16]
                RK[13] = RK[5] ^ RK[12];
 c01c66c:	ea82 0206 	eor.w	r2, r2, r6
                RK[14] = RK[6] ^ RK[13];
 c01c670:	f853 6c08 	ldr.w	r6, [r3, #-8]
                RK[13] = RK[5] ^ RK[12];
 c01c674:	615a      	str	r2, [r3, #20]
                RK[14] = RK[6] ^ RK[13];
 c01c676:	ea82 0206 	eor.w	r2, r2, r6
                RK[15] = RK[7] ^ RK[14];
 c01c67a:	ea80 0002 	eor.w	r0, r0, r2
                RK[14] = RK[6] ^ RK[13];
 c01c67e:	619a      	str	r2, [r3, #24]
                RK[15] = RK[7] ^ RK[14];
 c01c680:	61d8      	str	r0, [r3, #28]
            for( i = 0; i < 7; i++, RK += 8 )
 c01c682:	d1b2      	bne.n	c01c5ea <mbedtls_aes_setkey_enc+0x152>
 c01c684:	e75d      	b.n	c01c542 <mbedtls_aes_setkey_enc+0xaa>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 c01c686:	f06f 001f 	mvn.w	r0, #31
}
 c01c68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c01c68c:	30038024 	.word	0x30038024
 c01c690:	30036efc 	.word	0x30036efc
 c01c694:	30035df9 	.word	0x30035df9

0c01c698 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 c01c698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c01c69c:	4604      	mov	r4, r0
 c01c69e:	460d      	mov	r5, r1
 c01c6a0:	4616      	mov	r6, r2
 c01c6a2:	b0c9      	sub	sp, #292	; 0x124
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
 c01c6a4:	a802      	add	r0, sp, #8
 c01c6a6:	f7ff feeb 	bl	c01c480 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 c01c6aa:	f104 0308 	add.w	r3, r4, #8
 c01c6ae:	6063      	str	r3, [r4, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 c01c6b0:	4632      	mov	r2, r6
 c01c6b2:	4629      	mov	r1, r5
 c01c6b4:	a802      	add	r0, sp, #8
 c01c6b6:	f7ff feef 	bl	c01c498 <mbedtls_aes_setkey_enc>
 c01c6ba:	4680      	mov	r8, r0
 c01c6bc:	bb08      	cbnz	r0, c01c702 <mbedtls_aes_setkey_dec+0x6a>
        goto exit;

    ctx->nr = cty.nr;
 c01c6be:	9902      	ldr	r1, [sp, #8]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 c01c6c0:	9803      	ldr	r0, [sp, #12]
 c01c6c2:	010a      	lsls	r2, r1, #4
 c01c6c4:	1883      	adds	r3, r0, r2

    *RK++ = *SK++;
 c01c6c6:	5882      	ldr	r2, [r0, r2]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 c01c6c8:	4d25      	ldr	r5, [pc, #148]	; (c01c760 <mbedtls_aes_setkey_dec+0xc8>)
    *RK++ = *SK++;
 c01c6ca:	60a2      	str	r2, [r4, #8]
    *RK++ = *SK++;
 c01c6cc:	685a      	ldr	r2, [r3, #4]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 c01c6ce:	f8df e098 	ldr.w	lr, [pc, #152]	; c01c768 <mbedtls_aes_setkey_dec+0xd0>
    *RK++ = *SK++;
 c01c6d2:	60e2      	str	r2, [r4, #12]
    *RK++ = *SK++;
 c01c6d4:	689a      	ldr	r2, [r3, #8]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 c01c6d6:	f8df 9094 	ldr.w	r9, [pc, #148]	; c01c76c <mbedtls_aes_setkey_dec+0xd4>
    *RK++ = *SK++;
 c01c6da:	6122      	str	r2, [r4, #16]
    *RK++ = *SK++;
 c01c6dc:	68d8      	ldr	r0, [r3, #12]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 c01c6de:	f8df a090 	ldr.w	sl, [pc, #144]	; c01c770 <mbedtls_aes_setkey_dec+0xd8>
    ctx->nr = cty.nr;
 c01c6e2:	6021      	str	r1, [r4, #0]
    *RK++ = *SK++;
 c01c6e4:	f104 0218 	add.w	r2, r4, #24
 c01c6e8:	6160      	str	r0, [r4, #20]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 c01c6ea:	3901      	subs	r1, #1
 c01c6ec:	3b10      	subs	r3, #16
 c01c6ee:	2900      	cmp	r1, #0
 c01c6f0:	dc0e      	bgt.n	c01c710 <mbedtls_aes_setkey_dec+0x78>
        }
    }

    *RK++ = *SK++;
 c01c6f2:	6819      	ldr	r1, [r3, #0]
 c01c6f4:	6011      	str	r1, [r2, #0]
    *RK++ = *SK++;
 c01c6f6:	6859      	ldr	r1, [r3, #4]
 c01c6f8:	6051      	str	r1, [r2, #4]
    *RK++ = *SK++;
 c01c6fa:	6899      	ldr	r1, [r3, #8]
 c01c6fc:	6091      	str	r1, [r2, #8]
    *RK++ = *SK++;
 c01c6fe:	68db      	ldr	r3, [r3, #12]
 c01c700:	60d3      	str	r3, [r2, #12]

exit:
    mbedtls_aes_free( &cty );
 c01c702:	a802      	add	r0, sp, #8
 c01c704:	f7ff fec1 	bl	c01c48a <mbedtls_aes_free>

    return( ret );
}
 c01c708:	4640      	mov	r0, r8
 c01c70a:	b049      	add	sp, #292	; 0x124
 c01c70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 c01c710:	4616      	mov	r6, r2
 c01c712:	f1a3 0c04 	sub.w	ip, r3, #4
 c01c716:	f102 0b10 	add.w	fp, r2, #16
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 c01c71a:	f85c 0f04 	ldr.w	r0, [ip, #4]!
 c01c71e:	b2c4      	uxtb	r4, r0
 c01c720:	5d2f      	ldrb	r7, [r5, r4]
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 c01c722:	0e04      	lsrs	r4, r0, #24
 c01c724:	5d2c      	ldrb	r4, [r5, r4]
 c01c726:	9401      	str	r4, [sp, #4]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 c01c728:	4c0e      	ldr	r4, [pc, #56]	; (c01c764 <mbedtls_aes_setkey_dec+0xcc>)
 c01c72a:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 c01c72e:	9c01      	ldr	r4, [sp, #4]
 c01c730:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 c01c734:	4067      	eors	r7, r4
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 c01c736:	f3c0 2407 	ubfx	r4, r0, #8, #8
 c01c73a:	5d2c      	ldrb	r4, [r5, r4]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 c01c73c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 c01c740:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 c01c744:	5c28      	ldrb	r0, [r5, r0]
 c01c746:	407c      	eors	r4, r7
 c01c748:	f85a 7020 	ldr.w	r7, [sl, r0, lsl #2]
 c01c74c:	407c      	eors	r4, r7
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 c01c74e:	f846 4b04 	str.w	r4, [r6], #4
        for( j = 0; j < 4; j++, SK++ )
 c01c752:	455e      	cmp	r6, fp
 c01c754:	d1e1      	bne.n	c01c71a <mbedtls_aes_setkey_dec+0x82>
 c01c756:	3210      	adds	r2, #16
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 c01c758:	3901      	subs	r1, #1
 c01c75a:	3b10      	subs	r3, #16
 c01c75c:	e7c7      	b.n	c01c6ee <mbedtls_aes_setkey_dec+0x56>
 c01c75e:	bf00      	nop
 c01c760:	30035df9 	.word	0x30035df9
 c01c764:	30037024 	.word	0x30037024
 c01c768:	30037c24 	.word	0x30037c24
 c01c76c:	30037424 	.word	0x30037424
 c01c770:	30037824 	.word	0x30037824

0c01c774 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 c01c774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 c01c778:	6847      	ldr	r7, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 c01c77a:	680d      	ldr	r5, [r1, #0]
 c01c77c:	683b      	ldr	r3, [r7, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 c01c77e:	684c      	ldr	r4, [r1, #4]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 c01c780:	405d      	eors	r5, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 c01c782:	687b      	ldr	r3, [r7, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 c01c784:	688e      	ldr	r6, [r1, #8]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 c01c786:	405c      	eors	r4, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 c01c788:	68bb      	ldr	r3, [r7, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 c01c78a:	68c9      	ldr	r1, [r1, #12]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 c01c78c:	405e      	eors	r6, r3
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 c01c78e:	68fb      	ldr	r3, [r7, #12]
{
 c01c790:	b08f      	sub	sp, #60	; 0x3c
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 c01c792:	404b      	eors	r3, r1

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 c01c794:	6801      	ldr	r1, [r0, #0]
 c01c796:	f8df 8288 	ldr.w	r8, [pc, #648]	; c01ca20 <mbedtls_internal_aes_encrypt+0x2ac>
 c01c79a:	1049      	asrs	r1, r1, #1
 c01c79c:	3901      	subs	r1, #1
 c01c79e:	f8df e284 	ldr.w	lr, [pc, #644]	; c01ca24 <mbedtls_internal_aes_encrypt+0x2b0>
 c01c7a2:	f8df c284 	ldr.w	ip, [pc, #644]	; c01ca28 <mbedtls_internal_aes_encrypt+0x2b4>
 c01c7a6:	9100      	str	r1, [sp, #0]
 c01c7a8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 c01c7ac:	f851 7c10 	ldr.w	r7, [r1, #-16]
 c01c7b0:	f851 0c20 	ldr.w	r0, [r1, #-32]
 c01c7b4:	9701      	str	r7, [sp, #4]
 c01c7b6:	b2ef      	uxtb	r7, r5
 c01c7b8:	f858 7027 	ldr.w	r7, [r8, r7, lsl #2]
 c01c7bc:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 c01c7c0:	ea87 0900 	eor.w	r9, r7, r0
 c01c7c4:	0e1f      	lsrs	r7, r3, #24
 c01c7c6:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 c01c7ca:	4893      	ldr	r0, [pc, #588]	; (c01ca18 <mbedtls_internal_aes_encrypt+0x2a4>)
 c01c7cc:	ea89 0907 	eor.w	r9, r9, r7
 c01c7d0:	f3c4 2707 	ubfx	r7, r4, #8, #8
 c01c7d4:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 c01c7d8:	f85e b02b 	ldr.w	fp, [lr, fp, lsl #2]
 c01c7dc:	ea89 0907 	eor.w	r9, r9, r7
 c01c7e0:	f3c6 4707 	ubfx	r7, r6, #16, #8
 c01c7e4:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
 c01c7e8:	3120      	adds	r1, #32
 c01c7ea:	ea89 0907 	eor.w	r9, r9, r7
 c01c7ee:	fa5f f089 	uxtb.w	r0, r9
 c01c7f2:	b2e7      	uxtb	r7, r4
 c01c7f4:	f858 7027 	ldr.w	r7, [r8, r7, lsl #2]
 c01c7f8:	9002      	str	r0, [sp, #8]
 c01c7fa:	f851 0c3c 	ldr.w	r0, [r1, #-60]
 c01c7fe:	f3c4 4407 	ubfx	r4, r4, #16, #8
 c01c802:	ea87 0a00 	eor.w	sl, r7, r0
 c01c806:	0e2f      	lsrs	r7, r5, #24
 c01c808:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 c01c80c:	4882      	ldr	r0, [pc, #520]	; (c01ca18 <mbedtls_internal_aes_encrypt+0x2a4>)
 c01c80e:	ea8a 0a07 	eor.w	sl, sl, r7
 c01c812:	f3c6 2707 	ubfx	r7, r6, #8, #8
 c01c816:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 c01c81a:	ea8a 0a07 	eor.w	sl, sl, r7
 c01c81e:	f3c3 4707 	ubfx	r7, r3, #16, #8
 c01c822:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
 c01c826:	ea8a 0a07 	eor.w	sl, sl, r7
 c01c82a:	f3ca 2007 	ubfx	r0, sl, #8, #8
 c01c82e:	b2f7      	uxtb	r7, r6
 c01c830:	9003      	str	r0, [sp, #12]
 c01c832:	f858 7027 	ldr.w	r7, [r8, r7, lsl #2]
 c01c836:	f851 0c38 	ldr.w	r0, [r1, #-56]
 c01c83a:	0e36      	lsrs	r6, r6, #24
 c01c83c:	4047      	eors	r7, r0
 c01c83e:	ea87 070b 	eor.w	r7, r7, fp
 c01c842:	f3c3 2b07 	ubfx	fp, r3, #8, #8
 c01c846:	f85c b02b 	ldr.w	fp, [ip, fp, lsl #2]
 c01c84a:	4873      	ldr	r0, [pc, #460]	; (c01ca18 <mbedtls_internal_aes_encrypt+0x2a4>)
 c01c84c:	ea87 070b 	eor.w	r7, r7, fp
 c01c850:	f3c5 4b07 	ubfx	fp, r5, #16, #8
 c01c854:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 c01c858:	b2db      	uxtb	r3, r3
 c01c85a:	ea87 070b 	eor.w	r7, r7, fp
 c01c85e:	f3c7 4007 	ubfx	r0, r7, #16, #8
 c01c862:	9004      	str	r0, [sp, #16]
 c01c864:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 c01c868:	f851 0c34 	ldr.w	r0, [r1, #-52]
 c01c86c:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 c01c870:	4043      	eors	r3, r0
 c01c872:	f3c5 2507 	ubfx	r5, r5, #8, #8
 c01c876:	4868      	ldr	r0, [pc, #416]	; (c01ca18 <mbedtls_internal_aes_encrypt+0x2a4>)
 c01c878:	4073      	eors	r3, r6
 c01c87a:	f85c 6025 	ldr.w	r6, [ip, r5, lsl #2]
 c01c87e:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 c01c882:	4073      	eors	r3, r6
 c01c884:	f851 0c2c 	ldr.w	r0, [r1, #-44]
 c01c888:	4063      	eors	r3, r4
 c01c88a:	9005      	str	r0, [sp, #20]
 c01c88c:	f3c3 4007 	ubfx	r0, r3, #16, #8
 c01c890:	9006      	str	r0, [sp, #24]
 c01c892:	f851 0c28 	ldr.w	r0, [r1, #-40]
 c01c896:	0e1d      	lsrs	r5, r3, #24
 c01c898:	9007      	str	r0, [sp, #28]
 c01c89a:	b2f8      	uxtb	r0, r7
 c01c89c:	9008      	str	r0, [sp, #32]
 c01c89e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 c01c8a2:	9009      	str	r0, [sp, #36]	; 0x24
 c01c8a4:	b2db      	uxtb	r3, r3
 c01c8a6:	f3c9 4007 	ubfx	r0, r9, #16, #8
 c01c8aa:	900a      	str	r0, [sp, #40]	; 0x28
 c01c8ac:	ea4f 601a 	mov.w	r0, sl, lsr #24
 c01c8b0:	930d      	str	r3, [sp, #52]	; 0x34
 c01c8b2:	9b00      	ldr	r3, [sp, #0]
 c01c8b4:	900b      	str	r0, [sp, #44]	; 0x2c
 c01c8b6:	f851 0c24 	ldr.w	r0, [r1, #-36]
 c01c8ba:	2b00      	cmp	r3, #0
 c01c8bc:	fa5f f48a 	uxtb.w	r4, sl
 c01c8c0:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 c01c8c4:	ea4f 6619 	mov.w	r6, r9, lsr #24
 c01c8c8:	900c      	str	r0, [sp, #48]	; 0x30
 c01c8ca:	f3c9 2907 	ubfx	r9, r9, #8, #8
 c01c8ce:	f3ca 4a07 	ubfx	sl, sl, #16, #8
 c01c8d2:	ea4f 6717 	mov.w	r7, r7, lsr #24
 c01c8d6:	dc5d      	bgt.n	c01c994 <mbedtls_internal_aes_encrypt+0x220>

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 c01c8d8:	4950      	ldr	r1, [pc, #320]	; (c01ca1c <mbedtls_internal_aes_encrypt+0x2a8>)
 c01c8da:	9b03      	ldr	r3, [sp, #12]
    X0 = *RK++ ^ \
 c01c8dc:	9801      	ldr	r0, [sp, #4]
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 c01c8de:	f811 c003 	ldrb.w	ip, [r1, r3]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 c01c8e2:	9b02      	ldr	r3, [sp, #8]
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 c01c8e4:	5d0c      	ldrb	r4, [r1, r4]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 c01c8e6:	5ccb      	ldrb	r3, [r1, r3]
    X0 = *RK++ ^ \
 c01c8e8:	4043      	eors	r3, r0
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 c01c8ea:	9804      	ldr	r0, [sp, #16]
    X0 = *RK++ ^ \
 c01c8ec:	ea83 230c 	eor.w	r3, r3, ip, lsl #8
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 c01c8f0:	5c08      	ldrb	r0, [r1, r0]
    X0 = *RK++ ^ \
 c01c8f2:	ea83 4300 	eor.w	r3, r3, r0, lsl #16
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 c01c8f6:	5d48      	ldrb	r0, [r1, r5]
    X1 = *RK++ ^ \
 c01c8f8:	9d05      	ldr	r5, [sp, #20]
    X0 = *RK++ ^ \
 c01c8fa:	ea83 6300 	eor.w	r3, r3, r0, lsl #24
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 c01c8fe:	f811 000b 	ldrb.w	r0, [r1, fp]
    X1 = *RK++ ^ \
 c01c902:	406c      	eors	r4, r5
 c01c904:	ea84 2400 	eor.w	r4, r4, r0, lsl #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 c01c908:	9806      	ldr	r0, [sp, #24]
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 c01c90a:	9d08      	ldr	r5, [sp, #32]
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 c01c90c:	5c08      	ldrb	r0, [r1, r0]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 c01c90e:	5d4d      	ldrb	r5, [r1, r5]
    X1 = *RK++ ^ \
 c01c910:	ea84 4400 	eor.w	r4, r4, r0, lsl #16
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 c01c914:	5d88      	ldrb	r0, [r1, r6]
    X2 = *RK++ ^ \
 c01c916:	9e07      	ldr	r6, [sp, #28]
    X1 = *RK++ ^ \
 c01c918:	ea84 6400 	eor.w	r4, r4, r0, lsl #24
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 c01c91c:	9809      	ldr	r0, [sp, #36]	; 0x24
    X2 = *RK++ ^ \
 c01c91e:	4075      	eors	r5, r6
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 c01c920:	5c08      	ldrb	r0, [r1, r0]
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
 c01c922:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    X2 = *RK++ ^ \
 c01c924:	ea85 2500 	eor.w	r5, r5, r0, lsl #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 c01c928:	980a      	ldr	r0, [sp, #40]	; 0x28
 c01c92a:	5c08      	ldrb	r0, [r1, r0]
    X2 = *RK++ ^ \
 c01c92c:	ea85 4500 	eor.w	r5, r5, r0, lsl #16
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 c01c930:	980b      	ldr	r0, [sp, #44]	; 0x2c
 c01c932:	5c08      	ldrb	r0, [r1, r0]
    X2 = *RK++ ^ \
 c01c934:	ea85 6500 	eor.w	r5, r5, r0, lsl #24
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 c01c938:	980d      	ldr	r0, [sp, #52]	; 0x34
 c01c93a:	5c08      	ldrb	r0, [r1, r0]
    X3 = *RK++ ^ \
 c01c93c:	4070      	eors	r0, r6
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 c01c93e:	f811 6009 	ldrb.w	r6, [r1, r9]
    X3 = *RK++ ^ \
 c01c942:	ea80 2006 	eor.w	r0, r0, r6, lsl #8
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 c01c946:	f811 600a 	ldrb.w	r6, [r1, sl]
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 c01c94a:	5dc9      	ldrb	r1, [r1, r7]
    X3 = *RK++ ^ \
 c01c94c:	ea80 4006 	eor.w	r0, r0, r6, lsl #16
 c01c950:	ea80 6101 	eor.w	r1, r0, r1, lsl #24

    PUT_UINT32_LE( X0, output,  0 );
 c01c954:	0a18      	lsrs	r0, r3, #8
 c01c956:	7050      	strb	r0, [r2, #1]
 c01c958:	0c18      	lsrs	r0, r3, #16
 c01c95a:	7090      	strb	r0, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );

    return( 0 );
}
 c01c95c:	2000      	movs	r0, #0
    PUT_UINT32_LE( X0, output,  0 );
 c01c95e:	7013      	strb	r3, [r2, #0]
 c01c960:	0e1b      	lsrs	r3, r3, #24
 c01c962:	70d3      	strb	r3, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 c01c964:	0a23      	lsrs	r3, r4, #8
 c01c966:	7153      	strb	r3, [r2, #5]
 c01c968:	0c23      	lsrs	r3, r4, #16
 c01c96a:	7193      	strb	r3, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 c01c96c:	0a2b      	lsrs	r3, r5, #8
 c01c96e:	7253      	strb	r3, [r2, #9]
 c01c970:	0c2b      	lsrs	r3, r5, #16
 c01c972:	7293      	strb	r3, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 c01c974:	0a0b      	lsrs	r3, r1, #8
    PUT_UINT32_LE( X1, output,  4 );
 c01c976:	7114      	strb	r4, [r2, #4]
    PUT_UINT32_LE( X2, output,  8 );
 c01c978:	7215      	strb	r5, [r2, #8]
    PUT_UINT32_LE( X1, output,  4 );
 c01c97a:	0e24      	lsrs	r4, r4, #24
    PUT_UINT32_LE( X2, output,  8 );
 c01c97c:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X3, output, 12 );
 c01c97e:	7311      	strb	r1, [r2, #12]
 c01c980:	7353      	strb	r3, [r2, #13]
 c01c982:	0c0b      	lsrs	r3, r1, #16
 c01c984:	0e09      	lsrs	r1, r1, #24
    PUT_UINT32_LE( X1, output,  4 );
 c01c986:	71d4      	strb	r4, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 c01c988:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 c01c98a:	7393      	strb	r3, [r2, #14]
 c01c98c:	73d1      	strb	r1, [r2, #15]
}
 c01c98e:	b00f      	add	sp, #60	; 0x3c
 c01c990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 c01c994:	9b02      	ldr	r3, [sp, #8]
 c01c996:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 c01c99a:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 c01c99e:	481e      	ldr	r0, [pc, #120]	; (c01ca18 <mbedtls_internal_aes_encrypt+0x2a4>)
 c01c9a0:	406b      	eors	r3, r5
 c01c9a2:	9d01      	ldr	r5, [sp, #4]
 c01c9a4:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 c01c9a8:	406b      	eors	r3, r5
 c01c9aa:	9d03      	ldr	r5, [sp, #12]
 c01c9ac:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 c01c9b0:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 c01c9b4:	405d      	eors	r5, r3
 c01c9b6:	9b04      	ldr	r3, [sp, #16]
 c01c9b8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 c01c9bc:	405d      	eors	r5, r3
 c01c9be:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 c01c9c2:	405c      	eors	r4, r3
 c01c9c4:	9b05      	ldr	r3, [sp, #20]
 c01c9c6:	405c      	eors	r4, r3
 c01c9c8:	f85c 302b 	ldr.w	r3, [ip, fp, lsl #2]
 c01c9cc:	405c      	eors	r4, r3
 c01c9ce:	9b06      	ldr	r3, [sp, #24]
 c01c9d0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 c01c9d4:	405c      	eors	r4, r3
 c01c9d6:	9b08      	ldr	r3, [sp, #32]
 c01c9d8:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 c01c9dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 c01c9de:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 c01c9e2:	405e      	eors	r6, r3
 c01c9e4:	9b07      	ldr	r3, [sp, #28]
 c01c9e6:	405e      	eors	r6, r3
 c01c9e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c01c9ea:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 c01c9ee:	405e      	eors	r6, r3
 c01c9f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c01c9f2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 c01c9f6:	405e      	eors	r6, r3
 c01c9f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 c01c9fa:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 c01c9fe:	407b      	eors	r3, r7
 c01ca00:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 c01ca02:	407b      	eors	r3, r7
 c01ca04:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 c01ca08:	407b      	eors	r3, r7
 c01ca0a:	f850 702a 	ldr.w	r7, [r0, sl, lsl #2]
 c01ca0e:	407b      	eors	r3, r7
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 c01ca10:	9f00      	ldr	r7, [sp, #0]
 c01ca12:	3f01      	subs	r7, #1
 c01ca14:	9700      	str	r7, [sp, #0]
 c01ca16:	e6c9      	b.n	c01c7ac <mbedtls_internal_aes_encrypt+0x38>
 c01ca18:	300366fc 	.word	0x300366fc
 c01ca1c:	30035df9 	.word	0x30035df9
 c01ca20:	30035efc 	.word	0x30035efc
 c01ca24:	30036afc 	.word	0x30036afc
 c01ca28:	300362fc 	.word	0x300362fc

0c01ca2c <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 c01ca2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 c01ca30:	6847      	ldr	r7, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 c01ca32:	680c      	ldr	r4, [r1, #0]
 c01ca34:	683b      	ldr	r3, [r7, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 c01ca36:	684e      	ldr	r6, [r1, #4]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 c01ca38:	405c      	eors	r4, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 c01ca3a:	687b      	ldr	r3, [r7, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 c01ca3c:	688d      	ldr	r5, [r1, #8]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 c01ca3e:	405e      	eors	r6, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 c01ca40:	68bb      	ldr	r3, [r7, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 c01ca42:	68c9      	ldr	r1, [r1, #12]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 c01ca44:	405d      	eors	r5, r3
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 c01ca46:	68fb      	ldr	r3, [r7, #12]
{
 c01ca48:	b08f      	sub	sp, #60	; 0x3c
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 c01ca4a:	404b      	eors	r3, r1

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 c01ca4c:	6801      	ldr	r1, [r0, #0]
 c01ca4e:	f8df 828c 	ldr.w	r8, [pc, #652]	; c01ccdc <mbedtls_internal_aes_decrypt+0x2b0>
 c01ca52:	1049      	asrs	r1, r1, #1
 c01ca54:	3901      	subs	r1, #1
 c01ca56:	f8df e288 	ldr.w	lr, [pc, #648]	; c01cce0 <mbedtls_internal_aes_decrypt+0x2b4>
 c01ca5a:	f8df c288 	ldr.w	ip, [pc, #648]	; c01cce4 <mbedtls_internal_aes_decrypt+0x2b8>
 c01ca5e:	9100      	str	r1, [sp, #0]
 c01ca60:	f107 0130 	add.w	r1, r7, #48	; 0x30
 c01ca64:	f851 0c10 	ldr.w	r0, [r1, #-16]
 c01ca68:	b2e7      	uxtb	r7, r4
 c01ca6a:	f858 7027 	ldr.w	r7, [r8, r7, lsl #2]
 c01ca6e:	9001      	str	r0, [sp, #4]
 c01ca70:	f851 0c20 	ldr.w	r0, [r1, #-32]
 c01ca74:	ea4f 6b13 	mov.w	fp, r3, lsr #24
 c01ca78:	ea87 0900 	eor.w	r9, r7, r0
 c01ca7c:	0e37      	lsrs	r7, r6, #24
 c01ca7e:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 c01ca82:	4894      	ldr	r0, [pc, #592]	; (c01ccd4 <mbedtls_internal_aes_decrypt+0x2a8>)
 c01ca84:	ea89 0907 	eor.w	r9, r9, r7
 c01ca88:	f3c3 2707 	ubfx	r7, r3, #8, #8
 c01ca8c:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 c01ca90:	f85e b02b 	ldr.w	fp, [lr, fp, lsl #2]
 c01ca94:	ea89 0907 	eor.w	r9, r9, r7
 c01ca98:	f3c5 4707 	ubfx	r7, r5, #16, #8
 c01ca9c:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
 c01caa0:	3120      	adds	r1, #32
 c01caa2:	ea89 0907 	eor.w	r9, r9, r7
 c01caa6:	fa5f f089 	uxtb.w	r0, r9
 c01caaa:	b2df      	uxtb	r7, r3
 c01caac:	f858 7027 	ldr.w	r7, [r8, r7, lsl #2]
 c01cab0:	9002      	str	r0, [sp, #8]
 c01cab2:	f851 0c34 	ldr.w	r0, [r1, #-52]
 c01cab6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 c01caba:	ea87 0a00 	eor.w	sl, r7, r0
 c01cabe:	0e27      	lsrs	r7, r4, #24
 c01cac0:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 c01cac4:	4883      	ldr	r0, [pc, #524]	; (c01ccd4 <mbedtls_internal_aes_decrypt+0x2a8>)
 c01cac6:	ea8a 0a07 	eor.w	sl, sl, r7
 c01caca:	f3c5 2707 	ubfx	r7, r5, #8, #8
 c01cace:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 c01cad2:	ea8a 0a07 	eor.w	sl, sl, r7
 c01cad6:	f3c6 4707 	ubfx	r7, r6, #16, #8
 c01cada:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
 c01cade:	ea8a 0a07 	eor.w	sl, sl, r7
 c01cae2:	f3ca 2007 	ubfx	r0, sl, #8, #8
 c01cae6:	b2ef      	uxtb	r7, r5
 c01cae8:	9003      	str	r0, [sp, #12]
 c01caea:	f858 7027 	ldr.w	r7, [r8, r7, lsl #2]
 c01caee:	f851 0c38 	ldr.w	r0, [r1, #-56]
 c01caf2:	0e2d      	lsrs	r5, r5, #24
 c01caf4:	4047      	eors	r7, r0
 c01caf6:	ea87 070b 	eor.w	r7, r7, fp
 c01cafa:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 c01cafe:	f85c b02b 	ldr.w	fp, [ip, fp, lsl #2]
 c01cb02:	4874      	ldr	r0, [pc, #464]	; (c01ccd4 <mbedtls_internal_aes_decrypt+0x2a8>)
 c01cb04:	ea87 070b 	eor.w	r7, r7, fp
 c01cb08:	f3c4 4b07 	ubfx	fp, r4, #16, #8
 c01cb0c:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 c01cb10:	b2f6      	uxtb	r6, r6
 c01cb12:	ea87 070b 	eor.w	r7, r7, fp
 c01cb16:	f3c7 4007 	ubfx	r0, r7, #16, #8
 c01cb1a:	9004      	str	r0, [sp, #16]
 c01cb1c:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 c01cb20:	f851 0c3c 	ldr.w	r0, [r1, #-60]
 c01cb24:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 c01cb28:	4046      	eors	r6, r0
 c01cb2a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 c01cb2e:	4869      	ldr	r0, [pc, #420]	; (c01ccd4 <mbedtls_internal_aes_decrypt+0x2a8>)
 c01cb30:	406e      	eors	r6, r5
 c01cb32:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 c01cb36:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 c01cb3a:	f851 0c28 	ldr.w	r0, [r1, #-40]
 c01cb3e:	406e      	eors	r6, r5
 c01cb40:	405e      	eors	r6, r3
 c01cb42:	9007      	str	r0, [sp, #28]
 c01cb44:	f851 3c2c 	ldr.w	r3, [r1, #-44]
 c01cb48:	b2f8      	uxtb	r0, r7
 c01cb4a:	9008      	str	r0, [sp, #32]
 c01cb4c:	f3c6 2007 	ubfx	r0, r6, #8, #8
 c01cb50:	9305      	str	r3, [sp, #20]
 c01cb52:	9009      	str	r0, [sp, #36]	; 0x24
 c01cb54:	f3ca 4307 	ubfx	r3, sl, #16, #8
 c01cb58:	f3c9 4007 	ubfx	r0, r9, #16, #8
 c01cb5c:	9306      	str	r3, [sp, #24]
 c01cb5e:	900a      	str	r0, [sp, #40]	; 0x28
 c01cb60:	ea4f 601a 	mov.w	r0, sl, lsr #24
 c01cb64:	900b      	str	r0, [sp, #44]	; 0x2c
 c01cb66:	f851 0c24 	ldr.w	r0, [r1, #-36]
 c01cb6a:	f3c9 2b07 	ubfx	fp, r9, #8, #8
 c01cb6e:	900c      	str	r0, [sp, #48]	; 0x30
 c01cb70:	f3c6 4007 	ubfx	r0, r6, #16, #8
 c01cb74:	900d      	str	r0, [sp, #52]	; 0x34
 c01cb76:	9800      	ldr	r0, [sp, #0]
 c01cb78:	0e3b      	lsrs	r3, r7, #24
 c01cb7a:	2800      	cmp	r0, #0
 c01cb7c:	ea4f 6416 	mov.w	r4, r6, lsr #24
 c01cb80:	b2f5      	uxtb	r5, r6
 c01cb82:	fa5f fa8a 	uxtb.w	sl, sl
 c01cb86:	f3c7 2707 	ubfx	r7, r7, #8, #8
 c01cb8a:	ea4f 6919 	mov.w	r9, r9, lsr #24
 c01cb8e:	dc5d      	bgt.n	c01cc4c <mbedtls_internal_aes_decrypt+0x220>

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 c01cb90:	4951      	ldr	r1, [pc, #324]	; (c01ccd8 <mbedtls_internal_aes_decrypt+0x2ac>)
 c01cb92:	9803      	ldr	r0, [sp, #12]
    X0 = *RK++ ^ \
 c01cb94:	9e01      	ldr	r6, [sp, #4]
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 c01cb96:	f811 c000 	ldrb.w	ip, [r1, r0]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 c01cb9a:	9802      	ldr	r0, [sp, #8]
 c01cb9c:	5c08      	ldrb	r0, [r1, r0]
    X0 = *RK++ ^ \
 c01cb9e:	4070      	eors	r0, r6
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 c01cba0:	9e04      	ldr	r6, [sp, #16]
    X0 = *RK++ ^ \
 c01cba2:	ea80 200c 	eor.w	r0, r0, ip, lsl #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 c01cba6:	5d8e      	ldrb	r6, [r1, r6]
    X0 = *RK++ ^ \
 c01cba8:	ea80 4006 	eor.w	r0, r0, r6, lsl #16
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 c01cbac:	5d0e      	ldrb	r6, [r1, r4]

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 c01cbae:	f811 400b 	ldrb.w	r4, [r1, fp]
    X0 = *RK++ ^ \
 c01cbb2:	ea80 6006 	eor.w	r0, r0, r6, lsl #24
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 c01cbb6:	5d4e      	ldrb	r6, [r1, r5]
    X1 = *RK++ ^ \
 c01cbb8:	9d05      	ldr	r5, [sp, #20]
 c01cbba:	406e      	eors	r6, r5
 c01cbbc:	ea86 2604 	eor.w	r6, r6, r4, lsl #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 c01cbc0:	9c06      	ldr	r4, [sp, #24]
 c01cbc2:	5d0c      	ldrb	r4, [r1, r4]
    X1 = *RK++ ^ \
 c01cbc4:	ea86 4604 	eor.w	r6, r6, r4, lsl #16
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 c01cbc8:	5ccc      	ldrb	r4, [r1, r3]

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 c01cbca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    X1 = *RK++ ^ \
 c01cbcc:	ea86 6404 	eor.w	r4, r6, r4, lsl #24
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 c01cbd0:	5cce      	ldrb	r6, [r1, r3]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 c01cbd2:	9b08      	ldr	r3, [sp, #32]
 c01cbd4:	5ccd      	ldrb	r5, [r1, r3]
    X2 = *RK++ ^ \
 c01cbd6:	9b07      	ldr	r3, [sp, #28]
 c01cbd8:	405d      	eors	r5, r3
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 c01cbda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    X2 = *RK++ ^ \
 c01cbdc:	ea85 2506 	eor.w	r5, r5, r6, lsl #8
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 c01cbe0:	5ccb      	ldrb	r3, [r1, r3]
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
 c01cbe2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    X2 = *RK++ ^ \
 c01cbe4:	ea85 4503 	eor.w	r5, r5, r3, lsl #16
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 c01cbe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 c01cbea:	5ccb      	ldrb	r3, [r1, r3]
    X2 = *RK++ ^ \
 c01cbec:	ea85 6503 	eor.w	r5, r5, r3, lsl #24
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 c01cbf0:	f811 300a 	ldrb.w	r3, [r1, sl]
    X3 = *RK++ ^ \
 c01cbf4:	4073      	eors	r3, r6
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 c01cbf6:	5dce      	ldrb	r6, [r1, r7]
    X3 = *RK++ ^ \
 c01cbf8:	ea83 2306 	eor.w	r3, r3, r6, lsl #8
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 c01cbfc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 c01cbfe:	5d8e      	ldrb	r6, [r1, r6]
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 c01cc00:	f811 1009 	ldrb.w	r1, [r1, r9]
    X3 = *RK++ ^ \
 c01cc04:	ea83 4306 	eor.w	r3, r3, r6, lsl #16
 c01cc08:	ea83 6301 	eor.w	r3, r3, r1, lsl #24

    PUT_UINT32_LE( X0, output,  0 );
 c01cc0c:	0a01      	lsrs	r1, r0, #8
 c01cc0e:	7010      	strb	r0, [r2, #0]
 c01cc10:	7051      	strb	r1, [r2, #1]
 c01cc12:	0c01      	lsrs	r1, r0, #16
 c01cc14:	0e00      	lsrs	r0, r0, #24
 c01cc16:	7091      	strb	r1, [r2, #2]
 c01cc18:	70d0      	strb	r0, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );

    return( 0 );
}
 c01cc1a:	2000      	movs	r0, #0
    PUT_UINT32_LE( X1, output,  4 );
 c01cc1c:	0a21      	lsrs	r1, r4, #8
 c01cc1e:	7151      	strb	r1, [r2, #5]
 c01cc20:	0c21      	lsrs	r1, r4, #16
 c01cc22:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 c01cc24:	0a29      	lsrs	r1, r5, #8
 c01cc26:	7251      	strb	r1, [r2, #9]
 c01cc28:	0c29      	lsrs	r1, r5, #16
 c01cc2a:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 c01cc2c:	0a19      	lsrs	r1, r3, #8
    PUT_UINT32_LE( X1, output,  4 );
 c01cc2e:	7114      	strb	r4, [r2, #4]
    PUT_UINT32_LE( X2, output,  8 );
 c01cc30:	7215      	strb	r5, [r2, #8]
    PUT_UINT32_LE( X1, output,  4 );
 c01cc32:	0e24      	lsrs	r4, r4, #24
    PUT_UINT32_LE( X2, output,  8 );
 c01cc34:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X3, output, 12 );
 c01cc36:	7313      	strb	r3, [r2, #12]
 c01cc38:	7351      	strb	r1, [r2, #13]
 c01cc3a:	0c19      	lsrs	r1, r3, #16
 c01cc3c:	0e1b      	lsrs	r3, r3, #24
    PUT_UINT32_LE( X1, output,  4 );
 c01cc3e:	71d4      	strb	r4, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 c01cc40:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 c01cc42:	7391      	strb	r1, [r2, #14]
 c01cc44:	73d3      	strb	r3, [r2, #15]
}
 c01cc46:	b00f      	add	sp, #60	; 0x3c
 c01cc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 c01cc4c:	9e02      	ldr	r6, [sp, #8]
 c01cc4e:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 c01cc52:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 c01cc56:	481f      	ldr	r0, [pc, #124]	; (c01ccd4 <mbedtls_internal_aes_decrypt+0x2a8>)
 c01cc58:	4074      	eors	r4, r6
 c01cc5a:	9e01      	ldr	r6, [sp, #4]
 c01cc5c:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 c01cc60:	4074      	eors	r4, r6
 c01cc62:	9e03      	ldr	r6, [sp, #12]
 c01cc64:	f85e 9029 	ldr.w	r9, [lr, r9, lsl #2]
 c01cc68:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 c01cc6c:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 c01cc70:	4074      	eors	r4, r6
 c01cc72:	9e04      	ldr	r6, [sp, #16]
 c01cc74:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
 c01cc78:	4074      	eors	r4, r6
 c01cc7a:	f858 6025 	ldr.w	r6, [r8, r5, lsl #2]
 c01cc7e:	405e      	eors	r6, r3
 c01cc80:	9b05      	ldr	r3, [sp, #20]
 c01cc82:	405e      	eors	r6, r3
 c01cc84:	f85c 302b 	ldr.w	r3, [ip, fp, lsl #2]
 c01cc88:	405e      	eors	r6, r3
 c01cc8a:	9b06      	ldr	r3, [sp, #24]
 c01cc8c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 c01cc90:	405e      	eors	r6, r3
 c01cc92:	9b08      	ldr	r3, [sp, #32]
 c01cc94:	f858 5023 	ldr.w	r5, [r8, r3, lsl #2]
 c01cc98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 c01cc9a:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 c01cc9e:	405d      	eors	r5, r3
 c01cca0:	9b07      	ldr	r3, [sp, #28]
 c01cca2:	405d      	eors	r5, r3
 c01cca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c01cca6:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 c01ccaa:	405d      	eors	r5, r3
 c01ccac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c01ccae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 c01ccb2:	980c      	ldr	r0, [sp, #48]	; 0x30
 c01ccb4:	405d      	eors	r5, r3
 c01ccb6:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
 c01ccba:	ea83 0309 	eor.w	r3, r3, r9
 c01ccbe:	4043      	eors	r3, r0
 c01ccc0:	407b      	eors	r3, r7
 c01ccc2:	980d      	ldr	r0, [sp, #52]	; 0x34
 c01ccc4:	4f03      	ldr	r7, [pc, #12]	; (c01ccd4 <mbedtls_internal_aes_decrypt+0x2a8>)
 c01ccc6:	f857 7020 	ldr.w	r7, [r7, r0, lsl #2]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 c01ccca:	9800      	ldr	r0, [sp, #0]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 c01cccc:	407b      	eors	r3, r7
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 c01ccce:	3801      	subs	r0, #1
 c01ccd0:	9000      	str	r0, [sp, #0]
 c01ccd2:	e6c7      	b.n	c01ca64 <mbedtls_internal_aes_decrypt+0x38>
 c01ccd4:	30037824 	.word	0x30037824
 c01ccd8:	30036f24 	.word	0x30036f24
 c01ccdc:	30037024 	.word	0x30037024
 c01cce0:	30037c24 	.word	0x30037c24
 c01cce4:	30037424 	.word	0x30037424

0c01cce8 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
 c01cce8:	b410      	push	{r4}
 c01ccea:	4614      	mov	r4, r2
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 c01ccec:	2901      	cmp	r1, #1
{
 c01ccee:	461a      	mov	r2, r3
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 c01ccf0:	4621      	mov	r1, r4
    if( mode == MBEDTLS_AES_ENCRYPT )
 c01ccf2:	d103      	bne.n	c01ccfc <mbedtls_aes_crypt_ecb+0x14>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
 c01ccf4:	f85d 4b04 	ldr.w	r4, [sp], #4
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 c01ccf8:	f7ff bd3c 	b.w	c01c774 <mbedtls_internal_aes_encrypt>
}
 c01ccfc:	f85d 4b04 	ldr.w	r4, [sp], #4
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 c01cd00:	f7ff be94 	b.w	c01ca2c <mbedtls_internal_aes_decrypt>

0c01cd04 <mbedtls_aes_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 c01cd04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 c01cd08:	461f      	mov	r7, r3
 c01cd0a:	e9dd 540c 	ldrd	r5, r4, [sp, #48]	; 0x30
                      mode == MBEDTLS_AES_DECRYPT );
    AES_VALIDATE_RET( iv != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    if( length % 16 )
 c01cd0e:	0713      	lsls	r3, r2, #28
{
 c01cd10:	4680      	mov	r8, r0
 c01cd12:	4689      	mov	r9, r1
    if( length % 16 )
 c01cd14:	d15b      	bne.n	c01cdce <mbedtls_aes_crypt_cbc+0xca>
 c01cd16:	18a6      	adds	r6, r4, r2
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
 c01cd18:	2900      	cmp	r1, #0
 c01cd1a:	d055      	beq.n	c01cdc8 <mbedtls_aes_crypt_cbc+0xc4>
 c01cd1c:	3d01      	subs	r5, #1
            length -= 16;
        }
    }
    else
    {
        while( length > 0 )
 c01cd1e:	42a6      	cmp	r6, r4
 c01cd20:	d04e      	beq.n	c01cdc0 <mbedtls_aes_crypt_cbc+0xbc>
 c01cd22:	1e79      	subs	r1, r7, #1
 c01cd24:	1e62      	subs	r2, r4, #1
 c01cd26:	f105 0010 	add.w	r0, r5, #16
        {
            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 c01cd2a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 c01cd2e:	f811 cf01 	ldrb.w	ip, [r1, #1]!
            for( i = 0; i < 16; i++ )
 c01cd32:	4285      	cmp	r5, r0
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 c01cd34:	ea83 030c 	eor.w	r3, r3, ip
 c01cd38:	f802 3f01 	strb.w	r3, [r2, #1]!
            for( i = 0; i < 16; i++ )
 c01cd3c:	d1f5      	bne.n	c01cd2a <mbedtls_aes_crypt_cbc+0x26>

            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 c01cd3e:	4623      	mov	r3, r4
 c01cd40:	4622      	mov	r2, r4
 c01cd42:	4649      	mov	r1, r9
 c01cd44:	4640      	mov	r0, r8
 c01cd46:	f7ff ffcf 	bl	c01cce8 <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 c01cd4a:	463b      	mov	r3, r7
 c01cd4c:	f104 0210 	add.w	r2, r4, #16
 c01cd50:	f854 1b04 	ldr.w	r1, [r4], #4
 c01cd54:	4294      	cmp	r4, r2
 c01cd56:	f843 1b04 	str.w	r1, [r3], #4
 c01cd5a:	d1f9      	bne.n	c01cd50 <mbedtls_aes_crypt_cbc+0x4c>
 c01cd5c:	e7df      	b.n	c01cd1e <mbedtls_aes_crypt_cbc+0x1a>
            memcpy( temp, input, 16 );
 c01cd5e:	466a      	mov	r2, sp
 c01cd60:	462b      	mov	r3, r5
 c01cd62:	4691      	mov	r9, r2
 c01cd64:	f105 0e10 	add.w	lr, r5, #16
 c01cd68:	4694      	mov	ip, r2
 c01cd6a:	6818      	ldr	r0, [r3, #0]
 c01cd6c:	6859      	ldr	r1, [r3, #4]
 c01cd6e:	3308      	adds	r3, #8
 c01cd70:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 c01cd74:	4573      	cmp	r3, lr
 c01cd76:	4662      	mov	r2, ip
 c01cd78:	d1f6      	bne.n	c01cd68 <mbedtls_aes_crypt_cbc+0x64>
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 c01cd7a:	4629      	mov	r1, r5
 c01cd7c:	4622      	mov	r2, r4
 c01cd7e:	4640      	mov	r0, r8
 c01cd80:	f7ff fe54 	bl	c01ca2c <mbedtls_internal_aes_decrypt>
 c01cd84:	1e63      	subs	r3, r4, #1
 c01cd86:	1e79      	subs	r1, r7, #1
 c01cd88:	f104 000f 	add.w	r0, r4, #15
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 c01cd8c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 c01cd90:	f811 cf01 	ldrb.w	ip, [r1, #1]!
            for( i = 0; i < 16; i++ )
 c01cd94:	4283      	cmp	r3, r0
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 c01cd96:	ea82 020c 	eor.w	r2, r2, ip
 c01cd9a:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 c01cd9c:	d1f6      	bne.n	c01cd8c <mbedtls_aes_crypt_cbc+0x88>
            memcpy( iv, temp, 16 );
 c01cd9e:	464a      	mov	r2, r9
 c01cda0:	46bc      	mov	ip, r7
 c01cda2:	4613      	mov	r3, r2
 c01cda4:	cb03      	ldmia	r3!, {r0, r1}
 c01cda6:	4553      	cmp	r3, sl
 c01cda8:	f8cc 0000 	str.w	r0, [ip]
 c01cdac:	f8cc 1004 	str.w	r1, [ip, #4]
 c01cdb0:	461a      	mov	r2, r3
 c01cdb2:	f10c 0c08 	add.w	ip, ip, #8
 c01cdb6:	d1f4      	bne.n	c01cda2 <mbedtls_aes_crypt_cbc+0x9e>
            input  += 16;
 c01cdb8:	3510      	adds	r5, #16
            output += 16;
 c01cdba:	3410      	adds	r4, #16
        while( length > 0 )
 c01cdbc:	42a6      	cmp	r6, r4
 c01cdbe:	d1ce      	bne.n	c01cd5e <mbedtls_aes_crypt_cbc+0x5a>
            output += 16;
            length -= 16;
        }
    }

    return( 0 );
 c01cdc0:	2000      	movs	r0, #0
}
 c01cdc2:	b004      	add	sp, #16
 c01cdc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            memcpy( iv, temp, 16 );
 c01cdc8:	f10d 0a10 	add.w	sl, sp, #16
 c01cdcc:	e7f6      	b.n	c01cdbc <mbedtls_aes_crypt_cbc+0xb8>
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 c01cdce:	f06f 0021 	mvn.w	r0, #33	; 0x21
 c01cdd2:	e7f6      	b.n	c01cdc2 <mbedtls_aes_crypt_cbc+0xbe>

0c01cdd4 <mbedtls_aes_crypt_cfb128>:
                       size_t length,
                       size_t *iv_off,
                       unsigned char iv[16],
                       const unsigned char *input,
                       unsigned char *output )
{
 c01cdd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    AES_VALIDATE_RET( iv_off != NULL );
    AES_VALIDATE_RET( iv != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    n = *iv_off;
 c01cdd8:	681c      	ldr	r4, [r3, #0]
{
 c01cdda:	4682      	mov	sl, r0
 c01cddc:	e9dd 5808 	ldrd	r5, r8, [sp, #32]

    if( n > 15 )
 c01cde0:	2c0f      	cmp	r4, #15
{
 c01cde2:	4699      	mov	r9, r3
 c01cde4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    if( n > 15 )
 c01cde6:	d82b      	bhi.n	c01ce40 <mbedtls_aes_crypt_cfb128+0x6c>
 c01cde8:	18b7      	adds	r7, r6, r2
        return( MBEDTLS_ERR_AES_BAD_INPUT_DATA );

    if( mode == MBEDTLS_AES_DECRYPT )
 c01cdea:	b311      	cbz	r1, c01ce32 <mbedtls_aes_crypt_cfb128+0x5e>
            n = ( n + 1 ) & 0x0F;
        }
    }
    else
    {
        while( length-- )
 c01cdec:	42be      	cmp	r6, r7
 c01cdee:	d022      	beq.n	c01ce36 <mbedtls_aes_crypt_cfb128+0x62>
        {
            if( n == 0 )
 c01cdf0:	b924      	cbnz	r4, c01cdfc <mbedtls_aes_crypt_cfb128+0x28>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 c01cdf2:	462a      	mov	r2, r5
 c01cdf4:	4629      	mov	r1, r5
 c01cdf6:	4650      	mov	r0, sl
 c01cdf8:	f7ff fcbc 	bl	c01c774 <mbedtls_internal_aes_encrypt>
                mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, iv, iv );

            iv[n] = *output++ = (unsigned char)( iv[n] ^ *input++ );
 c01cdfc:	5d2b      	ldrb	r3, [r5, r4]
 c01cdfe:	f818 2b01 	ldrb.w	r2, [r8], #1
 c01ce02:	4053      	eors	r3, r2
 c01ce04:	f806 3b01 	strb.w	r3, [r6], #1
 c01ce08:	552b      	strb	r3, [r5, r4]

            n = ( n + 1 ) & 0x0F;
 c01ce0a:	3401      	adds	r4, #1
 c01ce0c:	f004 040f 	and.w	r4, r4, #15
 c01ce10:	e7ec      	b.n	c01cdec <mbedtls_aes_crypt_cfb128+0x18>
            if( n == 0 )
 c01ce12:	b924      	cbnz	r4, c01ce1e <mbedtls_aes_crypt_cfb128+0x4a>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 c01ce14:	462a      	mov	r2, r5
 c01ce16:	4629      	mov	r1, r5
 c01ce18:	4650      	mov	r0, sl
 c01ce1a:	f7ff fcab 	bl	c01c774 <mbedtls_internal_aes_encrypt>
            *output++ = (unsigned char)( c ^ iv[n] );
 c01ce1e:	5d2b      	ldrb	r3, [r5, r4]
            c = *input++;
 c01ce20:	f818 2b01 	ldrb.w	r2, [r8], #1
            *output++ = (unsigned char)( c ^ iv[n] );
 c01ce24:	4053      	eors	r3, r2
 c01ce26:	f806 3b01 	strb.w	r3, [r6], #1
            iv[n] = (unsigned char) c;
 c01ce2a:	552a      	strb	r2, [r5, r4]
            n = ( n + 1 ) & 0x0F;
 c01ce2c:	3401      	adds	r4, #1
 c01ce2e:	f004 040f 	and.w	r4, r4, #15
        while( length-- )
 c01ce32:	42be      	cmp	r6, r7
 c01ce34:	d1ed      	bne.n	c01ce12 <mbedtls_aes_crypt_cfb128+0x3e>
        }
    }

    *iv_off = n;

    return( 0 );
 c01ce36:	2000      	movs	r0, #0
    *iv_off = n;
 c01ce38:	f8c9 4000 	str.w	r4, [r9]
}
 c01ce3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return( MBEDTLS_ERR_AES_BAD_INPUT_DATA );
 c01ce40:	f06f 0020 	mvn.w	r0, #32
 c01ce44:	e7fa      	b.n	c01ce3c <mbedtls_aes_crypt_cfb128+0x68>

0c01ce46 <mbedtls_aes_crypt_ofb>:
                           size_t length,
                           size_t *iv_off,
                           unsigned char iv[16],
                           const unsigned char *input,
                           unsigned char *output )
{
 c01ce46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    AES_VALIDATE_RET( iv_off != NULL );
    AES_VALIDATE_RET( iv != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    n = *iv_off;
 c01ce4a:	6814      	ldr	r4, [r2, #0]
{
 c01ce4c:	4682      	mov	sl, r0
 c01ce4e:	e9dd 9508 	ldrd	r9, r5, [sp, #32]

    if( n > 15 )
 c01ce52:	2c0f      	cmp	r4, #15
{
 c01ce54:	4690      	mov	r8, r2
 c01ce56:	461f      	mov	r7, r3
    if( n > 15 )
 c01ce58:	d81a      	bhi.n	c01ce90 <mbedtls_aes_crypt_ofb+0x4a>
 c01ce5a:	186e      	adds	r6, r5, r1
        return( MBEDTLS_ERR_AES_BAD_INPUT_DATA );

    while( length-- )
 c01ce5c:	42b5      	cmp	r5, r6
 c01ce5e:	d103      	bne.n	c01ce68 <mbedtls_aes_crypt_ofb+0x22>
        *output++ =  *input++ ^ iv[n];

        n = ( n + 1 ) & 0x0F;
    }

    *iv_off = n;
 c01ce60:	f8c8 4000 	str.w	r4, [r8]
 c01ce64:	2000      	movs	r0, #0
 c01ce66:	e011      	b.n	c01ce8c <mbedtls_aes_crypt_ofb+0x46>
        if( n == 0 )
 c01ce68:	b14c      	cbz	r4, c01ce7e <mbedtls_aes_crypt_ofb+0x38>
        *output++ =  *input++ ^ iv[n];
 c01ce6a:	5d3b      	ldrb	r3, [r7, r4]
 c01ce6c:	f819 2b01 	ldrb.w	r2, [r9], #1
        n = ( n + 1 ) & 0x0F;
 c01ce70:	3401      	adds	r4, #1
        *output++ =  *input++ ^ iv[n];
 c01ce72:	4053      	eors	r3, r2
 c01ce74:	f805 3b01 	strb.w	r3, [r5], #1
        n = ( n + 1 ) & 0x0F;
 c01ce78:	f004 040f 	and.w	r4, r4, #15
 c01ce7c:	e7ee      	b.n	c01ce5c <mbedtls_aes_crypt_ofb+0x16>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 c01ce7e:	463a      	mov	r2, r7
 c01ce80:	4639      	mov	r1, r7
 c01ce82:	4650      	mov	r0, sl
 c01ce84:	f7ff fc76 	bl	c01c774 <mbedtls_internal_aes_encrypt>
            if( ret != 0 )
 c01ce88:	2800      	cmp	r0, #0
 c01ce8a:	d0ee      	beq.n	c01ce6a <mbedtls_aes_crypt_ofb+0x24>

exit:
    return( ret );
}
 c01ce8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return( MBEDTLS_ERR_AES_BAD_INPUT_DATA );
 c01ce90:	f06f 0020 	mvn.w	r0, #32
 c01ce94:	e7fa      	b.n	c01ce8c <mbedtls_aes_crypt_ofb+0x46>

0c01ce96 <mbedtls_aes_crypt_ctr>:
                       size_t *nc_off,
                       unsigned char nonce_counter[16],
                       unsigned char stream_block[16],
                       const unsigned char *input,
                       unsigned char *output )
{
 c01ce96:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    AES_VALIDATE_RET( nonce_counter != NULL );
    AES_VALIDATE_RET( stream_block != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    n = *nc_off;
 c01ce9a:	6814      	ldr	r4, [r2, #0]
{
 c01ce9c:	4682      	mov	sl, r0
 c01ce9e:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28

    if ( n > 0x0F )
 c01cea2:	2c0f      	cmp	r4, #15
{
 c01cea4:	4617      	mov	r7, r2
 c01cea6:	469b      	mov	fp, r3
 c01cea8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    if ( n > 0x0F )
 c01ceaa:	d821      	bhi.n	c01cef0 <mbedtls_aes_crypt_ctr+0x5a>
 c01ceac:	186e      	adds	r6, r5, r1
        return( MBEDTLS_ERR_AES_BAD_INPUT_DATA );

    while( length-- )
 c01ceae:	42b5      	cmp	r5, r6
 c01ceb0:	d103      	bne.n	c01ceba <mbedtls_aes_crypt_ctr+0x24>
        n = ( n + 1 ) & 0x0F;
    }

    *nc_off = n;

    return( 0 );
 c01ceb2:	2000      	movs	r0, #0
    *nc_off = n;
 c01ceb4:	603c      	str	r4, [r7, #0]
}
 c01ceb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( n == 0 ) {
 c01ceba:	b974      	cbnz	r4, c01ceda <mbedtls_aes_crypt_ctr+0x44>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 c01cebc:	4642      	mov	r2, r8
 c01cebe:	4659      	mov	r1, fp
 c01cec0:	4650      	mov	r0, sl
 c01cec2:	f7ff fc57 	bl	c01c774 <mbedtls_internal_aes_encrypt>
 c01cec6:	f10b 0310 	add.w	r3, fp, #16
                if( ++nonce_counter[i - 1] != 0 )
 c01ceca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 c01cece:	3201      	adds	r2, #1
 c01ced0:	b2d2      	uxtb	r2, r2
 c01ced2:	701a      	strb	r2, [r3, #0]
 c01ced4:	b90a      	cbnz	r2, c01ceda <mbedtls_aes_crypt_ctr+0x44>
            for( i = 16; i > 0; i-- )
 c01ced6:	459b      	cmp	fp, r3
 c01ced8:	d1f7      	bne.n	c01ceca <mbedtls_aes_crypt_ctr+0x34>
        *output++ = (unsigned char)( c ^ stream_block[n] );
 c01ceda:	f818 3004 	ldrb.w	r3, [r8, r4]
 c01cede:	f819 2b01 	ldrb.w	r2, [r9], #1
        n = ( n + 1 ) & 0x0F;
 c01cee2:	3401      	adds	r4, #1
        *output++ = (unsigned char)( c ^ stream_block[n] );
 c01cee4:	4053      	eors	r3, r2
 c01cee6:	f805 3b01 	strb.w	r3, [r5], #1
        n = ( n + 1 ) & 0x0F;
 c01ceea:	f004 040f 	and.w	r4, r4, #15
 c01ceee:	e7de      	b.n	c01ceae <mbedtls_aes_crypt_ctr+0x18>
        return( MBEDTLS_ERR_AES_BAD_INPUT_DATA );
 c01cef0:	f06f 0020 	mvn.w	r0, #32
 c01cef4:	e7df      	b.n	c01ceb6 <mbedtls_aes_crypt_ctr+0x20>

0c01cef6 <mbedtls_asn1_get_len>:
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    if( ( end - *p ) < 1 )
 c01cef6:	6803      	ldr	r3, [r0, #0]
{
 c01cef8:	b530      	push	{r4, r5, lr}
    if( ( end - *p ) < 1 )
 c01cefa:	1acd      	subs	r5, r1, r3
 c01cefc:	2d00      	cmp	r5, #0
 c01cefe:	dc02      	bgt.n	c01cf06 <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 c01cf00:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
 c01cf04:	bd30      	pop	{r4, r5, pc}
    if( ( **p & 0x80 ) == 0 )
 c01cf06:	781c      	ldrb	r4, [r3, #0]
 c01cf08:	f014 0f80 	tst.w	r4, #128	; 0x80
 c01cf0c:	d10a      	bne.n	c01cf24 <mbedtls_asn1_get_len+0x2e>
        *len = *(*p)++;
 c01cf0e:	1c5c      	adds	r4, r3, #1
 c01cf10:	6004      	str	r4, [r0, #0]
 c01cf12:	781b      	ldrb	r3, [r3, #0]
 c01cf14:	6013      	str	r3, [r2, #0]
    if( *len > (size_t) ( end - *p ) )
 c01cf16:	6803      	ldr	r3, [r0, #0]
 c01cf18:	1ac9      	subs	r1, r1, r3
 c01cf1a:	6813      	ldr	r3, [r2, #0]
 c01cf1c:	428b      	cmp	r3, r1
 c01cf1e:	d8ef      	bhi.n	c01cf00 <mbedtls_asn1_get_len+0xa>
    return( 0 );
 c01cf20:	2000      	movs	r0, #0
 c01cf22:	e7ef      	b.n	c01cf04 <mbedtls_asn1_get_len+0xe>
        switch( **p & 0x7F )
 c01cf24:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 c01cf28:	3c01      	subs	r4, #1
 c01cf2a:	2c03      	cmp	r4, #3
 c01cf2c:	d827      	bhi.n	c01cf7e <mbedtls_asn1_get_len+0x88>
 c01cf2e:	e8df f004 	tbb	[pc, r4]
 c01cf32:	0902      	.short	0x0902
 c01cf34:	1e12      	.short	0x1e12
            if( ( end - *p ) < 2 )
 c01cf36:	2d01      	cmp	r5, #1
 c01cf38:	d0e2      	beq.n	c01cf00 <mbedtls_asn1_get_len+0xa>
            *len = (*p)[1];
 c01cf3a:	785c      	ldrb	r4, [r3, #1]
            (*p) += 2;
 c01cf3c:	3302      	adds	r3, #2
            *len = (*p)[1];
 c01cf3e:	6014      	str	r4, [r2, #0]
            (*p) += 5;
 c01cf40:	6003      	str	r3, [r0, #0]
            break;
 c01cf42:	e7e8      	b.n	c01cf16 <mbedtls_asn1_get_len+0x20>
            if( ( end - *p ) < 3 )
 c01cf44:	2d02      	cmp	r5, #2
 c01cf46:	dddb      	ble.n	c01cf00 <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 c01cf48:	f8b3 4001 	ldrh.w	r4, [r3, #1]
            (*p) += 3;
 c01cf4c:	3303      	adds	r3, #3
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 c01cf4e:	ba64      	rev16	r4, r4
 c01cf50:	b2a4      	uxth	r4, r4
 c01cf52:	6014      	str	r4, [r2, #0]
 c01cf54:	e7f4      	b.n	c01cf40 <mbedtls_asn1_get_len+0x4a>
            if( ( end - *p ) < 4 )
 c01cf56:	2d03      	cmp	r5, #3
 c01cf58:	ddd2      	ble.n	c01cf00 <mbedtls_asn1_get_len+0xa>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 c01cf5a:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
 c01cf5c:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 c01cf5e:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
 c01cf60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 c01cf64:	78dd      	ldrb	r5, [r3, #3]
            (*p) += 4;
 c01cf66:	3304      	adds	r3, #4
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 c01cf68:	432c      	orrs	r4, r5
            *len = ( (size_t)(*p)[1] << 16 ) |
 c01cf6a:	6014      	str	r4, [r2, #0]
 c01cf6c:	e7e8      	b.n	c01cf40 <mbedtls_asn1_get_len+0x4a>
            if( ( end - *p ) < 5 )
 c01cf6e:	2d04      	cmp	r5, #4
 c01cf70:	ddc6      	ble.n	c01cf00 <mbedtls_asn1_get_len+0xa>
 c01cf72:	f8d3 4001 	ldr.w	r4, [r3, #1]
            (*p) += 5;
 c01cf76:	3305      	adds	r3, #5
 c01cf78:	ba24      	rev	r4, r4
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 c01cf7a:	6014      	str	r4, [r2, #0]
 c01cf7c:	e7e0      	b.n	c01cf40 <mbedtls_asn1_get_len+0x4a>
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 c01cf7e:	f06f 0063 	mvn.w	r0, #99	; 0x63
 c01cf82:	e7bf      	b.n	c01cf04 <mbedtls_asn1_get_len+0xe>

0c01cf84 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
 c01cf84:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
 c01cf86:	6804      	ldr	r4, [r0, #0]
 c01cf88:	1b0e      	subs	r6, r1, r4
 c01cf8a:	2e00      	cmp	r6, #0
 c01cf8c:	dd07      	ble.n	c01cf9e <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
 c01cf8e:	7826      	ldrb	r6, [r4, #0]
 c01cf90:	429e      	cmp	r6, r3
 c01cf92:	d108      	bne.n	c01cfa6 <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 c01cf94:	3401      	adds	r4, #1
 c01cf96:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
 c01cf98:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
 c01cf9a:	f7ff bfac 	b.w	c01cef6 <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 c01cf9e:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
 c01cfa2:	bc70      	pop	{r4, r5, r6}
 c01cfa4:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 c01cfa6:	f06f 0061 	mvn.w	r0, #97	; 0x61
 c01cfaa:	e7fa      	b.n	c01cfa2 <mbedtls_asn1_get_tag+0x1e>

0c01cfac <mbedtls_asn1_get_int>:
}

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 c01cfac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 c01cfae:	2302      	movs	r3, #2
{
 c01cfb0:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 c01cfb2:	aa01      	add	r2, sp, #4
{
 c01cfb4:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 c01cfb6:	f7ff ffe5 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c01cfba:	b968      	cbnz	r0, c01cfd8 <mbedtls_asn1_get_int+0x2c>
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
 c01cfbc:	9b01      	ldr	r3, [sp, #4]
 c01cfbe:	3b01      	subs	r3, #1
 c01cfc0:	2b03      	cmp	r3, #3
 c01cfc2:	d814      	bhi.n	c01cfee <mbedtls_asn1_get_int+0x42>
 c01cfc4:	6823      	ldr	r3, [r4, #0]
 c01cfc6:	f993 3000 	ldrsb.w	r3, [r3]
 c01cfca:	2b00      	cmp	r3, #0
 c01cfcc:	db0f      	blt.n	c01cfee <mbedtls_asn1_get_int+0x42>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;
 c01cfce:	6028      	str	r0, [r5, #0]

    while( len-- > 0 )
 c01cfd0:	9b01      	ldr	r3, [sp, #4]
 c01cfd2:	1e5a      	subs	r2, r3, #1
 c01cfd4:	9201      	str	r2, [sp, #4]
 c01cfd6:	b90b      	cbnz	r3, c01cfdc <mbedtls_asn1_get_int+0x30>
        *val = ( *val << 8 ) | **p;
        (*p)++;
    }

    return( 0 );
}
 c01cfd8:	b003      	add	sp, #12
 c01cfda:	bd30      	pop	{r4, r5, pc}
        *val = ( *val << 8 ) | **p;
 c01cfdc:	6823      	ldr	r3, [r4, #0]
 c01cfde:	6829      	ldr	r1, [r5, #0]
 c01cfe0:	f813 2b01 	ldrb.w	r2, [r3], #1
 c01cfe4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 c01cfe8:	602a      	str	r2, [r5, #0]
        (*p)++;
 c01cfea:	6023      	str	r3, [r4, #0]
 c01cfec:	e7f0      	b.n	c01cfd0 <mbedtls_asn1_get_int+0x24>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 c01cfee:	f06f 0063 	mvn.w	r0, #99	; 0x63
 c01cff2:	e7f1      	b.n	c01cfd8 <mbedtls_asn1_get_int+0x2c>

0c01cff4 <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 c01cff4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 c01cff6:	2302      	movs	r3, #2
{
 c01cff8:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 c01cffa:	aa01      	add	r2, sp, #4
{
 c01cffc:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 c01cffe:	f7ff ffc1 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c01d002:	b940      	cbnz	r0, c01d016 <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
 c01d004:	9a01      	ldr	r2, [sp, #4]
 c01d006:	6821      	ldr	r1, [r4, #0]
 c01d008:	4628      	mov	r0, r5
 c01d00a:	f000 ff19 	bl	c01de40 <mbedtls_mpi_read_binary>

    *p += len;
 c01d00e:	6823      	ldr	r3, [r4, #0]
 c01d010:	9a01      	ldr	r2, [sp, #4]
 c01d012:	4413      	add	r3, r2
 c01d014:	6023      	str	r3, [r4, #0]

    return( ret );
}
 c01d016:	b003      	add	sp, #12
 c01d018:	bd30      	pop	{r4, r5, pc}

0c01d01a <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 c01d01a:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 c01d01c:	2303      	movs	r3, #3
{
 c01d01e:	4604      	mov	r4, r0
 c01d020:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 c01d022:	f7ff ffaf 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c01d026:	b958      	cbnz	r0, c01d040 <mbedtls_asn1_get_bitstring_null+0x26>
        return( ret );

    if( (*len)-- < 2 || *(*p)++ != 0 )
 c01d028:	6813      	ldr	r3, [r2, #0]
 c01d02a:	1e5a      	subs	r2, r3, #1
 c01d02c:	2b01      	cmp	r3, #1
 c01d02e:	602a      	str	r2, [r5, #0]
 c01d030:	d904      	bls.n	c01d03c <mbedtls_asn1_get_bitstring_null+0x22>
 c01d032:	6823      	ldr	r3, [r4, #0]
 c01d034:	1c5a      	adds	r2, r3, #1
 c01d036:	6022      	str	r2, [r4, #0]
 c01d038:	781b      	ldrb	r3, [r3, #0]
 c01d03a:	b10b      	cbz	r3, c01d040 <mbedtls_asn1_get_bitstring_null+0x26>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 c01d03c:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
 c01d040:	bd38      	pop	{r3, r4, r5, pc}

0c01d042 <mbedtls_asn1_get_alg>:
}

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 c01d042:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 c01d046:	4690      	mov	r8, r2
 c01d048:	461f      	mov	r7, r3
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 c01d04a:	aa01      	add	r2, sp, #4
 c01d04c:	2330      	movs	r3, #48	; 0x30
{
 c01d04e:	4604      	mov	r4, r0
 c01d050:	4689      	mov	r9, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 c01d052:	f7ff ff97 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c01d056:	4605      	mov	r5, r0
 c01d058:	bb00      	cbnz	r0, c01d09c <mbedtls_asn1_get_alg+0x5a>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
 c01d05a:	6826      	ldr	r6, [r4, #0]
 c01d05c:	eba9 0906 	sub.w	r9, r9, r6
 c01d060:	f1b9 0f00 	cmp.w	r9, #0
 c01d064:	dd37      	ble.n	c01d0d6 <mbedtls_asn1_get_alg+0x94>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
 c01d066:	4642      	mov	r2, r8
 c01d068:	7833      	ldrb	r3, [r6, #0]
    end = *p + len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 c01d06a:	4620      	mov	r0, r4
    alg->tag = **p;
 c01d06c:	f842 3b04 	str.w	r3, [r2], #4
    end = *p + len;
 c01d070:	9b01      	ldr	r3, [sp, #4]
 c01d072:	441e      	add	r6, r3
    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 c01d074:	4631      	mov	r1, r6
 c01d076:	2306      	movs	r3, #6
 c01d078:	f7ff ff84 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c01d07c:	4605      	mov	r5, r0
 c01d07e:	b968      	cbnz	r0, c01d09c <mbedtls_asn1_get_alg+0x5a>
        return( ret );

    alg->p = *p;
 c01d080:	6823      	ldr	r3, [r4, #0]
    *p += alg->len;
 c01d082:	f8d8 2004 	ldr.w	r2, [r8, #4]
    alg->p = *p;
 c01d086:	f8c8 3008 	str.w	r3, [r8, #8]
    *p += alg->len;
 c01d08a:	6821      	ldr	r1, [r4, #0]
 c01d08c:	188b      	adds	r3, r1, r2

    if( *p == end )
 c01d08e:	42b3      	cmp	r3, r6
    *p += alg->len;
 c01d090:	6023      	str	r3, [r4, #0]
    if( *p == end )
 c01d092:	d107      	bne.n	c01d0a4 <mbedtls_asn1_get_alg+0x62>
    {
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
 c01d094:	210c      	movs	r1, #12
 c01d096:	4638      	mov	r0, r7
 c01d098:	f009 fb46 	bl	c026728 <mbedtls_platform_zeroize>

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 c01d09c:	4628      	mov	r0, r5
 c01d09e:	b003      	add	sp, #12
 c01d0a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    params->tag = **p;
 c01d0a4:	5c89      	ldrb	r1, [r1, r2]
 c01d0a6:	463a      	mov	r2, r7
    (*p)++;
 c01d0a8:	3301      	adds	r3, #1
    params->tag = **p;
 c01d0aa:	f842 1b04 	str.w	r1, [r2], #4
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 c01d0ae:	4620      	mov	r0, r4
    (*p)++;
 c01d0b0:	6023      	str	r3, [r4, #0]
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 c01d0b2:	4631      	mov	r1, r6
 c01d0b4:	f7ff ff1f 	bl	c01cef6 <mbedtls_asn1_get_len>
 c01d0b8:	4605      	mov	r5, r0
 c01d0ba:	2800      	cmp	r0, #0
 c01d0bc:	d1ee      	bne.n	c01d09c <mbedtls_asn1_get_alg+0x5a>
    params->p = *p;
 c01d0be:	6823      	ldr	r3, [r4, #0]
    *p += params->len;
 c01d0c0:	687a      	ldr	r2, [r7, #4]
    params->p = *p;
 c01d0c2:	60bb      	str	r3, [r7, #8]
    *p += params->len;
 c01d0c4:	6823      	ldr	r3, [r4, #0]
 c01d0c6:	4413      	add	r3, r2
    if( *p != end )
 c01d0c8:	42b3      	cmp	r3, r6
    *p += params->len;
 c01d0ca:	6023      	str	r3, [r4, #0]
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 c01d0cc:	bf0c      	ite	eq
 c01d0ce:	4605      	moveq	r5, r0
 c01d0d0:	f06f 0565 	mvnne.w	r5, #101	; 0x65
 c01d0d4:	e7e2      	b.n	c01d09c <mbedtls_asn1_get_alg+0x5a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 c01d0d6:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 c01d0da:	e7df      	b.n	c01d09c <mbedtls_asn1_get_alg+0x5a>

0c01d0dc <mbedtls_asn1_get_alg_null>:

int mbedtls_asn1_get_alg_null( unsigned char **p,
                       const unsigned char *end,
                       mbedtls_asn1_buf *alg )
{
 c01d0dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int ret;
    mbedtls_asn1_buf params;

    memset( &params, 0, sizeof(mbedtls_asn1_buf) );
 c01d0de:	2300      	movs	r3, #0
 c01d0e0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 c01d0e4:	9303      	str	r3, [sp, #12]

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )
 c01d0e6:	ab01      	add	r3, sp, #4
 c01d0e8:	f7ff ffab 	bl	c01d042 <mbedtls_asn1_get_alg>
 c01d0ec:	b940      	cbnz	r0, c01d100 <mbedtls_asn1_get_alg_null+0x24>
        return( ret );

    if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )
 c01d0ee:	9b01      	ldr	r3, [sp, #4]
 c01d0f0:	2b05      	cmp	r3, #5
 c01d0f2:	d000      	beq.n	c01d0f6 <mbedtls_asn1_get_alg_null+0x1a>
 c01d0f4:	b93b      	cbnz	r3, c01d106 <mbedtls_asn1_get_alg_null+0x2a>
 c01d0f6:	9b02      	ldr	r3, [sp, #8]
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 c01d0f8:	2b00      	cmp	r3, #0
 c01d0fa:	bf18      	it	ne
 c01d0fc:	f06f 0067 	mvnne.w	r0, #103	; 0x67

    return( 0 );
}
 c01d100:	b005      	add	sp, #20
 c01d102:	f85d fb04 	ldr.w	pc, [sp], #4
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 c01d106:	f06f 0067 	mvn.w	r0, #103	; 0x67
 c01d10a:	e7f9      	b.n	c01d100 <mbedtls_asn1_get_alg_null+0x24>

0c01d10c <mbedtls_asn1_write_len>:
#define mbedtls_calloc    calloc
#define mbedtls_free       free
#endif

int mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )
{
 c01d10c:	6803      	ldr	r3, [r0, #0]
    if( len < 0x80 )
 c01d10e:	2a7f      	cmp	r2, #127	; 0x7f
 c01d110:	eba3 0101 	sub.w	r1, r3, r1
 c01d114:	d807      	bhi.n	c01d126 <mbedtls_asn1_write_len+0x1a>
    {
        if( *p - start < 1 )
 c01d116:	2900      	cmp	r1, #0
 c01d118:	dd69      	ble.n	c01d1ee <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = (unsigned char) len;
 c01d11a:	1e59      	subs	r1, r3, #1
 c01d11c:	6001      	str	r1, [r0, #0]
 c01d11e:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 1 );
 c01d122:	2001      	movs	r0, #1
 c01d124:	4770      	bx	lr
    }

    if( len <= 0xFF )
 c01d126:	2aff      	cmp	r2, #255	; 0xff
 c01d128:	d80d      	bhi.n	c01d146 <mbedtls_asn1_write_len+0x3a>
    {
        if( *p - start < 2 )
 c01d12a:	2901      	cmp	r1, #1
 c01d12c:	dd5f      	ble.n	c01d1ee <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = (unsigned char) len;
 c01d12e:	1e59      	subs	r1, r3, #1
 c01d130:	6001      	str	r1, [r0, #0]
 c01d132:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x81;
 c01d136:	6803      	ldr	r3, [r0, #0]
 c01d138:	1e5a      	subs	r2, r3, #1
 c01d13a:	6002      	str	r2, [r0, #0]
 c01d13c:	2281      	movs	r2, #129	; 0x81
        return( 2 );
 c01d13e:	2002      	movs	r0, #2
        *--(*p) = 0x81;
 c01d140:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 2 );
 c01d144:	4770      	bx	lr
    }

    if( len <= 0xFFFF )
 c01d146:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 c01d14a:	d213      	bcs.n	c01d174 <mbedtls_asn1_write_len+0x68>
    {
        if( *p - start < 3 )
 c01d14c:	2902      	cmp	r1, #2
 c01d14e:	dd4e      	ble.n	c01d1ee <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
 c01d150:	1e59      	subs	r1, r3, #1
 c01d152:	6001      	str	r1, [r0, #0]
 c01d154:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
 c01d158:	6803      	ldr	r3, [r0, #0]
 c01d15a:	0a12      	lsrs	r2, r2, #8
 c01d15c:	1e59      	subs	r1, r3, #1
 c01d15e:	6001      	str	r1, [r0, #0]
 c01d160:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x82;
 c01d164:	6803      	ldr	r3, [r0, #0]
 c01d166:	1e5a      	subs	r2, r3, #1
 c01d168:	6002      	str	r2, [r0, #0]
 c01d16a:	2282      	movs	r2, #130	; 0x82
        return( 3 );
 c01d16c:	2003      	movs	r0, #3
        *--(*p) = 0x82;
 c01d16e:	f803 2c01 	strb.w	r2, [r3, #-1]
 c01d172:	4770      	bx	lr
    }

    if( len <= 0xFFFFFF )
 c01d174:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 c01d178:	d219      	bcs.n	c01d1ae <mbedtls_asn1_write_len+0xa2>
    {
        if( *p - start < 4 )
 c01d17a:	2903      	cmp	r1, #3
 c01d17c:	dd37      	ble.n	c01d1ee <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
 c01d17e:	1e59      	subs	r1, r3, #1
 c01d180:	6001      	str	r1, [r0, #0]
 c01d182:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
 c01d186:	6803      	ldr	r3, [r0, #0]
 c01d188:	1e59      	subs	r1, r3, #1
 c01d18a:	6001      	str	r1, [r0, #0]
 c01d18c:	0a11      	lsrs	r1, r2, #8
 c01d18e:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 16 ) & 0xFF;
 c01d192:	6803      	ldr	r3, [r0, #0]
 c01d194:	0c12      	lsrs	r2, r2, #16
 c01d196:	1e59      	subs	r1, r3, #1
 c01d198:	6001      	str	r1, [r0, #0]
 c01d19a:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x83;
 c01d19e:	6803      	ldr	r3, [r0, #0]
 c01d1a0:	1e5a      	subs	r2, r3, #1
 c01d1a2:	6002      	str	r2, [r0, #0]
 c01d1a4:	2283      	movs	r2, #131	; 0x83
        return( 4 );
 c01d1a6:	2004      	movs	r0, #4
        *--(*p) = 0x83;
 c01d1a8:	f803 2c01 	strb.w	r2, [r3, #-1]
 c01d1ac:	4770      	bx	lr

#if SIZE_MAX > 0xFFFFFFFF
    if( len <= 0xFFFFFFFF )
#endif
    {
        if( *p - start < 5 )
 c01d1ae:	2904      	cmp	r1, #4
 c01d1b0:	dd1d      	ble.n	c01d1ee <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
 c01d1b2:	1e59      	subs	r1, r3, #1
 c01d1b4:	6001      	str	r1, [r0, #0]
 c01d1b6:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
 c01d1ba:	6803      	ldr	r3, [r0, #0]
 c01d1bc:	1e59      	subs	r1, r3, #1
 c01d1be:	6001      	str	r1, [r0, #0]
 c01d1c0:	0a11      	lsrs	r1, r2, #8
 c01d1c2:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 16 ) & 0xFF;
 c01d1c6:	6803      	ldr	r3, [r0, #0]
 c01d1c8:	1e59      	subs	r1, r3, #1
 c01d1ca:	6001      	str	r1, [r0, #0]
 c01d1cc:	0c11      	lsrs	r1, r2, #16
 c01d1ce:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 24 ) & 0xFF;
 c01d1d2:	6803      	ldr	r3, [r0, #0]
 c01d1d4:	0e12      	lsrs	r2, r2, #24
 c01d1d6:	1e59      	subs	r1, r3, #1
 c01d1d8:	6001      	str	r1, [r0, #0]
 c01d1da:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x84;
 c01d1de:	6803      	ldr	r3, [r0, #0]
 c01d1e0:	1e5a      	subs	r2, r3, #1
 c01d1e2:	6002      	str	r2, [r0, #0]
 c01d1e4:	2284      	movs	r2, #132	; 0x84
        return( 5 );
 c01d1e6:	2005      	movs	r0, #5
        *--(*p) = 0x84;
 c01d1e8:	f803 2c01 	strb.w	r2, [r3, #-1]
 c01d1ec:	4770      	bx	lr
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 c01d1ee:	f06f 006b 	mvn.w	r0, #107	; 0x6b
    }

#if SIZE_MAX > 0xFFFFFFFF
    return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
#endif
}
 c01d1f2:	4770      	bx	lr

0c01d1f4 <mbedtls_asn1_write_tag>:

int mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )
{
    if( *p - start < 1 )
 c01d1f4:	6803      	ldr	r3, [r0, #0]
 c01d1f6:	1a59      	subs	r1, r3, r1
 c01d1f8:	2900      	cmp	r1, #0
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    *--(*p) = tag;
 c01d1fa:	bfc1      	itttt	gt
 c01d1fc:	f103 31ff 	addgt.w	r1, r3, #4294967295
 c01d200:	6001      	strgt	r1, [r0, #0]

    return( 1 );
 c01d202:	2001      	movgt	r0, #1
    *--(*p) = tag;
 c01d204:	f803 2c01 	strbgt.w	r2, [r3, #-1]
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 c01d208:	bfd8      	it	le
 c01d20a:	f06f 006b 	mvnle.w	r0, #107	; 0x6b
}
 c01d20e:	4770      	bx	lr

0c01d210 <mbedtls_asn1_write_raw_buffer>:

int mbedtls_asn1_write_raw_buffer( unsigned char **p, unsigned char *start,
                           const unsigned char *buf, size_t size )
{
 c01d210:	b538      	push	{r3, r4, r5, lr}
 c01d212:	461c      	mov	r4, r3
    size_t len = 0;

    if( *p < start || (size_t)( *p - start ) < size )
 c01d214:	6803      	ldr	r3, [r0, #0]
{
 c01d216:	4615      	mov	r5, r2
    if( *p < start || (size_t)( *p - start ) < size )
 c01d218:	428b      	cmp	r3, r1
 c01d21a:	d30b      	bcc.n	c01d234 <mbedtls_asn1_write_raw_buffer+0x24>
 c01d21c:	1a5a      	subs	r2, r3, r1
 c01d21e:	42a2      	cmp	r2, r4
 c01d220:	d308      	bcc.n	c01d234 <mbedtls_asn1_write_raw_buffer+0x24>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    len = size;
    (*p) -= len;
 c01d222:	1b1b      	subs	r3, r3, r4
 c01d224:	6003      	str	r3, [r0, #0]
    memcpy( *p, buf, len );
 c01d226:	4622      	mov	r2, r4
 c01d228:	4629      	mov	r1, r5
 c01d22a:	4618      	mov	r0, r3
 c01d22c:	f7f7 fba7 	bl	c01497e <memcpy>

    return( (int) len );
 c01d230:	4620      	mov	r0, r4
}
 c01d232:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 c01d234:	f06f 006b 	mvn.w	r0, #107	; 0x6b
 c01d238:	e7fb      	b.n	c01d232 <mbedtls_asn1_write_raw_buffer+0x22>

0c01d23a <mbedtls_asn1_write_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_write_mpi( unsigned char **p, unsigned char *start, const mbedtls_mpi *X )
{
 c01d23a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c01d23e:	4606      	mov	r6, r0
 c01d240:	460f      	mov	r7, r1
    int ret;
    size_t len = 0;

    // Write the MPI
    //
    len = mbedtls_mpi_size( X );
 c01d242:	4610      	mov	r0, r2
{
 c01d244:	4690      	mov	r8, r2
    len = mbedtls_mpi_size( X );
 c01d246:	f000 fdc1 	bl	c01ddcc <mbedtls_mpi_size>

    if( *p < start || (size_t)( *p - start ) < len )
 c01d24a:	6831      	ldr	r1, [r6, #0]
    len = mbedtls_mpi_size( X );
 c01d24c:	4604      	mov	r4, r0
    if( *p < start || (size_t)( *p - start ) < len )
 c01d24e:	42b9      	cmp	r1, r7
 c01d250:	d204      	bcs.n	c01d25c <mbedtls_asn1_write_mpi+0x22>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 c01d252:	f06f 056b 	mvn.w	r5, #107	; 0x6b

    ret = (int) len;

cleanup:
    return( ret );
}
 c01d256:	4628      	mov	r0, r5
 c01d258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( *p < start || (size_t)( *p - start ) < len )
 c01d25c:	1bcb      	subs	r3, r1, r7
 c01d25e:	4283      	cmp	r3, r0
 c01d260:	d3f7      	bcc.n	c01d252 <mbedtls_asn1_write_mpi+0x18>
    (*p) -= len;
 c01d262:	1a09      	subs	r1, r1, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
 c01d264:	4602      	mov	r2, r0
    (*p) -= len;
 c01d266:	6031      	str	r1, [r6, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
 c01d268:	4640      	mov	r0, r8
 c01d26a:	f000 fe56 	bl	c01df1a <mbedtls_mpi_write_binary>
 c01d26e:	4605      	mov	r5, r0
 c01d270:	2800      	cmp	r0, #0
 c01d272:	d1f0      	bne.n	c01d256 <mbedtls_asn1_write_mpi+0x1c>
    if( X->s ==1 && **p & 0x80 )
 c01d274:	f8d8 3000 	ldr.w	r3, [r8]
 c01d278:	2b01      	cmp	r3, #1
 c01d27a:	d10c      	bne.n	c01d296 <mbedtls_asn1_write_mpi+0x5c>
 c01d27c:	6833      	ldr	r3, [r6, #0]
 c01d27e:	f993 2000 	ldrsb.w	r2, [r3]
 c01d282:	2a00      	cmp	r2, #0
 c01d284:	da07      	bge.n	c01d296 <mbedtls_asn1_write_mpi+0x5c>
        if( *p - start < 1 )
 c01d286:	1bda      	subs	r2, r3, r7
 c01d288:	2a00      	cmp	r2, #0
 c01d28a:	dde2      	ble.n	c01d252 <mbedtls_asn1_write_mpi+0x18>
        *--(*p) = 0x00;
 c01d28c:	1e5a      	subs	r2, r3, #1
 c01d28e:	6032      	str	r2, [r6, #0]
        len += 1;
 c01d290:	3401      	adds	r4, #1
        *--(*p) = 0x00;
 c01d292:	f803 0c01 	strb.w	r0, [r3, #-1]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 c01d296:	4622      	mov	r2, r4
 c01d298:	4639      	mov	r1, r7
 c01d29a:	4630      	mov	r0, r6
 c01d29c:	f7ff ff36 	bl	c01d10c <mbedtls_asn1_write_len>
 c01d2a0:	1e05      	subs	r5, r0, #0
 c01d2a2:	dbd8      	blt.n	c01d256 <mbedtls_asn1_write_mpi+0x1c>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
 c01d2a4:	2202      	movs	r2, #2
 c01d2a6:	4639      	mov	r1, r7
 c01d2a8:	4630      	mov	r0, r6
 c01d2aa:	f7ff ffa3 	bl	c01d1f4 <mbedtls_asn1_write_tag>
 c01d2ae:	2800      	cmp	r0, #0
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 c01d2b0:	bfa6      	itte	ge
 c01d2b2:	1964      	addge	r4, r4, r5
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
 c01d2b4:	1905      	addge	r5, r0, r4
 c01d2b6:	4605      	movlt	r5, r0
 c01d2b8:	e7cd      	b.n	c01d256 <mbedtls_asn1_write_mpi+0x1c>

0c01d2ba <mbedtls_asn1_write_oid>:
    return( (int) len );
}

int mbedtls_asn1_write_oid( unsigned char **p, unsigned char *start,
                    const char *oid, size_t oid_len )
{
 c01d2ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c01d2bc:	4606      	mov	r6, r0
 c01d2be:	460f      	mov	r7, r1
    int ret;
    size_t len = 0;

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start,
 c01d2c0:	f7ff ffa6 	bl	c01d210 <mbedtls_asn1_write_raw_buffer>
 c01d2c4:	1e04      	subs	r4, r0, #0
 c01d2c6:	db11      	blt.n	c01d2ec <mbedtls_asn1_write_oid+0x32>
                                  (const unsigned char *) oid, oid_len ) );
    MBEDTLS_ASN1_CHK_ADD( len , mbedtls_asn1_write_len( p, start, len ) );
 c01d2c8:	4622      	mov	r2, r4
 c01d2ca:	4639      	mov	r1, r7
 c01d2cc:	4630      	mov	r0, r6
 c01d2ce:	f7ff ff1d 	bl	c01d10c <mbedtls_asn1_write_len>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start,
 c01d2d2:	4625      	mov	r5, r4
    MBEDTLS_ASN1_CHK_ADD( len , mbedtls_asn1_write_len( p, start, len ) );
 c01d2d4:	1e04      	subs	r4, r0, #0
 c01d2d6:	db09      	blt.n	c01d2ec <mbedtls_asn1_write_oid+0x32>
    MBEDTLS_ASN1_CHK_ADD( len , mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_OID ) );
 c01d2d8:	2206      	movs	r2, #6
 c01d2da:	4639      	mov	r1, r7
 c01d2dc:	4630      	mov	r0, r6
 c01d2de:	f7ff ff89 	bl	c01d1f4 <mbedtls_asn1_write_tag>
 c01d2e2:	2800      	cmp	r0, #0
 c01d2e4:	bfb2      	itee	lt
 c01d2e6:	4604      	movlt	r4, r0
    MBEDTLS_ASN1_CHK_ADD( len , mbedtls_asn1_write_len( p, start, len ) );
 c01d2e8:	1964      	addge	r4, r4, r5
    MBEDTLS_ASN1_CHK_ADD( len , mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_OID ) );
 c01d2ea:	1824      	addge	r4, r4, r0

    return( (int) len );
}
 c01d2ec:	4620      	mov	r0, r4
 c01d2ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0c01d2f0 <mbedtls_asn1_write_int>:

    return( (int) len );
}

int mbedtls_asn1_write_int( unsigned char **p, unsigned char *start, int val )
{
 c01d2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret;
    size_t len = 0;

    if( *p - start < 1 )
 c01d2f2:	6803      	ldr	r3, [r0, #0]
{
 c01d2f4:	460f      	mov	r7, r1
    if( *p - start < 1 )
 c01d2f6:	1a59      	subs	r1, r3, r1
 c01d2f8:	2900      	cmp	r1, #0
{
 c01d2fa:	4605      	mov	r5, r0
    if( *p - start < 1 )
 c01d2fc:	dc03      	bgt.n	c01d306 <mbedtls_asn1_write_int+0x16>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 c01d2fe:	f06f 046b 	mvn.w	r4, #107	; 0x6b

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );

    return( (int) len );
}
 c01d302:	4620      	mov	r0, r4
 c01d304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *--(*p) = val;
 c01d306:	1e59      	subs	r1, r3, #1
    if( val > 0 && **p & 0x80 )
 c01d308:	2a00      	cmp	r2, #0
    *--(*p) = val;
 c01d30a:	6001      	str	r1, [r0, #0]
 c01d30c:	f803 2c01 	strb.w	r2, [r3, #-1]
    if( val > 0 && **p & 0x80 )
 c01d310:	dd1f      	ble.n	c01d352 <mbedtls_asn1_write_int+0x62>
 c01d312:	6803      	ldr	r3, [r0, #0]
 c01d314:	f993 2000 	ldrsb.w	r2, [r3]
 c01d318:	2a00      	cmp	r2, #0
 c01d31a:	da1a      	bge.n	c01d352 <mbedtls_asn1_write_int+0x62>
        if( *p - start < 1 )
 c01d31c:	1bda      	subs	r2, r3, r7
 c01d31e:	2a00      	cmp	r2, #0
 c01d320:	dded      	ble.n	c01d2fe <mbedtls_asn1_write_int+0xe>
        *--(*p) = 0x00;
 c01d322:	1e5a      	subs	r2, r3, #1
 c01d324:	6002      	str	r2, [r0, #0]
 c01d326:	2200      	movs	r2, #0
        len += 1;
 c01d328:	2602      	movs	r6, #2
        *--(*p) = 0x00;
 c01d32a:	f803 2c01 	strb.w	r2, [r3, #-1]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 c01d32e:	4632      	mov	r2, r6
 c01d330:	4639      	mov	r1, r7
 c01d332:	4628      	mov	r0, r5
 c01d334:	f7ff feea 	bl	c01d10c <mbedtls_asn1_write_len>
 c01d338:	1e04      	subs	r4, r0, #0
 c01d33a:	dbe2      	blt.n	c01d302 <mbedtls_asn1_write_int+0x12>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
 c01d33c:	2202      	movs	r2, #2
 c01d33e:	4639      	mov	r1, r7
 c01d340:	4628      	mov	r0, r5
 c01d342:	f7ff ff57 	bl	c01d1f4 <mbedtls_asn1_write_tag>
 c01d346:	2800      	cmp	r0, #0
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 c01d348:	bfa6      	itte	ge
 c01d34a:	19a4      	addge	r4, r4, r6
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
 c01d34c:	1824      	addge	r4, r4, r0
 c01d34e:	4604      	movlt	r4, r0
 c01d350:	e7d7      	b.n	c01d302 <mbedtls_asn1_write_int+0x12>
    len += 1;
 c01d352:	2601      	movs	r6, #1
 c01d354:	e7eb      	b.n	c01d32e <mbedtls_asn1_write_int+0x3e>
	...

0c01d358 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 c01d358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 c01d35c:	2700      	movs	r7, #0
 c01d35e:	463c      	mov	r4, r7
 c01d360:	46bc      	mov	ip, r7
{
 c01d362:	f8dd e01c 	ldr.w	lr, [sp, #28]
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 c01d366:	f8df 8110 	ldr.w	r8, [pc, #272]	; c01d478 <mbedtls_base64_decode+0x120>
    for( i = n = j = 0; i < slen; i++ )
 c01d36a:	45f4      	cmp	ip, lr
 c01d36c:	4665      	mov	r5, ip
 c01d36e:	d229      	bcs.n	c01d3c4 <mbedtls_base64_decode+0x6c>
        while( i < slen && src[i] == ' ' )
 c01d370:	5d5e      	ldrb	r6, [r3, r5]
 c01d372:	2e20      	cmp	r6, #32
 c01d374:	d023      	beq.n	c01d3be <mbedtls_base64_decode+0x66>
        if( ( slen - i ) >= 2 &&
 c01d376:	ebae 0905 	sub.w	r9, lr, r5
 c01d37a:	f1b9 0f01 	cmp.w	r9, #1
 c01d37e:	d025      	beq.n	c01d3cc <mbedtls_base64_decode+0x74>
 c01d380:	2e0d      	cmp	r6, #13
 c01d382:	d123      	bne.n	c01d3cc <mbedtls_base64_decode+0x74>
            src[i] == '\r' && src[i + 1] == '\n' )
 c01d384:	eb03 0905 	add.w	r9, r3, r5
 c01d388:	f899 9001 	ldrb.w	r9, [r9, #1]
 c01d38c:	f1b9 0f0a 	cmp.w	r9, #10
        if( src[i] == '\n' )
 c01d390:	d012      	beq.n	c01d3b8 <mbedtls_base64_decode+0x60>
        if( x != 0 )
 c01d392:	4565      	cmp	r5, ip
 c01d394:	d16c      	bne.n	c01d470 <mbedtls_base64_decode+0x118>
        if( src[i] == '=' && ++j > 2 )
 c01d396:	2e3d      	cmp	r6, #61	; 0x3d
 c01d398:	d102      	bne.n	c01d3a0 <mbedtls_base64_decode+0x48>
 c01d39a:	3701      	adds	r7, #1
 c01d39c:	2f02      	cmp	r7, #2
 c01d39e:	d867      	bhi.n	c01d470 <mbedtls_base64_decode+0x118>
        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 c01d3a0:	f016 0f80 	tst.w	r6, #128	; 0x80
 c01d3a4:	d164      	bne.n	c01d470 <mbedtls_base64_decode+0x118>
 c01d3a6:	f818 6006 	ldrb.w	r6, [r8, r6]
 c01d3aa:	2e7f      	cmp	r6, #127	; 0x7f
 c01d3ac:	d060      	beq.n	c01d470 <mbedtls_base64_decode+0x118>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 c01d3ae:	2e3f      	cmp	r6, #63	; 0x3f
 c01d3b0:	d801      	bhi.n	c01d3b6 <mbedtls_base64_decode+0x5e>
 c01d3b2:	2f00      	cmp	r7, #0
 c01d3b4:	d15c      	bne.n	c01d470 <mbedtls_base64_decode+0x118>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
 c01d3b6:	3401      	adds	r4, #1
    for( i = n = j = 0; i < slen; i++ )
 c01d3b8:	f105 0c01 	add.w	ip, r5, #1
 c01d3bc:	e7d5      	b.n	c01d36a <mbedtls_base64_decode+0x12>
            ++i;
 c01d3be:	3501      	adds	r5, #1
        while( i < slen && src[i] == ' ' )
 c01d3c0:	45ae      	cmp	lr, r5
 c01d3c2:	d1d5      	bne.n	c01d370 <mbedtls_base64_decode+0x18>
    }

    if( n == 0 )
 c01d3c4:	b924      	cbnz	r4, c01d3d0 <mbedtls_base64_decode+0x78>
    {
        *olen = 0;
 c01d3c6:	6014      	str	r4, [r2, #0]
        }
    }

    *olen = p - dst;

    return( 0 );
 c01d3c8:	2000      	movs	r0, #0
 c01d3ca:	e021      	b.n	c01d410 <mbedtls_base64_decode+0xb8>
        if( src[i] == '\n' )
 c01d3cc:	2e0a      	cmp	r6, #10
 c01d3ce:	e7df      	b.n	c01d390 <mbedtls_base64_decode+0x38>
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
 c01d3d0:	2606      	movs	r6, #6
 c01d3d2:	f004 0c07 	and.w	ip, r4, #7
 c01d3d6:	08e4      	lsrs	r4, r4, #3
 c01d3d8:	fb06 fc0c 	mul.w	ip, r6, ip
 c01d3dc:	4374      	muls	r4, r6
 c01d3de:	f10c 0c07 	add.w	ip, ip, #7
 c01d3e2:	1be4      	subs	r4, r4, r7
    n -= j;
 c01d3e4:	eb04 04dc 	add.w	r4, r4, ip, lsr #3
    if( dst == NULL || dlen < n )
 c01d3e8:	b178      	cbz	r0, c01d40a <mbedtls_base64_decode+0xb2>
 c01d3ea:	428c      	cmp	r4, r1
 c01d3ec:	d80d      	bhi.n	c01d40a <mbedtls_base64_decode+0xb2>
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 c01d3ee:	2700      	movs	r7, #0
    if( dst == NULL || dlen < n )
 c01d3f0:	4601      	mov	r1, r0
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 c01d3f2:	2603      	movs	r6, #3
 c01d3f4:	463c      	mov	r4, r7
        j -= ( base64_dec_map[*src] == 64 );
 c01d3f6:	f8df e080 	ldr.w	lr, [pc, #128]	; c01d478 <mbedtls_base64_decode+0x120>
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 c01d3fa:	f8df 8080 	ldr.w	r8, [pc, #128]	; c01d47c <mbedtls_base64_decode+0x124>
 c01d3fe:	441d      	add	r5, r3
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 c01d400:	429d      	cmp	r5, r3
 c01d402:	d107      	bne.n	c01d414 <mbedtls_base64_decode+0xbc>
    *olen = p - dst;
 c01d404:	1a09      	subs	r1, r1, r0
 c01d406:	6011      	str	r1, [r2, #0]
 c01d408:	e7de      	b.n	c01d3c8 <mbedtls_base64_decode+0x70>
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 c01d40a:	f06f 0029 	mvn.w	r0, #41	; 0x29
        *olen = n;
 c01d40e:	6014      	str	r4, [r2, #0]
}
 c01d410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 c01d414:	f813 9b01 	ldrb.w	r9, [r3], #1
 c01d418:	f1a9 0c0a 	sub.w	ip, r9, #10
 c01d41c:	fa5f fc8c 	uxtb.w	ip, ip
 c01d420:	f1bc 0f16 	cmp.w	ip, #22
 c01d424:	d804      	bhi.n	c01d430 <mbedtls_base64_decode+0xd8>
 c01d426:	fa28 fc0c 	lsr.w	ip, r8, ip
 c01d42a:	f01c 0f01 	tst.w	ip, #1
 c01d42e:	d1e7      	bne.n	c01d400 <mbedtls_base64_decode+0xa8>
        j -= ( base64_dec_map[*src] == 64 );
 c01d430:	f81e c009 	ldrb.w	ip, [lr, r9]
        if( ++n == 4 )
 c01d434:	3401      	adds	r4, #1
        j -= ( base64_dec_map[*src] == 64 );
 c01d436:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 c01d43a:	bf08      	it	eq
 c01d43c:	3e01      	subeq	r6, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 c01d43e:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
        if( ++n == 4 )
 c01d442:	2c04      	cmp	r4, #4
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 c01d444:	ea4c 1787 	orr.w	r7, ip, r7, lsl #6
        if( ++n == 4 )
 c01d448:	d1da      	bne.n	c01d400 <mbedtls_base64_decode+0xa8>
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 c01d44a:	b17e      	cbz	r6, c01d46c <mbedtls_base64_decode+0x114>
 c01d44c:	0c3c      	lsrs	r4, r7, #16
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 c01d44e:	2e01      	cmp	r6, #1
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 c01d450:	700c      	strb	r4, [r1, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 c01d452:	d102      	bne.n	c01d45a <mbedtls_base64_decode+0x102>
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 c01d454:	3101      	adds	r1, #1
            n = 0;
 c01d456:	2400      	movs	r4, #0
 c01d458:	e7d2      	b.n	c01d400 <mbedtls_base64_decode+0xa8>
            if( j > 2 ) *p++ = (unsigned char)( x       );
 c01d45a:	2e02      	cmp	r6, #2
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 c01d45c:	ea4f 2417 	mov.w	r4, r7, lsr #8
 c01d460:	704c      	strb	r4, [r1, #1]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 c01d462:	bf16      	itet	ne
 c01d464:	708f      	strbne	r7, [r1, #2]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 c01d466:	3102      	addeq	r1, #2
            if( j > 2 ) *p++ = (unsigned char)( x       );
 c01d468:	3103      	addne	r1, #3
 c01d46a:	e7f4      	b.n	c01d456 <mbedtls_base64_decode+0xfe>
            n = 0;
 c01d46c:	4634      	mov	r4, r6
 c01d46e:	e7c7      	b.n	c01d400 <mbedtls_base64_decode+0xa8>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 c01d470:	f06f 002b 	mvn.w	r0, #43	; 0x2b
 c01d474:	e7cc      	b.n	c01d410 <mbedtls_base64_decode+0xb8>
 c01d476:	bf00      	nop
 c01d478:	0c032d91 	.word	0x0c032d91
 c01d47c:	00400009 	.word	0x00400009

0c01d480 <mpi_get_digit>:
 */
static int mpi_get_digit( mbedtls_mpi_uint *d, int radix, char c )
{
    *d = 255;

    if( c >= 0x30 && c <= 0x39 ) *d = c - 0x30;
 c01d480:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
{
 c01d484:	b510      	push	{r4, lr}
    if( c >= 0x30 && c <= 0x39 ) *d = c - 0x30;
 c01d486:	b2dc      	uxtb	r4, r3
 c01d488:	2c09      	cmp	r4, #9
    *d = 255;
 c01d48a:	bf88      	it	hi
 c01d48c:	23ff      	movhi	r3, #255	; 0xff
    if( c >= 0x30 && c <= 0x39 ) *d = c - 0x30;
 c01d48e:	6003      	str	r3, [r0, #0]
    if( c >= 0x41 && c <= 0x46 ) *d = c - 0x37;
 c01d490:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 c01d494:	2b05      	cmp	r3, #5
 c01d496:	bf9c      	itt	ls
 c01d498:	f1a2 0337 	subls.w	r3, r2, #55	; 0x37
 c01d49c:	6003      	strls	r3, [r0, #0]
    if( c >= 0x61 && c <= 0x66 ) *d = c - 0x57;
 c01d49e:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 c01d4a2:	2b05      	cmp	r3, #5
 c01d4a4:	bf9c      	itt	ls
 c01d4a6:	3a57      	subls	r2, #87	; 0x57
 c01d4a8:	6002      	strls	r2, [r0, #0]

    if( *d >= (mbedtls_mpi_uint) radix )
 c01d4aa:	6803      	ldr	r3, [r0, #0]
 c01d4ac:	428b      	cmp	r3, r1
        return( MBEDTLS_ERR_MPI_INVALID_CHARACTER );

    return( 0 );
}
 c01d4ae:	bf2c      	ite	cs
 c01d4b0:	f06f 0005 	mvncs.w	r0, #5
 c01d4b4:	2000      	movcc	r0, #0
 c01d4b6:	bd10      	pop	{r4, pc}

0c01d4b8 <mpi_sub_hlp>:
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 c01d4b8:	2300      	movs	r3, #0
{
 c01d4ba:	b5f0      	push	{r4, r5, r6, r7, lr}
    for( i = c = 0; i < n; i++, s++, d++ )
 c01d4bc:	461c      	mov	r4, r3
 c01d4be:	1f16      	subs	r6, r2, #4
 c01d4c0:	4284      	cmp	r4, r0
 c01d4c2:	d103      	bne.n	c01d4cc <mpi_sub_hlp+0x14>
 c01d4c4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 c01d4c8:	b9bb      	cbnz	r3, c01d4fa <mpi_sub_hlp+0x42>
    {
        z = ( *d < c ); *d -= c;
        c = z; d++;
    }
}
 c01d4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        z = ( *d <  c );     *d -=  c;
 c01d4cc:	f8d6 c004 	ldr.w	ip, [r6, #4]
 c01d4d0:	ebac 0503 	sub.w	r5, ip, r3
 c01d4d4:	f846 5f04 	str.w	r5, [r6, #4]!
        c = ( *d < *s ) + z; *d -= *s;
 c01d4d8:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
    for( i = c = 0; i < n; i++, s++, d++ )
 c01d4dc:	3401      	adds	r4, #1
        c = ( *d < *s ) + z; *d -= *s;
 c01d4de:	42bd      	cmp	r5, r7
 c01d4e0:	bf2c      	ite	cs
 c01d4e2:	f04f 0e00 	movcs.w	lr, #0
 c01d4e6:	f04f 0e01 	movcc.w	lr, #1
 c01d4ea:	1bed      	subs	r5, r5, r7
 c01d4ec:	459c      	cmp	ip, r3
 c01d4ee:	bf2c      	ite	cs
 c01d4f0:	4673      	movcs	r3, lr
 c01d4f2:	f10e 0301 	addcc.w	r3, lr, #1
 c01d4f6:	6035      	str	r5, [r6, #0]
 c01d4f8:	e7e2      	b.n	c01d4c0 <mpi_sub_hlp+0x8>
        z = ( *d < c ); *d -= c;
 c01d4fa:	6811      	ldr	r1, [r2, #0]
 c01d4fc:	1ac8      	subs	r0, r1, r3
        c = z; d++;
 c01d4fe:	4299      	cmp	r1, r3
        z = ( *d < c ); *d -= c;
 c01d500:	f842 0b04 	str.w	r0, [r2], #4
        c = z; d++;
 c01d504:	bf2c      	ite	cs
 c01d506:	2300      	movcs	r3, #0
 c01d508:	2301      	movcc	r3, #1
 c01d50a:	e7dd      	b.n	c01d4c8 <mpi_sub_hlp+0x10>

0c01d50c <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 c01d50c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 c01d510:	4684      	mov	ip, r0
 c01d512:	460d      	mov	r5, r1
    mbedtls_mpi_uint c = 0, t = 0;
 c01d514:	f04f 0e00 	mov.w	lr, #0
 c01d518:	f102 0440 	add.w	r4, r2, #64	; 0x40
    for( ; i >= 16; i -= 16 )
 c01d51c:	f1bc 0f0f 	cmp.w	ip, #15
 c01d520:	f854 8c40 	ldr.w	r8, [r4, #-64]
 c01d524:	f105 0540 	add.w	r5, r5, #64	; 0x40
 c01d528:	f104 0440 	add.w	r4, r4, #64	; 0x40
 c01d52c:	f200 80ba 	bhi.w	c01d6a4 <mpi_mul_hlp+0x198>
 c01d530:	f06f 040f 	mvn.w	r4, #15
 c01d534:	ea4f 1c10 	mov.w	ip, r0, lsr #4
 c01d538:	fb04 000c 	mla	r0, r4, ip, r0
 c01d53c:	ea4f 1c8c 	mov.w	ip, ip, lsl #6
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 c01d540:	2807      	cmp	r0, #7
 c01d542:	eb01 050c 	add.w	r5, r1, ip
 c01d546:	eb02 040c 	add.w	r4, r2, ip
 c01d54a:	f240 8093 	bls.w	c01d674 <mpi_mul_hlp+0x168>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 c01d54e:	f851 600c 	ldr.w	r6, [r1, ip]
    for( ; i >= 8; i -= 8 )
 c01d552:	3808      	subs	r0, #8
        MULADDC_CORE   MULADDC_CORE
 c01d554:	fba3 6706 	umull	r6, r7, r3, r6
 c01d558:	eb1e 0e06 	adds.w	lr, lr, r6
 c01d55c:	bf2c      	ite	cs
 c01d55e:	f04f 0901 	movcs.w	r9, #1
 c01d562:	f04f 0900 	movcc.w	r9, #0
 c01d566:	eb18 010e 	adds.w	r1, r8, lr
 c01d56a:	f842 100c 	str.w	r1, [r2, ip]
 c01d56e:	bf2c      	ite	cs
 c01d570:	2201      	movcs	r2, #1
 c01d572:	2200      	movcc	r2, #0
 c01d574:	686e      	ldr	r6, [r5, #4]
 c01d576:	44b9      	add	r9, r7
 c01d578:	fba3 6706 	umull	r6, r7, r3, r6
 c01d57c:	444a      	add	r2, r9
 c01d57e:	1992      	adds	r2, r2, r6
 c01d580:	bf2c      	ite	cs
 c01d582:	2101      	movcs	r1, #1
 c01d584:	2100      	movcc	r1, #0
 c01d586:	6866      	ldr	r6, [r4, #4]
 c01d588:	eb01 0c07 	add.w	ip, r1, r7
 c01d58c:	1992      	adds	r2, r2, r6
 c01d58e:	f04f 0100 	mov.w	r1, #0
 c01d592:	bf28      	it	cs
 c01d594:	2101      	movcs	r1, #1
 c01d596:	6062      	str	r2, [r4, #4]
        MULADDC_CORE   MULADDC_CORE
 c01d598:	68ae      	ldr	r6, [r5, #8]
        MULADDC_CORE   MULADDC_CORE
 c01d59a:	4461      	add	r1, ip
        MULADDC_CORE   MULADDC_CORE
 c01d59c:	fba3 6706 	umull	r6, r7, r3, r6
 c01d5a0:	1989      	adds	r1, r1, r6
 c01d5a2:	bf2c      	ite	cs
 c01d5a4:	2201      	movcs	r2, #1
 c01d5a6:	2200      	movcc	r2, #0
 c01d5a8:	68a6      	ldr	r6, [r4, #8]
 c01d5aa:	eb02 0c07 	add.w	ip, r2, r7
 c01d5ae:	1989      	adds	r1, r1, r6
 c01d5b0:	f04f 0200 	mov.w	r2, #0
 c01d5b4:	bf28      	it	cs
 c01d5b6:	2201      	movcs	r2, #1
 c01d5b8:	60a1      	str	r1, [r4, #8]
 c01d5ba:	68ee      	ldr	r6, [r5, #12]
 c01d5bc:	4462      	add	r2, ip
 c01d5be:	fba3 6706 	umull	r6, r7, r3, r6
 c01d5c2:	1992      	adds	r2, r2, r6
 c01d5c4:	bf2c      	ite	cs
 c01d5c6:	2101      	movcs	r1, #1
 c01d5c8:	2100      	movcc	r1, #0
 c01d5ca:	68e6      	ldr	r6, [r4, #12]
 c01d5cc:	eb01 0c07 	add.w	ip, r1, r7
 c01d5d0:	1992      	adds	r2, r2, r6
 c01d5d2:	f04f 0100 	mov.w	r1, #0
 c01d5d6:	bf28      	it	cs
 c01d5d8:	2101      	movcs	r1, #1
 c01d5da:	60e2      	str	r2, [r4, #12]

        MULADDC_CORE   MULADDC_CORE
 c01d5dc:	692e      	ldr	r6, [r5, #16]
        MULADDC_CORE   MULADDC_CORE
 c01d5de:	4461      	add	r1, ip
        MULADDC_CORE   MULADDC_CORE
 c01d5e0:	fba3 6706 	umull	r6, r7, r3, r6
 c01d5e4:	1989      	adds	r1, r1, r6
 c01d5e6:	bf2c      	ite	cs
 c01d5e8:	2201      	movcs	r2, #1
 c01d5ea:	2200      	movcc	r2, #0
 c01d5ec:	6926      	ldr	r6, [r4, #16]
 c01d5ee:	eb02 0c07 	add.w	ip, r2, r7
 c01d5f2:	1989      	adds	r1, r1, r6
 c01d5f4:	f04f 0200 	mov.w	r2, #0
 c01d5f8:	bf28      	it	cs
 c01d5fa:	2201      	movcs	r2, #1
 c01d5fc:	6121      	str	r1, [r4, #16]
 c01d5fe:	696e      	ldr	r6, [r5, #20]
 c01d600:	4462      	add	r2, ip
 c01d602:	fba3 6706 	umull	r6, r7, r3, r6
 c01d606:	1992      	adds	r2, r2, r6
 c01d608:	bf2c      	ite	cs
 c01d60a:	2101      	movcs	r1, #1
 c01d60c:	2100      	movcc	r1, #0
 c01d60e:	6966      	ldr	r6, [r4, #20]
 c01d610:	eb01 0c07 	add.w	ip, r1, r7
 c01d614:	1992      	adds	r2, r2, r6
 c01d616:	f04f 0100 	mov.w	r1, #0
 c01d61a:	bf28      	it	cs
 c01d61c:	2101      	movcs	r1, #1
 c01d61e:	6162      	str	r2, [r4, #20]
        MULADDC_CORE   MULADDC_CORE
 c01d620:	69ae      	ldr	r6, [r5, #24]
        MULADDC_CORE   MULADDC_CORE
 c01d622:	4461      	add	r1, ip
        MULADDC_CORE   MULADDC_CORE
 c01d624:	fba3 6706 	umull	r6, r7, r3, r6
 c01d628:	1989      	adds	r1, r1, r6
 c01d62a:	bf2c      	ite	cs
 c01d62c:	2201      	movcs	r2, #1
 c01d62e:	2200      	movcc	r2, #0
 c01d630:	69a6      	ldr	r6, [r4, #24]
 c01d632:	eb02 0e07 	add.w	lr, r2, r7
 c01d636:	1989      	adds	r1, r1, r6
 c01d638:	f04f 0200 	mov.w	r2, #0
 c01d63c:	bf28      	it	cs
 c01d63e:	2201      	movcs	r2, #1
 c01d640:	61a1      	str	r1, [r4, #24]
 c01d642:	69ee      	ldr	r6, [r5, #28]
 c01d644:	4472      	add	r2, lr
 c01d646:	fba3 6706 	umull	r6, r7, r3, r6
 c01d64a:	1992      	adds	r2, r2, r6
 c01d64c:	bf2c      	ite	cs
 c01d64e:	f04f 0e01 	movcs.w	lr, #1
 c01d652:	f04f 0e00 	movcc.w	lr, #0
 c01d656:	f105 0c20 	add.w	ip, r5, #32
 c01d65a:	69e5      	ldr	r5, [r4, #28]
 c01d65c:	eb0e 0107 	add.w	r1, lr, r7
 c01d660:	1952      	adds	r2, r2, r5
 c01d662:	f04f 0e00 	mov.w	lr, #0
 c01d666:	bf28      	it	cs
 c01d668:	f04f 0e01 	movcs.w	lr, #1
 c01d66c:	4665      	mov	r5, ip
 c01d66e:	61e2      	str	r2, [r4, #28]
 c01d670:	448e      	add	lr, r1
 c01d672:	3420      	adds	r4, #32
 c01d674:	4621      	mov	r1, r4
 c01d676:	0080      	lsls	r0, r0, #2
 c01d678:	eb05 0c00 	add.w	ip, r5, r0
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 c01d67c:	4565      	cmp	r5, ip
 c01d67e:	f851 2b04 	ldr.w	r2, [r1], #4
 c01d682:	f040 819e 	bne.w	c01d9c2 <mpi_mul_hlp+0x4b6>
 c01d686:	4404      	add	r4, r0
 c01d688:	6823      	ldr	r3, [r4, #0]
 c01d68a:	2200      	movs	r2, #0
 c01d68c:	eb13 030e 	adds.w	r3, r3, lr
 c01d690:	bf28      	it	cs
 c01d692:	2201      	movcs	r2, #1
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
 c01d694:	f844 3b04 	str.w	r3, [r4], #4
 c01d698:	f04f 0e01 	mov.w	lr, #1
    }
    while( c != 0 );
 c01d69c:	2a00      	cmp	r2, #0
 c01d69e:	d1f3      	bne.n	c01d688 <mpi_mul_hlp+0x17c>
}
 c01d6a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        MULADDC_CORE   MULADDC_CORE
 c01d6a4:	f855 6c40 	ldr.w	r6, [r5, #-64]
    for( ; i >= 16; i -= 16 )
 c01d6a8:	f1ac 0c10 	sub.w	ip, ip, #16
        MULADDC_CORE   MULADDC_CORE
 c01d6ac:	fba3 6706 	umull	r6, r7, r3, r6
 c01d6b0:	eb1e 0e06 	adds.w	lr, lr, r6
 c01d6b4:	bf2c      	ite	cs
 c01d6b6:	f04f 0901 	movcs.w	r9, #1
 c01d6ba:	f04f 0900 	movcc.w	r9, #0
 c01d6be:	eb1e 0608 	adds.w	r6, lr, r8
 c01d6c2:	bf2c      	ite	cs
 c01d6c4:	f04f 0801 	movcs.w	r8, #1
 c01d6c8:	f04f 0800 	movcc.w	r8, #0
 c01d6cc:	f844 6c80 	str.w	r6, [r4, #-128]
 c01d6d0:	f855 6c3c 	ldr.w	r6, [r5, #-60]
 c01d6d4:	44b9      	add	r9, r7
 c01d6d6:	fba3 6706 	umull	r6, r7, r3, r6
 c01d6da:	44c8      	add	r8, r9
 c01d6dc:	eb18 0806 	adds.w	r8, r8, r6
 c01d6e0:	bf2c      	ite	cs
 c01d6e2:	f04f 0e01 	movcs.w	lr, #1
 c01d6e6:	f04f 0e00 	movcc.w	lr, #0
 c01d6ea:	f854 6c7c 	ldr.w	r6, [r4, #-124]
 c01d6ee:	eb0e 0907 	add.w	r9, lr, r7
 c01d6f2:	eb16 0608 	adds.w	r6, r6, r8
 c01d6f6:	f04f 0e00 	mov.w	lr, #0
 c01d6fa:	bf28      	it	cs
 c01d6fc:	f04f 0e01 	movcs.w	lr, #1
 c01d700:	f844 6c7c 	str.w	r6, [r4, #-124]
        MULADDC_CORE   MULADDC_CORE
 c01d704:	f855 6c38 	ldr.w	r6, [r5, #-56]
        MULADDC_CORE   MULADDC_CORE
 c01d708:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
 c01d70a:	fba3 6706 	umull	r6, r7, r3, r6
 c01d70e:	eb1e 0e06 	adds.w	lr, lr, r6
 c01d712:	bf2c      	ite	cs
 c01d714:	f04f 0801 	movcs.w	r8, #1
 c01d718:	f04f 0800 	movcc.w	r8, #0
 c01d71c:	eb08 0907 	add.w	r9, r8, r7
 c01d720:	f854 7c78 	ldr.w	r7, [r4, #-120]
 c01d724:	f04f 0800 	mov.w	r8, #0
 c01d728:	eb17 070e 	adds.w	r7, r7, lr
 c01d72c:	bf28      	it	cs
 c01d72e:	f04f 0801 	movcs.w	r8, #1
 c01d732:	f844 7c78 	str.w	r7, [r4, #-120]
 c01d736:	f855 6c34 	ldr.w	r6, [r5, #-52]
 c01d73a:	44c8      	add	r8, r9
 c01d73c:	fba3 6706 	umull	r6, r7, r3, r6
 c01d740:	eb18 0806 	adds.w	r8, r8, r6
 c01d744:	bf2c      	ite	cs
 c01d746:	f04f 0e01 	movcs.w	lr, #1
 c01d74a:	f04f 0e00 	movcc.w	lr, #0
 c01d74e:	f854 6c74 	ldr.w	r6, [r4, #-116]
 c01d752:	eb0e 0907 	add.w	r9, lr, r7
 c01d756:	eb16 0608 	adds.w	r6, r6, r8
 c01d75a:	f04f 0e00 	mov.w	lr, #0
 c01d75e:	bf28      	it	cs
 c01d760:	f04f 0e01 	movcs.w	lr, #1
 c01d764:	f844 6c74 	str.w	r6, [r4, #-116]
        MULADDC_CORE   MULADDC_CORE
 c01d768:	f855 6c30 	ldr.w	r6, [r5, #-48]
        MULADDC_CORE   MULADDC_CORE
 c01d76c:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
 c01d76e:	fba3 6706 	umull	r6, r7, r3, r6
 c01d772:	eb1e 0e06 	adds.w	lr, lr, r6
 c01d776:	bf2c      	ite	cs
 c01d778:	f04f 0801 	movcs.w	r8, #1
 c01d77c:	f04f 0800 	movcc.w	r8, #0
 c01d780:	eb08 0907 	add.w	r9, r8, r7
 c01d784:	f854 7c70 	ldr.w	r7, [r4, #-112]
 c01d788:	f04f 0800 	mov.w	r8, #0
 c01d78c:	eb17 070e 	adds.w	r7, r7, lr
 c01d790:	bf28      	it	cs
 c01d792:	f04f 0801 	movcs.w	r8, #1
 c01d796:	f844 7c70 	str.w	r7, [r4, #-112]
 c01d79a:	f855 6c2c 	ldr.w	r6, [r5, #-44]
 c01d79e:	44c8      	add	r8, r9
 c01d7a0:	fba3 6706 	umull	r6, r7, r3, r6
 c01d7a4:	eb18 0806 	adds.w	r8, r8, r6
 c01d7a8:	bf2c      	ite	cs
 c01d7aa:	f04f 0e01 	movcs.w	lr, #1
 c01d7ae:	f04f 0e00 	movcc.w	lr, #0
 c01d7b2:	f854 6c6c 	ldr.w	r6, [r4, #-108]
 c01d7b6:	eb0e 0907 	add.w	r9, lr, r7
 c01d7ba:	eb16 0608 	adds.w	r6, r6, r8
 c01d7be:	f04f 0e00 	mov.w	lr, #0
 c01d7c2:	bf28      	it	cs
 c01d7c4:	f04f 0e01 	movcs.w	lr, #1
 c01d7c8:	f844 6c6c 	str.w	r6, [r4, #-108]
        MULADDC_CORE   MULADDC_CORE
 c01d7cc:	f855 6c28 	ldr.w	r6, [r5, #-40]
        MULADDC_CORE   MULADDC_CORE
 c01d7d0:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
 c01d7d2:	fba3 6706 	umull	r6, r7, r3, r6
 c01d7d6:	eb1e 0e06 	adds.w	lr, lr, r6
 c01d7da:	bf2c      	ite	cs
 c01d7dc:	f04f 0801 	movcs.w	r8, #1
 c01d7e0:	f04f 0800 	movcc.w	r8, #0
 c01d7e4:	eb08 0907 	add.w	r9, r8, r7
 c01d7e8:	f854 7c68 	ldr.w	r7, [r4, #-104]
 c01d7ec:	f04f 0800 	mov.w	r8, #0
 c01d7f0:	eb17 070e 	adds.w	r7, r7, lr
 c01d7f4:	bf28      	it	cs
 c01d7f6:	f04f 0801 	movcs.w	r8, #1
 c01d7fa:	f844 7c68 	str.w	r7, [r4, #-104]
 c01d7fe:	f855 6c24 	ldr.w	r6, [r5, #-36]
 c01d802:	44c8      	add	r8, r9
 c01d804:	fba3 6706 	umull	r6, r7, r3, r6
 c01d808:	eb18 0806 	adds.w	r8, r8, r6
 c01d80c:	bf2c      	ite	cs
 c01d80e:	f04f 0e01 	movcs.w	lr, #1
 c01d812:	f04f 0e00 	movcc.w	lr, #0
 c01d816:	f854 6c64 	ldr.w	r6, [r4, #-100]
 c01d81a:	eb0e 0907 	add.w	r9, lr, r7
 c01d81e:	eb16 0608 	adds.w	r6, r6, r8
 c01d822:	f04f 0e00 	mov.w	lr, #0
 c01d826:	bf28      	it	cs
 c01d828:	f04f 0e01 	movcs.w	lr, #1
 c01d82c:	f844 6c64 	str.w	r6, [r4, #-100]
        MULADDC_CORE   MULADDC_CORE
 c01d830:	f855 6c20 	ldr.w	r6, [r5, #-32]
        MULADDC_CORE   MULADDC_CORE
 c01d834:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
 c01d836:	fba3 6706 	umull	r6, r7, r3, r6
 c01d83a:	eb1e 0e06 	adds.w	lr, lr, r6
 c01d83e:	bf2c      	ite	cs
 c01d840:	f04f 0801 	movcs.w	r8, #1
 c01d844:	f04f 0800 	movcc.w	r8, #0
 c01d848:	eb08 0907 	add.w	r9, r8, r7
 c01d84c:	f854 7c60 	ldr.w	r7, [r4, #-96]
 c01d850:	f04f 0800 	mov.w	r8, #0
 c01d854:	eb17 070e 	adds.w	r7, r7, lr
 c01d858:	bf28      	it	cs
 c01d85a:	f04f 0801 	movcs.w	r8, #1
 c01d85e:	f844 7c60 	str.w	r7, [r4, #-96]
 c01d862:	f855 6c1c 	ldr.w	r6, [r5, #-28]
 c01d866:	44c8      	add	r8, r9
 c01d868:	fba3 6706 	umull	r6, r7, r3, r6
 c01d86c:	eb18 0806 	adds.w	r8, r8, r6
 c01d870:	bf2c      	ite	cs
 c01d872:	f04f 0e01 	movcs.w	lr, #1
 c01d876:	f04f 0e00 	movcc.w	lr, #0
 c01d87a:	f854 6c5c 	ldr.w	r6, [r4, #-92]
 c01d87e:	eb0e 0907 	add.w	r9, lr, r7
 c01d882:	eb16 0608 	adds.w	r6, r6, r8
 c01d886:	f04f 0e00 	mov.w	lr, #0
 c01d88a:	bf28      	it	cs
 c01d88c:	f04f 0e01 	movcs.w	lr, #1
 c01d890:	f844 6c5c 	str.w	r6, [r4, #-92]
        MULADDC_CORE   MULADDC_CORE
 c01d894:	f855 6c18 	ldr.w	r6, [r5, #-24]
        MULADDC_CORE   MULADDC_CORE
 c01d898:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
 c01d89a:	fba3 6706 	umull	r6, r7, r3, r6
 c01d89e:	eb1e 0e06 	adds.w	lr, lr, r6
 c01d8a2:	bf2c      	ite	cs
 c01d8a4:	f04f 0801 	movcs.w	r8, #1
 c01d8a8:	f04f 0800 	movcc.w	r8, #0
 c01d8ac:	eb08 0907 	add.w	r9, r8, r7
 c01d8b0:	f854 7c58 	ldr.w	r7, [r4, #-88]
 c01d8b4:	f04f 0800 	mov.w	r8, #0
 c01d8b8:	eb17 070e 	adds.w	r7, r7, lr
 c01d8bc:	bf28      	it	cs
 c01d8be:	f04f 0801 	movcs.w	r8, #1
 c01d8c2:	f844 7c58 	str.w	r7, [r4, #-88]
 c01d8c6:	f855 6c14 	ldr.w	r6, [r5, #-20]
 c01d8ca:	44c8      	add	r8, r9
 c01d8cc:	fba3 6706 	umull	r6, r7, r3, r6
 c01d8d0:	eb18 0806 	adds.w	r8, r8, r6
 c01d8d4:	bf2c      	ite	cs
 c01d8d6:	f04f 0e01 	movcs.w	lr, #1
 c01d8da:	f04f 0e00 	movcc.w	lr, #0
 c01d8de:	f854 6c54 	ldr.w	r6, [r4, #-84]
 c01d8e2:	eb0e 0907 	add.w	r9, lr, r7
 c01d8e6:	eb16 0608 	adds.w	r6, r6, r8
 c01d8ea:	f04f 0e00 	mov.w	lr, #0
 c01d8ee:	bf28      	it	cs
 c01d8f0:	f04f 0e01 	movcs.w	lr, #1
 c01d8f4:	f844 6c54 	str.w	r6, [r4, #-84]
        MULADDC_CORE   MULADDC_CORE
 c01d8f8:	f855 6c10 	ldr.w	r6, [r5, #-16]
        MULADDC_CORE   MULADDC_CORE
 c01d8fc:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
 c01d8fe:	fba3 6706 	umull	r6, r7, r3, r6
 c01d902:	eb1e 0e06 	adds.w	lr, lr, r6
 c01d906:	bf2c      	ite	cs
 c01d908:	f04f 0801 	movcs.w	r8, #1
 c01d90c:	f04f 0800 	movcc.w	r8, #0
 c01d910:	eb08 0907 	add.w	r9, r8, r7
 c01d914:	f854 7c50 	ldr.w	r7, [r4, #-80]
 c01d918:	f04f 0800 	mov.w	r8, #0
 c01d91c:	eb17 070e 	adds.w	r7, r7, lr
 c01d920:	bf28      	it	cs
 c01d922:	f04f 0801 	movcs.w	r8, #1
 c01d926:	f844 7c50 	str.w	r7, [r4, #-80]
 c01d92a:	f855 6c0c 	ldr.w	r6, [r5, #-12]
 c01d92e:	44c8      	add	r8, r9
 c01d930:	fba3 6706 	umull	r6, r7, r3, r6
 c01d934:	eb18 0806 	adds.w	r8, r8, r6
 c01d938:	bf2c      	ite	cs
 c01d93a:	f04f 0e01 	movcs.w	lr, #1
 c01d93e:	f04f 0e00 	movcc.w	lr, #0
 c01d942:	f854 6c4c 	ldr.w	r6, [r4, #-76]
 c01d946:	eb0e 0907 	add.w	r9, lr, r7
 c01d94a:	eb16 0608 	adds.w	r6, r6, r8
 c01d94e:	f04f 0e00 	mov.w	lr, #0
 c01d952:	bf28      	it	cs
 c01d954:	f04f 0e01 	movcs.w	lr, #1
 c01d958:	f844 6c4c 	str.w	r6, [r4, #-76]
        MULADDC_CORE   MULADDC_CORE
 c01d95c:	f855 6c08 	ldr.w	r6, [r5, #-8]
        MULADDC_CORE   MULADDC_CORE
 c01d960:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
 c01d962:	fba3 6706 	umull	r6, r7, r3, r6
 c01d966:	eb1e 0e06 	adds.w	lr, lr, r6
 c01d96a:	bf2c      	ite	cs
 c01d96c:	f04f 0801 	movcs.w	r8, #1
 c01d970:	f04f 0800 	movcc.w	r8, #0
 c01d974:	eb08 0907 	add.w	r9, r8, r7
 c01d978:	f854 7c48 	ldr.w	r7, [r4, #-72]
 c01d97c:	f04f 0800 	mov.w	r8, #0
 c01d980:	eb17 070e 	adds.w	r7, r7, lr
 c01d984:	bf28      	it	cs
 c01d986:	f04f 0801 	movcs.w	r8, #1
 c01d98a:	f844 7c48 	str.w	r7, [r4, #-72]
 c01d98e:	f855 6c04 	ldr.w	r6, [r5, #-4]
 c01d992:	44c8      	add	r8, r9
 c01d994:	fba3 6706 	umull	r6, r7, r3, r6
 c01d998:	eb18 0806 	adds.w	r8, r8, r6
 c01d99c:	bf2c      	ite	cs
 c01d99e:	f04f 0e01 	movcs.w	lr, #1
 c01d9a2:	f04f 0e00 	movcc.w	lr, #0
 c01d9a6:	f854 6c44 	ldr.w	r6, [r4, #-68]
 c01d9aa:	4477      	add	r7, lr
 c01d9ac:	eb16 0608 	adds.w	r6, r6, r8
 c01d9b0:	f04f 0e00 	mov.w	lr, #0
 c01d9b4:	bf28      	it	cs
 c01d9b6:	f04f 0e01 	movcs.w	lr, #1
 c01d9ba:	f844 6c44 	str.w	r6, [r4, #-68]
 c01d9be:	44be      	add	lr, r7
 c01d9c0:	e5ac      	b.n	c01d51c <mpi_mul_hlp+0x10>
        MULADDC_CORE
 c01d9c2:	f855 6b04 	ldr.w	r6, [r5], #4
 c01d9c6:	fba3 7806 	umull	r7, r8, r3, r6
 c01d9ca:	eb1e 0e07 	adds.w	lr, lr, r7
 c01d9ce:	bf2c      	ite	cs
 c01d9d0:	2601      	movcs	r6, #1
 c01d9d2:	2600      	movcc	r6, #0
 c01d9d4:	eb1e 0202 	adds.w	r2, lr, r2
 c01d9d8:	bf2c      	ite	cs
 c01d9da:	f04f 0e01 	movcs.w	lr, #1
 c01d9de:	f04f 0e00 	movcc.w	lr, #0
 c01d9e2:	4446      	add	r6, r8
 c01d9e4:	f841 2c04 	str.w	r2, [r1, #-4]
 c01d9e8:	44b6      	add	lr, r6
 c01d9ea:	e647      	b.n	c01d67c <mpi_mul_hlp+0x170>

0c01d9ec <mpi_bigendian_to_host.part.1>:
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
 c01d9ec:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 c01d9f0:	3901      	subs	r1, #1
 c01d9f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 c01d9f6:	4288      	cmp	r0, r1
 c01d9f8:	4603      	mov	r3, r0
 c01d9fa:	d900      	bls.n	c01d9fe <mpi_bigendian_to_host.part.1+0x12>
}
 c01d9fc:	4770      	bx	lr
            return( __builtin_bswap32(x) );
 c01d9fe:	681b      	ldr	r3, [r3, #0]
 c01da00:	680a      	ldr	r2, [r1, #0]
 c01da02:	ba1b      	rev	r3, r3
 c01da04:	ba12      	rev	r2, r2
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
 c01da06:	f840 2b04 	str.w	r2, [r0], #4
        *cur_limb_right = tmp;
 c01da0a:	f841 3904 	str.w	r3, [r1], #-4
 c01da0e:	e7f2      	b.n	c01d9f6 <mpi_bigendian_to_host.part.1+0xa>

0c01da10 <mbedtls_mpi_mod_int.part.5>:
    }

    /*
     * general case
     */
    for( i = A->n, y = 0; i > 0; i-- )
 c01da10:	2300      	movs	r3, #0
int mbedtls_mpi_mod_int( mbedtls_mpi_uint *r, const mbedtls_mpi *A, mbedtls_mpi_sint b )
 c01da12:	b5f0      	push	{r4, r5, r6, r7, lr}
    for( i = A->n, y = 0; i > 0; i-- )
 c01da14:	684e      	ldr	r6, [r1, #4]
 c01da16:	00b7      	lsls	r7, r6, #2
 c01da18:	3f04      	subs	r7, #4
 c01da1a:	b93e      	cbnz	r6, c01da2c <mbedtls_mpi_mod_int.part.5+0x1c>

    /*
     * If A is negative, then the current y represents a negative value.
     * Flipping it to the positive side.
     */
    if( A->s < 0 && y != 0 )
 c01da1c:	6809      	ldr	r1, [r1, #0]
 c01da1e:	2900      	cmp	r1, #0
 c01da20:	da01      	bge.n	c01da26 <mbedtls_mpi_mod_int.part.5+0x16>
 c01da22:	b103      	cbz	r3, c01da26 <mbedtls_mpi_mod_int.part.5+0x16>
        y = b - y;
 c01da24:	1ad3      	subs	r3, r2, r3

    *r = y;
 c01da26:	6003      	str	r3, [r0, #0]

    return( 0 );
}
 c01da28:	2000      	movs	r0, #0
 c01da2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        x  = A->p[i - 1];
 c01da2c:	688c      	ldr	r4, [r1, #8]
    for( i = A->n, y = 0; i > 0; i-- )
 c01da2e:	3e01      	subs	r6, #1
        x  = A->p[i - 1];
 c01da30:	59e5      	ldr	r5, [r4, r7]
        y  = ( y << biH ) | ( x >> biH );
 c01da32:	0c2c      	lsrs	r4, r5, #16
 c01da34:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
        y  = ( y << biH ) | ( x >> biH );
 c01da38:	fbb3 f4f2 	udiv	r4, r3, r2
 c01da3c:	fb02 3314 	mls	r3, r2, r4, r3
 c01da40:	b2ac      	uxth	r4, r5
 c01da42:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 c01da46:	fbb4 f3f2 	udiv	r3, r4, r2
 c01da4a:	fb02 4313 	mls	r3, r2, r3, r4
 c01da4e:	e7e3      	b.n	c01da18 <mbedtls_mpi_mod_int.part.5+0x8>

0c01da50 <mbedtls_mpi_init>:
    X->n = 0;
 c01da50:	2300      	movs	r3, #0
 c01da52:	2201      	movs	r2, #1
    X->p = NULL;
 c01da54:	6083      	str	r3, [r0, #8]
    X->n = 0;
 c01da56:	e9c0 2300 	strd	r2, r3, [r0]
}
 c01da5a:	4770      	bx	lr

0c01da5c <mbedtls_mpi_free>:
{
 c01da5c:	b510      	push	{r4, lr}
    if( X == NULL )
 c01da5e:	4604      	mov	r4, r0
 c01da60:	b168      	cbz	r0, c01da7e <mbedtls_mpi_free+0x22>
    if( X->p != NULL )
 c01da62:	6880      	ldr	r0, [r0, #8]
 c01da64:	b130      	cbz	r0, c01da74 <mbedtls_mpi_free+0x18>
    mbedtls_platform_zeroize( v, ciL * n );
 c01da66:	6861      	ldr	r1, [r4, #4]
 c01da68:	0089      	lsls	r1, r1, #2
 c01da6a:	f008 fe5d 	bl	c026728 <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 c01da6e:	68a0      	ldr	r0, [r4, #8]
 c01da70:	f008 fe4a 	bl	c026708 <mbedtls_free>
    X->n = 0;
 c01da74:	2300      	movs	r3, #0
 c01da76:	2201      	movs	r2, #1
 c01da78:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
 c01da7c:	60a3      	str	r3, [r4, #8]
}
 c01da7e:	bd10      	pop	{r4, pc}

0c01da80 <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 c01da80:	f242 7310 	movw	r3, #10000	; 0x2710
 c01da84:	4299      	cmp	r1, r3
{
 c01da86:	b570      	push	{r4, r5, r6, lr}
 c01da88:	4604      	mov	r4, r0
 c01da8a:	460d      	mov	r5, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 c01da8c:	d902      	bls.n	c01da94 <mbedtls_mpi_grow+0x14>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 c01da8e:	f06f 000f 	mvn.w	r0, #15
}
 c01da92:	bd70      	pop	{r4, r5, r6, pc}
    if( X->n < nblimbs )
 c01da94:	6843      	ldr	r3, [r0, #4]
 c01da96:	428b      	cmp	r3, r1
 c01da98:	d216      	bcs.n	c01dac8 <mbedtls_mpi_grow+0x48>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 c01da9a:	2104      	movs	r1, #4
 c01da9c:	4628      	mov	r0, r5
 c01da9e:	f008 fe2d 	bl	c0266fc <mbedtls_calloc>
 c01daa2:	4606      	mov	r6, r0
 c01daa4:	2800      	cmp	r0, #0
 c01daa6:	d0f2      	beq.n	c01da8e <mbedtls_mpi_grow+0xe>
        if( X->p != NULL )
 c01daa8:	68a1      	ldr	r1, [r4, #8]
 c01daaa:	b159      	cbz	r1, c01dac4 <mbedtls_mpi_grow+0x44>
            memcpy( p, X->p, X->n * ciL );
 c01daac:	6862      	ldr	r2, [r4, #4]
 c01daae:	0092      	lsls	r2, r2, #2
 c01dab0:	f7f6 ff65 	bl	c01497e <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
 c01dab4:	6861      	ldr	r1, [r4, #4]
 c01dab6:	68a0      	ldr	r0, [r4, #8]
 c01dab8:	0089      	lsls	r1, r1, #2
 c01daba:	f008 fe35 	bl	c026728 <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 c01dabe:	68a0      	ldr	r0, [r4, #8]
 c01dac0:	f008 fe22 	bl	c026708 <mbedtls_free>
        X->p = p;
 c01dac4:	e9c4 5601 	strd	r5, r6, [r4, #4]
    return( 0 );
 c01dac8:	2000      	movs	r0, #0
 c01daca:	e7e2      	b.n	c01da92 <mbedtls_mpi_grow+0x12>

0c01dacc <mbedtls_mpi_shrink>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 c01dacc:	f242 7310 	movw	r3, #10000	; 0x2710
 c01dad0:	4299      	cmp	r1, r3
{
 c01dad2:	b570      	push	{r4, r5, r6, lr}
 c01dad4:	4604      	mov	r4, r0
 c01dad6:	460d      	mov	r5, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 c01dad8:	d902      	bls.n	c01dae0 <mbedtls_mpi_shrink+0x14>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 c01dada:	f06f 000f 	mvn.w	r0, #15
}
 c01dade:	bd70      	pop	{r4, r5, r6, pc}
    if( X->n <= nblimbs )
 c01dae0:	6843      	ldr	r3, [r0, #4]
 c01dae2:	428b      	cmp	r3, r1
 c01dae4:	d803      	bhi.n	c01daee <mbedtls_mpi_shrink+0x22>
}
 c01dae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return( mbedtls_mpi_grow( X, nblimbs ) );
 c01daea:	f7ff bfc9 	b.w	c01da80 <mbedtls_mpi_grow>
    for( i = X->n - 1; i > 0; i-- )
 c01daee:	1e5a      	subs	r2, r3, #1
 c01daf0:	009b      	lsls	r3, r3, #2
 c01daf2:	b9da      	cbnz	r2, c01db2c <mbedtls_mpi_shrink+0x60>
    i++;
 c01daf4:	3201      	adds	r2, #1
 c01daf6:	4295      	cmp	r5, r2
 c01daf8:	bf38      	it	cc
 c01dafa:	4615      	movcc	r5, r2
    if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( i, ciL ) ) == NULL )
 c01dafc:	2104      	movs	r1, #4
 c01dafe:	4628      	mov	r0, r5
 c01db00:	f008 fdfc 	bl	c0266fc <mbedtls_calloc>
 c01db04:	4606      	mov	r6, r0
 c01db06:	2800      	cmp	r0, #0
 c01db08:	d0e7      	beq.n	c01dada <mbedtls_mpi_shrink+0xe>
    if( X->p != NULL )
 c01db0a:	68a1      	ldr	r1, [r4, #8]
 c01db0c:	b151      	cbz	r1, c01db24 <mbedtls_mpi_shrink+0x58>
        memcpy( p, X->p, i * ciL );
 c01db0e:	00aa      	lsls	r2, r5, #2
 c01db10:	f7f6 ff35 	bl	c01497e <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
 c01db14:	6861      	ldr	r1, [r4, #4]
 c01db16:	68a0      	ldr	r0, [r4, #8]
 c01db18:	0089      	lsls	r1, r1, #2
 c01db1a:	f008 fe05 	bl	c026728 <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 c01db1e:	68a0      	ldr	r0, [r4, #8]
 c01db20:	f008 fdf2 	bl	c026708 <mbedtls_free>
    X->p = p;
 c01db24:	e9c4 5601 	strd	r5, r6, [r4, #4]
    return( 0 );
 c01db28:	2000      	movs	r0, #0
 c01db2a:	e7d8      	b.n	c01dade <mbedtls_mpi_shrink+0x12>
        if( X->p[i] != 0 )
 c01db2c:	68a1      	ldr	r1, [r4, #8]
 c01db2e:	4419      	add	r1, r3
 c01db30:	f851 1c04 	ldr.w	r1, [r1, #-4]
 c01db34:	3b04      	subs	r3, #4
 c01db36:	2900      	cmp	r1, #0
 c01db38:	d1dc      	bne.n	c01daf4 <mbedtls_mpi_shrink+0x28>
    for( i = X->n - 1; i > 0; i-- )
 c01db3a:	3a01      	subs	r2, #1
 c01db3c:	e7d9      	b.n	c01daf2 <mbedtls_mpi_shrink+0x26>

0c01db3e <mbedtls_mpi_copy>:
    if( X == Y )
 c01db3e:	4288      	cmp	r0, r1
{
 c01db40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c01db42:	4606      	mov	r6, r0
 c01db44:	460f      	mov	r7, r1
    if( X == Y )
 c01db46:	d003      	beq.n	c01db50 <mbedtls_mpi_copy+0x12>
    if( Y->p == NULL )
 c01db48:	688d      	ldr	r5, [r1, #8]
 c01db4a:	b91d      	cbnz	r5, c01db54 <mbedtls_mpi_copy+0x16>
        mbedtls_mpi_free( X );
 c01db4c:	f7ff ff86 	bl	c01da5c <mbedtls_mpi_free>
        return( 0 );
 c01db50:	2000      	movs	r0, #0
 c01db52:	e011      	b.n	c01db78 <mbedtls_mpi_copy+0x3a>
    for( i = Y->n - 1; i > 0; i-- )
 c01db54:	684c      	ldr	r4, [r1, #4]
 c01db56:	3c01      	subs	r4, #1
 c01db58:	b11c      	cbz	r4, c01db62 <mbedtls_mpi_copy+0x24>
        if( Y->p[i] != 0 )
 c01db5a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 c01db5e:	2b00      	cmp	r3, #0
 c01db60:	d0f9      	beq.n	c01db56 <mbedtls_mpi_copy+0x18>
    if( X->n < i )
 c01db62:	6872      	ldr	r2, [r6, #4]
    i++;
 c01db64:	3401      	adds	r4, #1
    X->s = Y->s;
 c01db66:	683b      	ldr	r3, [r7, #0]
    if( X->n < i )
 c01db68:	42a2      	cmp	r2, r4
    X->s = Y->s;
 c01db6a:	6033      	str	r3, [r6, #0]
    if( X->n < i )
 c01db6c:	d205      	bcs.n	c01db7a <mbedtls_mpi_copy+0x3c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 c01db6e:	4621      	mov	r1, r4
 c01db70:	4630      	mov	r0, r6
 c01db72:	f7ff ff85 	bl	c01da80 <mbedtls_mpi_grow>
 c01db76:	b140      	cbz	r0, c01db8a <mbedtls_mpi_copy+0x4c>
}
 c01db78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memset( X->p + i, 0, ( X->n - i ) * ciL );
 c01db7a:	68b0      	ldr	r0, [r6, #8]
 c01db7c:	1b12      	subs	r2, r2, r4
 c01db7e:	0092      	lsls	r2, r2, #2
 c01db80:	2100      	movs	r1, #0
 c01db82:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 c01db86:	f7f6 ff1e 	bl	c0149c6 <memset>
    memcpy( X->p, Y->p, i * ciL );
 c01db8a:	00a2      	lsls	r2, r4, #2
 c01db8c:	68b9      	ldr	r1, [r7, #8]
 c01db8e:	68b0      	ldr	r0, [r6, #8]
 c01db90:	f7f6 fef5 	bl	c01497e <memcpy>
 c01db94:	e7dc      	b.n	c01db50 <mbedtls_mpi_copy+0x12>

0c01db96 <mbedtls_mpi_swap>:
{
 c01db96:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 c01db98:	4603      	mov	r3, r0
 c01db9a:	460a      	mov	r2, r1
    memcpy( &T,  X, sizeof( mbedtls_mpi ) );
 c01db9c:	6800      	ldr	r0, [r0, #0]
 c01db9e:	6859      	ldr	r1, [r3, #4]
 c01dba0:	ac01      	add	r4, sp, #4
 c01dba2:	c403      	stmia	r4!, {r0, r1}
    memcpy(  X,  Y, sizeof( mbedtls_mpi ) );
 c01dba4:	6811      	ldr	r1, [r2, #0]
    memcpy( &T,  X, sizeof( mbedtls_mpi ) );
 c01dba6:	689c      	ldr	r4, [r3, #8]
    memcpy(  X,  Y, sizeof( mbedtls_mpi ) );
 c01dba8:	6019      	str	r1, [r3, #0]
 c01dbaa:	6851      	ldr	r1, [r2, #4]
 c01dbac:	6059      	str	r1, [r3, #4]
 c01dbae:	6891      	ldr	r1, [r2, #8]
 c01dbb0:	6099      	str	r1, [r3, #8]
    memcpy(  Y, &T, sizeof( mbedtls_mpi ) );
 c01dbb2:	ab01      	add	r3, sp, #4
 c01dbb4:	cb03      	ldmia	r3!, {r0, r1}
 c01dbb6:	6094      	str	r4, [r2, #8]
 c01dbb8:	6010      	str	r0, [r2, #0]
 c01dbba:	6051      	str	r1, [r2, #4]
}
 c01dbbc:	b004      	add	sp, #16
 c01dbbe:	bd10      	pop	{r4, pc}

0c01dbc0 <mbedtls_mpi_safe_cond_assign>:
{
 c01dbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c01dbc2:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 c01dbc4:	6849      	ldr	r1, [r1, #4]
{
 c01dbc6:	4605      	mov	r5, r0
 c01dbc8:	4614      	mov	r4, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 c01dbca:	f7ff ff59 	bl	c01da80 <mbedtls_mpi_grow>
 c01dbce:	b9b0      	cbnz	r0, c01dbfe <mbedtls_mpi_safe_cond_assign+0x3e>
    assign = (assign | (unsigned char)-assign) >> 7;
 c01dbd0:	4262      	negs	r2, r4
 c01dbd2:	4322      	orrs	r2, r4
    X->s = X->s * ( 1 - assign ) + Y->s * assign;
 c01dbd4:	6831      	ldr	r1, [r6, #0]
    assign = (assign | (unsigned char)-assign) >> 7;
 c01dbd6:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    X->s = X->s * ( 1 - assign ) + Y->s * assign;
 c01dbda:	4351      	muls	r1, r2
 c01dbdc:	682b      	ldr	r3, [r5, #0]
 c01dbde:	f1c2 0401 	rsb	r4, r2, #1
 c01dbe2:	fb03 1304 	mla	r3, r3, r4, r1
 c01dbe6:	602b      	str	r3, [r5, #0]
    for( i = 0; i < Y->n; i++ )
 c01dbe8:	4603      	mov	r3, r0
 c01dbea:	f8d6 e004 	ldr.w	lr, [r6, #4]
 c01dbee:	459e      	cmp	lr, r3
 c01dbf0:	ea4f 0183 	mov.w	r1, r3, lsl #2
 c01dbf4:	d104      	bne.n	c01dc00 <mbedtls_mpi_safe_cond_assign+0x40>
 c01dbf6:	460a      	mov	r2, r1
    for( ; i < X->n; i++ )
 c01dbf8:	686f      	ldr	r7, [r5, #4]
 c01dbfa:	429f      	cmp	r7, r3
 c01dbfc:	d80e      	bhi.n	c01dc1c <mbedtls_mpi_safe_cond_assign+0x5c>
}
 c01dbfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;
 c01dc00:	f8d5 c008 	ldr.w	ip, [r5, #8]
 c01dc04:	68b1      	ldr	r1, [r6, #8]
 c01dc06:	f85c 7023 	ldr.w	r7, [ip, r3, lsl #2]
 c01dc0a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 c01dc0e:	4367      	muls	r7, r4
 c01dc10:	fb01 7102 	mla	r1, r1, r2, r7
 c01dc14:	f84c 1023 	str.w	r1, [ip, r3, lsl #2]
    for( i = 0; i < Y->n; i++ )
 c01dc18:	3301      	adds	r3, #1
 c01dc1a:	e7e8      	b.n	c01dbee <mbedtls_mpi_safe_cond_assign+0x2e>
        X->p[i] *= ( 1 - assign );
 c01dc1c:	68ae      	ldr	r6, [r5, #8]
    for( ; i < X->n; i++ )
 c01dc1e:	3301      	adds	r3, #1
        X->p[i] *= ( 1 - assign );
 c01dc20:	58b1      	ldr	r1, [r6, r2]
 c01dc22:	4361      	muls	r1, r4
 c01dc24:	50b1      	str	r1, [r6, r2]
 c01dc26:	3204      	adds	r2, #4
 c01dc28:	e7e7      	b.n	c01dbfa <mbedtls_mpi_safe_cond_assign+0x3a>

0c01dc2a <mbedtls_mpi_safe_cond_swap>:
    if( X == Y )
 c01dc2a:	4288      	cmp	r0, r1
{
 c01dc2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c01dc30:	4605      	mov	r5, r0
 c01dc32:	460c      	mov	r4, r1
 c01dc34:	4616      	mov	r6, r2
    if( X == Y )
 c01dc36:	d102      	bne.n	c01dc3e <mbedtls_mpi_safe_cond_swap+0x14>
        return( 0 );
 c01dc38:	2000      	movs	r0, #0
}
 c01dc3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 c01dc3e:	6849      	ldr	r1, [r1, #4]
 c01dc40:	f7ff ff1e 	bl	c01da80 <mbedtls_mpi_grow>
 c01dc44:	2800      	cmp	r0, #0
 c01dc46:	d1f8      	bne.n	c01dc3a <mbedtls_mpi_safe_cond_swap+0x10>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( Y, X->n ) );
 c01dc48:	6869      	ldr	r1, [r5, #4]
 c01dc4a:	4620      	mov	r0, r4
 c01dc4c:	f7ff ff18 	bl	c01da80 <mbedtls_mpi_grow>
 c01dc50:	2800      	cmp	r0, #0
 c01dc52:	d1f2      	bne.n	c01dc3a <mbedtls_mpi_safe_cond_swap+0x10>
    swap = (swap | (unsigned char)-swap) >> 7;
 c01dc54:	4272      	negs	r2, r6
 c01dc56:	4332      	orrs	r2, r6
    s = X->s;
 c01dc58:	6829      	ldr	r1, [r5, #0]
    swap = (swap | (unsigned char)-swap) >> 7;
 c01dc5a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    X->s = X->s * ( 1 - swap ) + Y->s * swap;
 c01dc5e:	f1c2 0301 	rsb	r3, r2, #1
 c01dc62:	fb01 f703 	mul.w	r7, r1, r3
 c01dc66:	6826      	ldr	r6, [r4, #0]
    Y->s = Y->s * ( 1 - swap ) +    s * swap;
 c01dc68:	4351      	muls	r1, r2
    X->s = X->s * ( 1 - swap ) + Y->s * swap;
 c01dc6a:	fb06 7602 	mla	r6, r6, r2, r7
 c01dc6e:	602e      	str	r6, [r5, #0]
    Y->s = Y->s * ( 1 - swap ) +    s * swap;
 c01dc70:	6826      	ldr	r6, [r4, #0]
    for( i = 0; i < X->n; i++ )
 c01dc72:	f8d5 c004 	ldr.w	ip, [r5, #4]
    Y->s = Y->s * ( 1 - swap ) +    s * swap;
 c01dc76:	fb06 1103 	mla	r1, r6, r3, r1
 c01dc7a:	6021      	str	r1, [r4, #0]
    for( i = 0; i < X->n; i++ )
 c01dc7c:	4584      	cmp	ip, r0
 c01dc7e:	d0db      	beq.n	c01dc38 <mbedtls_mpi_safe_cond_swap+0xe>
        tmp = X->p[i];
 c01dc80:	f8d5 e008 	ldr.w	lr, [r5, #8]
        X->p[i] = X->p[i] * ( 1 - swap ) + Y->p[i] * swap;
 c01dc84:	68a7      	ldr	r7, [r4, #8]
        tmp = X->p[i];
 c01dc86:	f85e 1020 	ldr.w	r1, [lr, r0, lsl #2]
        X->p[i] = X->p[i] * ( 1 - swap ) + Y->p[i] * swap;
 c01dc8a:	f857 6020 	ldr.w	r6, [r7, r0, lsl #2]
 c01dc8e:	fb01 f803 	mul.w	r8, r1, r3
 c01dc92:	fb06 8602 	mla	r6, r6, r2, r8
        Y->p[i] = Y->p[i] * ( 1 - swap ) +     tmp * swap;
 c01dc96:	4351      	muls	r1, r2
        X->p[i] = X->p[i] * ( 1 - swap ) + Y->p[i] * swap;
 c01dc98:	f84e 6020 	str.w	r6, [lr, r0, lsl #2]
        Y->p[i] = Y->p[i] * ( 1 - swap ) +     tmp * swap;
 c01dc9c:	f857 6020 	ldr.w	r6, [r7, r0, lsl #2]
 c01dca0:	fb06 1103 	mla	r1, r6, r3, r1
 c01dca4:	f847 1020 	str.w	r1, [r7, r0, lsl #2]
    for( i = 0; i < X->n; i++ )
 c01dca8:	3001      	adds	r0, #1
 c01dcaa:	e7e7      	b.n	c01dc7c <mbedtls_mpi_safe_cond_swap+0x52>

0c01dcac <mbedtls_mpi_lset>:
{
 c01dcac:	b570      	push	{r4, r5, r6, lr}
 c01dcae:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 c01dcb0:	2101      	movs	r1, #1
{
 c01dcb2:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 c01dcb4:	f7ff fee4 	bl	c01da80 <mbedtls_mpi_grow>
 c01dcb8:	4605      	mov	r5, r0
 c01dcba:	b988      	cbnz	r0, c01dce0 <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
 c01dcbc:	6862      	ldr	r2, [r4, #4]
 c01dcbe:	4601      	mov	r1, r0
 c01dcc0:	0092      	lsls	r2, r2, #2
 c01dcc2:	68a0      	ldr	r0, [r4, #8]
 c01dcc4:	f7f6 fe7f 	bl	c0149c6 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
 c01dcc8:	68a3      	ldr	r3, [r4, #8]
 c01dcca:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
 c01dcce:	2e00      	cmp	r6, #0
    X->p[0] = ( z < 0 ) ? -z : z;
 c01dcd0:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
 c01dcd4:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 c01dcd6:	bfb4      	ite	lt
 c01dcd8:	f04f 33ff 	movlt.w	r3, #4294967295
 c01dcdc:	2301      	movge	r3, #1
 c01dcde:	6023      	str	r3, [r4, #0]
}
 c01dce0:	4628      	mov	r0, r5
 c01dce2:	bd70      	pop	{r4, r5, r6, pc}

0c01dce4 <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
 c01dce4:	6843      	ldr	r3, [r0, #4]
 c01dce6:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 c01dcea:	bf3f      	itttt	cc
 c01dcec:	6883      	ldrcc	r3, [r0, #8]
 c01dcee:	094a      	lsrcc	r2, r1, #5
 c01dcf0:	f853 0022 	ldrcc.w	r0, [r3, r2, lsl #2]
 c01dcf4:	f001 011f 	andcc.w	r1, r1, #31
 c01dcf8:	bf3a      	itte	cc
 c01dcfa:	40c8      	lsrcc	r0, r1
 c01dcfc:	f000 0001 	andcc.w	r0, r0, #1
        return( 0 );
 c01dd00:	2000      	movcs	r0, #0
}
 c01dd02:	4770      	bx	lr

0c01dd04 <mbedtls_mpi_set_bit>:
    if( val != 0 && val != 1 )
 c01dd04:	2a01      	cmp	r2, #1
{
 c01dd06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c01dd08:	4607      	mov	r7, r0
 c01dd0a:	460c      	mov	r4, r1
 c01dd0c:	4615      	mov	r5, r2
    size_t off = pos / biL;
 c01dd0e:	ea4f 1651 	mov.w	r6, r1, lsr #5
    if( val != 0 && val != 1 )
 c01dd12:	d81b      	bhi.n	c01dd4c <mbedtls_mpi_set_bit+0x48>
    if( X->n * biL <= pos )
 c01dd14:	6843      	ldr	r3, [r0, #4]
 c01dd16:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
 c01dd1a:	d210      	bcs.n	c01dd3e <mbedtls_mpi_set_bit+0x3a>
    X->p[off] &= ~( (mbedtls_mpi_uint) 0x01 << idx );
 c01dd1c:	2301      	movs	r3, #1
    X->p[off] |= (mbedtls_mpi_uint) val << idx;
 c01dd1e:	2000      	movs	r0, #0
    X->p[off] &= ~( (mbedtls_mpi_uint) 0x01 << idx );
 c01dd20:	68b9      	ldr	r1, [r7, #8]
    size_t idx = pos % biL;
 c01dd22:	f004 041f 	and.w	r4, r4, #31
    X->p[off] &= ~( (mbedtls_mpi_uint) 0x01 << idx );
 c01dd26:	fa03 f204 	lsl.w	r2, r3, r4
 c01dd2a:	f851 3026 	ldr.w	r3, [r1, r6, lsl #2]
    X->p[off] |= (mbedtls_mpi_uint) val << idx;
 c01dd2e:	fa05 f404 	lsl.w	r4, r5, r4
    X->p[off] &= ~( (mbedtls_mpi_uint) 0x01 << idx );
 c01dd32:	ea23 0302 	bic.w	r3, r3, r2
    X->p[off] |= (mbedtls_mpi_uint) val << idx;
 c01dd36:	431c      	orrs	r4, r3
 c01dd38:	f841 4026 	str.w	r4, [r1, r6, lsl #2]
}
 c01dd3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if( val == 0 )
 c01dd3e:	b142      	cbz	r2, c01dd52 <mbedtls_mpi_set_bit+0x4e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, off + 1 ) );
 c01dd40:	1c71      	adds	r1, r6, #1
 c01dd42:	f7ff fe9d 	bl	c01da80 <mbedtls_mpi_grow>
 c01dd46:	2800      	cmp	r0, #0
 c01dd48:	d0e8      	beq.n	c01dd1c <mbedtls_mpi_set_bit+0x18>
 c01dd4a:	e7f7      	b.n	c01dd3c <mbedtls_mpi_set_bit+0x38>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 c01dd4c:	f06f 0003 	mvn.w	r0, #3
 c01dd50:	e7f4      	b.n	c01dd3c <mbedtls_mpi_set_bit+0x38>
            return( 0 );
 c01dd52:	4610      	mov	r0, r2
 c01dd54:	e7f2      	b.n	c01dd3c <mbedtls_mpi_set_bit+0x38>

0c01dd56 <mbedtls_mpi_lsb>:
    size_t i, j, count = 0;
 c01dd56:	2100      	movs	r1, #0
{
 c01dd58:	b5f0      	push	{r4, r5, r6, r7, lr}
    for( i = 0; i < X->n; i++ )
 c01dd5a:	460a      	mov	r2, r1
{
 c01dd5c:	4604      	mov	r4, r0
    for( i = 0; i < X->n; i++ )
 c01dd5e:	6845      	ldr	r5, [r0, #4]
 c01dd60:	4295      	cmp	r5, r2
 c01dd62:	d101      	bne.n	c01dd68 <mbedtls_mpi_lsb+0x12>
    return( 0 );
 c01dd64:	2000      	movs	r0, #0
}
 c01dd66:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 c01dd68:	68a3      	ldr	r3, [r4, #8]
 c01dd6a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
        for( j = 0; j < biL; j++, count++ )
 c01dd6e:	2300      	movs	r3, #0
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 c01dd70:	fa26 f703 	lsr.w	r7, r6, r3
 c01dd74:	07ff      	lsls	r7, r7, #31
 c01dd76:	eb01 0003 	add.w	r0, r1, r3
 c01dd7a:	d4f4      	bmi.n	c01dd66 <mbedtls_mpi_lsb+0x10>
        for( j = 0; j < biL; j++, count++ )
 c01dd7c:	3301      	adds	r3, #1
 c01dd7e:	2b20      	cmp	r3, #32
 c01dd80:	eb01 0003 	add.w	r0, r1, r3
 c01dd84:	d1f4      	bne.n	c01dd70 <mbedtls_mpi_lsb+0x1a>
    for( i = 0; i < X->n; i++ )
 c01dd86:	3201      	adds	r2, #1
        for( j = 0; j < biL; j++, count++ )
 c01dd88:	4601      	mov	r1, r0
 c01dd8a:	e7e9      	b.n	c01dd60 <mbedtls_mpi_lsb+0xa>

0c01dd8c <mbedtls_mpi_bitlen>:
    if( X->n == 0 )
 c01dd8c:	6843      	ldr	r3, [r0, #4]
 c01dd8e:	b1db      	cbz	r3, c01ddc8 <mbedtls_mpi_bitlen+0x3c>
 c01dd90:	6881      	ldr	r1, [r0, #8]
    for( i = X->n - 1; i > 0; i-- )
 c01dd92:	1e5a      	subs	r2, r3, #1
 c01dd94:	009b      	lsls	r3, r3, #2
 c01dd96:	b97a      	cbnz	r2, c01ddb8 <mbedtls_mpi_bitlen+0x2c>
    for( j = 0; j < biL; j++ )
 c01dd98:	2000      	movs	r0, #0
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 c01dd9a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    j = biL - mbedtls_clz( X->p[i] );
 c01dd9e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
        if( x & mask ) break;
 c01dda2:	4219      	tst	r1, r3
 c01dda4:	d104      	bne.n	c01ddb0 <mbedtls_mpi_bitlen+0x24>
    for( j = 0; j < biL; j++ )
 c01dda6:	3001      	adds	r0, #1
 c01dda8:	2820      	cmp	r0, #32
        mask >>= 1;
 c01ddaa:	ea4f 0353 	mov.w	r3, r3, lsr #1
    for( j = 0; j < biL; j++ )
 c01ddae:	d1f8      	bne.n	c01dda2 <mbedtls_mpi_bitlen+0x16>
    return( ( i * biL ) + j );
 c01ddb0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 c01ddb4:	3020      	adds	r0, #32
 c01ddb6:	4770      	bx	lr
        if( X->p[i] != 0 )
 c01ddb8:	18c8      	adds	r0, r1, r3
 c01ddba:	f850 0c04 	ldr.w	r0, [r0, #-4]
 c01ddbe:	3b04      	subs	r3, #4
 c01ddc0:	2800      	cmp	r0, #0
 c01ddc2:	d1e9      	bne.n	c01dd98 <mbedtls_mpi_bitlen+0xc>
    for( i = X->n - 1; i > 0; i-- )
 c01ddc4:	3a01      	subs	r2, #1
 c01ddc6:	e7e6      	b.n	c01dd96 <mbedtls_mpi_bitlen+0xa>
        return( 0 );
 c01ddc8:	4618      	mov	r0, r3
}
 c01ddca:	4770      	bx	lr

0c01ddcc <mbedtls_mpi_size>:
{
 c01ddcc:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 c01ddce:	f7ff ffdd 	bl	c01dd8c <mbedtls_mpi_bitlen>
 c01ddd2:	3007      	adds	r0, #7
}
 c01ddd4:	08c0      	lsrs	r0, r0, #3
 c01ddd6:	bd08      	pop	{r3, pc}

0c01ddd8 <mbedtls_mpi_read_binary_le>:
{
 c01ddd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c01ddda:	460f      	mov	r7, r1
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 c01dddc:	f012 0103 	ands.w	r1, r2, #3
 c01dde0:	bf18      	it	ne
 c01dde2:	2101      	movne	r1, #1
    if( X->n != limbs )
 c01dde4:	6843      	ldr	r3, [r0, #4]
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 c01dde6:	eb01 0592 	add.w	r5, r1, r2, lsr #2
    if( X->n != limbs )
 c01ddea:	42ab      	cmp	r3, r5
{
 c01ddec:	4604      	mov	r4, r0
 c01ddee:	4616      	mov	r6, r2
    if( X->n != limbs )
 c01ddf0:	d118      	bne.n	c01de24 <mbedtls_mpi_read_binary_le+0x4c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 c01ddf2:	2100      	movs	r1, #0
 c01ddf4:	4620      	mov	r0, r4
 c01ddf6:	f7ff ff59 	bl	c01dcac <mbedtls_mpi_lset>
 c01ddfa:	bb00      	cbnz	r0, c01de3e <mbedtls_mpi_read_binary_le+0x66>
    for( i = 0; i < buflen; i++ )
 c01ddfc:	4603      	mov	r3, r0
 c01ddfe:	42b3      	cmp	r3, r6
 c01de00:	d01d      	beq.n	c01de3e <mbedtls_mpi_read_binary_le+0x66>
        X->p[i / ciL] |= ((mbedtls_mpi_uint) buf[i]) << ((i % ciL) << 3);
 c01de02:	5cfa      	ldrb	r2, [r7, r3]
 c01de04:	f8d4 c008 	ldr.w	ip, [r4, #8]
 c01de08:	00d9      	lsls	r1, r3, #3
 c01de0a:	f023 0503 	bic.w	r5, r3, #3
 c01de0e:	f001 0118 	and.w	r1, r1, #24
 c01de12:	fa02 f101 	lsl.w	r1, r2, r1
 c01de16:	f85c 2005 	ldr.w	r2, [ip, r5]
    for( i = 0; i < buflen; i++ )
 c01de1a:	3301      	adds	r3, #1
        X->p[i / ciL] |= ((mbedtls_mpi_uint) buf[i]) << ((i % ciL) << 3);
 c01de1c:	430a      	orrs	r2, r1
 c01de1e:	f84c 2005 	str.w	r2, [ip, r5]
 c01de22:	e7ec      	b.n	c01ddfe <mbedtls_mpi_read_binary_le+0x26>
        mbedtls_mpi_free( X );
 c01de24:	f7ff fe1a 	bl	c01da5c <mbedtls_mpi_free>
    X->n = 0;
 c01de28:	2300      	movs	r3, #0
 c01de2a:	2201      	movs	r2, #1
    X->p = NULL;
 c01de2c:	60a3      	str	r3, [r4, #8]
    X->n = 0;
 c01de2e:	e9c4 2300 	strd	r2, r3, [r4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 c01de32:	4629      	mov	r1, r5
 c01de34:	4620      	mov	r0, r4
 c01de36:	f7ff fe23 	bl	c01da80 <mbedtls_mpi_grow>
 c01de3a:	2800      	cmp	r0, #0
 c01de3c:	d0d9      	beq.n	c01ddf2 <mbedtls_mpi_read_binary_le+0x1a>
}
 c01de3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0c01de40 <mbedtls_mpi_read_binary>:
{
 c01de40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
 c01de44:	f012 0403 	ands.w	r4, r2, #3
 c01de48:	bf18      	it	ne
 c01de4a:	2401      	movne	r4, #1
    if( X->n != limbs )
 c01de4c:	6843      	ldr	r3, [r0, #4]
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
 c01de4e:	eb04 0492 	add.w	r4, r4, r2, lsr #2
    if( X->n != limbs )
 c01de52:	42a3      	cmp	r3, r4
{
 c01de54:	4607      	mov	r7, r0
 c01de56:	4688      	mov	r8, r1
 c01de58:	4615      	mov	r5, r2
    if( X->n != limbs )
 c01de5a:	d108      	bne.n	c01de6e <mbedtls_mpi_read_binary+0x2e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 c01de5c:	2100      	movs	r1, #0
 c01de5e:	4638      	mov	r0, r7
 c01de60:	f7ff ff24 	bl	c01dcac <mbedtls_mpi_lset>
 c01de64:	4606      	mov	r6, r0
 c01de66:	b188      	cbz	r0, c01de8c <mbedtls_mpi_read_binary+0x4c>
}
 c01de68:	4630      	mov	r0, r6
 c01de6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        mbedtls_mpi_free( X );
 c01de6e:	f7ff fdf5 	bl	c01da5c <mbedtls_mpi_free>
    X->n = 0;
 c01de72:	2300      	movs	r3, #0
 c01de74:	2201      	movs	r2, #1
    X->p = NULL;
 c01de76:	60bb      	str	r3, [r7, #8]
    X->n = 0;
 c01de78:	e9c7 2300 	strd	r2, r3, [r7]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 c01de7c:	4621      	mov	r1, r4
 c01de7e:	4638      	mov	r0, r7
 c01de80:	f7ff fdfe 	bl	c01da80 <mbedtls_mpi_grow>
 c01de84:	4606      	mov	r6, r0
 c01de86:	2800      	cmp	r0, #0
 c01de88:	d0e8      	beq.n	c01de5c <mbedtls_mpi_read_binary+0x1c>
 c01de8a:	e7ed      	b.n	c01de68 <mbedtls_mpi_read_binary+0x28>
    if( buf != NULL )
 c01de8c:	f1b8 0f00 	cmp.w	r8, #0
 c01de90:	d0ea      	beq.n	c01de68 <mbedtls_mpi_read_binary+0x28>
        memcpy( Xp + overhead, buf, buflen );
 c01de92:	68bb      	ldr	r3, [r7, #8]
    size_t const overhead = ( limbs * ciL ) - buflen;
 c01de94:	ebc5 0084 	rsb	r0, r5, r4, lsl #2
        memcpy( Xp + overhead, buf, buflen );
 c01de98:	462a      	mov	r2, r5
 c01de9a:	4641      	mov	r1, r8
 c01de9c:	4418      	add	r0, r3
 c01de9e:	f7f6 fd6e 	bl	c01497e <memcpy>
    if( limbs == 0 )
 c01dea2:	2c00      	cmp	r4, #0
 c01dea4:	d0e0      	beq.n	c01de68 <mbedtls_mpi_read_binary+0x28>
 c01dea6:	4621      	mov	r1, r4
 c01dea8:	68b8      	ldr	r0, [r7, #8]
 c01deaa:	f7ff fd9f 	bl	c01d9ec <mpi_bigendian_to_host.part.1>
    return( ret );
 c01deae:	e7db      	b.n	c01de68 <mbedtls_mpi_read_binary+0x28>

0c01deb0 <mbedtls_mpi_write_binary_le>:
{
 c01deb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t stored_bytes = X->n * ciL;
 c01deb2:	6843      	ldr	r3, [r0, #4]
{
 c01deb4:	460e      	mov	r6, r1
    size_t stored_bytes = X->n * ciL;
 c01deb6:	009b      	lsls	r3, r3, #2
    if( stored_bytes < buflen )
 c01deb8:	4293      	cmp	r3, r2
 c01deba:	d31d      	bcc.n	c01def8 <mbedtls_mpi_write_binary_le+0x48>
 c01debc:	4611      	mov	r1, r2
        for( i = bytes_to_copy; i < stored_bytes; i++ )
 c01debe:	4299      	cmp	r1, r3
 c01dec0:	d10c      	bne.n	c01dedc <mbedtls_mpi_write_binary_le+0x2c>
 c01dec2:	4694      	mov	ip, r2
    for( i = 0; i < bytes_to_copy; i++ )
 c01dec4:	2100      	movs	r1, #0
 c01dec6:	458c      	cmp	ip, r1
 c01dec8:	d118      	bne.n	c01defc <mbedtls_mpi_write_binary_le+0x4c>
    if( stored_bytes < buflen )
 c01deca:	4293      	cmp	r3, r2
 c01decc:	d204      	bcs.n	c01ded8 <mbedtls_mpi_write_binary_le+0x28>
        memset( buf + stored_bytes, 0, buflen - stored_bytes );
 c01dece:	1ad2      	subs	r2, r2, r3
 c01ded0:	2100      	movs	r1, #0
 c01ded2:	18f0      	adds	r0, r6, r3
 c01ded4:	f7f6 fd77 	bl	c0149c6 <memset>
    return( 0 );
 c01ded8:	2000      	movs	r0, #0
 c01deda:	e01d      	b.n	c01df18 <mbedtls_mpi_write_binary_le+0x68>
            if( GET_BYTE( X, i ) != 0 )
 c01dedc:	6887      	ldr	r7, [r0, #8]
 c01dede:	f001 0403 	and.w	r4, r1, #3
 c01dee2:	f021 0c03 	bic.w	ip, r1, #3
 c01dee6:	00e5      	lsls	r5, r4, #3
 c01dee8:	f857 400c 	ldr.w	r4, [r7, ip]
 c01deec:	40ec      	lsrs	r4, r5
 c01deee:	f014 0fff 	tst.w	r4, #255	; 0xff
 c01def2:	d10f      	bne.n	c01df14 <mbedtls_mpi_write_binary_le+0x64>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
 c01def4:	3101      	adds	r1, #1
 c01def6:	e7e2      	b.n	c01debe <mbedtls_mpi_write_binary_le+0xe>
 c01def8:	469c      	mov	ip, r3
 c01defa:	e7e3      	b.n	c01dec4 <mbedtls_mpi_write_binary_le+0x14>
        buf[i] = GET_BYTE( X, i );
 c01defc:	6887      	ldr	r7, [r0, #8]
 c01defe:	f001 0403 	and.w	r4, r1, #3
 c01df02:	f021 0e03 	bic.w	lr, r1, #3
 c01df06:	00e5      	lsls	r5, r4, #3
 c01df08:	f857 400e 	ldr.w	r4, [r7, lr]
 c01df0c:	40ec      	lsrs	r4, r5
 c01df0e:	5474      	strb	r4, [r6, r1]
    for( i = 0; i < bytes_to_copy; i++ )
 c01df10:	3101      	adds	r1, #1
 c01df12:	e7d8      	b.n	c01dec6 <mbedtls_mpi_write_binary_le+0x16>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 c01df14:	f06f 0007 	mvn.w	r0, #7
}
 c01df18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0c01df1a <mbedtls_mpi_write_binary>:
{
 c01df1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c01df1c:	4605      	mov	r5, r0
    stored_bytes = X->n * ciL;
 c01df1e:	686c      	ldr	r4, [r5, #4]
{
 c01df20:	4608      	mov	r0, r1
    stored_bytes = X->n * ciL;
 c01df22:	00a4      	lsls	r4, r4, #2
    if( stored_bytes < buflen )
 c01df24:	4294      	cmp	r4, r2
 c01df26:	d21c      	bcs.n	c01df62 <mbedtls_mpi_write_binary+0x48>
        p = buf + buflen - stored_bytes;
 c01df28:	1b12      	subs	r2, r2, r4
 c01df2a:	188e      	adds	r6, r1, r2
        memset( buf, 0, buflen - stored_bytes );
 c01df2c:	2100      	movs	r1, #0
 c01df2e:	f7f6 fd4a 	bl	c0149c6 <memset>
        p = buf + buflen - stored_bytes;
 c01df32:	4630      	mov	r0, r6
 c01df34:	4622      	mov	r2, r4
    for( i = 0; i < bytes_to_copy; i++ )
 c01df36:	2300      	movs	r3, #0
 c01df38:	4410      	add	r0, r2
 c01df3a:	429a      	cmp	r2, r3
 c01df3c:	d113      	bne.n	c01df66 <mbedtls_mpi_write_binary+0x4c>
    return( 0 );
 c01df3e:	2000      	movs	r0, #0
}
 c01df40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( GET_BYTE( X, i ) != 0 )
 c01df42:	68af      	ldr	r7, [r5, #8]
 c01df44:	f003 0103 	and.w	r1, r3, #3
 c01df48:	f023 0c03 	bic.w	ip, r3, #3
 c01df4c:	00ce      	lsls	r6, r1, #3
 c01df4e:	f857 100c 	ldr.w	r1, [r7, ip]
 c01df52:	40f1      	lsrs	r1, r6
 c01df54:	f011 0fff 	tst.w	r1, #255	; 0xff
 c01df58:	d111      	bne.n	c01df7e <mbedtls_mpi_write_binary+0x64>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
 c01df5a:	3301      	adds	r3, #1
 c01df5c:	42a3      	cmp	r3, r4
 c01df5e:	d1f0      	bne.n	c01df42 <mbedtls_mpi_write_binary+0x28>
 c01df60:	e7e9      	b.n	c01df36 <mbedtls_mpi_write_binary+0x1c>
 c01df62:	4613      	mov	r3, r2
 c01df64:	e7fa      	b.n	c01df5c <mbedtls_mpi_write_binary+0x42>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
 c01df66:	68af      	ldr	r7, [r5, #8]
 c01df68:	f003 0103 	and.w	r1, r3, #3
 c01df6c:	f023 0603 	bic.w	r6, r3, #3
 c01df70:	00cc      	lsls	r4, r1, #3
 c01df72:	59b9      	ldr	r1, [r7, r6]
    for( i = 0; i < bytes_to_copy; i++ )
 c01df74:	3301      	adds	r3, #1
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
 c01df76:	40e1      	lsrs	r1, r4
 c01df78:	f800 1d01 	strb.w	r1, [r0, #-1]!
 c01df7c:	e7dd      	b.n	c01df3a <mbedtls_mpi_write_binary+0x20>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 c01df7e:	f06f 0007 	mvn.w	r0, #7
 c01df82:	e7dd      	b.n	c01df40 <mbedtls_mpi_write_binary+0x26>

0c01df84 <mbedtls_mpi_shift_l>:
{
 c01df84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c01df86:	4606      	mov	r6, r0
 c01df88:	460d      	mov	r5, r1
    v0 = count / (biL    );
 c01df8a:	094c      	lsrs	r4, r1, #5
    t1 = count & (biL - 1);
 c01df8c:	f001 071f 	and.w	r7, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
 c01df90:	f7ff fefc 	bl	c01dd8c <mbedtls_mpi_bitlen>
    if( X->n * biL < i )
 c01df94:	6873      	ldr	r3, [r6, #4]
    i = mbedtls_mpi_bitlen( X ) + count;
 c01df96:	4428      	add	r0, r5
    if( X->n * biL < i )
 c01df98:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
 c01df9c:	d803      	bhi.n	c01dfa6 <mbedtls_mpi_shift_l+0x22>
    if( v0 > 0 )
 c01df9e:	b974      	cbnz	r4, c01dfbe <mbedtls_mpi_shift_l+0x3a>
    if( t1 > 0 )
 c01dfa0:	bb2f      	cbnz	r7, c01dfee <mbedtls_mpi_shift_l+0x6a>
    ret = 0;
 c01dfa2:	2000      	movs	r0, #0
 c01dfa4:	e00a      	b.n	c01dfbc <mbedtls_mpi_shift_l+0x38>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 c01dfa6:	f010 011f 	ands.w	r1, r0, #31
 c01dfaa:	bf18      	it	ne
 c01dfac:	2101      	movne	r1, #1
 c01dfae:	eb01 1150 	add.w	r1, r1, r0, lsr #5
 c01dfb2:	4630      	mov	r0, r6
 c01dfb4:	f7ff fd64 	bl	c01da80 <mbedtls_mpi_grow>
 c01dfb8:	2800      	cmp	r0, #0
 c01dfba:	d0f0      	beq.n	c01df9e <mbedtls_mpi_shift_l+0x1a>
}
 c01dfbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for( i = X->n; i > v0; i-- )
 c01dfbe:	6873      	ldr	r3, [r6, #4]
 c01dfc0:	00a0      	lsls	r0, r4, #2
 c01dfc2:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 c01dfc6:	3a01      	subs	r2, #1
 c01dfc8:	1b12      	subs	r2, r2, r4
 c01dfca:	0092      	lsls	r2, r2, #2
 c01dfcc:	42a3      	cmp	r3, r4
 c01dfce:	d807      	bhi.n	c01dfe0 <mbedtls_mpi_shift_l+0x5c>
            X->p[i - 1] = 0;
 c01dfd0:	2200      	movs	r2, #0
 c01dfd2:	009b      	lsls	r3, r3, #2
 c01dfd4:	3b04      	subs	r3, #4
        for( ; i > 0; i-- )
 c01dfd6:	1d19      	adds	r1, r3, #4
 c01dfd8:	d0e2      	beq.n	c01dfa0 <mbedtls_mpi_shift_l+0x1c>
            X->p[i - 1] = 0;
 c01dfda:	68b1      	ldr	r1, [r6, #8]
 c01dfdc:	50ca      	str	r2, [r1, r3]
 c01dfde:	e7f9      	b.n	c01dfd4 <mbedtls_mpi_shift_l+0x50>
            X->p[i - 1] = X->p[i - v0 - 1];
 c01dfe0:	68b1      	ldr	r1, [r6, #8]
        for( i = X->n; i > v0; i-- )
 c01dfe2:	3b01      	subs	r3, #1
            X->p[i - 1] = X->p[i - v0 - 1];
 c01dfe4:	588d      	ldr	r5, [r1, r2]
 c01dfe6:	4411      	add	r1, r2
 c01dfe8:	500d      	str	r5, [r1, r0]
 c01dfea:	3a04      	subs	r2, #4
 c01dfec:	e7ee      	b.n	c01dfcc <mbedtls_mpi_shift_l+0x48>
    mbedtls_mpi_uint r0 = 0, r1;
 c01dfee:	2100      	movs	r1, #0
        for( i = v0; i < X->n; i++ )
 c01dff0:	f8d6 c004 	ldr.w	ip, [r6, #4]
 c01dff4:	00a3      	lsls	r3, r4, #2
            r1 = X->p[i] >> (biL - t1);
 c01dff6:	f1c7 0e20 	rsb	lr, r7, #32
        for( i = v0; i < X->n; i++ )
 c01dffa:	45a4      	cmp	ip, r4
 c01dffc:	d9d1      	bls.n	c01dfa2 <mbedtls_mpi_shift_l+0x1e>
            r1 = X->p[i] >> (biL - t1);
 c01dffe:	68b5      	ldr	r5, [r6, #8]
        for( i = v0; i < X->n; i++ )
 c01e000:	3401      	adds	r4, #1
            r1 = X->p[i] >> (biL - t1);
 c01e002:	58e8      	ldr	r0, [r5, r3]
            X->p[i] <<= t1;
 c01e004:	fa00 f207 	lsl.w	r2, r0, r7
            X->p[i] |= r0;
 c01e008:	430a      	orrs	r2, r1
 c01e00a:	50ea      	str	r2, [r5, r3]
            r1 = X->p[i] >> (biL - t1);
 c01e00c:	fa20 f10e 	lsr.w	r1, r0, lr
 c01e010:	3304      	adds	r3, #4
 c01e012:	e7f2      	b.n	c01dffa <mbedtls_mpi_shift_l+0x76>

0c01e014 <mbedtls_mpi_shift_r>:
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 c01e014:	6843      	ldr	r3, [r0, #4]
{
 c01e016:	b4f0      	push	{r4, r5, r6, r7}
    v0 = count /  biL;
 c01e018:	094d      	lsrs	r5, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 c01e01a:	42ab      	cmp	r3, r5
 c01e01c:	d303      	bcc.n	c01e026 <mbedtls_mpi_shift_r+0x12>
    v1 = count & (biL - 1);
 c01e01e:	f001 011f 	and.w	r1, r1, #31
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 c01e022:	d104      	bne.n	c01e02e <mbedtls_mpi_shift_r+0x1a>
 c01e024:	b369      	cbz	r1, c01e082 <mbedtls_mpi_shift_r+0x6e>
}
 c01e026:	bcf0      	pop	{r4, r5, r6, r7}
        return mbedtls_mpi_lset( X, 0 );
 c01e028:	2100      	movs	r1, #0
 c01e02a:	f7ff be3f 	b.w	c01dcac <mbedtls_mpi_lset>
    if( v0 > 0 )
 c01e02e:	b9e5      	cbnz	r5, c01e06a <mbedtls_mpi_shift_r+0x56>
    if( v1 > 0 )
 c01e030:	b129      	cbz	r1, c01e03e <mbedtls_mpi_shift_r+0x2a>
    mbedtls_mpi_uint r0 = 0, r1;
 c01e032:	2500      	movs	r5, #0
 c01e034:	009a      	lsls	r2, r3, #2
            r1 = X->p[i - 1] << (biL - v1);
 c01e036:	f1c1 0c20 	rsb	ip, r1, #32
 c01e03a:	3a04      	subs	r2, #4
        for( i = X->n; i > 0; i-- )
 c01e03c:	b9bb      	cbnz	r3, c01e06e <mbedtls_mpi_shift_r+0x5a>
}
 c01e03e:	bcf0      	pop	{r4, r5, r6, r7}
 c01e040:	2000      	movs	r0, #0
 c01e042:	4770      	bx	lr
            X->p[i] = X->p[i + v0];
 c01e044:	6884      	ldr	r4, [r0, #8]
 c01e046:	1956      	adds	r6, r2, r5
 c01e048:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 c01e04c:	f844 6022 	str.w	r6, [r4, r2, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
 c01e050:	3201      	adds	r2, #1
 c01e052:	1b5c      	subs	r4, r3, r5
 c01e054:	4294      	cmp	r4, r2
 c01e056:	d8f5      	bhi.n	c01e044 <mbedtls_mpi_shift_r+0x30>
            X->p[i] = 0;
 c01e058:	2500      	movs	r5, #0
 c01e05a:	00a2      	lsls	r2, r4, #2
        for( ; i < X->n; i++ )
 c01e05c:	42a3      	cmp	r3, r4
 c01e05e:	d9e7      	bls.n	c01e030 <mbedtls_mpi_shift_r+0x1c>
            X->p[i] = 0;
 c01e060:	6886      	ldr	r6, [r0, #8]
        for( ; i < X->n; i++ )
 c01e062:	3401      	adds	r4, #1
            X->p[i] = 0;
 c01e064:	50b5      	str	r5, [r6, r2]
 c01e066:	3204      	adds	r2, #4
 c01e068:	e7f8      	b.n	c01e05c <mbedtls_mpi_shift_r+0x48>
 c01e06a:	2200      	movs	r2, #0
 c01e06c:	e7f1      	b.n	c01e052 <mbedtls_mpi_shift_r+0x3e>
            r1 = X->p[i - 1] << (biL - v1);
 c01e06e:	6887      	ldr	r7, [r0, #8]
        for( i = X->n; i > 0; i-- )
 c01e070:	3b01      	subs	r3, #1
            r1 = X->p[i - 1] << (biL - v1);
 c01e072:	58be      	ldr	r6, [r7, r2]
            X->p[i - 1] >>= v1;
 c01e074:	fa26 f401 	lsr.w	r4, r6, r1
            X->p[i - 1] |= r0;
 c01e078:	432c      	orrs	r4, r5
 c01e07a:	50bc      	str	r4, [r7, r2]
            r1 = X->p[i - 1] << (biL - v1);
 c01e07c:	fa06 f50c 	lsl.w	r5, r6, ip
 c01e080:	e7db      	b.n	c01e03a <mbedtls_mpi_shift_r+0x26>
    if( v0 > 0 )
 c01e082:	2b00      	cmp	r3, #0
 c01e084:	d0db      	beq.n	c01e03e <mbedtls_mpi_shift_r+0x2a>
 c01e086:	460a      	mov	r2, r1
 c01e088:	e7e3      	b.n	c01e052 <mbedtls_mpi_shift_r+0x3e>

0c01e08a <mbedtls_mpi_cmp_abs>:
{
 c01e08a:	b570      	push	{r4, r5, r6, lr}
    for( i = X->n; i > 0; i-- )
 c01e08c:	6843      	ldr	r3, [r0, #4]
 c01e08e:	009a      	lsls	r2, r3, #2
 c01e090:	b933      	cbnz	r3, c01e0a0 <mbedtls_mpi_cmp_abs+0x16>
    for( j = Y->n; j > 0; j-- )
 c01e092:	684a      	ldr	r2, [r1, #4]
 c01e094:	0094      	lsls	r4, r2, #2
 c01e096:	b962      	cbnz	r2, c01e0b2 <mbedtls_mpi_cmp_abs+0x28>
    if( i == 0 && j == 0 )
 c01e098:	1c18      	adds	r0, r3, #0
 c01e09a:	bf18      	it	ne
 c01e09c:	2001      	movne	r0, #1
 c01e09e:	e016      	b.n	c01e0ce <mbedtls_mpi_cmp_abs+0x44>
        if( X->p[i - 1] != 0 )
 c01e0a0:	6884      	ldr	r4, [r0, #8]
 c01e0a2:	4414      	add	r4, r2
 c01e0a4:	f854 4c04 	ldr.w	r4, [r4, #-4]
 c01e0a8:	3a04      	subs	r2, #4
 c01e0aa:	2c00      	cmp	r4, #0
 c01e0ac:	d1f1      	bne.n	c01e092 <mbedtls_mpi_cmp_abs+0x8>
    for( i = X->n; i > 0; i-- )
 c01e0ae:	3b01      	subs	r3, #1
 c01e0b0:	e7ee      	b.n	c01e090 <mbedtls_mpi_cmp_abs+0x6>
        if( Y->p[j - 1] != 0 )
 c01e0b2:	688d      	ldr	r5, [r1, #8]
 c01e0b4:	192e      	adds	r6, r5, r4
 c01e0b6:	f856 6c04 	ldr.w	r6, [r6, #-4]
 c01e0ba:	3c04      	subs	r4, #4
 c01e0bc:	b90e      	cbnz	r6, c01e0c2 <mbedtls_mpi_cmp_abs+0x38>
    for( j = Y->n; j > 0; j-- )
 c01e0be:	3a01      	subs	r2, #1
 c01e0c0:	e7e9      	b.n	c01e096 <mbedtls_mpi_cmp_abs+0xc>
    if( i > j ) return(  1 );
 c01e0c2:	4293      	cmp	r3, r2
 c01e0c4:	d80d      	bhi.n	c01e0e2 <mbedtls_mpi_cmp_abs+0x58>
    if( j > i ) return( -1 );
 c01e0c6:	d30e      	bcc.n	c01e0e6 <mbedtls_mpi_cmp_abs+0x5c>
 c01e0c8:	009a      	lsls	r2, r3, #2
    for( ; i > 0; i-- )
 c01e0ca:	b90b      	cbnz	r3, c01e0d0 <mbedtls_mpi_cmp_abs+0x46>
    return( 0 );
 c01e0cc:	4618      	mov	r0, r3
}
 c01e0ce:	bd70      	pop	{r4, r5, r6, pc}
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 c01e0d0:	6881      	ldr	r1, [r0, #8]
 c01e0d2:	3a04      	subs	r2, #4
 c01e0d4:	588c      	ldr	r4, [r1, r2]
 c01e0d6:	58a9      	ldr	r1, [r5, r2]
 c01e0d8:	428c      	cmp	r4, r1
 c01e0da:	d802      	bhi.n	c01e0e2 <mbedtls_mpi_cmp_abs+0x58>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 c01e0dc:	d303      	bcc.n	c01e0e6 <mbedtls_mpi_cmp_abs+0x5c>
    for( ; i > 0; i-- )
 c01e0de:	3b01      	subs	r3, #1
 c01e0e0:	e7f3      	b.n	c01e0ca <mbedtls_mpi_cmp_abs+0x40>
    if( i > j ) return(  1 );
 c01e0e2:	2001      	movs	r0, #1
 c01e0e4:	e7f3      	b.n	c01e0ce <mbedtls_mpi_cmp_abs+0x44>
    if( j > i ) return( -1 );
 c01e0e6:	f04f 30ff 	mov.w	r0, #4294967295
 c01e0ea:	e7f0      	b.n	c01e0ce <mbedtls_mpi_cmp_abs+0x44>

0c01e0ec <mpi_montmul>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 c01e0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c01e0f0:	4616      	mov	r6, r2
 c01e0f2:	b085      	sub	sp, #20
 c01e0f4:	9303      	str	r3, [sp, #12]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 c01e0f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
{
 c01e0f8:	4681      	mov	r9, r0
    if( T->n < N->n + 1 || T->p == NULL )
 c01e0fa:	685a      	ldr	r2, [r3, #4]
 c01e0fc:	6873      	ldr	r3, [r6, #4]
{
 c01e0fe:	468b      	mov	fp, r1
    if( T->n < N->n + 1 || T->p == NULL )
 c01e100:	3301      	adds	r3, #1
 c01e102:	429a      	cmp	r2, r3
 c01e104:	d353      	bcc.n	c01e1ae <mpi_montmul+0xc2>
 c01e106:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 c01e108:	6898      	ldr	r0, [r3, #8]
 c01e10a:	2800      	cmp	r0, #0
 c01e10c:	d04f      	beq.n	c01e1ae <mpi_montmul+0xc2>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );
 c01e10e:	0092      	lsls	r2, r2, #2
 c01e110:	2100      	movs	r1, #0
 c01e112:	f7f6 fc58 	bl	c0149c6 <memset>

    d = T->p;
 c01e116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    n = N->n;
 c01e118:	f8d6 a004 	ldr.w	sl, [r6, #4]
    d = T->p;
 c01e11c:	689b      	ldr	r3, [r3, #8]
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 c01e11e:	2400      	movs	r4, #0
    d = T->p;
 c01e120:	9300      	str	r3, [sp, #0]
    m = ( B->n < n ) ? B->n : n;
 c01e122:	f8db 3004 	ldr.w	r3, [fp, #4]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
 c01e126:	f10a 0701 	add.w	r7, sl, #1
    m = ( B->n < n ) ? B->n : n;
 c01e12a:	4553      	cmp	r3, sl
 c01e12c:	bf28      	it	cs
 c01e12e:	4653      	movcs	r3, sl
    d = T->p;
 c01e130:	9d00      	ldr	r5, [sp, #0]
    m = ( B->n < n ) ? B->n : n;
 c01e132:	9301      	str	r3, [sp, #4]
        *d++ = u0; d[n + 1] = 0;
 c01e134:	00bf      	lsls	r7, r7, #2
    for( i = 0; i < n; i++ )
 c01e136:	4554      	cmp	r4, sl
 c01e138:	f8d9 0008 	ldr.w	r0, [r9, #8]
 c01e13c:	d11b      	bne.n	c01e176 <mpi_montmul+0x8a>
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
 c01e13e:	9b00      	ldr	r3, [sp, #0]
 c01e140:	1f39      	subs	r1, r7, #4
 c01e142:	440b      	add	r3, r1
 c01e144:	463a      	mov	r2, r7
 c01e146:	4619      	mov	r1, r3
 c01e148:	f7f6 fc19 	bl	c01497e <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
 c01e14c:	4631      	mov	r1, r6
 c01e14e:	4648      	mov	r0, r9
 c01e150:	f7ff ff9b 	bl	c01e08a <mbedtls_mpi_cmp_abs>
 c01e154:	2800      	cmp	r0, #0
        mpi_sub_hlp( n, N->p, A->p );
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 c01e156:	bfb8      	it	lt
 c01e158:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 c01e15a:	4620      	mov	r0, r4
        mpi_sub_hlp( n, N->p, A->p );
 c01e15c:	bfa7      	ittee	ge
 c01e15e:	f8d9 2008 	ldrge.w	r2, [r9, #8]
 c01e162:	68b1      	ldrge	r1, [r6, #8]
        mpi_sub_hlp( n, A->p, T->p );
 c01e164:	689a      	ldrlt	r2, [r3, #8]
 c01e166:	f8d9 1008 	ldrlt.w	r1, [r9, #8]
 c01e16a:	f7ff f9a5 	bl	c01d4b8 <mpi_sub_hlp>

    return( 0 );
 c01e16e:	2000      	movs	r0, #0
}
 c01e170:	b005      	add	sp, #20
 c01e172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 c01e176:	f8db 1008 	ldr.w	r1, [fp, #8]
        u0 = A->p[i];
 c01e17a:	f850 8024 	ldr.w	r8, [r0, r4, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 c01e17e:	682a      	ldr	r2, [r5, #0]
 c01e180:	680b      	ldr	r3, [r1, #0]
        mpi_mul_hlp( m, B->p, d, u0 );
 c01e182:	9801      	ldr	r0, [sp, #4]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 c01e184:	fb03 2308 	mla	r3, r3, r8, r2
 c01e188:	9a03      	ldr	r2, [sp, #12]
    for( i = 0; i < n; i++ )
 c01e18a:	3401      	adds	r4, #1
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 c01e18c:	4353      	muls	r3, r2
        mpi_mul_hlp( m, B->p, d, u0 );
 c01e18e:	462a      	mov	r2, r5
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 c01e190:	9302      	str	r3, [sp, #8]
        mpi_mul_hlp( m, B->p, d, u0 );
 c01e192:	4643      	mov	r3, r8
 c01e194:	f7ff f9ba 	bl	c01d50c <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
 c01e198:	9b02      	ldr	r3, [sp, #8]
 c01e19a:	462a      	mov	r2, r5
 c01e19c:	68b1      	ldr	r1, [r6, #8]
 c01e19e:	4650      	mov	r0, sl
 c01e1a0:	f7ff f9b4 	bl	c01d50c <mpi_mul_hlp>
        *d++ = u0; d[n + 1] = 0;
 c01e1a4:	2300      	movs	r3, #0
 c01e1a6:	f845 8b04 	str.w	r8, [r5], #4
 c01e1aa:	51eb      	str	r3, [r5, r7]
 c01e1ac:	e7c3      	b.n	c01e136 <mpi_montmul+0x4a>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 c01e1ae:	f06f 0003 	mvn.w	r0, #3
 c01e1b2:	e7dd      	b.n	c01e170 <mpi_montmul+0x84>

0c01e1b4 <mbedtls_mpi_cmp_mpi>:
{
 c01e1b4:	b570      	push	{r4, r5, r6, lr}
    for( i = X->n; i > 0; i-- )
 c01e1b6:	6843      	ldr	r3, [r0, #4]
 c01e1b8:	009a      	lsls	r2, r3, #2
 c01e1ba:	b923      	cbnz	r3, c01e1c6 <mbedtls_mpi_cmp_mpi+0x12>
    for( j = Y->n; j > 0; j-- )
 c01e1bc:	684a      	ldr	r2, [r1, #4]
 c01e1be:	0094      	lsls	r4, r2, #2
 c01e1c0:	b952      	cbnz	r2, c01e1d8 <mbedtls_mpi_cmp_mpi+0x24>
    if( i == 0 && j == 0 )
 c01e1c2:	b99b      	cbnz	r3, c01e1ec <mbedtls_mpi_cmp_mpi+0x38>
 c01e1c4:	e024      	b.n	c01e210 <mbedtls_mpi_cmp_mpi+0x5c>
        if( X->p[i - 1] != 0 )
 c01e1c6:	6884      	ldr	r4, [r0, #8]
 c01e1c8:	4414      	add	r4, r2
 c01e1ca:	f854 4c04 	ldr.w	r4, [r4, #-4]
 c01e1ce:	3a04      	subs	r2, #4
 c01e1d0:	2c00      	cmp	r4, #0
 c01e1d2:	d1f3      	bne.n	c01e1bc <mbedtls_mpi_cmp_mpi+0x8>
    for( i = X->n; i > 0; i-- )
 c01e1d4:	3b01      	subs	r3, #1
 c01e1d6:	e7f0      	b.n	c01e1ba <mbedtls_mpi_cmp_mpi+0x6>
        if( Y->p[j - 1] != 0 )
 c01e1d8:	688d      	ldr	r5, [r1, #8]
 c01e1da:	192e      	adds	r6, r5, r4
 c01e1dc:	f856 6c04 	ldr.w	r6, [r6, #-4]
 c01e1e0:	3c04      	subs	r4, #4
 c01e1e2:	b90e      	cbnz	r6, c01e1e8 <mbedtls_mpi_cmp_mpi+0x34>
    for( j = Y->n; j > 0; j-- )
 c01e1e4:	3a01      	subs	r2, #1
 c01e1e6:	e7eb      	b.n	c01e1c0 <mbedtls_mpi_cmp_mpi+0xc>
    if( i > j ) return(  X->s );
 c01e1e8:	4293      	cmp	r3, r2
 c01e1ea:	d902      	bls.n	c01e1f2 <mbedtls_mpi_cmp_mpi+0x3e>
 c01e1ec:	6802      	ldr	r2, [r0, #0]
}
 c01e1ee:	4610      	mov	r0, r2
 c01e1f0:	bd70      	pop	{r4, r5, r6, pc}
 c01e1f2:	6809      	ldr	r1, [r1, #0]
    if( j > i ) return( -Y->s );
 c01e1f4:	d201      	bcs.n	c01e1fa <mbedtls_mpi_cmp_mpi+0x46>
 c01e1f6:	424a      	negs	r2, r1
 c01e1f8:	e7f9      	b.n	c01e1ee <mbedtls_mpi_cmp_mpi+0x3a>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 c01e1fa:	6802      	ldr	r2, [r0, #0]
 c01e1fc:	2a00      	cmp	r2, #0
 c01e1fe:	dd01      	ble.n	c01e204 <mbedtls_mpi_cmp_mpi+0x50>
 c01e200:	2900      	cmp	r1, #0
 c01e202:	db12      	blt.n	c01e22a <mbedtls_mpi_cmp_mpi+0x76>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 c01e204:	2900      	cmp	r1, #0
 c01e206:	dd01      	ble.n	c01e20c <mbedtls_mpi_cmp_mpi+0x58>
 c01e208:	2a00      	cmp	r2, #0
 c01e20a:	db10      	blt.n	c01e22e <mbedtls_mpi_cmp_mpi+0x7a>
 c01e20c:	0099      	lsls	r1, r3, #2
    for( ; i > 0; i-- )
 c01e20e:	b90b      	cbnz	r3, c01e214 <mbedtls_mpi_cmp_mpi+0x60>
    return( 0 );
 c01e210:	461a      	mov	r2, r3
 c01e212:	e7ec      	b.n	c01e1ee <mbedtls_mpi_cmp_mpi+0x3a>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 c01e214:	6884      	ldr	r4, [r0, #8]
 c01e216:	3904      	subs	r1, #4
 c01e218:	5866      	ldr	r6, [r4, r1]
 c01e21a:	586c      	ldr	r4, [r5, r1]
 c01e21c:	42a6      	cmp	r6, r4
 c01e21e:	d8e6      	bhi.n	c01e1ee <mbedtls_mpi_cmp_mpi+0x3a>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 c01e220:	d201      	bcs.n	c01e226 <mbedtls_mpi_cmp_mpi+0x72>
 c01e222:	4252      	negs	r2, r2
 c01e224:	e7e3      	b.n	c01e1ee <mbedtls_mpi_cmp_mpi+0x3a>
    for( ; i > 0; i-- )
 c01e226:	3b01      	subs	r3, #1
 c01e228:	e7f1      	b.n	c01e20e <mbedtls_mpi_cmp_mpi+0x5a>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 c01e22a:	2201      	movs	r2, #1
 c01e22c:	e7df      	b.n	c01e1ee <mbedtls_mpi_cmp_mpi+0x3a>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 c01e22e:	f04f 32ff 	mov.w	r2, #4294967295
 c01e232:	e7dc      	b.n	c01e1ee <mbedtls_mpi_cmp_mpi+0x3a>

0c01e234 <mbedtls_mpi_cmp_int>:
{
 c01e234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    *p  = ( z < 0 ) ? -z : z;
 c01e236:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 c01e23a:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
 c01e23e:	2900      	cmp	r1, #0
    *p  = ( z < 0 ) ? -z : z;
 c01e240:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
 c01e242:	bfb4      	ite	lt
 c01e244:	f04f 33ff 	movlt.w	r3, #4294967295
 c01e248:	2301      	movge	r3, #1
 c01e24a:	9301      	str	r3, [sp, #4]
    Y.n = 1;
 c01e24c:	2301      	movs	r3, #1
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 c01e24e:	a901      	add	r1, sp, #4
    Y.n = 1;
 c01e250:	9302      	str	r3, [sp, #8]
    Y.p = p;
 c01e252:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 c01e256:	f7ff ffad 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
}
 c01e25a:	b005      	add	sp, #20
 c01e25c:	f85d fb04 	ldr.w	pc, [sp], #4

0c01e260 <mbedtls_mpi_add_abs>:
    if( X == B )
 c01e260:	4290      	cmp	r0, r2
{
 c01e262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c01e266:	4606      	mov	r6, r0
 c01e268:	460c      	mov	r4, r1
 c01e26a:	4615      	mov	r5, r2
    if( X == B )
 c01e26c:	d002      	beq.n	c01e274 <mbedtls_mpi_add_abs+0x14>
    if( X != A )
 c01e26e:	4288      	cmp	r0, r1
 c01e270:	d131      	bne.n	c01e2d6 <mbedtls_mpi_add_abs+0x76>
{
 c01e272:	462c      	mov	r4, r5
    X->s = 1;
 c01e274:	2301      	movs	r3, #1
    for( j = B->n; j > 0; j-- )
 c01e276:	f8d4 8004 	ldr.w	r8, [r4, #4]
    X->s = 1;
 c01e27a:	6033      	str	r3, [r6, #0]
 c01e27c:	ea4f 0388 	mov.w	r3, r8, lsl #2
    for( j = B->n; j > 0; j-- )
 c01e280:	f1b8 0f00 	cmp.w	r8, #0
 c01e284:	d12f      	bne.n	c01e2e6 <mbedtls_mpi_add_abs+0x86>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 c01e286:	4641      	mov	r1, r8
 c01e288:	4630      	mov	r0, r6
 c01e28a:	f7ff fbf9 	bl	c01da80 <mbedtls_mpi_grow>
 c01e28e:	4607      	mov	r7, r0
 c01e290:	bb30      	cbnz	r0, c01e2e0 <mbedtls_mpi_add_abs+0x80>
    o = B->p; p = X->p; c = 0;
 c01e292:	68b3      	ldr	r3, [r6, #8]
 c01e294:	f8d4 e008 	ldr.w	lr, [r4, #8]
 c01e298:	4619      	mov	r1, r3
 c01e29a:	4604      	mov	r4, r0
    for( i = 0; i < j; i++, o++, p++ )
 c01e29c:	4605      	mov	r5, r0
 c01e29e:	45a8      	cmp	r8, r5
 c01e2a0:	d12b      	bne.n	c01e2fa <mbedtls_mpi_add_abs+0x9a>
 c01e2a2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    while( c != 0 )
 c01e2a6:	b1dc      	cbz	r4, c01e2e0 <mbedtls_mpi_add_abs+0x80>
        if( i >= X->n )
 c01e2a8:	6872      	ldr	r2, [r6, #4]
 c01e2aa:	f105 0801 	add.w	r8, r5, #1
 c01e2ae:	42aa      	cmp	r2, r5
 c01e2b0:	d807      	bhi.n	c01e2c2 <mbedtls_mpi_add_abs+0x62>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 c01e2b2:	4641      	mov	r1, r8
 c01e2b4:	4630      	mov	r0, r6
 c01e2b6:	f7ff fbe3 	bl	c01da80 <mbedtls_mpi_grow>
 c01e2ba:	bb80      	cbnz	r0, c01e31e <mbedtls_mpi_add_abs+0xbe>
            p = X->p + i;
 c01e2bc:	68b3      	ldr	r3, [r6, #8]
 c01e2be:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 c01e2c2:	681a      	ldr	r2, [r3, #0]
 c01e2c4:	2100      	movs	r1, #0
 c01e2c6:	1914      	adds	r4, r2, r4
 c01e2c8:	bf28      	it	cs
 c01e2ca:	2101      	movcs	r1, #1
        *p += c; c = ( *p < c ); i++; p++;
 c01e2cc:	f843 4b04 	str.w	r4, [r3], #4
 c01e2d0:	4645      	mov	r5, r8
 c01e2d2:	460c      	mov	r4, r1
 c01e2d4:	e7e7      	b.n	c01e2a6 <mbedtls_mpi_add_abs+0x46>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 c01e2d6:	f7ff fc32 	bl	c01db3e <mbedtls_mpi_copy>
 c01e2da:	4607      	mov	r7, r0
 c01e2dc:	2800      	cmp	r0, #0
 c01e2de:	d0c8      	beq.n	c01e272 <mbedtls_mpi_add_abs+0x12>
}
 c01e2e0:	4638      	mov	r0, r7
 c01e2e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[j - 1] != 0 )
 c01e2e6:	68a2      	ldr	r2, [r4, #8]
 c01e2e8:	441a      	add	r2, r3
 c01e2ea:	f852 2c04 	ldr.w	r2, [r2, #-4]
 c01e2ee:	3b04      	subs	r3, #4
 c01e2f0:	2a00      	cmp	r2, #0
 c01e2f2:	d1c8      	bne.n	c01e286 <mbedtls_mpi_add_abs+0x26>
    for( j = B->n; j > 0; j-- )
 c01e2f4:	f108 38ff 	add.w	r8, r8, #4294967295
 c01e2f8:	e7c2      	b.n	c01e280 <mbedtls_mpi_add_abs+0x20>
 c01e2fa:	680a      	ldr	r2, [r1, #0]
        tmp= *o;
 c01e2fc:	f85e 0025 	ldr.w	r0, [lr, r5, lsl #2]
 c01e300:	1914      	adds	r4, r2, r4
 c01e302:	f04f 0c00 	mov.w	ip, #0
 c01e306:	bf28      	it	cs
 c01e308:	f04f 0c01 	movcs.w	ip, #1
 c01e30c:	1824      	adds	r4, r4, r0
        *p += tmp; c += ( *p < tmp );
 c01e30e:	f841 4b04 	str.w	r4, [r1], #4
 c01e312:	bf2c      	ite	cs
 c01e314:	2401      	movcs	r4, #1
 c01e316:	2400      	movcc	r4, #0
    for( i = 0; i < j; i++, o++, p++ )
 c01e318:	3501      	adds	r5, #1
        *p += tmp; c += ( *p < tmp );
 c01e31a:	4464      	add	r4, ip
 c01e31c:	e7bf      	b.n	c01e29e <mbedtls_mpi_add_abs+0x3e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 c01e31e:	4607      	mov	r7, r0
    return( ret );
 c01e320:	e7de      	b.n	c01e2e0 <mbedtls_mpi_add_abs+0x80>

0c01e322 <mbedtls_mpi_sub_abs>:
{
 c01e322:	b5f0      	push	{r4, r5, r6, r7, lr}
 c01e324:	460f      	mov	r7, r1
 c01e326:	b085      	sub	sp, #20
 c01e328:	4606      	mov	r6, r0
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 c01e32a:	4611      	mov	r1, r2
 c01e32c:	4638      	mov	r0, r7
{
 c01e32e:	4615      	mov	r5, r2
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 c01e330:	f7ff feab 	bl	c01e08a <mbedtls_mpi_cmp_abs>
 c01e334:	2800      	cmp	r0, #0
 c01e336:	db2f      	blt.n	c01e398 <mbedtls_mpi_sub_abs+0x76>
    X->n = 0;
 c01e338:	2300      	movs	r3, #0
 c01e33a:	2201      	movs	r2, #1
    if( X == B )
 c01e33c:	42b5      	cmp	r5, r6
    X->n = 0;
 c01e33e:	e9cd 2301 	strd	r2, r3, [sp, #4]
    X->p = NULL;
 c01e342:	9303      	str	r3, [sp, #12]
    if( X == B )
 c01e344:	d106      	bne.n	c01e354 <mbedtls_mpi_sub_abs+0x32>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 c01e346:	4629      	mov	r1, r5
 c01e348:	a801      	add	r0, sp, #4
 c01e34a:	f7ff fbf8 	bl	c01db3e <mbedtls_mpi_copy>
 c01e34e:	4604      	mov	r4, r0
 c01e350:	b9a0      	cbnz	r0, c01e37c <mbedtls_mpi_sub_abs+0x5a>
        B = &TB;
 c01e352:	ad01      	add	r5, sp, #4
    if( X != A )
 c01e354:	42b7      	cmp	r7, r6
 c01e356:	d10a      	bne.n	c01e36e <mbedtls_mpi_sub_abs+0x4c>
    X->s = 1;
 c01e358:	2301      	movs	r3, #1
    for( n = B->n; n > 0; n-- )
 c01e35a:	6868      	ldr	r0, [r5, #4]
 c01e35c:	68a9      	ldr	r1, [r5, #8]
    X->s = 1;
 c01e35e:	6033      	str	r3, [r6, #0]
 c01e360:	0083      	lsls	r3, r0, #2
    for( n = B->n; n > 0; n-- )
 c01e362:	b988      	cbnz	r0, c01e388 <mbedtls_mpi_sub_abs+0x66>
    mpi_sub_hlp( n, B->p, X->p );
 c01e364:	68b2      	ldr	r2, [r6, #8]
 c01e366:	f7ff f8a7 	bl	c01d4b8 <mpi_sub_hlp>
    ret = 0;
 c01e36a:	2400      	movs	r4, #0
 c01e36c:	e006      	b.n	c01e37c <mbedtls_mpi_sub_abs+0x5a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 c01e36e:	4639      	mov	r1, r7
 c01e370:	4630      	mov	r0, r6
 c01e372:	f7ff fbe4 	bl	c01db3e <mbedtls_mpi_copy>
 c01e376:	4604      	mov	r4, r0
 c01e378:	2800      	cmp	r0, #0
 c01e37a:	d0ed      	beq.n	c01e358 <mbedtls_mpi_sub_abs+0x36>
    mbedtls_mpi_free( &TB );
 c01e37c:	a801      	add	r0, sp, #4
 c01e37e:	f7ff fb6d 	bl	c01da5c <mbedtls_mpi_free>
}
 c01e382:	4620      	mov	r0, r4
 c01e384:	b005      	add	sp, #20
 c01e386:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( B->p[n - 1] != 0 )
 c01e388:	18ca      	adds	r2, r1, r3
 c01e38a:	f852 2c04 	ldr.w	r2, [r2, #-4]
 c01e38e:	3b04      	subs	r3, #4
 c01e390:	2a00      	cmp	r2, #0
 c01e392:	d1e7      	bne.n	c01e364 <mbedtls_mpi_sub_abs+0x42>
    for( n = B->n; n > 0; n-- )
 c01e394:	3801      	subs	r0, #1
 c01e396:	e7e4      	b.n	c01e362 <mbedtls_mpi_sub_abs+0x40>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 c01e398:	f06f 0409 	mvn.w	r4, #9
 c01e39c:	e7f1      	b.n	c01e382 <mbedtls_mpi_sub_abs+0x60>

0c01e39e <mbedtls_mpi_add_mpi>:
{
 c01e39e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
 c01e3a0:	680c      	ldr	r4, [r1, #0]
    if( A->s * B->s < 0 )
 c01e3a2:	6813      	ldr	r3, [r2, #0]
{
 c01e3a4:	4605      	mov	r5, r0
    if( A->s * B->s < 0 )
 c01e3a6:	4363      	muls	r3, r4
{
 c01e3a8:	460f      	mov	r7, r1
 c01e3aa:	4616      	mov	r6, r2
    if( A->s * B->s < 0 )
 c01e3ac:	d516      	bpl.n	c01e3dc <mbedtls_mpi_add_mpi+0x3e>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 c01e3ae:	4611      	mov	r1, r2
 c01e3b0:	4638      	mov	r0, r7
 c01e3b2:	f7ff fe6a 	bl	c01e08a <mbedtls_mpi_cmp_abs>
 c01e3b6:	2800      	cmp	r0, #0
 c01e3b8:	db06      	blt.n	c01e3c8 <mbedtls_mpi_add_mpi+0x2a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 c01e3ba:	4632      	mov	r2, r6
 c01e3bc:	4639      	mov	r1, r7
 c01e3be:	4628      	mov	r0, r5
 c01e3c0:	f7ff ffaf 	bl	c01e322 <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 c01e3c4:	b140      	cbz	r0, c01e3d8 <mbedtls_mpi_add_mpi+0x3a>
}
 c01e3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 c01e3c8:	463a      	mov	r2, r7
 c01e3ca:	4631      	mov	r1, r6
 c01e3cc:	4628      	mov	r0, r5
 c01e3ce:	f7ff ffa8 	bl	c01e322 <mbedtls_mpi_sub_abs>
 c01e3d2:	2800      	cmp	r0, #0
 c01e3d4:	d1f7      	bne.n	c01e3c6 <mbedtls_mpi_add_mpi+0x28>
            X->s = -s;
 c01e3d6:	4264      	negs	r4, r4
        X->s = s;
 c01e3d8:	602c      	str	r4, [r5, #0]
    return( ret );
 c01e3da:	e7f4      	b.n	c01e3c6 <mbedtls_mpi_add_mpi+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 c01e3dc:	f7ff ff40 	bl	c01e260 <mbedtls_mpi_add_abs>
 c01e3e0:	e7f0      	b.n	c01e3c4 <mbedtls_mpi_add_mpi+0x26>

0c01e3e2 <mbedtls_mpi_sub_mpi>:
{
 c01e3e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
 c01e3e4:	680c      	ldr	r4, [r1, #0]
    if( A->s * B->s > 0 )
 c01e3e6:	6813      	ldr	r3, [r2, #0]
{
 c01e3e8:	4605      	mov	r5, r0
    if( A->s * B->s > 0 )
 c01e3ea:	4363      	muls	r3, r4
 c01e3ec:	2b00      	cmp	r3, #0
{
 c01e3ee:	460f      	mov	r7, r1
 c01e3f0:	4616      	mov	r6, r2
    if( A->s * B->s > 0 )
 c01e3f2:	dd16      	ble.n	c01e422 <mbedtls_mpi_sub_mpi+0x40>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 c01e3f4:	4611      	mov	r1, r2
 c01e3f6:	4638      	mov	r0, r7
 c01e3f8:	f7ff fe47 	bl	c01e08a <mbedtls_mpi_cmp_abs>
 c01e3fc:	2800      	cmp	r0, #0
 c01e3fe:	db06      	blt.n	c01e40e <mbedtls_mpi_sub_mpi+0x2c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 c01e400:	4632      	mov	r2, r6
 c01e402:	4639      	mov	r1, r7
 c01e404:	4628      	mov	r0, r5
 c01e406:	f7ff ff8c 	bl	c01e322 <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 c01e40a:	b140      	cbz	r0, c01e41e <mbedtls_mpi_sub_mpi+0x3c>
}
 c01e40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 c01e40e:	463a      	mov	r2, r7
 c01e410:	4631      	mov	r1, r6
 c01e412:	4628      	mov	r0, r5
 c01e414:	f7ff ff85 	bl	c01e322 <mbedtls_mpi_sub_abs>
 c01e418:	2800      	cmp	r0, #0
 c01e41a:	d1f7      	bne.n	c01e40c <mbedtls_mpi_sub_mpi+0x2a>
            X->s = -s;
 c01e41c:	4264      	negs	r4, r4
        X->s = s;
 c01e41e:	602c      	str	r4, [r5, #0]
    return( ret );
 c01e420:	e7f4      	b.n	c01e40c <mbedtls_mpi_sub_mpi+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 c01e422:	f7ff ff1d 	bl	c01e260 <mbedtls_mpi_add_abs>
 c01e426:	e7f0      	b.n	c01e40a <mbedtls_mpi_sub_mpi+0x28>

0c01e428 <mbedtls_mpi_add_int>:
{
 c01e428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    p[0] = ( b < 0 ) ? -b : b;
 c01e42a:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 c01e42e:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 c01e432:	2a00      	cmp	r2, #0
    p[0] = ( b < 0 ) ? -b : b;
 c01e434:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 c01e436:	bfb4      	ite	lt
 c01e438:	f04f 33ff 	movlt.w	r3, #4294967295
 c01e43c:	2301      	movge	r3, #1
 c01e43e:	9301      	str	r3, [sp, #4]
    _B.n = 1;
 c01e440:	2301      	movs	r3, #1
    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 c01e442:	aa01      	add	r2, sp, #4
    _B.n = 1;
 c01e444:	9302      	str	r3, [sp, #8]
    _B.p = p;
 c01e446:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 c01e44a:	f7ff ffa8 	bl	c01e39e <mbedtls_mpi_add_mpi>
}
 c01e44e:	b005      	add	sp, #20
 c01e450:	f85d fb04 	ldr.w	pc, [sp], #4

0c01e454 <mbedtls_mpi_sub_int>:
{
 c01e454:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    p[0] = ( b < 0 ) ? -b : b;
 c01e456:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 c01e45a:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 c01e45e:	2a00      	cmp	r2, #0
    p[0] = ( b < 0 ) ? -b : b;
 c01e460:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 c01e462:	bfb4      	ite	lt
 c01e464:	f04f 33ff 	movlt.w	r3, #4294967295
 c01e468:	2301      	movge	r3, #1
 c01e46a:	9301      	str	r3, [sp, #4]
    _B.n = 1;
 c01e46c:	2301      	movs	r3, #1
    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 c01e46e:	aa01      	add	r2, sp, #4
    _B.n = 1;
 c01e470:	9302      	str	r3, [sp, #8]
    _B.p = p;
 c01e472:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 c01e476:	f7ff ffb4 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
}
 c01e47a:	b005      	add	sp, #20
 c01e47c:	f85d fb04 	ldr.w	pc, [sp], #4

0c01e480 <mbedtls_mpi_mul_mpi>:
{
 c01e480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    X->n = 0;
 c01e484:	2300      	movs	r3, #0
{
 c01e486:	4615      	mov	r5, r2
    X->n = 0;
 c01e488:	2201      	movs	r2, #1
{
 c01e48a:	b086      	sub	sp, #24
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 c01e48c:	4288      	cmp	r0, r1
{
 c01e48e:	4680      	mov	r8, r0
 c01e490:	460e      	mov	r6, r1
    X->n = 0;
 c01e492:	e9cd 2300 	strd	r2, r3, [sp]
    X->s = 1;
 c01e496:	e9cd 3202 	strd	r3, r2, [sp, #8]
    X->p = NULL;
 c01e49a:	e9cd 3304 	strd	r3, r3, [sp, #16]
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 c01e49e:	d105      	bne.n	c01e4ac <mbedtls_mpi_mul_mpi+0x2c>
 c01e4a0:	4668      	mov	r0, sp
 c01e4a2:	f7ff fb4c 	bl	c01db3e <mbedtls_mpi_copy>
 c01e4a6:	4604      	mov	r4, r0
 c01e4a8:	bb50      	cbnz	r0, c01e500 <mbedtls_mpi_mul_mpi+0x80>
 c01e4aa:	466e      	mov	r6, sp
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 c01e4ac:	45a8      	cmp	r8, r5
 c01e4ae:	d106      	bne.n	c01e4be <mbedtls_mpi_mul_mpi+0x3e>
 c01e4b0:	4641      	mov	r1, r8
 c01e4b2:	a803      	add	r0, sp, #12
 c01e4b4:	f7ff fb43 	bl	c01db3e <mbedtls_mpi_copy>
 c01e4b8:	4604      	mov	r4, r0
 c01e4ba:	bb08      	cbnz	r0, c01e500 <mbedtls_mpi_mul_mpi+0x80>
 c01e4bc:	ad03      	add	r5, sp, #12
    for( i = A->n; i > 0; i-- )
 c01e4be:	f8d6 9004 	ldr.w	r9, [r6, #4]
 c01e4c2:	ea4f 0389 	mov.w	r3, r9, lsl #2
 c01e4c6:	f1b9 0f00 	cmp.w	r9, #0
 c01e4ca:	d123      	bne.n	c01e514 <mbedtls_mpi_mul_mpi+0x94>
    for( j = B->n; j > 0; j-- )
 c01e4cc:	686f      	ldr	r7, [r5, #4]
 c01e4ce:	00bb      	lsls	r3, r7, #2
 c01e4d0:	bb57      	cbnz	r7, c01e528 <mbedtls_mpi_mul_mpi+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 c01e4d2:	eb09 0107 	add.w	r1, r9, r7
 c01e4d6:	4640      	mov	r0, r8
 c01e4d8:	f7ff fad2 	bl	c01da80 <mbedtls_mpi_grow>
 c01e4dc:	4604      	mov	r4, r0
 c01e4de:	b978      	cbnz	r0, c01e500 <mbedtls_mpi_mul_mpi+0x80>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 c01e4e0:	4601      	mov	r1, r0
 c01e4e2:	4640      	mov	r0, r8
 c01e4e4:	f7ff fbe2 	bl	c01dcac <mbedtls_mpi_lset>
 c01e4e8:	4604      	mov	r4, r0
 c01e4ea:	b948      	cbnz	r0, c01e500 <mbedtls_mpi_mul_mpi+0x80>
 c01e4ec:	ea4f 0a87 	mov.w	sl, r7, lsl #2
 c01e4f0:	f1aa 0a04 	sub.w	sl, sl, #4
    for( ; j > 0; j-- )
 c01e4f4:	bb0f      	cbnz	r7, c01e53a <mbedtls_mpi_mul_mpi+0xba>
    X->s = A->s * B->s;
 c01e4f6:	6832      	ldr	r2, [r6, #0]
 c01e4f8:	682b      	ldr	r3, [r5, #0]
 c01e4fa:	4353      	muls	r3, r2
 c01e4fc:	f8c8 3000 	str.w	r3, [r8]
    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 c01e500:	a803      	add	r0, sp, #12
 c01e502:	f7ff faab 	bl	c01da5c <mbedtls_mpi_free>
 c01e506:	4668      	mov	r0, sp
 c01e508:	f7ff faa8 	bl	c01da5c <mbedtls_mpi_free>
}
 c01e50c:	4620      	mov	r0, r4
 c01e50e:	b006      	add	sp, #24
 c01e510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( A->p[i - 1] != 0 )
 c01e514:	68b2      	ldr	r2, [r6, #8]
 c01e516:	441a      	add	r2, r3
 c01e518:	f852 2c04 	ldr.w	r2, [r2, #-4]
 c01e51c:	3b04      	subs	r3, #4
 c01e51e:	2a00      	cmp	r2, #0
 c01e520:	d1d4      	bne.n	c01e4cc <mbedtls_mpi_mul_mpi+0x4c>
    for( i = A->n; i > 0; i-- )
 c01e522:	f109 39ff 	add.w	r9, r9, #4294967295
 c01e526:	e7ce      	b.n	c01e4c6 <mbedtls_mpi_mul_mpi+0x46>
        if( B->p[j - 1] != 0 )
 c01e528:	68aa      	ldr	r2, [r5, #8]
 c01e52a:	441a      	add	r2, r3
 c01e52c:	f852 2c04 	ldr.w	r2, [r2, #-4]
 c01e530:	3b04      	subs	r3, #4
 c01e532:	2a00      	cmp	r2, #0
 c01e534:	d1cd      	bne.n	c01e4d2 <mbedtls_mpi_mul_mpi+0x52>
    for( j = B->n; j > 0; j-- )
 c01e536:	3f01      	subs	r7, #1
 c01e538:	e7ca      	b.n	c01e4d0 <mbedtls_mpi_mul_mpi+0x50>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
 c01e53a:	68ab      	ldr	r3, [r5, #8]
 c01e53c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 c01e540:	f853 300a 	ldr.w	r3, [r3, sl]
 c01e544:	4452      	add	r2, sl
 c01e546:	68b1      	ldr	r1, [r6, #8]
 c01e548:	4648      	mov	r0, r9
 c01e54a:	f7fe ffdf 	bl	c01d50c <mpi_mul_hlp>
    for( ; j > 0; j-- )
 c01e54e:	3f01      	subs	r7, #1
 c01e550:	e7ce      	b.n	c01e4f0 <mbedtls_mpi_mul_mpi+0x70>

0c01e552 <mbedtls_mpi_mul_int>:
{
 c01e552:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _B.s = 1;
 c01e554:	2301      	movs	r3, #1
    p[0] = b;
 c01e556:	9200      	str	r2, [sp, #0]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 c01e558:	aa01      	add	r2, sp, #4
    _B.n = 1;
 c01e55a:	e9cd 3301 	strd	r3, r3, [sp, #4]
    _B.p = p;
 c01e55e:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 c01e562:	f7ff ff8d 	bl	c01e480 <mbedtls_mpi_mul_mpi>
}
 c01e566:	b005      	add	sp, #20
 c01e568:	f85d fb04 	ldr.w	pc, [sp], #4

0c01e56c <mbedtls_mpi_read_string>:
{
 c01e56c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    if( radix < 2 || radix > 16 )
 c01e570:	1e8b      	subs	r3, r1, #2
 c01e572:	2b0e      	cmp	r3, #14
{
 c01e574:	4605      	mov	r5, r0
 c01e576:	4689      	mov	r9, r1
 c01e578:	4690      	mov	r8, r2
    if( radix < 2 || radix > 16 )
 c01e57a:	d905      	bls.n	c01e588 <mbedtls_mpi_read_string+0x1c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 c01e57c:	f06f 0403 	mvn.w	r4, #3
}
 c01e580:	4620      	mov	r0, r4
 c01e582:	b004      	add	sp, #16
 c01e584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    X->n = 0;
 c01e588:	2301      	movs	r3, #1
 c01e58a:	2400      	movs	r4, #0
    slen = strlen( s );
 c01e58c:	4610      	mov	r0, r2
    X->n = 0;
 c01e58e:	e9cd 3401 	strd	r3, r4, [sp, #4]
    X->p = NULL;
 c01e592:	9403      	str	r4, [sp, #12]
    slen = strlen( s );
 c01e594:	f7f6 ff60 	bl	c015458 <strlen>
    if( radix == 16 )
 c01e598:	f1b9 0f10 	cmp.w	r9, #16
    slen = strlen( s );
 c01e59c:	4606      	mov	r6, r0
    if( radix == 16 )
 c01e59e:	d13e      	bne.n	c01e61e <mbedtls_mpi_read_string+0xb2>
        if( slen > MPI_SIZE_T_MAX >> 2 )
 c01e5a0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 c01e5a4:	d2ea      	bcs.n	c01e57c <mbedtls_mpi_read_string+0x10>
        n = BITS_TO_LIMBS( slen << 2 );
 c01e5a6:	0083      	lsls	r3, r0, #2
 c01e5a8:	f013 0f1c 	tst.w	r3, #28
 c01e5ac:	bf0c      	ite	eq
 c01e5ae:	4621      	moveq	r1, r4
 c01e5b0:	2101      	movne	r1, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, n ) );
 c01e5b2:	4628      	mov	r0, r5
 c01e5b4:	eb01 1153 	add.w	r1, r1, r3, lsr #5
 c01e5b8:	f7ff fa62 	bl	c01da80 <mbedtls_mpi_grow>
 c01e5bc:	4604      	mov	r4, r0
 c01e5be:	b990      	cbnz	r0, c01e5e6 <mbedtls_mpi_read_string+0x7a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 c01e5c0:	4601      	mov	r1, r0
 c01e5c2:	4628      	mov	r0, r5
 c01e5c4:	f7ff fb72 	bl	c01dcac <mbedtls_mpi_lset>
 c01e5c8:	4604      	mov	r4, r0
 c01e5ca:	b960      	cbnz	r0, c01e5e6 <mbedtls_mpi_read_string+0x7a>
        for( i = slen, j = 0; i > 0; i--, j++ )
 c01e5cc:	4607      	mov	r7, r0
 c01e5ce:	b90e      	cbnz	r6, c01e5d4 <mbedtls_mpi_read_string+0x68>
            MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i - 1] ) );
 c01e5d0:	2400      	movs	r4, #0
 c01e5d2:	e008      	b.n	c01e5e6 <mbedtls_mpi_read_string+0x7a>
            if( i == 1 && s[i - 1] == '-' )
 c01e5d4:	2e01      	cmp	r6, #1
 c01e5d6:	d10a      	bne.n	c01e5ee <mbedtls_mpi_read_string+0x82>
 c01e5d8:	f898 3000 	ldrb.w	r3, [r8]
 c01e5dc:	2b2d      	cmp	r3, #45	; 0x2d
 c01e5de:	d106      	bne.n	c01e5ee <mbedtls_mpi_read_string+0x82>
                X->s = -1;
 c01e5e0:	f04f 33ff 	mov.w	r3, #4294967295
 c01e5e4:	602b      	str	r3, [r5, #0]
    mbedtls_mpi_free( &T );
 c01e5e6:	a801      	add	r0, sp, #4
 c01e5e8:	f7ff fa38 	bl	c01da5c <mbedtls_mpi_free>
    return( ret );
 c01e5ec:	e7c8      	b.n	c01e580 <mbedtls_mpi_read_string+0x14>
            MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i - 1] ) );
 c01e5ee:	3e01      	subs	r6, #1
 c01e5f0:	f818 2006 	ldrb.w	r2, [r8, r6]
 c01e5f4:	2110      	movs	r1, #16
 c01e5f6:	4668      	mov	r0, sp
 c01e5f8:	f7fe ff42 	bl	c01d480 <mpi_get_digit>
 c01e5fc:	2800      	cmp	r0, #0
 c01e5fe:	d143      	bne.n	c01e688 <mbedtls_mpi_read_string+0x11c>
            X->p[j / ( 2 * ciL )] |= d << ( ( j % ( 2 * ciL ) ) << 2 );
 c01e600:	9b00      	ldr	r3, [sp, #0]
 c01e602:	68a9      	ldr	r1, [r5, #8]
 c01e604:	00ba      	lsls	r2, r7, #2
 c01e606:	08f8      	lsrs	r0, r7, #3
 c01e608:	f002 021c 	and.w	r2, r2, #28
 c01e60c:	fa03 f202 	lsl.w	r2, r3, r2
 c01e610:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
        for( i = slen, j = 0; i > 0; i--, j++ )
 c01e614:	3701      	adds	r7, #1
            X->p[j / ( 2 * ciL )] |= d << ( ( j % ( 2 * ciL ) ) << 2 );
 c01e616:	4313      	orrs	r3, r2
 c01e618:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
 c01e61c:	e7d7      	b.n	c01e5ce <mbedtls_mpi_read_string+0x62>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 c01e61e:	4621      	mov	r1, r4
 c01e620:	4628      	mov	r0, r5
 c01e622:	f7ff fb43 	bl	c01dcac <mbedtls_mpi_lset>
 c01e626:	4604      	mov	r4, r0
 c01e628:	2800      	cmp	r0, #0
 c01e62a:	d1dc      	bne.n	c01e5e6 <mbedtls_mpi_read_string+0x7a>
        for( i = 0; i < slen; i++ )
 c01e62c:	4607      	mov	r7, r0
                X->s = -1;
 c01e62e:	f04f 3aff 	mov.w	sl, #4294967295
        for( i = 0; i < slen; i++ )
 c01e632:	42b7      	cmp	r7, r6
 c01e634:	d0cc      	beq.n	c01e5d0 <mbedtls_mpi_read_string+0x64>
            if( i == 0 && s[i] == '-' )
 c01e636:	b93f      	cbnz	r7, c01e648 <mbedtls_mpi_read_string+0xdc>
 c01e638:	f898 3000 	ldrb.w	r3, [r8]
 c01e63c:	2b2d      	cmp	r3, #45	; 0x2d
 c01e63e:	d103      	bne.n	c01e648 <mbedtls_mpi_read_string+0xdc>
                X->s = -1;
 c01e640:	f8c5 a000 	str.w	sl, [r5]
        for( i = 0; i < slen; i++ )
 c01e644:	3701      	adds	r7, #1
 c01e646:	e7f4      	b.n	c01e632 <mbedtls_mpi_read_string+0xc6>
            MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i] ) );
 c01e648:	f818 2007 	ldrb.w	r2, [r8, r7]
 c01e64c:	4649      	mov	r1, r9
 c01e64e:	4668      	mov	r0, sp
 c01e650:	f7fe ff16 	bl	c01d480 <mpi_get_digit>
 c01e654:	4604      	mov	r4, r0
 c01e656:	2800      	cmp	r0, #0
 c01e658:	d1c5      	bne.n	c01e5e6 <mbedtls_mpi_read_string+0x7a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T, X, radix ) );
 c01e65a:	464a      	mov	r2, r9
 c01e65c:	4629      	mov	r1, r5
 c01e65e:	a801      	add	r0, sp, #4
 c01e660:	f7ff ff77 	bl	c01e552 <mbedtls_mpi_mul_int>
 c01e664:	4604      	mov	r4, r0
 c01e666:	2800      	cmp	r0, #0
 c01e668:	d1bd      	bne.n	c01e5e6 <mbedtls_mpi_read_string+0x7a>
            if( X->s == 1 )
 c01e66a:	682b      	ldr	r3, [r5, #0]
 c01e66c:	9a00      	ldr	r2, [sp, #0]
 c01e66e:	2b01      	cmp	r3, #1
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( X, &T, d ) );
 c01e670:	a901      	add	r1, sp, #4
 c01e672:	4628      	mov	r0, r5
            if( X->s == 1 )
 c01e674:	d105      	bne.n	c01e682 <mbedtls_mpi_read_string+0x116>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( X, &T, d ) );
 c01e676:	f7ff fed7 	bl	c01e428 <mbedtls_mpi_add_int>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( X, &T, d ) );
 c01e67a:	4604      	mov	r4, r0
 c01e67c:	2800      	cmp	r0, #0
 c01e67e:	d0e1      	beq.n	c01e644 <mbedtls_mpi_read_string+0xd8>
cleanup:
 c01e680:	e7b1      	b.n	c01e5e6 <mbedtls_mpi_read_string+0x7a>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( X, &T, d ) );
 c01e682:	f7ff fee7 	bl	c01e454 <mbedtls_mpi_sub_int>
 c01e686:	e7f8      	b.n	c01e67a <mbedtls_mpi_read_string+0x10e>
            MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i - 1] ) );
 c01e688:	4604      	mov	r4, r0
 c01e68a:	e7ac      	b.n	c01e5e6 <mbedtls_mpi_read_string+0x7a>

0c01e68c <mbedtls_mpi_div_mpi>:
{
 c01e68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c01e690:	b099      	sub	sp, #100	; 0x64
 c01e692:	9001      	str	r0, [sp, #4]
 c01e694:	460f      	mov	r7, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 c01e696:	4618      	mov	r0, r3
 c01e698:	2100      	movs	r1, #0
{
 c01e69a:	4690      	mov	r8, r2
 c01e69c:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 c01e69e:	f7ff fdc9 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c01e6a2:	2800      	cmp	r0, #0
 c01e6a4:	f000 81a5 	beq.w	c01e9f2 <mbedtls_mpi_div_mpi+0x366>
    X->n = 0;
 c01e6a8:	2400      	movs	r4, #0
 c01e6aa:	2501      	movs	r5, #1
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 c01e6ac:	9903      	ldr	r1, [sp, #12]
 c01e6ae:	4640      	mov	r0, r8
    X->n = 0;
 c01e6b0:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
    X->s = 1;
 c01e6b4:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    X->p = NULL;
 c01e6b8:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    X->n = 0;
 c01e6bc:	e9cd 540f 	strd	r5, r4, [sp, #60]	; 0x3c
    X->s = 1;
 c01e6c0:	e9cd 4511 	strd	r4, r5, [sp, #68]	; 0x44
    X->p = NULL;
 c01e6c4:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
    X->n = 0;
 c01e6c8:	e9cd 5415 	strd	r5, r4, [sp, #84]	; 0x54
    X->p = NULL;
 c01e6cc:	9417      	str	r4, [sp, #92]	; 0x5c
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 c01e6ce:	f7ff fcdc 	bl	c01e08a <mbedtls_mpi_cmp_abs>
 c01e6d2:	42a0      	cmp	r0, r4
 c01e6d4:	da26      	bge.n	c01e724 <mbedtls_mpi_div_mpi+0x98>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 c01e6d6:	9b01      	ldr	r3, [sp, #4]
 c01e6d8:	b92b      	cbnz	r3, c01e6e6 <mbedtls_mpi_div_mpi+0x5a>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 c01e6da:	b9df      	cbnz	r7, c01e714 <mbedtls_mpi_div_mpi+0x88>
        return( 0 );
 c01e6dc:	2400      	movs	r4, #0
}
 c01e6de:	4620      	mov	r0, r4
 c01e6e0:	b019      	add	sp, #100	; 0x64
 c01e6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 c01e6e6:	4621      	mov	r1, r4
 c01e6e8:	9801      	ldr	r0, [sp, #4]
 c01e6ea:	f7ff fadf 	bl	c01dcac <mbedtls_mpi_lset>
 c01e6ee:	4604      	mov	r4, r0
 c01e6f0:	2800      	cmp	r0, #0
 c01e6f2:	d0f2      	beq.n	c01e6da <mbedtls_mpi_div_mpi+0x4e>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 c01e6f4:	a809      	add	r0, sp, #36	; 0x24
 c01e6f6:	f7ff f9b1 	bl	c01da5c <mbedtls_mpi_free>
 c01e6fa:	a80c      	add	r0, sp, #48	; 0x30
 c01e6fc:	f7ff f9ae 	bl	c01da5c <mbedtls_mpi_free>
 c01e700:	a80f      	add	r0, sp, #60	; 0x3c
 c01e702:	f7ff f9ab 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 c01e706:	a812      	add	r0, sp, #72	; 0x48
 c01e708:	f7ff f9a8 	bl	c01da5c <mbedtls_mpi_free>
 c01e70c:	a815      	add	r0, sp, #84	; 0x54
 c01e70e:	f7ff f9a5 	bl	c01da5c <mbedtls_mpi_free>
    return( ret );
 c01e712:	e7e4      	b.n	c01e6de <mbedtls_mpi_div_mpi+0x52>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 c01e714:	4641      	mov	r1, r8
 c01e716:	4638      	mov	r0, r7
 c01e718:	f7ff fa11 	bl	c01db3e <mbedtls_mpi_copy>
 c01e71c:	4604      	mov	r4, r0
 c01e71e:	2800      	cmp	r0, #0
 c01e720:	d1e8      	bne.n	c01e6f4 <mbedtls_mpi_div_mpi+0x68>
 c01e722:	e7db      	b.n	c01e6dc <mbedtls_mpi_div_mpi+0x50>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 c01e724:	4641      	mov	r1, r8
 c01e726:	a809      	add	r0, sp, #36	; 0x24
 c01e728:	f7ff fa09 	bl	c01db3e <mbedtls_mpi_copy>
 c01e72c:	4604      	mov	r4, r0
 c01e72e:	2800      	cmp	r0, #0
 c01e730:	d1e0      	bne.n	c01e6f4 <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 c01e732:	ae0c      	add	r6, sp, #48	; 0x30
 c01e734:	9903      	ldr	r1, [sp, #12]
 c01e736:	4630      	mov	r0, r6
 c01e738:	f7ff fa01 	bl	c01db3e <mbedtls_mpi_copy>
 c01e73c:	4604      	mov	r4, r0
 c01e73e:	2800      	cmp	r0, #0
 c01e740:	d1d8      	bne.n	c01e6f4 <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 c01e742:	f8d8 1004 	ldr.w	r1, [r8, #4]
 c01e746:	a80f      	add	r0, sp, #60	; 0x3c
 c01e748:	3102      	adds	r1, #2
    X.s = Y.s = 1;
 c01e74a:	950c      	str	r5, [sp, #48]	; 0x30
 c01e74c:	9509      	str	r5, [sp, #36]	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 c01e74e:	f7ff f997 	bl	c01da80 <mbedtls_mpi_grow>
 c01e752:	4604      	mov	r4, r0
 c01e754:	2800      	cmp	r0, #0
 c01e756:	d1cd      	bne.n	c01e6f4 <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 c01e758:	4601      	mov	r1, r0
 c01e75a:	a80f      	add	r0, sp, #60	; 0x3c
 c01e75c:	f7ff faa6 	bl	c01dcac <mbedtls_mpi_lset>
 c01e760:	4604      	mov	r4, r0
 c01e762:	2800      	cmp	r0, #0
 c01e764:	d1c6      	bne.n	c01e6f4 <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 c01e766:	2102      	movs	r1, #2
 c01e768:	a812      	add	r0, sp, #72	; 0x48
 c01e76a:	f7ff f989 	bl	c01da80 <mbedtls_mpi_grow>
 c01e76e:	4604      	mov	r4, r0
 c01e770:	2800      	cmp	r0, #0
 c01e772:	d1bf      	bne.n	c01e6f4 <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 c01e774:	2103      	movs	r1, #3
 c01e776:	a815      	add	r0, sp, #84	; 0x54
 c01e778:	f7ff f982 	bl	c01da80 <mbedtls_mpi_grow>
 c01e77c:	4604      	mov	r4, r0
 c01e77e:	2800      	cmp	r0, #0
 c01e780:	d1b8      	bne.n	c01e6f4 <mbedtls_mpi_div_mpi+0x68>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
 c01e782:	4630      	mov	r0, r6
 c01e784:	f7ff fb02 	bl	c01dd8c <mbedtls_mpi_bitlen>
 c01e788:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
 c01e78c:	281f      	cmp	r0, #31
 c01e78e:	d076      	beq.n	c01e87e <mbedtls_mpi_div_mpi+0x1f2>
        k = biL - 1 - k;
 c01e790:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 c01e794:	4619      	mov	r1, r3
 c01e796:	a809      	add	r0, sp, #36	; 0x24
        k = biL - 1 - k;
 c01e798:	9302      	str	r3, [sp, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 c01e79a:	f7ff fbf3 	bl	c01df84 <mbedtls_mpi_shift_l>
 c01e79e:	4604      	mov	r4, r0
 c01e7a0:	2800      	cmp	r0, #0
 c01e7a2:	d1a7      	bne.n	c01e6f4 <mbedtls_mpi_div_mpi+0x68>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 c01e7a4:	9902      	ldr	r1, [sp, #8]
 c01e7a6:	4630      	mov	r0, r6
 c01e7a8:	f7ff fbec 	bl	c01df84 <mbedtls_mpi_shift_l>
 c01e7ac:	4604      	mov	r4, r0
 c01e7ae:	2800      	cmp	r0, #0
 c01e7b0:	d1a0      	bne.n	c01e6f4 <mbedtls_mpi_div_mpi+0x68>
    n = X.n - 1;
 c01e7b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    t = Y.n - 1;
 c01e7b4:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    n = X.n - 1;
 c01e7b8:	f105 39ff 	add.w	r9, r5, #4294967295
    t = Y.n - 1;
 c01e7bc:	f10a 33ff 	add.w	r3, sl, #4294967295
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 c01e7c0:	eba9 0b03 	sub.w	fp, r9, r3
    t = Y.n - 1;
 c01e7c4:	9300      	str	r3, [sp, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 c01e7c6:	ea4f 134b 	mov.w	r3, fp, lsl #5
 c01e7ca:	4619      	mov	r1, r3
 c01e7cc:	4630      	mov	r0, r6
 c01e7ce:	9304      	str	r3, [sp, #16]
 c01e7d0:	f7ff fbd8 	bl	c01df84 <mbedtls_mpi_shift_l>
 c01e7d4:	4604      	mov	r4, r0
 c01e7d6:	2800      	cmp	r0, #0
 c01e7d8:	d18c      	bne.n	c01e6f4 <mbedtls_mpi_div_mpi+0x68>
        Z.p[n - t]++;
 c01e7da:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 c01e7de:	4631      	mov	r1, r6
 c01e7e0:	a809      	add	r0, sp, #36	; 0x24
 c01e7e2:	f7ff fce7 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c01e7e6:	2800      	cmp	r0, #0
 c01e7e8:	da4b      	bge.n	c01e882 <mbedtls_mpi_div_mpi+0x1f6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 c01e7ea:	9904      	ldr	r1, [sp, #16]
 c01e7ec:	4630      	mov	r0, r6
 c01e7ee:	f7ff fc11 	bl	c01e014 <mbedtls_mpi_shift_r>
 c01e7f2:	4604      	mov	r4, r0
 c01e7f4:	2800      	cmp	r0, #0
 c01e7f6:	f47f af7d 	bne.w	c01e6f4 <mbedtls_mpi_div_mpi+0x68>
        if( X.p[i] >= Y.p[t] )
 c01e7fa:	9b00      	ldr	r3, [sp, #0]
 c01e7fc:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 c01e800:	009b      	lsls	r3, r3, #2
 c01e802:	9304      	str	r3, [sp, #16]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 c01e804:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 c01e808:	3b02      	subs	r3, #2
 c01e80a:	009b      	lsls	r3, r3, #2
 c01e80c:	9307      	str	r3, [sp, #28]
 c01e80e:	f06f 0303 	mvn.w	r3, #3
 c01e812:	fb03 f30a 	mul.w	r3, r3, sl
 c01e816:	3d01      	subs	r5, #1
 c01e818:	9306      	str	r3, [sp, #24]
 c01e81a:	ebca 63ca 	rsb	r3, sl, sl, lsl #27
 c01e81e:	00ad      	lsls	r5, r5, #2
 c01e820:	9305      	str	r3, [sp, #20]
    for( i = n; i > t ; i-- )
 c01e822:	9b00      	ldr	r3, [sp, #0]
 c01e824:	4599      	cmp	r9, r3
 c01e826:	d83b      	bhi.n	c01e8a0 <mbedtls_mpi_div_mpi+0x214>
    if( Q != NULL )
 c01e828:	9b01      	ldr	r3, [sp, #4]
 c01e82a:	b15b      	cbz	r3, c01e844 <mbedtls_mpi_div_mpi+0x1b8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 c01e82c:	a90f      	add	r1, sp, #60	; 0x3c
 c01e82e:	4618      	mov	r0, r3
 c01e830:	f7ff f985 	bl	c01db3e <mbedtls_mpi_copy>
 c01e834:	bb08      	cbnz	r0, c01e87a <mbedtls_mpi_div_mpi+0x1ee>
        Q->s = A->s * B->s;
 c01e836:	9b03      	ldr	r3, [sp, #12]
 c01e838:	f8d8 2000 	ldr.w	r2, [r8]
 c01e83c:	681b      	ldr	r3, [r3, #0]
 c01e83e:	4353      	muls	r3, r2
 c01e840:	9a01      	ldr	r2, [sp, #4]
 c01e842:	6013      	str	r3, [r2, #0]
    if( R != NULL )
 c01e844:	2f00      	cmp	r7, #0
 c01e846:	f43f af55 	beq.w	c01e6f4 <mbedtls_mpi_div_mpi+0x68>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 c01e84a:	9902      	ldr	r1, [sp, #8]
 c01e84c:	a809      	add	r0, sp, #36	; 0x24
 c01e84e:	f7ff fbe1 	bl	c01e014 <mbedtls_mpi_shift_r>
 c01e852:	b990      	cbnz	r0, c01e87a <mbedtls_mpi_div_mpi+0x1ee>
        X.s = A->s;
 c01e854:	f8d8 3000 	ldr.w	r3, [r8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 c01e858:	a909      	add	r1, sp, #36	; 0x24
 c01e85a:	4638      	mov	r0, r7
        X.s = A->s;
 c01e85c:	9309      	str	r3, [sp, #36]	; 0x24
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 c01e85e:	f7ff f96e 	bl	c01db3e <mbedtls_mpi_copy>
 c01e862:	4601      	mov	r1, r0
 c01e864:	2800      	cmp	r0, #0
 c01e866:	f040 80c2 	bne.w	c01e9ee <mbedtls_mpi_div_mpi+0x362>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 c01e86a:	4638      	mov	r0, r7
 c01e86c:	f7ff fce2 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c01e870:	2800      	cmp	r0, #0
 c01e872:	f47f af3f 	bne.w	c01e6f4 <mbedtls_mpi_div_mpi+0x68>
            R->s = 1;
 c01e876:	2301      	movs	r3, #1
 c01e878:	603b      	str	r3, [r7, #0]
cleanup:
 c01e87a:	4604      	mov	r4, r0
 c01e87c:	e73a      	b.n	c01e6f4 <mbedtls_mpi_div_mpi+0x68>
    else k = 0;
 c01e87e:	9402      	str	r4, [sp, #8]
 c01e880:	e797      	b.n	c01e7b2 <mbedtls_mpi_div_mpi+0x126>
        Z.p[n - t]++;
 c01e882:	9911      	ldr	r1, [sp, #68]	; 0x44
 c01e884:	f851 200b 	ldr.w	r2, [r1, fp]
 c01e888:	3201      	adds	r2, #1
 c01e88a:	f841 200b 	str.w	r2, [r1, fp]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 c01e88e:	a909      	add	r1, sp, #36	; 0x24
 c01e890:	4632      	mov	r2, r6
 c01e892:	4608      	mov	r0, r1
 c01e894:	f7ff fda5 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c01e898:	4604      	mov	r4, r0
 c01e89a:	2800      	cmp	r0, #0
 c01e89c:	d09f      	beq.n	c01e7de <mbedtls_mpi_div_mpi+0x152>
cleanup:
 c01e89e:	e729      	b.n	c01e6f4 <mbedtls_mpi_div_mpi+0x68>
        if( X.p[i] >= Y.p[t] )
 c01e8a0:	9804      	ldr	r0, [sp, #16]
 c01e8a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 c01e8a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 c01e8a6:	594b      	ldr	r3, [r1, r5]
 c01e8a8:	5812      	ldr	r2, [r2, r0]
 c01e8aa:	9806      	ldr	r0, [sp, #24]
 c01e8ac:	4293      	cmp	r3, r2
 c01e8ae:	eb00 0605 	add.w	r6, r0, r5
 c01e8b2:	f1a5 0b04 	sub.w	fp, r5, #4
 c01e8b6:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 c01e8ba:	d37e      	bcc.n	c01e9ba <mbedtls_mpi_div_mpi+0x32e>
            Z.p[i - t - 1] = ~0;
 c01e8bc:	f04f 33ff 	mov.w	r3, #4294967295
 c01e8c0:	f84a 3006 	str.w	r3, [sl, r6]
        Z.p[i - t - 1]++;
 c01e8c4:	f85a 3006 	ldr.w	r3, [sl, r6]
 c01e8c8:	3301      	adds	r3, #1
 c01e8ca:	f84a 3006 	str.w	r3, [sl, r6]
 c01e8ce:	f1a5 0a08 	sub.w	sl, r5, #8
            Z.p[i - t - 1]--;
 c01e8d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 c01e8d4:	2100      	movs	r1, #0
            Z.p[i - t - 1]--;
 c01e8d6:	5993      	ldr	r3, [r2, r6]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 c01e8d8:	a812      	add	r0, sp, #72	; 0x48
            Z.p[i - t - 1]--;
 c01e8da:	3b01      	subs	r3, #1
 c01e8dc:	5193      	str	r3, [r2, r6]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 c01e8de:	f7ff f9e5 	bl	c01dcac <mbedtls_mpi_lset>
 c01e8e2:	2800      	cmp	r0, #0
 c01e8e4:	d1c9      	bne.n	c01e87a <mbedtls_mpi_div_mpi+0x1ee>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 c01e8e6:	9b00      	ldr	r3, [sp, #0]
 c01e8e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 c01e8ea:	2b00      	cmp	r3, #0
 c01e8ec:	d07d      	beq.n	c01e9ea <mbedtls_mpi_div_mpi+0x35e>
 c01e8ee:	9b07      	ldr	r3, [sp, #28]
 c01e8f0:	58d1      	ldr	r1, [r2, r3]
 c01e8f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 c01e8f4:	6019      	str	r1, [r3, #0]
            T1.p[1] = Y.p[t];
 c01e8f6:	9904      	ldr	r1, [sp, #16]
 c01e8f8:	5852      	ldr	r2, [r2, r1]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 c01e8fa:	a912      	add	r1, sp, #72	; 0x48
            T1.p[1] = Y.p[t];
 c01e8fc:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 c01e8fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 c01e900:	4608      	mov	r0, r1
 c01e902:	599a      	ldr	r2, [r3, r6]
 c01e904:	f7ff fe25 	bl	c01e552 <mbedtls_mpi_mul_int>
 c01e908:	4601      	mov	r1, r0
 c01e90a:	2800      	cmp	r0, #0
 c01e90c:	d16f      	bne.n	c01e9ee <mbedtls_mpi_div_mpi+0x362>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 c01e90e:	a815      	add	r0, sp, #84	; 0x54
 c01e910:	f7ff f9cc 	bl	c01dcac <mbedtls_mpi_lset>
 c01e914:	2800      	cmp	r0, #0
 c01e916:	d1b0      	bne.n	c01e87a <mbedtls_mpi_div_mpi+0x1ee>
 c01e918:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 c01e91a:	f1b9 0f01 	cmp.w	r9, #1
 c01e91e:	bf18      	it	ne
 c01e920:	f852 000a 	ldrne.w	r0, [r2, sl]
 c01e924:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 c01e926:	6018      	str	r0, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 c01e928:	f852 100b 	ldr.w	r1, [r2, fp]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 c01e92c:	a812      	add	r0, sp, #72	; 0x48
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 c01e92e:	6059      	str	r1, [r3, #4]
            T2.p[2] = X.p[i];
 c01e930:	5952      	ldr	r2, [r2, r5]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 c01e932:	a915      	add	r1, sp, #84	; 0x54
            T2.p[2] = X.p[i];
 c01e934:	609a      	str	r2, [r3, #8]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 c01e936:	f7ff fc3d 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c01e93a:	2800      	cmp	r0, #0
 c01e93c:	dcc9      	bgt.n	c01e8d2 <mbedtls_mpi_div_mpi+0x246>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 c01e93e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 c01e940:	a90c      	add	r1, sp, #48	; 0x30
 c01e942:	599a      	ldr	r2, [r3, r6]
 c01e944:	a812      	add	r0, sp, #72	; 0x48
 c01e946:	f7ff fe04 	bl	c01e552 <mbedtls_mpi_mul_int>
 c01e94a:	2800      	cmp	r0, #0
 c01e94c:	d195      	bne.n	c01e87a <mbedtls_mpi_div_mpi+0x1ee>
 c01e94e:	9b05      	ldr	r3, [sp, #20]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 c01e950:	a812      	add	r0, sp, #72	; 0x48
 c01e952:	eb03 0a09 	add.w	sl, r3, r9
 c01e956:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
 c01e95a:	4651      	mov	r1, sl
 c01e95c:	f7ff fb12 	bl	c01df84 <mbedtls_mpi_shift_l>
 c01e960:	2800      	cmp	r0, #0
 c01e962:	d18a      	bne.n	c01e87a <mbedtls_mpi_div_mpi+0x1ee>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 c01e964:	a909      	add	r1, sp, #36	; 0x24
 c01e966:	4608      	mov	r0, r1
 c01e968:	aa12      	add	r2, sp, #72	; 0x48
 c01e96a:	f7ff fd3a 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c01e96e:	4601      	mov	r1, r0
 c01e970:	2800      	cmp	r0, #0
 c01e972:	d13c      	bne.n	c01e9ee <mbedtls_mpi_div_mpi+0x362>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 c01e974:	a809      	add	r0, sp, #36	; 0x24
 c01e976:	f7ff fc5d 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c01e97a:	2800      	cmp	r0, #0
 c01e97c:	da19      	bge.n	c01e9b2 <mbedtls_mpi_div_mpi+0x326>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 c01e97e:	a90c      	add	r1, sp, #48	; 0x30
 c01e980:	a812      	add	r0, sp, #72	; 0x48
 c01e982:	f7ff f8dc 	bl	c01db3e <mbedtls_mpi_copy>
 c01e986:	2800      	cmp	r0, #0
 c01e988:	f47f af77 	bne.w	c01e87a <mbedtls_mpi_div_mpi+0x1ee>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 c01e98c:	4651      	mov	r1, sl
 c01e98e:	a812      	add	r0, sp, #72	; 0x48
 c01e990:	f7ff faf8 	bl	c01df84 <mbedtls_mpi_shift_l>
 c01e994:	2800      	cmp	r0, #0
 c01e996:	f47f af70 	bne.w	c01e87a <mbedtls_mpi_div_mpi+0x1ee>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 c01e99a:	a909      	add	r1, sp, #36	; 0x24
 c01e99c:	aa12      	add	r2, sp, #72	; 0x48
 c01e99e:	4608      	mov	r0, r1
 c01e9a0:	f7ff fcfd 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c01e9a4:	2800      	cmp	r0, #0
 c01e9a6:	f47f af68 	bne.w	c01e87a <mbedtls_mpi_div_mpi+0x1ee>
            Z.p[i - t - 1]--;
 c01e9aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 c01e9ac:	5993      	ldr	r3, [r2, r6]
 c01e9ae:	3b01      	subs	r3, #1
 c01e9b0:	5193      	str	r3, [r2, r6]
    for( i = n; i > t ; i-- )
 c01e9b2:	f109 39ff 	add.w	r9, r9, #4294967295
 c01e9b6:	3d04      	subs	r5, #4
 c01e9b8:	e733      	b.n	c01e822 <mbedtls_mpi_div_mpi+0x196>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 c01e9ba:	f851 c00b 	ldr.w	ip, [r1, fp]
    if( 0 == d || u1 >= d )
 c01e9be:	b18a      	cbz	r2, c01e9e4 <mbedtls_mpi_div_mpi+0x358>
    dividend  = (mbedtls_t_udbl) u1 << biL;
 c01e9c0:	4619      	mov	r1, r3
 c01e9c2:	2300      	movs	r3, #0
 c01e9c4:	4618      	mov	r0, r3
    quotient = dividend / d;
 c01e9c6:	ea40 000c 	orr.w	r0, r0, ip
 c01e9ca:	f7fa fd2d 	bl	c019428 <__aeabi_uldivmod>
    return (mbedtls_mpi_uint) quotient;
 c01e9ce:	2300      	movs	r3, #0
 c01e9d0:	f04f 32ff 	mov.w	r2, #4294967295
 c01e9d4:	428b      	cmp	r3, r1
 c01e9d6:	bf08      	it	eq
 c01e9d8:	4282      	cmpeq	r2, r0
 c01e9da:	d200      	bcs.n	c01e9de <mbedtls_mpi_div_mpi+0x352>
 c01e9dc:	4610      	mov	r0, r2
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 c01e9de:	f84a 0006 	str.w	r0, [sl, r6]
 c01e9e2:	e76f      	b.n	c01e8c4 <mbedtls_mpi_div_mpi+0x238>
        return ( ~0 );
 c01e9e4:	f04f 30ff 	mov.w	r0, #4294967295
 c01e9e8:	e7f9      	b.n	c01e9de <mbedtls_mpi_div_mpi+0x352>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 c01e9ea:	9900      	ldr	r1, [sp, #0]
 c01e9ec:	e781      	b.n	c01e8f2 <mbedtls_mpi_div_mpi+0x266>
cleanup:
 c01e9ee:	460c      	mov	r4, r1
 c01e9f0:	e680      	b.n	c01e6f4 <mbedtls_mpi_div_mpi+0x68>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 c01e9f2:	f06f 040b 	mvn.w	r4, #11
 c01e9f6:	e672      	b.n	c01e6de <mbedtls_mpi_div_mpi+0x52>

0c01e9f8 <mbedtls_mpi_mod_mpi>:
{
 c01e9f8:	b570      	push	{r4, r5, r6, lr}
 c01e9fa:	4604      	mov	r4, r0
 c01e9fc:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 c01e9fe:	4610      	mov	r0, r2
 c01ea00:	2100      	movs	r1, #0
{
 c01ea02:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 c01ea04:	f7ff fc16 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c01ea08:	2800      	cmp	r0, #0
 c01ea0a:	db24      	blt.n	c01ea56 <mbedtls_mpi_mod_mpi+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 c01ea0c:	462a      	mov	r2, r5
 c01ea0e:	4633      	mov	r3, r6
 c01ea10:	4621      	mov	r1, r4
 c01ea12:	2000      	movs	r0, #0
 c01ea14:	f7ff fe3a 	bl	c01e68c <mbedtls_mpi_div_mpi>
 c01ea18:	4605      	mov	r5, r0
 c01ea1a:	b138      	cbz	r0, c01ea2c <mbedtls_mpi_mod_mpi+0x34>
}
 c01ea1c:	4628      	mov	r0, r5
 c01ea1e:	bd70      	pop	{r4, r5, r6, pc}
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 c01ea20:	4632      	mov	r2, r6
 c01ea22:	4621      	mov	r1, r4
 c01ea24:	4620      	mov	r0, r4
 c01ea26:	f7ff fcba 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c01ea2a:	b990      	cbnz	r0, c01ea52 <mbedtls_mpi_mod_mpi+0x5a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 c01ea2c:	2100      	movs	r1, #0
 c01ea2e:	4620      	mov	r0, r4
 c01ea30:	f7ff fc00 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c01ea34:	2800      	cmp	r0, #0
 c01ea36:	dbf3      	blt.n	c01ea20 <mbedtls_mpi_mod_mpi+0x28>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 c01ea38:	4631      	mov	r1, r6
 c01ea3a:	4620      	mov	r0, r4
 c01ea3c:	f7ff fbba 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c01ea40:	2800      	cmp	r0, #0
 c01ea42:	dbeb      	blt.n	c01ea1c <mbedtls_mpi_mod_mpi+0x24>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 c01ea44:	4632      	mov	r2, r6
 c01ea46:	4621      	mov	r1, r4
 c01ea48:	4620      	mov	r0, r4
 c01ea4a:	f7ff fcca 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c01ea4e:	2800      	cmp	r0, #0
 c01ea50:	d0f2      	beq.n	c01ea38 <mbedtls_mpi_mod_mpi+0x40>
 c01ea52:	4605      	mov	r5, r0
 c01ea54:	e7e2      	b.n	c01ea1c <mbedtls_mpi_mod_mpi+0x24>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 c01ea56:	f06f 0509 	mvn.w	r5, #9
 c01ea5a:	e7df      	b.n	c01ea1c <mbedtls_mpi_mod_mpi+0x24>

0c01ea5c <mbedtls_mpi_mod_int>:
    if( b == 0 )
 c01ea5c:	1e13      	subs	r3, r2, #0
{
 c01ea5e:	b430      	push	{r4, r5}
 c01ea60:	4604      	mov	r4, r0
    if( b == 0 )
 c01ea62:	d012      	beq.n	c01ea8a <mbedtls_mpi_mod_int+0x2e>
    if( b < 0 )
 c01ea64:	db14      	blt.n	c01ea90 <mbedtls_mpi_mod_int+0x34>
    if( b == 1 )
 c01ea66:	2b01      	cmp	r3, #1
 c01ea68:	d103      	bne.n	c01ea72 <mbedtls_mpi_mod_int+0x16>
        *r = 0;
 c01ea6a:	2000      	movs	r0, #0
 c01ea6c:	6020      	str	r0, [r4, #0]
}
 c01ea6e:	bc30      	pop	{r4, r5}
 c01ea70:	4770      	bx	lr
    if( b == 2 )
 c01ea72:	2b02      	cmp	r3, #2
 c01ea74:	d106      	bne.n	c01ea84 <mbedtls_mpi_mod_int+0x28>
        *r = A->p[0] & 1;
 c01ea76:	688b      	ldr	r3, [r1, #8]
 c01ea78:	681b      	ldr	r3, [r3, #0]
 c01ea7a:	f003 0301 	and.w	r3, r3, #1
 c01ea7e:	6003      	str	r3, [r0, #0]
        return( 0 );
 c01ea80:	2000      	movs	r0, #0
 c01ea82:	e7f4      	b.n	c01ea6e <mbedtls_mpi_mod_int+0x12>
}
 c01ea84:	bc30      	pop	{r4, r5}
 c01ea86:	f7fe bfc3 	b.w	c01da10 <mbedtls_mpi_mod_int.part.5>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 c01ea8a:	f06f 000b 	mvn.w	r0, #11
 c01ea8e:	e7ee      	b.n	c01ea6e <mbedtls_mpi_mod_int+0x12>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 c01ea90:	f06f 0009 	mvn.w	r0, #9
 c01ea94:	e7eb      	b.n	c01ea6e <mbedtls_mpi_mod_int+0x12>
	...

0c01ea98 <mpi_check_small_factors>:
{
    int ret = 0;
    size_t i;
    mbedtls_mpi_uint r;

    if( ( X->p[0] & 1 ) == 0 )
 c01ea98:	6883      	ldr	r3, [r0, #8]
{
 c01ea9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if( ( X->p[0] & 1 ) == 0 )
 c01ea9c:	681b      	ldr	r3, [r3, #0]
{
 c01ea9e:	4605      	mov	r5, r0
    if( ( X->p[0] & 1 ) == 0 )
 c01eaa0:	07db      	lsls	r3, r3, #31
 c01eaa2:	d517      	bpl.n	c01ead4 <mpi_check_small_factors+0x3c>
 c01eaa4:	4e0e      	ldr	r6, [pc, #56]	; (c01eae0 <mpi_check_small_factors+0x48>)
        return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );

    for( i = 0; small_prime[i] > 0; i++ )
 c01eaa6:	f856 4f04 	ldr.w	r4, [r6, #4]!
 c01eaaa:	2c00      	cmp	r4, #0
 c01eaac:	dc02      	bgt.n	c01eab4 <mpi_check_small_factors+0x1c>
 c01eaae:	2000      	movs	r0, #0
            return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );
    }

cleanup:
    return( ret );
}
 c01eab0:	b002      	add	sp, #8
 c01eab2:	bd70      	pop	{r4, r5, r6, pc}
        if( mbedtls_mpi_cmp_int( X, small_prime[i] ) <= 0 )
 c01eab4:	4621      	mov	r1, r4
 c01eab6:	4628      	mov	r0, r5
 c01eab8:	f7ff fbbc 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c01eabc:	2800      	cmp	r0, #0
 c01eabe:	dd0c      	ble.n	c01eada <mpi_check_small_factors+0x42>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_int( &r, X, small_prime[i] ) );
 c01eac0:	4622      	mov	r2, r4
 c01eac2:	4629      	mov	r1, r5
 c01eac4:	a801      	add	r0, sp, #4
 c01eac6:	f7ff ffc9 	bl	c01ea5c <mbedtls_mpi_mod_int>
 c01eaca:	2800      	cmp	r0, #0
 c01eacc:	d1f0      	bne.n	c01eab0 <mpi_check_small_factors+0x18>
        if( r == 0 )
 c01eace:	9b01      	ldr	r3, [sp, #4]
 c01ead0:	2b00      	cmp	r3, #0
 c01ead2:	d1e8      	bne.n	c01eaa6 <mpi_check_small_factors+0xe>
        return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );
 c01ead4:	f06f 000d 	mvn.w	r0, #13
 c01ead8:	e7ea      	b.n	c01eab0 <mpi_check_small_factors+0x18>
            return( 1 );
 c01eada:	2001      	movs	r0, #1
 c01eadc:	e7e8      	b.n	c01eab0 <mpi_check_small_factors+0x18>
 c01eade:	bf00      	nop
 c01eae0:	0c032e10 	.word	0x0c032e10

0c01eae4 <mbedtls_mpi_exp_mod>:
{
 c01eae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c01eae8:	4606      	mov	r6, r0
 c01eaea:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
 c01eaee:	460f      	mov	r7, r1
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 c01eaf0:	4618      	mov	r0, r3
 c01eaf2:	2100      	movs	r1, #0
{
 c01eaf4:	9203      	str	r2, [sp, #12]
 c01eaf6:	461d      	mov	r5, r3
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 c01eaf8:	f7ff fb9c 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c01eafc:	2800      	cmp	r0, #0
 c01eafe:	f340 8225 	ble.w	c01ef4c <mbedtls_mpi_exp_mod+0x468>
 c01eb02:	68ab      	ldr	r3, [r5, #8]
 c01eb04:	f8d3 8000 	ldr.w	r8, [r3]
 c01eb08:	f018 0f01 	tst.w	r8, #1
 c01eb0c:	f000 821e 	beq.w	c01ef4c <mbedtls_mpi_exp_mod+0x468>
    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
 c01eb10:	2100      	movs	r1, #0
 c01eb12:	9803      	ldr	r0, [sp, #12]
 c01eb14:	f7ff fb8e 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c01eb18:	2800      	cmp	r0, #0
 c01eb1a:	f2c0 8217 	blt.w	c01ef4c <mbedtls_mpi_exp_mod+0x468>
    x += ( ( m0 + 2 ) & 4 ) << 1;
 c01eb1e:	2103      	movs	r1, #3
 c01eb20:	f108 0402 	add.w	r4, r8, #2
 c01eb24:	0064      	lsls	r4, r4, #1
 c01eb26:	f004 0408 	and.w	r4, r4, #8
 c01eb2a:	4444      	add	r4, r8
        x *= ( 2 - ( m0 * x ) );
 c01eb2c:	fb04 f308 	mul.w	r3, r4, r8
    for( i = biL; i >= 8; i /= 2 )
 c01eb30:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
 c01eb32:	f1c3 0302 	rsb	r3, r3, #2
 c01eb36:	fb03 f404 	mul.w	r4, r3, r4
    for( i = biL; i >= 8; i /= 2 )
 c01eb3a:	d1f7      	bne.n	c01eb2c <mbedtls_mpi_exp_mod+0x48>
    X->s = 1;
 c01eb3c:	2301      	movs	r3, #1
    memset( W, 0, sizeof( W ) );
 c01eb3e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 c01eb42:	a814      	add	r0, sp, #80	; 0x50
    X->n = 0;
 c01eb44:	e9cd 3108 	strd	r3, r1, [sp, #32]
    X->s = 1;
 c01eb48:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
    X->p = NULL;
 c01eb4c:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    X->n = 0;
 c01eb50:	e9cd 310e 	strd	r3, r1, [sp, #56]	; 0x38
    X->p = NULL;
 c01eb54:	9110      	str	r1, [sp, #64]	; 0x40
    memset( W, 0, sizeof( W ) );
 c01eb56:	f7f5 ff36 	bl	c0149c6 <memset>
    i = mbedtls_mpi_bitlen( E );
 c01eb5a:	9803      	ldr	r0, [sp, #12]
 c01eb5c:	f7ff f916 	bl	c01dd8c <mbedtls_mpi_bitlen>
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 c01eb60:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
 c01eb64:	f080 80e2 	bcs.w	c01ed2c <mbedtls_mpi_exp_mod+0x248>
 c01eb68:	28ef      	cmp	r0, #239	; 0xef
 c01eb6a:	f200 80e2 	bhi.w	c01ed32 <mbedtls_mpi_exp_mod+0x24e>
 c01eb6e:	284f      	cmp	r0, #79	; 0x4f
 c01eb70:	f200 80e2 	bhi.w	c01ed38 <mbedtls_mpi_exp_mod+0x254>
 c01eb74:	2818      	cmp	r0, #24
 c01eb76:	bf34      	ite	cc
 c01eb78:	f04f 0b01 	movcc.w	fp, #1
 c01eb7c:	f04f 0b03 	movcs.w	fp, #3
    j = N->n + 1;
 c01eb80:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 c01eb82:	4630      	mov	r0, r6
    j = N->n + 1;
 c01eb84:	f103 0801 	add.w	r8, r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 c01eb88:	4641      	mov	r1, r8
 c01eb8a:	f7fe ff79 	bl	c01da80 <mbedtls_mpi_grow>
 c01eb8e:	4603      	mov	r3, r0
 c01eb90:	2800      	cmp	r0, #0
 c01eb92:	f040 8163 	bne.w	c01ee5c <mbedtls_mpi_exp_mod+0x378>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
 c01eb96:	4641      	mov	r1, r8
 c01eb98:	a817      	add	r0, sp, #92	; 0x5c
 c01eb9a:	f7fe ff71 	bl	c01da80 <mbedtls_mpi_grow>
 c01eb9e:	4603      	mov	r3, r0
 c01eba0:	2800      	cmp	r0, #0
 c01eba2:	f040 815b 	bne.w	c01ee5c <mbedtls_mpi_exp_mod+0x378>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
 c01eba6:	ea4f 0148 	mov.w	r1, r8, lsl #1
 c01ebaa:	a80b      	add	r0, sp, #44	; 0x2c
 c01ebac:	f7fe ff68 	bl	c01da80 <mbedtls_mpi_grow>
 c01ebb0:	4603      	mov	r3, r0
 c01ebb2:	2800      	cmp	r0, #0
 c01ebb4:	f040 8152 	bne.w	c01ee5c <mbedtls_mpi_exp_mod+0x378>
    neg = ( A->s == -1 );
 c01ebb8:	683b      	ldr	r3, [r7, #0]
 c01ebba:	9304      	str	r3, [sp, #16]
    if( neg )
 c01ebbc:	3301      	adds	r3, #1
 c01ebbe:	d10a      	bne.n	c01ebd6 <mbedtls_mpi_exp_mod+0xf2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
 c01ebc0:	4639      	mov	r1, r7
 c01ebc2:	a80e      	add	r0, sp, #56	; 0x38
 c01ebc4:	f7fe ffbb 	bl	c01db3e <mbedtls_mpi_copy>
 c01ebc8:	4603      	mov	r3, r0
 c01ebca:	2800      	cmp	r0, #0
 c01ebcc:	f040 8146 	bne.w	c01ee5c <mbedtls_mpi_exp_mod+0x378>
        Apos.s = 1;
 c01ebd0:	2301      	movs	r3, #1
        A = &Apos;
 c01ebd2:	af0e      	add	r7, sp, #56	; 0x38
        Apos.s = 1;
 c01ebd4:	930e      	str	r3, [sp, #56]	; 0x38
    if( _RR == NULL || _RR->p == NULL )
 c01ebd6:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 c01ebda:	b11b      	cbz	r3, c01ebe4 <mbedtls_mpi_exp_mod+0x100>
 c01ebdc:	689b      	ldr	r3, [r3, #8]
 c01ebde:	2b00      	cmp	r3, #0
 c01ebe0:	f040 80ad 	bne.w	c01ed3e <mbedtls_mpi_exp_mod+0x25a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
 c01ebe4:	2101      	movs	r1, #1
 c01ebe6:	a808      	add	r0, sp, #32
 c01ebe8:	f7ff f860 	bl	c01dcac <mbedtls_mpi_lset>
 c01ebec:	4603      	mov	r3, r0
 c01ebee:	2800      	cmp	r0, #0
 c01ebf0:	f040 8134 	bne.w	c01ee5c <mbedtls_mpi_exp_mod+0x378>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 c01ebf4:	6869      	ldr	r1, [r5, #4]
 c01ebf6:	a808      	add	r0, sp, #32
 c01ebf8:	0189      	lsls	r1, r1, #6
 c01ebfa:	f7ff f9c3 	bl	c01df84 <mbedtls_mpi_shift_l>
 c01ebfe:	4603      	mov	r3, r0
 c01ec00:	2800      	cmp	r0, #0
 c01ec02:	f040 812b 	bne.w	c01ee5c <mbedtls_mpi_exp_mod+0x378>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
 c01ec06:	a908      	add	r1, sp, #32
 c01ec08:	462a      	mov	r2, r5
 c01ec0a:	4608      	mov	r0, r1
 c01ec0c:	f7ff fef4 	bl	c01e9f8 <mbedtls_mpi_mod_mpi>
 c01ec10:	4603      	mov	r3, r0
 c01ec12:	2800      	cmp	r0, #0
 c01ec14:	f040 8122 	bne.w	c01ee5c <mbedtls_mpi_exp_mod+0x378>
        if( _RR != NULL )
 c01ec18:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 c01ec1c:	b13b      	cbz	r3, c01ec2e <mbedtls_mpi_exp_mod+0x14a>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
 c01ec1e:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 c01ec22:	ab08      	add	r3, sp, #32
 c01ec24:	cb03      	ldmia	r3!, {r0, r1}
 c01ec26:	6010      	str	r0, [r2, #0]
 c01ec28:	6818      	ldr	r0, [r3, #0]
 c01ec2a:	6051      	str	r1, [r2, #4]
 c01ec2c:	6090      	str	r0, [r2, #8]
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
 c01ec2e:	4629      	mov	r1, r5
 c01ec30:	4638      	mov	r0, r7
 c01ec32:	f7ff fabf 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c01ec36:	2800      	cmp	r0, #0
 c01ec38:	f2c0 808a 	blt.w	c01ed50 <mbedtls_mpi_exp_mod+0x26c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
 c01ec3c:	462a      	mov	r2, r5
 c01ec3e:	4639      	mov	r1, r7
 c01ec40:	a817      	add	r0, sp, #92	; 0x5c
 c01ec42:	f7ff fed9 	bl	c01e9f8 <mbedtls_mpi_mod_mpi>
 c01ec46:	4603      	mov	r3, r0
 c01ec48:	2800      	cmp	r0, #0
 c01ec4a:	f040 8107 	bne.w	c01ee5c <mbedtls_mpi_exp_mod+0x378>
    *mm = ~x + 1;
 c01ec4e:	4264      	negs	r4, r4
    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
 c01ec50:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 c01ec54:	4623      	mov	r3, r4
 c01ec56:	f8cd 9000 	str.w	r9, [sp]
 c01ec5a:	462a      	mov	r2, r5
 c01ec5c:	a908      	add	r1, sp, #32
 c01ec5e:	a817      	add	r0, sp, #92	; 0x5c
 c01ec60:	f7ff fa44 	bl	c01e0ec <mpi_montmul>
 c01ec64:	4603      	mov	r3, r0
 c01ec66:	2800      	cmp	r0, #0
 c01ec68:	f040 80f8 	bne.w	c01ee5c <mbedtls_mpi_exp_mod+0x378>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
 c01ec6c:	a908      	add	r1, sp, #32
 c01ec6e:	4630      	mov	r0, r6
 c01ec70:	f7fe ff65 	bl	c01db3e <mbedtls_mpi_copy>
 c01ec74:	4603      	mov	r3, r0
 c01ec76:	2800      	cmp	r0, #0
 c01ec78:	f040 80f0 	bne.w	c01ee5c <mbedtls_mpi_exp_mod+0x378>
    mbedtls_mpi_uint z = 1;
 c01ec7c:	2701      	movs	r7, #1
 c01ec7e:	ab07      	add	r3, sp, #28
    U.p = &z;
 c01ec80:	9313      	str	r3, [sp, #76]	; 0x4c
    return( mpi_montmul( A, &U, N, mm, T ) );
 c01ec82:	f8cd 9000 	str.w	r9, [sp]
 c01ec86:	4623      	mov	r3, r4
 c01ec88:	462a      	mov	r2, r5
 c01ec8a:	a911      	add	r1, sp, #68	; 0x44
 c01ec8c:	4630      	mov	r0, r6
    mbedtls_mpi_uint z = 1;
 c01ec8e:	9707      	str	r7, [sp, #28]
    U.n = U.s = (int) z;
 c01ec90:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
    return( mpi_montmul( A, &U, N, mm, T ) );
 c01ec94:	f7ff fa2a 	bl	c01e0ec <mpi_montmul>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 c01ec98:	4603      	mov	r3, r0
 c01ec9a:	2800      	cmp	r0, #0
 c01ec9c:	f040 80de 	bne.w	c01ee5c <mbedtls_mpi_exp_mod+0x378>
    if( wsize > 1 )
 c01eca0:	45bb      	cmp	fp, r7
 c01eca2:	d15a      	bne.n	c01ed5a <mbedtls_mpi_exp_mod+0x276>
    state   = 0;
 c01eca4:	f04f 0900 	mov.w	r9, #0
    nbits   = 0;
 c01eca8:	46c8      	mov	r8, r9
    bufsize = 0;
 c01ecaa:	46ca      	mov	sl, r9
    wbits   = 0;
 c01ecac:	464f      	mov	r7, r9
    nblimbs = E->n;
 c01ecae:	9b03      	ldr	r3, [sp, #12]
 c01ecb0:	685b      	ldr	r3, [r3, #4]
 c01ecb2:	9302      	str	r3, [sp, #8]
        if( bufsize == 0 )
 c01ecb4:	f1ba 0f00 	cmp.w	sl, #0
 c01ecb8:	f040 80b1 	bne.w	c01ee1e <mbedtls_mpi_exp_mod+0x33a>
            if( nblimbs == 0 )
 c01ecbc:	9b02      	ldr	r3, [sp, #8]
 c01ecbe:	2b00      	cmp	r3, #0
 c01ecc0:	f040 80a8 	bne.w	c01ee14 <mbedtls_mpi_exp_mod+0x330>
        if( ( wbits & ( one << wsize ) ) != 0 )
 c01ecc4:	f04f 0a01 	mov.w	sl, #1
 c01ecc8:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 c01eccc:	fa0a fa0b 	lsl.w	sl, sl, fp
    for( i = 0; i < nbits; i++ )
 c01ecd0:	9b02      	ldr	r3, [sp, #8]
 c01ecd2:	4543      	cmp	r3, r8
 c01ecd4:	f040 8113 	bne.w	c01eefe <mbedtls_mpi_exp_mod+0x41a>
    mbedtls_mpi_uint z = 1;
 c01ecd8:	2301      	movs	r3, #1
 c01ecda:	aa07      	add	r2, sp, #28
 c01ecdc:	9307      	str	r3, [sp, #28]
    U.n = U.s = (int) z;
 c01ecde:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
    U.p = &z;
 c01ece2:	9213      	str	r2, [sp, #76]	; 0x4c
    return( mpi_montmul( A, &U, N, mm, T ) );
 c01ece4:	4623      	mov	r3, r4
 c01ece6:	f8cd 9000 	str.w	r9, [sp]
 c01ecea:	462a      	mov	r2, r5
 c01ecec:	a911      	add	r1, sp, #68	; 0x44
 c01ecee:	4630      	mov	r0, r6
 c01ecf0:	f7ff f9fc 	bl	c01e0ec <mpi_montmul>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 c01ecf4:	4603      	mov	r3, r0
 c01ecf6:	2800      	cmp	r0, #0
 c01ecf8:	f040 80b0 	bne.w	c01ee5c <mbedtls_mpi_exp_mod+0x378>
    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
 c01ecfc:	9a04      	ldr	r2, [sp, #16]
 c01ecfe:	3201      	adds	r2, #1
 c01ed00:	f040 80ac 	bne.w	c01ee5c <mbedtls_mpi_exp_mod+0x378>
 c01ed04:	9a03      	ldr	r2, [sp, #12]
 c01ed06:	6852      	ldr	r2, [r2, #4]
 c01ed08:	2a00      	cmp	r2, #0
 c01ed0a:	f000 80a7 	beq.w	c01ee5c <mbedtls_mpi_exp_mod+0x378>
 c01ed0e:	9a03      	ldr	r2, [sp, #12]
 c01ed10:	6892      	ldr	r2, [r2, #8]
 c01ed12:	6812      	ldr	r2, [r2, #0]
 c01ed14:	07d2      	lsls	r2, r2, #31
 c01ed16:	f140 80a1 	bpl.w	c01ee5c <mbedtls_mpi_exp_mod+0x378>
        X->s = -1;
 c01ed1a:	9b04      	ldr	r3, [sp, #16]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 c01ed1c:	4632      	mov	r2, r6
        X->s = -1;
 c01ed1e:	6033      	str	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 c01ed20:	4629      	mov	r1, r5
 c01ed22:	4630      	mov	r0, r6
 c01ed24:	f7ff fb3b 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c01ed28:	4603      	mov	r3, r0
cleanup:
 c01ed2a:	e097      	b.n	c01ee5c <mbedtls_mpi_exp_mod+0x378>
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 c01ed2c:	f04f 0b06 	mov.w	fp, #6
 c01ed30:	e726      	b.n	c01eb80 <mbedtls_mpi_exp_mod+0x9c>
 c01ed32:	f04f 0b05 	mov.w	fp, #5
 c01ed36:	e723      	b.n	c01eb80 <mbedtls_mpi_exp_mod+0x9c>
 c01ed38:	f04f 0b04 	mov.w	fp, #4
 c01ed3c:	e720      	b.n	c01eb80 <mbedtls_mpi_exp_mod+0x9c>
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
 c01ed3e:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 c01ed42:	ab08      	add	r3, sp, #32
 c01ed44:	6810      	ldr	r0, [r2, #0]
 c01ed46:	6851      	ldr	r1, [r2, #4]
 c01ed48:	c303      	stmia	r3!, {r0, r1}
 c01ed4a:	6890      	ldr	r0, [r2, #8]
 c01ed4c:	6018      	str	r0, [r3, #0]
 c01ed4e:	e76e      	b.n	c01ec2e <mbedtls_mpi_exp_mod+0x14a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
 c01ed50:	4639      	mov	r1, r7
 c01ed52:	a817      	add	r0, sp, #92	; 0x5c
 c01ed54:	f7fe fef3 	bl	c01db3e <mbedtls_mpi_copy>
 c01ed58:	e775      	b.n	c01ec46 <mbedtls_mpi_exp_mod+0x162>
 c01ed5a:	f10b 33ff 	add.w	r3, fp, #4294967295
 c01ed5e:	9302      	str	r3, [sp, #8]
 c01ed60:	fa07 f303 	lsl.w	r3, r7, r3
 c01ed64:	270c      	movs	r7, #12
 c01ed66:	9305      	str	r3, [sp, #20]
 c01ed68:	9b02      	ldr	r3, [sp, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
 c01ed6a:	6869      	ldr	r1, [r5, #4]
 c01ed6c:	409f      	lsls	r7, r3
 c01ed6e:	ab14      	add	r3, sp, #80	; 0x50
 c01ed70:	eb03 0807 	add.w	r8, r3, r7
 c01ed74:	3101      	adds	r1, #1
 c01ed76:	4640      	mov	r0, r8
 c01ed78:	f7fe fe82 	bl	c01da80 <mbedtls_mpi_grow>
 c01ed7c:	4603      	mov	r3, r0
 c01ed7e:	2800      	cmp	r0, #0
 c01ed80:	d16c      	bne.n	c01ee5c <mbedtls_mpi_exp_mod+0x378>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
 c01ed82:	a917      	add	r1, sp, #92	; 0x5c
 c01ed84:	4640      	mov	r0, r8
 c01ed86:	f7fe feda 	bl	c01db3e <mbedtls_mpi_copy>
 c01ed8a:	4603      	mov	r3, r0
 c01ed8c:	2800      	cmp	r0, #0
 c01ed8e:	d165      	bne.n	c01ee5c <mbedtls_mpi_exp_mod+0x378>
        for( i = 0; i < wsize - 1; i++ )
 c01ed90:	4682      	mov	sl, r0
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
 c01ed92:	4623      	mov	r3, r4
 c01ed94:	f8cd 9000 	str.w	r9, [sp]
 c01ed98:	462a      	mov	r2, r5
 c01ed9a:	4641      	mov	r1, r8
 c01ed9c:	4640      	mov	r0, r8
 c01ed9e:	f7ff f9a5 	bl	c01e0ec <mpi_montmul>
 c01eda2:	4603      	mov	r3, r0
 c01eda4:	2800      	cmp	r0, #0
 c01eda6:	d159      	bne.n	c01ee5c <mbedtls_mpi_exp_mod+0x378>
        for( i = 0; i < wsize - 1; i++ )
 c01eda8:	9b02      	ldr	r3, [sp, #8]
 c01edaa:	f10a 0a01 	add.w	sl, sl, #1
 c01edae:	4553      	cmp	r3, sl
 c01edb0:	d8ef      	bhi.n	c01ed92 <mbedtls_mpi_exp_mod+0x2ae>
        for( i = j + 1; i < ( one << wsize ); i++ )
 c01edb2:	f04f 0901 	mov.w	r9, #1
 c01edb6:	9b05      	ldr	r3, [sp, #20]
 c01edb8:	fa09 f90b 	lsl.w	r9, r9, fp
 c01edbc:	f103 0801 	add.w	r8, r3, #1
 c01edc0:	f50d 63ca 	add.w	r3, sp, #1616	; 0x650
 c01edc4:	441f      	add	r7, r3
 c01edc6:	f2a7 57f4 	subw	r7, r7, #1524	; 0x5f4
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 c01edca:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
        for( i = j + 1; i < ( one << wsize ); i++ )
 c01edce:	45c1      	cmp	r9, r8
 c01edd0:	f67f af68 	bls.w	c01eca4 <mbedtls_mpi_exp_mod+0x1c0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
 c01edd4:	6869      	ldr	r1, [r5, #4]
 c01edd6:	4638      	mov	r0, r7
 c01edd8:	3101      	adds	r1, #1
 c01edda:	f7fe fe51 	bl	c01da80 <mbedtls_mpi_grow>
 c01edde:	4603      	mov	r3, r0
 c01ede0:	2800      	cmp	r0, #0
 c01ede2:	d13b      	bne.n	c01ee5c <mbedtls_mpi_exp_mod+0x378>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
 c01ede4:	f1a7 010c 	sub.w	r1, r7, #12
 c01ede8:	4638      	mov	r0, r7
 c01edea:	f7fe fea8 	bl	c01db3e <mbedtls_mpi_copy>
 c01edee:	4603      	mov	r3, r0
 c01edf0:	bba0      	cbnz	r0, c01ee5c <mbedtls_mpi_exp_mod+0x378>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 c01edf2:	4623      	mov	r3, r4
 c01edf4:	4638      	mov	r0, r7
 c01edf6:	f8cd a000 	str.w	sl, [sp]
 c01edfa:	462a      	mov	r2, r5
 c01edfc:	a917      	add	r1, sp, #92	; 0x5c
 c01edfe:	f7ff f975 	bl	c01e0ec <mpi_montmul>
 c01ee02:	370c      	adds	r7, #12
 c01ee04:	4603      	mov	r3, r0
 c01ee06:	bb48      	cbnz	r0, c01ee5c <mbedtls_mpi_exp_mod+0x378>
        for( i = j + 1; i < ( one << wsize ); i++ )
 c01ee08:	f108 0801 	add.w	r8, r8, #1
 c01ee0c:	e7df      	b.n	c01edce <mbedtls_mpi_exp_mod+0x2ea>
        state = 2;
 c01ee0e:	f04f 0902 	mov.w	r9, #2
 c01ee12:	e74f      	b.n	c01ecb4 <mbedtls_mpi_exp_mod+0x1d0>
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
 c01ee14:	f04f 0a20 	mov.w	sl, #32
            nblimbs--;
 c01ee18:	9b02      	ldr	r3, [sp, #8]
 c01ee1a:	3b01      	subs	r3, #1
 c01ee1c:	9302      	str	r3, [sp, #8]
        ei = (E->p[nblimbs] >> bufsize) & 1;
 c01ee1e:	9b03      	ldr	r3, [sp, #12]
 c01ee20:	9a02      	ldr	r2, [sp, #8]
 c01ee22:	689b      	ldr	r3, [r3, #8]
        bufsize--;
 c01ee24:	f10a 3aff 	add.w	sl, sl, #4294967295
        ei = (E->p[nblimbs] >> bufsize) & 1;
 c01ee28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c01ee2c:	fa23 f30a 	lsr.w	r3, r3, sl
        if( ei == 0 && state == 0 )
 c01ee30:	f013 0301 	ands.w	r3, r3, #1
 c01ee34:	d136      	bne.n	c01eea4 <mbedtls_mpi_exp_mod+0x3c0>
 c01ee36:	f1b9 0f00 	cmp.w	r9, #0
 c01ee3a:	f43f af3b 	beq.w	c01ecb4 <mbedtls_mpi_exp_mod+0x1d0>
        if( ei == 0 && state == 1 )
 c01ee3e:	f1b9 0f01 	cmp.w	r9, #1
 c01ee42:	d12f      	bne.n	c01eea4 <mbedtls_mpi_exp_mod+0x3c0>
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 c01ee44:	ab0b      	add	r3, sp, #44	; 0x2c
 c01ee46:	9300      	str	r3, [sp, #0]
 c01ee48:	462a      	mov	r2, r5
 c01ee4a:	4623      	mov	r3, r4
 c01ee4c:	4631      	mov	r1, r6
 c01ee4e:	4630      	mov	r0, r6
 c01ee50:	f7ff f94c 	bl	c01e0ec <mpi_montmul>
 c01ee54:	4603      	mov	r3, r0
 c01ee56:	2800      	cmp	r0, #0
 c01ee58:	f43f af2c 	beq.w	c01ecb4 <mbedtls_mpi_exp_mod+0x1d0>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 c01ee5c:	2201      	movs	r2, #1
        mbedtls_mpi_free( &W[i] );
 c01ee5e:	260c      	movs	r6, #12
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 c01ee60:	f10b 34ff 	add.w	r4, fp, #4294967295
 c01ee64:	fa02 f404 	lsl.w	r4, r2, r4
 c01ee68:	fa02 f50b 	lsl.w	r5, r2, fp
 c01ee6c:	42a5      	cmp	r5, r4
 c01ee6e:	9302      	str	r3, [sp, #8]
 c01ee70:	d864      	bhi.n	c01ef3c <mbedtls_mpi_exp_mod+0x458>
    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
 c01ee72:	a817      	add	r0, sp, #92	; 0x5c
 c01ee74:	f7fe fdf2 	bl	c01da5c <mbedtls_mpi_free>
 c01ee78:	a80b      	add	r0, sp, #44	; 0x2c
 c01ee7a:	f7fe fdef 	bl	c01da5c <mbedtls_mpi_free>
 c01ee7e:	a80e      	add	r0, sp, #56	; 0x38
 c01ee80:	f7fe fdec 	bl	c01da5c <mbedtls_mpi_free>
    if( _RR == NULL || _RR->p == NULL )
 c01ee84:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 c01ee88:	9b02      	ldr	r3, [sp, #8]
 c01ee8a:	b10a      	cbz	r2, c01ee90 <mbedtls_mpi_exp_mod+0x3ac>
 c01ee8c:	6892      	ldr	r2, [r2, #8]
 c01ee8e:	b922      	cbnz	r2, c01ee9a <mbedtls_mpi_exp_mod+0x3b6>
        mbedtls_mpi_free( &RR );
 c01ee90:	a808      	add	r0, sp, #32
 c01ee92:	9302      	str	r3, [sp, #8]
 c01ee94:	f7fe fde2 	bl	c01da5c <mbedtls_mpi_free>
 c01ee98:	9b02      	ldr	r3, [sp, #8]
}
 c01ee9a:	4618      	mov	r0, r3
 c01ee9c:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
 c01eea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        nbits++;
 c01eea4:	f108 0801 	add.w	r8, r8, #1
        wbits |= ( ei << ( wsize - nbits ) );
 c01eea8:	ebab 0208 	sub.w	r2, fp, r8
 c01eeac:	4093      	lsls	r3, r2
        if( nbits == wsize )
 c01eeae:	45c3      	cmp	fp, r8
        wbits |= ( ei << ( wsize - nbits ) );
 c01eeb0:	ea47 0703 	orr.w	r7, r7, r3
        if( nbits == wsize )
 c01eeb4:	d1ab      	bne.n	c01ee0e <mbedtls_mpi_exp_mod+0x32a>
            for( i = 0; i < wsize; i++ )
 c01eeb6:	f04f 0800 	mov.w	r8, #0
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 c01eeba:	ab0b      	add	r3, sp, #44	; 0x2c
 c01eebc:	9300      	str	r3, [sp, #0]
 c01eebe:	462a      	mov	r2, r5
 c01eec0:	4623      	mov	r3, r4
 c01eec2:	4631      	mov	r1, r6
 c01eec4:	4630      	mov	r0, r6
 c01eec6:	f7ff f911 	bl	c01e0ec <mpi_montmul>
 c01eeca:	4603      	mov	r3, r0
 c01eecc:	2800      	cmp	r0, #0
 c01eece:	d1c5      	bne.n	c01ee5c <mbedtls_mpi_exp_mod+0x378>
            for( i = 0; i < wsize; i++ )
 c01eed0:	f108 0801 	add.w	r8, r8, #1
 c01eed4:	45c3      	cmp	fp, r8
 c01eed6:	d8f0      	bhi.n	c01eeba <mbedtls_mpi_exp_mod+0x3d6>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
 c01eed8:	210c      	movs	r1, #12
 c01eeda:	ab0b      	add	r3, sp, #44	; 0x2c
 c01eedc:	a814      	add	r0, sp, #80	; 0x50
 c01eede:	9300      	str	r3, [sp, #0]
 c01eee0:	fb01 0107 	mla	r1, r1, r7, r0
 c01eee4:	4623      	mov	r3, r4
 c01eee6:	462a      	mov	r2, r5
 c01eee8:	4630      	mov	r0, r6
 c01eeea:	f7ff f8ff 	bl	c01e0ec <mpi_montmul>
 c01eeee:	4603      	mov	r3, r0
 c01eef0:	2800      	cmp	r0, #0
 c01eef2:	d1b3      	bne.n	c01ee5c <mbedtls_mpi_exp_mod+0x378>
            state--;
 c01eef4:	f04f 0901 	mov.w	r9, #1
            nbits = 0;
 c01eef8:	4607      	mov	r7, r0
            wbits = 0;
 c01eefa:	4680      	mov	r8, r0
 c01eefc:	e6da      	b.n	c01ecb4 <mbedtls_mpi_exp_mod+0x1d0>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 c01eefe:	4623      	mov	r3, r4
 c01ef00:	f8cd 9000 	str.w	r9, [sp]
 c01ef04:	462a      	mov	r2, r5
 c01ef06:	4631      	mov	r1, r6
 c01ef08:	4630      	mov	r0, r6
 c01ef0a:	f7ff f8ef 	bl	c01e0ec <mpi_montmul>
 c01ef0e:	4603      	mov	r3, r0
 c01ef10:	2800      	cmp	r0, #0
 c01ef12:	d1a3      	bne.n	c01ee5c <mbedtls_mpi_exp_mod+0x378>
        wbits <<= 1;
 c01ef14:	007f      	lsls	r7, r7, #1
        if( ( wbits & ( one << wsize ) ) != 0 )
 c01ef16:	ea1a 0f07 	tst.w	sl, r7
 c01ef1a:	d103      	bne.n	c01ef24 <mbedtls_mpi_exp_mod+0x440>
    for( i = 0; i < nbits; i++ )
 c01ef1c:	9b02      	ldr	r3, [sp, #8]
 c01ef1e:	3301      	adds	r3, #1
 c01ef20:	9302      	str	r3, [sp, #8]
 c01ef22:	e6d5      	b.n	c01ecd0 <mbedtls_mpi_exp_mod+0x1ec>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
 c01ef24:	4623      	mov	r3, r4
 c01ef26:	f8cd 9000 	str.w	r9, [sp]
 c01ef2a:	462a      	mov	r2, r5
 c01ef2c:	a917      	add	r1, sp, #92	; 0x5c
 c01ef2e:	4630      	mov	r0, r6
 c01ef30:	f7ff f8dc 	bl	c01e0ec <mpi_montmul>
 c01ef34:	4603      	mov	r3, r0
 c01ef36:	2800      	cmp	r0, #0
 c01ef38:	d0f0      	beq.n	c01ef1c <mbedtls_mpi_exp_mod+0x438>
 c01ef3a:	e78f      	b.n	c01ee5c <mbedtls_mpi_exp_mod+0x378>
        mbedtls_mpi_free( &W[i] );
 c01ef3c:	ab14      	add	r3, sp, #80	; 0x50
 c01ef3e:	fb06 3004 	mla	r0, r6, r4, r3
 c01ef42:	f7fe fd8b 	bl	c01da5c <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 c01ef46:	3401      	adds	r4, #1
 c01ef48:	9b02      	ldr	r3, [sp, #8]
 c01ef4a:	e78f      	b.n	c01ee6c <mbedtls_mpi_exp_mod+0x388>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 c01ef4c:	f06f 0303 	mvn.w	r3, #3
 c01ef50:	e7a3      	b.n	c01ee9a <mbedtls_mpi_exp_mod+0x3b6>

0c01ef52 <mbedtls_mpi_gcd>:
{
 c01ef52:	b5f0      	push	{r4, r5, r6, r7, lr}
    X->n = 0;
 c01ef54:	2300      	movs	r3, #0
 c01ef56:	2601      	movs	r6, #1
{
 c01ef58:	b08b      	sub	sp, #44	; 0x2c
 c01ef5a:	4607      	mov	r7, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 c01ef5c:	a804      	add	r0, sp, #16
{
 c01ef5e:	4615      	mov	r5, r2
    X->n = 0;
 c01ef60:	e9cd 6301 	strd	r6, r3, [sp, #4]
    X->s = 1;
 c01ef64:	e9cd 3603 	strd	r3, r6, [sp, #12]
    X->p = NULL;
 c01ef68:	e9cd 3305 	strd	r3, r3, [sp, #20]
    X->n = 0;
 c01ef6c:	e9cd 6307 	strd	r6, r3, [sp, #28]
    X->p = NULL;
 c01ef70:	9309      	str	r3, [sp, #36]	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 c01ef72:	f7fe fde4 	bl	c01db3e <mbedtls_mpi_copy>
 c01ef76:	4604      	mov	r4, r0
 c01ef78:	2800      	cmp	r0, #0
 c01ef7a:	d157      	bne.n	c01f02c <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 c01ef7c:	4629      	mov	r1, r5
 c01ef7e:	a807      	add	r0, sp, #28
 c01ef80:	f7fe fddd 	bl	c01db3e <mbedtls_mpi_copy>
 c01ef84:	4604      	mov	r4, r0
 c01ef86:	2800      	cmp	r0, #0
 c01ef88:	d150      	bne.n	c01f02c <mbedtls_mpi_gcd+0xda>
    lz = mbedtls_mpi_lsb( &TA );
 c01ef8a:	a804      	add	r0, sp, #16
 c01ef8c:	f7fe fee3 	bl	c01dd56 <mbedtls_mpi_lsb>
 c01ef90:	4605      	mov	r5, r0
    lzt = mbedtls_mpi_lsb( &TB );
 c01ef92:	a807      	add	r0, sp, #28
 c01ef94:	f7fe fedf 	bl	c01dd56 <mbedtls_mpi_lsb>
 c01ef98:	4285      	cmp	r5, r0
 c01ef9a:	bf28      	it	cs
 c01ef9c:	4605      	movcs	r5, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 c01ef9e:	a804      	add	r0, sp, #16
 c01efa0:	4629      	mov	r1, r5
 c01efa2:	f7ff f837 	bl	c01e014 <mbedtls_mpi_shift_r>
 c01efa6:	4604      	mov	r4, r0
 c01efa8:	2800      	cmp	r0, #0
 c01efaa:	d13f      	bne.n	c01f02c <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 c01efac:	4629      	mov	r1, r5
 c01efae:	a807      	add	r0, sp, #28
 c01efb0:	f7ff f830 	bl	c01e014 <mbedtls_mpi_shift_r>
 c01efb4:	4604      	mov	r4, r0
 c01efb6:	2800      	cmp	r0, #0
 c01efb8:	d138      	bne.n	c01f02c <mbedtls_mpi_gcd+0xda>
    TA.s = TB.s = 1;
 c01efba:	9607      	str	r6, [sp, #28]
 c01efbc:	9604      	str	r6, [sp, #16]
    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 c01efbe:	2100      	movs	r1, #0
 c01efc0:	a804      	add	r0, sp, #16
 c01efc2:	f7ff f937 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c01efc6:	b958      	cbnz	r0, c01efe0 <mbedtls_mpi_gcd+0x8e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 c01efc8:	4629      	mov	r1, r5
 c01efca:	a807      	add	r0, sp, #28
 c01efcc:	f7fe ffda 	bl	c01df84 <mbedtls_mpi_shift_l>
 c01efd0:	4604      	mov	r4, r0
 c01efd2:	bb58      	cbnz	r0, c01f02c <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 c01efd4:	a907      	add	r1, sp, #28
 c01efd6:	4638      	mov	r0, r7
 c01efd8:	f7fe fdb1 	bl	c01db3e <mbedtls_mpi_copy>
 c01efdc:	4604      	mov	r4, r0
cleanup:
 c01efde:	e025      	b.n	c01f02c <mbedtls_mpi_gcd+0xda>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 c01efe0:	a804      	add	r0, sp, #16
 c01efe2:	f7fe feb8 	bl	c01dd56 <mbedtls_mpi_lsb>
 c01efe6:	4601      	mov	r1, r0
 c01efe8:	a804      	add	r0, sp, #16
 c01efea:	f7ff f813 	bl	c01e014 <mbedtls_mpi_shift_r>
 c01efee:	4604      	mov	r4, r0
 c01eff0:	b9e0      	cbnz	r0, c01f02c <mbedtls_mpi_gcd+0xda>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 c01eff2:	a807      	add	r0, sp, #28
 c01eff4:	f7fe feaf 	bl	c01dd56 <mbedtls_mpi_lsb>
 c01eff8:	4601      	mov	r1, r0
 c01effa:	a807      	add	r0, sp, #28
 c01effc:	f7ff f80a 	bl	c01e014 <mbedtls_mpi_shift_r>
 c01f000:	4604      	mov	r4, r0
 c01f002:	b998      	cbnz	r0, c01f02c <mbedtls_mpi_gcd+0xda>
        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 c01f004:	a907      	add	r1, sp, #28
 c01f006:	a804      	add	r0, sp, #16
 c01f008:	f7ff f8d4 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c01f00c:	2800      	cmp	r0, #0
 c01f00e:	db19      	blt.n	c01f044 <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 c01f010:	a904      	add	r1, sp, #16
 c01f012:	aa07      	add	r2, sp, #28
 c01f014:	4608      	mov	r0, r1
 c01f016:	f7ff f984 	bl	c01e322 <mbedtls_mpi_sub_abs>
 c01f01a:	4604      	mov	r4, r0
 c01f01c:	b930      	cbnz	r0, c01f02c <mbedtls_mpi_gcd+0xda>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 c01f01e:	2101      	movs	r1, #1
 c01f020:	a804      	add	r0, sp, #16
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 c01f022:	f7fe fff7 	bl	c01e014 <mbedtls_mpi_shift_r>
 c01f026:	4604      	mov	r4, r0
 c01f028:	2800      	cmp	r0, #0
 c01f02a:	d0c8      	beq.n	c01efbe <mbedtls_mpi_gcd+0x6c>
    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 c01f02c:	a801      	add	r0, sp, #4
 c01f02e:	f7fe fd15 	bl	c01da5c <mbedtls_mpi_free>
 c01f032:	a804      	add	r0, sp, #16
 c01f034:	f7fe fd12 	bl	c01da5c <mbedtls_mpi_free>
 c01f038:	a807      	add	r0, sp, #28
 c01f03a:	f7fe fd0f 	bl	c01da5c <mbedtls_mpi_free>
}
 c01f03e:	4620      	mov	r0, r4
 c01f040:	b00b      	add	sp, #44	; 0x2c
 c01f042:	bdf0      	pop	{r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 c01f044:	a907      	add	r1, sp, #28
 c01f046:	aa04      	add	r2, sp, #16
 c01f048:	4608      	mov	r0, r1
 c01f04a:	f7ff f96a 	bl	c01e322 <mbedtls_mpi_sub_abs>
 c01f04e:	4604      	mov	r4, r0
 c01f050:	2800      	cmp	r0, #0
 c01f052:	d1eb      	bne.n	c01f02c <mbedtls_mpi_gcd+0xda>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 c01f054:	2101      	movs	r1, #1
 c01f056:	a807      	add	r0, sp, #28
 c01f058:	e7e3      	b.n	c01f022 <mbedtls_mpi_gcd+0xd0>

0c01f05a <mbedtls_mpi_fill_random>:
{
 c01f05a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    size_t const limbs = CHARS_TO_LIMBS( size );
 c01f05e:	f011 0403 	ands.w	r4, r1, #3
 c01f062:	bf18      	it	ne
 c01f064:	2401      	movne	r4, #1
{
 c01f066:	4699      	mov	r9, r3
    if( X->n != limbs )
 c01f068:	6843      	ldr	r3, [r0, #4]
    size_t const limbs = CHARS_TO_LIMBS( size );
 c01f06a:	eb04 0491 	add.w	r4, r4, r1, lsr #2
    if( X->n != limbs )
 c01f06e:	42a3      	cmp	r3, r4
{
 c01f070:	4606      	mov	r6, r0
 c01f072:	460f      	mov	r7, r1
 c01f074:	4690      	mov	r8, r2
    if( X->n != limbs )
 c01f076:	d108      	bne.n	c01f08a <mbedtls_mpi_fill_random+0x30>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 c01f078:	2100      	movs	r1, #0
 c01f07a:	4630      	mov	r0, r6
 c01f07c:	f7fe fe16 	bl	c01dcac <mbedtls_mpi_lset>
 c01f080:	4605      	mov	r5, r0
 c01f082:	b188      	cbz	r0, c01f0a8 <mbedtls_mpi_fill_random+0x4e>
}
 c01f084:	4628      	mov	r0, r5
 c01f086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        mbedtls_mpi_free( X );
 c01f08a:	f7fe fce7 	bl	c01da5c <mbedtls_mpi_free>
    X->n = 0;
 c01f08e:	2300      	movs	r3, #0
 c01f090:	2201      	movs	r2, #1
    X->p = NULL;
 c01f092:	60b3      	str	r3, [r6, #8]
    X->n = 0;
 c01f094:	e9c6 2300 	strd	r2, r3, [r6]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 c01f098:	4621      	mov	r1, r4
 c01f09a:	4630      	mov	r0, r6
 c01f09c:	f7fe fcf0 	bl	c01da80 <mbedtls_mpi_grow>
 c01f0a0:	4605      	mov	r5, r0
 c01f0a2:	2800      	cmp	r0, #0
 c01f0a4:	d0e8      	beq.n	c01f078 <mbedtls_mpi_fill_random+0x1e>
 c01f0a6:	e7ed      	b.n	c01f084 <mbedtls_mpi_fill_random+0x2a>
    f_rng( p_rng, Xp + overhead, size );
 c01f0a8:	68b1      	ldr	r1, [r6, #8]
    size_t const overhead = ( limbs * ciL ) - size;
 c01f0aa:	ebc7 0384 	rsb	r3, r7, r4, lsl #2
    f_rng( p_rng, Xp + overhead, size );
 c01f0ae:	463a      	mov	r2, r7
 c01f0b0:	4419      	add	r1, r3
 c01f0b2:	4648      	mov	r0, r9
 c01f0b4:	47c0      	blx	r8
    if( limbs == 0 )
 c01f0b6:	2c00      	cmp	r4, #0
 c01f0b8:	d0e4      	beq.n	c01f084 <mbedtls_mpi_fill_random+0x2a>
 c01f0ba:	4621      	mov	r1, r4
 c01f0bc:	68b0      	ldr	r0, [r6, #8]
 c01f0be:	f7fe fc95 	bl	c01d9ec <mpi_bigendian_to_host.part.1>
    return( ret );
 c01f0c2:	e7df      	b.n	c01f084 <mbedtls_mpi_fill_random+0x2a>

0c01f0c4 <mpi_miller_rabin>:
 * Miller-Rabin pseudo-primality test  (HAC 4.24)
 */
static int mpi_miller_rabin( const mbedtls_mpi *X, size_t rounds,
                             int (*f_rng)(void *, unsigned char *, size_t),
                             void *p_rng )
{
 c01f0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c01f0c8:	4692      	mov	sl, r2
 c01f0ca:	469b      	mov	fp, r3
    X->n = 0;
 c01f0cc:	2201      	movs	r2, #1
 c01f0ce:	2300      	movs	r3, #0
{
 c01f0d0:	b095      	sub	sp, #84	; 0x54
 c01f0d2:	4605      	mov	r5, r0
 c01f0d4:	4689      	mov	r9, r1

    /*
     * W = |X| - 1
     * R = W >> lsb( W )
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &W, X, 1 ) );
 c01f0d6:	4601      	mov	r1, r0
 c01f0d8:	a805      	add	r0, sp, #20
    X->n = 0;
 c01f0da:	e9cd 2305 	strd	r2, r3, [sp, #20]
    X->s = 1;
 c01f0de:	e9cd 3207 	strd	r3, r2, [sp, #28]
    X->p = NULL;
 c01f0e2:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    X->n = 0;
 c01f0e6:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    X->s = 1;
 c01f0ea:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
    X->p = NULL;
 c01f0ee:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
    X->n = 0;
 c01f0f2:	e9cd 2311 	strd	r2, r3, [sp, #68]	; 0x44
    X->p = NULL;
 c01f0f6:	9313      	str	r3, [sp, #76]	; 0x4c
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &W, X, 1 ) );
 c01f0f8:	f7ff f9ac 	bl	c01e454 <mbedtls_mpi_sub_int>
 c01f0fc:	4604      	mov	r4, r0
 c01f0fe:	b990      	cbnz	r0, c01f126 <mpi_miller_rabin+0x62>
    s = mbedtls_mpi_lsb( &W );
 c01f100:	a805      	add	r0, sp, #20
 c01f102:	f7fe fe28 	bl	c01dd56 <mbedtls_mpi_lsb>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R, &W ) );
 c01f106:	a905      	add	r1, sp, #20
    s = mbedtls_mpi_lsb( &W );
 c01f108:	4680      	mov	r8, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R, &W ) );
 c01f10a:	a808      	add	r0, sp, #32
 c01f10c:	f7fe fd17 	bl	c01db3e <mbedtls_mpi_copy>
 c01f110:	4604      	mov	r4, r0
 c01f112:	b940      	cbnz	r0, c01f126 <mpi_miller_rabin+0x62>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &R, s ) );
 c01f114:	4641      	mov	r1, r8
 c01f116:	a808      	add	r0, sp, #32
 c01f118:	f7fe ff7c 	bl	c01e014 <mbedtls_mpi_shift_r>
 c01f11c:	4604      	mov	r4, r0
 c01f11e:	b910      	cbnz	r0, c01f126 <mpi_miller_rabin+0x62>

    i = mbedtls_mpi_bitlen( X );

    for( i = 0; i < rounds; i++ )
 c01f120:	4606      	mov	r6, r0
 c01f122:	454e      	cmp	r6, r9
 c01f124:	d112      	bne.n	c01f14c <mpi_miller_rabin+0x88>
            break;
        }
    }

cleanup:
    mbedtls_mpi_free( &W ); mbedtls_mpi_free( &R );
 c01f126:	a805      	add	r0, sp, #20
 c01f128:	f7fe fc98 	bl	c01da5c <mbedtls_mpi_free>
 c01f12c:	a808      	add	r0, sp, #32
 c01f12e:	f7fe fc95 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &T ); mbedtls_mpi_free( &A );
 c01f132:	a80b      	add	r0, sp, #44	; 0x2c
 c01f134:	f7fe fc92 	bl	c01da5c <mbedtls_mpi_free>
 c01f138:	a80e      	add	r0, sp, #56	; 0x38
 c01f13a:	f7fe fc8f 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &RR );
 c01f13e:	a811      	add	r0, sp, #68	; 0x44
 c01f140:	f7fe fc8c 	bl	c01da5c <mbedtls_mpi_free>

    return( ret );
}
 c01f144:	4620      	mov	r0, r4
 c01f146:	b015      	add	sp, #84	; 0x54
 c01f148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c01f14c:	2720      	movs	r7, #32
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &A, X->n * ciL, f_rng, p_rng ) );
 c01f14e:	6869      	ldr	r1, [r5, #4]
 c01f150:	465b      	mov	r3, fp
 c01f152:	4652      	mov	r2, sl
 c01f154:	0089      	lsls	r1, r1, #2
 c01f156:	a80e      	add	r0, sp, #56	; 0x38
 c01f158:	f7ff ff7f 	bl	c01f05a <mbedtls_mpi_fill_random>
 c01f15c:	2800      	cmp	r0, #0
 c01f15e:	d16d      	bne.n	c01f23c <mpi_miller_rabin+0x178>
            j = mbedtls_mpi_bitlen( &A );
 c01f160:	a80e      	add	r0, sp, #56	; 0x38
 c01f162:	f7fe fe13 	bl	c01dd8c <mbedtls_mpi_bitlen>
 c01f166:	9003      	str	r0, [sp, #12]
            k = mbedtls_mpi_bitlen( &W );
 c01f168:	a805      	add	r0, sp, #20
 c01f16a:	f7fe fe0f 	bl	c01dd8c <mbedtls_mpi_bitlen>
            if (j > k) {
 c01f16e:	9b03      	ldr	r3, [sp, #12]
 c01f170:	4283      	cmp	r3, r0
 c01f172:	d914      	bls.n	c01f19e <mpi_miller_rabin+0xda>
                A.p[A.n - 1] &= ( (mbedtls_mpi_uint) 1 << ( k - ( A.n - 1 ) * biL - 1 ) ) - 1;
 c01f174:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 c01f176:	9a10      	ldr	r2, [sp, #64]	; 0x40
 c01f178:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 c01f17c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 c01f180:	3b01      	subs	r3, #1
 c01f182:	ea6f 1343 	mvn.w	r3, r3, lsl #5
 c01f186:	4418      	add	r0, r3
 c01f188:	f04f 33ff 	mov.w	r3, #4294967295
 c01f18c:	3901      	subs	r1, #1
 c01f18e:	fa03 f000 	lsl.w	r0, r3, r0
 c01f192:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 c01f196:	ea23 0000 	bic.w	r0, r3, r0
 c01f19a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
            if (count++ > 30) {
 c01f19e:	3f01      	subs	r7, #1
 c01f1a0:	d04e      	beq.n	c01f240 <mpi_miller_rabin+0x17c>
        } while ( mbedtls_mpi_cmp_mpi( &A, &W ) >= 0 ||
 c01f1a2:	a905      	add	r1, sp, #20
 c01f1a4:	a80e      	add	r0, sp, #56	; 0x38
 c01f1a6:	f7ff f805 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
                  mbedtls_mpi_cmp_int( &A, 1 )  <= 0    );
 c01f1aa:	2800      	cmp	r0, #0
 c01f1ac:	dacf      	bge.n	c01f14e <mpi_miller_rabin+0x8a>
 c01f1ae:	2101      	movs	r1, #1
 c01f1b0:	a80e      	add	r0, sp, #56	; 0x38
 c01f1b2:	f7ff f83f 	bl	c01e234 <mbedtls_mpi_cmp_int>
        } while ( mbedtls_mpi_cmp_mpi( &A, &W ) >= 0 ||
 c01f1b6:	2800      	cmp	r0, #0
 c01f1b8:	ddc9      	ble.n	c01f14e <mpi_miller_rabin+0x8a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &A, &A, &R, X, &RR ) );
 c01f1ba:	ab11      	add	r3, sp, #68	; 0x44
 c01f1bc:	a90e      	add	r1, sp, #56	; 0x38
 c01f1be:	9300      	str	r3, [sp, #0]
 c01f1c0:	aa08      	add	r2, sp, #32
 c01f1c2:	462b      	mov	r3, r5
 c01f1c4:	4608      	mov	r0, r1
 c01f1c6:	f7ff fc8d 	bl	c01eae4 <mbedtls_mpi_exp_mod>
 c01f1ca:	2800      	cmp	r0, #0
 c01f1cc:	d136      	bne.n	c01f23c <mpi_miller_rabin+0x178>
        if( mbedtls_mpi_cmp_mpi( &A, &W ) == 0 ||
 c01f1ce:	a905      	add	r1, sp, #20
 c01f1d0:	a80e      	add	r0, sp, #56	; 0x38
 c01f1d2:	f7fe ffef 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c01f1d6:	b908      	cbnz	r0, c01f1dc <mpi_miller_rabin+0x118>
    for( i = 0; i < rounds; i++ )
 c01f1d8:	3601      	adds	r6, #1
 c01f1da:	e7a2      	b.n	c01f122 <mpi_miller_rabin+0x5e>
            mbedtls_mpi_cmp_int( &A,  1 ) == 0 )
 c01f1dc:	2101      	movs	r1, #1
 c01f1de:	a80e      	add	r0, sp, #56	; 0x38
 c01f1e0:	f7ff f828 	bl	c01e234 <mbedtls_mpi_cmp_int>
        if( mbedtls_mpi_cmp_mpi( &A, &W ) == 0 ||
 c01f1e4:	2800      	cmp	r0, #0
 c01f1e6:	d0f7      	beq.n	c01f1d8 <mpi_miller_rabin+0x114>
        j = 1;
 c01f1e8:	2701      	movs	r7, #1
 c01f1ea:	a905      	add	r1, sp, #20
 c01f1ec:	a80e      	add	r0, sp, #56	; 0x38
 c01f1ee:	f7fe ffe1 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
        while( j < s && mbedtls_mpi_cmp_mpi( &A, &W ) != 0 )
 c01f1f2:	4547      	cmp	r7, r8
 c01f1f4:	d211      	bcs.n	c01f21a <mpi_miller_rabin+0x156>
 c01f1f6:	b180      	cbz	r0, c01f21a <mpi_miller_rabin+0x156>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &A, &A ) );
 c01f1f8:	aa0e      	add	r2, sp, #56	; 0x38
 c01f1fa:	4611      	mov	r1, r2
 c01f1fc:	a80b      	add	r0, sp, #44	; 0x2c
 c01f1fe:	f7ff f93f 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c01f202:	b9d8      	cbnz	r0, c01f23c <mpi_miller_rabin+0x178>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &A, &T, X  ) );
 c01f204:	462a      	mov	r2, r5
 c01f206:	a90b      	add	r1, sp, #44	; 0x2c
 c01f208:	a80e      	add	r0, sp, #56	; 0x38
 c01f20a:	f7ff fbf5 	bl	c01e9f8 <mbedtls_mpi_mod_mpi>
 c01f20e:	b9a8      	cbnz	r0, c01f23c <mpi_miller_rabin+0x178>
            if( mbedtls_mpi_cmp_int( &A, 1 ) == 0 )
 c01f210:	2101      	movs	r1, #1
 c01f212:	a80e      	add	r0, sp, #56	; 0x38
 c01f214:	f7ff f80e 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c01f218:	b938      	cbnz	r0, c01f22a <mpi_miller_rabin+0x166>
        if( mbedtls_mpi_cmp_mpi( &A, &W ) != 0 ||
 c01f21a:	a905      	add	r1, sp, #20
 c01f21c:	a80e      	add	r0, sp, #56	; 0x38
 c01f21e:	f7fe ffc9 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c01f222:	b120      	cbz	r0, c01f22e <mpi_miller_rabin+0x16a>
            ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 c01f224:	f06f 040d 	mvn.w	r4, #13
 c01f228:	e77d      	b.n	c01f126 <mpi_miller_rabin+0x62>
            j++;
 c01f22a:	3701      	adds	r7, #1
 c01f22c:	e7dd      	b.n	c01f1ea <mpi_miller_rabin+0x126>
            mbedtls_mpi_cmp_int( &A,  1 ) == 0 )
 c01f22e:	2101      	movs	r1, #1
 c01f230:	a80e      	add	r0, sp, #56	; 0x38
 c01f232:	f7fe ffff 	bl	c01e234 <mbedtls_mpi_cmp_int>
        if( mbedtls_mpi_cmp_mpi( &A, &W ) != 0 ||
 c01f236:	2800      	cmp	r0, #0
 c01f238:	d1ce      	bne.n	c01f1d8 <mpi_miller_rabin+0x114>
 c01f23a:	e7f3      	b.n	c01f224 <mpi_miller_rabin+0x160>
cleanup:
 c01f23c:	4604      	mov	r4, r0
 c01f23e:	e772      	b.n	c01f126 <mpi_miller_rabin+0x62>
                return MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 c01f240:	f06f 040d 	mvn.w	r4, #13
 c01f244:	e77e      	b.n	c01f144 <mpi_miller_rabin+0x80>

0c01f246 <mbedtls_mpi_inv_mod>:
{
 c01f246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c01f24a:	4680      	mov	r8, r0
 c01f24c:	b09c      	sub	sp, #112	; 0x70
 c01f24e:	460f      	mov	r7, r1
    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 c01f250:	4610      	mov	r0, r2
 c01f252:	2101      	movs	r1, #1
{
 c01f254:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 c01f256:	f7fe ffed 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c01f25a:	2800      	cmp	r0, #0
 c01f25c:	f340 8143 	ble.w	c01f4e6 <mbedtls_mpi_inv_mod+0x2a0>
    X->n = 0;
 c01f260:	2300      	movs	r3, #0
 c01f262:	2501      	movs	r5, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 c01f264:	4632      	mov	r2, r6
 c01f266:	4639      	mov	r1, r7
 c01f268:	a801      	add	r0, sp, #4
    X->n = 0;
 c01f26a:	e9cd 5304 	strd	r5, r3, [sp, #16]
    X->s = 1;
 c01f26e:	e9cd 3506 	strd	r3, r5, [sp, #24]
    X->p = NULL;
 c01f272:	e9cd 3308 	strd	r3, r3, [sp, #32]
    X->n = 0;
 c01f276:	e9cd 530a 	strd	r5, r3, [sp, #40]	; 0x28
    X->s = 1;
 c01f27a:	e9cd 350c 	strd	r3, r5, [sp, #48]	; 0x30
    X->p = NULL;
 c01f27e:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
    X->n = 0;
 c01f282:	e9cd 5301 	strd	r5, r3, [sp, #4]
    X->p = NULL;
 c01f286:	9303      	str	r3, [sp, #12]
    X->n = 0;
 c01f288:	e9cd 5310 	strd	r5, r3, [sp, #64]	; 0x40
    X->s = 1;
 c01f28c:	e9cd 3512 	strd	r3, r5, [sp, #72]	; 0x48
    X->p = NULL;
 c01f290:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
    X->n = 0;
 c01f294:	e9cd 5316 	strd	r5, r3, [sp, #88]	; 0x58
    X->s = 1;
 c01f298:	e9cd 3518 	strd	r3, r5, [sp, #96]	; 0x60
    X->p = NULL;
 c01f29c:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 c01f2a0:	f7ff fe57 	bl	c01ef52 <mbedtls_mpi_gcd>
 c01f2a4:	4604      	mov	r4, r0
 c01f2a6:	2800      	cmp	r0, #0
 c01f2a8:	d154      	bne.n	c01f354 <mbedtls_mpi_inv_mod+0x10e>
    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 c01f2aa:	4629      	mov	r1, r5
 c01f2ac:	a801      	add	r0, sp, #4
 c01f2ae:	f7fe ffc1 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c01f2b2:	2800      	cmp	r0, #0
 c01f2b4:	f040 8114 	bne.w	c01f4e0 <mbedtls_mpi_inv_mod+0x29a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 c01f2b8:	4632      	mov	r2, r6
 c01f2ba:	4639      	mov	r1, r7
 c01f2bc:	a804      	add	r0, sp, #16
 c01f2be:	f7ff fb9b 	bl	c01e9f8 <mbedtls_mpi_mod_mpi>
 c01f2c2:	4604      	mov	r4, r0
 c01f2c4:	2800      	cmp	r0, #0
 c01f2c6:	d145      	bne.n	c01f354 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 c01f2c8:	a904      	add	r1, sp, #16
 c01f2ca:	a807      	add	r0, sp, #28
 c01f2cc:	f7fe fc37 	bl	c01db3e <mbedtls_mpi_copy>
 c01f2d0:	4604      	mov	r4, r0
 c01f2d2:	2800      	cmp	r0, #0
 c01f2d4:	d13e      	bne.n	c01f354 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 c01f2d6:	4631      	mov	r1, r6
 c01f2d8:	a810      	add	r0, sp, #64	; 0x40
 c01f2da:	f7fe fc30 	bl	c01db3e <mbedtls_mpi_copy>
 c01f2de:	4604      	mov	r4, r0
 c01f2e0:	2800      	cmp	r0, #0
 c01f2e2:	d137      	bne.n	c01f354 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 c01f2e4:	4631      	mov	r1, r6
 c01f2e6:	a813      	add	r0, sp, #76	; 0x4c
 c01f2e8:	f7fe fc29 	bl	c01db3e <mbedtls_mpi_copy>
 c01f2ec:	4604      	mov	r4, r0
 c01f2ee:	2800      	cmp	r0, #0
 c01f2f0:	d130      	bne.n	c01f354 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 c01f2f2:	4629      	mov	r1, r5
 c01f2f4:	a80a      	add	r0, sp, #40	; 0x28
 c01f2f6:	f7fe fcd9 	bl	c01dcac <mbedtls_mpi_lset>
 c01f2fa:	4604      	mov	r4, r0
 c01f2fc:	bb50      	cbnz	r0, c01f354 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 c01f2fe:	4601      	mov	r1, r0
 c01f300:	a80d      	add	r0, sp, #52	; 0x34
 c01f302:	f7fe fcd3 	bl	c01dcac <mbedtls_mpi_lset>
 c01f306:	4604      	mov	r4, r0
 c01f308:	bb20      	cbnz	r0, c01f354 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 c01f30a:	4601      	mov	r1, r0
 c01f30c:	a816      	add	r0, sp, #88	; 0x58
 c01f30e:	f7fe fccd 	bl	c01dcac <mbedtls_mpi_lset>
 c01f312:	4604      	mov	r4, r0
 c01f314:	b9f0      	cbnz	r0, c01f354 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 c01f316:	4629      	mov	r1, r5
 c01f318:	a819      	add	r0, sp, #100	; 0x64
 c01f31a:	f7fe fcc7 	bl	c01dcac <mbedtls_mpi_lset>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 c01f31e:	4604      	mov	r4, r0
 c01f320:	b9c0      	cbnz	r0, c01f354 <mbedtls_mpi_inv_mod+0x10e>
        while( ( TU.p[0] & 1 ) == 0 )
 c01f322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c01f324:	681b      	ldr	r3, [r3, #0]
 c01f326:	07d8      	lsls	r0, r3, #31
 c01f328:	d466      	bmi.n	c01f3f8 <mbedtls_mpi_inv_mod+0x1b2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 c01f32a:	2101      	movs	r1, #1
 c01f32c:	a807      	add	r0, sp, #28
 c01f32e:	f7fe fe71 	bl	c01e014 <mbedtls_mpi_shift_r>
 c01f332:	4604      	mov	r4, r0
 c01f334:	b970      	cbnz	r0, c01f354 <mbedtls_mpi_inv_mod+0x10e>
            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 c01f336:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 c01f338:	681b      	ldr	r3, [r3, #0]
 c01f33a:	07dd      	lsls	r5, r3, #31
 c01f33c:	d429      	bmi.n	c01f392 <mbedtls_mpi_inv_mod+0x14c>
 c01f33e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 c01f340:	681b      	ldr	r3, [r3, #0]
 c01f342:	07dc      	lsls	r4, r3, #31
 c01f344:	d425      	bmi.n	c01f392 <mbedtls_mpi_inv_mod+0x14c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 c01f346:	2101      	movs	r1, #1
 c01f348:	a80a      	add	r0, sp, #40	; 0x28
 c01f34a:	f7fe fe63 	bl	c01e014 <mbedtls_mpi_shift_r>
 c01f34e:	4604      	mov	r4, r0
 c01f350:	2800      	cmp	r0, #0
 c01f352:	d02f      	beq.n	c01f3b4 <mbedtls_mpi_inv_mod+0x16e>
    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 c01f354:	a804      	add	r0, sp, #16
 c01f356:	f7fe fb81 	bl	c01da5c <mbedtls_mpi_free>
 c01f35a:	a807      	add	r0, sp, #28
 c01f35c:	f7fe fb7e 	bl	c01da5c <mbedtls_mpi_free>
 c01f360:	a80a      	add	r0, sp, #40	; 0x28
 c01f362:	f7fe fb7b 	bl	c01da5c <mbedtls_mpi_free>
 c01f366:	a80d      	add	r0, sp, #52	; 0x34
 c01f368:	f7fe fb78 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 c01f36c:	a801      	add	r0, sp, #4
 c01f36e:	f7fe fb75 	bl	c01da5c <mbedtls_mpi_free>
 c01f372:	a810      	add	r0, sp, #64	; 0x40
 c01f374:	f7fe fb72 	bl	c01da5c <mbedtls_mpi_free>
 c01f378:	a813      	add	r0, sp, #76	; 0x4c
 c01f37a:	f7fe fb6f 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 c01f37e:	a816      	add	r0, sp, #88	; 0x58
 c01f380:	f7fe fb6c 	bl	c01da5c <mbedtls_mpi_free>
 c01f384:	a819      	add	r0, sp, #100	; 0x64
 c01f386:	f7fe fb69 	bl	c01da5c <mbedtls_mpi_free>
}
 c01f38a:	4620      	mov	r0, r4
 c01f38c:	b01c      	add	sp, #112	; 0x70
 c01f38e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 c01f392:	a90a      	add	r1, sp, #40	; 0x28
 c01f394:	aa10      	add	r2, sp, #64	; 0x40
 c01f396:	4608      	mov	r0, r1
 c01f398:	f7ff f801 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c01f39c:	4604      	mov	r4, r0
 c01f39e:	2800      	cmp	r0, #0
 c01f3a0:	d1d8      	bne.n	c01f354 <mbedtls_mpi_inv_mod+0x10e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 c01f3a2:	a90d      	add	r1, sp, #52	; 0x34
 c01f3a4:	aa04      	add	r2, sp, #16
 c01f3a6:	4608      	mov	r0, r1
 c01f3a8:	f7ff f81b 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c01f3ac:	4604      	mov	r4, r0
 c01f3ae:	2800      	cmp	r0, #0
 c01f3b0:	d0c9      	beq.n	c01f346 <mbedtls_mpi_inv_mod+0x100>
 c01f3b2:	e7cf      	b.n	c01f354 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 c01f3b4:	2101      	movs	r1, #1
 c01f3b6:	a80d      	add	r0, sp, #52	; 0x34
 c01f3b8:	f7fe fe2c 	bl	c01e014 <mbedtls_mpi_shift_r>
 c01f3bc:	e7af      	b.n	c01f31e <mbedtls_mpi_inv_mod+0xd8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 c01f3be:	2101      	movs	r1, #1
 c01f3c0:	a813      	add	r0, sp, #76	; 0x4c
 c01f3c2:	f7fe fe27 	bl	c01e014 <mbedtls_mpi_shift_r>
 c01f3c6:	4604      	mov	r4, r0
 c01f3c8:	2800      	cmp	r0, #0
 c01f3ca:	d1c3      	bne.n	c01f354 <mbedtls_mpi_inv_mod+0x10e>
            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 c01f3cc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 c01f3ce:	681b      	ldr	r3, [r3, #0]
 c01f3d0:	07d9      	lsls	r1, r3, #31
 c01f3d2:	d44c      	bmi.n	c01f46e <mbedtls_mpi_inv_mod+0x228>
 c01f3d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 c01f3d6:	681b      	ldr	r3, [r3, #0]
 c01f3d8:	07da      	lsls	r2, r3, #31
 c01f3da:	d448      	bmi.n	c01f46e <mbedtls_mpi_inv_mod+0x228>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 c01f3dc:	2101      	movs	r1, #1
 c01f3de:	a816      	add	r0, sp, #88	; 0x58
 c01f3e0:	f7fe fe18 	bl	c01e014 <mbedtls_mpi_shift_r>
 c01f3e4:	4604      	mov	r4, r0
 c01f3e6:	2800      	cmp	r0, #0
 c01f3e8:	d1b4      	bne.n	c01f354 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 c01f3ea:	2101      	movs	r1, #1
 c01f3ec:	a819      	add	r0, sp, #100	; 0x64
 c01f3ee:	f7fe fe11 	bl	c01e014 <mbedtls_mpi_shift_r>
 c01f3f2:	4604      	mov	r4, r0
 c01f3f4:	2800      	cmp	r0, #0
 c01f3f6:	d1ad      	bne.n	c01f354 <mbedtls_mpi_inv_mod+0x10e>
        while( ( TV.p[0] & 1 ) == 0 )
 c01f3f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 c01f3fa:	681b      	ldr	r3, [r3, #0]
 c01f3fc:	07db      	lsls	r3, r3, #31
 c01f3fe:	d5de      	bpl.n	c01f3be <mbedtls_mpi_inv_mod+0x178>
        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 c01f400:	a913      	add	r1, sp, #76	; 0x4c
 c01f402:	a807      	add	r0, sp, #28
 c01f404:	f7fe fed6 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c01f408:	2800      	cmp	r0, #0
 c01f40a:	db42      	blt.n	c01f492 <mbedtls_mpi_inv_mod+0x24c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 c01f40c:	a907      	add	r1, sp, #28
 c01f40e:	aa13      	add	r2, sp, #76	; 0x4c
 c01f410:	4608      	mov	r0, r1
 c01f412:	f7fe ffe6 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c01f416:	4604      	mov	r4, r0
 c01f418:	2800      	cmp	r0, #0
 c01f41a:	d19b      	bne.n	c01f354 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 c01f41c:	a90a      	add	r1, sp, #40	; 0x28
 c01f41e:	aa16      	add	r2, sp, #88	; 0x58
 c01f420:	4608      	mov	r0, r1
 c01f422:	f7fe ffde 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c01f426:	4604      	mov	r4, r0
 c01f428:	2800      	cmp	r0, #0
 c01f42a:	d193      	bne.n	c01f354 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 c01f42c:	aa19      	add	r2, sp, #100	; 0x64
 c01f42e:	a90d      	add	r1, sp, #52	; 0x34
 c01f430:	4608      	mov	r0, r1
 c01f432:	f7fe ffd6 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c01f436:	4604      	mov	r4, r0
 c01f438:	2800      	cmp	r0, #0
 c01f43a:	d18b      	bne.n	c01f354 <mbedtls_mpi_inv_mod+0x10e>
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 c01f43c:	2100      	movs	r1, #0
 c01f43e:	a807      	add	r0, sp, #28
 c01f440:	f7fe fef8 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c01f444:	2800      	cmp	r0, #0
 c01f446:	f47f af6c 	bne.w	c01f322 <mbedtls_mpi_inv_mod+0xdc>
    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 c01f44a:	2100      	movs	r1, #0
 c01f44c:	a816      	add	r0, sp, #88	; 0x58
 c01f44e:	f7fe fef1 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c01f452:	2800      	cmp	r0, #0
 c01f454:	db32      	blt.n	c01f4bc <mbedtls_mpi_inv_mod+0x276>
    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 c01f456:	4631      	mov	r1, r6
 c01f458:	a816      	add	r0, sp, #88	; 0x58
 c01f45a:	f7fe feab 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c01f45e:	2800      	cmp	r0, #0
 c01f460:	da35      	bge.n	c01f4ce <mbedtls_mpi_inv_mod+0x288>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 c01f462:	a916      	add	r1, sp, #88	; 0x58
 c01f464:	4640      	mov	r0, r8
 c01f466:	f7fe fb6a 	bl	c01db3e <mbedtls_mpi_copy>
 c01f46a:	4604      	mov	r4, r0
cleanup:
 c01f46c:	e772      	b.n	c01f354 <mbedtls_mpi_inv_mod+0x10e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 c01f46e:	a916      	add	r1, sp, #88	; 0x58
 c01f470:	aa10      	add	r2, sp, #64	; 0x40
 c01f472:	4608      	mov	r0, r1
 c01f474:	f7fe ff93 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c01f478:	4604      	mov	r4, r0
 c01f47a:	2800      	cmp	r0, #0
 c01f47c:	f47f af6a 	bne.w	c01f354 <mbedtls_mpi_inv_mod+0x10e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 c01f480:	a919      	add	r1, sp, #100	; 0x64
 c01f482:	aa04      	add	r2, sp, #16
 c01f484:	4608      	mov	r0, r1
 c01f486:	f7fe ffac 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c01f48a:	4604      	mov	r4, r0
 c01f48c:	2800      	cmp	r0, #0
 c01f48e:	d0a5      	beq.n	c01f3dc <mbedtls_mpi_inv_mod+0x196>
 c01f490:	e760      	b.n	c01f354 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 c01f492:	a913      	add	r1, sp, #76	; 0x4c
 c01f494:	aa07      	add	r2, sp, #28
 c01f496:	4608      	mov	r0, r1
 c01f498:	f7fe ffa3 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c01f49c:	4604      	mov	r4, r0
 c01f49e:	2800      	cmp	r0, #0
 c01f4a0:	f47f af58 	bne.w	c01f354 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 c01f4a4:	a916      	add	r1, sp, #88	; 0x58
 c01f4a6:	aa0a      	add	r2, sp, #40	; 0x28
 c01f4a8:	4608      	mov	r0, r1
 c01f4aa:	f7fe ff9a 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c01f4ae:	4604      	mov	r4, r0
 c01f4b0:	2800      	cmp	r0, #0
 c01f4b2:	f47f af4f 	bne.w	c01f354 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 c01f4b6:	aa0d      	add	r2, sp, #52	; 0x34
 c01f4b8:	a919      	add	r1, sp, #100	; 0x64
 c01f4ba:	e7b9      	b.n	c01f430 <mbedtls_mpi_inv_mod+0x1ea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 c01f4bc:	a916      	add	r1, sp, #88	; 0x58
 c01f4be:	4632      	mov	r2, r6
 c01f4c0:	4608      	mov	r0, r1
 c01f4c2:	f7fe ff6c 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c01f4c6:	4604      	mov	r4, r0
 c01f4c8:	2800      	cmp	r0, #0
 c01f4ca:	d0be      	beq.n	c01f44a <mbedtls_mpi_inv_mod+0x204>
cleanup:
 c01f4cc:	e742      	b.n	c01f354 <mbedtls_mpi_inv_mod+0x10e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 c01f4ce:	a916      	add	r1, sp, #88	; 0x58
 c01f4d0:	4632      	mov	r2, r6
 c01f4d2:	4608      	mov	r0, r1
 c01f4d4:	f7fe ff85 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c01f4d8:	4604      	mov	r4, r0
 c01f4da:	2800      	cmp	r0, #0
 c01f4dc:	d0bb      	beq.n	c01f456 <mbedtls_mpi_inv_mod+0x210>
cleanup:
 c01f4de:	e739      	b.n	c01f354 <mbedtls_mpi_inv_mod+0x10e>
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 c01f4e0:	f06f 040d 	mvn.w	r4, #13
 c01f4e4:	e736      	b.n	c01f354 <mbedtls_mpi_inv_mod+0x10e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 c01f4e6:	f06f 0403 	mvn.w	r4, #3
 c01f4ea:	e74e      	b.n	c01f38a <mbedtls_mpi_inv_mod+0x144>

0c01f4ec <mbedtls_mpi_is_prime_ext>:
 * Pseudo-primality test: small factors, then Miller-Rabin
 */
int mbedtls_mpi_is_prime_ext( const mbedtls_mpi *X, int rounds,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng )
{
 c01f4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    int ret;
    mbedtls_mpi XX;
    MPI_VALIDATE_RET( X     != NULL );
    MPI_VALIDATE_RET( f_rng != NULL );

    XX.s = 1;
 c01f4ee:	2401      	movs	r4, #1
{
 c01f4f0:	461f      	mov	r7, r3
    XX.n = X->n;
 c01f4f2:	6843      	ldr	r3, [r0, #4]
{
 c01f4f4:	b085      	sub	sp, #20
    XX.n = X->n;
 c01f4f6:	9302      	str	r3, [sp, #8]
    XX.p = X->p;
 c01f4f8:	6883      	ldr	r3, [r0, #8]
{
 c01f4fa:	460d      	mov	r5, r1

    if( mbedtls_mpi_cmp_int( &XX, 0 ) == 0 ||
 c01f4fc:	a801      	add	r0, sp, #4
 c01f4fe:	2100      	movs	r1, #0
{
 c01f500:	4616      	mov	r6, r2
    XX.s = 1;
 c01f502:	9401      	str	r4, [sp, #4]
    XX.p = X->p;
 c01f504:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_int( &XX, 0 ) == 0 ||
 c01f506:	f7fe fe95 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c01f50a:	b1c8      	cbz	r0, c01f540 <mbedtls_mpi_is_prime_ext+0x54>
        mbedtls_mpi_cmp_int( &XX, 1 ) == 0 )
 c01f50c:	4621      	mov	r1, r4
 c01f50e:	a801      	add	r0, sp, #4
 c01f510:	f7fe fe90 	bl	c01e234 <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( &XX, 0 ) == 0 ||
 c01f514:	b1a0      	cbz	r0, c01f540 <mbedtls_mpi_is_prime_ext+0x54>
        return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );

    if( mbedtls_mpi_cmp_int( &XX, 2 ) == 0 )
 c01f516:	2102      	movs	r1, #2
 c01f518:	a801      	add	r0, sp, #4
 c01f51a:	f7fe fe8b 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c01f51e:	b128      	cbz	r0, c01f52c <mbedtls_mpi_is_prime_ext+0x40>
        return( 0 );

    if( ( ret = mpi_check_small_factors( &XX ) ) != 0 )
 c01f520:	a801      	add	r0, sp, #4
 c01f522:	f7ff fab9 	bl	c01ea98 <mpi_check_small_factors>
 c01f526:	b120      	cbz	r0, c01f532 <mbedtls_mpi_is_prime_ext+0x46>
    {
        if( ret == 1 )
 c01f528:	42a0      	cmp	r0, r4
 c01f52a:	d100      	bne.n	c01f52e <mbedtls_mpi_is_prime_ext+0x42>
            return( 0 );
 c01f52c:	2000      	movs	r0, #0

        return( ret );
    }

    return( mpi_miller_rabin( &XX, rounds, f_rng, p_rng ) );
}
 c01f52e:	b005      	add	sp, #20
 c01f530:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return( mpi_miller_rabin( &XX, rounds, f_rng, p_rng ) );
 c01f532:	463b      	mov	r3, r7
 c01f534:	4632      	mov	r2, r6
 c01f536:	4629      	mov	r1, r5
 c01f538:	a801      	add	r0, sp, #4
 c01f53a:	f7ff fdc3 	bl	c01f0c4 <mpi_miller_rabin>
 c01f53e:	e7f6      	b.n	c01f52e <mbedtls_mpi_is_prime_ext+0x42>
        return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );
 c01f540:	f06f 000d 	mvn.w	r0, #13
 c01f544:	e7f3      	b.n	c01f52e <mbedtls_mpi_is_prime_ext+0x42>
	...

0c01f548 <mbedtls_mpi_gen_prime>:
 * MBEDTLS_MPI_GEN_PRIME_FLAG_LOW_ERR.
 */
int mbedtls_mpi_gen_prime( mbedtls_mpi *X, size_t nbits, int flags,
                   int (*f_rng)(void *, unsigned char *, size_t),
                   void *p_rng )
{
 c01f548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c01f54c:	4698      	mov	r8, r3
    mbedtls_mpi Y;

    MPI_VALIDATE_RET( X     != NULL );
    MPI_VALIDATE_RET( f_rng != NULL );

    if( nbits < 3 || nbits > MBEDTLS_MPI_MAX_BITS )
 c01f54e:	f641 73fd 	movw	r3, #8189	; 0x1ffd
{
 c01f552:	460c      	mov	r4, r1
    if( nbits < 3 || nbits > MBEDTLS_MPI_MAX_BITS )
 c01f554:	3903      	subs	r1, #3
 c01f556:	4299      	cmp	r1, r3
{
 c01f558:	b087      	sub	sp, #28
 c01f55a:	4606      	mov	r6, r0
    if( nbits < 3 || nbits > MBEDTLS_MPI_MAX_BITS )
 c01f55c:	f200 80f3 	bhi.w	c01f746 <mbedtls_mpi_gen_prime+0x1fe>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    mbedtls_mpi_init( &Y );

    n = BITS_TO_LIMBS( nbits );
 c01f560:	f014 071f 	ands.w	r7, r4, #31
    X->n = 0;
 c01f564:	f04f 0300 	mov.w	r3, #0
    n = BITS_TO_LIMBS( nbits );
 c01f568:	bf18      	it	ne
 c01f56a:	2701      	movne	r7, #1
    X->n = 0;
 c01f56c:	2101      	movs	r1, #1

    if( ( flags & MBEDTLS_MPI_GEN_PRIME_FLAG_LOW_ERR ) == 0 )
 c01f56e:	0790      	lsls	r0, r2, #30
    X->n = 0;
 c01f570:	e9cd 1303 	strd	r1, r3, [sp, #12]
    X->p = NULL;
 c01f574:	9305      	str	r3, [sp, #20]
    n = BITS_TO_LIMBS( nbits );
 c01f576:	eb07 1754 	add.w	r7, r7, r4, lsr #5
    if( ( flags & MBEDTLS_MPI_GEN_PRIME_FLAG_LOW_ERR ) == 0 )
 c01f57a:	f100 8091 	bmi.w	c01f6a0 <mbedtls_mpi_gen_prime+0x158>
    {
        /*
         * 2^-80 error probability, number of rounds chosen per HAC, table 4.4
         */
        rounds = ( ( nbits >= 1300 ) ?  2 : ( nbits >=  850 ) ?  3 :
 c01f57e:	f240 5313 	movw	r3, #1299	; 0x513
 c01f582:	429c      	cmp	r4, r3
 c01f584:	f200 80a9 	bhi.w	c01f6da <mbedtls_mpi_gen_prime+0x192>
 c01f588:	f240 3351 	movw	r3, #849	; 0x351
 c01f58c:	429c      	cmp	r4, r3
 c01f58e:	f200 80a6 	bhi.w	c01f6de <mbedtls_mpi_gen_prime+0x196>
                   ( nbits >=  650 ) ?  4 : ( nbits >=  350 ) ?  8 :
 c01f592:	f240 2389 	movw	r3, #649	; 0x289
 c01f596:	429c      	cmp	r4, r3
 c01f598:	f200 80a5 	bhi.w	c01f6e6 <mbedtls_mpi_gen_prime+0x19e>
 c01f59c:	f5b4 7faf 	cmp.w	r4, #350	; 0x15e
 c01f5a0:	f080 80a9 	bcs.w	c01f6f6 <mbedtls_mpi_gen_prime+0x1ae>
                   ( nbits >=  250 ) ? 12 : ( nbits >=  150 ) ? 18 : 27 );
 c01f5a4:	2cf9      	cmp	r4, #249	; 0xf9
 c01f5a6:	f200 809c 	bhi.w	c01f6e2 <mbedtls_mpi_gen_prime+0x19a>
 c01f5aa:	2c95      	cmp	r4, #149	; 0x95
 c01f5ac:	bf8c      	ite	hi
 c01f5ae:	2512      	movhi	r5, #18
 c01f5b0:	251b      	movls	r5, #27
                   ( nbits >=  250 ) ? 28 : ( nbits >=   150 ) ? 40 : 51 );
    }

    while( 1 )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( X, n * ciL, f_rng, p_rng ) );
 c01f5b2:	ea4f 0a87 	mov.w	sl, r7, lsl #2

        k = n * biL;
        if( k > nbits ) MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( X, k - nbits ) );
        X->p[0] |= 1;

        if( ( flags & MBEDTLS_MPI_GEN_PRIME_FLAG_DH ) == 0 )
 c01f5b6:	f002 0301 	and.w	r3, r2, #1
        k = n * biL;
 c01f5ba:	017f      	lsls	r7, r7, #5
        if( X->p[n-1] < CEIL_MAXUINT_DIV_SQRT2 ) continue;
 c01f5bc:	f1aa 0904 	sub.w	r9, sl, #4
        if( k > nbits ) MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( X, k - nbits ) );
 c01f5c0:	eba7 0b04 	sub.w	fp, r7, r4
        if( ( flags & MBEDTLS_MPI_GEN_PRIME_FLAG_DH ) == 0 )
 c01f5c4:	9301      	str	r3, [sp, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( X, n * ciL, f_rng, p_rng ) );
 c01f5c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 c01f5c8:	4642      	mov	r2, r8
 c01f5ca:	4651      	mov	r1, sl
 c01f5cc:	4630      	mov	r0, r6
 c01f5ce:	f7ff fd44 	bl	c01f05a <mbedtls_mpi_fill_random>
 c01f5d2:	4603      	mov	r3, r0
 c01f5d4:	2800      	cmp	r0, #0
 c01f5d6:	f040 809c 	bne.w	c01f712 <mbedtls_mpi_gen_prime+0x1ca>
        if( X->p[n-1] < CEIL_MAXUINT_DIV_SQRT2 ) continue;
 c01f5da:	68b3      	ldr	r3, [r6, #8]
 c01f5dc:	4a5b      	ldr	r2, [pc, #364]	; (c01f74c <mbedtls_mpi_gen_prime+0x204>)
 c01f5de:	f853 3009 	ldr.w	r3, [r3, r9]
 c01f5e2:	4293      	cmp	r3, r2
 c01f5e4:	d9ef      	bls.n	c01f5c6 <mbedtls_mpi_gen_prime+0x7e>
        if( k > nbits ) MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( X, k - nbits ) );
 c01f5e6:	42bc      	cmp	r4, r7
 c01f5e8:	f0c0 808b 	bcc.w	c01f702 <mbedtls_mpi_gen_prime+0x1ba>
        X->p[0] |= 1;
 c01f5ec:	68b2      	ldr	r2, [r6, #8]
 c01f5ee:	6813      	ldr	r3, [r2, #0]
 c01f5f0:	f043 0101 	orr.w	r1, r3, #1
 c01f5f4:	6011      	str	r1, [r2, #0]
        if( ( flags & MBEDTLS_MPI_GEN_PRIME_FLAG_DH ) == 0 )
 c01f5f6:	9901      	ldr	r1, [sp, #4]
 c01f5f8:	2900      	cmp	r1, #0
 c01f5fa:	f000 8093 	beq.w	c01f724 <mbedtls_mpi_gen_prime+0x1dc>
             * An necessary condition for Y and X = 2Y + 1 to be prime
             * is X = 2 mod 3 (which is equivalent to Y = 2 mod 3).
             * Make sure it is satisfied, while keeping X = 3 mod 4
             */

            X->p[0] |= 2;
 c01f5fe:	f043 0303 	orr.w	r3, r3, #3
 c01f602:	6013      	str	r3, [r2, #0]
 c01f604:	4631      	mov	r1, r6
 c01f606:	2203      	movs	r2, #3
 c01f608:	a802      	add	r0, sp, #8
 c01f60a:	f7fe fa01 	bl	c01da10 <mbedtls_mpi_mod_int.part.5>

            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_int( &r, X, 3 ) );
 c01f60e:	4603      	mov	r3, r0
 c01f610:	2800      	cmp	r0, #0
 c01f612:	d17e      	bne.n	c01f712 <mbedtls_mpi_gen_prime+0x1ca>
            if( r == 0 )
 c01f614:	9b02      	ldr	r3, [sp, #8]
 c01f616:	2b00      	cmp	r3, #0
 c01f618:	f040 8090 	bne.w	c01f73c <mbedtls_mpi_gen_prime+0x1f4>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( X, X, 8 ) );
 c01f61c:	2208      	movs	r2, #8
 c01f61e:	4631      	mov	r1, r6
 c01f620:	4630      	mov	r0, r6
 c01f622:	f7fe ff01 	bl	c01e428 <mbedtls_mpi_add_int>
 c01f626:	4603      	mov	r3, r0
 c01f628:	2800      	cmp	r0, #0
 c01f62a:	d172      	bne.n	c01f712 <mbedtls_mpi_gen_prime+0x1ca>
            else if( r == 1 )
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( X, X, 4 ) );

            /* Set Y = (X-1) / 2, which is X / 2 because X is odd */
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, X ) );
 c01f62c:	4631      	mov	r1, r6
 c01f62e:	a803      	add	r0, sp, #12
 c01f630:	f7fe fa85 	bl	c01db3e <mbedtls_mpi_copy>
 c01f634:	4603      	mov	r3, r0
 c01f636:	2800      	cmp	r0, #0
 c01f638:	d16b      	bne.n	c01f712 <mbedtls_mpi_gen_prime+0x1ca>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, 1 ) );
 c01f63a:	2101      	movs	r1, #1
 c01f63c:	a803      	add	r0, sp, #12
 c01f63e:	f7fe fce9 	bl	c01e014 <mbedtls_mpi_shift_r>
 c01f642:	4603      	mov	r3, r0
 c01f644:	2800      	cmp	r0, #0
 c01f646:	d164      	bne.n	c01f712 <mbedtls_mpi_gen_prime+0x1ca>
            {
                /*
                 * First, check small factors for X and Y
                 * before doing Miller-Rabin on any of them
                 */
                if( ( ret = mpi_check_small_factors(  X         ) ) == 0 &&
 c01f648:	4630      	mov	r0, r6
 c01f64a:	f7ff fa25 	bl	c01ea98 <mpi_check_small_factors>
 c01f64e:	4603      	mov	r3, r0
 c01f650:	b9a8      	cbnz	r0, c01f67e <mbedtls_mpi_gen_prime+0x136>
 c01f652:	a803      	add	r0, sp, #12
 c01f654:	f7ff fa20 	bl	c01ea98 <mpi_check_small_factors>
 c01f658:	4603      	mov	r3, r0
 c01f65a:	b980      	cbnz	r0, c01f67e <mbedtls_mpi_gen_prime+0x136>
                    ( ret = mpi_check_small_factors( &Y         ) ) == 0 &&
 c01f65c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 c01f65e:	4642      	mov	r2, r8
 c01f660:	4629      	mov	r1, r5
 c01f662:	4630      	mov	r0, r6
 c01f664:	f7ff fd2e 	bl	c01f0c4 <mpi_miller_rabin>
 c01f668:	4603      	mov	r3, r0
 c01f66a:	b940      	cbnz	r0, c01f67e <mbedtls_mpi_gen_prime+0x136>
                    ( ret = mpi_miller_rabin(  X, rounds, f_rng, p_rng  ) )
                                                                    == 0 &&
 c01f66c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 c01f66e:	4642      	mov	r2, r8
 c01f670:	4629      	mov	r1, r5
 c01f672:	a803      	add	r0, sp, #12
 c01f674:	f7ff fd26 	bl	c01f0c4 <mpi_miller_rabin>
 c01f678:	4603      	mov	r3, r0
 c01f67a:	2800      	cmp	r0, #0
 c01f67c:	d049      	beq.n	c01f712 <mbedtls_mpi_gen_prime+0x1ca>
                    ( ret = mpi_miller_rabin( &Y, rounds, f_rng, p_rng  ) )
                                                                    == 0 )
                    goto cleanup;

                if( ret != MBEDTLS_ERR_MPI_NOT_ACCEPTABLE )
 c01f67e:	f113 0f0e 	cmn.w	r3, #14
 c01f682:	d146      	bne.n	c01f712 <mbedtls_mpi_gen_prime+0x1ca>
                /*
                 * Next candidates. We want to preserve Y = (X-1) / 2 and
                 * Y = 1 mod 2 and Y = 2 mod 3 (eq X = 3 mod 4 and X = 2 mod 3)
                 * so up Y by 6 and X by 12.
                 */
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_int(  X,  X, 12 ) );
 c01f684:	220c      	movs	r2, #12
 c01f686:	4631      	mov	r1, r6
 c01f688:	4630      	mov	r0, r6
 c01f68a:	f7fe fecd 	bl	c01e428 <mbedtls_mpi_add_int>
 c01f68e:	4603      	mov	r3, r0
 c01f690:	2800      	cmp	r0, #0
 c01f692:	d13e      	bne.n	c01f712 <mbedtls_mpi_gen_prime+0x1ca>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &Y, &Y, 6  ) );
 c01f694:	a903      	add	r1, sp, #12
 c01f696:	2206      	movs	r2, #6
 c01f698:	4608      	mov	r0, r1
 c01f69a:	f7fe fec5 	bl	c01e428 <mbedtls_mpi_add_int>
 c01f69e:	e7d0      	b.n	c01f642 <mbedtls_mpi_gen_prime+0xfa>
        rounds = ( ( nbits >= 1450 ) ?  4 : ( nbits >=  1150 ) ?  5 :
 c01f6a0:	f240 53a9 	movw	r3, #1449	; 0x5a9
 c01f6a4:	429c      	cmp	r4, r3
 c01f6a6:	d81e      	bhi.n	c01f6e6 <mbedtls_mpi_gen_prime+0x19e>
 c01f6a8:	f240 437d 	movw	r3, #1149	; 0x47d
 c01f6ac:	429c      	cmp	r4, r3
 c01f6ae:	d81c      	bhi.n	c01f6ea <mbedtls_mpi_gen_prime+0x1a2>
                   ( nbits >= 1000 ) ?  6 : ( nbits >=   850 ) ?  7 :
 c01f6b0:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 c01f6b4:	d21b      	bcs.n	c01f6ee <mbedtls_mpi_gen_prime+0x1a6>
 c01f6b6:	f240 3351 	movw	r3, #849	; 0x351
 c01f6ba:	429c      	cmp	r4, r3
 c01f6bc:	d819      	bhi.n	c01f6f2 <mbedtls_mpi_gen_prime+0x1aa>
                   ( nbits >=  750 ) ?  8 : ( nbits >=   500 ) ? 13 :
 c01f6be:	f240 23ed 	movw	r3, #749	; 0x2ed
 c01f6c2:	429c      	cmp	r4, r3
 c01f6c4:	d817      	bhi.n	c01f6f6 <mbedtls_mpi_gen_prime+0x1ae>
 c01f6c6:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 c01f6ca:	d216      	bcs.n	c01f6fa <mbedtls_mpi_gen_prime+0x1b2>
                   ( nbits >=  250 ) ? 28 : ( nbits >=   150 ) ? 40 : 51 );
 c01f6cc:	2cf9      	cmp	r4, #249	; 0xf9
 c01f6ce:	d816      	bhi.n	c01f6fe <mbedtls_mpi_gen_prime+0x1b6>
 c01f6d0:	2c95      	cmp	r4, #149	; 0x95
 c01f6d2:	bf8c      	ite	hi
 c01f6d4:	2528      	movhi	r5, #40	; 0x28
 c01f6d6:	2533      	movls	r5, #51	; 0x33
 c01f6d8:	e76b      	b.n	c01f5b2 <mbedtls_mpi_gen_prime+0x6a>
        rounds = ( ( nbits >= 1300 ) ?  2 : ( nbits >=  850 ) ?  3 :
 c01f6da:	2502      	movs	r5, #2
 c01f6dc:	e769      	b.n	c01f5b2 <mbedtls_mpi_gen_prime+0x6a>
 c01f6de:	2503      	movs	r5, #3
 c01f6e0:	e767      	b.n	c01f5b2 <mbedtls_mpi_gen_prime+0x6a>
                   ( nbits >=  250 ) ? 12 : ( nbits >=  150 ) ? 18 : 27 );
 c01f6e2:	250c      	movs	r5, #12
 c01f6e4:	e765      	b.n	c01f5b2 <mbedtls_mpi_gen_prime+0x6a>
                   ( nbits >=  650 ) ?  4 : ( nbits >=  350 ) ?  8 :
 c01f6e6:	2504      	movs	r5, #4
 c01f6e8:	e763      	b.n	c01f5b2 <mbedtls_mpi_gen_prime+0x6a>
        rounds = ( ( nbits >= 1450 ) ?  4 : ( nbits >=  1150 ) ?  5 :
 c01f6ea:	2505      	movs	r5, #5
 c01f6ec:	e761      	b.n	c01f5b2 <mbedtls_mpi_gen_prime+0x6a>
                   ( nbits >= 1000 ) ?  6 : ( nbits >=   850 ) ?  7 :
 c01f6ee:	2506      	movs	r5, #6
 c01f6f0:	e75f      	b.n	c01f5b2 <mbedtls_mpi_gen_prime+0x6a>
 c01f6f2:	2507      	movs	r5, #7
 c01f6f4:	e75d      	b.n	c01f5b2 <mbedtls_mpi_gen_prime+0x6a>
                   ( nbits >=  650 ) ?  4 : ( nbits >=  350 ) ?  8 :
 c01f6f6:	2508      	movs	r5, #8
 c01f6f8:	e75b      	b.n	c01f5b2 <mbedtls_mpi_gen_prime+0x6a>
                   ( nbits >=  750 ) ?  8 : ( nbits >=   500 ) ? 13 :
 c01f6fa:	250d      	movs	r5, #13
 c01f6fc:	e759      	b.n	c01f5b2 <mbedtls_mpi_gen_prime+0x6a>
                   ( nbits >=  250 ) ? 28 : ( nbits >=   150 ) ? 40 : 51 );
 c01f6fe:	251c      	movs	r5, #28
 c01f700:	e757      	b.n	c01f5b2 <mbedtls_mpi_gen_prime+0x6a>
        if( k > nbits ) MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( X, k - nbits ) );
 c01f702:	4659      	mov	r1, fp
 c01f704:	4630      	mov	r0, r6
 c01f706:	f7fe fc85 	bl	c01e014 <mbedtls_mpi_shift_r>
 c01f70a:	4603      	mov	r3, r0
 c01f70c:	2800      	cmp	r0, #0
 c01f70e:	f43f af6d 	beq.w	c01f5ec <mbedtls_mpi_gen_prime+0xa4>
        }
    }

cleanup:

    mbedtls_mpi_free( &Y );
 c01f712:	a803      	add	r0, sp, #12
 c01f714:	9301      	str	r3, [sp, #4]
 c01f716:	f7fe f9a1 	bl	c01da5c <mbedtls_mpi_free>

    return( ret );
 c01f71a:	9b01      	ldr	r3, [sp, #4]
}
 c01f71c:	4618      	mov	r0, r3
 c01f71e:	b007      	add	sp, #28
 c01f720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ret = mbedtls_mpi_is_prime_ext( X, rounds, f_rng, p_rng );
 c01f724:	9b10      	ldr	r3, [sp, #64]	; 0x40
 c01f726:	4642      	mov	r2, r8
 c01f728:	4629      	mov	r1, r5
 c01f72a:	4630      	mov	r0, r6
 c01f72c:	f7ff fede 	bl	c01f4ec <mbedtls_mpi_is_prime_ext>
            if( ret != MBEDTLS_ERR_MPI_NOT_ACCEPTABLE )
 c01f730:	f110 0f0e 	cmn.w	r0, #14
            ret = mbedtls_mpi_is_prime_ext( X, rounds, f_rng, p_rng );
 c01f734:	4603      	mov	r3, r0
            if( ret != MBEDTLS_ERR_MPI_NOT_ACCEPTABLE )
 c01f736:	f43f af46 	beq.w	c01f5c6 <mbedtls_mpi_gen_prime+0x7e>
 c01f73a:	e7ea      	b.n	c01f712 <mbedtls_mpi_gen_prime+0x1ca>
            else if( r == 1 )
 c01f73c:	2b01      	cmp	r3, #1
 c01f73e:	f47f af75 	bne.w	c01f62c <mbedtls_mpi_gen_prime+0xe4>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( X, X, 4 ) );
 c01f742:	2204      	movs	r2, #4
 c01f744:	e76b      	b.n	c01f61e <mbedtls_mpi_gen_prime+0xd6>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 c01f746:	f06f 0303 	mvn.w	r3, #3
 c01f74a:	e7e7      	b.n	c01f71c <mbedtls_mpi_gen_prime+0x1d4>
 c01f74c:	b504f333 	.word	0xb504f333

0c01f750 <ccm_auth_crypt>:
static int ccm_auth_crypt( mbedtls_ccm_context *ctx, int mode, size_t length,
                           const unsigned char *iv, size_t iv_len,
                           const unsigned char *add, size_t add_len,
                           const unsigned char *input, unsigned char *output,
                           unsigned char *tag, size_t tag_len )
{
 c01f750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c01f754:	b095      	sub	sp, #84	; 0x54
 c01f756:	9304      	str	r3, [sp, #16]
     * Additional requirement: a < 2^16 - 2^8 to simplify the code.
     * 'length' checked later (when writing it to the first block)
     *
     * Also, loosen the requirements to enable support for CCM* (IEEE 802.15.4).
     */
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
 c01f758:	9b24      	ldr	r3, [sp, #144]	; 0x90
{
 c01f75a:	4607      	mov	r7, r0
 c01f75c:	e9dd b41f 	ldrd	fp, r4, [sp, #124]	; 0x7c
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
 c01f760:	2b02      	cmp	r3, #2
{
 c01f762:	4689      	mov	r9, r1
 c01f764:	4616      	mov	r6, r2
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
 c01f766:	d105      	bne.n	c01f774 <ccm_auth_crypt+0x24>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
 c01f768:	f06f 030c 	mvn.w	r3, #12

    CTR_CRYPT( y, y, 16 );
    memcpy( tag, y, tag_len );

    return( 0 );
}
 c01f76c:	4618      	mov	r0, r3
 c01f76e:	b015      	add	sp, #84	; 0x54
 c01f770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
 c01f774:	9b24      	ldr	r3, [sp, #144]	; 0x90
 c01f776:	2b10      	cmp	r3, #16
 c01f778:	d8f6      	bhi.n	c01f768 <ccm_auth_crypt+0x18>
 c01f77a:	07db      	lsls	r3, r3, #31
 c01f77c:	d4f4      	bmi.n	c01f768 <ccm_auth_crypt+0x18>
    if( iv_len < 7 || iv_len > 13 )
 c01f77e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 c01f780:	3b07      	subs	r3, #7
 c01f782:	2b06      	cmp	r3, #6
 c01f784:	d8f0      	bhi.n	c01f768 <ccm_auth_crypt+0x18>
    if( add_len > 0xFF00 )
 c01f786:	f5b4 4f7f 	cmp.w	r4, #65280	; 0xff00
 c01f78a:	d8ed      	bhi.n	c01f768 <ccm_auth_crypt+0x18>
    q = 16 - 1 - (unsigned char) iv_len;
 c01f78c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    b[0] |= ( add_len > 0 ) << 6;
 c01f78e:	2c00      	cmp	r4, #0
    q = 16 - 1 - (unsigned char) iv_len;
 c01f790:	b2dd      	uxtb	r5, r3
 c01f792:	f1c5 030f 	rsb	r3, r5, #15
 c01f796:	b2db      	uxtb	r3, r3
 c01f798:	9303      	str	r3, [sp, #12]
    b[0] |= ( add_len > 0 ) << 6;
 c01f79a:	bf0c      	ite	eq
 c01f79c:	2300      	moveq	r3, #0
 c01f79e:	2340      	movne	r3, #64	; 0x40
    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 c01f7a0:	46b0      	mov	r8, r6
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
 c01f7a2:	9a24      	ldr	r2, [sp, #144]	; 0x90
    b[0] |= q - 1;
 c01f7a4:	f1c5 050e 	rsb	r5, r5, #14
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
 c01f7a8:	3a02      	subs	r2, #2
 c01f7aa:	0852      	lsrs	r2, r2, #1
    b[0] |= q - 1;
 c01f7ac:	b2ed      	uxtb	r5, r5
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
 c01f7ae:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    b[0] |= q - 1;
 c01f7b2:	432b      	orrs	r3, r5
    memcpy( b + 1, iv, iv_len );
 c01f7b4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 c01f7b6:	9904      	ldr	r1, [sp, #16]
 c01f7b8:	f10d 0021 	add.w	r0, sp, #33	; 0x21
    b[0] |= q - 1;
 c01f7bc:	f88d 3020 	strb.w	r3, [sp, #32]
    memcpy( b + 1, iv, iv_len );
 c01f7c0:	f7f5 f8dd 	bl	c01497e <memcpy>
 c01f7c4:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
 c01f7c8:	ab0c      	add	r3, sp, #48	; 0x30
 c01f7ca:	1b52      	subs	r2, r2, r5
        b[15-i] = (unsigned char)( len_left & 0xFF );
 c01f7cc:	f803 8d01 	strb.w	r8, [r3, #-1]!
    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 c01f7d0:	429a      	cmp	r2, r3
 c01f7d2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 c01f7d6:	d1f9      	bne.n	c01f7cc <ccm_auth_crypt+0x7c>
    if( len_left > 0 )
 c01f7d8:	f1b8 0f00 	cmp.w	r8, #0
 c01f7dc:	d1c4      	bne.n	c01f768 <ccm_auth_crypt+0x18>
    memset( y, 0, 16 );
 c01f7de:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 c01f7e2:	2210      	movs	r2, #16
 c01f7e4:	4641      	mov	r1, r8
 c01f7e6:	4650      	mov	r0, sl
 c01f7e8:	f7f5 f8ed 	bl	c0149c6 <memset>
 c01f7ec:	4642      	mov	r2, r8
    UPDATE_CBC_MAC;
 c01f7ee:	a808      	add	r0, sp, #32
 c01f7f0:	f812 300a 	ldrb.w	r3, [r2, sl]
 c01f7f4:	5c11      	ldrb	r1, [r2, r0]
 c01f7f6:	404b      	eors	r3, r1
 c01f7f8:	f802 300a 	strb.w	r3, [r2, sl]
 c01f7fc:	3201      	adds	r2, #1
 c01f7fe:	2a10      	cmp	r2, #16
 c01f800:	d1f6      	bne.n	c01f7f0 <ccm_auth_crypt+0xa0>
 c01f802:	ab07      	add	r3, sp, #28
 c01f804:	9300      	str	r3, [sp, #0]
 c01f806:	4651      	mov	r1, sl
 c01f808:	4653      	mov	r3, sl
 c01f80a:	4638      	mov	r0, r7
 c01f80c:	f000 fb0a 	bl	c01fe24 <mbedtls_cipher_update>
 c01f810:	4603      	mov	r3, r0
 c01f812:	2800      	cmp	r0, #0
 c01f814:	d1aa      	bne.n	c01f76c <ccm_auth_crypt+0x1c>
    if( add_len > 0 )
 c01f816:	2c00      	cmp	r4, #0
 c01f818:	d13c      	bne.n	c01f894 <ccm_auth_crypt+0x144>
    ctr[0] = q - 1;
 c01f81a:	ac14      	add	r4, sp, #80	; 0x50
    memcpy( ctr + 1, iv, iv_len );
 c01f81c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 c01f81e:	9904      	ldr	r1, [sp, #16]
 c01f820:	f10d 0041 	add.w	r0, sp, #65	; 0x41
    ctr[0] = q - 1;
 c01f824:	f804 5d10 	strb.w	r5, [r4, #-16]!
    memcpy( ctr + 1, iv, iv_len );
 c01f828:	f7f5 f8a9 	bl	c01497e <memcpy>
    memset( ctr + 1 + iv_len, 0, q );
 c01f82c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 c01f82e:	9a03      	ldr	r2, [sp, #12]
 c01f830:	1c58      	adds	r0, r3, #1
 c01f832:	2100      	movs	r1, #0
 c01f834:	4420      	add	r0, r4
 c01f836:	f7f5 f8c6 	bl	c0149c6 <memset>
    ctr[15] = 1;
 c01f83a:	2301      	movs	r3, #1
            memset( b, 0, 16 );
 c01f83c:	f10d 0820 	add.w	r8, sp, #32
    ctr[15] = 1;
 c01f840:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    while( len_left > 0 )
 c01f844:	2e00      	cmp	r6, #0
 c01f846:	f040 8081 	bne.w	c01f94c <ccm_auth_crypt+0x1fc>
 c01f84a:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 c01f84e:	ab14      	add	r3, sp, #80	; 0x50
 c01f850:	1b55      	subs	r5, r2, r5
        ctr[15-i] = 0;
 c01f852:	f803 6d01 	strb.w	r6, [r3, #-1]!
    for( i = 0; i < q; i++ )
 c01f856:	429d      	cmp	r5, r3
 c01f858:	d1fb      	bne.n	c01f852 <ccm_auth_crypt+0x102>
    CTR_CRYPT( y, y, 16 );
 c01f85a:	ab07      	add	r3, sp, #28
 c01f85c:	ad08      	add	r5, sp, #32
 c01f85e:	9300      	str	r3, [sp, #0]
 c01f860:	2210      	movs	r2, #16
 c01f862:	462b      	mov	r3, r5
 c01f864:	4621      	mov	r1, r4
 c01f866:	4638      	mov	r0, r7
 c01f868:	f000 fadc 	bl	c01fe24 <mbedtls_cipher_update>
 c01f86c:	4603      	mov	r3, r0
 c01f86e:	2800      	cmp	r0, #0
 c01f870:	f47f af7c 	bne.w	c01f76c <ccm_auth_crypt+0x1c>
 c01f874:	4602      	mov	r2, r0
 c01f876:	a90c      	add	r1, sp, #48	; 0x30
 c01f878:	5c50      	ldrb	r0, [r2, r1]
 c01f87a:	5cac      	ldrb	r4, [r5, r2]
 c01f87c:	4060      	eors	r0, r4
 c01f87e:	5450      	strb	r0, [r2, r1]
 c01f880:	3201      	adds	r2, #1
 c01f882:	2a10      	cmp	r2, #16
 c01f884:	d1f8      	bne.n	c01f878 <ccm_auth_crypt+0x128>
    memcpy( tag, y, tag_len );
 c01f886:	e9dd 0223 	ldrd	r0, r2, [sp, #140]	; 0x8c
 c01f88a:	9303      	str	r3, [sp, #12]
 c01f88c:	f7f5 f877 	bl	c01497e <memcpy>
 c01f890:	9b03      	ldr	r3, [sp, #12]
    return( 0 );
 c01f892:	e76b      	b.n	c01f76c <ccm_auth_crypt+0x1c>
        memset( b, 0, 16 );
 c01f894:	4601      	mov	r1, r0
 c01f896:	220e      	movs	r2, #14
 c01f898:	9005      	str	r0, [sp, #20]
 c01f89a:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 c01f89e:	f7f5 f892 	bl	c0149c6 <memset>
        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
 c01f8a2:	2c0e      	cmp	r4, #14
 c01f8a4:	46a0      	mov	r8, r4
 c01f8a6:	bf28      	it	cs
 c01f8a8:	f04f 080e 	movcs.w	r8, #14
        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
 c01f8ac:	0a22      	lsrs	r2, r4, #8
 c01f8ae:	f88d 2020 	strb.w	r2, [sp, #32]
        memcpy( b + 2, src, use_len );
 c01f8b2:	4659      	mov	r1, fp
 c01f8b4:	4642      	mov	r2, r8
 c01f8b6:	f10d 0022 	add.w	r0, sp, #34	; 0x22
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );
 c01f8ba:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
        memcpy( b + 2, src, use_len );
 c01f8be:	f7f5 f85e 	bl	c01497e <memcpy>
 c01f8c2:	9b05      	ldr	r3, [sp, #20]
        UPDATE_CBC_MAC;
 c01f8c4:	f10d 0c20 	add.w	ip, sp, #32
        memcpy( b + 2, src, use_len );
 c01f8c8:	461a      	mov	r2, r3
        UPDATE_CBC_MAC;
 c01f8ca:	4653      	mov	r3, sl
 c01f8cc:	5cd1      	ldrb	r1, [r2, r3]
 c01f8ce:	f812 000c 	ldrb.w	r0, [r2, ip]
 c01f8d2:	4041      	eors	r1, r0
 c01f8d4:	54d1      	strb	r1, [r2, r3]
 c01f8d6:	3201      	adds	r2, #1
 c01f8d8:	2a10      	cmp	r2, #16
 c01f8da:	d1f7      	bne.n	c01f8cc <ccm_auth_crypt+0x17c>
 c01f8dc:	a907      	add	r1, sp, #28
 c01f8de:	9100      	str	r1, [sp, #0]
 c01f8e0:	4638      	mov	r0, r7
 c01f8e2:	4619      	mov	r1, r3
 c01f8e4:	f000 fa9e 	bl	c01fe24 <mbedtls_cipher_update>
 c01f8e8:	4603      	mov	r3, r0
 c01f8ea:	2800      	cmp	r0, #0
 c01f8ec:	f47f af3e 	bne.w	c01f76c <ccm_auth_crypt+0x1c>
        len_left -= use_len;
 c01f8f0:	eba4 0408 	sub.w	r4, r4, r8
            memset( b, 0, 16 );
 c01f8f4:	f10d 0a20 	add.w	sl, sp, #32
        src += use_len;
 c01f8f8:	44d8      	add	r8, fp
        while( len_left > 0 )
 c01f8fa:	2c00      	cmp	r4, #0
 c01f8fc:	d08d      	beq.n	c01f81a <ccm_auth_crypt+0xca>
            use_len = len_left > 16 ? 16 : len_left;
 c01f8fe:	2c10      	cmp	r4, #16
 c01f900:	46a3      	mov	fp, r4
 c01f902:	bf28      	it	cs
 c01f904:	f04f 0b10 	movcs.w	fp, #16
            memset( b, 0, 16 );
 c01f908:	2210      	movs	r2, #16
 c01f90a:	2100      	movs	r1, #0
 c01f90c:	4650      	mov	r0, sl
 c01f90e:	f7f5 f85a 	bl	c0149c6 <memset>
            memcpy( b, src, use_len );
 c01f912:	465a      	mov	r2, fp
 c01f914:	4641      	mov	r1, r8
 c01f916:	4650      	mov	r0, sl
 c01f918:	f7f5 f831 	bl	c01497e <memcpy>
 c01f91c:	2200      	movs	r2, #0
            UPDATE_CBC_MAC;
 c01f91e:	ab0c      	add	r3, sp, #48	; 0x30
 c01f920:	5cd1      	ldrb	r1, [r2, r3]
 c01f922:	f812 000a 	ldrb.w	r0, [r2, sl]
 c01f926:	4041      	eors	r1, r0
 c01f928:	54d1      	strb	r1, [r2, r3]
 c01f92a:	3201      	adds	r2, #1
 c01f92c:	2a10      	cmp	r2, #16
 c01f92e:	d1f7      	bne.n	c01f920 <ccm_auth_crypt+0x1d0>
 c01f930:	a907      	add	r1, sp, #28
 c01f932:	9100      	str	r1, [sp, #0]
 c01f934:	4638      	mov	r0, r7
 c01f936:	4619      	mov	r1, r3
 c01f938:	f000 fa74 	bl	c01fe24 <mbedtls_cipher_update>
 c01f93c:	4603      	mov	r3, r0
 c01f93e:	2800      	cmp	r0, #0
 c01f940:	f47f af14 	bne.w	c01f76c <ccm_auth_crypt+0x1c>
            len_left -= use_len;
 c01f944:	eba4 040b 	sub.w	r4, r4, fp
            src += use_len;
 c01f948:	44d8      	add	r8, fp
 c01f94a:	e7d6      	b.n	c01f8fa <ccm_auth_crypt+0x1aa>
        size_t use_len = len_left > 16 ? 16 : len_left;
 c01f94c:	2e10      	cmp	r6, #16
 c01f94e:	46b2      	mov	sl, r6
 c01f950:	bf28      	it	cs
 c01f952:	f04f 0a10 	movcs.w	sl, #16
        if( mode == CCM_ENCRYPT )
 c01f956:	f1b9 0f00 	cmp.w	r9, #0
 c01f95a:	d02c      	beq.n	c01f9b6 <ccm_auth_crypt+0x266>
        CTR_CRYPT( dst, src, use_len );
 c01f95c:	ab07      	add	r3, sp, #28
 c01f95e:	9300      	str	r3, [sp, #0]
 c01f960:	2210      	movs	r2, #16
 c01f962:	4643      	mov	r3, r8
 c01f964:	4621      	mov	r1, r4
 c01f966:	4638      	mov	r0, r7
 c01f968:	f000 fa5c 	bl	c01fe24 <mbedtls_cipher_update>
 c01f96c:	4603      	mov	r3, r0
 c01f96e:	2800      	cmp	r0, #0
 c01f970:	f47f aefc 	bne.w	c01f76c <ccm_auth_crypt+0x1c>
 c01f974:	b2da      	uxtb	r2, r3
 c01f976:	4592      	cmp	sl, r2
 c01f978:	f103 0301 	add.w	r3, r3, #1
 c01f97c:	d839      	bhi.n	c01f9f2 <ccm_auth_crypt+0x2a2>
        if( mode == CCM_DECRYPT )
 c01f97e:	f1b9 0f01 	cmp.w	r9, #1
 c01f982:	d040      	beq.n	c01fa06 <ccm_auth_crypt+0x2b6>
 c01f984:	f10d 014f 	add.w	r1, sp, #79	; 0x4f
        len_left -= use_len;
 c01f988:	460a      	mov	r2, r1
        dst += use_len;
 c01f98a:	9b22      	ldr	r3, [sp, #136]	; 0x88
        len_left -= use_len;
 c01f98c:	eba6 060a 	sub.w	r6, r6, sl
        dst += use_len;
 c01f990:	4453      	add	r3, sl
 c01f992:	9322      	str	r3, [sp, #136]	; 0x88
        src += use_len;
 c01f994:	9b21      	ldr	r3, [sp, #132]	; 0x84
 c01f996:	4453      	add	r3, sl
 c01f998:	9321      	str	r3, [sp, #132]	; 0x84
            if( ++ctr[15-i] != 0 )
 c01f99a:	7813      	ldrb	r3, [r2, #0]
 c01f99c:	3301      	adds	r3, #1
 c01f99e:	b2db      	uxtb	r3, r3
 c01f9a0:	f802 3901 	strb.w	r3, [r2], #-1
 c01f9a4:	2b00      	cmp	r3, #0
 c01f9a6:	f47f af4d 	bne.w	c01f844 <ccm_auth_crypt+0xf4>
        for( i = 0; i < q; i++ )
 c01f9aa:	1a8b      	subs	r3, r1, r2
 c01f9ac:	9803      	ldr	r0, [sp, #12]
 c01f9ae:	b2db      	uxtb	r3, r3
 c01f9b0:	4283      	cmp	r3, r0
 c01f9b2:	d3f2      	bcc.n	c01f99a <ccm_auth_crypt+0x24a>
 c01f9b4:	e746      	b.n	c01f844 <ccm_auth_crypt+0xf4>
            memset( b, 0, 16 );
 c01f9b6:	2210      	movs	r2, #16
 c01f9b8:	4649      	mov	r1, r9
 c01f9ba:	4640      	mov	r0, r8
 c01f9bc:	f7f5 f803 	bl	c0149c6 <memset>
            memcpy( b, src, use_len );
 c01f9c0:	4652      	mov	r2, sl
 c01f9c2:	9921      	ldr	r1, [sp, #132]	; 0x84
 c01f9c4:	4640      	mov	r0, r8
 c01f9c6:	f7f4 ffda 	bl	c01497e <memcpy>
 c01f9ca:	464a      	mov	r2, r9
            UPDATE_CBC_MAC;
 c01f9cc:	ab0c      	add	r3, sp, #48	; 0x30
 c01f9ce:	5cd1      	ldrb	r1, [r2, r3]
 c01f9d0:	f812 0008 	ldrb.w	r0, [r2, r8]
 c01f9d4:	4041      	eors	r1, r0
 c01f9d6:	54d1      	strb	r1, [r2, r3]
 c01f9d8:	3201      	adds	r2, #1
 c01f9da:	2a10      	cmp	r2, #16
 c01f9dc:	d1f7      	bne.n	c01f9ce <ccm_auth_crypt+0x27e>
 c01f9de:	a907      	add	r1, sp, #28
 c01f9e0:	9100      	str	r1, [sp, #0]
 c01f9e2:	4638      	mov	r0, r7
 c01f9e4:	4619      	mov	r1, r3
 c01f9e6:	f000 fa1d 	bl	c01fe24 <mbedtls_cipher_update>
 c01f9ea:	4603      	mov	r3, r0
 c01f9ec:	2800      	cmp	r0, #0
 c01f9ee:	d0b5      	beq.n	c01f95c <ccm_auth_crypt+0x20c>
 c01f9f0:	e6bc      	b.n	c01f76c <ccm_auth_crypt+0x1c>
        CTR_CRYPT( dst, src, use_len );
 c01f9f2:	a914      	add	r1, sp, #80	; 0x50
 c01f9f4:	1888      	adds	r0, r1, r2
 c01f9f6:	9921      	ldr	r1, [sp, #132]	; 0x84
 c01f9f8:	f810 0c30 	ldrb.w	r0, [r0, #-48]
 c01f9fc:	5c89      	ldrb	r1, [r1, r2]
 c01f9fe:	4041      	eors	r1, r0
 c01fa00:	9822      	ldr	r0, [sp, #136]	; 0x88
 c01fa02:	5481      	strb	r1, [r0, r2]
 c01fa04:	e7b6      	b.n	c01f974 <ccm_auth_crypt+0x224>
            memset( b, 0, 16 );
 c01fa06:	2210      	movs	r2, #16
 c01fa08:	2100      	movs	r1, #0
 c01fa0a:	4640      	mov	r0, r8
 c01fa0c:	f7f4 ffdb 	bl	c0149c6 <memset>
            memcpy( b, dst, use_len );
 c01fa10:	4652      	mov	r2, sl
 c01fa12:	9922      	ldr	r1, [sp, #136]	; 0x88
 c01fa14:	4640      	mov	r0, r8
 c01fa16:	f7f4 ffb2 	bl	c01497e <memcpy>
 c01fa1a:	2200      	movs	r2, #0
            UPDATE_CBC_MAC;
 c01fa1c:	ab0c      	add	r3, sp, #48	; 0x30
 c01fa1e:	5cd1      	ldrb	r1, [r2, r3]
 c01fa20:	f812 0008 	ldrb.w	r0, [r2, r8]
 c01fa24:	4041      	eors	r1, r0
 c01fa26:	54d1      	strb	r1, [r2, r3]
 c01fa28:	3201      	adds	r2, #1
 c01fa2a:	2a10      	cmp	r2, #16
 c01fa2c:	d1f7      	bne.n	c01fa1e <ccm_auth_crypt+0x2ce>
 c01fa2e:	a907      	add	r1, sp, #28
 c01fa30:	9100      	str	r1, [sp, #0]
 c01fa32:	4638      	mov	r0, r7
 c01fa34:	4619      	mov	r1, r3
 c01fa36:	f000 f9f5 	bl	c01fe24 <mbedtls_cipher_update>
 c01fa3a:	4603      	mov	r3, r0
 c01fa3c:	2800      	cmp	r0, #0
 c01fa3e:	d0a1      	beq.n	c01f984 <ccm_auth_crypt+0x234>
 c01fa40:	e694      	b.n	c01f76c <ccm_auth_crypt+0x1c>

0c01fa42 <mbedtls_ccm_init>:
    memset( ctx, 0, sizeof( mbedtls_ccm_context ) );
 c01fa42:	2244      	movs	r2, #68	; 0x44
 c01fa44:	2100      	movs	r1, #0
 c01fa46:	f7f4 bfbe 	b.w	c0149c6 <memset>

0c01fa4a <mbedtls_ccm_setkey>:
{
 c01fa4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c01fa4e:	4604      	mov	r4, r0
 c01fa50:	4617      	mov	r7, r2
 c01fa52:	4608      	mov	r0, r1
    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits,
 c01fa54:	2201      	movs	r2, #1
 c01fa56:	4619      	mov	r1, r3
{
 c01fa58:	461e      	mov	r6, r3
    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits,
 c01fa5a:	f000 f967 	bl	c01fd2c <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
 c01fa5e:	4605      	mov	r5, r0
 c01fa60:	b190      	cbz	r0, c01fa88 <mbedtls_ccm_setkey+0x3e>
    if( cipher_info->block_size != 16 )
 c01fa62:	6943      	ldr	r3, [r0, #20]
 c01fa64:	2b10      	cmp	r3, #16
 c01fa66:	d10f      	bne.n	c01fa88 <mbedtls_ccm_setkey+0x3e>
    mbedtls_cipher_free( &ctx->cipher_ctx );
 c01fa68:	4620      	mov	r0, r4
 c01fa6a:	f000 f977 	bl	c01fd5c <mbedtls_cipher_free>
    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 c01fa6e:	4629      	mov	r1, r5
 c01fa70:	4620      	mov	r0, r4
 c01fa72:	f000 fb69 	bl	c020148 <mbedtls_cipher_setup>
 c01fa76:	b948      	cbnz	r0, c01fa8c <mbedtls_ccm_setkey+0x42>
    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 c01fa78:	4632      	mov	r2, r6
 c01fa7a:	4639      	mov	r1, r7
 c01fa7c:	4620      	mov	r0, r4
}
 c01fa7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 c01fa82:	2301      	movs	r3, #1
 c01fa84:	f000 b982 	b.w	c01fd8c <mbedtls_cipher_setkey>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
 c01fa88:	f06f 000c 	mvn.w	r0, #12
}
 c01fa8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0c01fa90 <mbedtls_ccm_free>:
{
 c01fa90:	b510      	push	{r4, lr}
    if( ctx == NULL )
 c01fa92:	4604      	mov	r4, r0
 c01fa94:	b138      	cbz	r0, c01faa6 <mbedtls_ccm_free+0x16>
    mbedtls_cipher_free( &ctx->cipher_ctx );
 c01fa96:	f000 f961 	bl	c01fd5c <mbedtls_cipher_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ccm_context ) );
 c01fa9a:	4620      	mov	r0, r4
}
 c01fa9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ccm_context ) );
 c01faa0:	2144      	movs	r1, #68	; 0x44
 c01faa2:	f006 be41 	b.w	c026728 <mbedtls_platform_zeroize>
}
 c01faa6:	bd10      	pop	{r4, pc}

0c01faa8 <mbedtls_ccm_star_encrypt_and_tag>:
int mbedtls_ccm_star_encrypt_and_tag( mbedtls_ccm_context *ctx, size_t length,
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *add, size_t add_len,
                         const unsigned char *input, unsigned char *output,
                         unsigned char *tag, size_t tag_len )
{
 c01faa8:	b510      	push	{r4, lr}
 c01faaa:	b088      	sub	sp, #32
    CCM_VALIDATE_RET( iv != NULL );
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );
    return( ccm_auth_crypt( ctx, CCM_ENCRYPT, length, iv, iv_len,
 c01faac:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 c01faae:	9406      	str	r4, [sp, #24]
 c01fab0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 c01fab2:	9405      	str	r4, [sp, #20]
 c01fab4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 c01fab6:	9404      	str	r4, [sp, #16]
 c01fab8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 c01faba:	9403      	str	r4, [sp, #12]
 c01fabc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 c01fabe:	9402      	str	r4, [sp, #8]
 c01fac0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 c01fac2:	e9cd 3400 	strd	r3, r4, [sp]
 c01fac6:	4613      	mov	r3, r2
 c01fac8:	460a      	mov	r2, r1
 c01faca:	2100      	movs	r1, #0
 c01facc:	f7ff fe40 	bl	c01f750 <ccm_auth_crypt>
                            add, add_len, input, output, tag, tag_len ) );
}
 c01fad0:	b008      	add	sp, #32
 c01fad2:	bd10      	pop	{r4, pc}

0c01fad4 <mbedtls_ccm_encrypt_and_tag>:
int mbedtls_ccm_encrypt_and_tag( mbedtls_ccm_context *ctx, size_t length,
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *add, size_t add_len,
                         const unsigned char *input, unsigned char *output,
                         unsigned char *tag, size_t tag_len )
{
 c01fad4:	b410      	push	{r4}
 c01fad6:	9c06      	ldr	r4, [sp, #24]
    CCM_VALIDATE_RET( iv != NULL );
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );
    if( tag_len == 0 )
 c01fad8:	b11c      	cbz	r4, c01fae2 <mbedtls_ccm_encrypt_and_tag+0xe>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    return( mbedtls_ccm_star_encrypt_and_tag( ctx, length, iv, iv_len, add,
                add_len, input, output, tag, tag_len ) );
}
 c01fada:	f85d 4b04 	ldr.w	r4, [sp], #4
    return( mbedtls_ccm_star_encrypt_and_tag( ctx, length, iv, iv_len, add,
 c01fade:	f7ff bfe3 	b.w	c01faa8 <mbedtls_ccm_star_encrypt_and_tag>
}
 c01fae2:	f06f 000c 	mvn.w	r0, #12
 c01fae6:	f85d 4b04 	ldr.w	r4, [sp], #4
 c01faea:	4770      	bx	lr

0c01faec <mbedtls_ccm_star_auth_decrypt>:
int mbedtls_ccm_star_auth_decrypt( mbedtls_ccm_context *ctx, size_t length,
                      const unsigned char *iv, size_t iv_len,
                      const unsigned char *add, size_t add_len,
                      const unsigned char *input, unsigned char *output,
                      const unsigned char *tag, size_t tag_len )
{
 c01faec:	b5f0      	push	{r4, r5, r6, r7, lr}
 c01faee:	460e      	mov	r6, r1
 c01faf0:	b08d      	sub	sp, #52	; 0x34
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );

    if( ( ret = ccm_auth_crypt( ctx, CCM_DECRYPT, length,
 c01faf2:	a908      	add	r1, sp, #32
{
 c01faf4:	e9dd 5415 	ldrd	r5, r4, [sp, #84]	; 0x54
    if( ( ret = ccm_auth_crypt( ctx, CCM_DECRYPT, length,
 c01faf8:	e9cd 5104 	strd	r5, r1, [sp, #16]
 c01fafc:	9914      	ldr	r1, [sp, #80]	; 0x50
{
 c01fafe:	9f17      	ldr	r7, [sp, #92]	; 0x5c
    if( ( ret = ccm_auth_crypt( ctx, CCM_DECRYPT, length,
 c01fb00:	9103      	str	r1, [sp, #12]
 c01fb02:	9913      	ldr	r1, [sp, #76]	; 0x4c
 c01fb04:	9706      	str	r7, [sp, #24]
 c01fb06:	9102      	str	r1, [sp, #8]
 c01fb08:	9912      	ldr	r1, [sp, #72]	; 0x48
 c01fb0a:	e9cd 3100 	strd	r3, r1, [sp]
 c01fb0e:	4613      	mov	r3, r2
 c01fb10:	2101      	movs	r1, #1
 c01fb12:	4632      	mov	r2, r6
 c01fb14:	f7ff fe1c 	bl	c01f750 <ccm_auth_crypt>
 c01fb18:	b960      	cbnz	r0, c01fb34 <mbedtls_ccm_star_auth_decrypt+0x48>
 c01fb1a:	4603      	mov	r3, r0
 c01fb1c:	b2da      	uxtb	r2, r3
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 c01fb1e:	4297      	cmp	r7, r2
 c01fb20:	f103 0301 	add.w	r3, r3, #1
 c01fb24:	d808      	bhi.n	c01fb38 <mbedtls_ccm_star_auth_decrypt+0x4c>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
 c01fb26:	b128      	cbz	r0, c01fb34 <mbedtls_ccm_star_auth_decrypt+0x48>
    {
        mbedtls_platform_zeroize( output, length );
 c01fb28:	4628      	mov	r0, r5
 c01fb2a:	4631      	mov	r1, r6
 c01fb2c:	f006 fdfc 	bl	c026728 <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_CCM_AUTH_FAILED );
 c01fb30:	f06f 000e 	mvn.w	r0, #14
    }

    return( 0 );
}
 c01fb34:	b00d      	add	sp, #52	; 0x34
 c01fb36:	bdf0      	pop	{r4, r5, r6, r7, pc}
        diff |= tag[i] ^ check_tag[i];
 c01fb38:	a90c      	add	r1, sp, #48	; 0x30
 c01fb3a:	4411      	add	r1, r2
 c01fb3c:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 c01fb40:	5ca2      	ldrb	r2, [r4, r2]
 c01fb42:	404a      	eors	r2, r1
 c01fb44:	4310      	orrs	r0, r2
 c01fb46:	e7e9      	b.n	c01fb1c <mbedtls_ccm_star_auth_decrypt+0x30>

0c01fb48 <mbedtls_ccm_auth_decrypt>:
int mbedtls_ccm_auth_decrypt( mbedtls_ccm_context *ctx, size_t length,
                      const unsigned char *iv, size_t iv_len,
                      const unsigned char *add, size_t add_len,
                      const unsigned char *input, unsigned char *output,
                      const unsigned char *tag, size_t tag_len )
{
 c01fb48:	b410      	push	{r4}
 c01fb4a:	9c06      	ldr	r4, [sp, #24]
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );

    if( tag_len == 0 )
 c01fb4c:	b11c      	cbz	r4, c01fb56 <mbedtls_ccm_auth_decrypt+0xe>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    return( mbedtls_ccm_star_auth_decrypt( ctx, length, iv, iv_len, add,
                add_len, input, output, tag, tag_len ) );
}
 c01fb4e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return( mbedtls_ccm_star_auth_decrypt( ctx, length, iv, iv_len, add,
 c01fb52:	f7ff bfcb 	b.w	c01faec <mbedtls_ccm_star_auth_decrypt>
}
 c01fb56:	f06f 000c 	mvn.w	r0, #12
 c01fb5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 c01fb5e:	4770      	bx	lr

0c01fb60 <add_pkcs_padding>:
/*
 * PKCS7 (and PKCS5) padding: fill with ll bytes, with ll = padding_len
 */
static void add_pkcs_padding( unsigned char *output, size_t output_len,
        size_t data_len )
{
 c01fb60:	b510      	push	{r4, lr}
    size_t padding_len = output_len - data_len;
    unsigned char i;

    for( i = 0; i < padding_len; i++ )
 c01fb62:	2400      	movs	r4, #0
    size_t padding_len = output_len - data_len;
 c01fb64:	1a89      	subs	r1, r1, r2
 c01fb66:	b2e3      	uxtb	r3, r4
    for( i = 0; i < padding_len; i++ )
 c01fb68:	4299      	cmp	r1, r3
 c01fb6a:	f104 0401 	add.w	r4, r4, #1
 c01fb6e:	d800      	bhi.n	c01fb72 <add_pkcs_padding+0x12>
        output[data_len + i] = (unsigned char) padding_len;
}
 c01fb70:	bd10      	pop	{r4, pc}
        output[data_len + i] = (unsigned char) padding_len;
 c01fb72:	4403      	add	r3, r0
 c01fb74:	5499      	strb	r1, [r3, r2]
 c01fb76:	e7f6      	b.n	c01fb66 <add_pkcs_padding+0x6>

0c01fb78 <get_pkcs_padding>:

static int get_pkcs_padding( unsigned char *input, size_t input_len,
        size_t *data_len )
{
 c01fb78:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
 c01fb7a:	b300      	cbz	r0, c01fbbe <get_pkcs_padding+0x46>
 c01fb7c:	b1fa      	cbz	r2, c01fbbe <get_pkcs_padding+0x46>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
 c01fb7e:	1843      	adds	r3, r0, r1
 c01fb80:	f813 5c01 	ldrb.w	r5, [r3, #-1]
    *data_len = input_len - padding_len;

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 c01fb84:	fab5 f385 	clz	r3, r5
    *data_len = input_len - padding_len;
 c01fb88:	1b4e      	subs	r6, r1, r5
    bad |= padding_len == 0;
 c01fb8a:	095b      	lsrs	r3, r3, #5
    *data_len = input_len - padding_len;
 c01fb8c:	6016      	str	r6, [r2, #0]
    bad |= padding_len == 0;
 c01fb8e:	428d      	cmp	r5, r1
 c01fb90:	bf88      	it	hi
 c01fb92:	f043 0301 	orrhi.w	r3, r3, #1

    /* The number of bytes checked must be independent of padding_len,
     * so pick input_len, which is usually 8 or 16 (one block) */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len; i++ )
 c01fb96:	2200      	movs	r2, #0
 c01fb98:	428a      	cmp	r2, r1
 c01fb9a:	d104      	bne.n	c01fba6 <get_pkcs_padding+0x2e>
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 c01fb9c:	2b00      	cmp	r3, #0
 c01fb9e:	4809      	ldr	r0, [pc, #36]	; (c01fbc4 <get_pkcs_padding+0x4c>)
 c01fba0:	bf08      	it	eq
 c01fba2:	2000      	moveq	r0, #0
}
 c01fba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );
 c01fba6:	4296      	cmp	r6, r2
 c01fba8:	bf8c      	ite	hi
 c01fbaa:	2700      	movhi	r7, #0
 c01fbac:	2701      	movls	r7, #1
 c01fbae:	5c84      	ldrb	r4, [r0, r2]
    for( i = 0; i < input_len; i++ )
 c01fbb0:	3201      	adds	r2, #1
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );
 c01fbb2:	406c      	eors	r4, r5
 c01fbb4:	fb14 f407 	smulbb	r4, r4, r7
 c01fbb8:	4323      	orrs	r3, r4
 c01fbba:	b2db      	uxtb	r3, r3
 c01fbbc:	e7ec      	b.n	c01fb98 <get_pkcs_padding+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c01fbbe:	4802      	ldr	r0, [pc, #8]	; (c01fbc8 <get_pkcs_padding+0x50>)
 c01fbc0:	e7f0      	b.n	c01fba4 <get_pkcs_padding+0x2c>
 c01fbc2:	bf00      	nop
 c01fbc4:	ffff9e00 	.word	0xffff9e00
 c01fbc8:	ffff9f00 	.word	0xffff9f00

0c01fbcc <add_one_and_zeros_padding>:
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
 c01fbcc:	2380      	movs	r3, #128	; 0x80
{
 c01fbce:	b530      	push	{r4, r5, lr}
    output[data_len] = 0x80;
 c01fbd0:	5483      	strb	r3, [r0, r2]
    for( i = 1; i < padding_len; i++ )
        output[data_len + i] = 0x00;
 c01fbd2:	2400      	movs	r4, #0
    for( i = 1; i < padding_len; i++ )
 c01fbd4:	2301      	movs	r3, #1
    size_t padding_len = output_len - data_len;
 c01fbd6:	1a89      	subs	r1, r1, r2
    for( i = 1; i < padding_len; i++ )
 c01fbd8:	428b      	cmp	r3, r1
 c01fbda:	d300      	bcc.n	c01fbde <add_one_and_zeros_padding+0x12>
}
 c01fbdc:	bd30      	pop	{r4, r5, pc}
        output[data_len + i] = 0x00;
 c01fbde:	18c5      	adds	r5, r0, r3
    for( i = 1; i < padding_len; i++ )
 c01fbe0:	3301      	adds	r3, #1
        output[data_len + i] = 0x00;
 c01fbe2:	54ac      	strb	r4, [r5, r2]
    for( i = 1; i < padding_len; i++ )
 c01fbe4:	b2db      	uxtb	r3, r3
 c01fbe6:	e7f7      	b.n	c01fbd8 <add_one_and_zeros_padding+0xc>

0c01fbe8 <add_zeros_and_len_padding>:
/*
 * Zeros and len padding: fill with 00 ... 00 ll, where ll is padding length
 */
static void add_zeros_and_len_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
 c01fbe8:	b570      	push	{r4, r5, r6, lr}
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 c01fbea:	2301      	movs	r3, #1
        output[data_len + i - 1] = 0x00;
 c01fbec:	2600      	movs	r6, #0
    size_t padding_len = output_len - data_len;
 c01fbee:	1a8d      	subs	r5, r1, r2
    for( i = 1; i < padding_len; i++ )
 c01fbf0:	42ab      	cmp	r3, r5
 c01fbf2:	d303      	bcc.n	c01fbfc <add_zeros_and_len_padding+0x14>
    output[output_len - 1] = (unsigned char) padding_len;
 c01fbf4:	4408      	add	r0, r1
 c01fbf6:	f800 5c01 	strb.w	r5, [r0, #-1]
}
 c01fbfa:	bd70      	pop	{r4, r5, r6, pc}
        output[data_len + i - 1] = 0x00;
 c01fbfc:	18c4      	adds	r4, r0, r3
 c01fbfe:	4414      	add	r4, r2
    for( i = 1; i < padding_len; i++ )
 c01fc00:	3301      	adds	r3, #1
        output[data_len + i - 1] = 0x00;
 c01fc02:	f804 6c01 	strb.w	r6, [r4, #-1]
    for( i = 1; i < padding_len; i++ )
 c01fc06:	b2db      	uxtb	r3, r3
 c01fc08:	e7f2      	b.n	c01fbf0 <add_zeros_and_len_padding+0x8>
	...

0c01fc0c <get_zeros_and_len_padding>:

static int get_zeros_and_len_padding( unsigned char *input, size_t input_len,
                                      size_t *data_len )
{
 c01fc0c:	b570      	push	{r4, r5, r6, lr}
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
 c01fc0e:	b1f8      	cbz	r0, c01fc50 <get_zeros_and_len_padding+0x44>
 c01fc10:	b1f2      	cbz	r2, c01fc50 <get_zeros_and_len_padding+0x44>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
 c01fc12:	1e4d      	subs	r5, r1, #1
 c01fc14:	5d44      	ldrb	r4, [r0, r5]
    *data_len = input_len - padding_len;

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 c01fc16:	fab4 f384 	clz	r3, r4
 c01fc1a:	095b      	lsrs	r3, r3, #5
    *data_len = input_len - padding_len;
 c01fc1c:	1b0e      	subs	r6, r1, r4
    bad |= padding_len == 0;
 c01fc1e:	428c      	cmp	r4, r1
 c01fc20:	bf94      	ite	ls
 c01fc22:	4619      	movls	r1, r3
 c01fc24:	f043 0101 	orrhi.w	r1, r3, #1

    /* The number of bytes checked must be independent of padding_len */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len - 1; i++ )
 c01fc28:	2300      	movs	r3, #0
    *data_len = input_len - padding_len;
 c01fc2a:	6016      	str	r6, [r2, #0]
    for( i = 0; i < input_len - 1; i++ )
 c01fc2c:	429d      	cmp	r5, r3
 c01fc2e:	d804      	bhi.n	c01fc3a <get_zeros_and_len_padding+0x2e>
        bad |= input[i] * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 c01fc30:	2900      	cmp	r1, #0
 c01fc32:	4808      	ldr	r0, [pc, #32]	; (c01fc54 <get_zeros_and_len_padding+0x48>)
 c01fc34:	bf08      	it	eq
 c01fc36:	2000      	moveq	r0, #0
}
 c01fc38:	bd70      	pop	{r4, r5, r6, pc}
        bad |= input[i] * ( i >= pad_idx );
 c01fc3a:	429e      	cmp	r6, r3
 c01fc3c:	bf8c      	ite	hi
 c01fc3e:	2400      	movhi	r4, #0
 c01fc40:	2401      	movls	r4, #1
 c01fc42:	5cc2      	ldrb	r2, [r0, r3]
    for( i = 0; i < input_len - 1; i++ )
 c01fc44:	3301      	adds	r3, #1
        bad |= input[i] * ( i >= pad_idx );
 c01fc46:	fb12 f204 	smulbb	r2, r2, r4
 c01fc4a:	4311      	orrs	r1, r2
 c01fc4c:	b2c9      	uxtb	r1, r1
 c01fc4e:	e7ed      	b.n	c01fc2c <get_zeros_and_len_padding+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c01fc50:	4801      	ldr	r0, [pc, #4]	; (c01fc58 <get_zeros_and_len_padding+0x4c>)
 c01fc52:	e7f1      	b.n	c01fc38 <get_zeros_and_len_padding+0x2c>
 c01fc54:	ffff9e00 	.word	0xffff9e00
 c01fc58:	ffff9f00 	.word	0xffff9f00

0c01fc5c <add_zeros_padding>:
/*
 * Zero padding: fill with 00 ... 00
 */
static void add_zeros_padding( unsigned char *output,
                               size_t output_len, size_t data_len )
{
 c01fc5c:	b510      	push	{r4, lr}
    size_t i;

    for( i = data_len; i < output_len; i++ )
        output[i] = 0x00;
 c01fc5e:	2400      	movs	r4, #0
 c01fc60:	4402      	add	r2, r0
    for( i = data_len; i < output_len; i++ )
 c01fc62:	1a13      	subs	r3, r2, r0
 c01fc64:	4299      	cmp	r1, r3
 c01fc66:	d800      	bhi.n	c01fc6a <add_zeros_padding+0xe>
}
 c01fc68:	bd10      	pop	{r4, pc}
        output[i] = 0x00;
 c01fc6a:	f802 4b01 	strb.w	r4, [r2], #1
 c01fc6e:	e7f8      	b.n	c01fc62 <add_zeros_padding+0x6>

0c01fc70 <get_no_padding>:
 * but a trivial get_padding function
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
    if( NULL == input || NULL == data_len )
 c01fc70:	b118      	cbz	r0, c01fc7a <get_no_padding+0xa>
 c01fc72:	b112      	cbz	r2, c01fc7a <get_no_padding+0xa>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *data_len = input_len;
 c01fc74:	6011      	str	r1, [r2, #0]

    return( 0 );
 c01fc76:	2000      	movs	r0, #0
 c01fc78:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c01fc7a:	4801      	ldr	r0, [pc, #4]	; (c01fc80 <get_no_padding+0x10>)
}
 c01fc7c:	4770      	bx	lr
 c01fc7e:	bf00      	nop
 c01fc80:	ffff9f00 	.word	0xffff9f00

0c01fc84 <get_one_and_zeros_padding>:
{
 c01fc84:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( NULL == input || NULL == data_len )
 c01fc86:	b1f8      	cbz	r0, c01fcc8 <get_one_and_zeros_padding+0x44>
 c01fc88:	b1f2      	cbz	r2, c01fcc8 <get_one_and_zeros_padding+0x44>
    *data_len = 0;
 c01fc8a:	2300      	movs	r3, #0
    bad = 0x80;
 c01fc8c:	2480      	movs	r4, #128	; 0x80
    *data_len = 0;
 c01fc8e:	6013      	str	r3, [r2, #0]
 c01fc90:	4408      	add	r0, r1
    for( i = input_len; i > 0; i-- )
 c01fc92:	b921      	cbnz	r1, c01fc9e <get_one_and_zeros_padding+0x1a>
    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 c01fc94:	2c00      	cmp	r4, #0
 c01fc96:	480d      	ldr	r0, [pc, #52]	; (c01fccc <get_one_and_zeros_padding+0x48>)
 c01fc98:	bf08      	it	eq
 c01fc9a:	2000      	moveq	r0, #0
}
 c01fc9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        done |= ( input[i - 1] != 0 );
 c01fc9e:	f810 5d01 	ldrb.w	r5, [r0, #-1]!
 c01fca2:	3901      	subs	r1, #1
 c01fca4:	2d00      	cmp	r5, #0
 c01fca6:	bf0c      	ite	eq
 c01fca8:	461d      	moveq	r5, r3
 c01fcaa:	f043 0501 	orrne.w	r5, r3, #1
 c01fcae:	406b      	eors	r3, r5
        *data_len |= ( i - 1 ) * ( done != prev_done );
 c01fcb0:	fb01 f703 	mul.w	r7, r1, r3
 c01fcb4:	6816      	ldr	r6, [r2, #0]
 c01fcb6:	433e      	orrs	r6, r7
 c01fcb8:	6016      	str	r6, [r2, #0]
        bad ^= input[i - 1] * ( done != prev_done );
 c01fcba:	7806      	ldrb	r6, [r0, #0]
 c01fcbc:	fb16 f303 	smulbb	r3, r6, r3
 c01fcc0:	405c      	eors	r4, r3
 c01fcc2:	b2e4      	uxtb	r4, r4
        done |= ( input[i - 1] != 0 );
 c01fcc4:	462b      	mov	r3, r5
 c01fcc6:	e7e4      	b.n	c01fc92 <get_one_and_zeros_padding+0xe>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c01fcc8:	4801      	ldr	r0, [pc, #4]	; (c01fcd0 <get_one_and_zeros_padding+0x4c>)
 c01fcca:	e7e7      	b.n	c01fc9c <get_one_and_zeros_padding+0x18>
 c01fccc:	ffff9e00 	.word	0xffff9e00
 c01fcd0:	ffff9f00 	.word	0xffff9f00

0c01fcd4 <get_zeros_padding>:
{
 c01fcd4:	b530      	push	{r4, r5, lr}
    if( NULL == input || NULL == data_len )
 c01fcd6:	b1b8      	cbz	r0, c01fd08 <get_zeros_padding+0x34>
 c01fcd8:	b1b2      	cbz	r2, c01fd08 <get_zeros_padding+0x34>
    *data_len = 0;
 c01fcda:	2300      	movs	r3, #0
 c01fcdc:	4401      	add	r1, r0
 c01fcde:	6013      	str	r3, [r2, #0]
    for( i = input_len; i > 0; i-- )
 c01fce0:	4281      	cmp	r1, r0
 c01fce2:	eba1 0500 	sub.w	r5, r1, r0
 c01fce6:	d101      	bne.n	c01fcec <get_zeros_padding+0x18>
 c01fce8:	2000      	movs	r0, #0
}
 c01fcea:	bd30      	pop	{r4, r5, pc}
        done |= ( input[i-1] != 0 );
 c01fcec:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
 c01fcf0:	2c00      	cmp	r4, #0
 c01fcf2:	bf0c      	ite	eq
 c01fcf4:	461c      	moveq	r4, r3
 c01fcf6:	f043 0401 	orrne.w	r4, r3, #1
        *data_len |= i * ( done != prev_done );
 c01fcfa:	4063      	eors	r3, r4
 c01fcfc:	436b      	muls	r3, r5
 c01fcfe:	6815      	ldr	r5, [r2, #0]
 c01fd00:	432b      	orrs	r3, r5
 c01fd02:	6013      	str	r3, [r2, #0]
        done |= ( input[i-1] != 0 );
 c01fd04:	4623      	mov	r3, r4
 c01fd06:	e7eb      	b.n	c01fce0 <get_zeros_padding+0xc>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c01fd08:	4800      	ldr	r0, [pc, #0]	; (c01fd0c <get_zeros_padding+0x38>)
 c01fd0a:	e7ee      	b.n	c01fcea <get_zeros_padding+0x16>
 c01fd0c:	ffff9f00 	.word	0xffff9f00

0c01fd10 <mbedtls_cipher_info_from_type>:
{
 c01fd10:	4b05      	ldr	r3, [pc, #20]	; (c01fd28 <mbedtls_cipher_info_from_type+0x18>)
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 c01fd12:	f853 2c04 	ldr.w	r2, [r3, #-4]
 c01fd16:	b122      	cbz	r2, c01fd22 <mbedtls_cipher_info_from_type+0x12>
 c01fd18:	3308      	adds	r3, #8
        if( def->type == cipher_type )
 c01fd1a:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 c01fd1e:	4281      	cmp	r1, r0
 c01fd20:	d1f7      	bne.n	c01fd12 <mbedtls_cipher_info_from_type+0x2>
}
 c01fd22:	4610      	mov	r0, r2
 c01fd24:	4770      	bx	lr
 c01fd26:	bf00      	nop
 c01fd28:	0c033380 	.word	0x0c033380

0c01fd2c <mbedtls_cipher_info_from_values>:
{
 c01fd2c:	b530      	push	{r4, r5, lr}
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 c01fd2e:	4c08      	ldr	r4, [pc, #32]	; (c01fd50 <mbedtls_cipher_info_from_values+0x24>)
 c01fd30:	6863      	ldr	r3, [r4, #4]
 c01fd32:	b90b      	cbnz	r3, c01fd38 <mbedtls_cipher_info_from_values+0xc>
}
 c01fd34:	4618      	mov	r0, r3
 c01fd36:	bd30      	pop	{r4, r5, pc}
        if( def->info->base->cipher == cipher_id &&
 c01fd38:	699d      	ldr	r5, [r3, #24]
 c01fd3a:	782d      	ldrb	r5, [r5, #0]
 c01fd3c:	4285      	cmp	r5, r0
 c01fd3e:	d105      	bne.n	c01fd4c <mbedtls_cipher_info_from_values+0x20>
 c01fd40:	685d      	ldr	r5, [r3, #4]
 c01fd42:	428d      	cmp	r5, r1
 c01fd44:	d102      	bne.n	c01fd4c <mbedtls_cipher_info_from_values+0x20>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 c01fd46:	785d      	ldrb	r5, [r3, #1]
 c01fd48:	4295      	cmp	r5, r2
 c01fd4a:	d0f3      	beq.n	c01fd34 <mbedtls_cipher_info_from_values+0x8>
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 c01fd4c:	3408      	adds	r4, #8
 c01fd4e:	e7ef      	b.n	c01fd30 <mbedtls_cipher_info_from_values+0x4>
 c01fd50:	0c033378 	.word	0x0c033378

0c01fd54 <mbedtls_cipher_init>:
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 c01fd54:	2244      	movs	r2, #68	; 0x44
 c01fd56:	2100      	movs	r1, #0
 c01fd58:	f7f4 be35 	b.w	c0149c6 <memset>

0c01fd5c <mbedtls_cipher_free>:
{
 c01fd5c:	b510      	push	{r4, lr}
    if( ctx == NULL )
 c01fd5e:	4604      	mov	r4, r0
 c01fd60:	b198      	cbz	r0, c01fd8a <mbedtls_cipher_free+0x2e>
    if( ctx->cmac_ctx )
 c01fd62:	6c00      	ldr	r0, [r0, #64]	; 0x40
 c01fd64:	b128      	cbz	r0, c01fd72 <mbedtls_cipher_free+0x16>
       mbedtls_platform_zeroize( ctx->cmac_ctx,
 c01fd66:	2124      	movs	r1, #36	; 0x24
 c01fd68:	f006 fcde 	bl	c026728 <mbedtls_platform_zeroize>
       mbedtls_free( ctx->cmac_ctx );
 c01fd6c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 c01fd6e:	f006 fccb 	bl	c026708 <mbedtls_free>
    if( ctx->cipher_ctx )
 c01fd72:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 c01fd74:	b118      	cbz	r0, c01fd7e <mbedtls_cipher_free+0x22>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 c01fd76:	6823      	ldr	r3, [r4, #0]
 c01fd78:	699b      	ldr	r3, [r3, #24]
 c01fd7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c01fd7c:	4798      	blx	r3
    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
 c01fd7e:	4620      	mov	r0, r4
}
 c01fd80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
 c01fd84:	2144      	movs	r1, #68	; 0x44
 c01fd86:	f006 bccf 	b.w	c026728 <mbedtls_platform_zeroize>
}
 c01fd8a:	bd10      	pop	{r4, pc}

0c01fd8c <mbedtls_cipher_setkey>:
{
 c01fd8c:	b430      	push	{r4, r5}
    if( ctx->cipher_info == NULL )
 c01fd8e:	6804      	ldr	r4, [r0, #0]
 c01fd90:	b1b4      	cbz	r4, c01fdc0 <mbedtls_cipher_setkey+0x34>
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 c01fd92:	6925      	ldr	r5, [r4, #16]
 c01fd94:	07ad      	lsls	r5, r5, #30
 c01fd96:	d402      	bmi.n	c01fd9e <mbedtls_cipher_setkey+0x12>
 c01fd98:	6865      	ldr	r5, [r4, #4]
 c01fd9a:	4295      	cmp	r5, r2
 c01fd9c:	d110      	bne.n	c01fdc0 <mbedtls_cipher_setkey+0x34>
    if( MBEDTLS_ENCRYPT == operation ||
 c01fd9e:	2b01      	cmp	r3, #1
    ctx->key_bitlen = key_bitlen;
 c01fda0:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
 c01fda2:	7203      	strb	r3, [r0, #8]
    if( MBEDTLS_ENCRYPT == operation ||
 c01fda4:	d003      	beq.n	c01fdae <mbedtls_cipher_setkey+0x22>
 c01fda6:	7865      	ldrb	r5, [r4, #1]
 c01fda8:	3d03      	subs	r5, #3
 c01fdaa:	2d02      	cmp	r5, #2
 c01fdac:	d804      	bhi.n	c01fdb8 <mbedtls_cipher_setkey+0x2c>
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 c01fdae:	69a3      	ldr	r3, [r4, #24]
 c01fdb0:	699b      	ldr	r3, [r3, #24]
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 c01fdb2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 c01fdb4:	bc30      	pop	{r4, r5}
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 c01fdb6:	4718      	bx	r3
    if( MBEDTLS_DECRYPT == operation )
 c01fdb8:	b913      	cbnz	r3, c01fdc0 <mbedtls_cipher_setkey+0x34>
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 c01fdba:	69a3      	ldr	r3, [r4, #24]
 c01fdbc:	69db      	ldr	r3, [r3, #28]
 c01fdbe:	e7f8      	b.n	c01fdb2 <mbedtls_cipher_setkey+0x26>
}
 c01fdc0:	4801      	ldr	r0, [pc, #4]	; (c01fdc8 <mbedtls_cipher_setkey+0x3c>)
 c01fdc2:	bc30      	pop	{r4, r5}
 c01fdc4:	4770      	bx	lr
 c01fdc6:	bf00      	nop
 c01fdc8:	ffff9f00 	.word	0xffff9f00

0c01fdcc <mbedtls_cipher_set_iv>:
{
 c01fdcc:	b538      	push	{r3, r4, r5, lr}
    if( ctx->cipher_info == NULL )
 c01fdce:	6803      	ldr	r3, [r0, #0]
{
 c01fdd0:	4605      	mov	r5, r0
 c01fdd2:	4614      	mov	r4, r2
    if( ctx->cipher_info == NULL )
 c01fdd4:	b19b      	cbz	r3, c01fdfe <mbedtls_cipher_set_iv+0x32>
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
 c01fdd6:	2a10      	cmp	r2, #16
 c01fdd8:	d80f      	bhi.n	c01fdfa <mbedtls_cipher_set_iv+0x2e>
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )
 c01fdda:	691a      	ldr	r2, [r3, #16]
 c01fddc:	07d2      	lsls	r2, r2, #31
 c01fdde:	d403      	bmi.n	c01fde8 <mbedtls_cipher_set_iv+0x1c>
        actual_iv_size = ctx->cipher_info->iv_size;
 c01fde0:	68db      	ldr	r3, [r3, #12]
        if( actual_iv_size > iv_len )
 c01fde2:	429c      	cmp	r4, r3
 c01fde4:	d30b      	bcc.n	c01fdfe <mbedtls_cipher_set_iv+0x32>
 c01fde6:	461c      	mov	r4, r3
    if ( actual_iv_size != 0 )
 c01fde8:	b15c      	cbz	r4, c01fe02 <mbedtls_cipher_set_iv+0x36>
        memcpy( ctx->iv, iv, actual_iv_size );
 c01fdea:	4622      	mov	r2, r4
 c01fdec:	f105 0028 	add.w	r0, r5, #40	; 0x28
 c01fdf0:	f7f4 fdc5 	bl	c01497e <memcpy>
    return( 0 );
 c01fdf4:	2000      	movs	r0, #0
        ctx->iv_size = actual_iv_size;
 c01fdf6:	63ac      	str	r4, [r5, #56]	; 0x38
}
 c01fdf8:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 c01fdfa:	4803      	ldr	r0, [pc, #12]	; (c01fe08 <mbedtls_cipher_set_iv+0x3c>)
 c01fdfc:	e7fc      	b.n	c01fdf8 <mbedtls_cipher_set_iv+0x2c>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c01fdfe:	4803      	ldr	r0, [pc, #12]	; (c01fe0c <mbedtls_cipher_set_iv+0x40>)
 c01fe00:	e7fa      	b.n	c01fdf8 <mbedtls_cipher_set_iv+0x2c>
    return( 0 );
 c01fe02:	4620      	mov	r0, r4
 c01fe04:	e7f8      	b.n	c01fdf8 <mbedtls_cipher_set_iv+0x2c>
 c01fe06:	bf00      	nop
 c01fe08:	ffff9f80 	.word	0xffff9f80
 c01fe0c:	ffff9f00 	.word	0xffff9f00

0c01fe10 <mbedtls_cipher_reset>:
    if( ctx->cipher_info == NULL )
 c01fe10:	6803      	ldr	r3, [r0, #0]
 c01fe12:	b11b      	cbz	r3, c01fe1c <mbedtls_cipher_reset+0xc>
    ctx->unprocessed_len = 0;
 c01fe14:	2300      	movs	r3, #0
 c01fe16:	6243      	str	r3, [r0, #36]	; 0x24
    return( 0 );
 c01fe18:	4618      	mov	r0, r3
 c01fe1a:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c01fe1c:	4800      	ldr	r0, [pc, #0]	; (c01fe20 <mbedtls_cipher_reset+0x10>)
}
 c01fe1e:	4770      	bx	lr
 c01fe20:	ffff9f00 	.word	0xffff9f00

0c01fe24 <mbedtls_cipher_update>:
{
 c01fe24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c01fe28:	4615      	mov	r5, r2
    if( ctx->cipher_info == NULL )
 c01fe2a:	6802      	ldr	r2, [r0, #0]
{
 c01fe2c:	b085      	sub	sp, #20
 c01fe2e:	4604      	mov	r4, r0
 c01fe30:	460f      	mov	r7, r1
 c01fe32:	4699      	mov	r9, r3
 c01fe34:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if( ctx->cipher_info == NULL )
 c01fe38:	b91a      	cbnz	r2, c01fe42 <mbedtls_cipher_update+0x1e>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c01fe3a:	486f      	ldr	r0, [pc, #444]	; (c01fff8 <mbedtls_cipher_update+0x1d4>)
}
 c01fe3c:	b005      	add	sp, #20
 c01fe3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *olen = 0;
 c01fe42:	2100      	movs	r1, #0
 c01fe44:	f8c8 1000 	str.w	r1, [r8]
    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 c01fe48:	7851      	ldrb	r1, [r2, #1]
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->cipher_info == NULL )
        return 0;

    return ctx->cipher_info->block_size;
 c01fe4a:	6956      	ldr	r6, [r2, #20]
 c01fe4c:	2901      	cmp	r1, #1
 c01fe4e:	d10f      	bne.n	c01fe70 <mbedtls_cipher_update+0x4c>
        if( ilen != block_size )
 c01fe50:	42b5      	cmp	r5, r6
 c01fe52:	f040 80ca 	bne.w	c01ffea <mbedtls_cipher_update+0x1c6>
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 c01fe56:	6992      	ldr	r2, [r2, #24]
        *olen = ilen;
 c01fe58:	f8c8 5000 	str.w	r5, [r8]
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 c01fe5c:	6855      	ldr	r5, [r2, #4]
 c01fe5e:	463a      	mov	r2, r7
 c01fe60:	46ac      	mov	ip, r5
 c01fe62:	f990 1008 	ldrsb.w	r1, [r0, #8]
 c01fe66:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 c01fe68:	b005      	add	sp, #20
 c01fe6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 c01fe6e:	4760      	bx	ip
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
 c01fe70:	2906      	cmp	r1, #6
 c01fe72:	d109      	bne.n	c01fe88 <mbedtls_cipher_update+0x64>
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 c01fe74:	463a      	mov	r2, r7
 c01fe76:	4629      	mov	r1, r5
 c01fe78:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
        *olen = ilen;
 c01fe7a:	f8c8 5000 	str.w	r5, [r8]
}
 c01fe7e:	b005      	add	sp, #20
 c01fe80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 c01fe84:	f003 bfd4 	b.w	c023e30 <mbedtls_gcm_update>
    if ( 0 == block_size )
 c01fe88:	2e00      	cmp	r6, #0
 c01fe8a:	f000 80b0 	beq.w	c01ffee <mbedtls_cipher_update+0x1ca>
    if( input == output &&
 c01fe8e:	429f      	cmp	r7, r3
 c01fe90:	d108      	bne.n	c01fea4 <mbedtls_cipher_update+0x80>
 c01fe92:	6a43      	ldr	r3, [r0, #36]	; 0x24
 c01fe94:	2b00      	cmp	r3, #0
 c01fe96:	d1d0      	bne.n	c01fe3a <mbedtls_cipher_update+0x16>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 c01fe98:	fbb5 f3f6 	udiv	r3, r5, r6
 c01fe9c:	fb06 5313 	mls	r3, r6, r3, r5
 c01fea0:	2b00      	cmp	r3, #0
 c01fea2:	d1ca      	bne.n	c01fe3a <mbedtls_cipher_update+0x16>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CBC )
 c01fea4:	2902      	cmp	r1, #2
 c01fea6:	d16e      	bne.n	c01ff86 <mbedtls_cipher_update+0x162>
        if( ( ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 c01fea8:	f994 3008 	ldrsb.w	r3, [r4, #8]
 c01feac:	6a60      	ldr	r0, [r4, #36]	; 0x24
 c01feae:	b97b      	cbnz	r3, c01fed0 <mbedtls_cipher_update+0xac>
 c01feb0:	68e2      	ldr	r2, [r4, #12]
 c01feb2:	1a33      	subs	r3, r6, r0
 c01feb4:	b17a      	cbz	r2, c01fed6 <mbedtls_cipher_update+0xb2>
 c01feb6:	42ab      	cmp	r3, r5
 c01feb8:	d30f      	bcc.n	c01feda <mbedtls_cipher_update+0xb6>
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 c01feba:	3014      	adds	r0, #20
 c01febc:	462a      	mov	r2, r5
 c01febe:	4639      	mov	r1, r7
 c01fec0:	4420      	add	r0, r4
 c01fec2:	f7f4 fd5c 	bl	c01497e <memcpy>
            ctx->unprocessed_len += ilen;
 c01fec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c01fec8:	441d      	add	r5, r3
 c01feca:	6265      	str	r5, [r4, #36]	; 0x24
        return( 0 );
 c01fecc:	2000      	movs	r0, #0
 c01fece:	e7b5      	b.n	c01fe3c <mbedtls_cipher_update+0x18>
                ilen < block_size - ctx->unprocessed_len ) ||
 c01fed0:	2b01      	cmp	r3, #1
 c01fed2:	d102      	bne.n	c01feda <mbedtls_cipher_update+0xb6>
                ilen < block_size - ctx->unprocessed_len ) )
 c01fed4:	1a33      	subs	r3, r6, r0
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 c01fed6:	42ab      	cmp	r3, r5
 c01fed8:	d8ef      	bhi.n	c01feba <mbedtls_cipher_update+0x96>
        if( 0 != ctx->unprocessed_len )
 c01feda:	b310      	cbz	r0, c01ff22 <mbedtls_cipher_update+0xfe>
            copy_len = block_size - ctx->unprocessed_len;
 c01fedc:	eba6 0a00 	sub.w	sl, r6, r0
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 c01fee0:	3014      	adds	r0, #20
 c01fee2:	4652      	mov	r2, sl
 c01fee4:	4639      	mov	r1, r7
 c01fee6:	4420      	add	r0, r4
 c01fee8:	f7f4 fd49 	bl	c01497e <memcpy>
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 c01feec:	4623      	mov	r3, r4
 c01feee:	f853 2b14 	ldr.w	r2, [r3], #20
 c01fef2:	f994 1008 	ldrsb.w	r1, [r4, #8]
 c01fef6:	6992      	ldr	r2, [r2, #24]
 c01fef8:	e9cd 3900 	strd	r3, r9, [sp]
 c01fefc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 c01fefe:	f8d2 b008 	ldr.w	fp, [r2, #8]
 c01ff02:	f104 0328 	add.w	r3, r4, #40	; 0x28
 c01ff06:	4632      	mov	r2, r6
 c01ff08:	47d8      	blx	fp
 c01ff0a:	2800      	cmp	r0, #0
 c01ff0c:	d196      	bne.n	c01fe3c <mbedtls_cipher_update+0x18>
            *olen += block_size;
 c01ff0e:	f8d8 3000 	ldr.w	r3, [r8]
            output += block_size;
 c01ff12:	44b1      	add	r9, r6
            *olen += block_size;
 c01ff14:	4433      	add	r3, r6
 c01ff16:	f8c8 3000 	str.w	r3, [r8]
            input += copy_len;
 c01ff1a:	4457      	add	r7, sl
            ctx->unprocessed_len = 0;
 c01ff1c:	6260      	str	r0, [r4, #36]	; 0x24
            ilen -= copy_len;
 c01ff1e:	eba5 050a 	sub.w	r5, r5, sl
        if( 0 != ilen )
 c01ff22:	2d00      	cmp	r5, #0
 c01ff24:	d0d2      	beq.n	c01fecc <mbedtls_cipher_update+0xa8>
            copy_len = ilen % block_size;
 c01ff26:	fbb5 faf6 	udiv	sl, r5, r6
 c01ff2a:	fb06 5a1a 	mls	sl, r6, sl, r5
            if( copy_len == 0 &&
 c01ff2e:	f1ba 0f00 	cmp.w	sl, #0
 c01ff32:	d106      	bne.n	c01ff42 <mbedtls_cipher_update+0x11e>
 c01ff34:	f994 3008 	ldrsb.w	r3, [r4, #8]
 c01ff38:	b91b      	cbnz	r3, c01ff42 <mbedtls_cipher_update+0x11e>
                ctx->operation == MBEDTLS_DECRYPT &&
 c01ff3a:	68e3      	ldr	r3, [r4, #12]
 c01ff3c:	2b00      	cmp	r3, #0
 c01ff3e:	bf18      	it	ne
 c01ff40:	46b2      	movne	sl, r6
            memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),
 c01ff42:	eba5 050a 	sub.w	r5, r5, sl
 c01ff46:	4652      	mov	r2, sl
 c01ff48:	1979      	adds	r1, r7, r5
 c01ff4a:	f104 0014 	add.w	r0, r4, #20
 c01ff4e:	f7f4 fd16 	bl	c01497e <memcpy>
            ctx->unprocessed_len += copy_len;
 c01ff52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c01ff54:	4453      	add	r3, sl
 c01ff56:	6263      	str	r3, [r4, #36]	; 0x24
        if( ilen )
 c01ff58:	2d00      	cmp	r5, #0
 c01ff5a:	d0b7      	beq.n	c01fecc <mbedtls_cipher_update+0xa8>
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 c01ff5c:	6823      	ldr	r3, [r4, #0]
 c01ff5e:	f994 1008 	ldrsb.w	r1, [r4, #8]
 c01ff62:	699b      	ldr	r3, [r3, #24]
 c01ff64:	e9cd 7900 	strd	r7, r9, [sp]
 c01ff68:	462a      	mov	r2, r5
 c01ff6a:	689e      	ldr	r6, [r3, #8]
 c01ff6c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 c01ff6e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 c01ff72:	47b0      	blx	r6
 c01ff74:	2800      	cmp	r0, #0
 c01ff76:	f47f af61 	bne.w	c01fe3c <mbedtls_cipher_update+0x18>
            *olen += ilen;
 c01ff7a:	f8d8 3000 	ldr.w	r3, [r8]
 c01ff7e:	441d      	add	r5, r3
        *olen = ilen;
 c01ff80:	f8c8 5000 	str.w	r5, [r8]
        return( 0 );
 c01ff84:	e75a      	b.n	c01fe3c <mbedtls_cipher_update+0x18>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CFB )
 c01ff86:	2903      	cmp	r1, #3
 c01ff88:	d110      	bne.n	c01ffac <mbedtls_cipher_update+0x188>
        if( 0 != ( ret = ctx->cipher_info->base->cfb_func( ctx->cipher_ctx,
 c01ff8a:	6993      	ldr	r3, [r2, #24]
 c01ff8c:	e9cd 7901 	strd	r7, r9, [sp, #4]
                ctx->operation, ilen, &ctx->unprocessed_len, ctx->iv,
 c01ff90:	f104 0228 	add.w	r2, r4, #40	; 0x28
        if( 0 != ( ret = ctx->cipher_info->base->cfb_func( ctx->cipher_ctx,
 c01ff94:	9200      	str	r2, [sp, #0]
 c01ff96:	68de      	ldr	r6, [r3, #12]
 c01ff98:	f994 1008 	ldrsb.w	r1, [r4, #8]
 c01ff9c:	f104 0324 	add.w	r3, r4, #36	; 0x24
 c01ffa0:	462a      	mov	r2, r5
 c01ffa2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 c01ffa4:	47b0      	blx	r6
        if( 0 != ( ret = ctx->cipher_info->base->ctr_func( ctx->cipher_ctx,
 c01ffa6:	2800      	cmp	r0, #0
 c01ffa8:	d0ea      	beq.n	c01ff80 <mbedtls_cipher_update+0x15c>
 c01ffaa:	e747      	b.n	c01fe3c <mbedtls_cipher_update+0x18>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_OFB )
 c01ffac:	2904      	cmp	r1, #4
 c01ffae:	d10b      	bne.n	c01ffc8 <mbedtls_cipher_update+0x1a4>
        if( 0 != ( ret = ctx->cipher_info->base->ofb_func( ctx->cipher_ctx,
 c01ffb0:	6993      	ldr	r3, [r2, #24]
 c01ffb2:	e9cd 7900 	strd	r7, r9, [sp]
 c01ffb6:	f104 0224 	add.w	r2, r4, #36	; 0x24
 c01ffba:	691e      	ldr	r6, [r3, #16]
 c01ffbc:	4629      	mov	r1, r5
 c01ffbe:	f104 0328 	add.w	r3, r4, #40	; 0x28
 c01ffc2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 c01ffc4:	47b0      	blx	r6
 c01ffc6:	e7ee      	b.n	c01ffa6 <mbedtls_cipher_update+0x182>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CTR )
 c01ffc8:	2905      	cmp	r1, #5
 c01ffca:	d112      	bne.n	c01fff2 <mbedtls_cipher_update+0x1ce>
        if( 0 != ( ret = ctx->cipher_info->base->ctr_func( ctx->cipher_ctx,
 c01ffcc:	6993      	ldr	r3, [r2, #24]
 c01ffce:	e9cd 7901 	strd	r7, r9, [sp, #4]
                ctx->unprocessed_data, input, output ) ) )
 c01ffd2:	f104 0214 	add.w	r2, r4, #20
        if( 0 != ( ret = ctx->cipher_info->base->ctr_func( ctx->cipher_ctx,
 c01ffd6:	9200      	str	r2, [sp, #0]
 c01ffd8:	695e      	ldr	r6, [r3, #20]
 c01ffda:	f104 0224 	add.w	r2, r4, #36	; 0x24
 c01ffde:	f104 0328 	add.w	r3, r4, #40	; 0x28
 c01ffe2:	4629      	mov	r1, r5
 c01ffe4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 c01ffe6:	47b0      	blx	r6
 c01ffe8:	e7dd      	b.n	c01ffa6 <mbedtls_cipher_update+0x182>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 c01ffea:	4804      	ldr	r0, [pc, #16]	; (c01fffc <mbedtls_cipher_update+0x1d8>)
 c01ffec:	e726      	b.n	c01fe3c <mbedtls_cipher_update+0x18>
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
 c01ffee:	4804      	ldr	r0, [pc, #16]	; (c020000 <mbedtls_cipher_update+0x1dc>)
 c01fff0:	e724      	b.n	c01fe3c <mbedtls_cipher_update+0x18>
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 c01fff2:	4804      	ldr	r0, [pc, #16]	; (c020004 <mbedtls_cipher_update+0x1e0>)
 c01fff4:	e722      	b.n	c01fe3c <mbedtls_cipher_update+0x18>
 c01fff6:	bf00      	nop
 c01fff8:	ffff9f00 	.word	0xffff9f00
 c01fffc:	ffff9d80 	.word	0xffff9d80
 c020000:	ffff9c80 	.word	0xffff9c80
 c020004:	ffff9f80 	.word	0xffff9f80

0c020008 <mbedtls_cipher_finish>:
                   unsigned char *output, size_t *olen )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
 c020008:	6803      	ldr	r3, [r0, #0]
{
 c02000a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 c02000c:	4604      	mov	r4, r0
 c02000e:	460e      	mov	r6, r1
 c020010:	4615      	mov	r5, r2
    if( ctx->cipher_info == NULL )
 c020012:	2b00      	cmp	r3, #0
 c020014:	d050      	beq.n	c0200b8 <mbedtls_cipher_finish+0xb0>
         * accessible through the cipher layer. */
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO */

    *olen = 0;
 c020016:	2000      	movs	r0, #0
 c020018:	6010      	str	r0, [r2, #0]

    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 c02001a:	785a      	ldrb	r2, [r3, #1]
 c02001c:	1ed1      	subs	r1, r2, #3
 c02001e:	2904      	cmp	r1, #4
 c020020:	d90c      	bls.n	c02003c <mbedtls_cipher_finish+0x34>
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode ||
        MBEDTLS_MODE_GCM == ctx->cipher_info->mode ||
 c020022:	2a09      	cmp	r2, #9
 c020024:	d00a      	beq.n	c02003c <mbedtls_cipher_finish+0x34>
        MBEDTLS_MODE_STREAM == ctx->cipher_info->mode )
    {
        return( 0 );
    }

    if ( ( MBEDTLS_CIPHER_CHACHA20          == ctx->cipher_info->type ) ||
 c020026:	7819      	ldrb	r1, [r3, #0]
 c020028:	3948      	subs	r1, #72	; 0x48
 c02002a:	2901      	cmp	r1, #1
 c02002c:	d906      	bls.n	c02003c <mbedtls_cipher_finish+0x34>
         ( MBEDTLS_CIPHER_CHACHA20_POLY1305 == ctx->cipher_info->type ) )
    {
        return( 0 );
    }

    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
 c02002e:	2a01      	cmp	r2, #1
 c020030:	d106      	bne.n	c020040 <mbedtls_cipher_finish+0x38>
    {
        if( ctx->unprocessed_len != 0 )
 c020032:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c020034:	4283      	cmp	r3, r0
             * or an empty block if no padding
             */
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
                return( 0 );

            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 c020036:	4822      	ldr	r0, [pc, #136]	; (c0200c0 <mbedtls_cipher_finish+0xb8>)
 c020038:	bf08      	it	eq
 c02003a:	2000      	moveq	r0, #0
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 c02003c:	b003      	add	sp, #12
 c02003e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( MBEDTLS_MODE_CBC == ctx->cipher_info->mode )
 c020040:	2a02      	cmp	r2, #2
 c020042:	d13b      	bne.n	c0200bc <mbedtls_cipher_finish+0xb4>
        if( MBEDTLS_ENCRYPT == ctx->operation )
 c020044:	f994 1008 	ldrsb.w	r1, [r4, #8]
 c020048:	6a62      	ldr	r2, [r4, #36]	; 0x24
 c02004a:	2901      	cmp	r1, #1
 c02004c:	d126      	bne.n	c02009c <mbedtls_cipher_finish+0x94>
            if( NULL == ctx->add_padding )
 c02004e:	68e7      	ldr	r7, [r4, #12]
 c020050:	b90f      	cbnz	r7, c020056 <mbedtls_cipher_finish+0x4e>
                if( 0 != ctx->unprocessed_len )
 c020052:	2a00      	cmp	r2, #0
 c020054:	e7ef      	b.n	c020036 <mbedtls_cipher_finish+0x2e>
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->cipher_info == NULL )
        return 0;

    if( ctx->iv_size != 0 )
 c020056:	6ba1      	ldr	r1, [r4, #56]	; 0x38
            ctx->add_padding( ctx->unprocessed_data, mbedtls_cipher_get_iv_size( ctx ),
 c020058:	f104 0014 	add.w	r0, r4, #20
 c02005c:	b901      	cbnz	r1, c020060 <mbedtls_cipher_finish+0x58>
        return (int) ctx->iv_size;

    return (int) ctx->cipher_info->iv_size;
 c02005e:	68d9      	ldr	r1, [r3, #12]
 c020060:	47b8      	blx	r7
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 c020062:	4623      	mov	r3, r4
 c020064:	f853 2b28 	ldr.w	r2, [r3], #40
                ctx->unprocessed_data, output ) ) )
 c020068:	f104 0714 	add.w	r7, r4, #20
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 c02006c:	6990      	ldr	r0, [r2, #24]
 c02006e:	9601      	str	r6, [sp, #4]
 c020070:	9700      	str	r7, [sp, #0]
 c020072:	6887      	ldr	r7, [r0, #8]
 c020074:	f994 1008 	ldrsb.w	r1, [r4, #8]
 c020078:	6952      	ldr	r2, [r2, #20]
 c02007a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 c02007c:	47b8      	blx	r7
 c02007e:	2800      	cmp	r0, #0
 c020080:	d1dc      	bne.n	c02003c <mbedtls_cipher_finish+0x34>
        if( MBEDTLS_DECRYPT == ctx->operation )
 c020082:	f994 3008 	ldrsb.w	r3, [r4, #8]
 c020086:	6821      	ldr	r1, [r4, #0]
 c020088:	b983      	cbnz	r3, c0200ac <mbedtls_cipher_finish+0xa4>
            return( ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 c02008a:	6923      	ldr	r3, [r4, #16]
    if( ctx->cipher_info == NULL )
 c02008c:	b101      	cbz	r1, c020090 <mbedtls_cipher_finish+0x88>
    return ctx->cipher_info->block_size;
 c02008e:	6949      	ldr	r1, [r1, #20]
 c020090:	462a      	mov	r2, r5
 c020092:	4630      	mov	r0, r6
}
 c020094:	b003      	add	sp, #12
 c020096:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return( ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 c02009a:	4718      	bx	r3
        else if( mbedtls_cipher_get_block_size( ctx ) != ctx->unprocessed_len )
 c02009c:	695b      	ldr	r3, [r3, #20]
 c02009e:	4293      	cmp	r3, r2
 c0200a0:	d0df      	beq.n	c020062 <mbedtls_cipher_finish+0x5a>
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
 c0200a2:	68e3      	ldr	r3, [r4, #12]
 c0200a4:	2b00      	cmp	r3, #0
 c0200a6:	d0d4      	beq.n	c020052 <mbedtls_cipher_finish+0x4a>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 c0200a8:	4805      	ldr	r0, [pc, #20]	; (c0200c0 <mbedtls_cipher_finish+0xb8>)
 c0200aa:	e7c7      	b.n	c02003c <mbedtls_cipher_finish+0x34>
    if( ctx->cipher_info == NULL )
 c0200ac:	b111      	cbz	r1, c0200b4 <mbedtls_cipher_finish+0xac>
    return ctx->cipher_info->block_size;
 c0200ae:	694b      	ldr	r3, [r1, #20]
        *olen = mbedtls_cipher_get_block_size( ctx );
 c0200b0:	602b      	str	r3, [r5, #0]
        return( 0 );
 c0200b2:	e7c3      	b.n	c02003c <mbedtls_cipher_finish+0x34>
        return 0;
 c0200b4:	4603      	mov	r3, r0
 c0200b6:	e7fb      	b.n	c0200b0 <mbedtls_cipher_finish+0xa8>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c0200b8:	4802      	ldr	r0, [pc, #8]	; (c0200c4 <mbedtls_cipher_finish+0xbc>)
 c0200ba:	e7bf      	b.n	c02003c <mbedtls_cipher_finish+0x34>
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 c0200bc:	4802      	ldr	r0, [pc, #8]	; (c0200c8 <mbedtls_cipher_finish+0xc0>)
 c0200be:	e7bd      	b.n	c02003c <mbedtls_cipher_finish+0x34>
 c0200c0:	ffff9d80 	.word	0xffff9d80
 c0200c4:	ffff9f00 	.word	0xffff9f00
 c0200c8:	ffff9f80 	.word	0xffff9f80

0c0200cc <mbedtls_cipher_set_padding_mode>:
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx,
                                     mbedtls_cipher_padding_t mode )
{
    CIPHER_VALIDATE_RET( ctx != NULL );

    if( NULL == ctx->cipher_info || MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
 c0200cc:	6803      	ldr	r3, [r0, #0]
 c0200ce:	b303      	cbz	r3, c020112 <mbedtls_cipher_set_padding_mode+0x46>
 c0200d0:	785b      	ldrb	r3, [r3, #1]
 c0200d2:	2b02      	cmp	r3, #2
 c0200d4:	d11d      	bne.n	c020112 <mbedtls_cipher_set_padding_mode+0x46>

        return( 0 );
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO */

    switch( mode )
 c0200d6:	2904      	cmp	r1, #4
 c0200d8:	d81d      	bhi.n	c020116 <mbedtls_cipher_set_padding_mode+0x4a>
 c0200da:	e8df f001 	tbb	[pc, r1]
 c0200de:	0903      	.short	0x0903
 c0200e0:	110d      	.short	0x110d
 c0200e2:	15          	.byte	0x15
 c0200e3:	00          	.byte	0x00
    {
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    case MBEDTLS_PADDING_PKCS7:
        ctx->add_padding = add_pkcs_padding;
 c0200e4:	4b0d      	ldr	r3, [pc, #52]	; (c02011c <mbedtls_cipher_set_padding_mode+0x50>)
 c0200e6:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_pkcs_padding;
 c0200e8:	4b0d      	ldr	r3, [pc, #52]	; (c020120 <mbedtls_cipher_set_padding_mode+0x54>)
        break;
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS)
    case MBEDTLS_PADDING_ONE_AND_ZEROS:
        ctx->add_padding = add_one_and_zeros_padding;
        ctx->get_padding = get_one_and_zeros_padding;
 c0200ea:	6103      	str	r3, [r0, #16]

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 c0200ec:	2000      	movs	r0, #0
        break;
 c0200ee:	4770      	bx	lr
        ctx->add_padding = add_one_and_zeros_padding;
 c0200f0:	4b0c      	ldr	r3, [pc, #48]	; (c020124 <mbedtls_cipher_set_padding_mode+0x58>)
 c0200f2:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_one_and_zeros_padding;
 c0200f4:	4b0c      	ldr	r3, [pc, #48]	; (c020128 <mbedtls_cipher_set_padding_mode+0x5c>)
 c0200f6:	e7f8      	b.n	c0200ea <mbedtls_cipher_set_padding_mode+0x1e>
        ctx->add_padding = add_zeros_and_len_padding;
 c0200f8:	4b0c      	ldr	r3, [pc, #48]	; (c02012c <mbedtls_cipher_set_padding_mode+0x60>)
 c0200fa:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_zeros_and_len_padding;
 c0200fc:	4b0c      	ldr	r3, [pc, #48]	; (c020130 <mbedtls_cipher_set_padding_mode+0x64>)
 c0200fe:	e7f4      	b.n	c0200ea <mbedtls_cipher_set_padding_mode+0x1e>
        ctx->add_padding = add_zeros_padding;
 c020100:	4b0c      	ldr	r3, [pc, #48]	; (c020134 <mbedtls_cipher_set_padding_mode+0x68>)
 c020102:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_zeros_padding;
 c020104:	4b0c      	ldr	r3, [pc, #48]	; (c020138 <mbedtls_cipher_set_padding_mode+0x6c>)
 c020106:	e7f0      	b.n	c0200ea <mbedtls_cipher_set_padding_mode+0x1e>
        ctx->add_padding = NULL;
 c020108:	2300      	movs	r3, #0
        ctx->get_padding = get_no_padding;
 c02010a:	4a0c      	ldr	r2, [pc, #48]	; (c02013c <mbedtls_cipher_set_padding_mode+0x70>)
        ctx->add_padding = NULL;
 c02010c:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_no_padding;
 c02010e:	6102      	str	r2, [r0, #16]
 c020110:	e7ec      	b.n	c0200ec <mbedtls_cipher_set_padding_mode+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c020112:	480b      	ldr	r0, [pc, #44]	; (c020140 <mbedtls_cipher_set_padding_mode+0x74>)
 c020114:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 c020116:	480b      	ldr	r0, [pc, #44]	; (c020144 <mbedtls_cipher_set_padding_mode+0x78>)
}
 c020118:	4770      	bx	lr
 c02011a:	bf00      	nop
 c02011c:	0c01fb61 	.word	0x0c01fb61
 c020120:	0c01fb79 	.word	0x0c01fb79
 c020124:	0c01fbcd 	.word	0x0c01fbcd
 c020128:	0c01fc85 	.word	0x0c01fc85
 c02012c:	0c01fbe9 	.word	0x0c01fbe9
 c020130:	0c01fc0d 	.word	0x0c01fc0d
 c020134:	0c01fc5d 	.word	0x0c01fc5d
 c020138:	0c01fcd5 	.word	0x0c01fcd5
 c02013c:	0c01fc71 	.word	0x0c01fc71
 c020140:	ffff9f00 	.word	0xffff9f00
 c020144:	ffff9f80 	.word	0xffff9f80

0c020148 <mbedtls_cipher_setup>:
{
 c020148:	b538      	push	{r3, r4, r5, lr}
 c02014a:	4604      	mov	r4, r0
    if( cipher_info == NULL )
 c02014c:	460d      	mov	r5, r1
 c02014e:	b179      	cbz	r1, c020170 <mbedtls_cipher_setup+0x28>
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 c020150:	2244      	movs	r2, #68	; 0x44
 c020152:	2100      	movs	r1, #0
 c020154:	f7f4 fc37 	bl	c0149c6 <memset>
    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 c020158:	69ab      	ldr	r3, [r5, #24]
 c02015a:	6a1b      	ldr	r3, [r3, #32]
 c02015c:	4798      	blx	r3
 c02015e:	63e0      	str	r0, [r4, #60]	; 0x3c
 c020160:	b140      	cbz	r0, c020174 <mbedtls_cipher_setup+0x2c>
    ctx->cipher_info = cipher_info;
 c020162:	6025      	str	r5, [r4, #0]
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_PKCS7 );
 c020164:	2100      	movs	r1, #0
 c020166:	4620      	mov	r0, r4
 c020168:	f7ff ffb0 	bl	c0200cc <mbedtls_cipher_set_padding_mode>
    return( 0 );
 c02016c:	2000      	movs	r0, #0
}
 c02016e:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c020170:	4801      	ldr	r0, [pc, #4]	; (c020178 <mbedtls_cipher_setup+0x30>)
 c020172:	e7fc      	b.n	c02016e <mbedtls_cipher_setup+0x26>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 c020174:	4801      	ldr	r0, [pc, #4]	; (c02017c <mbedtls_cipher_setup+0x34>)
 c020176:	e7fa      	b.n	c02016e <mbedtls_cipher_setup+0x26>
 c020178:	ffff9f00 	.word	0xffff9f00
 c02017c:	ffff9e80 	.word	0xffff9e80

0c020180 <mbedtls_cipher_crypt>:
 */
int mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,
                  const unsigned char *iv, size_t iv_len,
                  const unsigned char *input, size_t ilen,
                  unsigned char *output, size_t *olen )
{
 c020180:	b5f0      	push	{r4, r5, r6, r7, lr}
 c020182:	b085      	sub	sp, #20
 c020184:	4605      	mov	r5, r0
 c020186:	e9dd 640b 	ldrd	r6, r4, [sp, #44]	; 0x2c
 c02018a:	461f      	mov	r7, r3
        *olen += part_len;
        return( 0 );
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO */

    if( ( ret = mbedtls_cipher_set_iv( ctx, iv, iv_len ) ) != 0 )
 c02018c:	f7ff fe1e 	bl	c01fdcc <mbedtls_cipher_set_iv>
 c020190:	b9a8      	cbnz	r0, c0201be <mbedtls_cipher_crypt+0x3e>
    if( ctx->cipher_info == NULL )
 c020192:	682b      	ldr	r3, [r5, #0]
 c020194:	b1ab      	cbz	r3, c0201c2 <mbedtls_cipher_crypt+0x42>
    ctx->unprocessed_len = 0;
 c020196:	6268      	str	r0, [r5, #36]	; 0x24
        return( ret );

    if( ( ret = mbedtls_cipher_reset( ctx ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_cipher_update( ctx, input, ilen,
 c020198:	9400      	str	r4, [sp, #0]
 c02019a:	4633      	mov	r3, r6
 c02019c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 c02019e:	4639      	mov	r1, r7
 c0201a0:	4628      	mov	r0, r5
 c0201a2:	f7ff fe3f 	bl	c01fe24 <mbedtls_cipher_update>
 c0201a6:	b950      	cbnz	r0, c0201be <mbedtls_cipher_crypt+0x3e>
                                       output, olen ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_cipher_finish( ctx, output + *olen,
 c0201a8:	6821      	ldr	r1, [r4, #0]
 c0201aa:	aa03      	add	r2, sp, #12
 c0201ac:	4431      	add	r1, r6
 c0201ae:	4628      	mov	r0, r5
 c0201b0:	f7ff ff2a 	bl	c020008 <mbedtls_cipher_finish>
 c0201b4:	b918      	cbnz	r0, c0201be <mbedtls_cipher_crypt+0x3e>
                                       &finish_olen ) ) != 0 )
        return( ret );

    *olen += finish_olen;
 c0201b6:	6823      	ldr	r3, [r4, #0]
 c0201b8:	9a03      	ldr	r2, [sp, #12]
 c0201ba:	4413      	add	r3, r2
 c0201bc:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 c0201be:	b005      	add	sp, #20
 c0201c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c0201c2:	4801      	ldr	r0, [pc, #4]	; (c0201c8 <mbedtls_cipher_crypt+0x48>)
 c0201c4:	e7fb      	b.n	c0201be <mbedtls_cipher_crypt+0x3e>
 c0201c6:	bf00      	nop
 c0201c8:	ffff9f00 	.word	0xffff9f00

0c0201cc <ccm_ctx_free>:

    return( ctx );
}

static void ccm_ctx_free( void *ctx )
{
 c0201cc:	b510      	push	{r4, lr}
 c0201ce:	4604      	mov	r4, r0
    mbedtls_ccm_free( ctx );
 c0201d0:	f7ff fc5e 	bl	c01fa90 <mbedtls_ccm_free>
    mbedtls_free( ctx );
 c0201d4:	4620      	mov	r0, r4
}
 c0201d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 c0201da:	f006 ba95 	b.w	c026708 <mbedtls_free>

0c0201de <ccm_ctx_alloc>:
{
 c0201de:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ccm_context ) );
 c0201e0:	2144      	movs	r1, #68	; 0x44
 c0201e2:	2001      	movs	r0, #1
 c0201e4:	f006 fa8a 	bl	c0266fc <mbedtls_calloc>
    if( ctx != NULL )
 c0201e8:	4604      	mov	r4, r0
 c0201ea:	b108      	cbz	r0, c0201f0 <ccm_ctx_alloc+0x12>
        mbedtls_ccm_init( (mbedtls_ccm_context *) ctx );
 c0201ec:	f7ff fc29 	bl	c01fa42 <mbedtls_ccm_init>
}
 c0201f0:	4620      	mov	r0, r4
 c0201f2:	bd10      	pop	{r4, pc}

0c0201f4 <ccm_aes_setkey_wrap>:

#if defined(MBEDTLS_CCM_C)
static int ccm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_ccm_setkey( (mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 c0201f4:	4613      	mov	r3, r2
 c0201f6:	460a      	mov	r2, r1
 c0201f8:	2102      	movs	r1, #2
 c0201fa:	f7ff bc26 	b.w	c01fa4a <mbedtls_ccm_setkey>

0c0201fe <gcm_ctx_free>:
{
 c0201fe:	b510      	push	{r4, lr}
 c020200:	4604      	mov	r4, r0
    mbedtls_gcm_free( ctx );
 c020202:	f003 ff54 	bl	c0240ae <mbedtls_gcm_free>
    mbedtls_free( ctx );
 c020206:	4620      	mov	r0, r4
}
 c020208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 c02020c:	f006 ba7c 	b.w	c026708 <mbedtls_free>

0c020210 <gcm_ctx_alloc>:
{
 c020210:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 c020212:	f44f 71c8 	mov.w	r1, #400	; 0x190
 c020216:	2001      	movs	r0, #1
 c020218:	f006 fa70 	bl	c0266fc <mbedtls_calloc>
    if( ctx != NULL )
 c02021c:	4604      	mov	r4, r0
 c02021e:	b108      	cbz	r0, c020224 <gcm_ctx_alloc+0x14>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
 c020220:	f003 fc92 	bl	c023b48 <mbedtls_gcm_init>
}
 c020224:	4620      	mov	r0, r4
 c020226:	bd10      	pop	{r4, pc}

0c020228 <gcm_aes_setkey_wrap>:
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 c020228:	4613      	mov	r3, r2
 c02022a:	460a      	mov	r2, r1
 c02022c:	2102      	movs	r1, #2
 c02022e:	f003 bc90 	b.w	c023b52 <mbedtls_gcm_setkey>

0c020232 <aes_ctx_free>:
{
 c020232:	b510      	push	{r4, lr}
 c020234:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 c020236:	f7fc f928 	bl	c01c48a <mbedtls_aes_free>
    mbedtls_free( ctx );
 c02023a:	4620      	mov	r0, r4
}
 c02023c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 c020240:	f006 ba62 	b.w	c026708 <mbedtls_free>

0c020244 <aes_ctx_alloc>:
{
 c020244:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 c020246:	f44f 718c 	mov.w	r1, #280	; 0x118
 c02024a:	2001      	movs	r0, #1
 c02024c:	f006 fa56 	bl	c0266fc <mbedtls_calloc>
    if( aes == NULL )
 c020250:	4604      	mov	r4, r0
 c020252:	b108      	cbz	r0, c020258 <aes_ctx_alloc+0x14>
    mbedtls_aes_init( aes );
 c020254:	f7fc f914 	bl	c01c480 <mbedtls_aes_init>
}
 c020258:	4620      	mov	r0, r4
 c02025a:	bd10      	pop	{r4, pc}

0c02025c <aes_setkey_dec_wrap>:
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 c02025c:	f7fc ba1c 	b.w	c01c698 <mbedtls_aes_setkey_dec>

0c020260 <aes_setkey_enc_wrap>:
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 c020260:	f7fc b91a 	b.w	c01c498 <mbedtls_aes_setkey_enc>

0c020264 <aes_crypt_ctr_wrap>:
    return mbedtls_aes_crypt_ctr( (mbedtls_aes_context *) ctx, length, nc_off, nonce_counter,
 c020264:	f7fc be17 	b.w	c01ce96 <mbedtls_aes_crypt_ctr>

0c020268 <aes_crypt_ofb_wrap>:
    return mbedtls_aes_crypt_ofb( (mbedtls_aes_context *) ctx, length, iv_off,
 c020268:	f7fc bded 	b.w	c01ce46 <mbedtls_aes_crypt_ofb>

0c02026c <aes_crypt_cfb128_wrap>:
    return mbedtls_aes_crypt_cfb128( (mbedtls_aes_context *) ctx, operation, length, iv_off, iv,
 c02026c:	f7fc bdb2 	b.w	c01cdd4 <mbedtls_aes_crypt_cfb128>

0c020270 <aes_crypt_cbc_wrap>:
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
 c020270:	f7fc bd48 	b.w	c01cd04 <mbedtls_aes_crypt_cbc>

0c020274 <aes_crypt_ecb_wrap>:
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 c020274:	f7fc bd38 	b.w	c01cce8 <mbedtls_aes_crypt_ecb>

0c020278 <cmac_multiply_by_u>:
    const unsigned char R_64 = 0x1B;
    unsigned char R_n, mask;
    unsigned char overflow = 0x00;
    int i;

    if( blocksize == MBEDTLS_AES_BLOCK_SIZE )
 c020278:	2a10      	cmp	r2, #16
{
 c02027a:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( blocksize == MBEDTLS_AES_BLOCK_SIZE )
 c02027c:	d011      	beq.n	c0202a2 <cmac_multiply_by_u+0x2a>
    {
        R_n = R_128;
    }
    else if( blocksize == MBEDTLS_DES3_BLOCK_SIZE )
 c02027e:	2a08      	cmp	r2, #8
 c020280:	d11a      	bne.n	c0202b8 <cmac_multiply_by_u+0x40>
    {
        R_n = R_64;
 c020282:	231b      	movs	r3, #27
    else
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    for( i = (int)blocksize - 1; i >= 0; i-- )
 c020284:	1e55      	subs	r5, r2, #1
    unsigned char overflow = 0x00;
 c020286:	2400      	movs	r4, #0
 c020288:	462e      	mov	r6, r5
 c02028a:	440a      	add	r2, r1
    for( i = (int)blocksize - 1; i >= 0; i-- )
 c02028c:	2d00      	cmp	r5, #0
 c02028e:	da0a      	bge.n	c0202a6 <cmac_multiply_by_u+0x2e>
     * well-defined and precisely what we want to do here */
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif
    mask = - ( input[0] >> 7 );
 c020290:	f991 2000 	ldrsb.w	r2, [r1]
#if defined(_MSC_VER)
#pragma warning( pop )
#endif

    output[ blocksize - 1 ] ^= R_n & mask;
 c020294:	ea03 73e2 	and.w	r3, r3, r2, asr #31
 c020298:	5d82      	ldrb	r2, [r0, r6]
 c02029a:	4053      	eors	r3, r2
 c02029c:	5583      	strb	r3, [r0, r6]

    return( 0 );
 c02029e:	2000      	movs	r0, #0
}
 c0202a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        R_n = R_128;
 c0202a2:	2387      	movs	r3, #135	; 0x87
 c0202a4:	e7ee      	b.n	c020284 <cmac_multiply_by_u+0xc>
        output[i] = input[i] << 1 | overflow;
 c0202a6:	f812 7d01 	ldrb.w	r7, [r2, #-1]!
 c0202aa:	ea44 0447 	orr.w	r4, r4, r7, lsl #1
 c0202ae:	5544      	strb	r4, [r0, r5]
        overflow = input[i] >> 7;
 c0202b0:	7814      	ldrb	r4, [r2, #0]
    for( i = (int)blocksize - 1; i >= 0; i-- )
 c0202b2:	3d01      	subs	r5, #1
        overflow = input[i] >> 7;
 c0202b4:	09e4      	lsrs	r4, r4, #7
 c0202b6:	e7e9      	b.n	c02028c <cmac_multiply_by_u+0x14>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c0202b8:	4800      	ldr	r0, [pc, #0]	; (c0202bc <cmac_multiply_by_u+0x44>)
 c0202ba:	e7f1      	b.n	c0202a0 <cmac_multiply_by_u+0x28>
 c0202bc:	ffff9f00 	.word	0xffff9f00

0c0202c0 <cmac_xor_block>:

#if !defined(MBEDTLS_CMAC_ALT)
static void cmac_xor_block( unsigned char *output, const unsigned char *input1,
                            const unsigned char *input2,
                            const size_t block_size )
{
 c0202c0:	b570      	push	{r4, r5, r6, lr}
    size_t idx;

    for( idx = 0; idx < block_size; idx++ )
 c0202c2:	2400      	movs	r4, #0
 c0202c4:	429c      	cmp	r4, r3
 c0202c6:	d100      	bne.n	c0202ca <cmac_xor_block+0xa>
        output[ idx ] = input1[ idx ] ^ input2[ idx ];
}
 c0202c8:	bd70      	pop	{r4, r5, r6, pc}
        output[ idx ] = input1[ idx ] ^ input2[ idx ];
 c0202ca:	5d0d      	ldrb	r5, [r1, r4]
 c0202cc:	5d16      	ldrb	r6, [r2, r4]
 c0202ce:	4075      	eors	r5, r6
 c0202d0:	5505      	strb	r5, [r0, r4]
    for( idx = 0; idx < block_size; idx++ )
 c0202d2:	3401      	adds	r4, #1
 c0202d4:	e7f6      	b.n	c0202c4 <cmac_xor_block+0x4>
	...

0c0202d8 <mbedtls_cipher_cmac_starts>:
    }
}

int mbedtls_cipher_cmac_starts( mbedtls_cipher_context_t *ctx,
                                const unsigned char *key, size_t keybits )
{
 c0202d8:	b538      	push	{r3, r4, r5, lr}
    mbedtls_cipher_type_t type;
    mbedtls_cmac_context_t *cmac_ctx;
    int retval;

    if( ctx == NULL || ctx->cipher_info == NULL || key == NULL )
 c0202da:	4605      	mov	r5, r0
 c0202dc:	b1d0      	cbz	r0, c020314 <mbedtls_cipher_cmac_starts+0x3c>
 c0202de:	6804      	ldr	r4, [r0, #0]
 c0202e0:	b1c4      	cbz	r4, c020314 <mbedtls_cipher_cmac_starts+0x3c>
 c0202e2:	b1b9      	cbz	r1, c020314 <mbedtls_cipher_cmac_starts+0x3c>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    if( ( retval = mbedtls_cipher_setkey( ctx, key, (int)keybits,
 c0202e4:	2301      	movs	r3, #1
 c0202e6:	f7ff fd51 	bl	c01fd8c <mbedtls_cipher_setkey>
 c0202ea:	4604      	mov	r4, r0
 c0202ec:	b980      	cbnz	r0, c020310 <mbedtls_cipher_cmac_starts+0x38>
                                          MBEDTLS_ENCRYPT ) ) != 0 )
        return( retval );

    type = ctx->cipher_info->type;
 c0202ee:	682b      	ldr	r3, [r5, #0]

    switch( type )
 c0202f0:	781b      	ldrb	r3, [r3, #0]
 c0202f2:	2b02      	cmp	r3, #2
 c0202f4:	d30e      	bcc.n	c020314 <mbedtls_cipher_cmac_starts+0x3c>
 c0202f6:	2b04      	cmp	r3, #4
 c0202f8:	d901      	bls.n	c0202fe <mbedtls_cipher_cmac_starts+0x26>
 c0202fa:	2b24      	cmp	r3, #36	; 0x24
 c0202fc:	d10a      	bne.n	c020314 <mbedtls_cipher_cmac_starts+0x3c>
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    /* Allocated and initialise in the cipher context memory for the CMAC
     * context */
    cmac_ctx = mbedtls_calloc( 1, sizeof( mbedtls_cmac_context_t ) );
 c0202fe:	2124      	movs	r1, #36	; 0x24
 c020300:	2001      	movs	r0, #1
 c020302:	f006 f9fb 	bl	c0266fc <mbedtls_calloc>
    if( cmac_ctx == NULL )
 c020306:	b138      	cbz	r0, c020318 <mbedtls_cipher_cmac_starts+0x40>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );

    ctx->cmac_ctx = cmac_ctx;
 c020308:	6428      	str	r0, [r5, #64]	; 0x40

    mbedtls_platform_zeroize( cmac_ctx->state, sizeof( cmac_ctx->state ) );
 c02030a:	2110      	movs	r1, #16
 c02030c:	f006 fa0c 	bl	c026728 <mbedtls_platform_zeroize>

    return 0;
}
 c020310:	4620      	mov	r0, r4
 c020312:	bd38      	pop	{r3, r4, r5, pc}
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c020314:	4c01      	ldr	r4, [pc, #4]	; (c02031c <mbedtls_cipher_cmac_starts+0x44>)
 c020316:	e7fb      	b.n	c020310 <mbedtls_cipher_cmac_starts+0x38>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 c020318:	4c01      	ldr	r4, [pc, #4]	; (c020320 <mbedtls_cipher_cmac_starts+0x48>)
 c02031a:	e7f9      	b.n	c020310 <mbedtls_cipher_cmac_starts+0x38>
 c02031c:	ffff9f00 	.word	0xffff9f00
 c020320:	ffff9e80 	.word	0xffff9e80

0c020324 <mbedtls_cipher_cmac_update>:

int mbedtls_cipher_cmac_update( mbedtls_cipher_context_t *ctx,
                                const unsigned char *input, size_t ilen )
{
 c020324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c020328:	460f      	mov	r7, r1
 c02032a:	b085      	sub	sp, #20
 c02032c:	4616      	mov	r6, r2
    mbedtls_cmac_context_t* cmac_ctx;
    unsigned char *state;
    int ret = 0;
    size_t n, j, olen, block_size;

    if( ctx == NULL || ctx->cipher_info == NULL || input == NULL ||
 c02032e:	4681      	mov	r9, r0
 c020330:	2800      	cmp	r0, #0
 c020332:	d056      	beq.n	c0203e2 <mbedtls_cipher_cmac_update+0xbe>
 c020334:	6803      	ldr	r3, [r0, #0]
 c020336:	2b00      	cmp	r3, #0
 c020338:	d053      	beq.n	c0203e2 <mbedtls_cipher_cmac_update+0xbe>
 c02033a:	2900      	cmp	r1, #0
 c02033c:	d051      	beq.n	c0203e2 <mbedtls_cipher_cmac_update+0xbe>
        ctx->cmac_ctx == NULL )
 c02033e:	6c04      	ldr	r4, [r0, #64]	; 0x40
    if( ctx == NULL || ctx->cipher_info == NULL || input == NULL ||
 c020340:	2c00      	cmp	r4, #0
 c020342:	d04e      	beq.n	c0203e2 <mbedtls_cipher_cmac_update+0xbe>
    block_size = ctx->cipher_info->block_size;
    state = ctx->cmac_ctx->state;

    /* Is there data still to process from the last call, that's greater in
     * size than a block? */
    if( cmac_ctx->unprocessed_len > 0 &&
 c020344:	6a20      	ldr	r0, [r4, #32]
    block_size = ctx->cipher_info->block_size;
 c020346:	695d      	ldr	r5, [r3, #20]
    if( cmac_ctx->unprocessed_len > 0 &&
 c020348:	b1e0      	cbz	r0, c020384 <mbedtls_cipher_cmac_update+0x60>
        ilen > block_size - cmac_ctx->unprocessed_len )
 c02034a:	1a2a      	subs	r2, r5, r0
    if( cmac_ctx->unprocessed_len > 0 &&
 c02034c:	42b2      	cmp	r2, r6
 c02034e:	d219      	bcs.n	c020384 <mbedtls_cipher_cmac_update+0x60>
    {
        memcpy( &cmac_ctx->unprocessed_block[cmac_ctx->unprocessed_len],
 c020350:	3010      	adds	r0, #16
 c020352:	4420      	add	r0, r4
 c020354:	f7f4 fb13 	bl	c01497e <memcpy>
                input,
                block_size - cmac_ctx->unprocessed_len );

        cmac_xor_block( state, cmac_ctx->unprocessed_block, state, block_size );
 c020358:	462b      	mov	r3, r5
 c02035a:	4622      	mov	r2, r4
 c02035c:	f104 0110 	add.w	r1, r4, #16
 c020360:	4620      	mov	r0, r4
 c020362:	f7ff ffad 	bl	c0202c0 <cmac_xor_block>

        if( ( ret = mbedtls_cipher_update( ctx, state, block_size, state,
 c020366:	ab03      	add	r3, sp, #12
 c020368:	9300      	str	r3, [sp, #0]
 c02036a:	462a      	mov	r2, r5
 c02036c:	4623      	mov	r3, r4
 c02036e:	4621      	mov	r1, r4
 c020370:	4648      	mov	r0, r9
 c020372:	f7ff fd57 	bl	c01fe24 <mbedtls_cipher_update>
 c020376:	b9e0      	cbnz	r0, c0203b2 <mbedtls_cipher_cmac_update+0x8e>
                                           &olen ) ) != 0 )
        {
           goto exit;
        }

        input += block_size - cmac_ctx->unprocessed_len;
 c020378:	6a23      	ldr	r3, [r4, #32]
        ilen -= block_size - cmac_ctx->unprocessed_len;
        cmac_ctx->unprocessed_len = 0;
 c02037a:	6220      	str	r0, [r4, #32]
        input += block_size - cmac_ctx->unprocessed_len;
 c02037c:	1aea      	subs	r2, r5, r3
 c02037e:	441e      	add	r6, r3
 c020380:	4417      	add	r7, r2
        ilen -= block_size - cmac_ctx->unprocessed_len;
 c020382:	1b76      	subs	r6, r6, r5
    }

    /* n is the number of blocks including any final partial block */
    n = ( ilen + block_size - 1 ) / block_size;
 c020384:	f105 38ff 	add.w	r8, r5, #4294967295
 c020388:	44b0      	add	r8, r6
 c02038a:	fbb8 f8f5 	udiv	r8, r8, r5

    /* Iterate across the input data in block sized chunks, excluding any
     * final partial or complete block */
    for( j = 1; j < n; j++ )
 c02038e:	f04f 0a01 	mov.w	sl, #1
    {
        cmac_xor_block( state, input, state, block_size );

        if( ( ret = mbedtls_cipher_update( ctx, state, block_size, state,
 c020392:	f10d 0b0c 	add.w	fp, sp, #12
    for( j = 1; j < n; j++ )
 c020396:	45c2      	cmp	sl, r8
 c020398:	d30e      	bcc.n	c0203b8 <mbedtls_cipher_cmac_update+0x94>
        ilen -= block_size;
        input += block_size;
    }

    /* If there is data left over that wasn't aligned to a block */
    if( ilen > 0 )
 c02039a:	b326      	cbz	r6, c0203e6 <mbedtls_cipher_cmac_update+0xc2>
    {
        memcpy( &cmac_ctx->unprocessed_block[cmac_ctx->unprocessed_len],
 c02039c:	6a20      	ldr	r0, [r4, #32]
 c02039e:	4632      	mov	r2, r6
 c0203a0:	3010      	adds	r0, #16
 c0203a2:	4639      	mov	r1, r7
 c0203a4:	4420      	add	r0, r4
 c0203a6:	f7f4 faea 	bl	c01497e <memcpy>
                input,
                ilen );
        cmac_ctx->unprocessed_len += ilen;
 c0203aa:	2000      	movs	r0, #0
 c0203ac:	6a23      	ldr	r3, [r4, #32]
 c0203ae:	441e      	add	r6, r3
 c0203b0:	6226      	str	r6, [r4, #32]
    }

exit:
    return( ret );
}
 c0203b2:	b005      	add	sp, #20
 c0203b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cmac_xor_block( state, input, state, block_size );
 c0203b8:	462b      	mov	r3, r5
 c0203ba:	4622      	mov	r2, r4
 c0203bc:	4639      	mov	r1, r7
 c0203be:	4620      	mov	r0, r4
 c0203c0:	f7ff ff7e 	bl	c0202c0 <cmac_xor_block>
        if( ( ret = mbedtls_cipher_update( ctx, state, block_size, state,
 c0203c4:	f8cd b000 	str.w	fp, [sp]
 c0203c8:	4623      	mov	r3, r4
 c0203ca:	462a      	mov	r2, r5
 c0203cc:	4621      	mov	r1, r4
 c0203ce:	4648      	mov	r0, r9
 c0203d0:	f7ff fd28 	bl	c01fe24 <mbedtls_cipher_update>
 c0203d4:	2800      	cmp	r0, #0
 c0203d6:	d1ec      	bne.n	c0203b2 <mbedtls_cipher_cmac_update+0x8e>
        ilen -= block_size;
 c0203d8:	1b76      	subs	r6, r6, r5
        input += block_size;
 c0203da:	442f      	add	r7, r5
    for( j = 1; j < n; j++ )
 c0203dc:	f10a 0a01 	add.w	sl, sl, #1
 c0203e0:	e7d9      	b.n	c020396 <mbedtls_cipher_cmac_update+0x72>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c0203e2:	4802      	ldr	r0, [pc, #8]	; (c0203ec <mbedtls_cipher_cmac_update+0xc8>)
 c0203e4:	e7e5      	b.n	c0203b2 <mbedtls_cipher_cmac_update+0x8e>
exit:
 c0203e6:	4630      	mov	r0, r6
 c0203e8:	e7e3      	b.n	c0203b2 <mbedtls_cipher_cmac_update+0x8e>
 c0203ea:	bf00      	nop
 c0203ec:	ffff9f00 	.word	0xffff9f00

0c0203f0 <mbedtls_cipher_cmac_finish>:

int mbedtls_cipher_cmac_finish( mbedtls_cipher_context_t *ctx,
                                unsigned char *output )
{
 c0203f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c0203f4:	4689      	mov	r9, r1
 c0203f6:	b090      	sub	sp, #64	; 0x40
    unsigned char K2[MBEDTLS_CIPHER_BLKSIZE_MAX];
    unsigned char M_last[MBEDTLS_CIPHER_BLKSIZE_MAX];
    int ret;
    size_t olen, block_size;

    if( ctx == NULL || ctx->cipher_info == NULL || ctx->cmac_ctx == NULL ||
 c0203f8:	4682      	mov	sl, r0
 c0203fa:	2800      	cmp	r0, #0
 c0203fc:	d07d      	beq.n	c0204fa <mbedtls_cipher_cmac_finish+0x10a>
 c0203fe:	6803      	ldr	r3, [r0, #0]
 c020400:	2b00      	cmp	r3, #0
 c020402:	d07a      	beq.n	c0204fa <mbedtls_cipher_cmac_finish+0x10a>
 c020404:	6c05      	ldr	r5, [r0, #64]	; 0x40
 c020406:	2d00      	cmp	r5, #0
 c020408:	d077      	beq.n	c0204fa <mbedtls_cipher_cmac_finish+0x10a>
 c02040a:	2900      	cmp	r1, #0
 c02040c:	d075      	beq.n	c0204fa <mbedtls_cipher_cmac_finish+0x10a>

    cmac_ctx = ctx->cmac_ctx;
    block_size = ctx->cipher_info->block_size;
    state = cmac_ctx->state;

    mbedtls_platform_zeroize( K1, sizeof( K1 ) );
 c02040e:	2110      	movs	r1, #16
 c020410:	eb0d 0001 	add.w	r0, sp, r1
    block_size = ctx->cipher_info->block_size;
 c020414:	695f      	ldr	r7, [r3, #20]
    mbedtls_platform_zeroize( L, sizeof( L ) );
 c020416:	ac0c      	add	r4, sp, #48	; 0x30
    mbedtls_platform_zeroize( K1, sizeof( K1 ) );
 c020418:	f006 f986 	bl	c026728 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( K2, sizeof( K2 ) );
 c02041c:	2110      	movs	r1, #16
 c02041e:	a808      	add	r0, sp, #32
 c020420:	f006 f982 	bl	c026728 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( L, sizeof( L ) );
 c020424:	2110      	movs	r1, #16
 c020426:	4620      	mov	r0, r4
 c020428:	f006 f97e 	bl	c026728 <mbedtls_platform_zeroize>
    block_size = ctx->cipher_info->block_size;
 c02042c:	f8da 3000 	ldr.w	r3, [sl]
    if( ( ret = mbedtls_cipher_update( ctx, L, block_size, L, &olen ) ) != 0 )
 c020430:	ae03      	add	r6, sp, #12
    block_size = ctx->cipher_info->block_size;
 c020432:	f8d3 8014 	ldr.w	r8, [r3, #20]
    if( ( ret = mbedtls_cipher_update( ctx, L, block_size, L, &olen ) ) != 0 )
 c020436:	4621      	mov	r1, r4
 c020438:	9600      	str	r6, [sp, #0]
 c02043a:	4623      	mov	r3, r4
 c02043c:	4642      	mov	r2, r8
 c02043e:	4650      	mov	r0, sl
 c020440:	f7ff fcf0 	bl	c01fe24 <mbedtls_cipher_update>
 c020444:	b950      	cbnz	r0, c02045c <mbedtls_cipher_cmac_finish+0x6c>
    if( ( ret = cmac_multiply_by_u( K1, L , block_size ) ) != 0 )
 c020446:	4642      	mov	r2, r8
 c020448:	4621      	mov	r1, r4
 c02044a:	a804      	add	r0, sp, #16
 c02044c:	f7ff ff14 	bl	c020278 <cmac_multiply_by_u>
 c020450:	b920      	cbnz	r0, c02045c <mbedtls_cipher_cmac_finish+0x6c>
    if( ( ret = cmac_multiply_by_u( K2, K1 , block_size ) ) != 0 )
 c020452:	4642      	mov	r2, r8
 c020454:	a904      	add	r1, sp, #16
 c020456:	a808      	add	r0, sp, #32
 c020458:	f7ff ff0e 	bl	c020278 <cmac_multiply_by_u>
    mbedtls_platform_zeroize( L, sizeof( L ) );
 c02045c:	2110      	movs	r1, #16
 c02045e:	4620      	mov	r0, r4
 c020460:	f006 f962 	bl	c026728 <mbedtls_platform_zeroize>
    cmac_generate_subkeys( ctx, K1, K2 );

    last_block = cmac_ctx->unprocessed_block;

    /* Calculate last block */
    if( cmac_ctx->unprocessed_len < block_size )
 c020464:	6a2a      	ldr	r2, [r5, #32]
    last_block = cmac_ctx->unprocessed_block;
 c020466:	f105 0810 	add.w	r8, r5, #16
    if( cmac_ctx->unprocessed_len < block_size )
 c02046a:	42ba      	cmp	r2, r7
 c02046c:	d341      	bcc.n	c0204f2 <mbedtls_cipher_cmac_finish+0x102>
        cmac_xor_block( M_last, M_last, K2, block_size );
    }
    else
    {
        /* Last block is complete block */
        cmac_xor_block( M_last, last_block, K1, block_size );
 c02046e:	463b      	mov	r3, r7
 c020470:	aa04      	add	r2, sp, #16
 c020472:	4641      	mov	r1, r8
 c020474:	e00b      	b.n	c02048e <mbedtls_cipher_cmac_finish+0x9e>
        if( j < last_block_len )
 c020476:	429a      	cmp	r2, r3
 c020478:	d937      	bls.n	c0204ea <mbedtls_cipher_cmac_finish+0xfa>
            padded_block[j] = last_block[j];
 c02047a:	f818 c003 	ldrb.w	ip, [r8, r3]
 c02047e:	f804 c003 	strb.w	ip, [r4, r3]
    for( j = 0; j < padded_block_len; j++ )
 c020482:	3301      	adds	r3, #1
 c020484:	429f      	cmp	r7, r3
 c020486:	d1f6      	bne.n	c020476 <mbedtls_cipher_cmac_finish+0x86>
        cmac_xor_block( M_last, M_last, K2, block_size );
 c020488:	463b      	mov	r3, r7
 c02048a:	4621      	mov	r1, r4
 c02048c:	aa08      	add	r2, sp, #32
        cmac_xor_block( M_last, last_block, K1, block_size );
 c02048e:	4620      	mov	r0, r4
 c020490:	f7ff ff16 	bl	c0202c0 <cmac_xor_block>
    }


    cmac_xor_block( state, M_last, state, block_size );
 c020494:	4621      	mov	r1, r4
 c020496:	463b      	mov	r3, r7
 c020498:	462a      	mov	r2, r5
 c02049a:	4628      	mov	r0, r5
 c02049c:	f7ff ff10 	bl	c0202c0 <cmac_xor_block>
    if( ( ret = mbedtls_cipher_update( ctx, state, block_size, state,
 c0204a0:	9600      	str	r6, [sp, #0]
 c0204a2:	462b      	mov	r3, r5
 c0204a4:	463a      	mov	r2, r7
 c0204a6:	4629      	mov	r1, r5
 c0204a8:	4650      	mov	r0, sl
 c0204aa:	f7ff fcbb 	bl	c01fe24 <mbedtls_cipher_update>
 c0204ae:	4604      	mov	r4, r0
 c0204b0:	b920      	cbnz	r0, c0204bc <mbedtls_cipher_cmac_finish+0xcc>
                                       &olen ) ) != 0 )
    {
        goto exit;
    }

    memcpy( output, state, block_size );
 c0204b2:	463a      	mov	r2, r7
 c0204b4:	4629      	mov	r1, r5
 c0204b6:	4648      	mov	r0, r9
 c0204b8:	f7f4 fa61 	bl	c01497e <memcpy>

exit:
    /* Wipe the generated keys on the stack, and any other transients to avoid
     * side channel leakage */
    mbedtls_platform_zeroize( K1, sizeof( K1 ) );
 c0204bc:	2110      	movs	r1, #16
 c0204be:	eb0d 0001 	add.w	r0, sp, r1
 c0204c2:	f006 f931 	bl	c026728 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( K2, sizeof( K2 ) );
 c0204c6:	2110      	movs	r1, #16
 c0204c8:	a808      	add	r0, sp, #32
 c0204ca:	f006 f92d 	bl	c026728 <mbedtls_platform_zeroize>

    cmac_ctx->unprocessed_len = 0;
 c0204ce:	2300      	movs	r3, #0
    mbedtls_platform_zeroize( cmac_ctx->unprocessed_block,
 c0204d0:	2110      	movs	r1, #16
 c0204d2:	4640      	mov	r0, r8
    cmac_ctx->unprocessed_len = 0;
 c0204d4:	622b      	str	r3, [r5, #32]
    mbedtls_platform_zeroize( cmac_ctx->unprocessed_block,
 c0204d6:	f006 f927 	bl	c026728 <mbedtls_platform_zeroize>
                              sizeof( cmac_ctx->unprocessed_block ) );

    mbedtls_platform_zeroize( state, MBEDTLS_CIPHER_BLKSIZE_MAX );
 c0204da:	2110      	movs	r1, #16
 c0204dc:	4628      	mov	r0, r5
 c0204de:	f006 f923 	bl	c026728 <mbedtls_platform_zeroize>
    return( ret );
}
 c0204e2:	4620      	mov	r0, r4
 c0204e4:	b010      	add	sp, #64	; 0x40
 c0204e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            padded_block[j] = 0x80;
 c0204ea:	bf0c      	ite	eq
 c0204ec:	54a0      	strbeq	r0, [r4, r2]
            padded_block[j] = 0x00;
 c0204ee:	54e1      	strbne	r1, [r4, r3]
 c0204f0:	e7c7      	b.n	c020482 <mbedtls_cipher_cmac_finish+0x92>
    for( j = 0; j < padded_block_len; j++ )
 c0204f2:	2300      	movs	r3, #0
            padded_block[j] = 0x80;
 c0204f4:	2080      	movs	r0, #128	; 0x80
            padded_block[j] = 0x00;
 c0204f6:	4619      	mov	r1, r3
 c0204f8:	e7c4      	b.n	c020484 <mbedtls_cipher_cmac_finish+0x94>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 c0204fa:	4c01      	ldr	r4, [pc, #4]	; (c020500 <mbedtls_cipher_cmac_finish+0x110>)
 c0204fc:	e7f1      	b.n	c0204e2 <mbedtls_cipher_cmac_finish+0xf2>
 c0204fe:	bf00      	nop
 c020500:	ffff9f00 	.word	0xffff9f00

0c020504 <block_cipher_df>:
    ctx->reseed_interval = interval;
}

static int block_cipher_df( unsigned char *output,
                            const unsigned char *data, size_t data_len )
{
 c020504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    int i, j;
    size_t buf_len, use_len;

    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 c020508:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
{
 c02050c:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
 c020510:	4607      	mov	r7, r0
 c020512:	460e      	mov	r6, r1
 c020514:	4615      	mov	r5, r2
    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 c020516:	f200 80a3 	bhi.w	c020660 <block_cipher_df+0x15c>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( buf, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT +
 c02051a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 c02051e:	2100      	movs	r1, #0
 c020520:	a85e      	add	r0, sp, #376	; 0x178
 c020522:	f7f4 fa50 	bl	c0149c6 <memset>
            MBEDTLS_CTR_DRBG_BLOCKSIZE + 16 );
    mbedtls_aes_init( &aes_ctx );
 c020526:	a818      	add	r0, sp, #96	; 0x60
 c020528:	f7fb ffaa 	bl	c01c480 <mbedtls_aes_init>
     *     (Total is padded to a multiple of 16-bytes with zeroes)
     */
    p = buf + MBEDTLS_CTR_DRBG_BLOCKSIZE;
    *p++ = ( data_len >> 24 ) & 0xff;
    *p++ = ( data_len >> 16 ) & 0xff;
    *p++ = ( data_len >> 8  ) & 0xff;
 c02052c:	0a2b      	lsrs	r3, r5, #8
 c02052e:	f88d 318a 	strb.w	r3, [sp, #394]	; 0x18a
    *p++ = ( data_len       ) & 0xff;
    p += 3;
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
 c020532:	2330      	movs	r3, #48	; 0x30
    *p++ = ( data_len >> 24 ) & 0xff;
 c020534:	2400      	movs	r4, #0
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
 c020536:	f88d 318f 	strb.w	r3, [sp, #399]	; 0x18f
    memcpy( p, data, data_len );
 c02053a:	ab64      	add	r3, sp, #400	; 0x190
 c02053c:	462a      	mov	r2, r5
 c02053e:	4618      	mov	r0, r3
 c020540:	4631      	mov	r1, r6
    *p++ = ( data_len >> 24 ) & 0xff;
 c020542:	f8ad 4188 	strh.w	r4, [sp, #392]	; 0x188
    *p++ = ( data_len       ) & 0xff;
 c020546:	f88d 518b 	strb.w	r5, [sp, #395]	; 0x18b
    memcpy( p, data, data_len );
 c02054a:	f7f4 fa18 	bl	c01497e <memcpy>
    p[data_len] = 0x80;
 c02054e:	2280      	movs	r2, #128	; 0x80

    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;

    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 c020550:	4623      	mov	r3, r4
    p[data_len] = 0x80;
 c020552:	5542      	strb	r2, [r0, r5]
        key[i] = i;
 c020554:	f10d 0810 	add.w	r8, sp, #16
 c020558:	f803 3008 	strb.w	r3, [r3, r8]
    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 c02055c:	3301      	adds	r3, #1
 c02055e:	2b20      	cmp	r3, #32
 c020560:	d1fa      	bne.n	c020558 <block_cipher_df+0x54>

    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, key,
 c020562:	f44f 7280 	mov.w	r2, #256	; 0x100
 c020566:	4641      	mov	r1, r8
 c020568:	a818      	add	r0, sp, #96	; 0x60
 c02056a:	f7fb ff95 	bl	c01c498 <mbedtls_aes_setkey_enc>
 c02056e:	4604      	mov	r4, r0
 c020570:	2800      	cmp	r0, #0
 c020572:	d156      	bne.n	c020622 <block_cipher_df+0x11e>
    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;
 c020574:	f105 0619 	add.w	r6, r5, #25
    }

    /*
     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data
     */
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 c020578:	4681      	mov	r9, r0
    {
        p = buf;
        memset( chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 c02057a:	466d      	mov	r5, sp
 c02057c:	2210      	movs	r2, #16
 c02057e:	2100      	movs	r1, #0
 c020580:	4628      	mov	r0, r5
 c020582:	f7f4 fa20 	bl	c0149c6 <memset>
        use_len = buf_len;
 c020586:	46b3      	mov	fp, r6
 c020588:	f20d 1a77 	addw	sl, sp, #375	; 0x177
 c02058c:	f10d 33ff 	add.w	r3, sp, #4294967295
 c020590:	f10a 0110 	add.w	r1, sl, #16

        while( use_len > 0 )
        {
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
                chain[i] ^= p[i];
 c020594:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 c020598:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
 c02059c:	4042      	eors	r2, r0
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 c02059e:	4551      	cmp	r1, sl
                chain[i] ^= p[i];
 c0205a0:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 c0205a2:	d1f7      	bne.n	c020594 <block_cipher_df+0x90>
            p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
 c0205a4:	f1bb 0f10 	cmp.w	fp, #16
                       MBEDTLS_CTR_DRBG_BLOCKSIZE : use_len;

            if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT,
 c0205a8:	462b      	mov	r3, r5
 c0205aa:	462a      	mov	r2, r5
 c0205ac:	f04f 0101 	mov.w	r1, #1
 c0205b0:	a818      	add	r0, sp, #96	; 0x60
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
 c0205b2:	bf94      	ite	ls
 c0205b4:	ebab 0b0b 	subls.w	fp, fp, fp
 c0205b8:	f1ab 0b10 	subhi.w	fp, fp, #16
            if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT,
 c0205bc:	f7fc fb94 	bl	c01cce8 <mbedtls_aes_crypt_ecb>
 c0205c0:	4604      	mov	r4, r0
 c0205c2:	bb70      	cbnz	r0, c020622 <block_cipher_df+0x11e>
        while( use_len > 0 )
 c0205c4:	f1bb 0f00 	cmp.w	fp, #0
 c0205c8:	d1e0      	bne.n	c02058c <block_cipher_df+0x88>
            {
                goto exit;
            }
        }

        memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 c0205ca:	ab0c      	add	r3, sp, #48	; 0x30
 c0205cc:	eb09 0403 	add.w	r4, r9, r3
 c0205d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 c0205d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

        /*
         * Update IV
         */
        buf[3]++;
 c0205d8:	f89d 317b 	ldrb.w	r3, [sp, #379]	; 0x17b
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 c0205dc:	f109 0910 	add.w	r9, r9, #16
        buf[3]++;
 c0205e0:	3301      	adds	r3, #1
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 c0205e2:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
        buf[3]++;
 c0205e6:	f88d 317b 	strb.w	r3, [sp, #379]	; 0x17b
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 c0205ea:	d1c7      	bne.n	c02057c <block_cipher_df+0x78>
    }

    /*
     * Do final encryption with reduced data
     */
    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, tmp,
 c0205ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 c0205f0:	a90c      	add	r1, sp, #48	; 0x30
 c0205f2:	a818      	add	r0, sp, #96	; 0x60
 c0205f4:	f7fb ff50 	bl	c01c498 <mbedtls_aes_setkey_enc>
 c0205f8:	4604      	mov	r4, r0
 c0205fa:	b990      	cbnz	r0, c020622 <block_cipher_df+0x11e>
                                        MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
    {
        goto exit;
    }
    iv = tmp + MBEDTLS_CTR_DRBG_KEYSIZE;
    p = output;
 c0205fc:	463d      	mov	r5, r7
 c0205fe:	f107 0930 	add.w	r9, r7, #48	; 0x30

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
    {
        if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT,
 c020602:	ae14      	add	r6, sp, #80	; 0x50
 c020604:	4633      	mov	r3, r6
 c020606:	4632      	mov	r2, r6
 c020608:	2101      	movs	r1, #1
 c02060a:	a818      	add	r0, sp, #96	; 0x60
 c02060c:	f7fc fb6c 	bl	c01cce8 <mbedtls_aes_crypt_ecb>
 c020610:	4604      	mov	r4, r0
 c020612:	b930      	cbnz	r0, c020622 <block_cipher_df+0x11e>
                                           iv, iv ) ) != 0 )
        {
            goto exit;
        }
        memcpy( p, iv, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 c020614:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 c020618:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 c02061c:	3510      	adds	r5, #16
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 c02061e:	45a9      	cmp	r9, r5
 c020620:	d1f0      	bne.n	c020604 <block_cipher_df+0x100>
    }
exit:
    mbedtls_aes_free( &aes_ctx );
 c020622:	a818      	add	r0, sp, #96	; 0x60
 c020624:	f7fb ff31 	bl	c01c48a <mbedtls_aes_free>
    /*
    * tidy up the stack
    */
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 c020628:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 c02062c:	a85e      	add	r0, sp, #376	; 0x178
 c02062e:	f006 f87b 	bl	c026728 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 c020632:	2130      	movs	r1, #48	; 0x30
 c020634:	eb0d 0001 	add.w	r0, sp, r1
 c020638:	f006 f876 	bl	c026728 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( key, sizeof( key ) );
 c02063c:	2120      	movs	r1, #32
 c02063e:	4640      	mov	r0, r8
 c020640:	f006 f872 	bl	c026728 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( chain, sizeof( chain ) );
 c020644:	2110      	movs	r1, #16
 c020646:	4668      	mov	r0, sp
 c020648:	f006 f86e 	bl	c026728 <mbedtls_platform_zeroize>
    if( 0 != ret )
 c02064c:	b11c      	cbz	r4, c020656 <block_cipher_df+0x152>
    {
        /*
        * wipe partial seed from memory
        */
        mbedtls_platform_zeroize( output, MBEDTLS_CTR_DRBG_SEEDLEN );
 c02064e:	2130      	movs	r1, #48	; 0x30
 c020650:	4638      	mov	r0, r7
 c020652:	f006 f869 	bl	c026728 <mbedtls_platform_zeroize>
    }

    return( ret );
}
 c020656:	4620      	mov	r0, r4
 c020658:	f50d 7d47 	add.w	sp, sp, #796	; 0x31c
 c02065c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 c020660:	f06f 0437 	mvn.w	r4, #55	; 0x37
 c020664:	e7f7      	b.n	c020656 <block_cipher_df+0x152>

0c020666 <ctr_drbg_update_internal>:
 *   ctx->aes_ctx = Key
 *   ctx->counter = V
 */
static int ctr_drbg_update_internal( mbedtls_ctr_drbg_context *ctx,
                          const unsigned char data[MBEDTLS_CTR_DRBG_SEEDLEN] )
{
 c020666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c02066a:	b08c      	sub	sp, #48	; 0x30
 c02066c:	4604      	mov	r4, r0
 c02066e:	460e      	mov	r6, r1
    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char *p = tmp;
    int i, j;
    int ret = 0;

    memset( tmp, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 c020670:	2230      	movs	r2, #48	; 0x30
 c020672:	2100      	movs	r1, #0
 c020674:	4668      	mov	r0, sp
 c020676:	f7f4 f9a6 	bl	c0149c6 <memset>

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 c02067a:	f04f 0800 	mov.w	r8, #0
                break;

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT,
 c02067e:	f104 0720 	add.w	r7, r4, #32
 c020682:	eb0d 0308 	add.w	r3, sp, r8
 c020686:	f104 0110 	add.w	r1, r4, #16
            if( ++ctx->counter[i - 1] != 0 )
 c02068a:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
 c02068e:	3201      	adds	r2, #1
 c020690:	b2d2      	uxtb	r2, r2
 c020692:	700a      	strb	r2, [r1, #0]
 c020694:	b90a      	cbnz	r2, c02069a <ctr_drbg_update_internal+0x34>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 c020696:	42a1      	cmp	r1, r4
 c020698:	d1f7      	bne.n	c02068a <ctr_drbg_update_internal+0x24>
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT,
 c02069a:	4622      	mov	r2, r4
 c02069c:	2101      	movs	r1, #1
 c02069e:	4638      	mov	r0, r7
 c0206a0:	f7fc fb22 	bl	c01cce8 <mbedtls_aes_crypt_ecb>
 c0206a4:	4605      	mov	r5, r0
 c0206a6:	bb18      	cbnz	r0, c0206f0 <ctr_drbg_update_internal+0x8a>
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 c0206a8:	f108 0810 	add.w	r8, r8, #16
 c0206ac:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 c0206b0:	d1e7      	bne.n	c020682 <ctr_drbg_update_internal+0x1c>
 c0206b2:	1e73      	subs	r3, r6, #1
 c0206b4:	f10d 32ff 	add.w	r2, sp, #4294967295
 c0206b8:	362f      	adds	r6, #47	; 0x2f

        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
    }

    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
        tmp[i] ^= data[i];
 c0206ba:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 c0206be:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 c0206c2:	4041      	eors	r1, r0
    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 c0206c4:	42b3      	cmp	r3, r6
        tmp[i] ^= data[i];
 c0206c6:	7011      	strb	r1, [r2, #0]
    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 c0206c8:	d1f7      	bne.n	c0206ba <ctr_drbg_update_internal+0x54>

    /*
     * Update key and counter
     */
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, tmp,
 c0206ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 c0206ce:	4669      	mov	r1, sp
 c0206d0:	4638      	mov	r0, r7
 c0206d2:	f7fb fee1 	bl	c01c498 <mbedtls_aes_setkey_enc>
 c0206d6:	4605      	mov	r5, r0
 c0206d8:	b950      	cbnz	r0, c0206f0 <ctr_drbg_update_internal+0x8a>
                                        MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
    {
        goto exit;
    }
    memcpy( ctx->counter, tmp + MBEDTLS_CTR_DRBG_KEYSIZE,
 c0206da:	aa08      	add	r2, sp, #32
 c0206dc:	ae0c      	add	r6, sp, #48	; 0x30
 c0206de:	4613      	mov	r3, r2
 c0206e0:	cb03      	ldmia	r3!, {r0, r1}
 c0206e2:	42b3      	cmp	r3, r6
 c0206e4:	6020      	str	r0, [r4, #0]
 c0206e6:	6061      	str	r1, [r4, #4]
 c0206e8:	461a      	mov	r2, r3
 c0206ea:	f104 0408 	add.w	r4, r4, #8
 c0206ee:	d1f6      	bne.n	c0206de <ctr_drbg_update_internal+0x78>
            MBEDTLS_CTR_DRBG_BLOCKSIZE );

exit:
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 c0206f0:	4668      	mov	r0, sp
 c0206f2:	2130      	movs	r1, #48	; 0x30
 c0206f4:	f006 f818 	bl	c026728 <mbedtls_platform_zeroize>
    return( ret );
}
 c0206f8:	4628      	mov	r0, r5
 c0206fa:	b00c      	add	sp, #48	; 0x30
 c0206fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0c020700 <mbedtls_ctr_drbg_init>:
    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );
 c020700:	f44f 72a0 	mov.w	r2, #320	; 0x140
 c020704:	2100      	movs	r1, #0
 c020706:	f7f4 b95e 	b.w	c0149c6 <memset>

0c02070a <mbedtls_ctr_drbg_free>:
{
 c02070a:	b510      	push	{r4, lr}
    if( ctx == NULL )
 c02070c:	4604      	mov	r4, r0
 c02070e:	b148      	cbz	r0, c020724 <mbedtls_ctr_drbg_free+0x1a>
    mbedtls_aes_free( &ctx->aes_ctx );
 c020710:	3020      	adds	r0, #32
 c020712:	f7fb feba 	bl	c01c48a <mbedtls_aes_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ctr_drbg_context ) );
 c020716:	4620      	mov	r0, r4
}
 c020718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ctr_drbg_context ) );
 c02071c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 c020720:	f006 b802 	b.w	c026728 <mbedtls_platform_zeroize>
}
 c020724:	bd10      	pop	{r4, pc}

0c020726 <mbedtls_ctr_drbg_reseed>:
 * and with output
 *   ctx contains new_working_state
 */
int mbedtls_ctr_drbg_reseed( mbedtls_ctr_drbg_context *ctx,
                     const unsigned char *additional, size_t len )
{
 c020726:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char seed[MBEDTLS_CTR_DRBG_MAX_SEED_INPUT];
    size_t seedlen = 0;
    int ret;

    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 c020728:	6984      	ldr	r4, [r0, #24]
{
 c02072a:	b0e1      	sub	sp, #388	; 0x184
    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 c02072c:	f5b4 7fc0 	cmp.w	r4, #384	; 0x180
{
 c020730:	4605      	mov	r5, r0
 c020732:	460f      	mov	r7, r1
 c020734:	4616      	mov	r6, r2
    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 c020736:	d832      	bhi.n	c02079e <mbedtls_ctr_drbg_reseed+0x78>
        len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT - ctx->entropy_len )
 c020738:	f5c4 73c0 	rsb	r3, r4, #384	; 0x180
    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 c02073c:	4293      	cmp	r3, r2
 c02073e:	d32e      	bcc.n	c02079e <mbedtls_ctr_drbg_reseed+0x78>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( seed, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT );
 c020740:	f44f 72c0 	mov.w	r2, #384	; 0x180
 c020744:	2100      	movs	r1, #0
 c020746:	4668      	mov	r0, sp
 c020748:	f7f4 f93d 	bl	c0149c6 <memset>

    /*
     * Gather entropy_len bytes of entropy to seed state
     */
    if( 0 != ctx->f_entropy( ctx->p_entropy, seed,
 c02074c:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
 c020750:	4622      	mov	r2, r4
 c020752:	4669      	mov	r1, sp
 c020754:	f8d5 013c 	ldr.w	r0, [r5, #316]	; 0x13c
 c020758:	4798      	blx	r3
 c02075a:	bb18      	cbnz	r0, c0207a4 <mbedtls_ctr_drbg_reseed+0x7e>
                             ctx->entropy_len ) )
    {
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
    }

    seedlen += ctx->entropy_len;
 c02075c:	69ac      	ldr	r4, [r5, #24]

    /*
     * Add additional data
     */
    if( additional && len )
 c02075e:	b13f      	cbz	r7, c020770 <mbedtls_ctr_drbg_reseed+0x4a>
 c020760:	b136      	cbz	r6, c020770 <mbedtls_ctr_drbg_reseed+0x4a>
    {
        memcpy( seed + seedlen, additional, len );
 c020762:	eb0d 0004 	add.w	r0, sp, r4
 c020766:	4632      	mov	r2, r6
 c020768:	4639      	mov	r1, r7
 c02076a:	f7f4 f908 	bl	c01497e <memcpy>
        seedlen += len;
 c02076e:	4434      	add	r4, r6
    }

    /*
     * Reduce to 384 bits
     */
    if( ( ret = block_cipher_df( seed, seed, seedlen ) ) != 0 )
 c020770:	4622      	mov	r2, r4
 c020772:	4669      	mov	r1, sp
 c020774:	4668      	mov	r0, sp
 c020776:	f7ff fec5 	bl	c020504 <block_cipher_df>
 c02077a:	4604      	mov	r4, r0
 c02077c:	b938      	cbnz	r0, c02078e <mbedtls_ctr_drbg_reseed+0x68>
        goto exit;

    /*
     * Update state
     */
    if( ( ret = ctr_drbg_update_internal( ctx, seed ) ) != 0 )
 c02077e:	4669      	mov	r1, sp
 c020780:	4628      	mov	r0, r5
 c020782:	f7ff ff70 	bl	c020666 <ctr_drbg_update_internal>
 c020786:	4604      	mov	r4, r0
 c020788:	b908      	cbnz	r0, c02078e <mbedtls_ctr_drbg_reseed+0x68>
        goto exit;
    ctx->reseed_counter = 1;
 c02078a:	2301      	movs	r3, #1
 c02078c:	612b      	str	r3, [r5, #16]

exit:
    mbedtls_platform_zeroize( seed, sizeof( seed ) );
 c02078e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 c020792:	4668      	mov	r0, sp
 c020794:	f005 ffc8 	bl	c026728 <mbedtls_platform_zeroize>
    return( ret );
}
 c020798:	4620      	mov	r0, r4
 c02079a:	b061      	add	sp, #388	; 0x184
 c02079c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 c02079e:	f06f 0437 	mvn.w	r4, #55	; 0x37
 c0207a2:	e7f9      	b.n	c020798 <mbedtls_ctr_drbg_reseed+0x72>
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
 c0207a4:	f06f 0433 	mvn.w	r4, #51	; 0x33
 c0207a8:	e7f6      	b.n	c020798 <mbedtls_ctr_drbg_reseed+0x72>

0c0207aa <mbedtls_ctr_drbg_seed_entropy_len>:
{
 c0207aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c0207ae:	4604      	mov	r4, r0
 c0207b0:	b088      	sub	sp, #32
 c0207b2:	4688      	mov	r8, r1
 c0207b4:	4617      	mov	r7, r2
    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 c0207b6:	2100      	movs	r1, #0
 c0207b8:	2220      	movs	r2, #32
    mbedtls_aes_init( &ctx->aes_ctx );
 c0207ba:	f104 0520 	add.w	r5, r4, #32
    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 c0207be:	4668      	mov	r0, sp
{
 c0207c0:	461e      	mov	r6, r3
    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 c0207c2:	f7f4 f900 	bl	c0149c6 <memset>
    mbedtls_aes_init( &ctx->aes_ctx );
 c0207c6:	4628      	mov	r0, r5
 c0207c8:	f7fb fe5a 	bl	c01c480 <mbedtls_aes_init>
    ctx->entropy_len = entropy_len;
 c0207cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ctx->f_entropy = f_entropy;
 c0207ce:	f8c4 8138 	str.w	r8, [r4, #312]	; 0x138
    ctx->entropy_len = entropy_len;
 c0207d2:	61a3      	str	r3, [r4, #24]
    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;
 c0207d4:	f242 7310 	movw	r3, #10000	; 0x2710
    ctx->p_entropy = p_entropy;
 c0207d8:	f8c4 713c 	str.w	r7, [r4, #316]	; 0x13c
    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;
 c0207dc:	61e3      	str	r3, [r4, #28]
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, key,
 c0207de:	f44f 7280 	mov.w	r2, #256	; 0x100
 c0207e2:	4669      	mov	r1, sp
 c0207e4:	4628      	mov	r0, r5
 c0207e6:	f7fb fe57 	bl	c01c498 <mbedtls_aes_setkey_enc>
 c0207ea:	b920      	cbnz	r0, c0207f6 <mbedtls_ctr_drbg_seed_entropy_len+0x4c>
    if( ( ret = mbedtls_ctr_drbg_reseed( ctx, custom, len ) ) != 0 )
 c0207ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 c0207ee:	4631      	mov	r1, r6
 c0207f0:	4620      	mov	r0, r4
 c0207f2:	f7ff ff98 	bl	c020726 <mbedtls_ctr_drbg_reseed>
}
 c0207f6:	b008      	add	sp, #32
 c0207f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0c0207fc <mbedtls_ctr_drbg_seed>:
{
 c0207fc:	b513      	push	{r0, r1, r4, lr}
    return( mbedtls_ctr_drbg_seed_entropy_len( ctx, f_entropy, p_entropy,
 c0207fe:	2430      	movs	r4, #48	; 0x30
 c020800:	9401      	str	r4, [sp, #4]
 c020802:	9c04      	ldr	r4, [sp, #16]
 c020804:	9400      	str	r4, [sp, #0]
 c020806:	f7ff ffd0 	bl	c0207aa <mbedtls_ctr_drbg_seed_entropy_len>
}
 c02080a:	b002      	add	sp, #8
 c02080c:	bd10      	pop	{r4, pc}

0c02080e <mbedtls_ctr_drbg_random_with_add>:
 *   ctx contains new_working_state
 */
int mbedtls_ctr_drbg_random_with_add( void *p_rng,
                              unsigned char *output, size_t output_len,
                              const unsigned char *additional, size_t add_len )
{
 c02080e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unsigned char *p = output;
    unsigned char tmp[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    int i;
    size_t use_len;

    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
 c020812:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
{
 c020816:	b090      	sub	sp, #64	; 0x40
 c020818:	4604      	mov	r4, r0
 c02081a:	460e      	mov	r6, r1
 c02081c:	4615      	mov	r5, r2
 c02081e:	4698      	mov	r8, r3
 c020820:	9f16      	ldr	r7, [sp, #88]	; 0x58
    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
 c020822:	d859      	bhi.n	c0208d8 <mbedtls_ctr_drbg_random_with_add+0xca>
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );

    if( add_len > MBEDTLS_CTR_DRBG_MAX_INPUT )
 c020824:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 c020828:	d859      	bhi.n	c0208de <mbedtls_ctr_drbg_random_with_add+0xd0>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( add_input, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 c02082a:	2230      	movs	r2, #48	; 0x30
 c02082c:	2100      	movs	r1, #0
 c02082e:	a804      	add	r0, sp, #16
 c020830:	f7f4 f8c9 	bl	c0149c6 <memset>

    if( ctx->reseed_counter > ctx->reseed_interval ||
 c020834:	6922      	ldr	r2, [r4, #16]
 c020836:	69e3      	ldr	r3, [r4, #28]
 c020838:	429a      	cmp	r2, r3
 c02083a:	dc01      	bgt.n	c020840 <mbedtls_ctr_drbg_random_with_add+0x32>
 c02083c:	6963      	ldr	r3, [r4, #20]
 c02083e:	b18b      	cbz	r3, c020864 <mbedtls_ctr_drbg_random_with_add+0x56>
        ctx->prediction_resistance )
    {
        if( ( ret = mbedtls_ctr_drbg_reseed( ctx, additional, add_len ) ) != 0 )
 c020840:	463a      	mov	r2, r7
 c020842:	4641      	mov	r1, r8
 c020844:	4620      	mov	r0, r4
 c020846:	f7ff ff6e 	bl	c020726 <mbedtls_ctr_drbg_reseed>
 c02084a:	bb10      	cbnz	r0, c020892 <mbedtls_ctr_drbg_random_with_add+0x84>
                break;

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT,
 c02084c:	f104 0720 	add.w	r7, r4, #32
    while( output_len > 0 )
 c020850:	bb15      	cbnz	r5, c020898 <mbedtls_ctr_drbg_random_with_add+0x8a>
        memcpy( p, tmp, use_len );
        p += use_len;
        output_len -= use_len;
    }

    if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
 c020852:	a904      	add	r1, sp, #16
 c020854:	4620      	mov	r0, r4
 c020856:	f7ff ff06 	bl	c020666 <ctr_drbg_update_internal>
 c02085a:	b988      	cbnz	r0, c020880 <mbedtls_ctr_drbg_random_with_add+0x72>
        goto exit;

    ctx->reseed_counter++;
 c02085c:	6923      	ldr	r3, [r4, #16]
 c02085e:	3301      	adds	r3, #1
 c020860:	6123      	str	r3, [r4, #16]
 c020862:	e00d      	b.n	c020880 <mbedtls_ctr_drbg_random_with_add+0x72>
    if( add_len > 0 )
 c020864:	2f00      	cmp	r7, #0
 c020866:	d0f1      	beq.n	c02084c <mbedtls_ctr_drbg_random_with_add+0x3e>
        if( ( ret = block_cipher_df( add_input, additional, add_len ) ) != 0 )
 c020868:	463a      	mov	r2, r7
 c02086a:	4641      	mov	r1, r8
 c02086c:	a804      	add	r0, sp, #16
 c02086e:	f7ff fe49 	bl	c020504 <block_cipher_df>
 c020872:	b928      	cbnz	r0, c020880 <mbedtls_ctr_drbg_random_with_add+0x72>
        if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
 c020874:	a904      	add	r1, sp, #16
 c020876:	4620      	mov	r0, r4
 c020878:	f7ff fef5 	bl	c020666 <ctr_drbg_update_internal>
 c02087c:	2800      	cmp	r0, #0
 c02087e:	d0e5      	beq.n	c02084c <mbedtls_ctr_drbg_random_with_add+0x3e>

exit:
    mbedtls_platform_zeroize( add_input, sizeof( add_input ) );
 c020880:	2130      	movs	r1, #48	; 0x30
 c020882:	a804      	add	r0, sp, #16
 c020884:	f005 ff50 	bl	c026728 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 c020888:	4668      	mov	r0, sp
 c02088a:	2110      	movs	r1, #16
 c02088c:	f005 ff4c 	bl	c026728 <mbedtls_platform_zeroize>
    return( 0 );
 c020890:	2000      	movs	r0, #0
}
 c020892:	b010      	add	sp, #64	; 0x40
 c020894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c020898:	f104 0210 	add.w	r2, r4, #16
            if( ++ctx->counter[i - 1] != 0 )
 c02089c:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 c0208a0:	3301      	adds	r3, #1
 c0208a2:	b2db      	uxtb	r3, r3
 c0208a4:	7013      	strb	r3, [r2, #0]
 c0208a6:	b90b      	cbnz	r3, c0208ac <mbedtls_ctr_drbg_random_with_add+0x9e>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 c0208a8:	42a2      	cmp	r2, r4
 c0208aa:	d1f7      	bne.n	c02089c <mbedtls_ctr_drbg_random_with_add+0x8e>
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT,
 c0208ac:	466b      	mov	r3, sp
 c0208ae:	4622      	mov	r2, r4
 c0208b0:	2101      	movs	r1, #1
 c0208b2:	4638      	mov	r0, r7
 c0208b4:	f7fc fa18 	bl	c01cce8 <mbedtls_aes_crypt_ecb>
 c0208b8:	2800      	cmp	r0, #0
 c0208ba:	d1e1      	bne.n	c020880 <mbedtls_ctr_drbg_random_with_add+0x72>
        use_len = ( output_len > MBEDTLS_CTR_DRBG_BLOCKSIZE )
 c0208bc:	2d10      	cmp	r5, #16
 c0208be:	46a8      	mov	r8, r5
 c0208c0:	bf28      	it	cs
 c0208c2:	f04f 0810 	movcs.w	r8, #16
        memcpy( p, tmp, use_len );
 c0208c6:	4630      	mov	r0, r6
 c0208c8:	4642      	mov	r2, r8
 c0208ca:	4669      	mov	r1, sp
 c0208cc:	f7f4 f857 	bl	c01497e <memcpy>
        p += use_len;
 c0208d0:	4446      	add	r6, r8
        output_len -= use_len;
 c0208d2:	eba5 0508 	sub.w	r5, r5, r8
 c0208d6:	e7bb      	b.n	c020850 <mbedtls_ctr_drbg_random_with_add+0x42>
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );
 c0208d8:	f06f 0035 	mvn.w	r0, #53	; 0x35
 c0208dc:	e7d9      	b.n	c020892 <mbedtls_ctr_drbg_random_with_add+0x84>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 c0208de:	f06f 0037 	mvn.w	r0, #55	; 0x37
 c0208e2:	e7d6      	b.n	c020892 <mbedtls_ctr_drbg_random_with_add+0x84>

0c0208e4 <mbedtls_ctr_drbg_random>:
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    ret = mbedtls_ctr_drbg_random_with_add( ctx, output, output_len, NULL, 0 );
 c0208e4:	2300      	movs	r3, #0
{
 c0208e6:	b507      	push	{r0, r1, r2, lr}
    ret = mbedtls_ctr_drbg_random_with_add( ctx, output, output_len, NULL, 0 );
 c0208e8:	9300      	str	r3, [sp, #0]
 c0208ea:	f7ff ff90 	bl	c02080e <mbedtls_ctr_drbg_random_with_add>
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
}
 c0208ee:	b003      	add	sp, #12
 c0208f0:	f85d fb04 	ldr.w	pc, [sp], #4

0c0208f4 <mbedtls_ecdh_compute_shared>:
 */
int mbedtls_ecdh_compute_shared( mbedtls_ecp_group *grp, mbedtls_mpi *z,
                         const mbedtls_ecp_point *Q, const mbedtls_mpi *d,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng )
{
 c0208f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 c0208f6:	b08f      	sub	sp, #60	; 0x3c
 c0208f8:	4604      	mov	r4, r0
    mbedtls_ecp_point_init( &P );
 c0208fa:	a805      	add	r0, sp, #20
{
 c0208fc:	4617      	mov	r7, r2
 c0208fe:	461e      	mov	r6, r3
 c020900:	460d      	mov	r5, r1
    mbedtls_ecp_point_init( &P );
 c020902:	f001 f831 	bl	c021968 <mbedtls_ecp_point_init>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &P, d, Q,
 c020906:	2300      	movs	r3, #0
 c020908:	9302      	str	r3, [sp, #8]
 c02090a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 c02090c:	4620      	mov	r0, r4
 c02090e:	9301      	str	r3, [sp, #4]
 c020910:	9b14      	ldr	r3, [sp, #80]	; 0x50
 c020912:	4632      	mov	r2, r6
 c020914:	9300      	str	r3, [sp, #0]
 c020916:	a905      	add	r1, sp, #20
 c020918:	463b      	mov	r3, r7
 c02091a:	f001 fe23 	bl	c022564 <mbedtls_ecp_mul_restartable>
 c02091e:	4604      	mov	r4, r0
 c020920:	b940      	cbnz	r0, c020934 <mbedtls_ecdh_compute_shared+0x40>
    if( mbedtls_ecp_is_zero( &P ) )
 c020922:	a805      	add	r0, sp, #20
 c020924:	f001 fc3a 	bl	c02219c <mbedtls_ecp_is_zero>
 c020928:	b950      	cbnz	r0, c020940 <mbedtls_ecdh_compute_shared+0x4c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( z, &P.X ) );
 c02092a:	a905      	add	r1, sp, #20
 c02092c:	4628      	mov	r0, r5
 c02092e:	f7fd f906 	bl	c01db3e <mbedtls_mpi_copy>
 c020932:	4604      	mov	r4, r0
    mbedtls_ecp_point_free( &P );
 c020934:	a805      	add	r0, sp, #20
 c020936:	f001 f854 	bl	c0219e2 <mbedtls_ecp_point_free>
    ECDH_VALIDATE_RET( Q != NULL );
    ECDH_VALIDATE_RET( d != NULL );
    ECDH_VALIDATE_RET( z != NULL );
    return( ecdh_compute_shared_restartable( grp, z, Q, d,
                                             f_rng, p_rng, NULL ) );
}
 c02093a:	4620      	mov	r0, r4
 c02093c:	b00f      	add	sp, #60	; 0x3c
 c02093e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 c020940:	4c00      	ldr	r4, [pc, #0]	; (c020944 <mbedtls_ecdh_compute_shared+0x50>)
 c020942:	e7f7      	b.n	c020934 <mbedtls_ecdh_compute_shared+0x40>
 c020944:	ffffb080 	.word	0xffffb080

0c020948 <mbedtls_ecdh_init>:
    ecdh_init_internal( ctx );
    mbedtls_ecp_point_init( &ctx->Vi  );
    mbedtls_ecp_point_init( &ctx->Vf  );
    mbedtls_mpi_init( &ctx->_d );
#else
    memset( ctx, 0, sizeof( mbedtls_ecdh_context ) );
 c020948:	22e0      	movs	r2, #224	; 0xe0
{
 c02094a:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_ecdh_context ) );
 c02094c:	2100      	movs	r1, #0
 c02094e:	f7f4 f83a 	bl	c0149c6 <memset>

    ctx->var = MBEDTLS_ECDH_VARIANT_NONE;
 c020952:	2200      	movs	r2, #0
#endif
    ctx->point_format = MBEDTLS_ECP_PF_UNCOMPRESSED;
 c020954:	7002      	strb	r2, [r0, #0]
    ctx->var = MBEDTLS_ECDH_VARIANT_NONE;
 c020956:	7082      	strb	r2, [r0, #2]
#if defined(MBEDTLS_ECP_RESTARTABLE)
    ctx->restart_enabled = 0;
#endif
}
 c020958:	bd08      	pop	{r3, pc}
	...

0c02095c <mbedtls_ecdh_setup>:
    return( ecdh_setup_internal( ctx, grp_id ) );
#else
    switch( grp_id )
    {
        default:
            ctx->point_format = MBEDTLS_ECP_PF_UNCOMPRESSED;
 c02095c:	2300      	movs	r3, #0
{
 c02095e:	b570      	push	{r4, r5, r6, lr}
 c020960:	4604      	mov	r4, r0
            ctx->point_format = MBEDTLS_ECP_PF_UNCOMPRESSED;
 c020962:	7003      	strb	r3, [r0, #0]
            ctx->var = MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0;
 c020964:	2301      	movs	r3, #1
{
 c020966:	460e      	mov	r6, r1
    mbedtls_ecp_group_init( &ctx->grp );
 c020968:	1d05      	adds	r5, r0, #4
            ctx->var = MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0;
 c02096a:	7083      	strb	r3, [r0, #2]
            ctx->grp_id = grp_id;
 c02096c:	7061      	strb	r1, [r4, #1]
    mbedtls_ecp_group_init( &ctx->grp );
 c02096e:	4628      	mov	r0, r5
 c020970:	f001 f808 	bl	c021984 <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &ctx->d  );
 c020974:	f104 0080 	add.w	r0, r4, #128	; 0x80
 c020978:	f7fd f86a 	bl	c01da50 <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &ctx->Q   );
 c02097c:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 c020980:	f000 fff2 	bl	c021968 <mbedtls_ecp_point_init>
    mbedtls_ecp_point_init( &ctx->Qp  );
 c020984:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 c020988:	f000 ffee 	bl	c021968 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &ctx->z  );
 c02098c:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
 c020990:	f7fd f85e 	bl	c01da50 <mbedtls_mpi_init>
    ret = mbedtls_ecp_group_load( &ctx->grp, grp_id );
 c020994:	4631      	mov	r1, r6
 c020996:	4628      	mov	r0, r5
 c020998:	f002 fc66 	bl	c023268 <mbedtls_ecp_group_load>
            ecdh_init_internal( &ctx->ctx.mbed_ecdh );
            return( ecdh_setup_internal( &ctx->ctx.mbed_ecdh, grp_id ) );
    }
#endif
}
 c02099c:	4b02      	ldr	r3, [pc, #8]	; (c0209a8 <mbedtls_ecdh_setup+0x4c>)
 c02099e:	2800      	cmp	r0, #0
 c0209a0:	bf14      	ite	ne
 c0209a2:	4618      	movne	r0, r3
 c0209a4:	2000      	moveq	r0, #0
 c0209a6:	bd70      	pop	{r4, r5, r6, pc}
 c0209a8:	ffffb180 	.word	0xffffb180

0c0209ac <mbedtls_ecdh_free>:

/*
 * Free context
 */
void mbedtls_ecdh_free( mbedtls_ecdh_context *ctx )
{
 c0209ac:	b510      	push	{r4, lr}
    if( ctx == NULL )
 c0209ae:	4604      	mov	r4, r0
 c0209b0:	b1c8      	cbz	r0, c0209e6 <mbedtls_ecdh_free+0x3a>
    mbedtls_ecp_point_free( &ctx->Vi );
    mbedtls_ecp_point_free( &ctx->Vf );
    mbedtls_mpi_free( &ctx->_d );
    ecdh_free_internal( ctx );
#else
    switch( ctx->var )
 c0209b2:	7883      	ldrb	r3, [r0, #2]
 c0209b4:	2b01      	cmp	r3, #1
 c0209b6:	d112      	bne.n	c0209de <mbedtls_ecdh_free+0x32>
    mbedtls_ecp_group_free( &ctx->grp );
 c0209b8:	3004      	adds	r0, #4
 c0209ba:	f001 f816 	bl	c0219ea <mbedtls_ecp_group_free>
    mbedtls_mpi_free( &ctx->d  );
 c0209be:	f104 0080 	add.w	r0, r4, #128	; 0x80
 c0209c2:	f7fd f84b 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_ecp_point_free( &ctx->Q   );
 c0209c6:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 c0209ca:	f001 f80a 	bl	c0219e2 <mbedtls_ecp_point_free>
    mbedtls_ecp_point_free( &ctx->Qp  );
 c0209ce:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 c0209d2:	f001 f806 	bl	c0219e2 <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &ctx->z  );
 c0209d6:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
 c0209da:	f7fd f83f 	bl	c01da5c <mbedtls_mpi_free>
            break;
        default:
            break;
    }

    ctx->point_format = MBEDTLS_ECP_PF_UNCOMPRESSED;
 c0209de:	2300      	movs	r3, #0
 c0209e0:	7023      	strb	r3, [r4, #0]
    ctx->var = MBEDTLS_ECDH_VARIANT_NONE;
 c0209e2:	70a3      	strb	r3, [r4, #2]
    ctx->grp_id = MBEDTLS_ECP_DP_NONE;
 c0209e4:	7063      	strb	r3, [r4, #1]
#endif
}
 c0209e6:	bd10      	pop	{r4, pc}

0c0209e8 <mbedtls_ecdh_get_params>:
    ECDH_VALIDATE_RET( ctx != NULL );
    ECDH_VALIDATE_RET( key != NULL );
    ECDH_VALIDATE_RET( side == MBEDTLS_ECDH_OURS ||
                       side == MBEDTLS_ECDH_THEIRS );

    if( mbedtls_ecdh_grp_id( ctx ) == MBEDTLS_ECP_DP_NONE )
 c0209e8:	7843      	ldrb	r3, [r0, #1]
{
 c0209ea:	b570      	push	{r4, r5, r6, lr}
 c0209ec:	460d      	mov	r5, r1
 c0209ee:	4604      	mov	r4, r0
 c0209f0:	4616      	mov	r6, r2
 c0209f2:	7809      	ldrb	r1, [r1, #0]
    if( mbedtls_ecdh_grp_id( ctx ) == MBEDTLS_ECP_DP_NONE )
 c0209f4:	b93b      	cbnz	r3, c020a06 <mbedtls_ecdh_get_params+0x1e>
    {
        /* This is the first call to get_params(). Set up the context
         * for use with the group. */
        if( ( ret = mbedtls_ecdh_setup( ctx, key->grp.id ) ) != 0 )
 c0209f6:	f7ff ffb1 	bl	c02095c <mbedtls_ecdh_setup>
 c0209fa:	b918      	cbnz	r0, c020a04 <mbedtls_ecdh_get_params+0x1c>
    }

#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    return( ecdh_get_params_internal( ctx, key, side ) );
#else
    switch( ctx->var )
 c0209fc:	78a3      	ldrb	r3, [r4, #2]
 c0209fe:	2b01      	cmp	r3, #1
 c020a00:	d004      	beq.n	c020a0c <mbedtls_ecdh_get_params+0x24>
    {
        case MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0:
            return( ecdh_get_params_internal( &ctx->ctx.mbed_ecdh,
                                              key, side ) );
        default:
            return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 c020a02:	4810      	ldr	r0, [pc, #64]	; (c020a44 <mbedtls_ecdh_get_params+0x5c>)
    }
#endif
}
 c020a04:	bd70      	pop	{r4, r5, r6, pc}
        if( mbedtls_ecdh_grp_id( ctx ) != key->grp.id )
 c020a06:	428b      	cmp	r3, r1
 c020a08:	d0f8      	beq.n	c0209fc <mbedtls_ecdh_get_params+0x14>
 c020a0a:	e7fa      	b.n	c020a02 <mbedtls_ecdh_get_params+0x1a>
    if( side == MBEDTLS_ECDH_THEIRS )
 c020a0c:	2e01      	cmp	r6, #1
 c020a0e:	d107      	bne.n	c020a20 <mbedtls_ecdh_get_params+0x38>
        return( mbedtls_ecp_copy( &ctx->Qp, &key->Q ) );
 c020a10:	f105 0188 	add.w	r1, r5, #136	; 0x88
 c020a14:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
}
 c020a18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return( mbedtls_ecp_copy( &ctx->Qp, &key->Q ) );
 c020a1c:	f001 b826 	b.w	c021a6c <mbedtls_ecp_copy>
    if( side != MBEDTLS_ECDH_OURS )
 c020a20:	2e00      	cmp	r6, #0
 c020a22:	d1ee      	bne.n	c020a02 <mbedtls_ecdh_get_params+0x1a>
    if( ( ret = mbedtls_ecp_copy( &ctx->Q, &key->Q ) ) != 0 ||
 c020a24:	f105 0188 	add.w	r1, r5, #136	; 0x88
 c020a28:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 c020a2c:	f001 f81e 	bl	c021a6c <mbedtls_ecp_copy>
 c020a30:	2800      	cmp	r0, #0
 c020a32:	d1e7      	bne.n	c020a04 <mbedtls_ecdh_get_params+0x1c>
 c020a34:	f105 017c 	add.w	r1, r5, #124	; 0x7c
 c020a38:	f104 0080 	add.w	r0, r4, #128	; 0x80
}
 c020a3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if( ( ret = mbedtls_ecp_copy( &ctx->Q, &key->Q ) ) != 0 ||
 c020a40:	f7fd b87d 	b.w	c01db3e <mbedtls_mpi_copy>
 c020a44:	ffffb080 	.word	0xffffb080

0c020a48 <mbedtls_ecdh_calc_secret>:
 */
int mbedtls_ecdh_calc_secret( mbedtls_ecdh_context *ctx, size_t *olen,
                              unsigned char *buf, size_t blen,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng )
{
 c020a48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 c020a4c:	460e      	mov	r6, r1

#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    return( ecdh_calc_secret_internal( ctx, olen, buf, blen, f_rng, p_rng,
                                       restart_enabled ) );
#else
    switch( ctx->var )
 c020a4e:	7881      	ldrb	r1, [r0, #2]
{
 c020a50:	4617      	mov	r7, r2
    switch( ctx->var )
 c020a52:	2901      	cmp	r1, #1
{
 c020a54:	4699      	mov	r9, r3
 c020a56:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 c020a5a:	4604      	mov	r4, r0
    switch( ctx->var )
 c020a5c:	d103      	bne.n	c020a66 <mbedtls_ecdh_calc_secret+0x1e>
    if( ctx == NULL || ctx->grp.pbits == 0 )
 c020a5e:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    {
        case MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0:
            return( ecdh_calc_secret_internal( &ctx->ctx.mbed_ecdh, olen, buf,
 c020a60:	f100 0804 	add.w	r8, r0, #4
    if( ctx == NULL || ctx->grp.pbits == 0 )
 c020a64:	b919      	cbnz	r1, c020a6e <mbedtls_ecdh_calc_secret+0x26>
                                               blen, f_rng, p_rng,
                                               restart_enabled ) );
        default:
            return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 c020a66:	4818      	ldr	r0, [pc, #96]	; (c020ac8 <mbedtls_ecdh_calc_secret+0x80>)
    }
#endif
}
 c020a68:	b003      	add	sp, #12
 c020a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( ret = mbedtls_ecdh_compute_shared( &ctx->grp, &ctx->z, &ctx->Qp,
 c020a6e:	f100 05d4 	add.w	r5, r0, #212	; 0xd4
 c020a72:	e9cd 3200 	strd	r3, r2, [sp]
 c020a76:	4629      	mov	r1, r5
 c020a78:	f100 0380 	add.w	r3, r0, #128	; 0x80
 c020a7c:	f100 02b0 	add.w	r2, r0, #176	; 0xb0
 c020a80:	4640      	mov	r0, r8
 c020a82:	f7ff ff37 	bl	c0208f4 <mbedtls_ecdh_compute_shared>
 c020a86:	2800      	cmp	r0, #0
 c020a88:	d1ee      	bne.n	c020a68 <mbedtls_ecdh_calc_secret+0x20>
    if( mbedtls_mpi_size( &ctx->z ) > blen )
 c020a8a:	4628      	mov	r0, r5
 c020a8c:	f7fd f99e 	bl	c01ddcc <mbedtls_mpi_size>
 c020a90:	4581      	cmp	r9, r0
 c020a92:	d3e8      	bcc.n	c020a66 <mbedtls_ecdh_calc_secret+0x1e>
    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
 c020a94:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    if( mbedtls_ecp_get_type( &ctx->grp ) == MBEDTLS_ECP_TYPE_MONTGOMERY )
 c020a96:	4640      	mov	r0, r8
    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
 c020a98:	f012 0307 	ands.w	r3, r2, #7
 c020a9c:	bf18      	it	ne
 c020a9e:	2301      	movne	r3, #1
 c020aa0:	eb03 03d2 	add.w	r3, r3, r2, lsr #3
 c020aa4:	6033      	str	r3, [r6, #0]
    if( mbedtls_ecp_get_type( &ctx->grp ) == MBEDTLS_ECP_TYPE_MONTGOMERY )
 c020aa6:	f000 ff55 	bl	c021954 <mbedtls_ecp_get_type>
 c020aaa:	2802      	cmp	r0, #2
        return mbedtls_mpi_write_binary_le( &ctx->z, buf, *olen );
 c020aac:	6832      	ldr	r2, [r6, #0]
 c020aae:	4639      	mov	r1, r7
 c020ab0:	4628      	mov	r0, r5
    if( mbedtls_ecp_get_type( &ctx->grp ) == MBEDTLS_ECP_TYPE_MONTGOMERY )
 c020ab2:	d104      	bne.n	c020abe <mbedtls_ecdh_calc_secret+0x76>
}
 c020ab4:	b003      	add	sp, #12
 c020ab6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return mbedtls_mpi_write_binary_le( &ctx->z, buf, *olen );
 c020aba:	f7fd b9f9 	b.w	c01deb0 <mbedtls_mpi_write_binary_le>
}
 c020abe:	b003      	add	sp, #12
 c020ac0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return mbedtls_mpi_write_binary( &ctx->z, buf, *olen );
 c020ac4:	f7fd ba29 	b.w	c01df1a <mbedtls_mpi_write_binary>
 c020ac8:	ffffb080 	.word	0xffffb080

0c020acc <derive_mpi>:
 * Derive a suitable integer for group grp from a buffer of length len
 * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3
 */
static int derive_mpi( const mbedtls_ecp_group *grp, mbedtls_mpi *x,
                       const unsigned char *buf, size_t blen )
{
 c020acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret;
    size_t n_size = ( grp->nbits + 7 ) / 8;
 c020ace:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
{
 c020ad0:	460e      	mov	r6, r1
    size_t n_size = ( grp->nbits + 7 ) / 8;
 c020ad2:	3407      	adds	r4, #7
 c020ad4:	08e4      	lsrs	r4, r4, #3
    size_t use_size = blen > n_size ? n_size : blen;
 c020ad6:	429c      	cmp	r4, r3
 c020ad8:	bf28      	it	cs
 c020ada:	461c      	movcs	r4, r3
{
 c020adc:	4611      	mov	r1, r2
 c020ade:	4605      	mov	r5, r0

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );
 c020ae0:	4622      	mov	r2, r4
 c020ae2:	4630      	mov	r0, r6
 c020ae4:	f7fd f9ac 	bl	c01de40 <mbedtls_mpi_read_binary>
 c020ae8:	4607      	mov	r7, r0
 c020aea:	b950      	cbnz	r0, c020b02 <derive_mpi+0x36>
    if( use_size * 8 > grp->nbits )
 c020aec:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 c020aee:	00e4      	lsls	r4, r4, #3
 c020af0:	428c      	cmp	r4, r1
 c020af2:	d808      	bhi.n	c020b06 <derive_mpi+0x3a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );

    /* While at it, reduce modulo N */
    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
 c020af4:	354c      	adds	r5, #76	; 0x4c
 c020af6:	4629      	mov	r1, r5
 c020af8:	4630      	mov	r0, r6
 c020afa:	f7fd fb5b 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c020afe:	2800      	cmp	r0, #0
 c020b00:	da09      	bge.n	c020b16 <derive_mpi+0x4a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );

cleanup:
    return( ret );
}
 c020b02:	4638      	mov	r0, r7
 c020b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );
 c020b06:	1a61      	subs	r1, r4, r1
 c020b08:	4630      	mov	r0, r6
 c020b0a:	f7fd fa83 	bl	c01e014 <mbedtls_mpi_shift_r>
 c020b0e:	2800      	cmp	r0, #0
 c020b10:	d0f0      	beq.n	c020af4 <derive_mpi+0x28>
cleanup:
 c020b12:	4607      	mov	r7, r0
    return( ret );
 c020b14:	e7f5      	b.n	c020b02 <derive_mpi+0x36>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
 c020b16:	462a      	mov	r2, r5
 c020b18:	4631      	mov	r1, r6
 c020b1a:	4630      	mov	r0, r6
}
 c020b1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
 c020b20:	f7fd bc5f 	b.w	c01e3e2 <mbedtls_mpi_sub_mpi>

0c020b24 <ecdsa_sign_restartable.isra.0>:
#if !defined(MBEDTLS_ECDSA_SIGN_ALT)
/*
 * Compute ECDSA signature of a hashed message (SEC1 4.1.3)
 * Obviously, compared to SEC1 4.1.3, we skip step 4 (hash message)
 */
static int ecdsa_sign_restartable( mbedtls_ecp_group *grp,
 c020b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c020b28:	469b      	mov	fp, r3
    mbedtls_ecp_point R;
    mbedtls_mpi k, e, t;
    mbedtls_mpi *pk = &k, *pr = r;

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
 c020b2a:	6d43      	ldr	r3, [r0, #84]	; 0x54
static int ecdsa_sign_restartable( mbedtls_ecp_group *grp,
 c020b2c:	b09b      	sub	sp, #108	; 0x6c
 c020b2e:	4606      	mov	r6, r0
 c020b30:	468a      	mov	sl, r1
 c020b32:	4614      	mov	r4, r2
    if( grp->N.p == NULL )
 c020b34:	2b00      	cmp	r3, #0
 c020b36:	f000 80b6 	beq.w	c020ca6 <ecdsa_sign_restartable.isra.0+0x182>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /* Make sure d is in range 1..n-1 */
    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
 c020b3a:	2101      	movs	r1, #1
 c020b3c:	4658      	mov	r0, fp
 c020b3e:	f7fd fb79 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c020b42:	2800      	cmp	r0, #0
 c020b44:	da04      	bge.n	c020b50 <ecdsa_sign_restartable.isra.0+0x2c>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 c020b46:	4b59      	ldr	r3, [pc, #356]	; (c020cac <ecdsa_sign_restartable.isra.0+0x188>)
    mbedtls_mpi_free( &k ); mbedtls_mpi_free( &e ); mbedtls_mpi_free( &t );

    ECDSA_RS_LEAVE( sig );

    return( ret );
}
 c020b48:	4618      	mov	r0, r3
 c020b4a:	b01b      	add	sp, #108	; 0x6c
 c020b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
 c020b50:	f106 074c 	add.w	r7, r6, #76	; 0x4c
 c020b54:	4639      	mov	r1, r7
 c020b56:	4658      	mov	r0, fp
 c020b58:	f7fd fb2c 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c020b5c:	2800      	cmp	r0, #0
 c020b5e:	daf2      	bge.n	c020b46 <ecdsa_sign_restartable.isra.0+0x22>
    mbedtls_ecp_point_init( &R );
 c020b60:	a811      	add	r0, sp, #68	; 0x44
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
 c020b62:	ad08      	add	r5, sp, #32
    mbedtls_ecp_point_init( &R );
 c020b64:	f000 ff00 	bl	c021968 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
 c020b68:	4628      	mov	r0, r5
 c020b6a:	f7fc ff71 	bl	c01da50 <mbedtls_mpi_init>
 c020b6e:	a80b      	add	r0, sp, #44	; 0x2c
 c020b70:	f7fc ff6e 	bl	c01da50 <mbedtls_mpi_init>
 c020b74:	a80e      	add	r0, sp, #56	; 0x38
 c020b76:	f7fc ff6b 	bl	c01da50 <mbedtls_mpi_init>
 c020b7a:	f10d 0918 	add.w	r9, sp, #24
    *p_sign_tries = 0;
 c020b7e:	2300      	movs	r3, #0
    int *p_sign_tries = &sign_tries, *p_key_tries = &key_tries;
 c020b80:	46c8      	mov	r8, r9
    *p_sign_tries = 0;
 c020b82:	9307      	str	r3, [sp, #28]
        *p_key_tries = 0;
 c020b84:	9305      	str	r3, [sp, #20]
        if( *p_sign_tries++ > 10 )
 c020b86:	f859 3f04 	ldr.w	r3, [r9, #4]!
 c020b8a:	2b0a      	cmp	r3, #10
 c020b8c:	f300 8089 	bgt.w	c020ca2 <ecdsa_sign_restartable.isra.0+0x17e>
        *p_key_tries = 0;
 c020b90:	9b05      	ldr	r3, [sp, #20]
 c020b92:	f8c8 3000 	str.w	r3, [r8]
            MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &R, pk, &grp->G,
 c020b96:	f106 0328 	add.w	r3, r6, #40	; 0x28
 c020b9a:	9304      	str	r3, [sp, #16]
            if( *p_key_tries++ > 10 )
 c020b9c:	f858 3b04 	ldr.w	r3, [r8], #4
 c020ba0:	2b0a      	cmp	r3, #10
 c020ba2:	dc7e      	bgt.n	c020ca2 <ecdsa_sign_restartable.isra.0+0x17e>
            MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, pk, f_rng, p_rng ) );
 c020ba4:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 c020ba8:	4629      	mov	r1, r5
 c020baa:	4630      	mov	r0, r6
 c020bac:	f002 f908 	bl	c022dc0 <mbedtls_ecp_gen_privkey>
 c020bb0:	4603      	mov	r3, r0
 c020bb2:	2800      	cmp	r0, #0
 c020bb4:	d166      	bne.n	c020c84 <ecdsa_sign_restartable.isra.0+0x160>
            MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &R, pk, &grp->G,
 c020bb6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 c020bb8:	9002      	str	r0, [sp, #8]
 c020bba:	9301      	str	r3, [sp, #4]
 c020bbc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 c020bbe:	462a      	mov	r2, r5
 c020bc0:	9300      	str	r3, [sp, #0]
 c020bc2:	a911      	add	r1, sp, #68	; 0x44
 c020bc4:	9b04      	ldr	r3, [sp, #16]
 c020bc6:	4630      	mov	r0, r6
 c020bc8:	f001 fccc 	bl	c022564 <mbedtls_ecp_mul_restartable>
 c020bcc:	4603      	mov	r3, r0
 c020bce:	2800      	cmp	r0, #0
 c020bd0:	d158      	bne.n	c020c84 <ecdsa_sign_restartable.isra.0+0x160>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pr, &R.X, &grp->N ) );
 c020bd2:	463a      	mov	r2, r7
 c020bd4:	a911      	add	r1, sp, #68	; 0x44
 c020bd6:	4650      	mov	r0, sl
 c020bd8:	f7fd ff0e 	bl	c01e9f8 <mbedtls_mpi_mod_mpi>
 c020bdc:	4603      	mov	r3, r0
 c020bde:	2800      	cmp	r0, #0
 c020be0:	d150      	bne.n	c020c84 <ecdsa_sign_restartable.isra.0+0x160>
        while( mbedtls_mpi_cmp_int( pr, 0 ) == 0 );
 c020be2:	4601      	mov	r1, r0
 c020be4:	4650      	mov	r0, sl
 c020be6:	f7fd fb25 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c020bea:	2800      	cmp	r0, #0
 c020bec:	d0d6      	beq.n	c020b9c <ecdsa_sign_restartable.isra.0+0x78>
        MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
 c020bee:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 c020bf2:	a90b      	add	r1, sp, #44	; 0x2c
 c020bf4:	4630      	mov	r0, r6
 c020bf6:	f7ff ff69 	bl	c020acc <derive_mpi>
 c020bfa:	4603      	mov	r3, r0
 c020bfc:	2800      	cmp	r0, #0
 c020bfe:	d141      	bne.n	c020c84 <ecdsa_sign_restartable.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, &t, f_rng, p_rng ) );
 c020c00:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 c020c04:	a90e      	add	r1, sp, #56	; 0x38
 c020c06:	4630      	mov	r0, r6
 c020c08:	f002 f8da 	bl	c022dc0 <mbedtls_ecp_gen_privkey>
 c020c0c:	4603      	mov	r3, r0
 c020c0e:	2800      	cmp	r0, #0
 c020c10:	d138      	bne.n	c020c84 <ecdsa_sign_restartable.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, pr, d ) );
 c020c12:	465a      	mov	r2, fp
 c020c14:	4651      	mov	r1, sl
 c020c16:	4620      	mov	r0, r4
 c020c18:	f7fd fc32 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c020c1c:	4603      	mov	r3, r0
 c020c1e:	bb88      	cbnz	r0, c020c84 <ecdsa_sign_restartable.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &e, &e, s ) );
 c020c20:	a90b      	add	r1, sp, #44	; 0x2c
 c020c22:	4622      	mov	r2, r4
 c020c24:	4608      	mov	r0, r1
 c020c26:	f7fd fbba 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c020c2a:	4603      	mov	r3, r0
 c020c2c:	bb50      	cbnz	r0, c020c84 <ecdsa_sign_restartable.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &e, &e, &t ) );
 c020c2e:	a90b      	add	r1, sp, #44	; 0x2c
 c020c30:	aa0e      	add	r2, sp, #56	; 0x38
 c020c32:	4608      	mov	r0, r1
 c020c34:	f7fd fc24 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c020c38:	4603      	mov	r3, r0
 c020c3a:	bb18      	cbnz	r0, c020c84 <ecdsa_sign_restartable.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pk, pk, &t ) );
 c020c3c:	aa0e      	add	r2, sp, #56	; 0x38
 c020c3e:	4629      	mov	r1, r5
 c020c40:	4628      	mov	r0, r5
 c020c42:	f7fd fc1d 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c020c46:	4603      	mov	r3, r0
 c020c48:	b9e0      	cbnz	r0, c020c84 <ecdsa_sign_restartable.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( s, pk, &grp->N ) );
 c020c4a:	463a      	mov	r2, r7
 c020c4c:	4629      	mov	r1, r5
 c020c4e:	4620      	mov	r0, r4
 c020c50:	f7fe faf9 	bl	c01f246 <mbedtls_mpi_inv_mod>
 c020c54:	4603      	mov	r3, r0
 c020c56:	b9a8      	cbnz	r0, c020c84 <ecdsa_sign_restartable.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, s, &e ) );
 c020c58:	aa0b      	add	r2, sp, #44	; 0x2c
 c020c5a:	4621      	mov	r1, r4
 c020c5c:	4620      	mov	r0, r4
 c020c5e:	f7fd fc0f 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c020c62:	4603      	mov	r3, r0
 c020c64:	b970      	cbnz	r0, c020c84 <ecdsa_sign_restartable.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( s, s, &grp->N ) );
 c020c66:	463a      	mov	r2, r7
 c020c68:	4621      	mov	r1, r4
 c020c6a:	4620      	mov	r0, r4
 c020c6c:	f7fd fec4 	bl	c01e9f8 <mbedtls_mpi_mod_mpi>
 c020c70:	4603      	mov	r3, r0
 c020c72:	b938      	cbnz	r0, c020c84 <ecdsa_sign_restartable.isra.0+0x160>
    while( mbedtls_mpi_cmp_int( s, 0 ) == 0 );
 c020c74:	4601      	mov	r1, r0
 c020c76:	9004      	str	r0, [sp, #16]
 c020c78:	4620      	mov	r0, r4
 c020c7a:	f7fd fadb 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c020c7e:	9b04      	ldr	r3, [sp, #16]
 c020c80:	2800      	cmp	r0, #0
 c020c82:	d080      	beq.n	c020b86 <ecdsa_sign_restartable.isra.0+0x62>
    mbedtls_ecp_point_free( &R );
 c020c84:	a811      	add	r0, sp, #68	; 0x44
 c020c86:	9304      	str	r3, [sp, #16]
 c020c88:	f000 feab 	bl	c0219e2 <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &k ); mbedtls_mpi_free( &e ); mbedtls_mpi_free( &t );
 c020c8c:	a808      	add	r0, sp, #32
 c020c8e:	f7fc fee5 	bl	c01da5c <mbedtls_mpi_free>
 c020c92:	a80b      	add	r0, sp, #44	; 0x2c
 c020c94:	f7fc fee2 	bl	c01da5c <mbedtls_mpi_free>
 c020c98:	a80e      	add	r0, sp, #56	; 0x38
 c020c9a:	f7fc fedf 	bl	c01da5c <mbedtls_mpi_free>
 c020c9e:	9b04      	ldr	r3, [sp, #16]
 c020ca0:	e752      	b.n	c020b48 <ecdsa_sign_restartable.isra.0+0x24>
            ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
 c020ca2:	4b03      	ldr	r3, [pc, #12]	; (c020cb0 <ecdsa_sign_restartable.isra.0+0x18c>)
 c020ca4:	e7ee      	b.n	c020c84 <ecdsa_sign_restartable.isra.0+0x160>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 c020ca6:	4b03      	ldr	r3, [pc, #12]	; (c020cb4 <ecdsa_sign_restartable.isra.0+0x190>)
 c020ca8:	e74e      	b.n	c020b48 <ecdsa_sign_restartable.isra.0+0x24>
 c020caa:	bf00      	nop
 c020cac:	ffffb380 	.word	0xffffb380
 c020cb0:	ffffb300 	.word	0xffffb300
 c020cb4:	ffffb080 	.word	0xffffb080

0c020cb8 <ecdsa_sign_det_restartable.isra.1>:

#if defined(MBEDTLS_ECDSA_DETERMINISTIC)
/*
 * Deterministic signature wrapper
 */
static int ecdsa_sign_det_restartable( mbedtls_ecp_group *grp,
 c020cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c020cbc:	b0c3      	sub	sp, #268	; 0x10c
{
    int ret;
    mbedtls_hmac_drbg_context rng_ctx;
    mbedtls_hmac_drbg_context *p_rng = &rng_ctx;
    unsigned char data[2 * MBEDTLS_ECP_MAX_BYTES];
    size_t grp_len = ( grp->nbits + 7 ) / 8;
 c020cbe:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
static int ecdsa_sign_det_restartable( mbedtls_ecp_group *grp,
 c020cc0:	4606      	mov	r6, r0
    const mbedtls_md_info_t *md_info;
    mbedtls_mpi h;

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 c020cc2:	f89d 0138 	ldrb.w	r0, [sp, #312]	; 0x138
static int ecdsa_sign_det_restartable( mbedtls_ecp_group *grp,
 c020cc6:	468a      	mov	sl, r1
 c020cc8:	4693      	mov	fp, r2
 c020cca:	461f      	mov	r7, r3
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 c020ccc:	f003 fb3c 	bl	c024348 <mbedtls_md_info_from_type>
    size_t grp_len = ( grp->nbits + 7 ) / 8;
 c020cd0:	3407      	adds	r4, #7
 c020cd2:	08e4      	lsrs	r4, r4, #3
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 c020cd4:	4681      	mov	r9, r0
 c020cd6:	2800      	cmp	r0, #0
 c020cd8:	d03b      	beq.n	c020d52 <ecdsa_sign_det_restartable.isra.1+0x9a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    mbedtls_mpi_init( &h );
 c020cda:	a805      	add	r0, sp, #20
    mbedtls_hmac_drbg_init( &rng_ctx );
 c020cdc:	ad08      	add	r5, sp, #32
    mbedtls_mpi_init( &h );
 c020cde:	f7fc feb7 	bl	c01da50 <mbedtls_mpi_init>
    mbedtls_hmac_drbg_init( &rng_ctx );
 c020ce2:	4628      	mov	r0, r5
 c020ce4:	f003 f9f0 	bl	c0240c8 <mbedtls_hmac_drbg_init>
            goto sign;
    }
#endif /* MBEDTLS_ECP_RESTARTABLE */

    /* Use private key and message hash (reduced) to initialize HMAC_DRBG */
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( d, data, grp_len ) );
 c020ce8:	4622      	mov	r2, r4
 c020cea:	a921      	add	r1, sp, #132	; 0x84
 c020cec:	4638      	mov	r0, r7
 c020cee:	f7fd f914 	bl	c01df1a <mbedtls_mpi_write_binary>
 c020cf2:	4680      	mov	r8, r0
 c020cf4:	bb18      	cbnz	r0, c020d3e <ecdsa_sign_det_restartable.isra.1+0x86>
    MBEDTLS_MPI_CHK( derive_mpi( grp, &h, buf, blen ) );
 c020cf6:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 c020cf8:	9a4c      	ldr	r2, [sp, #304]	; 0x130
 c020cfa:	a905      	add	r1, sp, #20
 c020cfc:	4630      	mov	r0, r6
 c020cfe:	f7ff fee5 	bl	c020acc <derive_mpi>
 c020d02:	4680      	mov	r8, r0
 c020d04:	b9d8      	cbnz	r0, c020d3e <ecdsa_sign_det_restartable.isra.1+0x86>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &h, data + grp_len, grp_len ) );
 c020d06:	ab21      	add	r3, sp, #132	; 0x84
 c020d08:	4622      	mov	r2, r4
 c020d0a:	1919      	adds	r1, r3, r4
 c020d0c:	a805      	add	r0, sp, #20
 c020d0e:	f7fd f904 	bl	c01df1a <mbedtls_mpi_write_binary>
 c020d12:	4680      	mov	r8, r0
 c020d14:	b998      	cbnz	r0, c020d3e <ecdsa_sign_det_restartable.isra.1+0x86>
    mbedtls_hmac_drbg_seed_buf( p_rng, md_info, data, 2 * grp_len );
 c020d16:	0063      	lsls	r3, r4, #1
 c020d18:	aa21      	add	r2, sp, #132	; 0x84
 c020d1a:	4649      	mov	r1, r9
 c020d1c:	4628      	mov	r0, r5
 c020d1e:	f003 fa3f 	bl	c0241a0 <mbedtls_hmac_drbg_seed_buf>
#endif
#if defined(MBEDTLS_ECDSA_SIGN_ALT)
    ret = mbedtls_ecdsa_sign( grp, r, s, d, buf, blen,
                              mbedtls_hmac_drbg_random, p_rng );
#else
    ret = ecdsa_sign_restartable( grp, r, s, d, buf, blen,
 c020d22:	4b0d      	ldr	r3, [pc, #52]	; (c020d58 <ecdsa_sign_det_restartable.isra.1+0xa0>)
 c020d24:	9503      	str	r5, [sp, #12]
 c020d26:	9302      	str	r3, [sp, #8]
 c020d28:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 c020d2a:	465a      	mov	r2, fp
 c020d2c:	9301      	str	r3, [sp, #4]
 c020d2e:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 c020d30:	4651      	mov	r1, sl
 c020d32:	9300      	str	r3, [sp, #0]
 c020d34:	4630      	mov	r0, r6
 c020d36:	463b      	mov	r3, r7
 c020d38:	f7ff fef4 	bl	c020b24 <ecdsa_sign_restartable.isra.0>
 c020d3c:	4680      	mov	r8, r0
                      mbedtls_hmac_drbg_random, p_rng, rs_ctx );
#endif /* MBEDTLS_ECDSA_SIGN_ALT */

cleanup:
    mbedtls_hmac_drbg_free( &rng_ctx );
 c020d3e:	4628      	mov	r0, r5
 c020d40:	f003 faf5 	bl	c02432e <mbedtls_hmac_drbg_free>
    mbedtls_mpi_free( &h );
 c020d44:	a805      	add	r0, sp, #20
 c020d46:	f7fc fe89 	bl	c01da5c <mbedtls_mpi_free>

    ECDSA_RS_LEAVE( det );

    return( ret );
}
 c020d4a:	4640      	mov	r0, r8
 c020d4c:	b043      	add	sp, #268	; 0x10c
 c020d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 c020d52:	f8df 8008 	ldr.w	r8, [pc, #8]	; c020d5c <ecdsa_sign_det_restartable.isra.1+0xa4>
 c020d56:	e7f8      	b.n	c020d4a <ecdsa_sign_det_restartable.isra.1+0x92>
 c020d58:	0c02431f 	.word	0x0c02431f
 c020d5c:	ffffb080 	.word	0xffffb080

0c020d60 <ecdsa_verify_restartable.isra.2>:
#if !defined(MBEDTLS_ECDSA_VERIFY_ALT)
/*
 * Verify ECDSA signature of hashed message (SEC1 4.1.4)
 * Obviously, compared to SEC1 4.1.3, we skip step 2 (hash message)
 */
static int ecdsa_verify_restartable( mbedtls_ecp_group *grp,
 c020d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c020d64:	4606      	mov	r6, r0
 c020d66:	b09a      	sub	sp, #104	; 0x68
    int ret;
    mbedtls_mpi e, s_inv, u1, u2;
    mbedtls_ecp_point R;
    mbedtls_mpi *pu1 = &u1, *pu2 = &u2;

    mbedtls_ecp_point_init( &R );
 c020d68:	a811      	add	r0, sp, #68	; 0x44
static int ecdsa_verify_restartable( mbedtls_ecp_group *grp,
 c020d6a:	4698      	mov	r8, r3
 c020d6c:	460c      	mov	r4, r1
 c020d6e:	4617      	mov	r7, r2
    mbedtls_ecp_point_init( &R );
 c020d70:	f000 fdfa 	bl	c021968 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv );
 c020d74:	a805      	add	r0, sp, #20
 c020d76:	f7fc fe6b 	bl	c01da50 <mbedtls_mpi_init>
 c020d7a:	a808      	add	r0, sp, #32
 c020d7c:	f7fc fe68 	bl	c01da50 <mbedtls_mpi_init>
    mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );
 c020d80:	a80b      	add	r0, sp, #44	; 0x2c
 c020d82:	f7fc fe65 	bl	c01da50 <mbedtls_mpi_init>
 c020d86:	a80e      	add	r0, sp, #56	; 0x38
 c020d88:	f7fc fe62 	bl	c01da50 <mbedtls_mpi_init>

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
 c020d8c:	6d73      	ldr	r3, [r6, #84]	; 0x54
 c020d8e:	2b00      	cmp	r3, #0
 c020d90:	d079      	beq.n	c020e86 <ecdsa_verify_restartable.isra.2+0x126>
#endif /* MBEDTLS_ECP_RESTARTABLE */

    /*
     * Step 1: make sure r and s are in range 1..n-1
     */
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 c020d92:	2101      	movs	r1, #1
 c020d94:	9820      	ldr	r0, [sp, #128]	; 0x80
 c020d96:	f7fd fa4d 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c020d9a:	2800      	cmp	r0, #0
 c020d9c:	db5f      	blt.n	c020e5e <ecdsa_verify_restartable.isra.2+0xfe>
 c020d9e:	f106 054c 	add.w	r5, r6, #76	; 0x4c
 c020da2:	4629      	mov	r1, r5
 c020da4:	9820      	ldr	r0, [sp, #128]	; 0x80
 c020da6:	f7fd fa05 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c020daa:	2800      	cmp	r0, #0
 c020dac:	da57      	bge.n	c020e5e <ecdsa_verify_restartable.isra.2+0xfe>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 c020dae:	2101      	movs	r1, #1
 c020db0:	9821      	ldr	r0, [sp, #132]	; 0x84
 c020db2:	f7fd fa3f 	bl	c01e234 <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 c020db6:	2800      	cmp	r0, #0
 c020db8:	db51      	blt.n	c020e5e <ecdsa_verify_restartable.isra.2+0xfe>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 c020dba:	4629      	mov	r1, r5
 c020dbc:	9821      	ldr	r0, [sp, #132]	; 0x84
 c020dbe:	f7fd f9f9 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c020dc2:	2800      	cmp	r0, #0
 c020dc4:	da4b      	bge.n	c020e5e <ecdsa_verify_restartable.isra.2+0xfe>
    }

    /*
     * Step 3: derive MPI from hashed message
     */
    MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
 c020dc6:	4622      	mov	r2, r4
 c020dc8:	463b      	mov	r3, r7
 c020dca:	a905      	add	r1, sp, #20
 c020dcc:	4630      	mov	r0, r6
 c020dce:	f7ff fe7d 	bl	c020acc <derive_mpi>
 c020dd2:	4604      	mov	r4, r0
 c020dd4:	2800      	cmp	r0, #0
 c020dd6:	d143      	bne.n	c020e60 <ecdsa_verify_restartable.isra.2+0x100>
    /*
     * Step 4: u1 = e / s mod n, u2 = r / s mod n
     */
    ECDSA_BUDGET( MBEDTLS_ECP_OPS_CHK + MBEDTLS_ECP_OPS_INV + 2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &s_inv, s, &grp->N ) );
 c020dd8:	462a      	mov	r2, r5
 c020dda:	9921      	ldr	r1, [sp, #132]	; 0x84
 c020ddc:	a808      	add	r0, sp, #32
 c020dde:	f7fe fa32 	bl	c01f246 <mbedtls_mpi_inv_mod>
 c020de2:	4604      	mov	r4, r0
 c020de4:	2800      	cmp	r0, #0
 c020de6:	d13b      	bne.n	c020e60 <ecdsa_verify_restartable.isra.2+0x100>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu1, &e, &s_inv ) );
 c020de8:	aa08      	add	r2, sp, #32
 c020dea:	a905      	add	r1, sp, #20
 c020dec:	a80b      	add	r0, sp, #44	; 0x2c
 c020dee:	f7fd fb47 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c020df2:	4604      	mov	r4, r0
 c020df4:	2800      	cmp	r0, #0
 c020df6:	d133      	bne.n	c020e60 <ecdsa_verify_restartable.isra.2+0x100>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu1, pu1, &grp->N ) );
 c020df8:	a90b      	add	r1, sp, #44	; 0x2c
 c020dfa:	462a      	mov	r2, r5
 c020dfc:	4608      	mov	r0, r1
 c020dfe:	f7fd fdfb 	bl	c01e9f8 <mbedtls_mpi_mod_mpi>
 c020e02:	4604      	mov	r4, r0
 c020e04:	bb60      	cbnz	r0, c020e60 <ecdsa_verify_restartable.isra.2+0x100>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu2, r, &s_inv ) );
 c020e06:	aa08      	add	r2, sp, #32
 c020e08:	9920      	ldr	r1, [sp, #128]	; 0x80
 c020e0a:	a80e      	add	r0, sp, #56	; 0x38
 c020e0c:	f7fd fb38 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c020e10:	4604      	mov	r4, r0
 c020e12:	bb28      	cbnz	r0, c020e60 <ecdsa_verify_restartable.isra.2+0x100>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu2, pu2, &grp->N ) );
 c020e14:	af0e      	add	r7, sp, #56	; 0x38
 c020e16:	462a      	mov	r2, r5
 c020e18:	4639      	mov	r1, r7
 c020e1a:	4638      	mov	r0, r7
 c020e1c:	f7fd fdec 	bl	c01e9f8 <mbedtls_mpi_mod_mpi>
 c020e20:	4604      	mov	r4, r0
 c020e22:	b9e8      	cbnz	r0, c020e60 <ecdsa_verify_restartable.isra.2+0x100>
muladd:
#endif
    /*
     * Step 5: R = u1 G + u2 Q
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_muladd_restartable( grp,
 c020e24:	e9cd 8001 	strd	r8, r0, [sp, #4]
 c020e28:	9700      	str	r7, [sp, #0]
 c020e2a:	f106 0328 	add.w	r3, r6, #40	; 0x28
 c020e2e:	aa0b      	add	r2, sp, #44	; 0x2c
 c020e30:	a911      	add	r1, sp, #68	; 0x44
 c020e32:	4630      	mov	r0, r6
 c020e34:	f001 ff8a 	bl	c022d4c <mbedtls_ecp_muladd_restartable>
 c020e38:	4604      	mov	r4, r0
 c020e3a:	b988      	cbnz	r0, c020e60 <ecdsa_verify_restartable.isra.2+0x100>
                     &R, pu1, &grp->G, pu2, Q, ECDSA_RS_ECP ) );

    if( mbedtls_ecp_is_zero( &R ) )
 c020e3c:	a811      	add	r0, sp, #68	; 0x44
 c020e3e:	f001 f9ad 	bl	c02219c <mbedtls_ecp_is_zero>
 c020e42:	b960      	cbnz	r0, c020e5e <ecdsa_verify_restartable.isra.2+0xfe>

    /*
     * Step 6: convert xR to an integer (no-op)
     * Step 7: reduce xR mod n (gives v)
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &R.X, &R.X, &grp->N ) );
 c020e44:	a911      	add	r1, sp, #68	; 0x44
 c020e46:	462a      	mov	r2, r5
 c020e48:	4608      	mov	r0, r1
 c020e4a:	f7fd fdd5 	bl	c01e9f8 <mbedtls_mpi_mod_mpi>
 c020e4e:	4604      	mov	r4, r0
 c020e50:	b930      	cbnz	r0, c020e60 <ecdsa_verify_restartable.isra.2+0x100>

    /*
     * Step 8: check if v (that is, R.X) is equal to r
     */
    if( mbedtls_mpi_cmp_mpi( &R.X, r ) != 0 )
 c020e52:	9920      	ldr	r1, [sp, #128]	; 0x80
 c020e54:	a811      	add	r0, sp, #68	; 0x44
 c020e56:	f7fd f9ad 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c020e5a:	4604      	mov	r4, r0
 c020e5c:	b100      	cbz	r0, c020e60 <ecdsa_verify_restartable.isra.2+0x100>
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 c020e5e:	4c0b      	ldr	r4, [pc, #44]	; (c020e8c <ecdsa_verify_restartable.isra.2+0x12c>)
        goto cleanup;
    }

cleanup:
    mbedtls_ecp_point_free( &R );
 c020e60:	a811      	add	r0, sp, #68	; 0x44
 c020e62:	f000 fdbe 	bl	c0219e2 <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &e ); mbedtls_mpi_free( &s_inv );
 c020e66:	a805      	add	r0, sp, #20
 c020e68:	f7fc fdf8 	bl	c01da5c <mbedtls_mpi_free>
 c020e6c:	a808      	add	r0, sp, #32
 c020e6e:	f7fc fdf5 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );
 c020e72:	a80b      	add	r0, sp, #44	; 0x2c
 c020e74:	f7fc fdf2 	bl	c01da5c <mbedtls_mpi_free>
 c020e78:	a80e      	add	r0, sp, #56	; 0x38
 c020e7a:	f7fc fdef 	bl	c01da5c <mbedtls_mpi_free>

    ECDSA_RS_LEAVE( ver );

    return( ret );
}
 c020e7e:	4620      	mov	r0, r4
 c020e80:	b01a      	add	sp, #104	; 0x68
 c020e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 c020e86:	4c02      	ldr	r4, [pc, #8]	; (c020e90 <ecdsa_verify_restartable.isra.2+0x130>)
 c020e88:	e7f9      	b.n	c020e7e <ecdsa_verify_restartable.isra.2+0x11e>
 c020e8a:	bf00      	nop
 c020e8c:	ffffb200 	.word	0xffffb200
 c020e90:	ffffb080 	.word	0xffffb080

0c020e94 <mbedtls_ecdsa_sign>:
    return( ecdsa_sign_restartable( grp, r, s, d, buf, blen,
 c020e94:	f7ff be46 	b.w	c020b24 <ecdsa_sign_restartable.isra.0>

0c020e98 <mbedtls_ecdsa_sign_det>:
{
 c020e98:	b410      	push	{r4}
 c020e9a:	f89d 400c 	ldrb.w	r4, [sp, #12]
    return( ecdsa_sign_det_restartable( grp, r, s, d, buf, blen, md_alg, NULL ) );
 c020e9e:	9403      	str	r4, [sp, #12]
}
 c020ea0:	f85d 4b04 	ldr.w	r4, [sp], #4
    return( ecdsa_sign_det_restartable( grp, r, s, d, buf, blen, md_alg, NULL ) );
 c020ea4:	f7ff bf08 	b.w	c020cb8 <ecdsa_sign_det_restartable.isra.1>

0c020ea8 <mbedtls_ecdsa_verify>:
    ECDSA_VALIDATE_RET( Q   != NULL );
    ECDSA_VALIDATE_RET( r   != NULL );
    ECDSA_VALIDATE_RET( s   != NULL );
    ECDSA_VALIDATE_RET( buf != NULL || blen == 0 );

    return( ecdsa_verify_restartable( grp, buf, blen, Q, r, s, NULL ) );
 c020ea8:	f7ff bf5a 	b.w	c020d60 <ecdsa_verify_restartable.isra.2>

0c020eac <mbedtls_ecdsa_write_signature_restartable>:
                           const unsigned char *hash, size_t hlen,
                           unsigned char *sig, size_t *slen,
                           int (*f_rng)(void *, unsigned char *, size_t),
                           void *p_rng,
                           mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 c020eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 c020eae:	460f      	mov	r7, r1
 c020eb0:	4615      	mov	r5, r2
 c020eb2:	461e      	mov	r6, r3
 c020eb4:	4604      	mov	r4, r0
 c020eb6:	b0af      	sub	sp, #188	; 0xbc
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    ECDSA_VALIDATE_RET( slen != NULL );

    mbedtls_mpi_init( &r );
 c020eb8:	a805      	add	r0, sp, #20
 c020eba:	f7fc fdc9 	bl	c01da50 <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
 c020ebe:	a808      	add	r0, sp, #32
 c020ec0:	f7fc fdc6 	bl	c01da50 <mbedtls_mpi_init>

#if defined(MBEDTLS_ECDSA_DETERMINISTIC)
    (void) f_rng;
    (void) p_rng;

    MBEDTLS_MPI_CHK( ecdsa_sign_det_restartable( &ctx->grp, &r, &s, &ctx->d,
 c020ec4:	e9cd 6701 	strd	r6, r7, [sp, #4]
 c020ec8:	9500      	str	r5, [sp, #0]
 c020eca:	f104 037c 	add.w	r3, r4, #124	; 0x7c
 c020ece:	aa08      	add	r2, sp, #32
 c020ed0:	a905      	add	r1, sp, #20
 c020ed2:	4620      	mov	r0, r4
 c020ed4:	f7ff fef0 	bl	c020cb8 <ecdsa_sign_det_restartable.isra.1>
 c020ed8:	4607      	mov	r7, r0
 c020eda:	bb60      	cbnz	r0, c020f36 <mbedtls_ecdsa_write_signature_restartable+0x8a>
    unsigned char *p = buf + sizeof( buf );
 c020edc:	ad2e      	add	r5, sp, #184	; 0xb8
 c020ede:	f10d 03b7 	add.w	r3, sp, #183	; 0xb7
 c020ee2:	f845 3da8 	str.w	r3, [r5, #-168]!
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );
 c020ee6:	aa08      	add	r2, sp, #32
 c020ee8:	a90b      	add	r1, sp, #44	; 0x2c
 c020eea:	4628      	mov	r0, r5
 c020eec:	f7fc f9a5 	bl	c01d23a <mbedtls_asn1_write_mpi>
 c020ef0:	1e04      	subs	r4, r0, #0
 c020ef2:	db1f      	blt.n	c020f34 <mbedtls_ecdsa_write_signature_restartable+0x88>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, r ) );
 c020ef4:	aa05      	add	r2, sp, #20
 c020ef6:	a90b      	add	r1, sp, #44	; 0x2c
 c020ef8:	4628      	mov	r0, r5
 c020efa:	f7fc f99e 	bl	c01d23a <mbedtls_asn1_write_mpi>
 c020efe:	2800      	cmp	r0, #0
 c020f00:	db22      	blt.n	c020f48 <mbedtls_ecdsa_write_signature_restartable+0x9c>
 c020f02:	1826      	adds	r6, r4, r0
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
 c020f04:	4632      	mov	r2, r6
 c020f06:	a90b      	add	r1, sp, #44	; 0x2c
 c020f08:	4628      	mov	r0, r5
 c020f0a:	f7fc f8ff 	bl	c01d10c <mbedtls_asn1_write_len>
 c020f0e:	1e04      	subs	r4, r0, #0
 c020f10:	db10      	blt.n	c020f34 <mbedtls_ecdsa_write_signature_restartable+0x88>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
 c020f12:	2230      	movs	r2, #48	; 0x30
 c020f14:	a90b      	add	r1, sp, #44	; 0x2c
 c020f16:	4628      	mov	r0, r5
 c020f18:	f7fc f96c 	bl	c01d1f4 <mbedtls_asn1_write_tag>
 c020f1c:	2800      	cmp	r0, #0
 c020f1e:	db13      	blt.n	c020f48 <mbedtls_ecdsa_write_signature_restartable+0x9c>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
 c020f20:	4434      	add	r4, r6
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
 c020f22:	4404      	add	r4, r0
    memcpy( sig, p, len );
 c020f24:	4622      	mov	r2, r4
 c020f26:	9904      	ldr	r1, [sp, #16]
 c020f28:	9834      	ldr	r0, [sp, #208]	; 0xd0
 c020f2a:	f7f3 fd28 	bl	c01497e <memcpy>
    *slen = len;
 c020f2e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 c020f30:	601c      	str	r4, [r3, #0]
    return( 0 );
 c020f32:	463c      	mov	r4, r7
    MBEDTLS_MPI_CHK( ecdsa_sign_restartable( &ctx->grp, &r, &s, &ctx->d,
                         hash, hlen, f_rng, p_rng, rs_ctx ) );
#endif /* MBEDTLS_ECDSA_SIGN_ALT */
#endif /* MBEDTLS_ECDSA_DETERMINISTIC */

    MBEDTLS_MPI_CHK( ecdsa_signature_to_asn1( &r, &s, sig, slen ) );
 c020f34:	4627      	mov	r7, r4

cleanup:
    mbedtls_mpi_free( &r );
 c020f36:	a805      	add	r0, sp, #20
 c020f38:	f7fc fd90 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 c020f3c:	a808      	add	r0, sp, #32
 c020f3e:	f7fc fd8d 	bl	c01da5c <mbedtls_mpi_free>

    return( ret );
}
 c020f42:	4638      	mov	r0, r7
 c020f44:	b02f      	add	sp, #188	; 0xbc
 c020f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
 c020f48:	4604      	mov	r4, r0
 c020f4a:	e7f3      	b.n	c020f34 <mbedtls_ecdsa_write_signature_restartable+0x88>

0c020f4c <mbedtls_ecdsa_write_signature>:
                                 mbedtls_md_type_t md_alg,
                                 const unsigned char *hash, size_t hlen,
                                 unsigned char *sig, size_t *slen,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 c020f4c:	b510      	push	{r4, lr}
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    ECDSA_VALIDATE_RET( slen != NULL );
    return( mbedtls_ecdsa_write_signature_restartable(
 c020f4e:	2400      	movs	r4, #0
{
 c020f50:	b086      	sub	sp, #24
    return( mbedtls_ecdsa_write_signature_restartable(
 c020f52:	9404      	str	r4, [sp, #16]
 c020f54:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 c020f56:	9403      	str	r4, [sp, #12]
 c020f58:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 c020f5a:	9402      	str	r4, [sp, #8]
 c020f5c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 c020f5e:	9401      	str	r4, [sp, #4]
 c020f60:	9c08      	ldr	r4, [sp, #32]
 c020f62:	9400      	str	r4, [sp, #0]
 c020f64:	f7ff ffa2 	bl	c020eac <mbedtls_ecdsa_write_signature_restartable>
                ctx, md_alg, hash, hlen, sig, slen, f_rng, p_rng, NULL ) );
}
 c020f68:	b006      	add	sp, #24
 c020f6a:	bd10      	pop	{r4, pc}

0c020f6c <mbedtls_ecdsa_read_signature_restartable>:
 */
int mbedtls_ecdsa_read_signature_restartable( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 c020f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c020f70:	b08b      	sub	sp, #44	; 0x2c
    int ret;
    unsigned char *p = (unsigned char *) sig;
    const unsigned char *end = sig + slen;
 c020f72:	9d12      	ldr	r5, [sp, #72]	; 0x48
    mbedtls_mpi r, s;
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );

    mbedtls_mpi_init( &r );
 c020f74:	af04      	add	r7, sp, #16
{
 c020f76:	4604      	mov	r4, r0
    mbedtls_mpi_init( &s );
 c020f78:	ae07      	add	r6, sp, #28
    mbedtls_mpi_init( &r );
 c020f7a:	4638      	mov	r0, r7
    const unsigned char *end = sig + slen;
 c020f7c:	441d      	add	r5, r3
{
 c020f7e:	4688      	mov	r8, r1
 c020f80:	4691      	mov	r9, r2
    unsigned char *p = (unsigned char *) sig;
 c020f82:	9302      	str	r3, [sp, #8]
    mbedtls_mpi_init( &r );
 c020f84:	f7fc fd64 	bl	c01da50 <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
 c020f88:	4630      	mov	r0, r6
 c020f8a:	f7fc fd61 	bl	c01da50 <mbedtls_mpi_init>

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c020f8e:	2330      	movs	r3, #48	; 0x30
 c020f90:	aa03      	add	r2, sp, #12
 c020f92:	4629      	mov	r1, r5
 c020f94:	a802      	add	r0, sp, #8
 c020f96:	f7fb fff5 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c020f9a:	b158      	cbz	r0, c020fb4 <mbedtls_ecdsa_read_signature_restartable+0x48>
    }

    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )
    {
        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 c020f9c:	f5a0 449f 	sub.w	r4, r0, #20352	; 0x4f80
     * error code if the valid signature is followed by more data. */
    if( p != end )
        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;

cleanup:
    mbedtls_mpi_free( &r );
 c020fa0:	4638      	mov	r0, r7
 c020fa2:	f7fc fd5b 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 c020fa6:	4630      	mov	r0, r6
 c020fa8:	f7fc fd58 	bl	c01da5c <mbedtls_mpi_free>

    return( ret );
}
 c020fac:	4620      	mov	r0, r4
 c020fae:	b00b      	add	sp, #44	; 0x2c
 c020fb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( p + len != end )
 c020fb4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 c020fb8:	4413      	add	r3, r2
 c020fba:	429d      	cmp	r5, r3
 c020fbc:	d11f      	bne.n	c020ffe <mbedtls_ecdsa_read_signature_restartable+0x92>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
 c020fbe:	463a      	mov	r2, r7
 c020fc0:	4629      	mov	r1, r5
 c020fc2:	a802      	add	r0, sp, #8
 c020fc4:	f7fc f816 	bl	c01cff4 <mbedtls_asn1_get_mpi>
 c020fc8:	2800      	cmp	r0, #0
 c020fca:	d1e7      	bne.n	c020f9c <mbedtls_ecdsa_read_signature_restartable+0x30>
 c020fcc:	4632      	mov	r2, r6
 c020fce:	4629      	mov	r1, r5
 c020fd0:	a802      	add	r0, sp, #8
 c020fd2:	f7fc f80f 	bl	c01cff4 <mbedtls_asn1_get_mpi>
 c020fd6:	2800      	cmp	r0, #0
 c020fd8:	d1e0      	bne.n	c020f9c <mbedtls_ecdsa_read_signature_restartable+0x30>
    if( ( ret = ecdsa_verify_restartable( &ctx->grp, hash, hlen,
 c020fda:	f104 0388 	add.w	r3, r4, #136	; 0x88
 c020fde:	4620      	mov	r0, r4
 c020fe0:	e9cd 7600 	strd	r7, r6, [sp]
 c020fe4:	464a      	mov	r2, r9
 c020fe6:	4641      	mov	r1, r8
 c020fe8:	f7ff feba 	bl	c020d60 <ecdsa_verify_restartable.isra.2>
 c020fec:	4604      	mov	r4, r0
 c020fee:	2800      	cmp	r0, #0
 c020ff0:	d1d6      	bne.n	c020fa0 <mbedtls_ecdsa_read_signature_restartable+0x34>
        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;
 c020ff2:	9a02      	ldr	r2, [sp, #8]
 c020ff4:	4b03      	ldr	r3, [pc, #12]	; (c021004 <mbedtls_ecdsa_read_signature_restartable+0x98>)
 c020ff6:	42aa      	cmp	r2, r5
 c020ff8:	bf18      	it	ne
 c020ffa:	461c      	movne	r4, r3
 c020ffc:	e7d0      	b.n	c020fa0 <mbedtls_ecdsa_read_signature_restartable+0x34>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +
 c020ffe:	4c02      	ldr	r4, [pc, #8]	; (c021008 <mbedtls_ecdsa_read_signature_restartable+0x9c>)
 c021000:	e7ce      	b.n	c020fa0 <mbedtls_ecdsa_read_signature_restartable+0x34>
 c021002:	bf00      	nop
 c021004:	ffffb400 	.word	0xffffb400
 c021008:	ffffb01a 	.word	0xffffb01a

0c02100c <mbedtls_ecdsa_read_signature>:
{
 c02100c:	b513      	push	{r0, r1, r4, lr}
    return( mbedtls_ecdsa_read_signature_restartable(
 c02100e:	2400      	movs	r4, #0
 c021010:	9401      	str	r4, [sp, #4]
 c021012:	9c04      	ldr	r4, [sp, #16]
 c021014:	9400      	str	r4, [sp, #0]
 c021016:	f7ff ffa9 	bl	c020f6c <mbedtls_ecdsa_read_signature_restartable>
}
 c02101a:	b002      	add	sp, #8
 c02101c:	bd10      	pop	{r4, pc}

0c02101e <mbedtls_ecdsa_init>:
 */
void mbedtls_ecdsa_init( mbedtls_ecdsa_context *ctx )
{
    ECDSA_VALIDATE( ctx != NULL );

    mbedtls_ecp_keypair_init( ctx );
 c02101e:	f000 bcd2 	b.w	c0219c6 <mbedtls_ecp_keypair_init>

0c021022 <mbedtls_ecdsa_free>:
/*
 * Free context
 */
void mbedtls_ecdsa_free( mbedtls_ecdsa_context *ctx )
{
    if( ctx == NULL )
 c021022:	b108      	cbz	r0, c021028 <mbedtls_ecdsa_free+0x6>
        return;

    mbedtls_ecp_keypair_free( ctx );
 c021024:	f000 bd12 	b.w	c021a4c <mbedtls_ecp_keypair_free>
}
 c021028:	4770      	bx	lr

0c02102a <mbedtls_ecdsa_from_keypair>:
{
 c02102a:	b570      	push	{r4, r5, r6, lr}
 c02102c:	4605      	mov	r5, r0
 c02102e:	460e      	mov	r6, r1
    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
 c021030:	f000 fd32 	bl	c021a98 <mbedtls_ecp_group_copy>
 c021034:	4604      	mov	r4, r0
 c021036:	b978      	cbnz	r0, c021058 <mbedtls_ecdsa_from_keypair+0x2e>
 c021038:	f106 017c 	add.w	r1, r6, #124	; 0x7c
 c02103c:	f105 007c 	add.w	r0, r5, #124	; 0x7c
 c021040:	f7fc fd7d 	bl	c01db3e <mbedtls_mpi_copy>
 c021044:	4604      	mov	r4, r0
 c021046:	b938      	cbnz	r0, c021058 <mbedtls_ecdsa_from_keypair+0x2e>
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
 c021048:	f106 0188 	add.w	r1, r6, #136	; 0x88
 c02104c:	f105 0088 	add.w	r0, r5, #136	; 0x88
 c021050:	f000 fd0c 	bl	c021a6c <mbedtls_ecp_copy>
 c021054:	4604      	mov	r4, r0
 c021056:	b110      	cbz	r0, c02105e <mbedtls_ecdsa_from_keypair+0x34>
        mbedtls_ecdsa_free( ctx );
 c021058:	4628      	mov	r0, r5
 c02105a:	f7ff ffe2 	bl	c021022 <mbedtls_ecdsa_free>
}
 c02105e:	4620      	mov	r0, r4
 c021060:	bd70      	pop	{r4, r5, r6, pc}

0c021062 <ecp_safe_invert_jac>:
 * "inv" must be 0 (don't invert) or 1 (invert) or the result will be invalid
 */
static int ecp_safe_invert_jac( const mbedtls_ecp_group *grp,
                            mbedtls_ecp_point *Q,
                            unsigned char inv )
{
 c021062:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 c021064:	460c      	mov	r4, r1
 c021066:	4605      	mov	r5, r0
    mbedtls_mpi mQY;

    mbedtls_mpi_init( &mQY );

    /* Use the fact that -Q.Y mod P = P - Q.Y unless Q.Y == 0 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
 c021068:	340c      	adds	r4, #12
    mbedtls_mpi_init( &mQY );
 c02106a:	a801      	add	r0, sp, #4
{
 c02106c:	4616      	mov	r6, r2
    mbedtls_mpi_init( &mQY );
 c02106e:	f7fc fcef 	bl	c01da50 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
 c021072:	1d29      	adds	r1, r5, #4
 c021074:	4622      	mov	r2, r4
 c021076:	a801      	add	r0, sp, #4
 c021078:	f7fd f9b3 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c02107c:	4605      	mov	r5, r0
 c02107e:	b968      	cbnz	r0, c02109c <ecp_safe_invert_jac+0x3a>
    nonzero = mbedtls_mpi_cmp_int( &Q->Y, 0 ) != 0;
 c021080:	4601      	mov	r1, r0
 c021082:	4620      	mov	r0, r4
 c021084:	f7fd f8d6 	bl	c01e234 <mbedtls_mpi_cmp_int>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &Q->Y, &mQY, inv & nonzero ) );
 c021088:	a901      	add	r1, sp, #4
 c02108a:	2800      	cmp	r0, #0
 c02108c:	bf0c      	ite	eq
 c02108e:	2200      	moveq	r2, #0
 c021090:	f006 0201 	andne.w	r2, r6, #1
 c021094:	4620      	mov	r0, r4
 c021096:	f7fc fd93 	bl	c01dbc0 <mbedtls_mpi_safe_cond_assign>
 c02109a:	4605      	mov	r5, r0

cleanup:
    mbedtls_mpi_free( &mQY );
 c02109c:	a801      	add	r0, sp, #4
 c02109e:	f7fc fcdd 	bl	c01da5c <mbedtls_mpi_free>

    return( ret );
}
 c0210a2:	4628      	mov	r0, r5
 c0210a4:	b004      	add	sp, #16
 c0210a6:	bd70      	pop	{r4, r5, r6, pc}

0c0210a8 <ecp_modp>:
    if( grp->modp == NULL )
 c0210a8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
{
 c0210aa:	b570      	push	{r4, r5, r6, lr}
 c0210ac:	4604      	mov	r4, r0
 c0210ae:	460d      	mov	r5, r1
    if( grp->modp == NULL )
 c0210b0:	b92b      	cbnz	r3, c0210be <ecp_modp+0x16>
}
 c0210b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
 c0210b6:	1d0a      	adds	r2, r1, #4
 c0210b8:	4601      	mov	r1, r0
 c0210ba:	f7fd bc9d 	b.w	c01e9f8 <mbedtls_mpi_mod_mpi>
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 c0210be:	6803      	ldr	r3, [r0, #0]
 c0210c0:	2b00      	cmp	r3, #0
 c0210c2:	db09      	blt.n	c0210d8 <ecp_modp+0x30>
        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
 c0210c4:	4620      	mov	r0, r4
 c0210c6:	f7fc fe61 	bl	c01dd8c <mbedtls_mpi_bitlen>
 c0210ca:	6dab      	ldr	r3, [r5, #88]	; 0x58
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 c0210cc:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 c0210d0:	d908      	bls.n	c0210e4 <ecp_modp+0x3c>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 c0210d2:	4e17      	ldr	r6, [pc, #92]	; (c021130 <ecp_modp+0x88>)
}
 c0210d4:	4630      	mov	r0, r6
 c0210d6:	bd70      	pop	{r4, r5, r6, pc}
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 c0210d8:	2100      	movs	r1, #0
 c0210da:	f7fd f8ab 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c0210de:	2800      	cmp	r0, #0
 c0210e0:	d0f0      	beq.n	c0210c4 <ecp_modp+0x1c>
 c0210e2:	e7f6      	b.n	c0210d2 <ecp_modp+0x2a>
    MBEDTLS_MPI_CHK( grp->modp( N ) );
 c0210e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c0210e6:	4620      	mov	r0, r4
 c0210e8:	4798      	blx	r3
 c0210ea:	4606      	mov	r6, r0
 c0210ec:	2800      	cmp	r0, #0
 c0210ee:	d1f1      	bne.n	c0210d4 <ecp_modp+0x2c>
 c0210f0:	3504      	adds	r5, #4
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
 c0210f2:	6823      	ldr	r3, [r4, #0]
 c0210f4:	2b00      	cmp	r3, #0
 c0210f6:	da04      	bge.n	c021102 <ecp_modp+0x5a>
 c0210f8:	2100      	movs	r1, #0
 c0210fa:	4620      	mov	r0, r4
 c0210fc:	f7fd f89a 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c021100:	b968      	cbnz	r0, c02111e <ecp_modp+0x76>
    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
 c021102:	4629      	mov	r1, r5
 c021104:	4620      	mov	r0, r4
 c021106:	f7fd f855 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c02110a:	2800      	cmp	r0, #0
 c02110c:	dbe2      	blt.n	c0210d4 <ecp_modp+0x2c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
 c02110e:	462a      	mov	r2, r5
 c021110:	4621      	mov	r1, r4
 c021112:	4620      	mov	r0, r4
 c021114:	f7fd f905 	bl	c01e322 <mbedtls_mpi_sub_abs>
 c021118:	2800      	cmp	r0, #0
 c02111a:	d0f2      	beq.n	c021102 <ecp_modp+0x5a>
 c02111c:	e006      	b.n	c02112c <ecp_modp+0x84>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );
 c02111e:	462a      	mov	r2, r5
 c021120:	4621      	mov	r1, r4
 c021122:	4620      	mov	r0, r4
 c021124:	f7fd f93b 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c021128:	2800      	cmp	r0, #0
 c02112a:	d0e2      	beq.n	c0210f2 <ecp_modp+0x4a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
 c02112c:	4606      	mov	r6, r0
 c02112e:	e7d1      	b.n	c0210d4 <ecp_modp+0x2c>
 c021130:	ffffb080 	.word	0xffffb080

0c021134 <ecp_normalize_jac>:
{
 c021134:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
 c021136:	f101 0718 	add.w	r7, r1, #24
{
 c02113a:	b087      	sub	sp, #28
 c02113c:	4606      	mov	r6, r0
 c02113e:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
 c021140:	4638      	mov	r0, r7
 c021142:	2100      	movs	r1, #0
 c021144:	f7fd f876 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c021148:	4604      	mov	r4, r0
 c02114a:	2800      	cmp	r0, #0
 c02114c:	d04c      	beq.n	c0211e8 <ecp_normalize_jac+0xb4>
    mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 c02114e:	4668      	mov	r0, sp
 c021150:	f7fc fc7e 	bl	c01da50 <mbedtls_mpi_init>
 c021154:	a803      	add	r0, sp, #12
 c021156:	f7fc fc7b 	bl	c01da50 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &Zi,      &pt->Z,     &grp->P ) );
 c02115a:	1d32      	adds	r2, r6, #4
 c02115c:	4639      	mov	r1, r7
 c02115e:	4668      	mov	r0, sp
 c021160:	f7fe f871 	bl	c01f246 <mbedtls_mpi_inv_mod>
 c021164:	4604      	mov	r4, r0
 c021166:	bbc8      	cbnz	r0, c0211dc <ecp_normalize_jac+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
 c021168:	466a      	mov	r2, sp
 c02116a:	4669      	mov	r1, sp
 c02116c:	a803      	add	r0, sp, #12
 c02116e:	f7fd f987 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c021172:	4604      	mov	r4, r0
 c021174:	bb90      	cbnz	r0, c0211dc <ecp_normalize_jac+0xa8>
 c021176:	4631      	mov	r1, r6
 c021178:	a803      	add	r0, sp, #12
 c02117a:	f7ff ff95 	bl	c0210a8 <ecp_modp>
 c02117e:	4604      	mov	r4, r0
 c021180:	bb60      	cbnz	r0, c0211dc <ecp_normalize_jac+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 c021182:	aa03      	add	r2, sp, #12
 c021184:	4629      	mov	r1, r5
 c021186:	4628      	mov	r0, r5
 c021188:	f7fd f97a 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c02118c:	4604      	mov	r4, r0
 c02118e:	bb28      	cbnz	r0, c0211dc <ecp_normalize_jac+0xa8>
 c021190:	4631      	mov	r1, r6
 c021192:	4628      	mov	r0, r5
 c021194:	f7ff ff88 	bl	c0210a8 <ecp_modp>
 c021198:	4604      	mov	r4, r0
 c02119a:	b9f8      	cbnz	r0, c0211dc <ecp_normalize_jac+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 c02119c:	350c      	adds	r5, #12
 c02119e:	aa03      	add	r2, sp, #12
 c0211a0:	4629      	mov	r1, r5
 c0211a2:	4628      	mov	r0, r5
 c0211a4:	f7fd f96c 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c0211a8:	4604      	mov	r4, r0
 c0211aa:	b9b8      	cbnz	r0, c0211dc <ecp_normalize_jac+0xa8>
 c0211ac:	4631      	mov	r1, r6
 c0211ae:	4628      	mov	r0, r5
 c0211b0:	f7ff ff7a 	bl	c0210a8 <ecp_modp>
 c0211b4:	4604      	mov	r4, r0
 c0211b6:	b988      	cbnz	r0, c0211dc <ecp_normalize_jac+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 c0211b8:	466a      	mov	r2, sp
 c0211ba:	4629      	mov	r1, r5
 c0211bc:	4628      	mov	r0, r5
 c0211be:	f7fd f95f 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c0211c2:	4604      	mov	r4, r0
 c0211c4:	b950      	cbnz	r0, c0211dc <ecp_normalize_jac+0xa8>
 c0211c6:	4631      	mov	r1, r6
 c0211c8:	4628      	mov	r0, r5
 c0211ca:	f7ff ff6d 	bl	c0210a8 <ecp_modp>
 c0211ce:	4604      	mov	r4, r0
 c0211d0:	b920      	cbnz	r0, c0211dc <ecp_normalize_jac+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 c0211d2:	2101      	movs	r1, #1
 c0211d4:	4638      	mov	r0, r7
 c0211d6:	f7fc fd69 	bl	c01dcac <mbedtls_mpi_lset>
 c0211da:	4604      	mov	r4, r0
    mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 c0211dc:	4668      	mov	r0, sp
 c0211de:	f7fc fc3d 	bl	c01da5c <mbedtls_mpi_free>
 c0211e2:	a803      	add	r0, sp, #12
 c0211e4:	f7fc fc3a 	bl	c01da5c <mbedtls_mpi_free>
}
 c0211e8:	4620      	mov	r0, r4
 c0211ea:	b007      	add	sp, #28
 c0211ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0c0211ee <ecp_double_jac>:
 *             4M + 4S          (A == -3)
 *             3M + 6S + 1a     otherwise
 */
static int ecp_double_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                           const mbedtls_ecp_point *P )
{
 c0211ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0211f2:	4606      	mov	r6, r0
 c0211f4:	b08d      	sub	sp, #52	; 0x34
#if defined(MBEDTLS_ECP_DOUBLE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_double_jac( grp, R, P ) );
#endif /* MBEDTLS_ECP_DOUBLE_JAC_ALT */

    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
 c0211f6:	4668      	mov	r0, sp
 c0211f8:	ad03      	add	r5, sp, #12
{
 c0211fa:	4689      	mov	r9, r1
 c0211fc:	4690      	mov	r8, r2
    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
 c0211fe:	f7fc fc27 	bl	c01da50 <mbedtls_mpi_init>
 c021202:	4628      	mov	r0, r5
 c021204:	f7fc fc24 	bl	c01da50 <mbedtls_mpi_init>
 c021208:	a806      	add	r0, sp, #24
 c02120a:	f7fc fc21 	bl	c01da50 <mbedtls_mpi_init>
 c02120e:	a809      	add	r0, sp, #36	; 0x24
 c021210:	f7fc fc1e 	bl	c01da50 <mbedtls_mpi_init>

    /* Special case for A = -3 */
    if( grp->A.p == NULL )
 c021214:	69b3      	ldr	r3, [r6, #24]
 c021216:	2b00      	cmp	r3, #0
 c021218:	f040 815e 	bne.w	c0214d8 <ecp_double_jac+0x2ea>
    {
        /* M = 3(X + Z^2)(X - Z^2) */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 c02121c:	f108 0218 	add.w	r2, r8, #24
 c021220:	4611      	mov	r1, r2
 c021222:	4628      	mov	r0, r5
 c021224:	f7fd f92c 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c021228:	4604      	mov	r4, r0
 c02122a:	2800      	cmp	r0, #0
 c02122c:	f040 8131 	bne.w	c021492 <ecp_double_jac+0x2a4>
 c021230:	4631      	mov	r1, r6
 c021232:	4628      	mov	r0, r5
 c021234:	f7ff ff38 	bl	c0210a8 <ecp_modp>
 c021238:	4604      	mov	r4, r0
 c02123a:	2800      	cmp	r0, #0
 c02123c:	f040 8129 	bne.w	c021492 <ecp_double_jac+0x2a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 c021240:	462a      	mov	r2, r5
 c021242:	4641      	mov	r1, r8
 c021244:	a806      	add	r0, sp, #24
 c021246:	f7fd f8aa 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c02124a:	4604      	mov	r4, r0
 c02124c:	2800      	cmp	r0, #0
 c02124e:	f040 8120 	bne.w	c021492 <ecp_double_jac+0x2a4>
 c021252:	1d37      	adds	r7, r6, #4
 c021254:	4639      	mov	r1, r7
 c021256:	a806      	add	r0, sp, #24
 c021258:	f7fc ffac 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c02125c:	2800      	cmp	r0, #0
 c02125e:	f280 810f 	bge.w	c021480 <ecp_double_jac+0x292>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
 c021262:	462a      	mov	r2, r5
 c021264:	4641      	mov	r1, r8
 c021266:	a809      	add	r0, sp, #36	; 0x24
 c021268:	f7fd f8bb 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c02126c:	4604      	mov	r4, r0
 c02126e:	2800      	cmp	r0, #0
 c021270:	f040 810f 	bne.w	c021492 <ecp_double_jac+0x2a4>
 c021274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c021276:	2b00      	cmp	r3, #0
 c021278:	f2c0 811b 	blt.w	c0214b2 <ecp_double_jac+0x2c4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
 c02127c:	aa09      	add	r2, sp, #36	; 0x24
 c02127e:	a906      	add	r1, sp, #24
 c021280:	4628      	mov	r0, r5
 c021282:	f7fd f8fd 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c021286:	4604      	mov	r4, r0
 c021288:	2800      	cmp	r0, #0
 c02128a:	f040 8102 	bne.w	c021492 <ecp_double_jac+0x2a4>
 c02128e:	4631      	mov	r1, r6
 c021290:	4628      	mov	r0, r5
 c021292:	f7ff ff09 	bl	c0210a8 <ecp_modp>
 c021296:	4604      	mov	r4, r0
 c021298:	2800      	cmp	r0, #0
 c02129a:	f040 80fa 	bne.w	c021492 <ecp_double_jac+0x2a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 c02129e:	2203      	movs	r2, #3
 c0212a0:	4629      	mov	r1, r5
 c0212a2:	4668      	mov	r0, sp
 c0212a4:	f7fd f955 	bl	c01e552 <mbedtls_mpi_mul_int>
 c0212a8:	4604      	mov	r4, r0
 c0212aa:	2800      	cmp	r0, #0
 c0212ac:	f040 80f1 	bne.w	c021492 <ecp_double_jac+0x2a4>
 c0212b0:	4639      	mov	r1, r7
 c0212b2:	4668      	mov	r0, sp
 c0212b4:	f7fc ff7e 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c0212b8:	2800      	cmp	r0, #0
 c0212ba:	f280 8107 	bge.w	c0214cc <ecp_double_jac+0x2de>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
        }
    }

    /* S = 4.X.Y^2 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
 c0212be:	f108 0a0c 	add.w	sl, r8, #12
 c0212c2:	4652      	mov	r2, sl
 c0212c4:	4651      	mov	r1, sl
 c0212c6:	a806      	add	r0, sp, #24
 c0212c8:	f7fd f8da 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c0212cc:	4604      	mov	r4, r0
 c0212ce:	2800      	cmp	r0, #0
 c0212d0:	f040 80df 	bne.w	c021492 <ecp_double_jac+0x2a4>
 c0212d4:	4631      	mov	r1, r6
 c0212d6:	a806      	add	r0, sp, #24
 c0212d8:	f7ff fee6 	bl	c0210a8 <ecp_modp>
 c0212dc:	4604      	mov	r4, r0
 c0212de:	2800      	cmp	r0, #0
 c0212e0:	f040 80d7 	bne.w	c021492 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 c0212e4:	2101      	movs	r1, #1
 c0212e6:	a806      	add	r0, sp, #24
 c0212e8:	f7fc fe4c 	bl	c01df84 <mbedtls_mpi_shift_l>
 c0212ec:	4604      	mov	r4, r0
 c0212ee:	2800      	cmp	r0, #0
 c0212f0:	f040 80cf 	bne.w	c021492 <ecp_double_jac+0x2a4>
 c0212f4:	1d37      	adds	r7, r6, #4
 c0212f6:	4639      	mov	r1, r7
 c0212f8:	a806      	add	r0, sp, #24
 c0212fa:	f7fc ff5b 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c0212fe:	2800      	cmp	r0, #0
 c021300:	f280 815e 	bge.w	c0215c0 <ecp_double_jac+0x3d2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
 c021304:	aa06      	add	r2, sp, #24
 c021306:	4641      	mov	r1, r8
 c021308:	4628      	mov	r0, r5
 c02130a:	f7fd f8b9 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c02130e:	4604      	mov	r4, r0
 c021310:	2800      	cmp	r0, #0
 c021312:	f040 80be 	bne.w	c021492 <ecp_double_jac+0x2a4>
 c021316:	4631      	mov	r1, r6
 c021318:	4628      	mov	r0, r5
 c02131a:	f7ff fec5 	bl	c0210a8 <ecp_modp>
 c02131e:	4604      	mov	r4, r0
 c021320:	2800      	cmp	r0, #0
 c021322:	f040 80b6 	bne.w	c021492 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 c021326:	2101      	movs	r1, #1
 c021328:	4628      	mov	r0, r5
 c02132a:	f7fc fe2b 	bl	c01df84 <mbedtls_mpi_shift_l>
 c02132e:	4604      	mov	r4, r0
 c021330:	2800      	cmp	r0, #0
 c021332:	f040 80ae 	bne.w	c021492 <ecp_double_jac+0x2a4>
 c021336:	4639      	mov	r1, r7
 c021338:	4628      	mov	r0, r5
 c02133a:	f7fc ff3b 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c02133e:	2800      	cmp	r0, #0
 c021340:	f280 8148 	bge.w	c0215d4 <ecp_double_jac+0x3e6>

    /* U = 8.Y^4 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
 c021344:	aa06      	add	r2, sp, #24
 c021346:	4611      	mov	r1, r2
 c021348:	a809      	add	r0, sp, #36	; 0x24
 c02134a:	f7fd f899 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c02134e:	4604      	mov	r4, r0
 c021350:	2800      	cmp	r0, #0
 c021352:	f040 809e 	bne.w	c021492 <ecp_double_jac+0x2a4>
 c021356:	4631      	mov	r1, r6
 c021358:	a809      	add	r0, sp, #36	; 0x24
 c02135a:	f7ff fea5 	bl	c0210a8 <ecp_modp>
 c02135e:	4604      	mov	r4, r0
 c021360:	2800      	cmp	r0, #0
 c021362:	f040 8096 	bne.w	c021492 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 c021366:	2101      	movs	r1, #1
 c021368:	a809      	add	r0, sp, #36	; 0x24
 c02136a:	f7fc fe0b 	bl	c01df84 <mbedtls_mpi_shift_l>
 c02136e:	4604      	mov	r4, r0
 c021370:	2800      	cmp	r0, #0
 c021372:	f040 808e 	bne.w	c021492 <ecp_double_jac+0x2a4>
 c021376:	4639      	mov	r1, r7
 c021378:	a809      	add	r0, sp, #36	; 0x24
 c02137a:	f7fc ff1b 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c02137e:	2800      	cmp	r0, #0
 c021380:	f280 812e 	bge.w	c0215e0 <ecp_double_jac+0x3f2>

    /* T = M^2 - 2.S */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
 c021384:	466a      	mov	r2, sp
 c021386:	4669      	mov	r1, sp
 c021388:	a806      	add	r0, sp, #24
 c02138a:	f7fd f879 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c02138e:	4604      	mov	r4, r0
 c021390:	2800      	cmp	r0, #0
 c021392:	d17e      	bne.n	c021492 <ecp_double_jac+0x2a4>
 c021394:	4631      	mov	r1, r6
 c021396:	a806      	add	r0, sp, #24
 c021398:	f7ff fe86 	bl	c0210a8 <ecp_modp>
 c02139c:	4604      	mov	r4, r0
 c02139e:	2800      	cmp	r0, #0
 c0213a0:	d177      	bne.n	c021492 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 c0213a2:	a906      	add	r1, sp, #24
 c0213a4:	462a      	mov	r2, r5
 c0213a6:	4608      	mov	r0, r1
 c0213a8:	f7fd f81b 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c0213ac:	4604      	mov	r4, r0
 c0213ae:	2800      	cmp	r0, #0
 c0213b0:	d16f      	bne.n	c021492 <ecp_double_jac+0x2a4>
 c0213b2:	9b06      	ldr	r3, [sp, #24]
 c0213b4:	2b00      	cmp	r3, #0
 c0213b6:	f2c0 8119 	blt.w	c0215ec <ecp_double_jac+0x3fe>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 c0213ba:	a906      	add	r1, sp, #24
 c0213bc:	462a      	mov	r2, r5
 c0213be:	4608      	mov	r0, r1
 c0213c0:	f7fd f80f 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c0213c4:	4604      	mov	r4, r0
 c0213c6:	2800      	cmp	r0, #0
 c0213c8:	d163      	bne.n	c021492 <ecp_double_jac+0x2a4>
 c0213ca:	9b06      	ldr	r3, [sp, #24]
 c0213cc:	2b00      	cmp	r3, #0
 c0213ce:	f2c0 811a 	blt.w	c021606 <ecp_double_jac+0x418>

    /* S = M(S - T) - U */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
 c0213d2:	aa06      	add	r2, sp, #24
 c0213d4:	4629      	mov	r1, r5
 c0213d6:	4628      	mov	r0, r5
 c0213d8:	f7fd f803 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c0213dc:	4604      	mov	r4, r0
 c0213de:	2800      	cmp	r0, #0
 c0213e0:	d157      	bne.n	c021492 <ecp_double_jac+0x2a4>
 c0213e2:	9b03      	ldr	r3, [sp, #12]
 c0213e4:	2b00      	cmp	r3, #0
 c0213e6:	f2c0 811b 	blt.w	c021620 <ecp_double_jac+0x432>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
 c0213ea:	466a      	mov	r2, sp
 c0213ec:	4629      	mov	r1, r5
 c0213ee:	4628      	mov	r0, r5
 c0213f0:	f7fd f846 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c0213f4:	4604      	mov	r4, r0
 c0213f6:	2800      	cmp	r0, #0
 c0213f8:	d14b      	bne.n	c021492 <ecp_double_jac+0x2a4>
 c0213fa:	4631      	mov	r1, r6
 c0213fc:	4628      	mov	r0, r5
 c0213fe:	f7ff fe53 	bl	c0210a8 <ecp_modp>
 c021402:	4604      	mov	r4, r0
 c021404:	2800      	cmp	r0, #0
 c021406:	d144      	bne.n	c021492 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 c021408:	aa09      	add	r2, sp, #36	; 0x24
 c02140a:	4629      	mov	r1, r5
 c02140c:	4628      	mov	r0, r5
 c02140e:	f7fc ffe8 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c021412:	4604      	mov	r4, r0
 c021414:	2800      	cmp	r0, #0
 c021416:	d13c      	bne.n	c021492 <ecp_double_jac+0x2a4>
 c021418:	46ab      	mov	fp, r5
 c02141a:	9b03      	ldr	r3, [sp, #12]
 c02141c:	2b00      	cmp	r3, #0
 c02141e:	f2c0 810c 	blt.w	c02163a <ecp_double_jac+0x44c>

    /* U = 2.Y.Z */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
 c021422:	f108 0218 	add.w	r2, r8, #24
 c021426:	4651      	mov	r1, sl
 c021428:	a809      	add	r0, sp, #36	; 0x24
 c02142a:	f7fd f829 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c02142e:	4604      	mov	r4, r0
 c021430:	bb78      	cbnz	r0, c021492 <ecp_double_jac+0x2a4>
 c021432:	4631      	mov	r1, r6
 c021434:	a809      	add	r0, sp, #36	; 0x24
 c021436:	f7ff fe37 	bl	c0210a8 <ecp_modp>
 c02143a:	4604      	mov	r4, r0
 c02143c:	bb48      	cbnz	r0, c021492 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 c02143e:	2101      	movs	r1, #1
 c021440:	a809      	add	r0, sp, #36	; 0x24
 c021442:	f7fc fd9f 	bl	c01df84 <mbedtls_mpi_shift_l>
 c021446:	4604      	mov	r4, r0
 c021448:	bb18      	cbnz	r0, c021492 <ecp_double_jac+0x2a4>
 c02144a:	4639      	mov	r1, r7
 c02144c:	a809      	add	r0, sp, #36	; 0x24
 c02144e:	f7fc feb1 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c021452:	2800      	cmp	r0, #0
 c021454:	f280 8102 	bge.w	c02165c <ecp_double_jac+0x46e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
 c021458:	a906      	add	r1, sp, #24
 c02145a:	4648      	mov	r0, r9
 c02145c:	f7fc fb6f 	bl	c01db3e <mbedtls_mpi_copy>
 c021460:	4604      	mov	r4, r0
 c021462:	b9b0      	cbnz	r0, c021492 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
 c021464:	a903      	add	r1, sp, #12
 c021466:	f109 000c 	add.w	r0, r9, #12
 c02146a:	f7fc fb68 	bl	c01db3e <mbedtls_mpi_copy>
 c02146e:	4604      	mov	r4, r0
 c021470:	b978      	cbnz	r0, c021492 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );
 c021472:	a909      	add	r1, sp, #36	; 0x24
 c021474:	f109 0018 	add.w	r0, r9, #24
 c021478:	f7fc fb61 	bl	c01db3e <mbedtls_mpi_copy>
 c02147c:	4604      	mov	r4, r0

cleanup:
 c02147e:	e008      	b.n	c021492 <ecp_double_jac+0x2a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 c021480:	a906      	add	r1, sp, #24
 c021482:	463a      	mov	r2, r7
 c021484:	4608      	mov	r0, r1
 c021486:	f7fc ff4c 	bl	c01e322 <mbedtls_mpi_sub_abs>
 c02148a:	4604      	mov	r4, r0
 c02148c:	2800      	cmp	r0, #0
 c02148e:	f43f aee1 	beq.w	c021254 <ecp_double_jac+0x66>
    mbedtls_mpi_free( &M ); mbedtls_mpi_free( &S ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &U );
 c021492:	4668      	mov	r0, sp
 c021494:	f7fc fae2 	bl	c01da5c <mbedtls_mpi_free>
 c021498:	4628      	mov	r0, r5
 c02149a:	f7fc fadf 	bl	c01da5c <mbedtls_mpi_free>
 c02149e:	a806      	add	r0, sp, #24
 c0214a0:	f7fc fadc 	bl	c01da5c <mbedtls_mpi_free>
 c0214a4:	a809      	add	r0, sp, #36	; 0x24
 c0214a6:	f7fc fad9 	bl	c01da5c <mbedtls_mpi_free>

    return( ret );
}
 c0214aa:	4620      	mov	r0, r4
 c0214ac:	b00d      	add	sp, #52	; 0x34
 c0214ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
 c0214b2:	2100      	movs	r1, #0
 c0214b4:	a809      	add	r0, sp, #36	; 0x24
 c0214b6:	f7fc febd 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c0214ba:	2800      	cmp	r0, #0
 c0214bc:	f43f aede 	beq.w	c02127c <ecp_double_jac+0x8e>
 c0214c0:	a909      	add	r1, sp, #36	; 0x24
 c0214c2:	463a      	mov	r2, r7
 c0214c4:	4608      	mov	r0, r1
 c0214c6:	f7fc ff6a 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c0214ca:	e6cf      	b.n	c02126c <ecp_double_jac+0x7e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 c0214cc:	463a      	mov	r2, r7
 c0214ce:	4669      	mov	r1, sp
 c0214d0:	4668      	mov	r0, sp
 c0214d2:	f7fc ff26 	bl	c01e322 <mbedtls_mpi_sub_abs>
 c0214d6:	e6e7      	b.n	c0212a8 <ecp_double_jac+0xba>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
 c0214d8:	4642      	mov	r2, r8
 c0214da:	4641      	mov	r1, r8
 c0214dc:	4628      	mov	r0, r5
 c0214de:	f7fc ffcf 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c0214e2:	4604      	mov	r4, r0
 c0214e4:	2800      	cmp	r0, #0
 c0214e6:	d1d4      	bne.n	c021492 <ecp_double_jac+0x2a4>
 c0214e8:	4631      	mov	r1, r6
 c0214ea:	4628      	mov	r0, r5
 c0214ec:	f7ff fddc 	bl	c0210a8 <ecp_modp>
 c0214f0:	4604      	mov	r4, r0
 c0214f2:	2800      	cmp	r0, #0
 c0214f4:	d1cd      	bne.n	c021492 <ecp_double_jac+0x2a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 c0214f6:	2203      	movs	r2, #3
 c0214f8:	4629      	mov	r1, r5
 c0214fa:	4668      	mov	r0, sp
 c0214fc:	f7fd f829 	bl	c01e552 <mbedtls_mpi_mul_int>
 c021500:	4604      	mov	r4, r0
 c021502:	2800      	cmp	r0, #0
 c021504:	d1c5      	bne.n	c021492 <ecp_double_jac+0x2a4>
 c021506:	1d37      	adds	r7, r6, #4
 c021508:	4639      	mov	r1, r7
 c02150a:	4668      	mov	r0, sp
 c02150c:	f7fc fe52 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c021510:	2800      	cmp	r0, #0
 c021512:	da4c      	bge.n	c0215ae <ecp_double_jac+0x3c0>
        if( mbedtls_mpi_cmp_int( &grp->A, 0 ) != 0 )
 c021514:	f106 0a10 	add.w	sl, r6, #16
 c021518:	2100      	movs	r1, #0
 c02151a:	4650      	mov	r0, sl
 c02151c:	f7fc fe8a 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c021520:	2800      	cmp	r0, #0
 c021522:	f43f aecc 	beq.w	c0212be <ecp_double_jac+0xd0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 c021526:	f108 0218 	add.w	r2, r8, #24
 c02152a:	4611      	mov	r1, r2
 c02152c:	4628      	mov	r0, r5
 c02152e:	f7fc ffa7 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c021532:	4604      	mov	r4, r0
 c021534:	2800      	cmp	r0, #0
 c021536:	d1ac      	bne.n	c021492 <ecp_double_jac+0x2a4>
 c021538:	4631      	mov	r1, r6
 c02153a:	4628      	mov	r0, r5
 c02153c:	f7ff fdb4 	bl	c0210a8 <ecp_modp>
 c021540:	4604      	mov	r4, r0
 c021542:	2800      	cmp	r0, #0
 c021544:	d1a5      	bne.n	c021492 <ecp_double_jac+0x2a4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 c021546:	462a      	mov	r2, r5
 c021548:	4629      	mov	r1, r5
 c02154a:	a806      	add	r0, sp, #24
 c02154c:	f7fc ff98 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c021550:	4604      	mov	r4, r0
 c021552:	2800      	cmp	r0, #0
 c021554:	d19d      	bne.n	c021492 <ecp_double_jac+0x2a4>
 c021556:	4631      	mov	r1, r6
 c021558:	a806      	add	r0, sp, #24
 c02155a:	f7ff fda5 	bl	c0210a8 <ecp_modp>
 c02155e:	4604      	mov	r4, r0
 c021560:	2800      	cmp	r0, #0
 c021562:	d196      	bne.n	c021492 <ecp_double_jac+0x2a4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 c021564:	4652      	mov	r2, sl
 c021566:	a906      	add	r1, sp, #24
 c021568:	4628      	mov	r0, r5
 c02156a:	f7fc ff89 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c02156e:	4604      	mov	r4, r0
 c021570:	2800      	cmp	r0, #0
 c021572:	d18e      	bne.n	c021492 <ecp_double_jac+0x2a4>
 c021574:	4631      	mov	r1, r6
 c021576:	4628      	mov	r0, r5
 c021578:	f7ff fd96 	bl	c0210a8 <ecp_modp>
 c02157c:	4604      	mov	r4, r0
 c02157e:	2800      	cmp	r0, #0
 c021580:	d187      	bne.n	c021492 <ecp_double_jac+0x2a4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
 c021582:	462a      	mov	r2, r5
 c021584:	4669      	mov	r1, sp
 c021586:	4668      	mov	r0, sp
 c021588:	f7fc ff09 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c02158c:	4604      	mov	r4, r0
 c02158e:	2800      	cmp	r0, #0
 c021590:	f47f af7f 	bne.w	c021492 <ecp_double_jac+0x2a4>
 c021594:	4639      	mov	r1, r7
 c021596:	4668      	mov	r0, sp
 c021598:	f7fc fe0c 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c02159c:	2800      	cmp	r0, #0
 c02159e:	f6ff ae8e 	blt.w	c0212be <ecp_double_jac+0xd0>
 c0215a2:	463a      	mov	r2, r7
 c0215a4:	4669      	mov	r1, sp
 c0215a6:	4668      	mov	r0, sp
 c0215a8:	f7fc febb 	bl	c01e322 <mbedtls_mpi_sub_abs>
 c0215ac:	e7ee      	b.n	c02158c <ecp_double_jac+0x39e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 c0215ae:	463a      	mov	r2, r7
 c0215b0:	4669      	mov	r1, sp
 c0215b2:	4668      	mov	r0, sp
 c0215b4:	f7fc feb5 	bl	c01e322 <mbedtls_mpi_sub_abs>
 c0215b8:	4604      	mov	r4, r0
 c0215ba:	2800      	cmp	r0, #0
 c0215bc:	d0a4      	beq.n	c021508 <ecp_double_jac+0x31a>
cleanup:
 c0215be:	e768      	b.n	c021492 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 c0215c0:	a906      	add	r1, sp, #24
 c0215c2:	463a      	mov	r2, r7
 c0215c4:	4608      	mov	r0, r1
 c0215c6:	f7fc feac 	bl	c01e322 <mbedtls_mpi_sub_abs>
 c0215ca:	4604      	mov	r4, r0
 c0215cc:	2800      	cmp	r0, #0
 c0215ce:	f43f ae92 	beq.w	c0212f6 <ecp_double_jac+0x108>
cleanup:
 c0215d2:	e75e      	b.n	c021492 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 c0215d4:	463a      	mov	r2, r7
 c0215d6:	4629      	mov	r1, r5
 c0215d8:	4628      	mov	r0, r5
 c0215da:	f7fc fea2 	bl	c01e322 <mbedtls_mpi_sub_abs>
 c0215de:	e6a6      	b.n	c02132e <ecp_double_jac+0x140>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 c0215e0:	a909      	add	r1, sp, #36	; 0x24
 c0215e2:	463a      	mov	r2, r7
 c0215e4:	4608      	mov	r0, r1
 c0215e6:	f7fc fe9c 	bl	c01e322 <mbedtls_mpi_sub_abs>
 c0215ea:	e6c0      	b.n	c02136e <ecp_double_jac+0x180>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 c0215ec:	2100      	movs	r1, #0
 c0215ee:	a806      	add	r0, sp, #24
 c0215f0:	f7fc fe20 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c0215f4:	2800      	cmp	r0, #0
 c0215f6:	f43f aee0 	beq.w	c0213ba <ecp_double_jac+0x1cc>
 c0215fa:	a906      	add	r1, sp, #24
 c0215fc:	463a      	mov	r2, r7
 c0215fe:	4608      	mov	r0, r1
 c021600:	f7fc fecd 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c021604:	e6d2      	b.n	c0213ac <ecp_double_jac+0x1be>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 c021606:	2100      	movs	r1, #0
 c021608:	a806      	add	r0, sp, #24
 c02160a:	f7fc fe13 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c02160e:	2800      	cmp	r0, #0
 c021610:	f43f aedf 	beq.w	c0213d2 <ecp_double_jac+0x1e4>
 c021614:	a906      	add	r1, sp, #24
 c021616:	463a      	mov	r2, r7
 c021618:	4608      	mov	r0, r1
 c02161a:	f7fc fec0 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c02161e:	e6d1      	b.n	c0213c4 <ecp_double_jac+0x1d6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
 c021620:	2100      	movs	r1, #0
 c021622:	4628      	mov	r0, r5
 c021624:	f7fc fe06 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c021628:	2800      	cmp	r0, #0
 c02162a:	f43f aede 	beq.w	c0213ea <ecp_double_jac+0x1fc>
 c02162e:	463a      	mov	r2, r7
 c021630:	4629      	mov	r1, r5
 c021632:	4628      	mov	r0, r5
 c021634:	f7fc feb3 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c021638:	e6d0      	b.n	c0213dc <ecp_double_jac+0x1ee>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 c02163a:	2100      	movs	r1, #0
 c02163c:	4658      	mov	r0, fp
 c02163e:	f7fc fdf9 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c021642:	2800      	cmp	r0, #0
 c021644:	f43f aeed 	beq.w	c021422 <ecp_double_jac+0x234>
 c021648:	463a      	mov	r2, r7
 c02164a:	4659      	mov	r1, fp
 c02164c:	4658      	mov	r0, fp
 c02164e:	f7fc fea6 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c021652:	4604      	mov	r4, r0
 c021654:	2800      	cmp	r0, #0
 c021656:	f43f aee0 	beq.w	c02141a <ecp_double_jac+0x22c>
cleanup:
 c02165a:	e71a      	b.n	c021492 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 c02165c:	a909      	add	r1, sp, #36	; 0x24
 c02165e:	463a      	mov	r2, r7
 c021660:	4608      	mov	r0, r1
 c021662:	f7fc fe5e 	bl	c01e322 <mbedtls_mpi_sub_abs>
 c021666:	e6ee      	b.n	c021446 <ecp_double_jac+0x258>

0c021668 <ecp_normalize_jac_many.part.3>:
static int ecp_normalize_jac_many( const mbedtls_ecp_group *grp,
 c021668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02166c:	4606      	mov	r6, r0
 c02166e:	b08d      	sub	sp, #52	; 0x34
 c021670:	460c      	mov	r4, r1
    if( ( c = mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
 c021672:	4610      	mov	r0, r2
 c021674:	210c      	movs	r1, #12
static int ecp_normalize_jac_many( const mbedtls_ecp_group *grp,
 c021676:	4691      	mov	r9, r2
    if( ( c = mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
 c021678:	f005 f840 	bl	c0266fc <mbedtls_calloc>
 c02167c:	4607      	mov	r7, r0
 c02167e:	2800      	cmp	r0, #0
 c021680:	f000 80f9 	beq.w	c021876 <ecp_normalize_jac_many.part.3+0x20e>
 c021684:	250c      	movs	r5, #12
 c021686:	4683      	mov	fp, r0
 c021688:	4680      	mov	r8, r0
 c02168a:	fb05 f509 	mul.w	r5, r5, r9
 c02168e:	eb05 0a00 	add.w	sl, r5, r0
    for( i = 0; i < T_size; i++ )
 c021692:	45c2      	cmp	sl, r8
 c021694:	d14b      	bne.n	c02172e <ecp_normalize_jac_many.part.3+0xc6>
    mbedtls_mpi_init( &u ); mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 c021696:	a803      	add	r0, sp, #12
 c021698:	f7fc f9da 	bl	c01da50 <mbedtls_mpi_init>
 c02169c:	a806      	add	r0, sp, #24
 c02169e:	f7fc f9d7 	bl	c01da50 <mbedtls_mpi_init>
 c0216a2:	a809      	add	r0, sp, #36	; 0x24
 c0216a4:	f7fc f9d4 	bl	c01da50 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );
 c0216a8:	6821      	ldr	r1, [r4, #0]
 c0216aa:	4638      	mov	r0, r7
 c0216ac:	3118      	adds	r1, #24
 c0216ae:	f7fc fa46 	bl	c01db3e <mbedtls_mpi_copy>
 c0216b2:	4602      	mov	r2, r0
 c0216b4:	bb20      	cbnz	r0, c021700 <ecp_normalize_jac_many.part.3+0x98>
    for( i = 1; i < T_size; i++ )
 c0216b6:	2301      	movs	r3, #1
 c0216b8:	f107 0a0c 	add.w	sl, r7, #12
 c0216bc:	4599      	cmp	r9, r3
 c0216be:	d83c      	bhi.n	c02173a <ecp_normalize_jac_many.part.3+0xd2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[T_size-1], &grp->P ) );
 c0216c0:	f1a5 010c 	sub.w	r1, r5, #12
 c0216c4:	1d32      	adds	r2, r6, #4
 c0216c6:	4439      	add	r1, r7
 c0216c8:	a803      	add	r0, sp, #12
 c0216ca:	f7fd fdbc 	bl	c01f246 <mbedtls_mpi_inv_mod>
 c0216ce:	4602      	mov	r2, r0
 c0216d0:	b9b0      	cbnz	r0, c021700 <ecp_normalize_jac_many.part.3+0x98>
 c0216d2:	3d18      	subs	r5, #24
    for( i = T_size - 1; ; i-- )
 c0216d4:	f109 3aff 	add.w	sl, r9, #4294967295
 c0216d8:	eb04 0489 	add.w	r4, r4, r9, lsl #2
 c0216dc:	443d      	add	r5, r7
        if( i == 0 ) {
 c0216de:	f1ba 0f00 	cmp.w	sl, #0
 c0216e2:	d142      	bne.n	c02176a <ecp_normalize_jac_many.part.3+0x102>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Zi, &u ) );
 c0216e4:	a903      	add	r1, sp, #12
 c0216e6:	a806      	add	r0, sp, #24
 c0216e8:	f7fc fa29 	bl	c01db3e <mbedtls_mpi_copy>
 c0216ec:	4602      	mov	r2, r0
 c0216ee:	b938      	cbnz	r0, c021700 <ecp_normalize_jac_many.part.3+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 c0216f0:	aa06      	add	r2, sp, #24
 c0216f2:	4611      	mov	r1, r2
 c0216f4:	a809      	add	r0, sp, #36	; 0x24
 c0216f6:	f7fc fec3 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c0216fa:	4602      	mov	r2, r0
 c0216fc:	2800      	cmp	r0, #0
 c0216fe:	d052      	beq.n	c0217a6 <ecp_normalize_jac_many.part.3+0x13e>
    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 c021700:	a803      	add	r0, sp, #12
 c021702:	9201      	str	r2, [sp, #4]
 c021704:	f7fc f9aa 	bl	c01da5c <mbedtls_mpi_free>
 c021708:	a806      	add	r0, sp, #24
 c02170a:	f7fc f9a7 	bl	c01da5c <mbedtls_mpi_free>
 c02170e:	a809      	add	r0, sp, #36	; 0x24
 c021710:	f7fc f9a4 	bl	c01da5c <mbedtls_mpi_free>
 c021714:	9a01      	ldr	r2, [sp, #4]
    for( i = 0; i < T_size; i++ )
 c021716:	45c3      	cmp	fp, r8
 c021718:	9201      	str	r2, [sp, #4]
 c02171a:	f040 80a6 	bne.w	c02186a <ecp_normalize_jac_many.part.3+0x202>
    mbedtls_free( c );
 c02171e:	4638      	mov	r0, r7
 c021720:	f004 fff2 	bl	c026708 <mbedtls_free>
 c021724:	9a01      	ldr	r2, [sp, #4]
}
 c021726:	4610      	mov	r0, r2
 c021728:	b00d      	add	sp, #52	; 0x34
 c02172a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mbedtls_mpi_init( &c[i] );
 c02172e:	4640      	mov	r0, r8
 c021730:	f7fc f98e 	bl	c01da50 <mbedtls_mpi_init>
 c021734:	f108 080c 	add.w	r8, r8, #12
 c021738:	e7ab      	b.n	c021692 <ecp_normalize_jac_many.part.3+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &c[i], &c[i-1], &T[i]->Z ) );
 c02173a:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 c02173e:	f1aa 010c 	sub.w	r1, sl, #12
 c021742:	3218      	adds	r2, #24
 c021744:	4650      	mov	r0, sl
 c021746:	9301      	str	r3, [sp, #4]
 c021748:	f7fc fe9a 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c02174c:	4602      	mov	r2, r0
 c02174e:	2800      	cmp	r0, #0
 c021750:	d1d6      	bne.n	c021700 <ecp_normalize_jac_many.part.3+0x98>
        MOD_MUL( c[i] );
 c021752:	4650      	mov	r0, sl
 c021754:	4631      	mov	r1, r6
 c021756:	f7ff fca7 	bl	c0210a8 <ecp_modp>
 c02175a:	f10a 0a0c 	add.w	sl, sl, #12
 c02175e:	4602      	mov	r2, r0
 c021760:	2800      	cmp	r0, #0
 c021762:	d1cd      	bne.n	c021700 <ecp_normalize_jac_many.part.3+0x98>
    for( i = 1; i < T_size; i++ )
 c021764:	9b01      	ldr	r3, [sp, #4]
 c021766:	3301      	adds	r3, #1
 c021768:	e7a8      	b.n	c0216bc <ecp_normalize_jac_many.part.3+0x54>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 c02176a:	462a      	mov	r2, r5
 c02176c:	a903      	add	r1, sp, #12
 c02176e:	a806      	add	r0, sp, #24
 c021770:	f7fc fe86 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c021774:	4602      	mov	r2, r0
 c021776:	2800      	cmp	r0, #0
 c021778:	d1c2      	bne.n	c021700 <ecp_normalize_jac_many.part.3+0x98>
 c02177a:	4631      	mov	r1, r6
 c02177c:	a806      	add	r0, sp, #24
 c02177e:	f7ff fc93 	bl	c0210a8 <ecp_modp>
 c021782:	4602      	mov	r2, r0
 c021784:	2800      	cmp	r0, #0
 c021786:	d1bb      	bne.n	c021700 <ecp_normalize_jac_many.part.3+0x98>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
 c021788:	f854 2c04 	ldr.w	r2, [r4, #-4]
 c02178c:	a903      	add	r1, sp, #12
 c02178e:	3218      	adds	r2, #24
 c021790:	4608      	mov	r0, r1
 c021792:	f7fc fe75 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c021796:	4602      	mov	r2, r0
 c021798:	2800      	cmp	r0, #0
 c02179a:	d1b1      	bne.n	c021700 <ecp_normalize_jac_many.part.3+0x98>
 c02179c:	4631      	mov	r1, r6
 c02179e:	a803      	add	r0, sp, #12
 c0217a0:	f7ff fc82 	bl	c0210a8 <ecp_modp>
 c0217a4:	e7a2      	b.n	c0216ec <ecp_normalize_jac_many.part.3+0x84>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 c0217a6:	4631      	mov	r1, r6
 c0217a8:	a809      	add	r0, sp, #36	; 0x24
 c0217aa:	f7ff fc7d 	bl	c0210a8 <ecp_modp>
 c0217ae:	4602      	mov	r2, r0
 c0217b0:	2800      	cmp	r0, #0
 c0217b2:	d1a5      	bne.n	c021700 <ecp_normalize_jac_many.part.3+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 c0217b4:	f854 1c04 	ldr.w	r1, [r4, #-4]
 c0217b8:	aa09      	add	r2, sp, #36	; 0x24
 c0217ba:	4608      	mov	r0, r1
 c0217bc:	f7fc fe60 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c0217c0:	4602      	mov	r2, r0
 c0217c2:	2800      	cmp	r0, #0
 c0217c4:	d19c      	bne.n	c021700 <ecp_normalize_jac_many.part.3+0x98>
 c0217c6:	4631      	mov	r1, r6
 c0217c8:	f854 0c04 	ldr.w	r0, [r4, #-4]
 c0217cc:	f7ff fc6c 	bl	c0210a8 <ecp_modp>
 c0217d0:	4602      	mov	r2, r0
 c0217d2:	2800      	cmp	r0, #0
 c0217d4:	d194      	bne.n	c021700 <ecp_normalize_jac_many.part.3+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 c0217d6:	f854 1c04 	ldr.w	r1, [r4, #-4]
 c0217da:	aa09      	add	r2, sp, #36	; 0x24
 c0217dc:	310c      	adds	r1, #12
 c0217de:	4608      	mov	r0, r1
 c0217e0:	f7fc fe4e 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c0217e4:	4602      	mov	r2, r0
 c0217e6:	2800      	cmp	r0, #0
 c0217e8:	d18a      	bne.n	c021700 <ecp_normalize_jac_many.part.3+0x98>
 c0217ea:	f854 0c04 	ldr.w	r0, [r4, #-4]
 c0217ee:	4631      	mov	r1, r6
 c0217f0:	300c      	adds	r0, #12
 c0217f2:	f7ff fc59 	bl	c0210a8 <ecp_modp>
 c0217f6:	4602      	mov	r2, r0
 c0217f8:	2800      	cmp	r0, #0
 c0217fa:	d181      	bne.n	c021700 <ecp_normalize_jac_many.part.3+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 c0217fc:	f854 1c04 	ldr.w	r1, [r4, #-4]
 c021800:	aa06      	add	r2, sp, #24
 c021802:	310c      	adds	r1, #12
 c021804:	4608      	mov	r0, r1
 c021806:	f7fc fe3b 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c02180a:	4602      	mov	r2, r0
 c02180c:	2800      	cmp	r0, #0
 c02180e:	f47f af77 	bne.w	c021700 <ecp_normalize_jac_many.part.3+0x98>
 c021812:	f854 0c04 	ldr.w	r0, [r4, #-4]
 c021816:	4631      	mov	r1, r6
 c021818:	300c      	adds	r0, #12
 c02181a:	f7ff fc45 	bl	c0210a8 <ecp_modp>
 c02181e:	4602      	mov	r2, r0
 c021820:	2800      	cmp	r0, #0
 c021822:	f47f af6d 	bne.w	c021700 <ecp_normalize_jac_many.part.3+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );
 c021826:	68b1      	ldr	r1, [r6, #8]
 c021828:	f854 0c04 	ldr.w	r0, [r4, #-4]
 c02182c:	f7fc f94e 	bl	c01dacc <mbedtls_mpi_shrink>
 c021830:	4602      	mov	r2, r0
 c021832:	2800      	cmp	r0, #0
 c021834:	f47f af64 	bne.w	c021700 <ecp_normalize_jac_many.part.3+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->Y, grp->P.n ) );
 c021838:	f854 0c04 	ldr.w	r0, [r4, #-4]
 c02183c:	68b1      	ldr	r1, [r6, #8]
 c02183e:	300c      	adds	r0, #12
 c021840:	f7fc f944 	bl	c01dacc <mbedtls_mpi_shrink>
 c021844:	4602      	mov	r2, r0
 c021846:	2800      	cmp	r0, #0
 c021848:	f47f af5a 	bne.w	c021700 <ecp_normalize_jac_many.part.3+0x98>
 c02184c:	9001      	str	r0, [sp, #4]
        mbedtls_mpi_free( &T[i]->Z );
 c02184e:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 c021852:	3d0c      	subs	r5, #12
 c021854:	3018      	adds	r0, #24
 c021856:	f7fc f901 	bl	c01da5c <mbedtls_mpi_free>
        if( i == 0 )
 c02185a:	9a01      	ldr	r2, [sp, #4]
 c02185c:	f1ba 0f00 	cmp.w	sl, #0
 c021860:	f43f af4e 	beq.w	c021700 <ecp_normalize_jac_many.part.3+0x98>
    for( i = T_size - 1; ; i-- )
 c021864:	f10a 3aff 	add.w	sl, sl, #4294967295
 c021868:	e739      	b.n	c0216de <ecp_normalize_jac_many.part.3+0x76>
        mbedtls_mpi_free( &c[i] );
 c02186a:	4658      	mov	r0, fp
 c02186c:	f7fc f8f6 	bl	c01da5c <mbedtls_mpi_free>
 c021870:	f10b 0b0c 	add.w	fp, fp, #12
 c021874:	e74e      	b.n	c021714 <ecp_normalize_jac_many.part.3+0xac>
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );
 c021876:	4a01      	ldr	r2, [pc, #4]	; (c02187c <ecp_normalize_jac_many.part.3+0x214>)
 c021878:	e755      	b.n	c021726 <ecp_normalize_jac_many.part.3+0xbe>
 c02187a:	bf00      	nop
 c02187c:	ffffb280 	.word	0xffffb280

0c021880 <ecp_select_comb>:
 * See ecp_comb_recode_core() for background
 */
static int ecp_select_comb( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                            const mbedtls_ecp_point T[], unsigned char T_size,
                            unsigned char i )
{
 c021880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c021884:	4680      	mov	r8, r0
 c021886:	460e      	mov	r6, r1
 c021888:	4699      	mov	r9, r3

    /* Ignore the "sign" bit and scale down */
    ii =  ( i & 0x7Fu ) >> 1;

    /* Read the whole table to thwart cache-based timing attacks */
    for( j = 0; j < T_size; j++ )
 c02188a:	2400      	movs	r4, #0
{
 c02188c:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 c021890:	f102 050c 	add.w	r5, r2, #12
    ii =  ( i & 0x7Fu ) >> 1;
 c021894:	f3c7 0a45 	ubfx	sl, r7, #1, #6
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
 c021898:	f101 0b0c 	add.w	fp, r1, #12
    for( j = 0; j < T_size; j++ )
 c02189c:	454c      	cmp	r4, r9
 c02189e:	d107      	bne.n	c0218b0 <ecp_select_comb+0x30>
    }

    /* Safely invert result if i is "negative" */
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
 c0218a0:	4631      	mov	r1, r6
 c0218a2:	4640      	mov	r0, r8
 c0218a4:	09fa      	lsrs	r2, r7, #7

cleanup:
    return( ret );
}
 c0218a6:	b003      	add	sp, #12
 c0218a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
 c0218ac:	f7ff bbd9 	b.w	c021062 <ecp_safe_invert_jac>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
 c0218b0:	b2e3      	uxtb	r3, r4
 c0218b2:	eba3 020a 	sub.w	r2, r3, sl
 c0218b6:	4253      	negs	r3, r2
 c0218b8:	4153      	adcs	r3, r2
 c0218ba:	461a      	mov	r2, r3
 c0218bc:	f1a5 010c 	sub.w	r1, r5, #12
 c0218c0:	4630      	mov	r0, r6
 c0218c2:	9301      	str	r3, [sp, #4]
 c0218c4:	f7fc f97c 	bl	c01dbc0 <mbedtls_mpi_safe_cond_assign>
 c0218c8:	b948      	cbnz	r0, c0218de <ecp_select_comb+0x5e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
 c0218ca:	9b01      	ldr	r3, [sp, #4]
 c0218cc:	4629      	mov	r1, r5
 c0218ce:	461a      	mov	r2, r3
 c0218d0:	4658      	mov	r0, fp
 c0218d2:	f7fc f975 	bl	c01dbc0 <mbedtls_mpi_safe_cond_assign>
 c0218d6:	3401      	adds	r4, #1
 c0218d8:	3524      	adds	r5, #36	; 0x24
 c0218da:	2800      	cmp	r0, #0
 c0218dc:	d0de      	beq.n	c02189c <ecp_select_comb+0x1c>
}
 c0218de:	b003      	add	sp, #12
 c0218e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0c0218e4 <mbedtls_ecp_point_free.part.5>:
void mbedtls_ecp_point_free( mbedtls_ecp_point *pt )
 c0218e4:	b510      	push	{r4, lr}
 c0218e6:	4604      	mov	r4, r0
    mbedtls_mpi_free( &( pt->X ) );
 c0218e8:	f7fc f8b8 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Y ) );
 c0218ec:	f104 000c 	add.w	r0, r4, #12
 c0218f0:	f7fc f8b4 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Z ) );
 c0218f4:	f104 0018 	add.w	r0, r4, #24
}
 c0218f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &( pt->Z ) );
 c0218fc:	f7fc b8ae 	b.w	c01da5c <mbedtls_mpi_free>

0c021900 <mbedtls_ecp_grp_id_list>:
    if( ! init_done )
 c021900:	4a09      	ldr	r2, [pc, #36]	; (c021928 <mbedtls_ecp_grp_id_list+0x28>)
{
 c021902:	b530      	push	{r4, r5, lr}
    if( ! init_done )
 c021904:	6813      	ldr	r3, [r2, #0]
 c021906:	b15b      	cbz	r3, c021920 <mbedtls_ecp_grp_id_list+0x20>
}
 c021908:	4808      	ldr	r0, [pc, #32]	; (c02192c <mbedtls_ecp_grp_id_list+0x2c>)
 c02190a:	bd30      	pop	{r4, r5, pc}
 c02190c:	3301      	adds	r3, #1
             curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
 c02190e:	fb05 f103 	mul.w	r1, r5, r3
 c021912:	5d09      	ldrb	r1, [r1, r4]
            ecp_supported_grp_id[i++] = curve_info->grp_id;
 c021914:	54c1      	strb	r1, [r0, r3]
        for( curve_info = mbedtls_ecp_curve_list();
 c021916:	2900      	cmp	r1, #0
 c021918:	d1f8      	bne.n	c02190c <mbedtls_ecp_grp_id_list+0xc>
        init_done = 1;
 c02191a:	2301      	movs	r3, #1
 c02191c:	6013      	str	r3, [r2, #0]
 c02191e:	e7f3      	b.n	c021908 <mbedtls_ecp_grp_id_list+0x8>
             curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
 c021920:	4c03      	ldr	r4, [pc, #12]	; (c021930 <mbedtls_ecp_grp_id_list+0x30>)
 c021922:	250c      	movs	r5, #12
 c021924:	4801      	ldr	r0, [pc, #4]	; (c02192c <mbedtls_ecp_grp_id_list+0x2c>)
 c021926:	e7f2      	b.n	c02190e <mbedtls_ecp_grp_id_list+0xe>
 c021928:	30038034 	.word	0x30038034
 c02192c:	30038028 	.word	0x30038028
 c021930:	0c033530 	.word	0x0c033530

0c021934 <mbedtls_ecp_curve_info_from_grp_id>:
    for( curve_info = mbedtls_ecp_curve_list();
 c021934:	2300      	movs	r3, #0
{
 c021936:	b510      	push	{r4, lr}
 c021938:	4c05      	ldr	r4, [pc, #20]	; (c021950 <mbedtls_ecp_curve_info_from_grp_id+0x1c>)
         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
 c02193a:	5d1a      	ldrb	r2, [r3, r4]
 c02193c:	18e1      	adds	r1, r4, r3
    for( curve_info = mbedtls_ecp_curve_list();
 c02193e:	b90a      	cbnz	r2, c021944 <mbedtls_ecp_curve_info_from_grp_id+0x10>
    return( NULL );
 c021940:	4611      	mov	r1, r2
 c021942:	e003      	b.n	c02194c <mbedtls_ecp_curve_info_from_grp_id+0x18>
        if( curve_info->grp_id == grp_id )
 c021944:	4282      	cmp	r2, r0
 c021946:	f103 030c 	add.w	r3, r3, #12
 c02194a:	d1f6      	bne.n	c02193a <mbedtls_ecp_curve_info_from_grp_id+0x6>
}
 c02194c:	4608      	mov	r0, r1
 c02194e:	bd10      	pop	{r4, pc}
 c021950:	0c033530 	.word	0x0c033530

0c021954 <mbedtls_ecp_get_type>:
    if( grp->G.X.p == NULL )
 c021954:	6b03      	ldr	r3, [r0, #48]	; 0x30
 c021956:	b12b      	cbz	r3, c021964 <mbedtls_ecp_get_type+0x10>
    if( grp->G.Y.p == NULL )
 c021958:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 c02195a:	2b00      	cmp	r3, #0
        return( MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS );
 c02195c:	bf0c      	ite	eq
 c02195e:	2002      	moveq	r0, #2
 c021960:	2001      	movne	r0, #1
 c021962:	4770      	bx	lr
        return( MBEDTLS_ECP_TYPE_NONE );
 c021964:	4618      	mov	r0, r3
}
 c021966:	4770      	bx	lr

0c021968 <mbedtls_ecp_point_init>:
{
 c021968:	b510      	push	{r4, lr}
 c02196a:	4604      	mov	r4, r0
    mbedtls_mpi_init( &pt->X );
 c02196c:	f7fc f870 	bl	c01da50 <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Y );
 c021970:	f104 000c 	add.w	r0, r4, #12
 c021974:	f7fc f86c 	bl	c01da50 <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Z );
 c021978:	f104 0018 	add.w	r0, r4, #24
}
 c02197c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_init( &pt->Z );
 c021980:	f7fc b866 	b.w	c01da50 <mbedtls_mpi_init>

0c021984 <mbedtls_ecp_group_init>:
{
 c021984:	b538      	push	{r3, r4, r5, lr}
    grp->id = MBEDTLS_ECP_DP_NONE;
 c021986:	2500      	movs	r5, #0
{
 c021988:	4604      	mov	r4, r0
    grp->id = MBEDTLS_ECP_DP_NONE;
 c02198a:	f800 5b04 	strb.w	r5, [r0], #4
    mbedtls_mpi_init( &grp->P );
 c02198e:	f7fc f85f 	bl	c01da50 <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->A );
 c021992:	f104 0010 	add.w	r0, r4, #16
 c021996:	f7fc f85b 	bl	c01da50 <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->B );
 c02199a:	f104 001c 	add.w	r0, r4, #28
 c02199e:	f7fc f857 	bl	c01da50 <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &grp->G );
 c0219a2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 c0219a6:	f7ff ffdf 	bl	c021968 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &grp->N );
 c0219aa:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 c0219ae:	f7fc f84f 	bl	c01da50 <mbedtls_mpi_init>
    grp->nbits = 0;
 c0219b2:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
    grp->modp = NULL;
 c0219b6:	e9c4 5518 	strd	r5, r5, [r4, #96]	; 0x60
    grp->t_post = NULL;
 c0219ba:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    grp->T = NULL;
 c0219be:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
    grp->T_size = 0;
 c0219c2:	67a5      	str	r5, [r4, #120]	; 0x78
}
 c0219c4:	bd38      	pop	{r3, r4, r5, pc}

0c0219c6 <mbedtls_ecp_keypair_init>:
{
 c0219c6:	b510      	push	{r4, lr}
 c0219c8:	4604      	mov	r4, r0
    mbedtls_ecp_group_init( &key->grp );
 c0219ca:	f7ff ffdb 	bl	c021984 <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &key->d );
 c0219ce:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 c0219d2:	f7fc f83d 	bl	c01da50 <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &key->Q );
 c0219d6:	f104 0088 	add.w	r0, r4, #136	; 0x88
}
 c0219da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_ecp_point_init( &key->Q );
 c0219de:	f7ff bfc3 	b.w	c021968 <mbedtls_ecp_point_init>

0c0219e2 <mbedtls_ecp_point_free>:
    if( pt == NULL )
 c0219e2:	b108      	cbz	r0, c0219e8 <mbedtls_ecp_point_free+0x6>
 c0219e4:	f7ff bf7e 	b.w	c0218e4 <mbedtls_ecp_point_free.part.5>
}
 c0219e8:	4770      	bx	lr

0c0219ea <mbedtls_ecp_group_free>:
{
 c0219ea:	b570      	push	{r4, r5, r6, lr}
    if( grp == NULL )
 c0219ec:	4604      	mov	r4, r0
 c0219ee:	b360      	cbz	r0, c021a4a <mbedtls_ecp_group_free+0x60>
    if( grp->h != 1 )
 c0219f0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 c0219f2:	2b01      	cmp	r3, #1
 c0219f4:	d012      	beq.n	c021a1c <mbedtls_ecp_group_free+0x32>
        mbedtls_mpi_free( &grp->P );
 c0219f6:	3004      	adds	r0, #4
 c0219f8:	f7fc f830 	bl	c01da5c <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->A );
 c0219fc:	f104 0010 	add.w	r0, r4, #16
 c021a00:	f7fc f82c 	bl	c01da5c <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->B );
 c021a04:	f104 001c 	add.w	r0, r4, #28
 c021a08:	f7fc f828 	bl	c01da5c <mbedtls_mpi_free>
        mbedtls_ecp_point_free( &grp->G );
 c021a0c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 c021a10:	f7ff ffe7 	bl	c0219e2 <mbedtls_ecp_point_free>
        mbedtls_mpi_free( &grp->N );
 c021a14:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 c021a18:	f7fc f820 	bl	c01da5c <mbedtls_mpi_free>
    if( grp->T != NULL )
 c021a1c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 c021a1e:	b98b      	cbnz	r3, c021a44 <mbedtls_ecp_group_free+0x5a>
    mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );
 c021a20:	4620      	mov	r0, r4
}
 c021a22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );
 c021a26:	217c      	movs	r1, #124	; 0x7c
 c021a28:	f004 be7e 	b.w	c026728 <mbedtls_platform_zeroize>
            mbedtls_ecp_point_free( &grp->T[i] );
 c021a2c:	fb06 0005 	mla	r0, r6, r5, r0
 c021a30:	f7ff ffd7 	bl	c0219e2 <mbedtls_ecp_point_free>
        for( i = 0; i < grp->T_size; i++ )
 c021a34:	3501      	adds	r5, #1
 c021a36:	e9d4 031d 	ldrd	r0, r3, [r4, #116]	; 0x74
 c021a3a:	42ab      	cmp	r3, r5
 c021a3c:	d8f6      	bhi.n	c021a2c <mbedtls_ecp_group_free+0x42>
        mbedtls_free( grp->T );
 c021a3e:	f004 fe63 	bl	c026708 <mbedtls_free>
 c021a42:	e7ed      	b.n	c021a20 <mbedtls_ecp_group_free+0x36>
        for( i = 0; i < grp->T_size; i++ )
 c021a44:	2500      	movs	r5, #0
            mbedtls_ecp_point_free( &grp->T[i] );
 c021a46:	2624      	movs	r6, #36	; 0x24
 c021a48:	e7f5      	b.n	c021a36 <mbedtls_ecp_group_free+0x4c>
}
 c021a4a:	bd70      	pop	{r4, r5, r6, pc}

0c021a4c <mbedtls_ecp_keypair_free>:
{
 c021a4c:	b510      	push	{r4, lr}
    if( key == NULL )
 c021a4e:	4604      	mov	r4, r0
 c021a50:	b158      	cbz	r0, c021a6a <mbedtls_ecp_keypair_free+0x1e>
    mbedtls_ecp_group_free( &key->grp );
 c021a52:	f7ff ffca 	bl	c0219ea <mbedtls_ecp_group_free>
    mbedtls_mpi_free( &key->d );
 c021a56:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 c021a5a:	f7fb ffff 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_ecp_point_free( &key->Q );
 c021a5e:	f104 0088 	add.w	r0, r4, #136	; 0x88
}
 c021a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_ecp_point_free( &key->Q );
 c021a66:	f7ff bfbc 	b.w	c0219e2 <mbedtls_ecp_point_free>
}
 c021a6a:	bd10      	pop	{r4, pc}

0c021a6c <mbedtls_ecp_copy>:
{
 c021a6c:	b538      	push	{r3, r4, r5, lr}
 c021a6e:	4604      	mov	r4, r0
 c021a70:	460d      	mov	r5, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
 c021a72:	f7fc f864 	bl	c01db3e <mbedtls_mpi_copy>
 c021a76:	b970      	cbnz	r0, c021a96 <mbedtls_ecp_copy+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
 c021a78:	f105 010c 	add.w	r1, r5, #12
 c021a7c:	f104 000c 	add.w	r0, r4, #12
 c021a80:	f7fc f85d 	bl	c01db3e <mbedtls_mpi_copy>
 c021a84:	b938      	cbnz	r0, c021a96 <mbedtls_ecp_copy+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
 c021a86:	f105 0118 	add.w	r1, r5, #24
 c021a8a:	f104 0018 	add.w	r0, r4, #24
}
 c021a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
 c021a92:	f7fc b854 	b.w	c01db3e <mbedtls_mpi_copy>
}
 c021a96:	bd38      	pop	{r3, r4, r5, pc}

0c021a98 <mbedtls_ecp_group_copy>:
    return( mbedtls_ecp_group_load( dst, src->id ) );
 c021a98:	7809      	ldrb	r1, [r1, #0]
 c021a9a:	f001 bbe5 	b.w	c023268 <mbedtls_ecp_group_load>

0c021a9e <mbedtls_ecp_set_zero>:
{
 c021a9e:	b510      	push	{r4, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
 c021aa0:	2101      	movs	r1, #1
{
 c021aa2:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
 c021aa4:	f7fc f902 	bl	c01dcac <mbedtls_mpi_lset>
 c021aa8:	b960      	cbnz	r0, c021ac4 <mbedtls_ecp_set_zero+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
 c021aaa:	2101      	movs	r1, #1
 c021aac:	f104 000c 	add.w	r0, r4, #12
 c021ab0:	f7fc f8fc 	bl	c01dcac <mbedtls_mpi_lset>
 c021ab4:	b930      	cbnz	r0, c021ac4 <mbedtls_ecp_set_zero+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
 c021ab6:	4601      	mov	r1, r0
 c021ab8:	f104 0018 	add.w	r0, r4, #24
}
 c021abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
 c021ac0:	f7fc b8f4 	b.w	c01dcac <mbedtls_mpi_lset>
}
 c021ac4:	bd10      	pop	{r4, pc}
	...

0c021ac8 <ecp_add_mixed>:
{
 c021ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 c021acc:	f102 0918 	add.w	r9, r2, #24
{
 c021ad0:	b096      	sub	sp, #88	; 0x58
 c021ad2:	4605      	mov	r5, r0
 c021ad4:	460e      	mov	r6, r1
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 c021ad6:	4648      	mov	r0, r9
 c021ad8:	2100      	movs	r1, #0
{
 c021ada:	4690      	mov	r8, r2
 c021adc:	461f      	mov	r7, r3
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 c021ade:	f7fc fba9 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c021ae2:	b940      	cbnz	r0, c021af6 <ecp_add_mixed+0x2e>
        return( mbedtls_ecp_copy( R, Q ) );
 c021ae4:	4639      	mov	r1, r7
        return( mbedtls_ecp_copy( R, P ) );
 c021ae6:	4630      	mov	r0, r6
 c021ae8:	f7ff ffc0 	bl	c021a6c <mbedtls_ecp_copy>
 c021aec:	4604      	mov	r4, r0
}
 c021aee:	4620      	mov	r0, r4
 c021af0:	b016      	add	sp, #88	; 0x58
 c021af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )
 c021af6:	6a3b      	ldr	r3, [r7, #32]
 c021af8:	b13b      	cbz	r3, c021b0a <ecp_add_mixed+0x42>
 c021afa:	2100      	movs	r1, #0
 c021afc:	f107 0018 	add.w	r0, r7, #24
 c021b00:	f7fc fb98 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c021b04:	b908      	cbnz	r0, c021b0a <ecp_add_mixed+0x42>
        return( mbedtls_ecp_copy( R, P ) );
 c021b06:	4641      	mov	r1, r8
 c021b08:	e7ed      	b.n	c021ae6 <ecp_add_mixed+0x1e>
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
 c021b0a:	6a3b      	ldr	r3, [r7, #32]
 c021b0c:	2b00      	cmp	r3, #0
 c021b0e:	f040 8145 	bne.w	c021d9c <ecp_add_mixed+0x2d4>
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 ); mbedtls_mpi_init( &T3 ); mbedtls_mpi_init( &T4 );
 c021b12:	a801      	add	r0, sp, #4
 c021b14:	f7fb ff9c 	bl	c01da50 <mbedtls_mpi_init>
 c021b18:	a804      	add	r0, sp, #16
 c021b1a:	f7fb ff99 	bl	c01da50 <mbedtls_mpi_init>
 c021b1e:	a807      	add	r0, sp, #28
 c021b20:	f7fb ff96 	bl	c01da50 <mbedtls_mpi_init>
 c021b24:	a80a      	add	r0, sp, #40	; 0x28
 c021b26:	f7fb ff93 	bl	c01da50 <mbedtls_mpi_init>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
 c021b2a:	a80d      	add	r0, sp, #52	; 0x34
 c021b2c:	f7fb ff90 	bl	c01da50 <mbedtls_mpi_init>
 c021b30:	a810      	add	r0, sp, #64	; 0x40
 c021b32:	f7fb ff8d 	bl	c01da50 <mbedtls_mpi_init>
 c021b36:	a813      	add	r0, sp, #76	; 0x4c
 c021b38:	f7fb ff8a 	bl	c01da50 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
 c021b3c:	464a      	mov	r2, r9
 c021b3e:	4649      	mov	r1, r9
 c021b40:	a801      	add	r0, sp, #4
 c021b42:	f7fc fc9d 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c021b46:	4604      	mov	r4, r0
 c021b48:	2800      	cmp	r0, #0
 c021b4a:	f040 8141 	bne.w	c021dd0 <ecp_add_mixed+0x308>
 c021b4e:	4629      	mov	r1, r5
 c021b50:	a801      	add	r0, sp, #4
 c021b52:	f7ff faa9 	bl	c0210a8 <ecp_modp>
 c021b56:	4604      	mov	r4, r0
 c021b58:	2800      	cmp	r0, #0
 c021b5a:	f040 8139 	bne.w	c021dd0 <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 c021b5e:	464a      	mov	r2, r9
 c021b60:	a901      	add	r1, sp, #4
 c021b62:	a804      	add	r0, sp, #16
 c021b64:	f7fc fc8c 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c021b68:	4604      	mov	r4, r0
 c021b6a:	2800      	cmp	r0, #0
 c021b6c:	f040 8130 	bne.w	c021dd0 <ecp_add_mixed+0x308>
 c021b70:	4629      	mov	r1, r5
 c021b72:	a804      	add	r0, sp, #16
 c021b74:	f7ff fa98 	bl	c0210a8 <ecp_modp>
 c021b78:	4604      	mov	r4, r0
 c021b7a:	2800      	cmp	r0, #0
 c021b7c:	f040 8128 	bne.w	c021dd0 <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 c021b80:	a901      	add	r1, sp, #4
 c021b82:	463a      	mov	r2, r7
 c021b84:	4608      	mov	r0, r1
 c021b86:	f7fc fc7b 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c021b8a:	4604      	mov	r4, r0
 c021b8c:	2800      	cmp	r0, #0
 c021b8e:	f040 811f 	bne.w	c021dd0 <ecp_add_mixed+0x308>
 c021b92:	4629      	mov	r1, r5
 c021b94:	a801      	add	r0, sp, #4
 c021b96:	f7ff fa87 	bl	c0210a8 <ecp_modp>
 c021b9a:	4604      	mov	r4, r0
 c021b9c:	2800      	cmp	r0, #0
 c021b9e:	f040 8117 	bne.w	c021dd0 <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 c021ba2:	a904      	add	r1, sp, #16
 c021ba4:	f107 020c 	add.w	r2, r7, #12
 c021ba8:	4608      	mov	r0, r1
 c021baa:	f7fc fc69 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c021bae:	4604      	mov	r4, r0
 c021bb0:	2800      	cmp	r0, #0
 c021bb2:	f040 810d 	bne.w	c021dd0 <ecp_add_mixed+0x308>
 c021bb6:	4629      	mov	r1, r5
 c021bb8:	a804      	add	r0, sp, #16
 c021bba:	f7ff fa75 	bl	c0210a8 <ecp_modp>
 c021bbe:	4604      	mov	r4, r0
 c021bc0:	2800      	cmp	r0, #0
 c021bc2:	f040 8105 	bne.w	c021dd0 <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 c021bc6:	a901      	add	r1, sp, #4
 c021bc8:	4642      	mov	r2, r8
 c021bca:	4608      	mov	r0, r1
 c021bcc:	f7fc fc09 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c021bd0:	4604      	mov	r4, r0
 c021bd2:	2800      	cmp	r0, #0
 c021bd4:	f040 80fc 	bne.w	c021dd0 <ecp_add_mixed+0x308>
 c021bd8:	1d2f      	adds	r7, r5, #4
 c021bda:	9b01      	ldr	r3, [sp, #4]
 c021bdc:	2b00      	cmp	r3, #0
 c021bde:	f2c0 80e7 	blt.w	c021db0 <ecp_add_mixed+0x2e8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
 c021be2:	a904      	add	r1, sp, #16
 c021be4:	f108 0a0c 	add.w	sl, r8, #12
 c021be8:	4652      	mov	r2, sl
 c021bea:	4608      	mov	r0, r1
 c021bec:	f7fc fbf9 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c021bf0:	4604      	mov	r4, r0
 c021bf2:	2800      	cmp	r0, #0
 c021bf4:	f040 80ec 	bne.w	c021dd0 <ecp_add_mixed+0x308>
 c021bf8:	1d2f      	adds	r7, r5, #4
 c021bfa:	9b04      	ldr	r3, [sp, #16]
 c021bfc:	2b00      	cmp	r3, #0
 c021bfe:	f2c0 80fd 	blt.w	c021dfc <ecp_add_mixed+0x334>
    if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )
 c021c02:	2100      	movs	r1, #0
 c021c04:	a801      	add	r0, sp, #4
 c021c06:	f7fc fb15 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c021c0a:	4601      	mov	r1, r0
 c021c0c:	2800      	cmp	r0, #0
 c021c0e:	f000 8106 	beq.w	c021e1e <ecp_add_mixed+0x356>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
 c021c12:	aa01      	add	r2, sp, #4
 c021c14:	4649      	mov	r1, r9
 c021c16:	a813      	add	r0, sp, #76	; 0x4c
 c021c18:	f7fc fc32 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c021c1c:	4604      	mov	r4, r0
 c021c1e:	2800      	cmp	r0, #0
 c021c20:	f040 80d6 	bne.w	c021dd0 <ecp_add_mixed+0x308>
 c021c24:	4629      	mov	r1, r5
 c021c26:	a813      	add	r0, sp, #76	; 0x4c
 c021c28:	f7ff fa3e 	bl	c0210a8 <ecp_modp>
 c021c2c:	4604      	mov	r4, r0
 c021c2e:	2800      	cmp	r0, #0
 c021c30:	f040 80ce 	bne.w	c021dd0 <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 c021c34:	aa01      	add	r2, sp, #4
 c021c36:	4611      	mov	r1, r2
 c021c38:	a807      	add	r0, sp, #28
 c021c3a:	f7fc fc21 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c021c3e:	4604      	mov	r4, r0
 c021c40:	2800      	cmp	r0, #0
 c021c42:	f040 80c5 	bne.w	c021dd0 <ecp_add_mixed+0x308>
 c021c46:	4629      	mov	r1, r5
 c021c48:	a807      	add	r0, sp, #28
 c021c4a:	f7ff fa2d 	bl	c0210a8 <ecp_modp>
 c021c4e:	4604      	mov	r4, r0
 c021c50:	2800      	cmp	r0, #0
 c021c52:	f040 80bd 	bne.w	c021dd0 <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 c021c56:	aa01      	add	r2, sp, #4
 c021c58:	a907      	add	r1, sp, #28
 c021c5a:	a80a      	add	r0, sp, #40	; 0x28
 c021c5c:	f7fc fc10 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c021c60:	4604      	mov	r4, r0
 c021c62:	2800      	cmp	r0, #0
 c021c64:	f040 80b4 	bne.w	c021dd0 <ecp_add_mixed+0x308>
 c021c68:	4629      	mov	r1, r5
 c021c6a:	a80a      	add	r0, sp, #40	; 0x28
 c021c6c:	f7ff fa1c 	bl	c0210a8 <ecp_modp>
 c021c70:	4604      	mov	r4, r0
 c021c72:	2800      	cmp	r0, #0
 c021c74:	f040 80ac 	bne.w	c021dd0 <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 c021c78:	a907      	add	r1, sp, #28
 c021c7a:	4642      	mov	r2, r8
 c021c7c:	4608      	mov	r0, r1
 c021c7e:	f7fc fbff 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c021c82:	4604      	mov	r4, r0
 c021c84:	2800      	cmp	r0, #0
 c021c86:	f040 80a3 	bne.w	c021dd0 <ecp_add_mixed+0x308>
 c021c8a:	4629      	mov	r1, r5
 c021c8c:	a807      	add	r0, sp, #28
 c021c8e:	f7ff fa0b 	bl	c0210a8 <ecp_modp>
 c021c92:	4604      	mov	r4, r0
 c021c94:	2800      	cmp	r0, #0
 c021c96:	f040 809b 	bne.w	c021dd0 <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 c021c9a:	2202      	movs	r2, #2
 c021c9c:	a907      	add	r1, sp, #28
 c021c9e:	a801      	add	r0, sp, #4
 c021ca0:	f7fc fc57 	bl	c01e552 <mbedtls_mpi_mul_int>
 c021ca4:	4604      	mov	r4, r0
 c021ca6:	2800      	cmp	r0, #0
 c021ca8:	f040 8092 	bne.w	c021dd0 <ecp_add_mixed+0x308>
 c021cac:	1d2f      	adds	r7, r5, #4
 c021cae:	4639      	mov	r1, r7
 c021cb0:	a801      	add	r0, sp, #4
 c021cb2:	f7fc fa7f 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c021cb6:	2800      	cmp	r0, #0
 c021cb8:	f280 80c0 	bge.w	c021e3c <ecp_add_mixed+0x374>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
 c021cbc:	aa04      	add	r2, sp, #16
 c021cbe:	4611      	mov	r1, r2
 c021cc0:	a80d      	add	r0, sp, #52	; 0x34
 c021cc2:	f7fc fbdd 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c021cc6:	4604      	mov	r4, r0
 c021cc8:	2800      	cmp	r0, #0
 c021cca:	f040 8081 	bne.w	c021dd0 <ecp_add_mixed+0x308>
 c021cce:	4629      	mov	r1, r5
 c021cd0:	a80d      	add	r0, sp, #52	; 0x34
 c021cd2:	f7ff f9e9 	bl	c0210a8 <ecp_modp>
 c021cd6:	4604      	mov	r4, r0
 c021cd8:	2800      	cmp	r0, #0
 c021cda:	d179      	bne.n	c021dd0 <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 c021cdc:	a90d      	add	r1, sp, #52	; 0x34
 c021cde:	aa01      	add	r2, sp, #4
 c021ce0:	4608      	mov	r0, r1
 c021ce2:	f7fc fb7e 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c021ce6:	4604      	mov	r4, r0
 c021ce8:	2800      	cmp	r0, #0
 c021cea:	d171      	bne.n	c021dd0 <ecp_add_mixed+0x308>
 c021cec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 c021cee:	2b00      	cmp	r3, #0
 c021cf0:	f2c0 80ae 	blt.w	c021e50 <ecp_add_mixed+0x388>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
 c021cf4:	a90d      	add	r1, sp, #52	; 0x34
 c021cf6:	aa0a      	add	r2, sp, #40	; 0x28
 c021cf8:	4608      	mov	r0, r1
 c021cfa:	f7fc fb72 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c021cfe:	4604      	mov	r4, r0
 c021d00:	2800      	cmp	r0, #0
 c021d02:	d165      	bne.n	c021dd0 <ecp_add_mixed+0x308>
 c021d04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 c021d06:	2b00      	cmp	r3, #0
 c021d08:	f2c0 80af 	blt.w	c021e6a <ecp_add_mixed+0x3a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
 c021d0c:	a907      	add	r1, sp, #28
 c021d0e:	aa0d      	add	r2, sp, #52	; 0x34
 c021d10:	4608      	mov	r0, r1
 c021d12:	f7fc fb66 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c021d16:	4604      	mov	r4, r0
 c021d18:	2800      	cmp	r0, #0
 c021d1a:	d159      	bne.n	c021dd0 <ecp_add_mixed+0x308>
 c021d1c:	9b07      	ldr	r3, [sp, #28]
 c021d1e:	2b00      	cmp	r3, #0
 c021d20:	f2c0 80b0 	blt.w	c021e84 <ecp_add_mixed+0x3bc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
 c021d24:	a907      	add	r1, sp, #28
 c021d26:	aa04      	add	r2, sp, #16
 c021d28:	4608      	mov	r0, r1
 c021d2a:	f7fc fba9 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c021d2e:	4604      	mov	r4, r0
 c021d30:	2800      	cmp	r0, #0
 c021d32:	d14d      	bne.n	c021dd0 <ecp_add_mixed+0x308>
 c021d34:	4629      	mov	r1, r5
 c021d36:	a807      	add	r0, sp, #28
 c021d38:	f7ff f9b6 	bl	c0210a8 <ecp_modp>
 c021d3c:	4604      	mov	r4, r0
 c021d3e:	2800      	cmp	r0, #0
 c021d40:	d146      	bne.n	c021dd0 <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 c021d42:	a90a      	add	r1, sp, #40	; 0x28
 c021d44:	4652      	mov	r2, sl
 c021d46:	4608      	mov	r0, r1
 c021d48:	f7fc fb9a 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c021d4c:	4604      	mov	r4, r0
 c021d4e:	2800      	cmp	r0, #0
 c021d50:	d13e      	bne.n	c021dd0 <ecp_add_mixed+0x308>
 c021d52:	4629      	mov	r1, r5
 c021d54:	a80a      	add	r0, sp, #40	; 0x28
 c021d56:	f7ff f9a7 	bl	c0210a8 <ecp_modp>
 c021d5a:	4604      	mov	r4, r0
 c021d5c:	2800      	cmp	r0, #0
 c021d5e:	d137      	bne.n	c021dd0 <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 c021d60:	aa0a      	add	r2, sp, #40	; 0x28
 c021d62:	a907      	add	r1, sp, #28
 c021d64:	a810      	add	r0, sp, #64	; 0x40
 c021d66:	f7fc fb3c 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c021d6a:	4604      	mov	r4, r0
 c021d6c:	bb80      	cbnz	r0, c021dd0 <ecp_add_mixed+0x308>
 c021d6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 c021d70:	2b00      	cmp	r3, #0
 c021d72:	f2c0 8094 	blt.w	c021e9e <ecp_add_mixed+0x3d6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &X ) );
 c021d76:	a90d      	add	r1, sp, #52	; 0x34
 c021d78:	4630      	mov	r0, r6
 c021d7a:	f7fb fee0 	bl	c01db3e <mbedtls_mpi_copy>
 c021d7e:	4604      	mov	r4, r0
 c021d80:	bb30      	cbnz	r0, c021dd0 <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );
 c021d82:	a910      	add	r1, sp, #64	; 0x40
 c021d84:	f106 000c 	add.w	r0, r6, #12
 c021d88:	f7fb fed9 	bl	c01db3e <mbedtls_mpi_copy>
 c021d8c:	4604      	mov	r4, r0
 c021d8e:	b9f8      	cbnz	r0, c021dd0 <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
 c021d90:	a913      	add	r1, sp, #76	; 0x4c
 c021d92:	f106 0018 	add.w	r0, r6, #24
 c021d96:	f7fb fed2 	bl	c01db3e <mbedtls_mpi_copy>
 c021d9a:	e049      	b.n	c021e30 <ecp_add_mixed+0x368>
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
 c021d9c:	2101      	movs	r1, #1
 c021d9e:	f107 0018 	add.w	r0, r7, #24
 c021da2:	f7fc fa47 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c021da6:	2800      	cmp	r0, #0
 c021da8:	f43f aeb3 	beq.w	c021b12 <ecp_add_mixed+0x4a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 c021dac:	4c42      	ldr	r4, [pc, #264]	; (c021eb8 <ecp_add_mixed+0x3f0>)
 c021dae:	e69e      	b.n	c021aee <ecp_add_mixed+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 c021db0:	2100      	movs	r1, #0
 c021db2:	a801      	add	r0, sp, #4
 c021db4:	f7fc fa3e 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c021db8:	2800      	cmp	r0, #0
 c021dba:	f43f af12 	beq.w	c021be2 <ecp_add_mixed+0x11a>
 c021dbe:	a901      	add	r1, sp, #4
 c021dc0:	463a      	mov	r2, r7
 c021dc2:	4608      	mov	r0, r1
 c021dc4:	f7fc faeb 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c021dc8:	4604      	mov	r4, r0
 c021dca:	2800      	cmp	r0, #0
 c021dcc:	f43f af05 	beq.w	c021bda <ecp_add_mixed+0x112>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );
 c021dd0:	a801      	add	r0, sp, #4
 c021dd2:	f7fb fe43 	bl	c01da5c <mbedtls_mpi_free>
 c021dd6:	a804      	add	r0, sp, #16
 c021dd8:	f7fb fe40 	bl	c01da5c <mbedtls_mpi_free>
 c021ddc:	a807      	add	r0, sp, #28
 c021dde:	f7fb fe3d 	bl	c01da5c <mbedtls_mpi_free>
 c021de2:	a80a      	add	r0, sp, #40	; 0x28
 c021de4:	f7fb fe3a 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 c021de8:	a80d      	add	r0, sp, #52	; 0x34
 c021dea:	f7fb fe37 	bl	c01da5c <mbedtls_mpi_free>
 c021dee:	a810      	add	r0, sp, #64	; 0x40
 c021df0:	f7fb fe34 	bl	c01da5c <mbedtls_mpi_free>
 c021df4:	a813      	add	r0, sp, #76	; 0x4c
 c021df6:	f7fb fe31 	bl	c01da5c <mbedtls_mpi_free>
    return( ret );
 c021dfa:	e678      	b.n	c021aee <ecp_add_mixed+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
 c021dfc:	2100      	movs	r1, #0
 c021dfe:	a804      	add	r0, sp, #16
 c021e00:	f7fc fa18 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c021e04:	2800      	cmp	r0, #0
 c021e06:	f43f aefc 	beq.w	c021c02 <ecp_add_mixed+0x13a>
 c021e0a:	a904      	add	r1, sp, #16
 c021e0c:	463a      	mov	r2, r7
 c021e0e:	4608      	mov	r0, r1
 c021e10:	f7fc fac5 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c021e14:	4604      	mov	r4, r0
 c021e16:	2800      	cmp	r0, #0
 c021e18:	f43f aeef 	beq.w	c021bfa <ecp_add_mixed+0x132>
cleanup:
 c021e1c:	e7d8      	b.n	c021dd0 <ecp_add_mixed+0x308>
        if( mbedtls_mpi_cmp_int( &T2, 0 ) == 0 )
 c021e1e:	a804      	add	r0, sp, #16
 c021e20:	f7fc fa08 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c021e24:	b930      	cbnz	r0, c021e34 <ecp_add_mixed+0x36c>
            ret = ecp_double_jac( grp, R, P );
 c021e26:	4642      	mov	r2, r8
 c021e28:	4631      	mov	r1, r6
 c021e2a:	4628      	mov	r0, r5
 c021e2c:	f7ff f9df 	bl	c0211ee <ecp_double_jac>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
 c021e30:	4604      	mov	r4, r0
cleanup:
 c021e32:	e7cd      	b.n	c021dd0 <ecp_add_mixed+0x308>
            ret = mbedtls_ecp_set_zero( R );
 c021e34:	4630      	mov	r0, r6
 c021e36:	f7ff fe32 	bl	c021a9e <mbedtls_ecp_set_zero>
 c021e3a:	e7f9      	b.n	c021e30 <ecp_add_mixed+0x368>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 c021e3c:	a901      	add	r1, sp, #4
 c021e3e:	463a      	mov	r2, r7
 c021e40:	4608      	mov	r0, r1
 c021e42:	f7fc fa6e 	bl	c01e322 <mbedtls_mpi_sub_abs>
 c021e46:	4604      	mov	r4, r0
 c021e48:	2800      	cmp	r0, #0
 c021e4a:	f43f af30 	beq.w	c021cae <ecp_add_mixed+0x1e6>
cleanup:
 c021e4e:	e7bf      	b.n	c021dd0 <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 c021e50:	2100      	movs	r1, #0
 c021e52:	a80d      	add	r0, sp, #52	; 0x34
 c021e54:	f7fc f9ee 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c021e58:	2800      	cmp	r0, #0
 c021e5a:	f43f af4b 	beq.w	c021cf4 <ecp_add_mixed+0x22c>
 c021e5e:	a90d      	add	r1, sp, #52	; 0x34
 c021e60:	463a      	mov	r2, r7
 c021e62:	4608      	mov	r0, r1
 c021e64:	f7fc fa9b 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c021e68:	e73d      	b.n	c021ce6 <ecp_add_mixed+0x21e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
 c021e6a:	2100      	movs	r1, #0
 c021e6c:	a80d      	add	r0, sp, #52	; 0x34
 c021e6e:	f7fc f9e1 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c021e72:	2800      	cmp	r0, #0
 c021e74:	f43f af4a 	beq.w	c021d0c <ecp_add_mixed+0x244>
 c021e78:	a90d      	add	r1, sp, #52	; 0x34
 c021e7a:	463a      	mov	r2, r7
 c021e7c:	4608      	mov	r0, r1
 c021e7e:	f7fc fa8e 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c021e82:	e73c      	b.n	c021cfe <ecp_add_mixed+0x236>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
 c021e84:	2100      	movs	r1, #0
 c021e86:	a807      	add	r0, sp, #28
 c021e88:	f7fc f9d4 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c021e8c:	2800      	cmp	r0, #0
 c021e8e:	f43f af49 	beq.w	c021d24 <ecp_add_mixed+0x25c>
 c021e92:	a907      	add	r1, sp, #28
 c021e94:	463a      	mov	r2, r7
 c021e96:	4608      	mov	r0, r1
 c021e98:	f7fc fa81 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c021e9c:	e73b      	b.n	c021d16 <ecp_add_mixed+0x24e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 c021e9e:	2100      	movs	r1, #0
 c021ea0:	a810      	add	r0, sp, #64	; 0x40
 c021ea2:	f7fc f9c7 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c021ea6:	2800      	cmp	r0, #0
 c021ea8:	f43f af65 	beq.w	c021d76 <ecp_add_mixed+0x2ae>
 c021eac:	a910      	add	r1, sp, #64	; 0x40
 c021eae:	463a      	mov	r2, r7
 c021eb0:	4608      	mov	r0, r1
 c021eb2:	f7fc fa74 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c021eb6:	e758      	b.n	c021d6a <ecp_add_mixed+0x2a2>
 c021eb8:	ffffb080 	.word	0xffffb080

0c021ebc <ecp_mul_comb_after_precomp.isra.10>:
 * once the auxiliary table has been pre-computed.
 *
 * Scalar recoding may use a parity trick that makes us compute -m * P,
 * if that is the case we'll need to recover m * P at the end.
 */
static int ecp_mul_comb_after_precomp( const mbedtls_ecp_group *grp,
 c021ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c021ec0:	4605      	mov	r5, r0
 c021ec2:	b0db      	sub	sp, #364	; 0x16c
 c021ec4:	9303      	str	r3, [sp, #12]
 c021ec6:	f89d 3190 	ldrb.w	r3, [sp, #400]	; 0x190
    mbedtls_mpi_init( &M );
 c021eca:	f10d 0930 	add.w	r9, sp, #48	; 0x30
static int ecp_mul_comb_after_precomp( const mbedtls_ecp_group *grp,
 c021ece:	9304      	str	r3, [sp, #16]
 c021ed0:	f89d 3194 	ldrb.w	r3, [sp, #404]	; 0x194
    mbedtls_mpi_init( &M );
 c021ed4:	4648      	mov	r0, r9
static int ecp_mul_comb_after_precomp( const mbedtls_ecp_group *grp,
 c021ed6:	460e      	mov	r6, r1
 c021ed8:	4617      	mov	r7, r2
 c021eda:	9305      	str	r3, [sp, #20]
 c021edc:	f8dd b198 	ldr.w	fp, [sp, #408]	; 0x198
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
 c021ee0:	f105 084c 	add.w	r8, r5, #76	; 0x4c
    mbedtls_mpi_init( &M );
 c021ee4:	f7fb fdb4 	bl	c01da50 <mbedtls_mpi_init>
    mbedtls_mpi_init( &mm );
 c021ee8:	a80f      	add	r0, sp, #60	; 0x3c
 c021eea:	f7fb fdb1 	bl	c01da50 <mbedtls_mpi_init>
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
 c021eee:	2100      	movs	r1, #0
 c021ef0:	4640      	mov	r0, r8
 c021ef2:	f7fb fef7 	bl	c01dce4 <mbedtls_mpi_get_bit>
 c021ef6:	2801      	cmp	r0, #1
 c021ef8:	d004      	beq.n	c021f04 <ecp_mul_comb_after_precomp.isra.10+0x48>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 c021efa:	4ca6      	ldr	r4, [pc, #664]	; (c022194 <ecp_mul_comb_after_precomp.isra.10+0x2d8>)
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, RR ) );
#endif

cleanup:
    return( ret );
}
 c021efc:	4620      	mov	r0, r4
 c021efe:	b05b      	add	sp, #364	; 0x16c
 c021f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
 c021f04:	2100      	movs	r1, #0
 c021f06:	4638      	mov	r0, r7
 c021f08:	f7fb feec 	bl	c01dce4 <mbedtls_mpi_get_bit>
 c021f0c:	fab0 f380 	clz	r3, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
 c021f10:	4639      	mov	r1, r7
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
 c021f12:	095b      	lsrs	r3, r3, #5
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
 c021f14:	4648      	mov	r0, r9
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
 c021f16:	9302      	str	r3, [sp, #8]
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
 c021f18:	f7fb fe11 	bl	c01db3e <mbedtls_mpi_copy>
 c021f1c:	4604      	mov	r4, r0
 c021f1e:	bb28      	cbnz	r0, c021f6c <ecp_mul_comb_after_precomp.isra.10+0xb0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mm, &grp->N, m ) );
 c021f20:	463a      	mov	r2, r7
 c021f22:	4641      	mov	r1, r8
 c021f24:	a80f      	add	r0, sp, #60	; 0x3c
 c021f26:	f7fc fa5c 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c021f2a:	4604      	mov	r4, r0
 c021f2c:	b9f0      	cbnz	r0, c021f6c <ecp_mul_comb_after_precomp.isra.10+0xb0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &M, &mm, *parity_trick ) );
 c021f2e:	9a02      	ldr	r2, [sp, #8]
 c021f30:	a90f      	add	r1, sp, #60	; 0x3c
 c021f32:	4648      	mov	r0, r9
 c021f34:	f7fb fe44 	bl	c01dbc0 <mbedtls_mpi_safe_cond_assign>
 c021f38:	4604      	mov	r4, r0
 c021f3a:	b9b8      	cbnz	r0, c021f6c <ecp_mul_comb_after_precomp.isra.10+0xb0>
    memset( x, 0, d+1 );
 c021f3c:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
 c021f40:	46d0      	mov	r8, sl
    for( i = 0; i < d; i++ )
 c021f42:	4627      	mov	r7, r4
    memset( x, 0, d+1 );
 c021f44:	4601      	mov	r1, r0
 c021f46:	f10b 0201 	add.w	r2, fp, #1
 c021f4a:	4650      	mov	r0, sl
 c021f4c:	f7f2 fd3b 	bl	c0149c6 <memset>
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
 c021f50:	f8cd 9018 	str.w	r9, [sp, #24]
    for( i = 0; i < d; i++ )
 c021f54:	45bb      	cmp	fp, r7
 c021f56:	f040 80bf 	bne.w	c0220d8 <ecp_mul_comb_after_precomp.isra.10+0x21c>
    c = 0;
 c021f5a:	f04f 0e00 	mov.w	lr, #0
 c021f5e:	f10d 0361 	add.w	r3, sp, #97	; 0x61
    for( i = 1; i <= d; i++ )
 c021f62:	eba3 020a 	sub.w	r2, r3, sl
 c021f66:	42ba      	cmp	r2, r7
 c021f68:	f240 80ba 	bls.w	c0220e0 <ecp_mul_comb_after_precomp.isra.10+0x224>
    mbedtls_mpi_free( &mm );
 c021f6c:	a80f      	add	r0, sp, #60	; 0x3c
 c021f6e:	f7fb fd75 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &M );
 c021f72:	a80c      	add	r0, sp, #48	; 0x30
 c021f74:	f7fb fd72 	bl	c01da5c <mbedtls_mpi_free>
    MBEDTLS_MPI_CHK( ecp_comb_recode_scalar( grp, m, k, d, w,
 c021f78:	2c00      	cmp	r4, #0
 c021f7a:	d1bf      	bne.n	c021efc <ecp_mul_comb_after_precomp.isra.10+0x40>
    mbedtls_ecp_point_init( &Txi );
 c021f7c:	a80f      	add	r0, sp, #60	; 0x3c
 c021f7e:	f7ff fcf3 	bl	c021968 <mbedtls_ecp_point_init>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, T_size, x[i] ) );
 c021f82:	ab18      	add	r3, sp, #96	; 0x60
 c021f84:	f813 300b 	ldrb.w	r3, [r3, fp]
 c021f88:	4631      	mov	r1, r6
 c021f8a:	9300      	str	r3, [sp, #0]
 c021f8c:	4628      	mov	r0, r5
 c021f8e:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 c021f92:	f7ff fc75 	bl	c021880 <ecp_select_comb>
 c021f96:	4604      	mov	r4, r0
 c021f98:	2800      	cmp	r0, #0
 c021f9a:	f040 80e4 	bne.w	c022166 <ecp_mul_comb_after_precomp.isra.10+0x2aa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
 c021f9e:	f106 0918 	add.w	r9, r6, #24
 c021fa2:	2101      	movs	r1, #1
 c021fa4:	4648      	mov	r0, r9
 c021fa6:	f7fb fe81 	bl	c01dcac <mbedtls_mpi_lset>
 c021faa:	4604      	mov	r4, r0
 c021fac:	2800      	cmp	r0, #0
 c021fae:	f040 80da 	bne.w	c022166 <ecp_mul_comb_after_precomp.isra.10+0x2aa>
        if( f_rng != 0 )
 c021fb2:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 c021fb4:	2b00      	cmp	r3, #0
 c021fb6:	f000 80d2 	beq.w	c02215e <ecp_mul_comb_after_precomp.isra.10+0x2a2>
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 c021fba:	f04f 0a0c 	mov.w	sl, #12
    p_size = ( grp->pbits + 7 ) / 8;
 c021fbe:	6dab      	ldr	r3, [r5, #88]	; 0x58
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 c021fc0:	af09      	add	r7, sp, #36	; 0x24
    p_size = ( grp->pbits + 7 ) / 8;
 c021fc2:	3307      	adds	r3, #7
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 c021fc4:	4638      	mov	r0, r7
    p_size = ( grp->pbits + 7 ) / 8;
 c021fc6:	ea4f 08d3 	mov.w	r8, r3, lsr #3
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 c021fca:	f7fb fd41 	bl	c01da50 <mbedtls_mpi_init>
 c021fce:	a80c      	add	r0, sp, #48	; 0x30
 c021fd0:	f7fb fd3e 	bl	c01da50 <mbedtls_mpi_init>
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 c021fd4:	1d2b      	adds	r3, r5, #4
 c021fd6:	9305      	str	r3, [sp, #20]
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
 c021fd8:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
 c021fda:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 c021fdc:	4641      	mov	r1, r8
 c021fde:	4638      	mov	r0, r7
 c021fe0:	f7fd f83b 	bl	c01f05a <mbedtls_mpi_fill_random>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 c021fe4:	4603      	mov	r3, r0
 c021fe6:	2800      	cmp	r0, #0
 c021fe8:	d153      	bne.n	c022092 <ecp_mul_comb_after_precomp.isra.10+0x1d6>
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 c021fea:	9905      	ldr	r1, [sp, #20]
 c021fec:	4638      	mov	r0, r7
 c021fee:	f7fc f8e1 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c021ff2:	2800      	cmp	r0, #0
 c021ff4:	f280 8093 	bge.w	c02211e <ecp_mul_comb_after_precomp.isra.10+0x262>
        if( count++ > 10 )
 c021ff8:	f1ba 0a01 	subs.w	sl, sl, #1
 c021ffc:	f000 80c8 	beq.w	c022190 <ecp_mul_comb_after_precomp.isra.10+0x2d4>
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
 c022000:	2101      	movs	r1, #1
 c022002:	4638      	mov	r0, r7
 c022004:	f7fc f916 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c022008:	2800      	cmp	r0, #0
 c02200a:	dde5      	ble.n	c021fd8 <ecp_mul_comb_after_precomp.isra.10+0x11c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
 c02200c:	463a      	mov	r2, r7
 c02200e:	4649      	mov	r1, r9
 c022010:	4648      	mov	r0, r9
 c022012:	f7fc fa35 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c022016:	4603      	mov	r3, r0
 c022018:	2800      	cmp	r0, #0
 c02201a:	d13a      	bne.n	c022092 <ecp_mul_comb_after_precomp.isra.10+0x1d6>
 c02201c:	4629      	mov	r1, r5
 c02201e:	4648      	mov	r0, r9
 c022020:	f7ff f842 	bl	c0210a8 <ecp_modp>
 c022024:	4603      	mov	r3, r0
 c022026:	bba0      	cbnz	r0, c022092 <ecp_mul_comb_after_precomp.isra.10+0x1d6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 c022028:	463a      	mov	r2, r7
 c02202a:	4639      	mov	r1, r7
 c02202c:	a80c      	add	r0, sp, #48	; 0x30
 c02202e:	f7fc fa27 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c022032:	4603      	mov	r3, r0
 c022034:	bb68      	cbnz	r0, c022092 <ecp_mul_comb_after_precomp.isra.10+0x1d6>
 c022036:	4629      	mov	r1, r5
 c022038:	a80c      	add	r0, sp, #48	; 0x30
 c02203a:	f7ff f835 	bl	c0210a8 <ecp_modp>
 c02203e:	4603      	mov	r3, r0
 c022040:	bb38      	cbnz	r0, c022092 <ecp_mul_comb_after_precomp.isra.10+0x1d6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 c022042:	aa0c      	add	r2, sp, #48	; 0x30
 c022044:	4631      	mov	r1, r6
 c022046:	4630      	mov	r0, r6
 c022048:	f7fc fa1a 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c02204c:	4603      	mov	r3, r0
 c02204e:	bb00      	cbnz	r0, c022092 <ecp_mul_comb_after_precomp.isra.10+0x1d6>
 c022050:	4629      	mov	r1, r5
 c022052:	4630      	mov	r0, r6
 c022054:	f7ff f828 	bl	c0210a8 <ecp_modp>
 c022058:	4603      	mov	r3, r0
 c02205a:	b9d0      	cbnz	r0, c022092 <ecp_mul_comb_after_precomp.isra.10+0x1d6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
 c02205c:	a90c      	add	r1, sp, #48	; 0x30
 c02205e:	463a      	mov	r2, r7
 c022060:	4608      	mov	r0, r1
 c022062:	f7fc fa0d 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c022066:	4603      	mov	r3, r0
 c022068:	b998      	cbnz	r0, c022092 <ecp_mul_comb_after_precomp.isra.10+0x1d6>
 c02206a:	4629      	mov	r1, r5
 c02206c:	a80c      	add	r0, sp, #48	; 0x30
 c02206e:	f7ff f81b 	bl	c0210a8 <ecp_modp>
 c022072:	4603      	mov	r3, r0
 c022074:	b968      	cbnz	r0, c022092 <ecp_mul_comb_after_precomp.isra.10+0x1d6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ll ) ); MOD_MUL( pt->Y );
 c022076:	f106 080c 	add.w	r8, r6, #12
 c02207a:	aa0c      	add	r2, sp, #48	; 0x30
 c02207c:	4641      	mov	r1, r8
 c02207e:	4640      	mov	r0, r8
 c022080:	f7fc f9fe 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c022084:	4603      	mov	r3, r0
 c022086:	b920      	cbnz	r0, c022092 <ecp_mul_comb_after_precomp.isra.10+0x1d6>
 c022088:	4629      	mov	r1, r5
 c02208a:	4640      	mov	r0, r8
 c02208c:	f7ff f80c 	bl	c0210a8 <ecp_modp>
 c022090:	4603      	mov	r3, r0
    mbedtls_mpi_free( &l ); mbedtls_mpi_free( &ll );
 c022092:	4638      	mov	r0, r7
 c022094:	9305      	str	r3, [sp, #20]
 c022096:	f7fb fce1 	bl	c01da5c <mbedtls_mpi_free>
 c02209a:	a80c      	add	r0, sp, #48	; 0x30
 c02209c:	f7fb fcde 	bl	c01da5c <mbedtls_mpi_free>
            MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
 c0220a0:	9b05      	ldr	r3, [sp, #20]
 c0220a2:	2b00      	cmp	r3, #0
 c0220a4:	d05b      	beq.n	c02215e <ecp_mul_comb_after_precomp.isra.10+0x2a2>
 c0220a6:	461c      	mov	r4, r3
 c0220a8:	e05d      	b.n	c022166 <ecp_mul_comb_after_precomp.isra.10+0x2aa>
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
 c0220aa:	4619      	mov	r1, r3
 c0220ac:	9806      	ldr	r0, [sp, #24]
 c0220ae:	9307      	str	r3, [sp, #28]
 c0220b0:	f7fb fe18 	bl	c01dce4 <mbedtls_mpi_get_bit>
 c0220b4:	f898 2000 	ldrb.w	r2, [r8]
 c0220b8:	fa00 f009 	lsl.w	r0, r0, r9
 c0220bc:	9b07      	ldr	r3, [sp, #28]
 c0220be:	4310      	orrs	r0, r2
 c0220c0:	f888 0000 	strb.w	r0, [r8]
        for( j = 0; j < w; j++ )
 c0220c4:	f109 0901 	add.w	r9, r9, #1
 c0220c8:	445b      	add	r3, fp
 c0220ca:	9a05      	ldr	r2, [sp, #20]
 c0220cc:	4591      	cmp	r9, r2
 c0220ce:	d3ec      	bcc.n	c0220aa <ecp_mul_comb_after_precomp.isra.10+0x1ee>
    for( i = 0; i < d; i++ )
 c0220d0:	3701      	adds	r7, #1
 c0220d2:	f108 0801 	add.w	r8, r8, #1
 c0220d6:	e73d      	b.n	c021f54 <ecp_mul_comb_after_precomp.isra.10+0x98>
 c0220d8:	463b      	mov	r3, r7
        for( j = 0; j < w; j++ )
 c0220da:	f04f 0900 	mov.w	r9, #0
 c0220de:	e7f4      	b.n	c0220ca <ecp_mul_comb_after_precomp.isra.10+0x20e>
        cc   = x[i] & c;
 c0220e0:	f893 c000 	ldrb.w	ip, [r3]
        c   |= x[i] & ( x[i-1] * adjust );
 c0220e4:	f813 1c01 	ldrb.w	r1, [r3, #-1]
        x[i] = x[i] ^ c;
 c0220e8:	ea8c 020e 	eor.w	r2, ip, lr
 c0220ec:	43d0      	mvns	r0, r2
 c0220ee:	f000 0001 	and.w	r0, r0, #1
        c   |= x[i] & ( x[i-1] * adjust );
 c0220f2:	fb11 f100 	smulbb	r1, r1, r0
 c0220f6:	b252      	sxtb	r2, r2
 c0220f8:	b249      	sxtb	r1, r1
 c0220fa:	ea02 0801 	and.w	r8, r2, r1
        x[i] = x[i] ^ ( x[i-1] * adjust );
 c0220fe:	404a      	eors	r2, r1
 c022100:	f803 2b01 	strb.w	r2, [r3], #1
        x[i-1] |= adjust << 7;
 c022104:	f813 2c02 	ldrb.w	r2, [r3, #-2]
        cc   = x[i] & c;
 c022108:	ea0c 0c0e 	and.w	ip, ip, lr
        c   |= x[i] & ( x[i-1] * adjust );
 c02210c:	ea48 0e0c 	orr.w	lr, r8, ip
        x[i-1] |= adjust << 7;
 c022110:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
        c   |= x[i] & ( x[i-1] * adjust );
 c022114:	fa5f fe8e 	uxtb.w	lr, lr
        x[i-1] |= adjust << 7;
 c022118:	f803 0c02 	strb.w	r0, [r3, #-2]
 c02211c:	e721      	b.n	c021f62 <ecp_mul_comb_after_precomp.isra.10+0xa6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 c02211e:	2101      	movs	r1, #1
 c022120:	4638      	mov	r0, r7
 c022122:	f7fb ff77 	bl	c01e014 <mbedtls_mpi_shift_r>
 c022126:	e75d      	b.n	c021fe4 <ecp_mul_comb_after_precomp.isra.10+0x128>
        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
 c022128:	4632      	mov	r2, r6
 c02212a:	4631      	mov	r1, r6
 c02212c:	4628      	mov	r0, r5
        --i;
 c02212e:	f10b 3bff 	add.w	fp, fp, #4294967295
        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
 c022132:	f7ff f85c 	bl	c0211ee <ecp_double_jac>
 c022136:	b980      	cbnz	r0, c02215a <ecp_mul_comb_after_precomp.isra.10+0x29e>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, T_size, x[i] ) );
 c022138:	f81b 3007 	ldrb.w	r3, [fp, r7]
 c02213c:	a90f      	add	r1, sp, #60	; 0x3c
 c02213e:	9300      	str	r3, [sp, #0]
 c022140:	4628      	mov	r0, r5
 c022142:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 c022146:	f7ff fb9b 	bl	c021880 <ecp_select_comb>
 c02214a:	b930      	cbnz	r0, c02215a <ecp_mul_comb_after_precomp.isra.10+0x29e>
        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );
 c02214c:	ab0f      	add	r3, sp, #60	; 0x3c
 c02214e:	4632      	mov	r2, r6
 c022150:	4631      	mov	r1, r6
 c022152:	4628      	mov	r0, r5
 c022154:	f7ff fcb8 	bl	c021ac8 <ecp_add_mixed>
 c022158:	b110      	cbz	r0, c022160 <ecp_mul_comb_after_precomp.isra.10+0x2a4>
 c02215a:	4604      	mov	r4, r0
 c02215c:	e003      	b.n	c022166 <ecp_mul_comb_after_precomp.isra.10+0x2aa>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, T_size, x[i] ) );
 c02215e:	af18      	add	r7, sp, #96	; 0x60
    while( i != 0 )
 c022160:	f1bb 0f00 	cmp.w	fp, #0
 c022164:	d1e0      	bne.n	c022128 <ecp_mul_comb_after_precomp.isra.10+0x26c>
 c022166:	a80f      	add	r0, sp, #60	; 0x3c
 c022168:	f7ff fbbc 	bl	c0218e4 <mbedtls_ecp_point_free.part.5>
    MBEDTLS_MPI_CHK( ecp_mul_comb_core( grp, RR, T, T_size, k, d,
 c02216c:	2c00      	cmp	r4, #0
 c02216e:	f47f aec5 	bne.w	c021efc <ecp_mul_comb_after_precomp.isra.10+0x40>
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, RR, parity_trick ) );
 c022172:	9a02      	ldr	r2, [sp, #8]
 c022174:	4631      	mov	r1, r6
 c022176:	4628      	mov	r0, r5
 c022178:	f7fe ff73 	bl	c021062 <ecp_safe_invert_jac>
 c02217c:	4604      	mov	r4, r0
 c02217e:	2800      	cmp	r0, #0
 c022180:	f47f aebc 	bne.w	c021efc <ecp_mul_comb_after_precomp.isra.10+0x40>
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, RR ) );
 c022184:	4631      	mov	r1, r6
 c022186:	4628      	mov	r0, r5
 c022188:	f7fe ffd4 	bl	c021134 <ecp_normalize_jac>
 c02218c:	4604      	mov	r4, r0
 c02218e:	e6b5      	b.n	c021efc <ecp_mul_comb_after_precomp.isra.10+0x40>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 c022190:	4c01      	ldr	r4, [pc, #4]	; (c022198 <ecp_mul_comb_after_precomp.isra.10+0x2dc>)
 c022192:	e7e8      	b.n	c022166 <ecp_mul_comb_after_precomp.isra.10+0x2aa>
 c022194:	ffffb080 	.word	0xffffb080
 c022198:	ffffb300 	.word	0xffffb300

0c02219c <mbedtls_ecp_is_zero>:
{
 c02219c:	b508      	push	{r3, lr}
    return( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 );
 c02219e:	2100      	movs	r1, #0
 c0221a0:	3018      	adds	r0, #24
 c0221a2:	f7fc f847 	bl	c01e234 <mbedtls_mpi_cmp_int>
}
 c0221a6:	fab0 f080 	clz	r0, r0
 c0221aa:	0940      	lsrs	r0, r0, #5
 c0221ac:	bd08      	pop	{r3, pc}
	...

0c0221b0 <mbedtls_ecp_point_write_binary>:
{
 c0221b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0221b4:	4683      	mov	fp, r0
 c0221b6:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
    plen = mbedtls_mpi_size( &grp->P );
 c0221ba:	3004      	adds	r0, #4
{
 c0221bc:	460f      	mov	r7, r1
 c0221be:	4692      	mov	sl, r2
 c0221c0:	4699      	mov	r9, r3
    plen = mbedtls_mpi_size( &grp->P );
 c0221c2:	f7fb fe03 	bl	c01ddcc <mbedtls_mpi_size>
 c0221c6:	4605      	mov	r5, r0
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_MONTGOMERY )
 c0221c8:	4658      	mov	r0, fp
 c0221ca:	f7ff fbc3 	bl	c021954 <mbedtls_ecp_get_type>
 c0221ce:	2802      	cmp	r0, #2
 c0221d0:	d123      	bne.n	c02221a <mbedtls_ecp_point_write_binary+0x6a>
        if( buflen < *olen )
 c0221d2:	4545      	cmp	r5, r8
        *olen = plen;
 c0221d4:	f8c9 5000 	str.w	r5, [r9]
        if( buflen < *olen )
 c0221d8:	d903      	bls.n	c0221e2 <mbedtls_ecp_point_write_binary+0x32>
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
 c0221da:	4e29      	ldr	r6, [pc, #164]	; (c022280 <mbedtls_ecp_point_write_binary+0xd0>)
}
 c0221dc:	4630      	mov	r0, r6
 c0221de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary_le( &P->X, buf, plen ) );
 c0221e2:	462a      	mov	r2, r5
 c0221e4:	4621      	mov	r1, r4
 c0221e6:	4638      	mov	r0, r7
 c0221e8:	f7fb fe62 	bl	c01deb0 <mbedtls_mpi_write_binary_le>
 c0221ec:	4606      	mov	r6, r0
 c0221ee:	2800      	cmp	r0, #0
 c0221f0:	d1f4      	bne.n	c0221dc <mbedtls_ecp_point_write_binary+0x2c>
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
 c0221f2:	4658      	mov	r0, fp
 c0221f4:	f7ff fbae 	bl	c021954 <mbedtls_ecp_get_type>
 c0221f8:	2801      	cmp	r0, #1
 c0221fa:	4683      	mov	fp, r0
 c0221fc:	d1ee      	bne.n	c0221dc <mbedtls_ecp_point_write_binary+0x2c>
        if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 c0221fe:	2100      	movs	r1, #0
 c022200:	f107 0018 	add.w	r0, r7, #24
 c022204:	f7fc f816 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c022208:	b948      	cbnz	r0, c02221e <mbedtls_ecp_point_write_binary+0x6e>
            if( buflen < 1 )
 c02220a:	f1b8 0f00 	cmp.w	r8, #0
 c02220e:	d0e4      	beq.n	c0221da <mbedtls_ecp_point_write_binary+0x2a>
            buf[0] = 0x00;
 c022210:	7020      	strb	r0, [r4, #0]
            return( 0 );
 c022212:	4606      	mov	r6, r0
            *olen = 1;
 c022214:	f8c9 b000 	str.w	fp, [r9]
            return( 0 );
 c022218:	e7e0      	b.n	c0221dc <mbedtls_ecp_point_write_binary+0x2c>
    int ret = MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE;
 c02221a:	4e1a      	ldr	r6, [pc, #104]	; (c022284 <mbedtls_ecp_point_write_binary+0xd4>)
 c02221c:	e7e9      	b.n	c0221f2 <mbedtls_ecp_point_write_binary+0x42>
        if( format == MBEDTLS_ECP_PF_UNCOMPRESSED )
 c02221e:	f1ba 0f00 	cmp.w	sl, #0
 c022222:	d119      	bne.n	c022258 <mbedtls_ecp_point_write_binary+0xa8>
            *olen = 2 * plen + 1;
 c022224:	006b      	lsls	r3, r5, #1
 c022226:	3301      	adds	r3, #1
            if( buflen < *olen )
 c022228:	4543      	cmp	r3, r8
            *olen = 2 * plen + 1;
 c02222a:	f8c9 3000 	str.w	r3, [r9]
            if( buflen < *olen )
 c02222e:	d8d4      	bhi.n	c0221da <mbedtls_ecp_point_write_binary+0x2a>
            buf[0] = 0x04;
 c022230:	4621      	mov	r1, r4
 c022232:	2304      	movs	r3, #4
            MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 c022234:	462a      	mov	r2, r5
            buf[0] = 0x04;
 c022236:	f801 3b01 	strb.w	r3, [r1], #1
            MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 c02223a:	4638      	mov	r0, r7
 c02223c:	f7fb fe6d 	bl	c01df1a <mbedtls_mpi_write_binary>
 c022240:	4606      	mov	r6, r0
 c022242:	2800      	cmp	r0, #0
 c022244:	d1ca      	bne.n	c0221dc <mbedtls_ecp_point_write_binary+0x2c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->Y, buf + 1 + plen, plen ) );
 c022246:	462a      	mov	r2, r5
 c022248:	1c69      	adds	r1, r5, #1
 c02224a:	4421      	add	r1, r4
 c02224c:	f107 000c 	add.w	r0, r7, #12
}
 c022250:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 c022254:	f7fb be61 	b.w	c01df1a <mbedtls_mpi_write_binary>
        else if( format == MBEDTLS_ECP_PF_COMPRESSED )
 c022258:	f1ba 0f01 	cmp.w	sl, #1
 c02225c:	d1be      	bne.n	c0221dc <mbedtls_ecp_point_write_binary+0x2c>
            *olen = plen + 1;
 c02225e:	1c6b      	adds	r3, r5, #1
            if( buflen < *olen )
 c022260:	4543      	cmp	r3, r8
            *olen = plen + 1;
 c022262:	f8c9 3000 	str.w	r3, [r9]
            if( buflen < *olen )
 c022266:	d8b8      	bhi.n	c0221da <mbedtls_ecp_point_write_binary+0x2a>
            buf[0] = 0x02 + mbedtls_mpi_get_bit( &P->Y, 0 );
 c022268:	2100      	movs	r1, #0
 c02226a:	f107 000c 	add.w	r0, r7, #12
 c02226e:	f7fb fd39 	bl	c01dce4 <mbedtls_mpi_get_bit>
 c022272:	4621      	mov	r1, r4
 c022274:	3002      	adds	r0, #2
 c022276:	f801 0b01 	strb.w	r0, [r1], #1
            MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 c02227a:	462a      	mov	r2, r5
 c02227c:	4638      	mov	r0, r7
 c02227e:	e7e7      	b.n	c022250 <mbedtls_ecp_point_write_binary+0xa0>
 c022280:	ffffb100 	.word	0xffffb100
 c022284:	ffffb180 	.word	0xffffb180

0c022288 <mbedtls_ecp_point_read_binary>:
{
 c022288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c02228c:	4681      	mov	r9, r0
 c02228e:	460d      	mov	r5, r1
 c022290:	4690      	mov	r8, r2
    if( ilen < 1 )
 c022292:	461e      	mov	r6, r3
 c022294:	b91b      	cbnz	r3, c02229e <mbedtls_ecp_point_read_binary+0x16>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 c022296:	4c32      	ldr	r4, [pc, #200]	; (c022360 <mbedtls_ecp_point_read_binary+0xd8>)
}
 c022298:	4620      	mov	r0, r4
 c02229a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    plen = mbedtls_mpi_size( &grp->P );
 c02229e:	3004      	adds	r0, #4
 c0222a0:	f7fb fd94 	bl	c01ddcc <mbedtls_mpi_size>
 c0222a4:	4607      	mov	r7, r0
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_MONTGOMERY )
 c0222a6:	4648      	mov	r0, r9
 c0222a8:	f7ff fb54 	bl	c021954 <mbedtls_ecp_get_type>
 c0222ac:	2802      	cmp	r0, #2
 c0222ae:	d133      	bne.n	c022318 <mbedtls_ecp_point_read_binary+0x90>
        if( plen != ilen )
 c0222b0:	42be      	cmp	r6, r7
 c0222b2:	d1f0      	bne.n	c022296 <mbedtls_ecp_point_read_binary+0xe>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary_le( &pt->X, buf, plen ) );
 c0222b4:	4632      	mov	r2, r6
 c0222b6:	4641      	mov	r1, r8
 c0222b8:	4628      	mov	r0, r5
 c0222ba:	f7fb fd8d 	bl	c01ddd8 <mbedtls_mpi_read_binary_le>
 c0222be:	4604      	mov	r4, r0
 c0222c0:	2800      	cmp	r0, #0
 c0222c2:	d1e9      	bne.n	c022298 <mbedtls_ecp_point_read_binary+0x10>
        mbedtls_mpi_free( &pt->Y );
 c0222c4:	f105 000c 	add.w	r0, r5, #12
 c0222c8:	f7fb fbc8 	bl	c01da5c <mbedtls_mpi_free>
        if( grp->id == MBEDTLS_ECP_DP_CURVE25519 )
 c0222cc:	f899 3000 	ldrb.w	r3, [r9]
 c0222d0:	2b09      	cmp	r3, #9
 c0222d2:	d017      	beq.n	c022304 <mbedtls_ecp_point_read_binary+0x7c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 c0222d4:	2101      	movs	r1, #1
 c0222d6:	f105 0018 	add.w	r0, r5, #24
 c0222da:	f7fb fce7 	bl	c01dcac <mbedtls_mpi_lset>
 c0222de:	4604      	mov	r4, r0
 c0222e0:	2800      	cmp	r0, #0
 c0222e2:	d1d9      	bne.n	c022298 <mbedtls_ecp_point_read_binary+0x10>
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
 c0222e4:	4648      	mov	r0, r9
 c0222e6:	f7ff fb35 	bl	c021954 <mbedtls_ecp_get_type>
 c0222ea:	2801      	cmp	r0, #1
 c0222ec:	4681      	mov	r9, r0
 c0222ee:	d1d3      	bne.n	c022298 <mbedtls_ecp_point_read_binary+0x10>
        if( buf[0] == 0x00 )
 c0222f0:	f898 3000 	ldrb.w	r3, [r8]
 c0222f4:	b993      	cbnz	r3, c02231c <mbedtls_ecp_point_read_binary+0x94>
            if( ilen == 1 )
 c0222f6:	2e01      	cmp	r6, #1
 c0222f8:	d1cd      	bne.n	c022296 <mbedtls_ecp_point_read_binary+0xe>
                return( mbedtls_ecp_set_zero( pt ) );
 c0222fa:	4628      	mov	r0, r5
}
 c0222fc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
                return( mbedtls_ecp_set_zero( pt ) );
 c022300:	f7ff bbcd 	b.w	c021a9e <mbedtls_ecp_set_zero>
            MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( &pt->X, plen * 8 - 1, 0 ) );
 c022304:	00f1      	lsls	r1, r6, #3
 c022306:	4622      	mov	r2, r4
 c022308:	3901      	subs	r1, #1
 c02230a:	4628      	mov	r0, r5
 c02230c:	f7fb fcfa 	bl	c01dd04 <mbedtls_mpi_set_bit>
 c022310:	4604      	mov	r4, r0
 c022312:	2800      	cmp	r0, #0
 c022314:	d0de      	beq.n	c0222d4 <mbedtls_ecp_point_read_binary+0x4c>
 c022316:	e7bf      	b.n	c022298 <mbedtls_ecp_point_read_binary+0x10>
    int ret = MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE;
 c022318:	4c12      	ldr	r4, [pc, #72]	; (c022364 <mbedtls_ecp_point_read_binary+0xdc>)
 c02231a:	e7e3      	b.n	c0222e4 <mbedtls_ecp_point_read_binary+0x5c>
        if( buf[0] != 0x04 )
 c02231c:	2b04      	cmp	r3, #4
 c02231e:	d11d      	bne.n	c02235c <mbedtls_ecp_point_read_binary+0xd4>
        if( ilen != 2 * plen + 1 )
 c022320:	007b      	lsls	r3, r7, #1
 c022322:	3301      	adds	r3, #1
 c022324:	42b3      	cmp	r3, r6
 c022326:	d1b6      	bne.n	c022296 <mbedtls_ecp_point_read_binary+0xe>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->X, buf + 1, plen ) );
 c022328:	463a      	mov	r2, r7
 c02232a:	f108 0101 	add.w	r1, r8, #1
 c02232e:	4628      	mov	r0, r5
 c022330:	f7fb fd86 	bl	c01de40 <mbedtls_mpi_read_binary>
 c022334:	4604      	mov	r4, r0
 c022336:	2800      	cmp	r0, #0
 c022338:	d1ae      	bne.n	c022298 <mbedtls_ecp_point_read_binary+0x10>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y,
 c02233a:	1c79      	adds	r1, r7, #1
 c02233c:	463a      	mov	r2, r7
 c02233e:	4441      	add	r1, r8
 c022340:	f105 000c 	add.w	r0, r5, #12
 c022344:	f7fb fd7c 	bl	c01de40 <mbedtls_mpi_read_binary>
 c022348:	4604      	mov	r4, r0
 c02234a:	2800      	cmp	r0, #0
 c02234c:	d1a4      	bne.n	c022298 <mbedtls_ecp_point_read_binary+0x10>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 c02234e:	4649      	mov	r1, r9
 c022350:	f105 0018 	add.w	r0, r5, #24
}
 c022354:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 c022358:	f7fb bca8 	b.w	c01dcac <mbedtls_mpi_lset>
            return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 c02235c:	4c01      	ldr	r4, [pc, #4]	; (c022364 <mbedtls_ecp_point_read_binary+0xdc>)
 c02235e:	e79b      	b.n	c022298 <mbedtls_ecp_point_read_binary+0x10>
 c022360:	ffffb080 	.word	0xffffb080
 c022364:	ffffb180 	.word	0xffffb180

0c022368 <mbedtls_ecp_check_pubkey>:
/*
 * Check that a point is valid as a public key
 */
int mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp,
                              const mbedtls_ecp_point *pt )
{
 c022368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c02236c:	460e      	mov	r6, r1
 c02236e:	b086      	sub	sp, #24
 c022370:	4605      	mov	r5, r0
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( pt  != NULL );

    /* Must use affine coordinates */
    if( mbedtls_mpi_cmp_int( &pt->Z, 1 ) != 0 )
 c022372:	2101      	movs	r1, #1
 c022374:	f106 0018 	add.w	r0, r6, #24
 c022378:	f7fb ff5c 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c02237c:	4604      	mov	r4, r0
 c02237e:	b108      	cbz	r0, c022384 <mbedtls_ecp_check_pubkey+0x1c>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 c022380:	4c59      	ldr	r4, [pc, #356]	; (c0224e8 <mbedtls_ecp_check_pubkey+0x180>)
 c022382:	e00c      	b.n	c02239e <mbedtls_ecp_check_pubkey+0x36>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );

#if defined(ECP_MONTGOMERY)
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_MONTGOMERY )
 c022384:	4628      	mov	r0, r5
 c022386:	f7ff fae5 	bl	c021954 <mbedtls_ecp_get_type>
 c02238a:	2802      	cmp	r0, #2
 c02238c:	d10b      	bne.n	c0223a6 <mbedtls_ecp_check_pubkey+0x3e>
    if( mbedtls_mpi_size( &pt->X ) > ( grp->nbits + 7 ) / 8 )
 c02238e:	4630      	mov	r0, r6
 c022390:	f7fb fd1c 	bl	c01ddcc <mbedtls_mpi_size>
 c022394:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 c022396:	3307      	adds	r3, #7
 c022398:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
 c02239c:	d8f0      	bhi.n	c022380 <mbedtls_ecp_check_pubkey+0x18>
#if defined(ECP_SHORTWEIERSTRASS)
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
        return( ecp_check_pubkey_sw( grp, pt ) );
#endif
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
}
 c02239e:	4620      	mov	r0, r4
 c0223a0:	b006      	add	sp, #24
 c0223a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
 c0223a6:	2801      	cmp	r0, #1
 c0223a8:	f040 809c 	bne.w	c0224e4 <mbedtls_ecp_check_pubkey+0x17c>
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 c0223ac:	4621      	mov	r1, r4
 c0223ae:	4630      	mov	r0, r6
 c0223b0:	f7fb ff40 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c0223b4:	2800      	cmp	r0, #0
 c0223b6:	dbe3      	blt.n	c022380 <mbedtls_ecp_check_pubkey+0x18>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 c0223b8:	f106 080c 	add.w	r8, r6, #12
 c0223bc:	4621      	mov	r1, r4
 c0223be:	4640      	mov	r0, r8
 c0223c0:	f7fb ff38 	bl	c01e234 <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 c0223c4:	2800      	cmp	r0, #0
 c0223c6:	dbdb      	blt.n	c022380 <mbedtls_ecp_check_pubkey+0x18>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 c0223c8:	1d2f      	adds	r7, r5, #4
 c0223ca:	4639      	mov	r1, r7
 c0223cc:	4630      	mov	r0, r6
 c0223ce:	f7fb fef1 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 c0223d2:	2800      	cmp	r0, #0
 c0223d4:	dad4      	bge.n	c022380 <mbedtls_ecp_check_pubkey+0x18>
        mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )
 c0223d6:	4639      	mov	r1, r7
 c0223d8:	4640      	mov	r0, r8
 c0223da:	f7fb feeb 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 c0223de:	2800      	cmp	r0, #0
 c0223e0:	dace      	bge.n	c022380 <mbedtls_ecp_check_pubkey+0x18>
    mbedtls_mpi_init( &YY ); mbedtls_mpi_init( &RHS );
 c0223e2:	4668      	mov	r0, sp
 c0223e4:	f7fb fb34 	bl	c01da50 <mbedtls_mpi_init>
 c0223e8:	a803      	add	r0, sp, #12
 c0223ea:	f7fb fb31 	bl	c01da50 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
 c0223ee:	4642      	mov	r2, r8
 c0223f0:	4641      	mov	r1, r8
 c0223f2:	4668      	mov	r0, sp
 c0223f4:	f7fc f844 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c0223f8:	4604      	mov	r4, r0
 c0223fa:	2800      	cmp	r0, #0
 c0223fc:	d144      	bne.n	c022488 <mbedtls_ecp_check_pubkey+0x120>
 c0223fe:	4629      	mov	r1, r5
 c022400:	4668      	mov	r0, sp
 c022402:	f7fe fe51 	bl	c0210a8 <ecp_modp>
 c022406:	4604      	mov	r4, r0
 c022408:	2800      	cmp	r0, #0
 c02240a:	d13d      	bne.n	c022488 <mbedtls_ecp_check_pubkey+0x120>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
 c02240c:	4632      	mov	r2, r6
 c02240e:	4631      	mov	r1, r6
 c022410:	a803      	add	r0, sp, #12
 c022412:	f7fc f835 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c022416:	4604      	mov	r4, r0
 c022418:	2800      	cmp	r0, #0
 c02241a:	d135      	bne.n	c022488 <mbedtls_ecp_check_pubkey+0x120>
 c02241c:	4629      	mov	r1, r5
 c02241e:	a803      	add	r0, sp, #12
 c022420:	f7fe fe42 	bl	c0210a8 <ecp_modp>
 c022424:	4604      	mov	r4, r0
 c022426:	bb78      	cbnz	r0, c022488 <mbedtls_ecp_check_pubkey+0x120>
    if( grp->A.p == NULL )
 c022428:	69ab      	ldr	r3, [r5, #24]
 c02242a:	2b00      	cmp	r3, #0
 c02242c:	d13f      	bne.n	c0224ae <mbedtls_ecp_check_pubkey+0x146>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
 c02242e:	a903      	add	r1, sp, #12
 c022430:	2203      	movs	r2, #3
 c022432:	4608      	mov	r0, r1
 c022434:	f7fc f80e 	bl	c01e454 <mbedtls_mpi_sub_int>
 c022438:	4604      	mov	r4, r0
 c02243a:	bb28      	cbnz	r0, c022488 <mbedtls_ecp_check_pubkey+0x120>
 c02243c:	9b03      	ldr	r3, [sp, #12]
 c02243e:	2b00      	cmp	r3, #0
 c022440:	db29      	blt.n	c022496 <mbedtls_ecp_check_pubkey+0x12e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
 c022442:	a903      	add	r1, sp, #12
 c022444:	4632      	mov	r2, r6
 c022446:	4608      	mov	r0, r1
 c022448:	f7fc f81a 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c02244c:	4604      	mov	r4, r0
 c02244e:	b9d8      	cbnz	r0, c022488 <mbedtls_ecp_check_pubkey+0x120>
 c022450:	4629      	mov	r1, r5
 c022452:	a803      	add	r0, sp, #12
 c022454:	f7fe fe28 	bl	c0210a8 <ecp_modp>
 c022458:	4604      	mov	r4, r0
 c02245a:	b9a8      	cbnz	r0, c022488 <mbedtls_ecp_check_pubkey+0x120>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 c02245c:	a903      	add	r1, sp, #12
 c02245e:	f105 021c 	add.w	r2, r5, #28
 c022462:	4608      	mov	r0, r1
 c022464:	f7fb ff9b 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c022468:	4604      	mov	r4, r0
 c02246a:	b968      	cbnz	r0, c022488 <mbedtls_ecp_check_pubkey+0x120>
 c02246c:	4639      	mov	r1, r7
 c02246e:	a803      	add	r0, sp, #12
 c022470:	f7fb fea0 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c022474:	2800      	cmp	r0, #0
 c022476:	da2f      	bge.n	c0224d8 <mbedtls_ecp_check_pubkey+0x170>
    if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )
 c022478:	a903      	add	r1, sp, #12
 c02247a:	4668      	mov	r0, sp
 c02247c:	f7fb fe9a 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
        ret = MBEDTLS_ERR_ECP_INVALID_KEY;
 c022480:	4c19      	ldr	r4, [pc, #100]	; (c0224e8 <mbedtls_ecp_check_pubkey+0x180>)
 c022482:	2800      	cmp	r0, #0
 c022484:	bf08      	it	eq
 c022486:	2400      	moveq	r4, #0
    mbedtls_mpi_free( &YY ); mbedtls_mpi_free( &RHS );
 c022488:	4668      	mov	r0, sp
 c02248a:	f7fb fae7 	bl	c01da5c <mbedtls_mpi_free>
 c02248e:	a803      	add	r0, sp, #12
 c022490:	f7fb fae4 	bl	c01da5c <mbedtls_mpi_free>
        return( ecp_check_pubkey_sw( grp, pt ) );
 c022494:	e783      	b.n	c02239e <mbedtls_ecp_check_pubkey+0x36>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
 c022496:	2100      	movs	r1, #0
 c022498:	a803      	add	r0, sp, #12
 c02249a:	f7fb fecb 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c02249e:	2800      	cmp	r0, #0
 c0224a0:	d0cf      	beq.n	c022442 <mbedtls_ecp_check_pubkey+0xda>
 c0224a2:	a903      	add	r1, sp, #12
 c0224a4:	463a      	mov	r2, r7
 c0224a6:	4608      	mov	r0, r1
 c0224a8:	f7fb ff79 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c0224ac:	e7c4      	b.n	c022438 <mbedtls_ecp_check_pubkey+0xd0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );
 c0224ae:	a903      	add	r1, sp, #12
 c0224b0:	f105 0210 	add.w	r2, r5, #16
 c0224b4:	4608      	mov	r0, r1
 c0224b6:	f7fb ff72 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c0224ba:	4604      	mov	r4, r0
 c0224bc:	2800      	cmp	r0, #0
 c0224be:	d1e3      	bne.n	c022488 <mbedtls_ecp_check_pubkey+0x120>
 c0224c0:	4639      	mov	r1, r7
 c0224c2:	a803      	add	r0, sp, #12
 c0224c4:	f7fb fe76 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c0224c8:	2800      	cmp	r0, #0
 c0224ca:	dbba      	blt.n	c022442 <mbedtls_ecp_check_pubkey+0xda>
 c0224cc:	a903      	add	r1, sp, #12
 c0224ce:	463a      	mov	r2, r7
 c0224d0:	4608      	mov	r0, r1
 c0224d2:	f7fb ff26 	bl	c01e322 <mbedtls_mpi_sub_abs>
 c0224d6:	e7f0      	b.n	c0224ba <mbedtls_ecp_check_pubkey+0x152>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 c0224d8:	a903      	add	r1, sp, #12
 c0224da:	463a      	mov	r2, r7
 c0224dc:	4608      	mov	r0, r1
 c0224de:	f7fb ff20 	bl	c01e322 <mbedtls_mpi_sub_abs>
 c0224e2:	e7c1      	b.n	c022468 <mbedtls_ecp_check_pubkey+0x100>
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 c0224e4:	4c01      	ldr	r4, [pc, #4]	; (c0224ec <mbedtls_ecp_check_pubkey+0x184>)
 c0224e6:	e75a      	b.n	c02239e <mbedtls_ecp_check_pubkey+0x36>
 c0224e8:	ffffb380 	.word	0xffffb380
 c0224ec:	ffffb080 	.word	0xffffb080

0c0224f0 <mbedtls_ecp_check_privkey>:
/*
 * Check that an mbedtls_mpi is valid as a private key
 */
int mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp,
                               const mbedtls_mpi *d )
{
 c0224f0:	b570      	push	{r4, r5, r6, lr}
 c0224f2:	4606      	mov	r6, r0
 c0224f4:	460c      	mov	r4, r1
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( d   != NULL );

#if defined(ECP_MONTGOMERY)
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_MONTGOMERY )
 c0224f6:	f7ff fa2d 	bl	c021954 <mbedtls_ecp_get_type>
 c0224fa:	2802      	cmp	r0, #2
 c0224fc:	4605      	mov	r5, r0
 c0224fe:	d119      	bne.n	c022534 <mbedtls_ecp_check_privkey+0x44>
    {
        /* see RFC 7748 sec. 5 para. 5 */
        if( mbedtls_mpi_get_bit( d, 0 ) != 0 ||
 c022500:	2100      	movs	r1, #0
 c022502:	4620      	mov	r0, r4
 c022504:	f7fb fbee 	bl	c01dce4 <mbedtls_mpi_get_bit>
 c022508:	bb18      	cbnz	r0, c022552 <mbedtls_ecp_check_privkey+0x62>
            mbedtls_mpi_get_bit( d, 1 ) != 0 ||
 c02250a:	2101      	movs	r1, #1
 c02250c:	4620      	mov	r0, r4
 c02250e:	f7fb fbe9 	bl	c01dce4 <mbedtls_mpi_get_bit>
        if( mbedtls_mpi_get_bit( d, 0 ) != 0 ||
 c022512:	b9f0      	cbnz	r0, c022552 <mbedtls_ecp_check_privkey+0x62>
            mbedtls_mpi_bitlen( d ) - 1 != grp->nbits ) /* mbedtls_mpi_bitlen is one-based! */
 c022514:	4620      	mov	r0, r4
 c022516:	f7fb fc39 	bl	c01dd8c <mbedtls_mpi_bitlen>
            mbedtls_mpi_get_bit( d, 1 ) != 0 ||
 c02251a:	6df3      	ldr	r3, [r6, #92]	; 0x5c
            mbedtls_mpi_bitlen( d ) - 1 != grp->nbits ) /* mbedtls_mpi_bitlen is one-based! */
 c02251c:	3801      	subs	r0, #1
            mbedtls_mpi_get_bit( d, 1 ) != 0 ||
 c02251e:	4298      	cmp	r0, r3
 c022520:	d117      	bne.n	c022552 <mbedtls_ecp_check_privkey+0x62>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );

        /* see [Curve25519] page 5 */
        if( grp->nbits == 254 && mbedtls_mpi_get_bit( d, 2 ) != 0 )
 c022522:	28fe      	cmp	r0, #254	; 0xfe
 c022524:	d104      	bne.n	c022530 <mbedtls_ecp_check_privkey+0x40>
 c022526:	4629      	mov	r1, r5
 c022528:	4620      	mov	r0, r4
 c02252a:	f7fb fbdb 	bl	c01dce4 <mbedtls_mpi_get_bit>
 c02252e:	b980      	cbnz	r0, c022552 <mbedtls_ecp_check_privkey+0x62>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );

        return( 0 );
 c022530:	2000      	movs	r0, #0
            return( 0 );
    }
#endif /* ECP_SHORTWEIERSTRASS */

    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
}
 c022532:	bd70      	pop	{r4, r5, r6, pc}
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
 c022534:	2801      	cmp	r0, #1
 c022536:	d10e      	bne.n	c022556 <mbedtls_ecp_check_privkey+0x66>
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 c022538:	4601      	mov	r1, r0
 c02253a:	4620      	mov	r0, r4
 c02253c:	f7fb fe7a 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c022540:	2800      	cmp	r0, #0
 c022542:	db06      	blt.n	c022552 <mbedtls_ecp_check_privkey+0x62>
            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
 c022544:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 c022548:	4620      	mov	r0, r4
 c02254a:	f7fb fe33 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 c02254e:	2800      	cmp	r0, #0
 c022550:	dbee      	blt.n	c022530 <mbedtls_ecp_check_privkey+0x40>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 c022552:	4802      	ldr	r0, [pc, #8]	; (c02255c <mbedtls_ecp_check_privkey+0x6c>)
 c022554:	e7ed      	b.n	c022532 <mbedtls_ecp_check_privkey+0x42>
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 c022556:	4802      	ldr	r0, [pc, #8]	; (c022560 <mbedtls_ecp_check_privkey+0x70>)
 c022558:	e7eb      	b.n	c022532 <mbedtls_ecp_check_privkey+0x42>
 c02255a:	bf00      	nop
 c02255c:	ffffb380 	.word	0xffffb380
 c022560:	ffffb080 	.word	0xffffb080

0c022564 <mbedtls_ecp_mul_restartable>:
{
 c022564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c022568:	460e      	mov	r6, r1
 c02256a:	b0cd      	sub	sp, #308	; 0x134
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
 c02256c:	4611      	mov	r1, r2
{
 c02256e:	4699      	mov	r9, r3
 c022570:	4604      	mov	r4, r0
 c022572:	920a      	str	r2, [sp, #40]	; 0x28
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
 c022574:	f7ff ffbc 	bl	c0224f0 <mbedtls_ecp_check_privkey>
 c022578:	4603      	mov	r3, r0
 c02257a:	2800      	cmp	r0, #0
 c02257c:	d174      	bne.n	c022668 <mbedtls_ecp_mul_restartable+0x104>
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, P ) );
 c02257e:	4649      	mov	r1, r9
 c022580:	4620      	mov	r0, r4
 c022582:	f7ff fef1 	bl	c022368 <mbedtls_ecp_check_pubkey>
 c022586:	9007      	str	r0, [sp, #28]
 c022588:	2800      	cmp	r0, #0
 c02258a:	f040 8368 	bne.w	c022c5e <mbedtls_ecp_mul_restartable+0x6fa>
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_MONTGOMERY )
 c02258e:	4620      	mov	r0, r4
 c022590:	f7ff f9e0 	bl	c021954 <mbedtls_ecp_get_type>
 c022594:	2802      	cmp	r0, #2
 c022596:	f040 826e 	bne.w	c022a76 <mbedtls_ecp_mul_restartable+0x512>
    mbedtls_ecp_point_init( &RP ); mbedtls_mpi_init( &PX );
 c02259a:	a82d      	add	r0, sp, #180	; 0xb4
 c02259c:	f7ff f9e4 	bl	c021968 <mbedtls_ecp_point_init>
 c0225a0:	a80f      	add	r0, sp, #60	; 0x3c
 c0225a2:	f7fb fa55 	bl	c01da50 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &PX, &P->X ) );
 c0225a6:	4649      	mov	r1, r9
 c0225a8:	a80f      	add	r0, sp, #60	; 0x3c
 c0225aa:	f7fb fac8 	bl	c01db3e <mbedtls_mpi_copy>
 c0225ae:	4603      	mov	r3, r0
 c0225b0:	2800      	cmp	r0, #0
 c0225b2:	d14e      	bne.n	c022652 <mbedtls_ecp_mul_restartable+0xee>
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &RP, P ) );
 c0225b4:	4649      	mov	r1, r9
 c0225b6:	a82d      	add	r0, sp, #180	; 0xb4
 c0225b8:	f7ff fa58 	bl	c021a6c <mbedtls_ecp_copy>
 c0225bc:	4603      	mov	r3, r0
 c0225be:	2800      	cmp	r0, #0
 c0225c0:	d147      	bne.n	c022652 <mbedtls_ecp_mul_restartable+0xee>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->X, 1 ) );
 c0225c2:	2101      	movs	r1, #1
 c0225c4:	4630      	mov	r0, r6
 c0225c6:	f7fb fb71 	bl	c01dcac <mbedtls_mpi_lset>
 c0225ca:	4603      	mov	r3, r0
 c0225cc:	2800      	cmp	r0, #0
 c0225ce:	d140      	bne.n	c022652 <mbedtls_ecp_mul_restartable+0xee>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 0 ) );
 c0225d0:	f106 0518 	add.w	r5, r6, #24
 c0225d4:	9907      	ldr	r1, [sp, #28]
 c0225d6:	4628      	mov	r0, r5
 c0225d8:	f7fb fb68 	bl	c01dcac <mbedtls_mpi_lset>
 c0225dc:	4603      	mov	r3, r0
 c0225de:	2800      	cmp	r0, #0
 c0225e0:	d137      	bne.n	c022652 <mbedtls_ecp_mul_restartable+0xee>
    mbedtls_mpi_free( &R->Y );
 c0225e2:	f106 000c 	add.w	r0, r6, #12
 c0225e6:	f7fb fa39 	bl	c01da5c <mbedtls_mpi_free>
    MOD_ADD( RP.X );
 c0225ea:	1d27      	adds	r7, r4, #4
 c0225ec:	4639      	mov	r1, r7
 c0225ee:	a82d      	add	r0, sp, #180	; 0xb4
 c0225f0:	f7fb fde0 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c0225f4:	2800      	cmp	r0, #0
 c0225f6:	da24      	bge.n	c022642 <mbedtls_ecp_mul_restartable+0xde>
    if( f_rng != NULL )
 c0225f8:	9b56      	ldr	r3, [sp, #344]	; 0x158
 c0225fa:	2b00      	cmp	r3, #0
 c0225fc:	d138      	bne.n	c022670 <mbedtls_ecp_mul_restartable+0x10c>
    i = mbedtls_mpi_bitlen( m ); /* one past the (zero-based) most significant bit */
 c0225fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 c022600:	f7fb fbc4 	bl	c01dd8c <mbedtls_mpi_bitlen>
 c022604:	f100 38ff 	add.w	r8, r0, #4294967295
    while( i-- > 0 )
 c022608:	f1b8 3fff 	cmp.w	r8, #4294967295
 c02260c:	d179      	bne.n	c022702 <mbedtls_ecp_mul_restartable+0x19e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &P->Z, &P->Z, &grp->P ) );
 c02260e:	463a      	mov	r2, r7
 c022610:	4629      	mov	r1, r5
 c022612:	4628      	mov	r0, r5
 c022614:	f7fc fe17 	bl	c01f246 <mbedtls_mpi_inv_mod>
 c022618:	4603      	mov	r3, r0
 c02261a:	b9d0      	cbnz	r0, c022652 <mbedtls_ecp_mul_restartable+0xee>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &P->Z ) ); MOD_MUL( P->X );
 c02261c:	462a      	mov	r2, r5
 c02261e:	4631      	mov	r1, r6
 c022620:	4630      	mov	r0, r6
 c022622:	f7fb ff2d 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c022626:	4603      	mov	r3, r0
 c022628:	b998      	cbnz	r0, c022652 <mbedtls_ecp_mul_restartable+0xee>
 c02262a:	4621      	mov	r1, r4
 c02262c:	4630      	mov	r0, r6
 c02262e:	f7fe fd3b 	bl	c0210a8 <ecp_modp>
 c022632:	4603      	mov	r3, r0
 c022634:	b968      	cbnz	r0, c022652 <mbedtls_ecp_mul_restartable+0xee>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &P->Z, 1 ) );
 c022636:	2101      	movs	r1, #1
 c022638:	4628      	mov	r0, r5
 c02263a:	f7fb fb37 	bl	c01dcac <mbedtls_mpi_lset>
 c02263e:	4603      	mov	r3, r0
 c022640:	e007      	b.n	c022652 <mbedtls_ecp_mul_restartable+0xee>
    MOD_ADD( RP.X );
 c022642:	a92d      	add	r1, sp, #180	; 0xb4
 c022644:	463a      	mov	r2, r7
 c022646:	4608      	mov	r0, r1
 c022648:	f7fb fe6b 	bl	c01e322 <mbedtls_mpi_sub_abs>
 c02264c:	4603      	mov	r3, r0
 c02264e:	2800      	cmp	r0, #0
 c022650:	d0cc      	beq.n	c0225ec <mbedtls_ecp_mul_restartable+0x88>
 c022652:	a82d      	add	r0, sp, #180	; 0xb4
 c022654:	9308      	str	r3, [sp, #32]
 c022656:	f7ff f945 	bl	c0218e4 <mbedtls_ecp_point_free.part.5>
    mbedtls_ecp_point_free( &RP ); mbedtls_mpi_free( &PX );
 c02265a:	a80f      	add	r0, sp, #60	; 0x3c
 c02265c:	f7fb f9fe 	bl	c01da5c <mbedtls_mpi_free>
        MBEDTLS_MPI_CHK( ecp_mul_mxz( grp, R, m, P, f_rng, p_rng ) );
 c022660:	9b08      	ldr	r3, [sp, #32]
 c022662:	2b00      	cmp	r3, #0
 c022664:	f000 8208 	beq.w	c022a78 <mbedtls_ecp_mul_restartable+0x514>
}
 c022668:	4618      	mov	r0, r3
 c02266a:	b04d      	add	sp, #308	; 0x134
 c02266c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p_size = ( grp->pbits + 7 ) / 8;
 c022670:	6da3      	ldr	r3, [r4, #88]	; 0x58
    mbedtls_mpi_init( &l );
 c022672:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
    p_size = ( grp->pbits + 7 ) / 8;
 c022676:	3307      	adds	r3, #7
    mbedtls_mpi_init( &l );
 c022678:	4640      	mov	r0, r8
    p_size = ( grp->pbits + 7 ) / 8;
 c02267a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
    mbedtls_mpi_init( &l );
 c02267e:	f04f 0b0c 	mov.w	fp, #12
 c022682:	f7fb f9e5 	bl	c01da50 <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
 c022686:	9b57      	ldr	r3, [sp, #348]	; 0x15c
 c022688:	9a56      	ldr	r2, [sp, #344]	; 0x158
 c02268a:	4651      	mov	r1, sl
 c02268c:	4640      	mov	r0, r8
 c02268e:	f7fc fce4 	bl	c01f05a <mbedtls_mpi_fill_random>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 c022692:	4603      	mov	r3, r0
 c022694:	bb40      	cbnz	r0, c0226e8 <mbedtls_ecp_mul_restartable+0x184>
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 c022696:	4639      	mov	r1, r7
 c022698:	4640      	mov	r0, r8
 c02269a:	f7fb fd8b 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c02269e:	2800      	cmp	r0, #0
 c0226a0:	da2a      	bge.n	c0226f8 <mbedtls_ecp_mul_restartable+0x194>
        if( count++ > 10 )
 c0226a2:	f1bb 0b01 	subs.w	fp, fp, #1
 c0226a6:	f000 8302 	beq.w	c022cae <mbedtls_ecp_mul_restartable+0x74a>
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
 c0226aa:	2101      	movs	r1, #1
 c0226ac:	4640      	mov	r0, r8
 c0226ae:	f7fb fdc1 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c0226b2:	2800      	cmp	r0, #0
 c0226b4:	dde7      	ble.n	c022686 <mbedtls_ecp_mul_restartable+0x122>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &l ) ); MOD_MUL( P->X );
 c0226b6:	a92d      	add	r1, sp, #180	; 0xb4
 c0226b8:	4642      	mov	r2, r8
 c0226ba:	4608      	mov	r0, r1
 c0226bc:	f7fb fee0 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c0226c0:	4603      	mov	r3, r0
 c0226c2:	b988      	cbnz	r0, c0226e8 <mbedtls_ecp_mul_restartable+0x184>
 c0226c4:	4621      	mov	r1, r4
 c0226c6:	a82d      	add	r0, sp, #180	; 0xb4
 c0226c8:	f7fe fcee 	bl	c0210a8 <ecp_modp>
 c0226cc:	4603      	mov	r3, r0
 c0226ce:	b958      	cbnz	r0, c0226e8 <mbedtls_ecp_mul_restartable+0x184>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->Z, &P->Z, &l ) ); MOD_MUL( P->Z );
 c0226d0:	a933      	add	r1, sp, #204	; 0xcc
 c0226d2:	4642      	mov	r2, r8
 c0226d4:	4608      	mov	r0, r1
 c0226d6:	f7fb fed3 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c0226da:	4603      	mov	r3, r0
 c0226dc:	b920      	cbnz	r0, c0226e8 <mbedtls_ecp_mul_restartable+0x184>
 c0226de:	4621      	mov	r1, r4
 c0226e0:	a833      	add	r0, sp, #204	; 0xcc
 c0226e2:	f7fe fce1 	bl	c0210a8 <ecp_modp>
 c0226e6:	4603      	mov	r3, r0
    mbedtls_mpi_free( &l );
 c0226e8:	a82a      	add	r0, sp, #168	; 0xa8
 c0226ea:	9308      	str	r3, [sp, #32]
 c0226ec:	f7fb f9b6 	bl	c01da5c <mbedtls_mpi_free>
        MBEDTLS_MPI_CHK( ecp_randomize_mxz( grp, &RP, f_rng, p_rng ) );
 c0226f0:	9b08      	ldr	r3, [sp, #32]
 c0226f2:	2b00      	cmp	r3, #0
 c0226f4:	d083      	beq.n	c0225fe <mbedtls_ecp_mul_restartable+0x9a>
 c0226f6:	e7ac      	b.n	c022652 <mbedtls_ecp_mul_restartable+0xee>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 c0226f8:	2101      	movs	r1, #1
 c0226fa:	4640      	mov	r0, r8
 c0226fc:	f7fb fc8a 	bl	c01e014 <mbedtls_mpi_shift_r>
 c022700:	e7c7      	b.n	c022692 <mbedtls_ecp_mul_restartable+0x12e>
        b = mbedtls_mpi_get_bit( m, i );
 c022702:	4641      	mov	r1, r8
 c022704:	980a      	ldr	r0, [sp, #40]	; 0x28
 c022706:	f7fb faed 	bl	c01dce4 <mbedtls_mpi_get_bit>
 c02270a:	fa5f fa80 	uxtb.w	sl, r0
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );
 c02270e:	4652      	mov	r2, sl
 c022710:	a92d      	add	r1, sp, #180	; 0xb4
 c022712:	4630      	mov	r0, r6
 c022714:	f7fb fa89 	bl	c01dc2a <mbedtls_mpi_safe_cond_swap>
 c022718:	4603      	mov	r3, r0
 c02271a:	2800      	cmp	r0, #0
 c02271c:	d199      	bne.n	c022652 <mbedtls_ecp_mul_restartable+0xee>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );
 c02271e:	4652      	mov	r2, sl
 c022720:	a933      	add	r1, sp, #204	; 0xcc
 c022722:	4628      	mov	r0, r5
 c022724:	f7fb fa81 	bl	c01dc2a <mbedtls_mpi_safe_cond_swap>
 c022728:	4603      	mov	r3, r0
 c02272a:	2800      	cmp	r0, #0
 c02272c:	d191      	bne.n	c022652 <mbedtls_ecp_mul_restartable+0xee>
    mbedtls_mpi_init( &A ); mbedtls_mpi_init( &AA ); mbedtls_mpi_init( &B );
 c02272e:	a812      	add	r0, sp, #72	; 0x48
 c022730:	f7fb f98e 	bl	c01da50 <mbedtls_mpi_init>
 c022734:	a815      	add	r0, sp, #84	; 0x54
 c022736:	f7fb f98b 	bl	c01da50 <mbedtls_mpi_init>
 c02273a:	a818      	add	r0, sp, #96	; 0x60
 c02273c:	f7fb f988 	bl	c01da50 <mbedtls_mpi_init>
    mbedtls_mpi_init( &BB ); mbedtls_mpi_init( &E ); mbedtls_mpi_init( &C );
 c022740:	a81b      	add	r0, sp, #108	; 0x6c
 c022742:	f7fb f985 	bl	c01da50 <mbedtls_mpi_init>
 c022746:	a81e      	add	r0, sp, #120	; 0x78
 c022748:	f7fb f982 	bl	c01da50 <mbedtls_mpi_init>
 c02274c:	a821      	add	r0, sp, #132	; 0x84
 c02274e:	f7fb f97f 	bl	c01da50 <mbedtls_mpi_init>
    mbedtls_mpi_init( &D ); mbedtls_mpi_init( &DA ); mbedtls_mpi_init( &CB );
 c022752:	a824      	add	r0, sp, #144	; 0x90
 c022754:	f7fb f97c 	bl	c01da50 <mbedtls_mpi_init>
 c022758:	a827      	add	r0, sp, #156	; 0x9c
 c02275a:	f7fb f979 	bl	c01da50 <mbedtls_mpi_init>
 c02275e:	a82a      	add	r0, sp, #168	; 0xa8
 c022760:	f7fb f976 	bl	c01da50 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &A,    &P->X,   &P->Z ) ); MOD_ADD( A    );
 c022764:	462a      	mov	r2, r5
 c022766:	4631      	mov	r1, r6
 c022768:	a812      	add	r0, sp, #72	; 0x48
 c02276a:	f7fb fe18 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c02276e:	4603      	mov	r3, r0
 c022770:	2800      	cmp	r0, #0
 c022772:	f040 8105 	bne.w	c022980 <mbedtls_ecp_mul_restartable+0x41c>
 c022776:	4639      	mov	r1, r7
 c022778:	a812      	add	r0, sp, #72	; 0x48
 c02277a:	f7fb fd1b 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c02277e:	2800      	cmp	r0, #0
 c022780:	f280 8133 	bge.w	c0229ea <mbedtls_ecp_mul_restartable+0x486>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &AA,   &A,      &A    ) ); MOD_MUL( AA   );
 c022784:	aa12      	add	r2, sp, #72	; 0x48
 c022786:	4611      	mov	r1, r2
 c022788:	a815      	add	r0, sp, #84	; 0x54
 c02278a:	f7fb fe79 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c02278e:	4603      	mov	r3, r0
 c022790:	2800      	cmp	r0, #0
 c022792:	f040 80f5 	bne.w	c022980 <mbedtls_ecp_mul_restartable+0x41c>
 c022796:	4621      	mov	r1, r4
 c022798:	a815      	add	r0, sp, #84	; 0x54
 c02279a:	f7fe fc85 	bl	c0210a8 <ecp_modp>
 c02279e:	4603      	mov	r3, r0
 c0227a0:	2800      	cmp	r0, #0
 c0227a2:	f040 80ed 	bne.w	c022980 <mbedtls_ecp_mul_restartable+0x41c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &B,    &P->X,   &P->Z ) ); MOD_SUB( B    );
 c0227a6:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
 c0227aa:	462a      	mov	r2, r5
 c0227ac:	4631      	mov	r1, r6
 c0227ae:	4658      	mov	r0, fp
 c0227b0:	f7fb fe17 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c0227b4:	4603      	mov	r3, r0
 c0227b6:	2800      	cmp	r0, #0
 c0227b8:	f040 80e2 	bne.w	c022980 <mbedtls_ecp_mul_restartable+0x41c>
 c0227bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 c0227be:	2b00      	cmp	r3, #0
 c0227c0:	f2c0 8119 	blt.w	c0229f6 <mbedtls_ecp_mul_restartable+0x492>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &BB,   &B,      &B    ) ); MOD_MUL( BB   );
 c0227c4:	aa18      	add	r2, sp, #96	; 0x60
 c0227c6:	4611      	mov	r1, r2
 c0227c8:	a81b      	add	r0, sp, #108	; 0x6c
 c0227ca:	f7fb fe59 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c0227ce:	4603      	mov	r3, r0
 c0227d0:	2800      	cmp	r0, #0
 c0227d2:	f040 80d5 	bne.w	c022980 <mbedtls_ecp_mul_restartable+0x41c>
 c0227d6:	4621      	mov	r1, r4
 c0227d8:	a81b      	add	r0, sp, #108	; 0x6c
 c0227da:	f7fe fc65 	bl	c0210a8 <ecp_modp>
 c0227de:	4603      	mov	r3, r0
 c0227e0:	2800      	cmp	r0, #0
 c0227e2:	f040 80cd 	bne.w	c022980 <mbedtls_ecp_mul_restartable+0x41c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &E,    &AA,     &BB   ) ); MOD_SUB( E    );
 c0227e6:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 c0227ea:	aa1b      	add	r2, sp, #108	; 0x6c
 c0227ec:	a915      	add	r1, sp, #84	; 0x54
 c0227ee:	4658      	mov	r0, fp
 c0227f0:	f7fb fdf7 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c0227f4:	4603      	mov	r3, r0
 c0227f6:	2800      	cmp	r0, #0
 c0227f8:	f040 80c2 	bne.w	c022980 <mbedtls_ecp_mul_restartable+0x41c>
 c0227fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 c0227fe:	2b00      	cmp	r3, #0
 c022800:	f2c0 8106 	blt.w	c022a10 <mbedtls_ecp_mul_restartable+0x4ac>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &C,    &Q->X,   &Q->Z ) ); MOD_ADD( C    );
 c022804:	f10d 0b84 	add.w	fp, sp, #132	; 0x84
 c022808:	aa33      	add	r2, sp, #204	; 0xcc
 c02280a:	a92d      	add	r1, sp, #180	; 0xb4
 c02280c:	4658      	mov	r0, fp
 c02280e:	f7fb fdc6 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c022812:	4603      	mov	r3, r0
 c022814:	2800      	cmp	r0, #0
 c022816:	f040 80b3 	bne.w	c022980 <mbedtls_ecp_mul_restartable+0x41c>
 c02281a:	4639      	mov	r1, r7
 c02281c:	4658      	mov	r0, fp
 c02281e:	f7fb fcc9 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c022822:	2800      	cmp	r0, #0
 c022824:	f280 8101 	bge.w	c022a2a <mbedtls_ecp_mul_restartable+0x4c6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &D,    &Q->X,   &Q->Z ) ); MOD_SUB( D    );
 c022828:	f10d 0b90 	add.w	fp, sp, #144	; 0x90
 c02282c:	aa33      	add	r2, sp, #204	; 0xcc
 c02282e:	a92d      	add	r1, sp, #180	; 0xb4
 c022830:	4658      	mov	r0, fp
 c022832:	f7fb fdd6 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c022836:	4603      	mov	r3, r0
 c022838:	2800      	cmp	r0, #0
 c02283a:	f040 80a1 	bne.w	c022980 <mbedtls_ecp_mul_restartable+0x41c>
 c02283e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 c022840:	2b00      	cmp	r3, #0
 c022842:	f2c0 80f8 	blt.w	c022a36 <mbedtls_ecp_mul_restartable+0x4d2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DA,   &D,      &A    ) ); MOD_MUL( DA   );
 c022846:	aa12      	add	r2, sp, #72	; 0x48
 c022848:	a924      	add	r1, sp, #144	; 0x90
 c02284a:	a827      	add	r0, sp, #156	; 0x9c
 c02284c:	f7fb fe18 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c022850:	4603      	mov	r3, r0
 c022852:	2800      	cmp	r0, #0
 c022854:	f040 8094 	bne.w	c022980 <mbedtls_ecp_mul_restartable+0x41c>
 c022858:	4621      	mov	r1, r4
 c02285a:	a827      	add	r0, sp, #156	; 0x9c
 c02285c:	f7fe fc24 	bl	c0210a8 <ecp_modp>
 c022860:	4603      	mov	r3, r0
 c022862:	2800      	cmp	r0, #0
 c022864:	f040 808c 	bne.w	c022980 <mbedtls_ecp_mul_restartable+0x41c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &CB,   &C,      &B    ) ); MOD_MUL( CB   );
 c022868:	aa18      	add	r2, sp, #96	; 0x60
 c02286a:	a921      	add	r1, sp, #132	; 0x84
 c02286c:	a82a      	add	r0, sp, #168	; 0xa8
 c02286e:	f7fb fe07 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c022872:	4603      	mov	r3, r0
 c022874:	2800      	cmp	r0, #0
 c022876:	f040 8083 	bne.w	c022980 <mbedtls_ecp_mul_restartable+0x41c>
 c02287a:	4621      	mov	r1, r4
 c02287c:	a82a      	add	r0, sp, #168	; 0xa8
 c02287e:	f7fe fc13 	bl	c0210a8 <ecp_modp>
 c022882:	4603      	mov	r3, r0
 c022884:	2800      	cmp	r0, #0
 c022886:	d17b      	bne.n	c022980 <mbedtls_ecp_mul_restartable+0x41c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &S->X, &DA,     &CB   ) ); MOD_MUL( S->X );
 c022888:	aa2a      	add	r2, sp, #168	; 0xa8
 c02288a:	a927      	add	r1, sp, #156	; 0x9c
 c02288c:	a82d      	add	r0, sp, #180	; 0xb4
 c02288e:	f7fb fd86 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c022892:	4603      	mov	r3, r0
 c022894:	2800      	cmp	r0, #0
 c022896:	d173      	bne.n	c022980 <mbedtls_ecp_mul_restartable+0x41c>
 c022898:	4621      	mov	r1, r4
 c02289a:	a82d      	add	r0, sp, #180	; 0xb4
 c02289c:	f7fe fc04 	bl	c0210a8 <ecp_modp>
 c0228a0:	4603      	mov	r3, r0
 c0228a2:	2800      	cmp	r0, #0
 c0228a4:	d16c      	bne.n	c022980 <mbedtls_ecp_mul_restartable+0x41c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->X, &S->X,   &S->X ) ); MOD_MUL( S->X );
 c0228a6:	aa2d      	add	r2, sp, #180	; 0xb4
 c0228a8:	4611      	mov	r1, r2
 c0228aa:	4610      	mov	r0, r2
 c0228ac:	f7fb fde8 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c0228b0:	4603      	mov	r3, r0
 c0228b2:	2800      	cmp	r0, #0
 c0228b4:	d164      	bne.n	c022980 <mbedtls_ecp_mul_restartable+0x41c>
 c0228b6:	4621      	mov	r1, r4
 c0228b8:	a82d      	add	r0, sp, #180	; 0xb4
 c0228ba:	f7fe fbf5 	bl	c0210a8 <ecp_modp>
 c0228be:	4603      	mov	r3, r0
 c0228c0:	2800      	cmp	r0, #0
 c0228c2:	d15d      	bne.n	c022980 <mbedtls_ecp_mul_restartable+0x41c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S->Z, &DA,     &CB   ) ); MOD_SUB( S->Z );
 c0228c4:	aa2a      	add	r2, sp, #168	; 0xa8
 c0228c6:	a927      	add	r1, sp, #156	; 0x9c
 c0228c8:	a833      	add	r0, sp, #204	; 0xcc
 c0228ca:	f7fb fd8a 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c0228ce:	4603      	mov	r3, r0
 c0228d0:	2800      	cmp	r0, #0
 c0228d2:	d155      	bne.n	c022980 <mbedtls_ecp_mul_restartable+0x41c>
 c0228d4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 c0228d6:	2b00      	cmp	r3, #0
 c0228d8:	f2c0 80ba 	blt.w	c022a50 <mbedtls_ecp_mul_restartable+0x4ec>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, &S->Z,   &S->Z ) ); MOD_MUL( S->Z );
 c0228dc:	aa33      	add	r2, sp, #204	; 0xcc
 c0228de:	4611      	mov	r1, r2
 c0228e0:	4610      	mov	r0, r2
 c0228e2:	f7fb fdcd 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c0228e6:	4603      	mov	r3, r0
 c0228e8:	2800      	cmp	r0, #0
 c0228ea:	d149      	bne.n	c022980 <mbedtls_ecp_mul_restartable+0x41c>
 c0228ec:	4621      	mov	r1, r4
 c0228ee:	a833      	add	r0, sp, #204	; 0xcc
 c0228f0:	f7fe fbda 	bl	c0210a8 <ecp_modp>
 c0228f4:	4603      	mov	r3, r0
 c0228f6:	2800      	cmp	r0, #0
 c0228f8:	d142      	bne.n	c022980 <mbedtls_ecp_mul_restartable+0x41c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, d,       &S->Z ) ); MOD_MUL( S->Z );
 c0228fa:	aa33      	add	r2, sp, #204	; 0xcc
 c0228fc:	a90f      	add	r1, sp, #60	; 0x3c
 c0228fe:	4610      	mov	r0, r2
 c022900:	f7fb fdbe 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c022904:	4603      	mov	r3, r0
 c022906:	2800      	cmp	r0, #0
 c022908:	d13a      	bne.n	c022980 <mbedtls_ecp_mul_restartable+0x41c>
 c02290a:	4621      	mov	r1, r4
 c02290c:	a833      	add	r0, sp, #204	; 0xcc
 c02290e:	f7fe fbcb 	bl	c0210a8 <ecp_modp>
 c022912:	4603      	mov	r3, r0
 c022914:	bba0      	cbnz	r0, c022980 <mbedtls_ecp_mul_restartable+0x41c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->X, &AA,     &BB   ) ); MOD_MUL( R->X );
 c022916:	aa1b      	add	r2, sp, #108	; 0x6c
 c022918:	a915      	add	r1, sp, #84	; 0x54
 c02291a:	4630      	mov	r0, r6
 c02291c:	f7fb fdb0 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c022920:	4603      	mov	r3, r0
 c022922:	bb68      	cbnz	r0, c022980 <mbedtls_ecp_mul_restartable+0x41c>
 c022924:	4621      	mov	r1, r4
 c022926:	4630      	mov	r0, r6
 c022928:	f7fe fbbe 	bl	c0210a8 <ecp_modp>
 c02292c:	4603      	mov	r3, r0
 c02292e:	bb38      	cbnz	r0, c022980 <mbedtls_ecp_mul_restartable+0x41c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &grp->A, &E    ) ); MOD_MUL( R->Z );
 c022930:	aa1e      	add	r2, sp, #120	; 0x78
 c022932:	f104 0110 	add.w	r1, r4, #16
 c022936:	4628      	mov	r0, r5
 c022938:	f7fb fda2 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c02293c:	4603      	mov	r3, r0
 c02293e:	b9f8      	cbnz	r0, c022980 <mbedtls_ecp_mul_restartable+0x41c>
 c022940:	4621      	mov	r1, r4
 c022942:	4628      	mov	r0, r5
 c022944:	f7fe fbb0 	bl	c0210a8 <ecp_modp>
 c022948:	4603      	mov	r3, r0
 c02294a:	b9c8      	cbnz	r0, c022980 <mbedtls_ecp_mul_restartable+0x41c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &R->Z, &BB,     &R->Z ) ); MOD_ADD( R->Z );
 c02294c:	462a      	mov	r2, r5
 c02294e:	a91b      	add	r1, sp, #108	; 0x6c
 c022950:	4628      	mov	r0, r5
 c022952:	f7fb fd24 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c022956:	4603      	mov	r3, r0
 c022958:	b990      	cbnz	r0, c022980 <mbedtls_ecp_mul_restartable+0x41c>
 c02295a:	4639      	mov	r1, r7
 c02295c:	4628      	mov	r0, r5
 c02295e:	f7fb fc29 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c022962:	2800      	cmp	r0, #0
 c022964:	f280 8081 	bge.w	c022a6a <mbedtls_ecp_mul_restartable+0x506>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &E,      &R->Z ) ); MOD_MUL( R->Z );
 c022968:	462a      	mov	r2, r5
 c02296a:	a91e      	add	r1, sp, #120	; 0x78
 c02296c:	4628      	mov	r0, r5
 c02296e:	f7fb fd87 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c022972:	4603      	mov	r3, r0
 c022974:	b920      	cbnz	r0, c022980 <mbedtls_ecp_mul_restartable+0x41c>
 c022976:	4621      	mov	r1, r4
 c022978:	4628      	mov	r0, r5
 c02297a:	f7fe fb95 	bl	c0210a8 <ecp_modp>
 c02297e:	4603      	mov	r3, r0
    mbedtls_mpi_free( &A ); mbedtls_mpi_free( &AA ); mbedtls_mpi_free( &B );
 c022980:	a812      	add	r0, sp, #72	; 0x48
 c022982:	9308      	str	r3, [sp, #32]
 c022984:	f7fb f86a 	bl	c01da5c <mbedtls_mpi_free>
 c022988:	a815      	add	r0, sp, #84	; 0x54
 c02298a:	f7fb f867 	bl	c01da5c <mbedtls_mpi_free>
 c02298e:	a818      	add	r0, sp, #96	; 0x60
 c022990:	f7fb f864 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &BB ); mbedtls_mpi_free( &E ); mbedtls_mpi_free( &C );
 c022994:	a81b      	add	r0, sp, #108	; 0x6c
 c022996:	f7fb f861 	bl	c01da5c <mbedtls_mpi_free>
 c02299a:	a81e      	add	r0, sp, #120	; 0x78
 c02299c:	f7fb f85e 	bl	c01da5c <mbedtls_mpi_free>
 c0229a0:	a821      	add	r0, sp, #132	; 0x84
 c0229a2:	f7fb f85b 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &D ); mbedtls_mpi_free( &DA ); mbedtls_mpi_free( &CB );
 c0229a6:	a824      	add	r0, sp, #144	; 0x90
 c0229a8:	f7fb f858 	bl	c01da5c <mbedtls_mpi_free>
 c0229ac:	a827      	add	r0, sp, #156	; 0x9c
 c0229ae:	f7fb f855 	bl	c01da5c <mbedtls_mpi_free>
 c0229b2:	a82a      	add	r0, sp, #168	; 0xa8
 c0229b4:	f7fb f852 	bl	c01da5c <mbedtls_mpi_free>
        MBEDTLS_MPI_CHK( ecp_double_add_mxz( grp, R, &RP, R, &RP, &PX ) );
 c0229b8:	9b08      	ldr	r3, [sp, #32]
 c0229ba:	2b00      	cmp	r3, #0
 c0229bc:	f47f ae49 	bne.w	c022652 <mbedtls_ecp_mul_restartable+0xee>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );
 c0229c0:	4652      	mov	r2, sl
 c0229c2:	a92d      	add	r1, sp, #180	; 0xb4
 c0229c4:	4630      	mov	r0, r6
 c0229c6:	f7fb f930 	bl	c01dc2a <mbedtls_mpi_safe_cond_swap>
 c0229ca:	4603      	mov	r3, r0
 c0229cc:	2800      	cmp	r0, #0
 c0229ce:	f47f ae40 	bne.w	c022652 <mbedtls_ecp_mul_restartable+0xee>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );
 c0229d2:	4652      	mov	r2, sl
 c0229d4:	a933      	add	r1, sp, #204	; 0xcc
 c0229d6:	4628      	mov	r0, r5
 c0229d8:	f7fb f927 	bl	c01dc2a <mbedtls_mpi_safe_cond_swap>
 c0229dc:	f108 38ff 	add.w	r8, r8, #4294967295
 c0229e0:	4603      	mov	r3, r0
 c0229e2:	2800      	cmp	r0, #0
 c0229e4:	f43f ae10 	beq.w	c022608 <mbedtls_ecp_mul_restartable+0xa4>
 c0229e8:	e633      	b.n	c022652 <mbedtls_ecp_mul_restartable+0xee>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &A,    &P->X,   &P->Z ) ); MOD_ADD( A    );
 c0229ea:	a912      	add	r1, sp, #72	; 0x48
 c0229ec:	463a      	mov	r2, r7
 c0229ee:	4608      	mov	r0, r1
 c0229f0:	f7fb fc97 	bl	c01e322 <mbedtls_mpi_sub_abs>
 c0229f4:	e6bb      	b.n	c02276e <mbedtls_ecp_mul_restartable+0x20a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &B,    &P->X,   &P->Z ) ); MOD_SUB( B    );
 c0229f6:	2100      	movs	r1, #0
 c0229f8:	4658      	mov	r0, fp
 c0229fa:	f7fb fc1b 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c0229fe:	2800      	cmp	r0, #0
 c022a00:	f43f aee0 	beq.w	c0227c4 <mbedtls_ecp_mul_restartable+0x260>
 c022a04:	463a      	mov	r2, r7
 c022a06:	4659      	mov	r1, fp
 c022a08:	4658      	mov	r0, fp
 c022a0a:	f7fb fcc8 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c022a0e:	e6d1      	b.n	c0227b4 <mbedtls_ecp_mul_restartable+0x250>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &E,    &AA,     &BB   ) ); MOD_SUB( E    );
 c022a10:	2100      	movs	r1, #0
 c022a12:	4658      	mov	r0, fp
 c022a14:	f7fb fc0e 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c022a18:	2800      	cmp	r0, #0
 c022a1a:	f43f aef3 	beq.w	c022804 <mbedtls_ecp_mul_restartable+0x2a0>
 c022a1e:	463a      	mov	r2, r7
 c022a20:	4659      	mov	r1, fp
 c022a22:	4658      	mov	r0, fp
 c022a24:	f7fb fcbb 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c022a28:	e6e4      	b.n	c0227f4 <mbedtls_ecp_mul_restartable+0x290>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &C,    &Q->X,   &Q->Z ) ); MOD_ADD( C    );
 c022a2a:	463a      	mov	r2, r7
 c022a2c:	4659      	mov	r1, fp
 c022a2e:	4658      	mov	r0, fp
 c022a30:	f7fb fc77 	bl	c01e322 <mbedtls_mpi_sub_abs>
 c022a34:	e6ed      	b.n	c022812 <mbedtls_ecp_mul_restartable+0x2ae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &D,    &Q->X,   &Q->Z ) ); MOD_SUB( D    );
 c022a36:	2100      	movs	r1, #0
 c022a38:	4658      	mov	r0, fp
 c022a3a:	f7fb fbfb 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c022a3e:	2800      	cmp	r0, #0
 c022a40:	f43f af01 	beq.w	c022846 <mbedtls_ecp_mul_restartable+0x2e2>
 c022a44:	463a      	mov	r2, r7
 c022a46:	4659      	mov	r1, fp
 c022a48:	4658      	mov	r0, fp
 c022a4a:	f7fb fca8 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c022a4e:	e6f2      	b.n	c022836 <mbedtls_ecp_mul_restartable+0x2d2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S->Z, &DA,     &CB   ) ); MOD_SUB( S->Z );
 c022a50:	2100      	movs	r1, #0
 c022a52:	a833      	add	r0, sp, #204	; 0xcc
 c022a54:	f7fb fbee 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c022a58:	2800      	cmp	r0, #0
 c022a5a:	f43f af3f 	beq.w	c0228dc <mbedtls_ecp_mul_restartable+0x378>
 c022a5e:	a933      	add	r1, sp, #204	; 0xcc
 c022a60:	463a      	mov	r2, r7
 c022a62:	4608      	mov	r0, r1
 c022a64:	f7fb fc9b 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c022a68:	e731      	b.n	c0228ce <mbedtls_ecp_mul_restartable+0x36a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &R->Z, &BB,     &R->Z ) ); MOD_ADD( R->Z );
 c022a6a:	463a      	mov	r2, r7
 c022a6c:	4629      	mov	r1, r5
 c022a6e:	4628      	mov	r0, r5
 c022a70:	f7fb fc57 	bl	c01e322 <mbedtls_mpi_sub_abs>
 c022a74:	e76f      	b.n	c022956 <mbedtls_ecp_mul_restartable+0x3f2>
    ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 c022a76:	4b8f      	ldr	r3, [pc, #572]	; (c022cb4 <mbedtls_ecp_mul_restartable+0x750>)
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
 c022a78:	4620      	mov	r0, r4
 c022a7a:	9308      	str	r3, [sp, #32]
 c022a7c:	f7fe ff6a 	bl	c021954 <mbedtls_ecp_get_type>
 c022a80:	2801      	cmp	r0, #1
 c022a82:	9b08      	ldr	r3, [sp, #32]
 c022a84:	f47f adf0 	bne.w	c022668 <mbedtls_ecp_mul_restartable+0x104>
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 c022a88:	f104 0134 	add.w	r1, r4, #52	; 0x34
 c022a8c:	f109 000c 	add.w	r0, r9, #12
 c022a90:	f7fb fb90 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c022a94:	b940      	cbnz	r0, c022aa8 <mbedtls_ecp_mul_restartable+0x544>
               mbedtls_mpi_cmp_mpi( &P->X, &grp->G.X ) == 0 );
 c022a96:	f104 0128 	add.w	r1, r4, #40	; 0x28
 c022a9a:	4648      	mov	r0, r9
 c022a9c:	f7fb fb8a 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 c022aa0:	fab0 f380 	clz	r3, r0
 c022aa4:	095b      	lsrs	r3, r3, #5
 c022aa6:	9307      	str	r3, [sp, #28]
    w = ecp_pick_window_size( grp, p_eq_g );
 c022aa8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    if( p_eq_g )
 c022aaa:	9a07      	ldr	r2, [sp, #28]
    w = grp->nbits >= 384 ? 5 : 4;
 c022aac:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 c022ab0:	bf2c      	ite	cs
 c022ab2:	f04f 0805 	movcs.w	r8, #5
 c022ab6:	f04f 0804 	movcc.w	r8, #4
    if( p_eq_g )
 c022aba:	b10a      	cbz	r2, c022ac0 <mbedtls_ecp_mul_restartable+0x55c>
        w++;
 c022abc:	f108 0801 	add.w	r8, r8, #1
        w = 2;
 c022ac0:	4543      	cmp	r3, r8
 c022ac2:	bf98      	it	ls
 c022ac4:	f04f 0802 	movls.w	r8, #2
    T_size = 1U << ( w - 1 );
 c022ac8:	2201      	movs	r2, #1
    d = ( grp->nbits + w - 1 ) / w;
 c022aca:	3b01      	subs	r3, #1
 c022acc:	4443      	add	r3, r8
 c022ace:	fbb3 f3f8 	udiv	r3, r3, r8
    T_size = 1U << ( w - 1 );
 c022ad2:	f108 37ff 	add.w	r7, r8, #4294967295
 c022ad6:	40ba      	lsls	r2, r7
 c022ad8:	920b      	str	r2, [sp, #44]	; 0x2c
 c022ada:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    d = ( grp->nbits + w - 1 ) / w;
 c022ade:	9309      	str	r3, [sp, #36]	; 0x24
    if( p_eq_g && grp->T != NULL )
 c022ae0:	9b07      	ldr	r3, [sp, #28]
    T_size = 1U << ( w - 1 );
 c022ae2:	9208      	str	r2, [sp, #32]
    if( p_eq_g && grp->T != NULL )
 c022ae4:	b113      	cbz	r3, c022aec <mbedtls_ecp_mul_restartable+0x588>
 c022ae6:	6f65      	ldr	r5, [r4, #116]	; 0x74
 c022ae8:	2d00      	cmp	r5, #0
 c022aea:	d179      	bne.n	c022be0 <mbedtls_ecp_mul_restartable+0x67c>
        T = mbedtls_calloc( T_size, sizeof( mbedtls_ecp_point ) );
 c022aec:	2124      	movs	r1, #36	; 0x24
 c022aee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 c022af0:	f003 fe04 	bl	c0266fc <mbedtls_calloc>
        if( T == NULL )
 c022af4:	4605      	mov	r5, r0
 c022af6:	2800      	cmp	r0, #0
 c022af8:	f000 80d7 	beq.w	c022caa <mbedtls_ecp_mul_restartable+0x746>
 c022afc:	f04f 0a00 	mov.w	sl, #0
            mbedtls_ecp_point_init( &T[i] );
 c022b00:	f04f 0b24 	mov.w	fp, #36	; 0x24
 c022b04:	fb0b 500a 	mla	r0, fp, sl, r5
 c022b08:	f7fe ff2e 	bl	c021968 <mbedtls_ecp_point_init>
 c022b0c:	f10a 0a01 	add.w	sl, sl, #1
        for( i = 0; i < T_size; i++ )
 c022b10:	9a08      	ldr	r2, [sp, #32]
 c022b12:	fa5f f38a 	uxtb.w	r3, sl
 c022b16:	429a      	cmp	r2, r3
 c022b18:	d8f4      	bhi.n	c022b04 <mbedtls_ecp_mul_restartable+0x5a0>
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &T[0], P ) );
 c022b1a:	4649      	mov	r1, r9
 c022b1c:	4628      	mov	r0, r5
 c022b1e:	f7fe ffa5 	bl	c021a6c <mbedtls_ecp_copy>
 c022b22:	4603      	mov	r3, r0
 c022b24:	2800      	cmp	r0, #0
 c022b26:	d17e      	bne.n	c022c26 <mbedtls_ecp_mul_restartable+0x6c2>
    for( ; j < d * ( w - 1 ); j++ )
 c022b28:	9a09      	ldr	r2, [sp, #36]	; 0x24
        j = 0;
 c022b2a:	4683      	mov	fp, r0
    for( ; j < d * ( w - 1 ); j++ )
 c022b2c:	fb02 fa07 	mul.w	sl, r2, r7
 c022b30:	f04f 0901 	mov.w	r9, #1
        cur = T + i;
 c022b34:	2724      	movs	r7, #36	; 0x24
    for( ; j < d * ( w - 1 ); j++ )
 c022b36:	45d3      	cmp	fp, sl
 c022b38:	d163      	bne.n	c022c02 <mbedtls_ecp_mul_restartable+0x69e>
 c022b3a:	2200      	movs	r2, #0
    for( i = 1; i < T_size; i <<= 1 )
 c022b3c:	2301      	movs	r3, #1
        TT[j++] = T + i;
 c022b3e:	a92d      	add	r1, sp, #180	; 0xb4
 c022b40:	eb03 00c3 	add.w	r0, r3, r3, lsl #3
 c022b44:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 c022b48:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
    for( i = 1; i < T_size; i <<= 1 )
 c022b4c:	005b      	lsls	r3, r3, #1
 c022b4e:	9808      	ldr	r0, [sp, #32]
 c022b50:	b2db      	uxtb	r3, r3
 c022b52:	4298      	cmp	r0, r3
 c022b54:	f102 0201 	add.w	r2, r2, #1
 c022b58:	d8f2      	bhi.n	c022b40 <mbedtls_ecp_mul_restartable+0x5dc>
    if( T_size < 2 )
 c022b5a:	2a01      	cmp	r2, #1
 c022b5c:	f040 8092 	bne.w	c022c84 <mbedtls_ecp_mul_restartable+0x720>
        return( ecp_normalize_jac( grp, *T ) );
 c022b60:	992d      	ldr	r1, [sp, #180]	; 0xb4
 c022b62:	4620      	mov	r0, r4
 c022b64:	f7fe fae6 	bl	c021134 <ecp_normalize_jac>
 c022b68:	4603      	mov	r3, r0
    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
 c022b6a:	2800      	cmp	r0, #0
 c022b6c:	d15b      	bne.n	c022c26 <mbedtls_ecp_mul_restartable+0x6c2>
    for( i = 1; i < T_size; i <<= 1 )
 c022b6e:	2701      	movs	r7, #1
 c022b70:	f06f 0b23 	mvn.w	fp, #35	; 0x23
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
 c022b74:	eb07 03c7 	add.w	r3, r7, r7, lsl #3
 c022b78:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 c022b7c:	930d      	str	r3, [sp, #52]	; 0x34
 c022b7e:	2348      	movs	r3, #72	; 0x48
        j = i;
 c022b80:	46b9      	mov	r9, r7
 c022b82:	fb13 ba07 	smlabb	sl, r3, r7, fp
 c022b86:	fb0b f307 	mul.w	r3, fp, r7
 c022b8a:	44aa      	add	sl, r5
 c022b8c:	930c      	str	r3, [sp, #48]	; 0x30
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
 c022b8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 c022b92:	4651      	mov	r1, sl
 c022b94:	4452      	add	r2, sl
 c022b96:	4620      	mov	r0, r4
 c022b98:	f7fe ff96 	bl	c021ac8 <ecp_add_mixed>
 c022b9c:	f109 39ff 	add.w	r9, r9, #4294967295
 c022ba0:	f1aa 0a24 	sub.w	sl, sl, #36	; 0x24
 c022ba4:	4603      	mov	r3, r0
 c022ba6:	2800      	cmp	r0, #0
 c022ba8:	d13d      	bne.n	c022c26 <mbedtls_ecp_mul_restartable+0x6c2>
        while( j-- )
 c022baa:	f1b9 0f00 	cmp.w	r9, #0
 c022bae:	d1ee      	bne.n	c022b8e <mbedtls_ecp_mul_restartable+0x62a>
    for( i = 1; i < T_size; i <<= 1 )
 c022bb0:	007f      	lsls	r7, r7, #1
 c022bb2:	9b08      	ldr	r3, [sp, #32]
 c022bb4:	b2ff      	uxtb	r7, r7
 c022bb6:	42bb      	cmp	r3, r7
 c022bb8:	d8dc      	bhi.n	c022b74 <mbedtls_ecp_mul_restartable+0x610>
        TT[j] = T + j + 1;
 c022bba:	2324      	movs	r3, #36	; 0x24
    for( j = 0; j + 1 < T_size; j++ )
 c022bbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 c022bbe:	f109 0701 	add.w	r7, r9, #1
 c022bc2:	42ba      	cmp	r2, r7
 c022bc4:	d162      	bne.n	c022c8c <mbedtls_ecp_mul_restartable+0x728>
    if( T_size < 2 )
 c022bc6:	f1b9 0f01 	cmp.w	r9, #1
 c022bca:	d168      	bne.n	c022c9e <mbedtls_ecp_mul_restartable+0x73a>
        return( ecp_normalize_jac( grp, *T ) );
 c022bcc:	992d      	ldr	r1, [sp, #180]	; 0xb4
 c022bce:	4620      	mov	r0, r4
 c022bd0:	f7fe fab0 	bl	c021134 <ecp_normalize_jac>
 c022bd4:	4603      	mov	r3, r0
        MBEDTLS_MPI_CHK( ecp_precompute_comb( grp, T, P, w, d, rs_ctx ) );
 c022bd6:	bb30      	cbnz	r0, c022c26 <mbedtls_ecp_mul_restartable+0x6c2>
        if( p_eq_g )
 c022bd8:	9b07      	ldr	r3, [sp, #28]
 c022bda:	b10b      	cbz	r3, c022be0 <mbedtls_ecp_mul_restartable+0x67c>
            grp->T_size = T_size;
 c022bdc:	e9c4 571d 	strd	r5, r7, [r4, #116]	; 0x74
    MBEDTLS_MPI_CHK( ecp_mul_comb_after_precomp( grp, R, m,
 c022be0:	9b57      	ldr	r3, [sp, #348]	; 0x15c
 c022be2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 c022be4:	9304      	str	r3, [sp, #16]
 c022be6:	9b56      	ldr	r3, [sp, #344]	; 0x158
 c022be8:	4631      	mov	r1, r6
 c022bea:	9303      	str	r3, [sp, #12]
 c022bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c022bee:	4620      	mov	r0, r4
 c022bf0:	e9cd 8301 	strd	r8, r3, [sp, #4]
 c022bf4:	9b08      	ldr	r3, [sp, #32]
 c022bf6:	9300      	str	r3, [sp, #0]
 c022bf8:	462b      	mov	r3, r5
 c022bfa:	f7ff f95f 	bl	c021ebc <ecp_mul_comb_after_precomp.isra.10>
 c022bfe:	4603      	mov	r3, r0
 c022c00:	e011      	b.n	c022c26 <mbedtls_ecp_mul_restartable+0x6c2>
        i = 1U << ( j / d );
 c022c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
        if( j % d == 0 )
 c022c04:	9809      	ldr	r0, [sp, #36]	; 0x24
        i = 1U << ( j / d );
 c022c06:	fbbb f3f3 	udiv	r3, fp, r3
 c022c0a:	fa09 f103 	lsl.w	r1, r9, r3
        if( j % d == 0 )
 c022c0e:	fb00 b313 	mls	r3, r0, r3, fp
        cur = T + i;
 c022c12:	b2c9      	uxtb	r1, r1
 c022c14:	fb07 5201 	mla	r2, r7, r1, r5
        if( j % d == 0 )
 c022c18:	b31b      	cbz	r3, c022c62 <mbedtls_ecp_mul_restartable+0x6fe>
        MBEDTLS_MPI_CHK( ecp_double_jac( grp, cur, cur ) );
 c022c1a:	4611      	mov	r1, r2
 c022c1c:	4620      	mov	r0, r4
 c022c1e:	f7fe fae6 	bl	c0211ee <ecp_double_jac>
 c022c22:	4603      	mov	r3, r0
 c022c24:	b358      	cbz	r0, c022c7e <mbedtls_ecp_mul_restartable+0x71a>
    if( T == grp->T )
 c022c26:	6f62      	ldr	r2, [r4, #116]	; 0x74
 c022c28:	42aa      	cmp	r2, r5
 c022c2a:	d011      	beq.n	c022c50 <mbedtls_ecp_mul_restartable+0x6ec>
    if( T != NULL )
 c022c2c:	b185      	cbz	r5, c022c50 <mbedtls_ecp_mul_restartable+0x6ec>
 c022c2e:	2400      	movs	r4, #0
            mbedtls_ecp_point_free( &T[i] );
 c022c30:	2724      	movs	r7, #36	; 0x24
 c022c32:	fb07 5004 	mla	r0, r7, r4, r5
 c022c36:	9307      	str	r3, [sp, #28]
 c022c38:	3401      	adds	r4, #1
 c022c3a:	f7fe fed2 	bl	c0219e2 <mbedtls_ecp_point_free>
        for( i = 0; i < T_size; i++ )
 c022c3e:	9b08      	ldr	r3, [sp, #32]
 c022c40:	b2e2      	uxtb	r2, r4
 c022c42:	4293      	cmp	r3, r2
 c022c44:	9b07      	ldr	r3, [sp, #28]
 c022c46:	d8f4      	bhi.n	c022c32 <mbedtls_ecp_mul_restartable+0x6ce>
        mbedtls_free( T );
 c022c48:	4628      	mov	r0, r5
 c022c4a:	f003 fd5d 	bl	c026708 <mbedtls_free>
 c022c4e:	9b07      	ldr	r3, [sp, #28]
    if( ret != 0 )
 c022c50:	2b00      	cmp	r3, #0
 c022c52:	f43f ad09 	beq.w	c022668 <mbedtls_ecp_mul_restartable+0x104>
        mbedtls_ecp_point_free( R );
 c022c56:	4630      	mov	r0, r6
 c022c58:	9307      	str	r3, [sp, #28]
 c022c5a:	f7fe fec2 	bl	c0219e2 <mbedtls_ecp_point_free>
cleanup:
 c022c5e:	9b07      	ldr	r3, [sp, #28]
    return( ret );
 c022c60:	e502      	b.n	c022668 <mbedtls_ecp_mul_restartable+0x104>
            MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );
 c022c62:	0849      	lsrs	r1, r1, #1
 c022c64:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 c022c68:	4610      	mov	r0, r2
 c022c6a:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 c022c6e:	920c      	str	r2, [sp, #48]	; 0x30
 c022c70:	f7fe fefc 	bl	c021a6c <mbedtls_ecp_copy>
 c022c74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 c022c76:	4603      	mov	r3, r0
 c022c78:	2800      	cmp	r0, #0
 c022c7a:	d0ce      	beq.n	c022c1a <mbedtls_ecp_mul_restartable+0x6b6>
 c022c7c:	e7d3      	b.n	c022c26 <mbedtls_ecp_mul_restartable+0x6c2>
    for( ; j < d * ( w - 1 ); j++ )
 c022c7e:	f10b 0b01 	add.w	fp, fp, #1
 c022c82:	e758      	b.n	c022b36 <mbedtls_ecp_mul_restartable+0x5d2>
 c022c84:	4620      	mov	r0, r4
 c022c86:	f7fe fcef 	bl	c021668 <ecp_normalize_jac_many.part.3>
 c022c8a:	e76d      	b.n	c022b68 <mbedtls_ecp_mul_restartable+0x604>
        TT[j] = T + j + 1;
 c022c8c:	fb03 5107 	mla	r1, r3, r7, r5
 c022c90:	aa2d      	add	r2, sp, #180	; 0xb4
 c022c92:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 c022c96:	f842 1c04 	str.w	r1, [r2, #-4]
 c022c9a:	46b9      	mov	r9, r7
 c022c9c:	e78e      	b.n	c022bbc <mbedtls_ecp_mul_restartable+0x658>
 c022c9e:	464a      	mov	r2, r9
 c022ca0:	a92d      	add	r1, sp, #180	; 0xb4
 c022ca2:	4620      	mov	r0, r4
 c022ca4:	f7fe fce0 	bl	c021668 <ecp_normalize_jac_many.part.3>
 c022ca8:	e794      	b.n	c022bd4 <mbedtls_ecp_mul_restartable+0x670>
            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
 c022caa:	4b03      	ldr	r3, [pc, #12]	; (c022cb8 <mbedtls_ecp_mul_restartable+0x754>)
 c022cac:	e7bb      	b.n	c022c26 <mbedtls_ecp_mul_restartable+0x6c2>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 c022cae:	4b03      	ldr	r3, [pc, #12]	; (c022cbc <mbedtls_ecp_mul_restartable+0x758>)
 c022cb0:	e4cf      	b.n	c022652 <mbedtls_ecp_mul_restartable+0xee>
 c022cb2:	bf00      	nop
 c022cb4:	ffffb080 	.word	0xffffb080
 c022cb8:	ffffb280 	.word	0xffffb280
 c022cbc:	ffffb300 	.word	0xffffb300

0c022cc0 <mbedtls_ecp_mul>:
{
 c022cc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( mbedtls_ecp_mul_restartable( grp, R, m, P, f_rng, p_rng, NULL ) );
 c022cc2:	2400      	movs	r4, #0
 c022cc4:	9402      	str	r4, [sp, #8]
 c022cc6:	9c07      	ldr	r4, [sp, #28]
 c022cc8:	9401      	str	r4, [sp, #4]
 c022cca:	9c06      	ldr	r4, [sp, #24]
 c022ccc:	9400      	str	r4, [sp, #0]
 c022cce:	f7ff fc49 	bl	c022564 <mbedtls_ecp_mul_restartable>
}
 c022cd2:	b004      	add	sp, #16
 c022cd4:	bd10      	pop	{r4, pc}

0c022cd6 <mbedtls_ecp_mul_shortcuts>:
{
 c022cd6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 c022cda:	4607      	mov	r7, r0
 c022cdc:	460c      	mov	r4, r1
    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
 c022cde:	4610      	mov	r0, r2
 c022ce0:	2101      	movs	r1, #1
{
 c022ce2:	4615      	mov	r5, r2
 c022ce4:	461e      	mov	r6, r3
 c022ce6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
 c022cea:	f7fb faa3 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c022cee:	b930      	cbnz	r0, c022cfe <mbedtls_ecp_mul_shortcuts+0x28>
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 c022cf0:	4631      	mov	r1, r6
 c022cf2:	4620      	mov	r0, r4
}
 c022cf4:	b004      	add	sp, #16
 c022cf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 c022cfa:	f7fe beb7 	b.w	c021a6c <mbedtls_ecp_copy>
    else if( mbedtls_mpi_cmp_int( m, -1 ) == 0 )
 c022cfe:	f04f 31ff 	mov.w	r1, #4294967295
 c022d02:	4628      	mov	r0, r5
 c022d04:	f7fb fa96 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c022d08:	b990      	cbnz	r0, c022d30 <mbedtls_ecp_mul_shortcuts+0x5a>
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 c022d0a:	4631      	mov	r1, r6
 c022d0c:	4620      	mov	r0, r4
 c022d0e:	f7fe fead 	bl	c021a6c <mbedtls_ecp_copy>
 c022d12:	b9c0      	cbnz	r0, c022d46 <mbedtls_ecp_mul_shortcuts+0x70>
        if( mbedtls_mpi_cmp_int( &R->Y, 0 ) != 0 )
 c022d14:	340c      	adds	r4, #12
 c022d16:	4601      	mov	r1, r0
 c022d18:	4620      	mov	r0, r4
 c022d1a:	f7fb fa8b 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c022d1e:	b190      	cbz	r0, c022d46 <mbedtls_ecp_mul_shortcuts+0x70>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
 c022d20:	4622      	mov	r2, r4
 c022d22:	4620      	mov	r0, r4
 c022d24:	1d39      	adds	r1, r7, #4
}
 c022d26:	b004      	add	sp, #16
 c022d28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
 c022d2c:	f7fb bb59 	b.w	c01e3e2 <mbedtls_mpi_sub_mpi>
        MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, R, m, P,
 c022d30:	2300      	movs	r3, #0
 c022d32:	f8cd 8008 	str.w	r8, [sp, #8]
 c022d36:	e9cd 3300 	strd	r3, r3, [sp]
 c022d3a:	462a      	mov	r2, r5
 c022d3c:	4633      	mov	r3, r6
 c022d3e:	4621      	mov	r1, r4
 c022d40:	4638      	mov	r0, r7
 c022d42:	f7ff fc0f 	bl	c022564 <mbedtls_ecp_mul_restartable>
}
 c022d46:	b004      	add	sp, #16
 c022d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0c022d4c <mbedtls_ecp_muladd_restartable>:
{
 c022d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c022d50:	b08c      	sub	sp, #48	; 0x30
 c022d52:	4605      	mov	r5, r0
 c022d54:	460e      	mov	r6, r1
 c022d56:	4614      	mov	r4, r2
 c022d58:	4698      	mov	r8, r3
    if( mbedtls_ecp_get_type( grp ) != MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
 c022d5a:	f7fe fdfb 	bl	c021954 <mbedtls_ecp_get_type>
 c022d5e:	2801      	cmp	r0, #1
{
 c022d60:	9f14      	ldr	r7, [sp, #80]	; 0x50
    if( mbedtls_ecp_get_type( grp ) != MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
 c022d62:	d128      	bne.n	c022db6 <mbedtls_ecp_muladd_restartable+0x6a>
    mbedtls_ecp_point_init( &mP );
 c022d64:	a803      	add	r0, sp, #12
 c022d66:	f7fe fdff 	bl	c021968 <mbedtls_ecp_point_init>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pmP, m, P, rs_ctx ) );
 c022d6a:	4622      	mov	r2, r4
 c022d6c:	9700      	str	r7, [sp, #0]
 c022d6e:	4643      	mov	r3, r8
 c022d70:	a903      	add	r1, sp, #12
 c022d72:	4628      	mov	r0, r5
 c022d74:	f7ff ffaf 	bl	c022cd6 <mbedtls_ecp_mul_shortcuts>
 c022d78:	4604      	mov	r4, r0
 c022d7a:	b9a8      	cbnz	r0, c022da8 <mbedtls_ecp_muladd_restartable+0x5c>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pR,  n, Q, rs_ctx ) );
 c022d7c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 c022d80:	9700      	str	r7, [sp, #0]
 c022d82:	4631      	mov	r1, r6
 c022d84:	4628      	mov	r0, r5
 c022d86:	f7ff ffa6 	bl	c022cd6 <mbedtls_ecp_mul_shortcuts>
 c022d8a:	4604      	mov	r4, r0
 c022d8c:	b960      	cbnz	r0, c022da8 <mbedtls_ecp_muladd_restartable+0x5c>
    MBEDTLS_MPI_CHK( ecp_add_mixed( grp, pR, pmP, pR ) );
 c022d8e:	4633      	mov	r3, r6
 c022d90:	aa03      	add	r2, sp, #12
 c022d92:	4631      	mov	r1, r6
 c022d94:	4628      	mov	r0, r5
 c022d96:	f7fe fe97 	bl	c021ac8 <ecp_add_mixed>
 c022d9a:	4604      	mov	r4, r0
 c022d9c:	b920      	cbnz	r0, c022da8 <mbedtls_ecp_muladd_restartable+0x5c>
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, pR ) );
 c022d9e:	4631      	mov	r1, r6
 c022da0:	4628      	mov	r0, r5
 c022da2:	f7fe f9c7 	bl	c021134 <ecp_normalize_jac>
 c022da6:	4604      	mov	r4, r0
 c022da8:	a803      	add	r0, sp, #12
 c022daa:	f7fe fd9b 	bl	c0218e4 <mbedtls_ecp_point_free.part.5>
}
 c022dae:	4620      	mov	r0, r4
 c022db0:	b00c      	add	sp, #48	; 0x30
 c022db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 c022db6:	4c01      	ldr	r4, [pc, #4]	; (c022dbc <mbedtls_ecp_muladd_restartable+0x70>)
 c022db8:	e7f9      	b.n	c022dae <mbedtls_ecp_muladd_restartable+0x62>
 c022dba:	bf00      	nop
 c022dbc:	ffffb180 	.word	0xffffb180

0c022dc0 <mbedtls_ecp_gen_privkey>:
 */
int mbedtls_ecp_gen_privkey( const mbedtls_ecp_group *grp,
                     mbedtls_mpi *d,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 c022dc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ECP_VALIDATE_RET( grp   != NULL );
    ECP_VALIDATE_RET( d     != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    n_size = ( grp->nbits + 7 ) / 8;
 c022dc4:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
{
 c022dc6:	4605      	mov	r5, r0
 c022dc8:	460c      	mov	r4, r1
 c022dca:	4691      	mov	r9, r2
 c022dcc:	469a      	mov	sl, r3

#if defined(ECP_MONTGOMERY)
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_MONTGOMERY )
 c022dce:	f7fe fdc1 	bl	c021954 <mbedtls_ecp_get_type>
    n_size = ( grp->nbits + 7 ) / 8;
 c022dd2:	3607      	adds	r6, #7
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_MONTGOMERY )
 c022dd4:	2802      	cmp	r0, #2
    n_size = ( grp->nbits + 7 ) / 8;
 c022dd6:	ea4f 08d6 	mov.w	r8, r6, lsr #3
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_MONTGOMERY )
 c022dda:	d16a      	bne.n	c022eb2 <mbedtls_ecp_gen_privkey+0xf2>
    {
        /* [M225] page 5 */
        size_t b;

        do {
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
 c022ddc:	4653      	mov	r3, sl
 c022dde:	464a      	mov	r2, r9
 c022de0:	4641      	mov	r1, r8
 c022de2:	4620      	mov	r0, r4
 c022de4:	f7fc f939 	bl	c01f05a <mbedtls_mpi_fill_random>
 c022de8:	4607      	mov	r7, r0
 c022dea:	2800      	cmp	r0, #0
 c022dec:	d15d      	bne.n	c022eaa <mbedtls_ecp_gen_privkey+0xea>
        } while( mbedtls_mpi_bitlen( d ) == 0);
 c022dee:	4620      	mov	r0, r4
 c022df0:	f7fa ffcc 	bl	c01dd8c <mbedtls_mpi_bitlen>
 c022df4:	2800      	cmp	r0, #0
 c022df6:	d0f1      	beq.n	c022ddc <mbedtls_ecp_gen_privkey+0x1c>

        /* Make sure the most significant bit is nbits */
        b = mbedtls_mpi_bitlen( d ) - 1; /* mbedtls_mpi_bitlen is one-based */
 c022df8:	4620      	mov	r0, r4
 c022dfa:	f7fa ffc7 	bl	c01dd8c <mbedtls_mpi_bitlen>
        if( b > grp->nbits )
 c022dfe:	6de9      	ldr	r1, [r5, #92]	; 0x5c
        b = mbedtls_mpi_bitlen( d ) - 1; /* mbedtls_mpi_bitlen is one-based */
 c022e00:	3801      	subs	r0, #1
        if( b > grp->nbits )
 c022e02:	4281      	cmp	r1, r0
 c022e04:	d244      	bcs.n	c022e90 <mbedtls_ecp_gen_privkey+0xd0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, b - grp->nbits ) );
 c022e06:	1a41      	subs	r1, r0, r1
 c022e08:	4620      	mov	r0, r4
 c022e0a:	f7fb f903 	bl	c01e014 <mbedtls_mpi_shift_r>
 c022e0e:	4607      	mov	r7, r0
 c022e10:	2800      	cmp	r0, #0
 c022e12:	d14a      	bne.n	c022eaa <mbedtls_ecp_gen_privkey+0xea>
        else
            MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, grp->nbits, 1 ) );

        /* Make sure the last two bits are unset for Curve448, three bits for
           Curve25519 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 0, 0 ) );
 c022e14:	2200      	movs	r2, #0
 c022e16:	4620      	mov	r0, r4
 c022e18:	4611      	mov	r1, r2
 c022e1a:	f7fa ff73 	bl	c01dd04 <mbedtls_mpi_set_bit>
 c022e1e:	4607      	mov	r7, r0
 c022e20:	2800      	cmp	r0, #0
 c022e22:	d142      	bne.n	c022eaa <mbedtls_ecp_gen_privkey+0xea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 1, 0 ) );
 c022e24:	4602      	mov	r2, r0
 c022e26:	2101      	movs	r1, #1
 c022e28:	4620      	mov	r0, r4
 c022e2a:	f7fa ff6b 	bl	c01dd04 <mbedtls_mpi_set_bit>
 c022e2e:	2800      	cmp	r0, #0
 c022e30:	d141      	bne.n	c022eb6 <mbedtls_ecp_gen_privkey+0xf6>
        if( grp->nbits == 254 )
 c022e32:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 c022e34:	2afe      	cmp	r2, #254	; 0xfe
 c022e36:	d030      	beq.n	c022e9a <mbedtls_ecp_gen_privkey+0xda>
        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 1, 0 ) );
 c022e38:	2700      	movs	r7, #0
        }
    }
#endif /* ECP_MONTGOMERY */

#if defined(ECP_SHORTWEIERSTRASS)
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
 c022e3a:	4628      	mov	r0, r5
 c022e3c:	f7fe fd8a 	bl	c021954 <mbedtls_ecp_get_type>
 c022e40:	2801      	cmp	r0, #1
 c022e42:	d132      	bne.n	c022eaa <mbedtls_ecp_gen_privkey+0xea>
 c022e44:	f04f 0b1f 	mov.w	fp, #31
             */
            if( ++count > 30 )
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
        }
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
 c022e48:	f105 034c 	add.w	r3, r5, #76	; 0x4c
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
 c022e4c:	f026 0607 	bic.w	r6, r6, #7
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
 c022e50:	9301      	str	r3, [sp, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
 c022e52:	4653      	mov	r3, sl
 c022e54:	464a      	mov	r2, r9
 c022e56:	4641      	mov	r1, r8
 c022e58:	4620      	mov	r0, r4
 c022e5a:	f7fc f8fe 	bl	c01f05a <mbedtls_mpi_fill_random>
 c022e5e:	4607      	mov	r7, r0
 c022e60:	bb18      	cbnz	r0, c022eaa <mbedtls_ecp_gen_privkey+0xea>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
 c022e62:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 c022e64:	4620      	mov	r0, r4
 c022e66:	1a71      	subs	r1, r6, r1
 c022e68:	f7fb f8d4 	bl	c01e014 <mbedtls_mpi_shift_r>
 c022e6c:	4607      	mov	r7, r0
 c022e6e:	b9e0      	cbnz	r0, c022eaa <mbedtls_ecp_gen_privkey+0xea>
            if( ++count > 30 )
 c022e70:	f1bb 0b01 	subs.w	fp, fp, #1
 c022e74:	d021      	beq.n	c022eba <mbedtls_ecp_gen_privkey+0xfa>
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 c022e76:	2101      	movs	r1, #1
 c022e78:	4620      	mov	r0, r4
 c022e7a:	f7fb f9db 	bl	c01e234 <mbedtls_mpi_cmp_int>
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
 c022e7e:	2800      	cmp	r0, #0
 c022e80:	dbe7      	blt.n	c022e52 <mbedtls_ecp_gen_privkey+0x92>
 c022e82:	9901      	ldr	r1, [sp, #4]
 c022e84:	4620      	mov	r0, r4
 c022e86:	f7fb f995 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 c022e8a:	2800      	cmp	r0, #0
 c022e8c:	dae1      	bge.n	c022e52 <mbedtls_ecp_gen_privkey+0x92>
 c022e8e:	e00c      	b.n	c022eaa <mbedtls_ecp_gen_privkey+0xea>
            MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, grp->nbits, 1 ) );
 c022e90:	2201      	movs	r2, #1
 c022e92:	4620      	mov	r0, r4
 c022e94:	f7fa ff36 	bl	c01dd04 <mbedtls_mpi_set_bit>
 c022e98:	e7b9      	b.n	c022e0e <mbedtls_ecp_gen_privkey+0x4e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 2, 0 ) );
 c022e9a:	463a      	mov	r2, r7
 c022e9c:	2102      	movs	r1, #2
 c022e9e:	4620      	mov	r0, r4
 c022ea0:	f7fa ff30 	bl	c01dd04 <mbedtls_mpi_set_bit>
 c022ea4:	4607      	mov	r7, r0
 c022ea6:	2800      	cmp	r0, #0
 c022ea8:	d0c6      	beq.n	c022e38 <mbedtls_ecp_gen_privkey+0x78>
    }
#endif /* ECP_SHORTWEIERSTRASS */

cleanup:
    return( ret );
}
 c022eaa:	4638      	mov	r0, r7
 c022eac:	b003      	add	sp, #12
 c022eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 c022eb2:	4f03      	ldr	r7, [pc, #12]	; (c022ec0 <mbedtls_ecp_gen_privkey+0x100>)
 c022eb4:	e7c1      	b.n	c022e3a <mbedtls_ecp_gen_privkey+0x7a>
cleanup:
 c022eb6:	4607      	mov	r7, r0
 c022eb8:	e7f7      	b.n	c022eaa <mbedtls_ecp_gen_privkey+0xea>
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 c022eba:	4f02      	ldr	r7, [pc, #8]	; (c022ec4 <mbedtls_ecp_gen_privkey+0x104>)
 c022ebc:	e7f5      	b.n	c022eaa <mbedtls_ecp_gen_privkey+0xea>
 c022ebe:	bf00      	nop
 c022ec0:	ffffb080 	.word	0xffffb080
 c022ec4:	ffffb300 	.word	0xffffb300

0c022ec8 <mbedtls_ecp_gen_keypair_base>:
int mbedtls_ecp_gen_keypair_base( mbedtls_ecp_group *grp,
                     const mbedtls_ecp_point *G,
                     mbedtls_mpi *d, mbedtls_ecp_point *Q,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 c022ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c022ecc:	4614      	mov	r4, r2
 c022ece:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
 c022ed2:	4689      	mov	r9, r1
 c022ed4:	4698      	mov	r8, r3
    ECP_VALIDATE_RET( d     != NULL );
    ECP_VALIDATE_RET( G     != NULL );
    ECP_VALIDATE_RET( Q     != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, d, f_rng, p_rng ) );
 c022ed6:	462a      	mov	r2, r5
 c022ed8:	4633      	mov	r3, r6
 c022eda:	4621      	mov	r1, r4
{
 c022edc:	4607      	mov	r7, r0
    MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, d, f_rng, p_rng ) );
 c022ede:	f7ff ff6f 	bl	c022dc0 <mbedtls_ecp_gen_privkey>
 c022ee2:	b948      	cbnz	r0, c022ef8 <mbedtls_ecp_gen_keypair_base+0x30>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( grp, Q, d, G, f_rng, p_rng ) );
 c022ee4:	e9cd 5608 	strd	r5, r6, [sp, #32]
 c022ee8:	464b      	mov	r3, r9
 c022eea:	4622      	mov	r2, r4
 c022eec:	4641      	mov	r1, r8
 c022eee:	4638      	mov	r0, r7

cleanup:
    return( ret );
}
 c022ef0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( grp, Q, d, G, f_rng, p_rng ) );
 c022ef4:	f7ff bee4 	b.w	c022cc0 <mbedtls_ecp_mul>
}
 c022ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0c022efc <mbedtls_ecp_gen_keypair>:
 */
int mbedtls_ecp_gen_keypair( mbedtls_ecp_group *grp,
                             mbedtls_mpi *d, mbedtls_ecp_point *Q,
                             int (*f_rng)(void *, unsigned char *, size_t),
                             void *p_rng )
{
 c022efc:	b513      	push	{r0, r1, r4, lr}
    ECP_VALIDATE_RET( grp   != NULL );
    ECP_VALIDATE_RET( d     != NULL );
    ECP_VALIDATE_RET( Q     != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    return( mbedtls_ecp_gen_keypair_base( grp, &grp->G, d, Q, f_rng, p_rng ) );
 c022efe:	9c04      	ldr	r4, [sp, #16]
 c022f00:	e9cd 3400 	strd	r3, r4, [sp]
 c022f04:	4613      	mov	r3, r2
 c022f06:	460a      	mov	r2, r1
 c022f08:	f100 0128 	add.w	r1, r0, #40	; 0x28
 c022f0c:	f7ff ffdc 	bl	c022ec8 <mbedtls_ecp_gen_keypair_base>
}
 c022f10:	b002      	add	sp, #8
 c022f12:	bd10      	pop	{r4, pc}

0c022f14 <mbedtls_ecp_gen_key>:
/*
 * Generate a keypair, prettier wrapper
 */
int mbedtls_ecp_gen_key( mbedtls_ecp_group_id grp_id, mbedtls_ecp_keypair *key,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 c022f14:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c022f16:	460c      	mov	r4, r1
    int ret;
    ECP_VALIDATE_RET( key   != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    if( ( ret = mbedtls_ecp_group_load( &key->grp, grp_id ) ) != 0 )
 c022f18:	4601      	mov	r1, r0
 c022f1a:	4620      	mov	r0, r4
{
 c022f1c:	4615      	mov	r5, r2
 c022f1e:	461e      	mov	r6, r3
    if( ( ret = mbedtls_ecp_group_load( &key->grp, grp_id ) ) != 0 )
 c022f20:	f000 f9a2 	bl	c023268 <mbedtls_ecp_group_load>
 c022f24:	b940      	cbnz	r0, c022f38 <mbedtls_ecp_gen_key+0x24>
        return( ret );

    return( mbedtls_ecp_gen_keypair( &key->grp, &key->d, &key->Q, f_rng, p_rng ) );
 c022f26:	9600      	str	r6, [sp, #0]
 c022f28:	462b      	mov	r3, r5
 c022f2a:	f104 0288 	add.w	r2, r4, #136	; 0x88
 c022f2e:	f104 017c 	add.w	r1, r4, #124	; 0x7c
 c022f32:	4620      	mov	r0, r4
 c022f34:	f7ff ffe2 	bl	c022efc <mbedtls_ecp_gen_keypair>
}
 c022f38:	b002      	add	sp, #8
 c022f3a:	bd70      	pop	{r4, r5, r6, pc}

0c022f3c <mbedtls_ecp_check_pub_priv>:

/*
 * Check a public-private key pair
 */
int mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv )
{
 c022f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    mbedtls_ecp_point Q;
    mbedtls_ecp_group grp;
    ECP_VALIDATE_RET( pub != NULL );
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 c022f40:	7803      	ldrb	r3, [r0, #0]
{
 c022f42:	b0aa      	sub	sp, #168	; 0xa8
 c022f44:	4605      	mov	r5, r0
 c022f46:	460c      	mov	r4, r1
    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 c022f48:	b923      	cbnz	r3, c022f54 <mbedtls_ecp_check_pub_priv+0x18>
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 c022f4a:	4c28      	ldr	r4, [pc, #160]	; (c022fec <mbedtls_ecp_check_pub_priv+0xb0>)
cleanup:
    mbedtls_ecp_point_free( &Q );
    mbedtls_ecp_group_free( &grp );

    return( ret );
}
 c022f4c:	4620      	mov	r0, r4
 c022f4e:	b02a      	add	sp, #168	; 0xa8
 c022f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 c022f54:	780a      	ldrb	r2, [r1, #0]
 c022f56:	429a      	cmp	r2, r3
 c022f58:	d1f7      	bne.n	c022f4a <mbedtls_ecp_check_pub_priv+0xe>
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
 c022f5a:	f101 0888 	add.w	r8, r1, #136	; 0x88
 c022f5e:	4641      	mov	r1, r8
 c022f60:	3088      	adds	r0, #136	; 0x88
 c022f62:	f7fb f927 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
        pub->grp.id != prv->grp.id ||
 c022f66:	2800      	cmp	r0, #0
 c022f68:	d1ef      	bne.n	c022f4a <mbedtls_ecp_check_pub_priv+0xe>
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
 c022f6a:	f104 0794 	add.w	r7, r4, #148	; 0x94
 c022f6e:	4639      	mov	r1, r7
 c022f70:	f105 0094 	add.w	r0, r5, #148	; 0x94
 c022f74:	f7fb f91e 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
 c022f78:	2800      	cmp	r0, #0
 c022f7a:	d1e6      	bne.n	c022f4a <mbedtls_ecp_check_pub_priv+0xe>
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
 c022f7c:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 c022f80:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 c022f84:	4631      	mov	r1, r6
 c022f86:	f7fb f915 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
 c022f8a:	4605      	mov	r5, r0
 c022f8c:	2800      	cmp	r0, #0
 c022f8e:	d1dc      	bne.n	c022f4a <mbedtls_ecp_check_pub_priv+0xe>
    mbedtls_ecp_point_init( &Q );
 c022f90:	a802      	add	r0, sp, #8
 c022f92:	f7fe fce9 	bl	c021968 <mbedtls_ecp_point_init>
    mbedtls_ecp_group_init( &grp );
 c022f96:	a80b      	add	r0, sp, #44	; 0x2c
 c022f98:	f7fe fcf4 	bl	c021984 <mbedtls_ecp_group_init>
    mbedtls_ecp_group_copy( &grp, &prv->grp );
 c022f9c:	4621      	mov	r1, r4
 c022f9e:	a80b      	add	r0, sp, #44	; 0x2c
 c022fa0:	f7fe fd7a 	bl	c021a98 <mbedtls_ecp_group_copy>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );
 c022fa4:	f104 0328 	add.w	r3, r4, #40	; 0x28
 c022fa8:	f104 027c 	add.w	r2, r4, #124	; 0x7c
 c022fac:	e9cd 5500 	strd	r5, r5, [sp]
 c022fb0:	a902      	add	r1, sp, #8
 c022fb2:	a80b      	add	r0, sp, #44	; 0x2c
 c022fb4:	f7ff fe84 	bl	c022cc0 <mbedtls_ecp_mul>
 c022fb8:	4604      	mov	r4, r0
 c022fba:	b980      	cbnz	r0, c022fde <mbedtls_ecp_check_pub_priv+0xa2>
    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
 c022fbc:	4641      	mov	r1, r8
 c022fbe:	a802      	add	r0, sp, #8
 c022fc0:	f7fb f8f8 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c022fc4:	b950      	cbnz	r0, c022fdc <mbedtls_ecp_check_pub_priv+0xa0>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
 c022fc6:	4639      	mov	r1, r7
 c022fc8:	a805      	add	r0, sp, #20
 c022fca:	f7fb f8f3 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
 c022fce:	b928      	cbnz	r0, c022fdc <mbedtls_ecp_check_pub_priv+0xa0>
        mbedtls_mpi_cmp_mpi( &Q.Z, &prv->Q.Z ) )
 c022fd0:	4631      	mov	r1, r6
 c022fd2:	a808      	add	r0, sp, #32
 c022fd4:	f7fb f8ee 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
 c022fd8:	4604      	mov	r4, r0
 c022fda:	b100      	cbz	r0, c022fde <mbedtls_ecp_check_pub_priv+0xa2>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 c022fdc:	4c03      	ldr	r4, [pc, #12]	; (c022fec <mbedtls_ecp_check_pub_priv+0xb0>)
 c022fde:	a802      	add	r0, sp, #8
 c022fe0:	f7fe fc80 	bl	c0218e4 <mbedtls_ecp_point_free.part.5>
    mbedtls_ecp_group_free( &grp );
 c022fe4:	a80b      	add	r0, sp, #44	; 0x2c
 c022fe6:	f7fe fd00 	bl	c0219ea <mbedtls_ecp_group_free>
    return( ret );
 c022fea:	e7af      	b.n	c022f4c <mbedtls_ecp_check_pub_priv+0x10>
 c022fec:	ffffb080 	.word	0xffffb080

0c022ff0 <ecp_mod_p448>:
 * arithmetic using the limbs directly as we do for the NIST primes above,
 * but for 64-bit targets it should use half the number of operations if we do
 * the reduction with 224-bit limbs, since mpi_add_mpi will then use 64-bit adds.
 */
static int ecp_mod_p448( mbedtls_mpi *N )
{
 c022ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int ret;
    size_t i;
    mbedtls_mpi M, Q;
    mbedtls_mpi_uint Mp[P448_WIDTH + 1], Qp[P448_WIDTH];

    if( N->n <= P448_WIDTH )
 c022ff4:	6846      	ldr	r6, [r0, #4]
{
 c022ff6:	b0a5      	sub	sp, #148	; 0x94
    if( N->n <= P448_WIDTH )
 c022ff8:	2e0e      	cmp	r6, #14
{
 c022ffa:	4607      	mov	r7, r0
    if( N->n <= P448_WIDTH )
 c022ffc:	d964      	bls.n	c0230c8 <ecp_mod_p448+0xd8>
        return( 0 );

    /* M = A1 */
    M.s = 1;
 c022ffe:	2301      	movs	r3, #1
    M.n = N->n - ( P448_WIDTH );
 c023000:	f1a6 080e 	sub.w	r8, r6, #14
    if( M.n > P448_WIDTH )
 c023004:	f1b8 0f0e 	cmp.w	r8, #14
    M.s = 1;
 c023008:	9301      	str	r3, [sp, #4]
    M.n = N->n - ( P448_WIDTH );
 c02300a:	f8cd 8008 	str.w	r8, [sp, #8]
    if( M.n > P448_WIDTH )
 c02300e:	d85d      	bhi.n	c0230cc <ecp_mod_p448+0xdc>
        /* Shouldn't be called with N larger than 2^896! */
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    M.p = Mp;
 c023010:	f10d 0954 	add.w	r9, sp, #84	; 0x54
    memset( Mp, 0, sizeof( Mp ) );
 c023014:	223c      	movs	r2, #60	; 0x3c
 c023016:	2100      	movs	r1, #0
 c023018:	4648      	mov	r0, r9
    M.p = Mp;
 c02301a:	f8cd 900c 	str.w	r9, [sp, #12]
    memset( Mp, 0, sizeof( Mp ) );
 c02301e:	f7f1 fcd2 	bl	c0149c6 <memset>
    memcpy( Mp, N->p + P448_WIDTH, M.n * sizeof( mbedtls_mpi_uint ) );
 c023022:	68bd      	ldr	r5, [r7, #8]
 c023024:	ea4f 0288 	mov.w	r2, r8, lsl #2
 c023028:	f105 0438 	add.w	r4, r5, #56	; 0x38
 c02302c:	4621      	mov	r1, r4
 c02302e:	4648      	mov	r0, r9
 c023030:	f7f1 fca5 	bl	c01497e <memcpy>
 c023034:	4621      	mov	r1, r4

    /* N = A0 */
    for( i = P448_WIDTH; i < N->n; i++ )
        N->p[i] = 0;
 c023036:	2300      	movs	r3, #0
 c023038:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 c02303c:	f841 3b04 	str.w	r3, [r1], #4
    for( i = P448_WIDTH; i < N->n; i++ )
 c023040:	428d      	cmp	r5, r1
 c023042:	d1fb      	bne.n	c02303c <ecp_mod_p448+0x4c>

    /* N += A1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &M ) );
 c023044:	ae01      	add	r6, sp, #4
 c023046:	4632      	mov	r2, r6
 c023048:	4639      	mov	r1, r7
 c02304a:	4638      	mov	r0, r7
 c02304c:	f7fb f9a7 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c023050:	bb98      	cbnz	r0, c0230ba <ecp_mod_p448+0xca>

    /* Q = B1, N += B1 */
    Q = M;
 c023052:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    Q.p = Qp;
    memcpy( Qp, Mp, sizeof( Qp ) );
 c023056:	464d      	mov	r5, r9
    Q = M;
 c023058:	f10d 0810 	add.w	r8, sp, #16
    Q.p = Qp;
 c02305c:	ac07      	add	r4, sp, #28
    Q = M;
 c02305e:	e888 0007 	stmia.w	r8, {r0, r1, r2}
    memcpy( Qp, Mp, sizeof( Qp ) );
 c023062:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    Q.p = Qp;
 c023064:	9406      	str	r4, [sp, #24]
    memcpy( Qp, Mp, sizeof( Qp ) );
 c023066:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 c023068:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 c02306a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 c02306c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 c02306e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 c023070:	e895 0003 	ldmia.w	r5, {r0, r1}
 c023074:	e884 0003 	stmia.w	r4, {r0, r1}
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Q, 224 ) );
 c023078:	21e0      	movs	r1, #224	; 0xe0
 c02307a:	4640      	mov	r0, r8
 c02307c:	f7fa ffca 	bl	c01e014 <mbedtls_mpi_shift_r>
 c023080:	b9d8      	cbnz	r0, c0230ba <ecp_mod_p448+0xca>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &Q ) );
 c023082:	4642      	mov	r2, r8
 c023084:	4639      	mov	r1, r7
 c023086:	4638      	mov	r0, r7
 c023088:	f7fb f989 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c02308c:	b9a8      	cbnz	r0, c0230ba <ecp_mod_p448+0xca>

    /* M = (B0 + B1) * 2^224, N += M */
    if( sizeof( mbedtls_mpi_uint ) > 4 )
        Mp[P224_WIDTH_MIN] &= ( (mbedtls_mpi_uint)-1 ) >> ( P224_UNUSED_BITS );
    for( i = P224_WIDTH_MAX; i < M.n; ++i )
 c02308e:	2307      	movs	r3, #7
 c023090:	9a02      	ldr	r2, [sp, #8]
 c023092:	429a      	cmp	r2, r3
 c023094:	d814      	bhi.n	c0230c0 <ecp_mod_p448+0xd0>
        Mp[i] = 0;
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M, &M, &Q ) );
 c023096:	4642      	mov	r2, r8
 c023098:	4631      	mov	r1, r6
 c02309a:	4630      	mov	r0, r6
 c02309c:	f7fb f97f 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c0230a0:	b958      	cbnz	r0, c0230ba <ecp_mod_p448+0xca>
    M.n = P448_WIDTH + 1; /* Make room for shifted carry bit from the addition */
 c0230a2:	230f      	movs	r3, #15
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &M, 224 ) );
 c0230a4:	21e0      	movs	r1, #224	; 0xe0
 c0230a6:	4630      	mov	r0, r6
    M.n = P448_WIDTH + 1; /* Make room for shifted carry bit from the addition */
 c0230a8:	9302      	str	r3, [sp, #8]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &M, 224 ) );
 c0230aa:	f7fa ff6b 	bl	c01df84 <mbedtls_mpi_shift_l>
 c0230ae:	b920      	cbnz	r0, c0230ba <ecp_mod_p448+0xca>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &M ) );
 c0230b0:	4632      	mov	r2, r6
 c0230b2:	4639      	mov	r1, r7
 c0230b4:	4638      	mov	r0, r7
 c0230b6:	f7fb f972 	bl	c01e39e <mbedtls_mpi_add_mpi>

cleanup:
    return( ret );
}
 c0230ba:	b025      	add	sp, #148	; 0x94
 c0230bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        Mp[i] = 0;
 c0230c0:	f849 0023 	str.w	r0, [r9, r3, lsl #2]
    for( i = P224_WIDTH_MAX; i < M.n; ++i )
 c0230c4:	3301      	adds	r3, #1
 c0230c6:	e7e4      	b.n	c023092 <ecp_mod_p448+0xa2>
        return( 0 );
 c0230c8:	2000      	movs	r0, #0
 c0230ca:	e7f6      	b.n	c0230ba <ecp_mod_p448+0xca>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 c0230cc:	4800      	ldr	r0, [pc, #0]	; (c0230d0 <ecp_mod_p448+0xe0>)
 c0230ce:	e7f4      	b.n	c0230ba <ecp_mod_p448+0xca>
 c0230d0:	ffffb080 	.word	0xffffb080

0c0230d4 <ecp_mod_p255>:
{
 c0230d4:	b530      	push	{r4, r5, lr}
    if( N->n < P255_WIDTH )
 c0230d6:	6845      	ldr	r5, [r0, #4]
{
 c0230d8:	b08f      	sub	sp, #60	; 0x3c
    if( N->n < P255_WIDTH )
 c0230da:	2d07      	cmp	r5, #7
{
 c0230dc:	4604      	mov	r4, r0
    if( N->n < P255_WIDTH )
 c0230de:	d935      	bls.n	c02314c <ecp_mod_p255+0x78>
    M.s = 1;
 c0230e0:	2301      	movs	r3, #1
    M.n = N->n - ( P255_WIDTH - 1 );
 c0230e2:	3d07      	subs	r5, #7
    if( M.n > P255_WIDTH + 1 )
 c0230e4:	2d09      	cmp	r5, #9
    M.s = 1;
 c0230e6:	9301      	str	r3, [sp, #4]
    M.n = N->n - ( P255_WIDTH - 1 );
 c0230e8:	9502      	str	r5, [sp, #8]
    if( M.n > P255_WIDTH + 1 )
 c0230ea:	d831      	bhi.n	c023150 <ecp_mod_p255+0x7c>
    M.p = Mp;
 c0230ec:	ab04      	add	r3, sp, #16
    memset( Mp, 0, sizeof Mp );
 c0230ee:	2228      	movs	r2, #40	; 0x28
 c0230f0:	2100      	movs	r1, #0
 c0230f2:	4618      	mov	r0, r3
    M.p = Mp;
 c0230f4:	9303      	str	r3, [sp, #12]
    memset( Mp, 0, sizeof Mp );
 c0230f6:	f7f1 fc66 	bl	c0149c6 <memset>
    memcpy( Mp, N->p + P255_WIDTH - 1, M.n * sizeof( mbedtls_mpi_uint ) );
 c0230fa:	68a1      	ldr	r1, [r4, #8]
 c0230fc:	00aa      	lsls	r2, r5, #2
 c0230fe:	311c      	adds	r1, #28
 c023100:	f7f1 fc3d 	bl	c01497e <memcpy>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, 255 % ( 8 * sizeof( mbedtls_mpi_uint ) ) ) );
 c023104:	211f      	movs	r1, #31
 c023106:	a801      	add	r0, sp, #4
 c023108:	f7fa ff84 	bl	c01e014 <mbedtls_mpi_shift_r>
 c02310c:	b9b8      	cbnz	r0, c02313e <ecp_mod_p255+0x6a>
    M.n++; /* Make room for multiplication by 19 */
 c02310e:	9b02      	ldr	r3, [sp, #8]
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( N, 255, 0 ) );
 c023110:	4602      	mov	r2, r0
    M.n++; /* Make room for multiplication by 19 */
 c023112:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( N, 255, 0 ) );
 c023114:	21ff      	movs	r1, #255	; 0xff
 c023116:	4620      	mov	r0, r4
    M.n++; /* Make room for multiplication by 19 */
 c023118:	9302      	str	r3, [sp, #8]
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( N, 255, 0 ) );
 c02311a:	f7fa fdf3 	bl	c01dd04 <mbedtls_mpi_set_bit>
 c02311e:	b970      	cbnz	r0, c02313e <ecp_mod_p255+0x6a>
    for( i = P255_WIDTH; i < N->n; i++ )
 c023120:	2308      	movs	r3, #8
 c023122:	6862      	ldr	r2, [r4, #4]
 c023124:	429a      	cmp	r2, r3
 c023126:	d80c      	bhi.n	c023142 <ecp_mod_p255+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M, &M, 19 ) );
 c023128:	a901      	add	r1, sp, #4
 c02312a:	2213      	movs	r2, #19
 c02312c:	4608      	mov	r0, r1
 c02312e:	f7fb fa10 	bl	c01e552 <mbedtls_mpi_mul_int>
 c023132:	b920      	cbnz	r0, c02313e <ecp_mod_p255+0x6a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 c023134:	aa01      	add	r2, sp, #4
 c023136:	4621      	mov	r1, r4
 c023138:	4620      	mov	r0, r4
 c02313a:	f7fb f891 	bl	c01e260 <mbedtls_mpi_add_abs>
}
 c02313e:	b00f      	add	sp, #60	; 0x3c
 c023140:	bd30      	pop	{r4, r5, pc}
        N->p[i] = 0;
 c023142:	68a1      	ldr	r1, [r4, #8]
 c023144:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    for( i = P255_WIDTH; i < N->n; i++ )
 c023148:	3301      	adds	r3, #1
 c02314a:	e7eb      	b.n	c023124 <ecp_mod_p255+0x50>
        return( 0 );
 c02314c:	2000      	movs	r0, #0
 c02314e:	e7f6      	b.n	c02313e <ecp_mod_p255+0x6a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 c023150:	4800      	ldr	r0, [pc, #0]	; (c023154 <ecp_mod_p255+0x80>)
 c023152:	e7f4      	b.n	c02313e <ecp_mod_p255+0x6a>
 c023154:	ffffb080 	.word	0xffffb080

0c023158 <ecp_mod_koblitz.constprop.0>:
 * Write N as A0 + 2^224 A1, return A0 + R * A1.
 * Actually do two passes, since R is big.
 */
#define P_KOBLITZ_MAX   ( 256 / 8 / sizeof( mbedtls_mpi_uint ) )  // Max limbs in P
#define P_KOBLITZ_R     ( 8 / sizeof( mbedtls_mpi_uint ) )        // Limbs in R
static inline int ecp_mod_koblitz( mbedtls_mpi *N, mbedtls_mpi_uint *Rp, size_t p_limbs,
 c023158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret;
    size_t i;
    mbedtls_mpi M, R;
    mbedtls_mpi_uint Mp[P_KOBLITZ_MAX + P_KOBLITZ_R + 1];

    if( N->n < p_limbs )
 c02315c:	f8d0 b004 	ldr.w	fp, [r0, #4]
static inline int ecp_mod_koblitz( mbedtls_mpi *N, mbedtls_mpi_uint *Rp, size_t p_limbs,
 c023160:	b093      	sub	sp, #76	; 0x4c
    if( N->n < p_limbs )
 c023162:	4593      	cmp	fp, r2
static inline int ecp_mod_koblitz( mbedtls_mpi *N, mbedtls_mpi_uint *Rp, size_t p_limbs,
 c023164:	4606      	mov	r6, r0
 c023166:	4615      	mov	r5, r2
    if( N->n < p_limbs )
 c023168:	d369      	bcc.n	c02323e <ecp_mod_koblitz.constprop.0+0xe6>
 c02316a:	ebab 0405 	sub.w	r4, fp, r5
    /* Common setup for M */
    M.s = 1;
    M.p = Mp;

    /* M = A1 */
    M.n = N->n - ( p_limbs - adjust );
 c02316e:	42ac      	cmp	r4, r5
    R.n = P_KOBLITZ_R;
 c023170:	f04f 0202 	mov.w	r2, #2
    R.s = 1;
 c023174:	f04f 0301 	mov.w	r3, #1
    M.n = N->n - ( p_limbs - adjust );
 c023178:	bf28      	it	cs
 c02317a:	462c      	movcs	r4, r5
    M.p = Mp;
 c02317c:	f10d 081c 	add.w	r8, sp, #28
    R.p = Rp;
 c023180:	9106      	str	r1, [sp, #24]
    R.n = P_KOBLITZ_R;
 c023182:	9205      	str	r2, [sp, #20]
    if( M.n > p_limbs + adjust )
        M.n = p_limbs + adjust;
    memset( Mp, 0, sizeof Mp );
 c023184:	2100      	movs	r1, #0
 c023186:	222c      	movs	r2, #44	; 0x2c
 c023188:	4640      	mov	r0, r8
    R.s = 1;
 c02318a:	9304      	str	r3, [sp, #16]
    M.s = 1;
 c02318c:	9301      	str	r3, [sp, #4]
    M.n = N->n - ( p_limbs - adjust );
 c02318e:	9402      	str	r4, [sp, #8]
    M.p = Mp;
 c023190:	f8cd 800c 	str.w	r8, [sp, #12]
    memset( Mp, 0, sizeof Mp );
 c023194:	f7f1 fc17 	bl	c0149c6 <memset>
    memcpy( Mp, N->p + p_limbs - adjust, M.n * sizeof( mbedtls_mpi_uint ) );
 c023198:	f8d6 a008 	ldr.w	sl, [r6, #8]
 c02319c:	ea4f 0985 	mov.w	r9, r5, lsl #2
 c0231a0:	eb0a 0709 	add.w	r7, sl, r9
 c0231a4:	00a2      	lsls	r2, r4, #2
 c0231a6:	4639      	mov	r1, r7
 c0231a8:	4640      	mov	r0, r8
 c0231aa:	f7f1 fbe8 	bl	c01497e <memcpy>

    /* N = A0 */
    if( mask != 0 )
        N->p[p_limbs - 1] &= mask;
    for( i = p_limbs; i < N->n; i++ )
        N->p[i] = 0;
 c0231ae:	2300      	movs	r3, #0
    M.n += R.n; /* Make room for multiplication by R */
 c0231b0:	3402      	adds	r4, #2
 c0231b2:	9402      	str	r4, [sp, #8]
 c0231b4:	eb0a 0a8b 	add.w	sl, sl, fp, lsl #2
    for( i = p_limbs; i < N->n; i++ )
 c0231b8:	4557      	cmp	r7, sl
 c0231ba:	d139      	bne.n	c023230 <ecp_mod_koblitz.constprop.0+0xd8>

    /* N = A0 + R * A1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &M, &M, &R ) );
 c0231bc:	a901      	add	r1, sp, #4
 c0231be:	aa04      	add	r2, sp, #16
 c0231c0:	4608      	mov	r0, r1
 c0231c2:	f7fb f95d 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c0231c6:	4604      	mov	r4, r0
 c0231c8:	bb70      	cbnz	r0, c023228 <ecp_mod_koblitz.constprop.0+0xd0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 c0231ca:	aa01      	add	r2, sp, #4
 c0231cc:	4631      	mov	r1, r6
 c0231ce:	4630      	mov	r0, r6
 c0231d0:	f7fb f846 	bl	c01e260 <mbedtls_mpi_add_abs>
 c0231d4:	4604      	mov	r4, r0
 c0231d6:	bb38      	cbnz	r0, c023228 <ecp_mod_koblitz.constprop.0+0xd0>

    /* Second pass */

    /* M = A1 */
    M.n = N->n - ( p_limbs - adjust );
 c0231d8:	6877      	ldr	r7, [r6, #4]
    if( M.n > p_limbs + adjust )
        M.n = p_limbs + adjust;
    memset( Mp, 0, sizeof Mp );
 c0231da:	4601      	mov	r1, r0
 c0231dc:	1b7b      	subs	r3, r7, r5
 c0231de:	222c      	movs	r2, #44	; 0x2c
 c0231e0:	4640      	mov	r0, r8
    M.n = N->n - ( p_limbs - adjust );
 c0231e2:	42ab      	cmp	r3, r5
 c0231e4:	bf94      	ite	ls
 c0231e6:	9302      	strls	r3, [sp, #8]
 c0231e8:	9502      	strhi	r5, [sp, #8]
    memset( Mp, 0, sizeof Mp );
 c0231ea:	f7f1 fbec 	bl	c0149c6 <memset>
    memcpy( Mp, N->p + p_limbs - adjust, M.n * sizeof( mbedtls_mpi_uint ) );
 c0231ee:	f8dd b008 	ldr.w	fp, [sp, #8]
 c0231f2:	f8d6 a008 	ldr.w	sl, [r6, #8]
 c0231f6:	ea4f 028b 	mov.w	r2, fp, lsl #2
 c0231fa:	eb0a 0109 	add.w	r1, sl, r9
 c0231fe:	4640      	mov	r0, r8
 c023200:	f7f1 fbbd 	bl	c01497e <memcpy>
    if( shift != 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, shift ) );
    M.n += R.n; /* Make room for multiplication by R */
 c023204:	9b05      	ldr	r3, [sp, #20]
 c023206:	445b      	add	r3, fp
 c023208:	9302      	str	r3, [sp, #8]

    /* N = A0 */
    if( mask != 0 )
        N->p[p_limbs - 1] &= mask;
    for( i = p_limbs; i < N->n; i++ )
 c02320a:	42af      	cmp	r7, r5
 c02320c:	d813      	bhi.n	c023236 <ecp_mod_koblitz.constprop.0+0xde>
        N->p[i] = 0;

    /* N = A0 + R * A1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &M, &M, &R ) );
 c02320e:	a901      	add	r1, sp, #4
 c023210:	aa04      	add	r2, sp, #16
 c023212:	4608      	mov	r0, r1
 c023214:	f7fb f934 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c023218:	4604      	mov	r4, r0
 c02321a:	b928      	cbnz	r0, c023228 <ecp_mod_koblitz.constprop.0+0xd0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 c02321c:	aa01      	add	r2, sp, #4
 c02321e:	4631      	mov	r1, r6
 c023220:	4630      	mov	r0, r6
 c023222:	f7fb f81d 	bl	c01e260 <mbedtls_mpi_add_abs>
 c023226:	4604      	mov	r4, r0

cleanup:
    return( ret );
}
 c023228:	4620      	mov	r0, r4
 c02322a:	b013      	add	sp, #76	; 0x4c
 c02322c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        N->p[i] = 0;
 c023230:	f847 3b04 	str.w	r3, [r7], #4
 c023234:	e7c0      	b.n	c0231b8 <ecp_mod_koblitz.constprop.0+0x60>
        N->p[i] = 0;
 c023236:	f84a 4025 	str.w	r4, [sl, r5, lsl #2]
    for( i = p_limbs; i < N->n; i++ )
 c02323a:	3501      	adds	r5, #1
 c02323c:	e7e5      	b.n	c02320a <ecp_mod_koblitz.constprop.0+0xb2>
        return( 0 );
 c02323e:	2400      	movs	r4, #0
 c023240:	e7f2      	b.n	c023228 <ecp_mod_koblitz.constprop.0+0xd0>
	...

0c023244 <ecp_mod_p192k1>:
static int ecp_mod_p192k1( mbedtls_mpi *N )
{
    static mbedtls_mpi_uint Rp[] = {
        BYTES_TO_T_UINT_8( 0xC9, 0x11, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ) };

    return( ecp_mod_koblitz( N, Rp, 192 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );
 c023244:	2206      	movs	r2, #6
 c023246:	4901      	ldr	r1, [pc, #4]	; (c02324c <ecp_mod_p192k1+0x8>)
 c023248:	f7ff bf86 	b.w	c023158 <ecp_mod_koblitz.constprop.0>
 c02324c:	30035b28 	.word	0x30035b28

0c023250 <ecp_mod_p224k1>:
        BYTES_TO_T_UINT_8( 0x93, 0x1A, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ) };

#if defined(MBEDTLS_HAVE_INT64)
    return( ecp_mod_koblitz( N, Rp, 4, 1, 32, 0xFFFFFFFF ) );
#else
    return( ecp_mod_koblitz( N, Rp, 224 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );
 c023250:	2207      	movs	r2, #7
 c023252:	4901      	ldr	r1, [pc, #4]	; (c023258 <ecp_mod_p224k1+0x8>)
 c023254:	f7ff bf80 	b.w	c023158 <ecp_mod_koblitz.constprop.0>
 c023258:	30035b30 	.word	0x30035b30

0c02325c <ecp_mod_p256k1>:
 */
static int ecp_mod_p256k1( mbedtls_mpi *N )
{
    static mbedtls_mpi_uint Rp[] = {
        BYTES_TO_T_UINT_8( 0xD1, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ) };
    return( ecp_mod_koblitz( N, Rp, 256 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );
 c02325c:	2208      	movs	r2, #8
 c02325e:	4901      	ldr	r1, [pc, #4]	; (c023264 <ecp_mod_p256k1+0x8>)
 c023260:	f7ff bf7a 	b.w	c023158 <ecp_mod_koblitz.constprop.0>
 c023264:	30035b38 	.word	0x30035b38

0c023268 <mbedtls_ecp_group_load>:
{
 c023268:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 c02326a:	460d      	mov	r5, r1
 c02326c:	4604      	mov	r4, r0
    mbedtls_ecp_group_free( grp );
 c02326e:	f7fe fbbc 	bl	c0219ea <mbedtls_ecp_group_free>
    grp->id = id;
 c023272:	7025      	strb	r5, [r4, #0]
    switch( id )
 c023274:	3d01      	subs	r5, #1
 c023276:	2d0c      	cmp	r5, #12
 c023278:	f200 8275 	bhi.w	c023766 <mbedtls_ecp_group_load+0x4fe>
 c02327c:	e8df f015 	tbh	[pc, r5, lsl #1]
 c023280:	0035000d 	.word	0x0035000d
 c023284:	0062004c 	.word	0x0062004c
 c023288:	00e30078 	.word	0x00e30078
 c02328c:	011700fd 	.word	0x011700fd
 c023290:	008e01b4 	.word	0x008e01b4
 c023294:	00c700aa 	.word	0x00c700aa
 c023298:	0207      	.short	0x0207
    X->n = len / sizeof( mbedtls_mpi_uint );
 c02329a:	2501      	movs	r5, #1
 c02329c:	2306      	movs	r3, #6
    X->p = (mbedtls_mpi_uint *) p;
 c02329e:	4a91      	ldr	r2, [pc, #580]	; (c0234e4 <mbedtls_ecp_group_load+0x27c>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c0232a0:	e9c4 5301 	strd	r5, r3, [r4, #4]
    X->p = (mbedtls_mpi_uint *) p;
 c0232a4:	60e2      	str	r2, [r4, #12]
 c0232a6:	4a90      	ldr	r2, [pc, #576]	; (c0234e8 <mbedtls_ecp_group_load+0x280>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c0232a8:	e9c4 5307 	strd	r5, r3, [r4, #28]
    X->p = (mbedtls_mpi_uint *) p;
 c0232ac:	6262      	str	r2, [r4, #36]	; 0x24
 c0232ae:	4a8f      	ldr	r2, [pc, #572]	; (c0234ec <mbedtls_ecp_group_load+0x284>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c0232b0:	e9c4 5313 	strd	r5, r3, [r4, #76]	; 0x4c
    X->p = (mbedtls_mpi_uint *) p;
 c0232b4:	6562      	str	r2, [r4, #84]	; 0x54
 c0232b6:	4a8e      	ldr	r2, [pc, #568]	; (c0234f0 <mbedtls_ecp_group_load+0x288>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c0232b8:	e9c4 530a 	strd	r5, r3, [r4, #40]	; 0x28
    X->s = 1;
 c0232bc:	e9c4 250c 	strd	r2, r5, [r4, #48]	; 0x30
    X->n = len / sizeof( mbedtls_mpi_uint );
 c0232c0:	63a3      	str	r3, [r4, #56]	; 0x38
    X->p = (mbedtls_mpi_uint *) p;
 c0232c2:	4b8c      	ldr	r3, [pc, #560]	; (c0234f4 <mbedtls_ecp_group_load+0x28c>)
    X->s = 1;
 c0232c4:	e9c4 350f 	strd	r3, r5, [r4, #60]	; 0x3c
    X->p = one;
 c0232c8:	4b8b      	ldr	r3, [pc, #556]	; (c0234f8 <mbedtls_ecp_group_load+0x290>)
    X->n = 1;
 c0232ca:	6465      	str	r5, [r4, #68]	; 0x44
    X->p = one;
 c0232cc:	64a3      	str	r3, [r4, #72]	; 0x48
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 c0232ce:	1d20      	adds	r0, r4, #4
 c0232d0:	f7fa fd5c 	bl	c01dd8c <mbedtls_mpi_bitlen>
 c0232d4:	65a0      	str	r0, [r4, #88]	; 0x58
    grp->nbits = mbedtls_mpi_bitlen( &grp->N );
 c0232d6:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 c0232da:	f7fa fd57 	bl	c01dd8c <mbedtls_mpi_bitlen>
    grp->h = 1;
 c0232de:	e9c4 0517 	strd	r0, r5, [r4, #92]	; 0x5c
            return( LOAD_GROUP( secp224r1 ) );
 c0232e2:	2500      	movs	r5, #0
}
 c0232e4:	4628      	mov	r0, r5
 c0232e6:	b004      	add	sp, #16
 c0232e8:	bd70      	pop	{r4, r5, r6, pc}
    X->n = len / sizeof( mbedtls_mpi_uint );
 c0232ea:	2501      	movs	r5, #1
 c0232ec:	2308      	movs	r3, #8
 c0232ee:	e9c4 5301 	strd	r5, r3, [r4, #4]
    X->p = (mbedtls_mpi_uint *) p;
 c0232f2:	4b82      	ldr	r3, [pc, #520]	; (c0234fc <mbedtls_ecp_group_load+0x294>)
 c0232f4:	4a82      	ldr	r2, [pc, #520]	; (c023500 <mbedtls_ecp_group_load+0x298>)
 c0232f6:	60e3      	str	r3, [r4, #12]
    X->n = len / sizeof( mbedtls_mpi_uint );
 c0232f8:	2307      	movs	r3, #7
    X->p = (mbedtls_mpi_uint *) p;
 c0232fa:	6262      	str	r2, [r4, #36]	; 0x24
 c0232fc:	4a81      	ldr	r2, [pc, #516]	; (c023504 <mbedtls_ecp_group_load+0x29c>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c0232fe:	6223      	str	r3, [r4, #32]
    X->p = (mbedtls_mpi_uint *) p;
 c023300:	6562      	str	r2, [r4, #84]	; 0x54
 c023302:	4a81      	ldr	r2, [pc, #516]	; (c023508 <mbedtls_ecp_group_load+0x2a0>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c023304:	e9c4 5313 	strd	r5, r3, [r4, #76]	; 0x4c
 c023308:	e9c4 530a 	strd	r5, r3, [r4, #40]	; 0x28
 c02330c:	63a3      	str	r3, [r4, #56]	; 0x38
    X->s = 1;
 c02330e:	61e5      	str	r5, [r4, #28]
 c023310:	e9c4 250c 	strd	r2, r5, [r4, #48]	; 0x30
    X->p = (mbedtls_mpi_uint *) p;
 c023314:	4b7d      	ldr	r3, [pc, #500]	; (c02350c <mbedtls_ecp_group_load+0x2a4>)
 c023316:	e7d5      	b.n	c0232c4 <mbedtls_ecp_group_load+0x5c>
    X->n = len / sizeof( mbedtls_mpi_uint );
 c023318:	2308      	movs	r3, #8
 c02331a:	2501      	movs	r5, #1
    X->p = (mbedtls_mpi_uint *) p;
 c02331c:	4a7c      	ldr	r2, [pc, #496]	; (c023510 <mbedtls_ecp_group_load+0x2a8>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c02331e:	e9c4 5301 	strd	r5, r3, [r4, #4]
    X->p = (mbedtls_mpi_uint *) p;
 c023322:	60e2      	str	r2, [r4, #12]
 c023324:	4a7b      	ldr	r2, [pc, #492]	; (c023514 <mbedtls_ecp_group_load+0x2ac>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c023326:	e9c4 5307 	strd	r5, r3, [r4, #28]
    X->p = (mbedtls_mpi_uint *) p;
 c02332a:	6262      	str	r2, [r4, #36]	; 0x24
 c02332c:	4a7a      	ldr	r2, [pc, #488]	; (c023518 <mbedtls_ecp_group_load+0x2b0>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c02332e:	e9c4 5313 	strd	r5, r3, [r4, #76]	; 0x4c
    X->p = (mbedtls_mpi_uint *) p;
 c023332:	6562      	str	r2, [r4, #84]	; 0x54
 c023334:	4a79      	ldr	r2, [pc, #484]	; (c02351c <mbedtls_ecp_group_load+0x2b4>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c023336:	e9c4 530a 	strd	r5, r3, [r4, #40]	; 0x28
 c02333a:	63a3      	str	r3, [r4, #56]	; 0x38
    X->s = 1;
 c02333c:	e9c4 250c 	strd	r2, r5, [r4, #48]	; 0x30
    X->p = (mbedtls_mpi_uint *) p;
 c023340:	4b77      	ldr	r3, [pc, #476]	; (c023520 <mbedtls_ecp_group_load+0x2b8>)
 c023342:	e7bf      	b.n	c0232c4 <mbedtls_ecp_group_load+0x5c>
    X->n = len / sizeof( mbedtls_mpi_uint );
 c023344:	230c      	movs	r3, #12
 c023346:	2501      	movs	r5, #1
    X->p = (mbedtls_mpi_uint *) p;
 c023348:	4a76      	ldr	r2, [pc, #472]	; (c023524 <mbedtls_ecp_group_load+0x2bc>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c02334a:	e9c4 5301 	strd	r5, r3, [r4, #4]
    X->p = (mbedtls_mpi_uint *) p;
 c02334e:	60e2      	str	r2, [r4, #12]
 c023350:	4a75      	ldr	r2, [pc, #468]	; (c023528 <mbedtls_ecp_group_load+0x2c0>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c023352:	e9c4 5307 	strd	r5, r3, [r4, #28]
    X->p = (mbedtls_mpi_uint *) p;
 c023356:	6262      	str	r2, [r4, #36]	; 0x24
 c023358:	4a74      	ldr	r2, [pc, #464]	; (c02352c <mbedtls_ecp_group_load+0x2c4>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c02335a:	e9c4 5313 	strd	r5, r3, [r4, #76]	; 0x4c
    X->p = (mbedtls_mpi_uint *) p;
 c02335e:	6562      	str	r2, [r4, #84]	; 0x54
 c023360:	4a73      	ldr	r2, [pc, #460]	; (c023530 <mbedtls_ecp_group_load+0x2c8>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c023362:	e9c4 530a 	strd	r5, r3, [r4, #40]	; 0x28
 c023366:	63a3      	str	r3, [r4, #56]	; 0x38
    X->s = 1;
 c023368:	e9c4 250c 	strd	r2, r5, [r4, #48]	; 0x30
    X->p = (mbedtls_mpi_uint *) p;
 c02336c:	4b71      	ldr	r3, [pc, #452]	; (c023534 <mbedtls_ecp_group_load+0x2cc>)
 c02336e:	e7a9      	b.n	c0232c4 <mbedtls_ecp_group_load+0x5c>
    X->n = len / sizeof( mbedtls_mpi_uint );
 c023370:	2311      	movs	r3, #17
 c023372:	2501      	movs	r5, #1
    X->p = (mbedtls_mpi_uint *) p;
 c023374:	4a70      	ldr	r2, [pc, #448]	; (c023538 <mbedtls_ecp_group_load+0x2d0>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c023376:	e9c4 5301 	strd	r5, r3, [r4, #4]
    X->p = (mbedtls_mpi_uint *) p;
 c02337a:	60e2      	str	r2, [r4, #12]
 c02337c:	4a6f      	ldr	r2, [pc, #444]	; (c02353c <mbedtls_ecp_group_load+0x2d4>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c02337e:	e9c4 5307 	strd	r5, r3, [r4, #28]
    X->p = (mbedtls_mpi_uint *) p;
 c023382:	6262      	str	r2, [r4, #36]	; 0x24
 c023384:	4a6e      	ldr	r2, [pc, #440]	; (c023540 <mbedtls_ecp_group_load+0x2d8>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c023386:	e9c4 5313 	strd	r5, r3, [r4, #76]	; 0x4c
    X->p = (mbedtls_mpi_uint *) p;
 c02338a:	6562      	str	r2, [r4, #84]	; 0x54
 c02338c:	4a6d      	ldr	r2, [pc, #436]	; (c023544 <mbedtls_ecp_group_load+0x2dc>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c02338e:	e9c4 530a 	strd	r5, r3, [r4, #40]	; 0x28
 c023392:	63a3      	str	r3, [r4, #56]	; 0x38
    X->s = 1;
 c023394:	e9c4 250c 	strd	r2, r5, [r4, #48]	; 0x30
    X->p = (mbedtls_mpi_uint *) p;
 c023398:	4b6b      	ldr	r3, [pc, #428]	; (c023548 <mbedtls_ecp_group_load+0x2e0>)
 c02339a:	e793      	b.n	c0232c4 <mbedtls_ecp_group_load+0x5c>
    X->n = len / sizeof( mbedtls_mpi_uint );
 c02339c:	2501      	movs	r5, #1
            grp->modp = ecp_mod_p192k1;
 c02339e:	4b6b      	ldr	r3, [pc, #428]	; (c02354c <mbedtls_ecp_group_load+0x2e4>)
    X->p = (mbedtls_mpi_uint *) p;
 c0233a0:	4a6b      	ldr	r2, [pc, #428]	; (c023550 <mbedtls_ecp_group_load+0x2e8>)
            grp->modp = ecp_mod_p192k1;
 c0233a2:	6663      	str	r3, [r4, #100]	; 0x64
    X->n = len / sizeof( mbedtls_mpi_uint );
 c0233a4:	2306      	movs	r3, #6
    X->s = 1;
 c0233a6:	e9c4 2503 	strd	r2, r5, [r4, #12]
    X->p = (mbedtls_mpi_uint *) p;
 c0233aa:	4a6a      	ldr	r2, [pc, #424]	; (c023554 <mbedtls_ecp_group_load+0x2ec>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c0233ac:	e9c4 5301 	strd	r5, r3, [r4, #4]
    X->s = 1;
 c0233b0:	e9c4 2506 	strd	r2, r5, [r4, #24]
    X->p = (mbedtls_mpi_uint *) p;
 c0233b4:	4a68      	ldr	r2, [pc, #416]	; (c023558 <mbedtls_ecp_group_load+0x2f0>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c0233b6:	e9c4 5313 	strd	r5, r3, [r4, #76]	; 0x4c
    X->p = (mbedtls_mpi_uint *) p;
 c0233ba:	6262      	str	r2, [r4, #36]	; 0x24
 c0233bc:	4a67      	ldr	r2, [pc, #412]	; (c02355c <mbedtls_ecp_group_load+0x2f4>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c0233be:	e9c4 530a 	strd	r5, r3, [r4, #40]	; 0x28
    X->p = (mbedtls_mpi_uint *) p;
 c0233c2:	6562      	str	r2, [r4, #84]	; 0x54
 c0233c4:	4a66      	ldr	r2, [pc, #408]	; (c023560 <mbedtls_ecp_group_load+0x2f8>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c0233c6:	63a3      	str	r3, [r4, #56]	; 0x38
 c0233c8:	6165      	str	r5, [r4, #20]
 c0233ca:	6225      	str	r5, [r4, #32]
    X->s = 1;
 c0233cc:	e9c4 250c 	strd	r2, r5, [r4, #48]	; 0x30
    X->p = (mbedtls_mpi_uint *) p;
 c0233d0:	4b64      	ldr	r3, [pc, #400]	; (c023564 <mbedtls_ecp_group_load+0x2fc>)
 c0233d2:	e777      	b.n	c0232c4 <mbedtls_ecp_group_load+0x5c>
    X->n = len / sizeof( mbedtls_mpi_uint );
 c0233d4:	2501      	movs	r5, #1
    X->p = (mbedtls_mpi_uint *) p;
 c0233d6:	4a64      	ldr	r2, [pc, #400]	; (c023568 <mbedtls_ecp_group_load+0x300>)
            grp->modp = ecp_mod_p224k1;
 c0233d8:	4b64      	ldr	r3, [pc, #400]	; (c02356c <mbedtls_ecp_group_load+0x304>)
    X->s = 1;
 c0233da:	e9c4 2503 	strd	r2, r5, [r4, #12]
    X->p = (mbedtls_mpi_uint *) p;
 c0233de:	4a64      	ldr	r2, [pc, #400]	; (c023570 <mbedtls_ecp_group_load+0x308>)
            grp->modp = ecp_mod_p224k1;
 c0233e0:	6663      	str	r3, [r4, #100]	; 0x64
    X->s = 1;
 c0233e2:	e9c4 2506 	strd	r2, r5, [r4, #24]
    X->p = (mbedtls_mpi_uint *) p;
 c0233e6:	4a63      	ldr	r2, [pc, #396]	; (c023574 <mbedtls_ecp_group_load+0x30c>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c0233e8:	2307      	movs	r3, #7
    X->p = (mbedtls_mpi_uint *) p;
 c0233ea:	6262      	str	r2, [r4, #36]	; 0x24
    X->n = len / sizeof( mbedtls_mpi_uint );
 c0233ec:	2208      	movs	r2, #8
 c0233ee:	6522      	str	r2, [r4, #80]	; 0x50
    X->p = (mbedtls_mpi_uint *) p;
 c0233f0:	4a61      	ldr	r2, [pc, #388]	; (c023578 <mbedtls_ecp_group_load+0x310>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c0233f2:	e9c4 5301 	strd	r5, r3, [r4, #4]
    X->p = (mbedtls_mpi_uint *) p;
 c0233f6:	6562      	str	r2, [r4, #84]	; 0x54
 c0233f8:	4a60      	ldr	r2, [pc, #384]	; (c02357c <mbedtls_ecp_group_load+0x314>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c0233fa:	e9c4 530a 	strd	r5, r3, [r4, #40]	; 0x28
 c0233fe:	63a3      	str	r3, [r4, #56]	; 0x38
 c023400:	6165      	str	r5, [r4, #20]
 c023402:	6225      	str	r5, [r4, #32]
    X->s = 1;
 c023404:	64e5      	str	r5, [r4, #76]	; 0x4c
 c023406:	e9c4 250c 	strd	r2, r5, [r4, #48]	; 0x30
    X->p = (mbedtls_mpi_uint *) p;
 c02340a:	4b5d      	ldr	r3, [pc, #372]	; (c023580 <mbedtls_ecp_group_load+0x318>)
 c02340c:	e75a      	b.n	c0232c4 <mbedtls_ecp_group_load+0x5c>
    X->n = len / sizeof( mbedtls_mpi_uint );
 c02340e:	2501      	movs	r5, #1
            grp->modp = ecp_mod_p256k1;
 c023410:	4b5c      	ldr	r3, [pc, #368]	; (c023584 <mbedtls_ecp_group_load+0x31c>)
    X->p = (mbedtls_mpi_uint *) p;
 c023412:	4a5d      	ldr	r2, [pc, #372]	; (c023588 <mbedtls_ecp_group_load+0x320>)
            grp->modp = ecp_mod_p256k1;
 c023414:	6663      	str	r3, [r4, #100]	; 0x64
    X->n = len / sizeof( mbedtls_mpi_uint );
 c023416:	2308      	movs	r3, #8
    X->s = 1;
 c023418:	e9c4 2503 	strd	r2, r5, [r4, #12]
    X->p = (mbedtls_mpi_uint *) p;
 c02341c:	4a5b      	ldr	r2, [pc, #364]	; (c02358c <mbedtls_ecp_group_load+0x324>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c02341e:	e9c4 5301 	strd	r5, r3, [r4, #4]
    X->s = 1;
 c023422:	e9c4 2506 	strd	r2, r5, [r4, #24]
    X->p = (mbedtls_mpi_uint *) p;
 c023426:	4a5a      	ldr	r2, [pc, #360]	; (c023590 <mbedtls_ecp_group_load+0x328>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c023428:	e9c4 5313 	strd	r5, r3, [r4, #76]	; 0x4c
    X->p = (mbedtls_mpi_uint *) p;
 c02342c:	6262      	str	r2, [r4, #36]	; 0x24
 c02342e:	4a59      	ldr	r2, [pc, #356]	; (c023594 <mbedtls_ecp_group_load+0x32c>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c023430:	e9c4 530a 	strd	r5, r3, [r4, #40]	; 0x28
    X->p = (mbedtls_mpi_uint *) p;
 c023434:	6562      	str	r2, [r4, #84]	; 0x54
 c023436:	4a58      	ldr	r2, [pc, #352]	; (c023598 <mbedtls_ecp_group_load+0x330>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c023438:	63a3      	str	r3, [r4, #56]	; 0x38
 c02343a:	6165      	str	r5, [r4, #20]
 c02343c:	6225      	str	r5, [r4, #32]
    X->s = 1;
 c02343e:	e9c4 250c 	strd	r2, r5, [r4, #48]	; 0x30
    X->p = (mbedtls_mpi_uint *) p;
 c023442:	4b56      	ldr	r3, [pc, #344]	; (c02359c <mbedtls_ecp_group_load+0x334>)
 c023444:	e73e      	b.n	c0232c4 <mbedtls_ecp_group_load+0x5c>
    X->n = len / sizeof( mbedtls_mpi_uint );
 c023446:	2501      	movs	r5, #1
 c023448:	2308      	movs	r3, #8
    X->p = (mbedtls_mpi_uint *) p;
 c02344a:	4a55      	ldr	r2, [pc, #340]	; (c0235a0 <mbedtls_ecp_group_load+0x338>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c02344c:	e9c4 5301 	strd	r5, r3, [r4, #4]
    X->s = 1;
 c023450:	e9c4 2503 	strd	r2, r5, [r4, #12]
    X->p = (mbedtls_mpi_uint *) p;
 c023454:	4a53      	ldr	r2, [pc, #332]	; (c0235a4 <mbedtls_ecp_group_load+0x33c>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c023456:	6163      	str	r3, [r4, #20]
    X->s = 1;
 c023458:	e9c4 2506 	strd	r2, r5, [r4, #24]
    X->p = (mbedtls_mpi_uint *) p;
 c02345c:	4a52      	ldr	r2, [pc, #328]	; (c0235a8 <mbedtls_ecp_group_load+0x340>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c02345e:	6223      	str	r3, [r4, #32]
    X->p = (mbedtls_mpi_uint *) p;
 c023460:	6262      	str	r2, [r4, #36]	; 0x24
 c023462:	4a52      	ldr	r2, [pc, #328]	; (c0235ac <mbedtls_ecp_group_load+0x344>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c023464:	e9c4 5313 	strd	r5, r3, [r4, #76]	; 0x4c
    X->p = (mbedtls_mpi_uint *) p;
 c023468:	6562      	str	r2, [r4, #84]	; 0x54
 c02346a:	4a51      	ldr	r2, [pc, #324]	; (c0235b0 <mbedtls_ecp_group_load+0x348>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c02346c:	e9c4 530a 	strd	r5, r3, [r4, #40]	; 0x28
 c023470:	63a3      	str	r3, [r4, #56]	; 0x38
    X->s = 1;
 c023472:	e9c4 250c 	strd	r2, r5, [r4, #48]	; 0x30
    X->p = (mbedtls_mpi_uint *) p;
 c023476:	4b4f      	ldr	r3, [pc, #316]	; (c0235b4 <mbedtls_ecp_group_load+0x34c>)
 c023478:	e724      	b.n	c0232c4 <mbedtls_ecp_group_load+0x5c>
    X->n = len / sizeof( mbedtls_mpi_uint );
 c02347a:	2501      	movs	r5, #1
 c02347c:	230c      	movs	r3, #12
    X->p = (mbedtls_mpi_uint *) p;
 c02347e:	4a4e      	ldr	r2, [pc, #312]	; (c0235b8 <mbedtls_ecp_group_load+0x350>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c023480:	e9c4 5301 	strd	r5, r3, [r4, #4]
    X->s = 1;
 c023484:	e9c4 2503 	strd	r2, r5, [r4, #12]
    X->p = (mbedtls_mpi_uint *) p;
 c023488:	4a4c      	ldr	r2, [pc, #304]	; (c0235bc <mbedtls_ecp_group_load+0x354>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c02348a:	6163      	str	r3, [r4, #20]
    X->s = 1;
 c02348c:	e9c4 2506 	strd	r2, r5, [r4, #24]
    X->p = (mbedtls_mpi_uint *) p;
 c023490:	4a4b      	ldr	r2, [pc, #300]	; (c0235c0 <mbedtls_ecp_group_load+0x358>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c023492:	6223      	str	r3, [r4, #32]
    X->p = (mbedtls_mpi_uint *) p;
 c023494:	6262      	str	r2, [r4, #36]	; 0x24
 c023496:	4a4b      	ldr	r2, [pc, #300]	; (c0235c4 <mbedtls_ecp_group_load+0x35c>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c023498:	e9c4 5313 	strd	r5, r3, [r4, #76]	; 0x4c
    X->p = (mbedtls_mpi_uint *) p;
 c02349c:	6562      	str	r2, [r4, #84]	; 0x54
 c02349e:	4a4a      	ldr	r2, [pc, #296]	; (c0235c8 <mbedtls_ecp_group_load+0x360>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c0234a0:	e9c4 530a 	strd	r5, r3, [r4, #40]	; 0x28
 c0234a4:	63a3      	str	r3, [r4, #56]	; 0x38
    X->s = 1;
 c0234a6:	e9c4 250c 	strd	r2, r5, [r4, #48]	; 0x30
    X->p = (mbedtls_mpi_uint *) p;
 c0234aa:	4b48      	ldr	r3, [pc, #288]	; (c0235cc <mbedtls_ecp_group_load+0x364>)
 c0234ac:	e70a      	b.n	c0232c4 <mbedtls_ecp_group_load+0x5c>
    X->n = len / sizeof( mbedtls_mpi_uint );
 c0234ae:	2501      	movs	r5, #1
 c0234b0:	2310      	movs	r3, #16
    X->p = (mbedtls_mpi_uint *) p;
 c0234b2:	4a47      	ldr	r2, [pc, #284]	; (c0235d0 <mbedtls_ecp_group_load+0x368>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c0234b4:	e9c4 5301 	strd	r5, r3, [r4, #4]
    X->s = 1;
 c0234b8:	e9c4 2503 	strd	r2, r5, [r4, #12]
    X->p = (mbedtls_mpi_uint *) p;
 c0234bc:	4a45      	ldr	r2, [pc, #276]	; (c0235d4 <mbedtls_ecp_group_load+0x36c>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c0234be:	6163      	str	r3, [r4, #20]
    X->s = 1;
 c0234c0:	e9c4 2506 	strd	r2, r5, [r4, #24]
    X->p = (mbedtls_mpi_uint *) p;
 c0234c4:	4a44      	ldr	r2, [pc, #272]	; (c0235d8 <mbedtls_ecp_group_load+0x370>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c0234c6:	6223      	str	r3, [r4, #32]
    X->p = (mbedtls_mpi_uint *) p;
 c0234c8:	6262      	str	r2, [r4, #36]	; 0x24
 c0234ca:	4a44      	ldr	r2, [pc, #272]	; (c0235dc <mbedtls_ecp_group_load+0x374>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c0234cc:	e9c4 5313 	strd	r5, r3, [r4, #76]	; 0x4c
    X->p = (mbedtls_mpi_uint *) p;
 c0234d0:	6562      	str	r2, [r4, #84]	; 0x54
 c0234d2:	4a43      	ldr	r2, [pc, #268]	; (c0235e0 <mbedtls_ecp_group_load+0x378>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 c0234d4:	e9c4 530a 	strd	r5, r3, [r4, #40]	; 0x28
 c0234d8:	63a3      	str	r3, [r4, #56]	; 0x38
    X->s = 1;
 c0234da:	e9c4 250c 	strd	r2, r5, [r4, #48]	; 0x30
    X->p = (mbedtls_mpi_uint *) p;
 c0234de:	4b41      	ldr	r3, [pc, #260]	; (c0235e4 <mbedtls_ecp_group_load+0x37c>)
 c0234e0:	e6f0      	b.n	c0232c4 <mbedtls_ecp_group_load+0x5c>
 c0234e2:	bf00      	nop
 c0234e4:	0c033ad0 	.word	0x0c033ad0
 c0234e8:	0c033a70 	.word	0x0c033a70
 c0234ec:	0c033ab8 	.word	0x0c033ab8
 c0234f0:	0c033a88 	.word	0x0c033a88
 c0234f4:	0c033aa0 	.word	0x0c033aa0
 c0234f8:	30035b40 	.word	0x30035b40
 c0234fc:	0c033bd4 	.word	0x0c033bd4
 c023500:	0c033b64 	.word	0x0c033b64
 c023504:	0c033bb8 	.word	0x0c033bb8
 c023508:	0c033b80 	.word	0x0c033b80
 c02350c:	0c033b9c 	.word	0x0c033b9c
 c023510:	0c033cfc 	.word	0x0c033cfc
 c023514:	0c033c7c 	.word	0x0c033c7c
 c023518:	0c033cdc 	.word	0x0c033cdc
 c02351c:	0c033c9c 	.word	0x0c033c9c
 c023520:	0c033cbc 	.word	0x0c033cbc
 c023524:	0c033ddc 	.word	0x0c033ddc
 c023528:	0c033d1c 	.word	0x0c033d1c
 c02352c:	0c033dac 	.word	0x0c033dac
 c023530:	0c033d4c 	.word	0x0c033d4c
 c023534:	0c033d7c 	.word	0x0c033d7c
 c023538:	0c033f1c 	.word	0x0c033f1c
 c02353c:	0c033e0c 	.word	0x0c033e0c
 c023540:	0c033ed8 	.word	0x0c033ed8
 c023544:	0c033e50 	.word	0x0c033e50
 c023548:	0c033e94 	.word	0x0c033e94
 c02354c:	0c023245 	.word	0x0c023245
 c023550:	0c033a58 	.word	0x0c033a58
 c023554:	0c033a08 	.word	0x0c033a08
 c023558:	0c033a0c 	.word	0x0c033a0c
 c02355c:	0c033a40 	.word	0x0c033a40
 c023560:	0c033a10 	.word	0x0c033a10
 c023564:	0c033a28 	.word	0x0c033a28
 c023568:	0c033b48 	.word	0x0c033b48
 c02356c:	0c023251 	.word	0x0c023251
 c023570:	0c033ae8 	.word	0x0c033ae8
 c023574:	0c033aec 	.word	0x0c033aec
 c023578:	0c033b28 	.word	0x0c033b28
 c02357c:	0c033af0 	.word	0x0c033af0
 c023580:	0c033b0c 	.word	0x0c033b0c
 c023584:	0c02325d 	.word	0x0c02325d
 c023588:	0c033c5c 	.word	0x0c033c5c
 c02358c:	0c033bf4 	.word	0x0c033bf4
 c023590:	0c033bf8 	.word	0x0c033bf8
 c023594:	0c033c3c 	.word	0x0c033c3c
 c023598:	0c033bfc 	.word	0x0c033bfc
 c02359c:	0c033c1c 	.word	0x0c033c1c
 c0235a0:	0c0336e0 	.word	0x0c0336e0
 c0235a4:	0c033640 	.word	0x0c033640
 c0235a8:	0c033660 	.word	0x0c033660
 c0235ac:	0c0336c0 	.word	0x0c0336c0
 c0235b0:	0c033680 	.word	0x0c033680
 c0235b4:	0c0336a0 	.word	0x0c0336a0
 c0235b8:	0c0337f0 	.word	0x0c0337f0
 c0235bc:	0c033700 	.word	0x0c033700
 c0235c0:	0c033730 	.word	0x0c033730
 c0235c4:	0c0337c0 	.word	0x0c0337c0
 c0235c8:	0c033760 	.word	0x0c033760
 c0235cc:	0c033790 	.word	0x0c033790
 c0235d0:	0c033960 	.word	0x0c033960
 c0235d4:	0c033820 	.word	0x0c033820
 c0235d8:	0c033860 	.word	0x0c033860
 c0235dc:	0c033920 	.word	0x0c033920
 c0235e0:	0c0338a0 	.word	0x0c0338a0
 c0235e4:	0c0338e0 	.word	0x0c0338e0
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->A, 16, "01DB42" ) );
 c0235e8:	2110      	movs	r1, #16
            grp->modp = ecp_mod_p255;
 c0235ea:	4b61      	ldr	r3, [pc, #388]	; (c023770 <mbedtls_ecp_group_load+0x508>)
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->A, 16, "01DB42" ) );
 c0235ec:	4a61      	ldr	r2, [pc, #388]	; (c023774 <mbedtls_ecp_group_load+0x50c>)
            grp->modp = ecp_mod_p255;
 c0235ee:	6663      	str	r3, [r4, #100]	; 0x64
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->A, 16, "01DB42" ) );
 c0235f0:	1860      	adds	r0, r4, r1
 c0235f2:	f7fa ffbb 	bl	c01e56c <mbedtls_mpi_read_string>
 c0235f6:	4605      	mov	r5, r0
 c0235f8:	2800      	cmp	r0, #0
 c0235fa:	f040 80b0 	bne.w	c02375e <mbedtls_ecp_group_load+0x4f6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->P, 1 ) );
 c0235fe:	1d26      	adds	r6, r4, #4
 c023600:	2101      	movs	r1, #1
 c023602:	4630      	mov	r0, r6
 c023604:	f7fa fb52 	bl	c01dcac <mbedtls_mpi_lset>
 c023608:	4605      	mov	r5, r0
 c02360a:	2800      	cmp	r0, #0
 c02360c:	f040 80a7 	bne.w	c02375e <mbedtls_ecp_group_load+0x4f6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 255 ) );
 c023610:	21ff      	movs	r1, #255	; 0xff
 c023612:	4630      	mov	r0, r6
 c023614:	f7fa fcb6 	bl	c01df84 <mbedtls_mpi_shift_l>
 c023618:	4605      	mov	r5, r0
 c02361a:	2800      	cmp	r0, #0
 c02361c:	f040 809f 	bne.w	c02375e <mbedtls_ecp_group_load+0x4f6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 19 ) );
 c023620:	2213      	movs	r2, #19
 c023622:	4631      	mov	r1, r6
 c023624:	4630      	mov	r0, r6
 c023626:	f7fa ff15 	bl	c01e454 <mbedtls_mpi_sub_int>
 c02362a:	4605      	mov	r5, r0
 c02362c:	2800      	cmp	r0, #0
 c02362e:	f040 8096 	bne.w	c02375e <mbedtls_ecp_group_load+0x4f6>
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 c023632:	4630      	mov	r0, r6
 c023634:	f7fa fbaa 	bl	c01dd8c <mbedtls_mpi_bitlen>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->N, 16,
 c023638:	f104 064c 	add.w	r6, r4, #76	; 0x4c
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 c02363c:	65a0      	str	r0, [r4, #88]	; 0x58
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->N, 16,
 c02363e:	4a4e      	ldr	r2, [pc, #312]	; (c023778 <mbedtls_ecp_group_load+0x510>)
 c023640:	2110      	movs	r1, #16
 c023642:	4630      	mov	r0, r6
 c023644:	f7fa ff92 	bl	c01e56c <mbedtls_mpi_read_string>
 c023648:	4605      	mov	r5, r0
 c02364a:	2800      	cmp	r0, #0
 c02364c:	f040 8087 	bne.w	c02375e <mbedtls_ecp_group_load+0x4f6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( &grp->N, 252, 1 ) );
 c023650:	2201      	movs	r2, #1
 c023652:	21fc      	movs	r1, #252	; 0xfc
 c023654:	4630      	mov	r0, r6
 c023656:	f7fa fb55 	bl	c01dd04 <mbedtls_mpi_set_bit>
 c02365a:	4605      	mov	r5, r0
 c02365c:	2800      	cmp	r0, #0
 c02365e:	d17e      	bne.n	c02375e <mbedtls_ecp_group_load+0x4f6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.X, 9 ) );
 c023660:	2109      	movs	r1, #9
 c023662:	f104 0028 	add.w	r0, r4, #40	; 0x28
 c023666:	f7fa fb21 	bl	c01dcac <mbedtls_mpi_lset>
 c02366a:	4605      	mov	r5, r0
 c02366c:	2800      	cmp	r0, #0
 c02366e:	d176      	bne.n	c02375e <mbedtls_ecp_group_load+0x4f6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.Z, 1 ) );
 c023670:	2101      	movs	r1, #1
 c023672:	f104 0040 	add.w	r0, r4, #64	; 0x40
 c023676:	f7fa fb19 	bl	c01dcac <mbedtls_mpi_lset>
 c02367a:	4605      	mov	r5, r0
 c02367c:	2800      	cmp	r0, #0
 c02367e:	d16e      	bne.n	c02375e <mbedtls_ecp_group_load+0x4f6>
    mbedtls_mpi_free( &grp->G.Y );
 c023680:	f104 0034 	add.w	r0, r4, #52	; 0x34
 c023684:	f7fa f9ea 	bl	c01da5c <mbedtls_mpi_free>
    grp->nbits = 254;
 c023688:	23fe      	movs	r3, #254	; 0xfe
 c02368a:	65e3      	str	r3, [r4, #92]	; 0x5c
 c02368c:	e62a      	b.n	c0232e4 <mbedtls_ecp_group_load+0x7c>
            grp->modp = ecp_mod_p448;
 c02368e:	4b3b      	ldr	r3, [pc, #236]	; (c02377c <mbedtls_ecp_group_load+0x514>)
    mbedtls_mpi_init( &Ns );
 c023690:	a801      	add	r0, sp, #4
            grp->modp = ecp_mod_p448;
 c023692:	6663      	str	r3, [r4, #100]	; 0x64
    mbedtls_mpi_init( &Ns );
 c023694:	f7fa f9dc 	bl	c01da50 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->A, 16, "98AA" ) );
 c023698:	2110      	movs	r1, #16
 c02369a:	4a39      	ldr	r2, [pc, #228]	; (c023780 <mbedtls_ecp_group_load+0x518>)
 c02369c:	1860      	adds	r0, r4, r1
 c02369e:	f7fa ff65 	bl	c01e56c <mbedtls_mpi_read_string>
 c0236a2:	4605      	mov	r5, r0
 c0236a4:	2800      	cmp	r0, #0
 c0236a6:	d154      	bne.n	c023752 <mbedtls_ecp_group_load+0x4ea>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->P, 1 ) );
 c0236a8:	1d26      	adds	r6, r4, #4
 c0236aa:	2101      	movs	r1, #1
 c0236ac:	4630      	mov	r0, r6
 c0236ae:	f7fa fafd 	bl	c01dcac <mbedtls_mpi_lset>
 c0236b2:	4605      	mov	r5, r0
 c0236b4:	2800      	cmp	r0, #0
 c0236b6:	d14c      	bne.n	c023752 <mbedtls_ecp_group_load+0x4ea>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 224 ) );
 c0236b8:	21e0      	movs	r1, #224	; 0xe0
 c0236ba:	4630      	mov	r0, r6
 c0236bc:	f7fa fc62 	bl	c01df84 <mbedtls_mpi_shift_l>
 c0236c0:	4605      	mov	r5, r0
 c0236c2:	2800      	cmp	r0, #0
 c0236c4:	d145      	bne.n	c023752 <mbedtls_ecp_group_load+0x4ea>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 1 ) );
 c0236c6:	2201      	movs	r2, #1
 c0236c8:	4631      	mov	r1, r6
 c0236ca:	4630      	mov	r0, r6
 c0236cc:	f7fa fec2 	bl	c01e454 <mbedtls_mpi_sub_int>
 c0236d0:	4605      	mov	r5, r0
 c0236d2:	2800      	cmp	r0, #0
 c0236d4:	d13d      	bne.n	c023752 <mbedtls_ecp_group_load+0x4ea>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 224 ) );
 c0236d6:	21e0      	movs	r1, #224	; 0xe0
 c0236d8:	4630      	mov	r0, r6
 c0236da:	f7fa fc53 	bl	c01df84 <mbedtls_mpi_shift_l>
 c0236de:	4605      	mov	r5, r0
 c0236e0:	bbb8      	cbnz	r0, c023752 <mbedtls_ecp_group_load+0x4ea>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 1 ) );
 c0236e2:	2201      	movs	r2, #1
 c0236e4:	4631      	mov	r1, r6
 c0236e6:	4630      	mov	r0, r6
 c0236e8:	f7fa feb4 	bl	c01e454 <mbedtls_mpi_sub_int>
 c0236ec:	4605      	mov	r5, r0
 c0236ee:	bb80      	cbnz	r0, c023752 <mbedtls_ecp_group_load+0x4ea>
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 c0236f0:	4630      	mov	r0, r6
 c0236f2:	f7fa fb4b 	bl	c01dd8c <mbedtls_mpi_bitlen>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.X, 5 ) );
 c0236f6:	2105      	movs	r1, #5
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 c0236f8:	65a0      	str	r0, [r4, #88]	; 0x58
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.X, 5 ) );
 c0236fa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 c0236fe:	f7fa fad5 	bl	c01dcac <mbedtls_mpi_lset>
 c023702:	4605      	mov	r5, r0
 c023704:	bb28      	cbnz	r0, c023752 <mbedtls_ecp_group_load+0x4ea>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.Z, 1 ) );
 c023706:	2101      	movs	r1, #1
 c023708:	f104 0040 	add.w	r0, r4, #64	; 0x40
 c02370c:	f7fa face 	bl	c01dcac <mbedtls_mpi_lset>
 c023710:	4605      	mov	r5, r0
 c023712:	b9f0      	cbnz	r0, c023752 <mbedtls_ecp_group_load+0x4ea>
    mbedtls_mpi_free( &grp->G.Y );
 c023714:	f104 0034 	add.w	r0, r4, #52	; 0x34
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( &grp->N, 446, 1 ) );
 c023718:	f104 064c 	add.w	r6, r4, #76	; 0x4c
    mbedtls_mpi_free( &grp->G.Y );
 c02371c:	f7fa f99e 	bl	c01da5c <mbedtls_mpi_free>
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( &grp->N, 446, 1 ) );
 c023720:	2201      	movs	r2, #1
 c023722:	f44f 71df 	mov.w	r1, #446	; 0x1be
 c023726:	4630      	mov	r0, r6
 c023728:	f7fa faec 	bl	c01dd04 <mbedtls_mpi_set_bit>
 c02372c:	4605      	mov	r5, r0
 c02372e:	b980      	cbnz	r0, c023752 <mbedtls_ecp_group_load+0x4ea>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &Ns, 16,
 c023730:	4a14      	ldr	r2, [pc, #80]	; (c023784 <mbedtls_ecp_group_load+0x51c>)
 c023732:	2110      	movs	r1, #16
 c023734:	a801      	add	r0, sp, #4
 c023736:	f7fa ff19 	bl	c01e56c <mbedtls_mpi_read_string>
 c02373a:	4605      	mov	r5, r0
 c02373c:	b948      	cbnz	r0, c023752 <mbedtls_ecp_group_load+0x4ea>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &grp->N, &grp->N, &Ns ) );
 c02373e:	aa01      	add	r2, sp, #4
 c023740:	4631      	mov	r1, r6
 c023742:	4630      	mov	r0, r6
 c023744:	f7fa fe4d 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c023748:	4605      	mov	r5, r0
 c02374a:	b910      	cbnz	r0, c023752 <mbedtls_ecp_group_load+0x4ea>
    grp->nbits = 447;
 c02374c:	f240 13bf 	movw	r3, #447	; 0x1bf
 c023750:	65e3      	str	r3, [r4, #92]	; 0x5c
    mbedtls_mpi_free( &Ns );
 c023752:	a801      	add	r0, sp, #4
 c023754:	f7fa f982 	bl	c01da5c <mbedtls_mpi_free>
    if( ret != 0 )
 c023758:	2d00      	cmp	r5, #0
 c02375a:	f43f adc3 	beq.w	c0232e4 <mbedtls_ecp_group_load+0x7c>
        mbedtls_ecp_group_free( grp );
 c02375e:	4620      	mov	r0, r4
 c023760:	f7fe f943 	bl	c0219ea <mbedtls_ecp_group_free>
 c023764:	e5be      	b.n	c0232e4 <mbedtls_ecp_group_load+0x7c>
            mbedtls_ecp_group_free( grp );
 c023766:	4620      	mov	r0, r4
 c023768:	f7fe f93f 	bl	c0219ea <mbedtls_ecp_group_free>
            return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 c02376c:	4d06      	ldr	r5, [pc, #24]	; (c023788 <mbedtls_ecp_group_load+0x520>)
 c02376e:	e5b9      	b.n	c0232e4 <mbedtls_ecp_group_load+0x7c>
 c023770:	0c0230d5 	.word	0x0c0230d5
 c023774:	0c0339a0 	.word	0x0c0339a0
 c023778:	0c0339a7 	.word	0x0c0339a7
 c02377c:	0c022ff1 	.word	0x0c022ff1
 c023780:	0c0339c8 	.word	0x0c0339c8
 c023784:	0c0339cd 	.word	0x0c0339cd
 c023788:	ffffb180 	.word	0xffffb180

0c02378c <entropy_update>:
/*
 * Entropy accumulator update
 */
static int entropy_update( mbedtls_entropy_context *ctx, unsigned char source_id,
                           const unsigned char *data, size_t len )
{
 c02378c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unsigned char tmp[MBEDTLS_ENTROPY_BLOCK_SIZE];
    size_t use_len = len;
    const unsigned char *p = data;
    int ret = 0;

    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 c023790:	2b40      	cmp	r3, #64	; 0x40
{
 c023792:	b092      	sub	sp, #72	; 0x48
 c023794:	4680      	mov	r8, r0
 c023796:	460e      	mov	r6, r1
 c023798:	4617      	mov	r7, r2
 c02379a:	461d      	mov	r5, r3
    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 c02379c:	d909      	bls.n	c0237b2 <entropy_update+0x26>
    {
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
        if( ( ret = mbedtls_sha512_ret( data, len, tmp, 0 ) ) != 0 )
 c02379e:	2300      	movs	r3, #0
 c0237a0:	aa02      	add	r2, sp, #8
 c0237a2:	4629      	mov	r1, r5
 c0237a4:	4638      	mov	r0, r7
 c0237a6:	f009 fc98 	bl	c02d0da <mbedtls_sha512_ret>
 c0237aa:	4604      	mov	r4, r0
 c0237ac:	bb08      	cbnz	r0, c0237f2 <entropy_update+0x66>
#else
        if( ( ret = mbedtls_sha256_ret( data, len, tmp, 0 ) ) != 0 )
            goto cleanup;
#endif
        p = tmp;
        use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;
 c0237ae:	2540      	movs	r5, #64	; 0x40
        p = tmp;
 c0237b0:	af02      	add	r7, sp, #8
     * Start the accumulator if this has not already happened. Note that
     * it is sufficient to start the accumulator here only because all calls to
     * gather entropy eventually execute this code.
     */
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    if( ctx->accumulator_started == 0 &&
 c0237b2:	f8d8 1000 	ldr.w	r1, [r8]
    header[0] = source_id;
 c0237b6:	f88d 6004 	strb.w	r6, [sp, #4]
    header[1] = use_len & 0xFF;
 c0237ba:	f88d 5005 	strb.w	r5, [sp, #5]
 c0237be:	f108 0608 	add.w	r6, r8, #8
    if( ctx->accumulator_started == 0 &&
 c0237c2:	b181      	cbz	r1, c0237e6 <entropy_update+0x5a>
        ( ret = mbedtls_sha512_starts_ret( &ctx->accumulator, 0 ) ) != 0 )
        goto cleanup;
    else
        ctx->accumulator_started = 1;
 c0237c4:	2301      	movs	r3, #1
    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, header, 2 ) ) != 0 )
 c0237c6:	2202      	movs	r2, #2
        ctx->accumulator_started = 1;
 c0237c8:	f8c8 3000 	str.w	r3, [r8]
    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, header, 2 ) ) != 0 )
 c0237cc:	a901      	add	r1, sp, #4
 c0237ce:	4630      	mov	r0, r6
 c0237d0:	f009 faf6 	bl	c02cdc0 <mbedtls_sha512_update_ret>
 c0237d4:	4604      	mov	r4, r0
 c0237d6:	b960      	cbnz	r0, c0237f2 <entropy_update+0x66>
        goto cleanup;
    ret = mbedtls_sha512_update_ret( &ctx->accumulator, p, use_len );
 c0237d8:	462a      	mov	r2, r5
 c0237da:	4639      	mov	r1, r7
 c0237dc:	4630      	mov	r0, r6
 c0237de:	f009 faef 	bl	c02cdc0 <mbedtls_sha512_update_ret>
 c0237e2:	4604      	mov	r4, r0
 c0237e4:	e005      	b.n	c0237f2 <entropy_update+0x66>
    if( ctx->accumulator_started == 0 &&
 c0237e6:	4630      	mov	r0, r6
 c0237e8:	f008 fba2 	bl	c02bf30 <mbedtls_sha512_starts_ret>
 c0237ec:	4604      	mov	r4, r0
 c0237ee:	2800      	cmp	r0, #0
 c0237f0:	d0e8      	beq.n	c0237c4 <entropy_update+0x38>
        goto cleanup;
    ret = mbedtls_sha256_update_ret( &ctx->accumulator, p, use_len );
#endif

cleanup:
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 c0237f2:	a802      	add	r0, sp, #8
 c0237f4:	2140      	movs	r1, #64	; 0x40
 c0237f6:	f002 ff97 	bl	c026728 <mbedtls_platform_zeroize>

    return( ret );
}
 c0237fa:	4620      	mov	r0, r4
 c0237fc:	b012      	add	sp, #72	; 0x48
 c0237fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0c023802 <entropy_gather_internal>:

/*
 * Run through the different sources to add entropy to our accumulator
 */
static int entropy_gather_internal( mbedtls_entropy_context *ctx )
{
 c023802:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int ret, i, have_one_strong = 0;
    unsigned char buf[MBEDTLS_ENTROPY_MAX_GATHER];
    size_t olen;

    if( ctx->source_count == 0 )
 c023806:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
{
 c02380a:	b0a3      	sub	sp, #140	; 0x8c
 c02380c:	4680      	mov	r8, r0
    if( ctx->source_count == 0 )
 c02380e:	2b00      	cmp	r3, #0
 c023810:	d03a      	beq.n	c023888 <entropy_gather_internal+0x86>
    int ret, i, have_one_strong = 0;
 c023812:	2600      	movs	r6, #0
 c023814:	4604      	mov	r4, r0
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );

    /*
     * Run through our entropy sources
     */
    for( i = 0; i < ctx->source_count; i++ )
 c023816:	4637      	mov	r7, r6
    {
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
            have_one_strong = 1;

        olen = 0;
 c023818:	46b1      	mov	r9, r6
    for( i = 0; i < ctx->source_count; i++ )
 c02381a:	f8d8 30e0 	ldr.w	r3, [r8, #224]	; 0xe0
 c02381e:	42bb      	cmp	r3, r7
 c023820:	dc0c      	bgt.n	c02383c <entropy_gather_internal+0x3a>
            ctx->source[i].size += olen;
        }
    }

    if( have_one_strong == 0 )
        ret = MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE;
 c023822:	2e00      	cmp	r6, #0
 c023824:	bf14      	ite	ne
 c023826:	2500      	movne	r5, #0
 c023828:	f06f 053c 	mvneq.w	r5, #60	; 0x3c

cleanup:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 c02382c:	2180      	movs	r1, #128	; 0x80
 c02382e:	a802      	add	r0, sp, #8
 c023830:	f002 ff7a 	bl	c026728 <mbedtls_platform_zeroize>

    return( ret );
}
 c023834:	4628      	mov	r0, r5
 c023836:	b023      	add	sp, #140	; 0x8c
 c023838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
 c02383c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 c023840:	f8d4 50e4 	ldr.w	r5, [r4, #228]	; 0xe4
            have_one_strong = 1;
 c023844:	2b01      	cmp	r3, #1
        olen = 0;
 c023846:	f8cd 9004 	str.w	r9, [sp, #4]
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 c02384a:	ab01      	add	r3, sp, #4
 c02384c:	f04f 0280 	mov.w	r2, #128	; 0x80
 c023850:	a902      	add	r1, sp, #8
 c023852:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
            have_one_strong = 1;
 c023856:	bf08      	it	eq
 c023858:	2601      	moveq	r6, #1
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 c02385a:	47a8      	blx	r5
 c02385c:	4605      	mov	r5, r0
 c02385e:	2800      	cmp	r0, #0
 c023860:	d1e4      	bne.n	c02382c <entropy_gather_internal+0x2a>
        if( olen > 0 )
 c023862:	9b01      	ldr	r3, [sp, #4]
 c023864:	b16b      	cbz	r3, c023882 <entropy_gather_internal+0x80>
            if( ( ret = entropy_update( ctx, (unsigned char) i,
 c023866:	aa02      	add	r2, sp, #8
 c023868:	b2f9      	uxtb	r1, r7
 c02386a:	4640      	mov	r0, r8
 c02386c:	f7ff ff8e 	bl	c02378c <entropy_update>
 c023870:	4605      	mov	r5, r0
 c023872:	2800      	cmp	r0, #0
 c023874:	d1de      	bne.n	c023834 <entropy_gather_internal+0x32>
            ctx->source[i].size += olen;
 c023876:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 c02387a:	9a01      	ldr	r2, [sp, #4]
 c02387c:	4413      	add	r3, r2
 c02387e:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    for( i = 0; i < ctx->source_count; i++ )
 c023882:	3701      	adds	r7, #1
 c023884:	3414      	adds	r4, #20
 c023886:	e7c8      	b.n	c02381a <entropy_gather_internal+0x18>
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );
 c023888:	f06f 053f 	mvn.w	r5, #63	; 0x3f
 c02388c:	e7d2      	b.n	c023834 <entropy_gather_internal+0x32>
	...

0c023890 <mbedtls_entropy_init>:
{
 c023890:	b538      	push	{r3, r4, r5, lr}
    ctx->source_count = 0;
 c023892:	2500      	movs	r5, #0
{
 c023894:	4604      	mov	r4, r0
    memset( ctx->source, 0, sizeof( ctx->source ) );
 c023896:	f44f 72c8 	mov.w	r2, #400	; 0x190
    ctx->source_count = 0;
 c02389a:	f8c0 50e0 	str.w	r5, [r0, #224]	; 0xe0
    memset( ctx->source, 0, sizeof( ctx->source ) );
 c02389e:	4629      	mov	r1, r5
 c0238a0:	30e4      	adds	r0, #228	; 0xe4
 c0238a2:	f7f1 f890 	bl	c0149c6 <memset>
    ctx->accumulator_started = 0;
 c0238a6:	4620      	mov	r0, r4
 c0238a8:	f840 5b08 	str.w	r5, [r0], #8
    mbedtls_sha512_init( &ctx->accumulator );
 c0238ac:	f008 fb32 	bl	c02bf14 <mbedtls_sha512_init>
    idx = ctx->source_count;
 c0238b0:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
    if( idx >= MBEDTLS_ENTROPY_MAX_SOURCES )
 c0238b4:	2a13      	cmp	r2, #19
 c0238b6:	dc0c      	bgt.n	c0238d2 <mbedtls_entropy_init+0x42>
    ctx->source[idx].f_source  = f_source;
 c0238b8:	2314      	movs	r3, #20
 c0238ba:	fb03 4302 	mla	r3, r3, r2, r4
 c0238be:	4905      	ldr	r1, [pc, #20]	; (c0238d4 <mbedtls_entropy_init+0x44>)
    ctx->source[idx].strong    = strong;
 c0238c0:	2020      	movs	r0, #32
    ctx->source[idx].p_source  = p_source;
 c0238c2:	e9c3 1539 	strd	r1, r5, [r3, #228]	; 0xe4
    ctx->source[idx].strong    = strong;
 c0238c6:	2101      	movs	r1, #1
    ctx->source_count++;
 c0238c8:	440a      	add	r2, r1
    ctx->source[idx].strong    = strong;
 c0238ca:	e9c3 013c 	strd	r0, r1, [r3, #240]	; 0xf0
    ctx->source_count++;
 c0238ce:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
}
 c0238d2:	bd38      	pop	{r3, r4, r5, pc}
 c0238d4:	0c019b31 	.word	0x0c019b31

0c0238d8 <mbedtls_entropy_free>:
{
 c0238d8:	b538      	push	{r3, r4, r5, lr}
 c0238da:	4604      	mov	r4, r0
    ctx->source_count = 0;
 c0238dc:	2500      	movs	r5, #0
    mbedtls_sha512_free( &ctx->accumulator );
 c0238de:	3008      	adds	r0, #8
 c0238e0:	f008 fb1c 	bl	c02bf1c <mbedtls_sha512_free>
    ctx->source_count = 0;
 c0238e4:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
    mbedtls_platform_zeroize( ctx->source, sizeof( ctx->source ) );
 c0238e8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 c0238ec:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 c0238f0:	f002 ff1a 	bl	c026728 <mbedtls_platform_zeroize>
    ctx->accumulator_started = 0;
 c0238f4:	6025      	str	r5, [r4, #0]
}
 c0238f6:	bd38      	pop	{r3, r4, r5, pc}

0c0238f8 <mbedtls_entropy_func>:

    return( ret );
}

int mbedtls_entropy_func( void *data, unsigned char *output, size_t len )
{
 c0238f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret, count = 0, i, done;
    mbedtls_entropy_context *ctx = (mbedtls_entropy_context *) data;
    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];

    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 c0238fc:	2a40      	cmp	r2, #64	; 0x40
{
 c0238fe:	b090      	sub	sp, #64	; 0x40
 c023900:	4605      	mov	r5, r0
 c023902:	4688      	mov	r8, r1
 c023904:	4617      	mov	r7, r2
    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 c023906:	d85c      	bhi.n	c0239c2 <mbedtls_entropy_func+0xca>
 c023908:	f44f 7681 	mov.w	r6, #258	; 0x102
    /*
     * Always gather extra entropy before a call
     */
    do
    {
        if( count++ > ENTROPY_MAX_LOOP )
 c02390c:	3e01      	subs	r6, #1
 c02390e:	d055      	beq.n	c0239bc <mbedtls_entropy_func+0xc4>
        {
            ret = MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
            goto exit;
        }

        if( ( ret = entropy_gather_internal( ctx ) ) != 0 )
 c023910:	4628      	mov	r0, r5
 c023912:	f7ff ff76 	bl	c023802 <entropy_gather_internal>
 c023916:	4604      	mov	r4, r0
 c023918:	bbd0      	cbnz	r0, c023990 <mbedtls_entropy_func+0x98>
 c02391a:	462a      	mov	r2, r5
            goto exit;

        done = 1;
 c02391c:	2101      	movs	r1, #1
        for( i = 0; i < ctx->source_count; i++ )
 c02391e:	f8d5 c0e0 	ldr.w	ip, [r5, #224]	; 0xe0
 c023922:	45a4      	cmp	ip, r4
 c023924:	dc3c      	bgt.n	c0239a0 <mbedtls_entropy_func+0xa8>
            if( ctx->source[i].size < ctx->source[i].threshold )
                done = 0;
    }
    while( ! done );
 c023926:	2900      	cmp	r1, #0
 c023928:	d0f0      	beq.n	c02390c <mbedtls_entropy_func+0x14>

    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );
 c02392a:	2240      	movs	r2, #64	; 0x40
 c02392c:	2100      	movs	r1, #0
 c02392e:	4668      	mov	r0, sp
    /*
     * Note that at this stage it is assumed that the accumulator was started
     * in a previous call to entropy_update(). If this is not guaranteed, the
     * code below will fail.
     */
    if( ( ret = mbedtls_sha512_finish_ret( &ctx->accumulator, buf ) ) != 0 )
 c023930:	f105 0608 	add.w	r6, r5, #8
    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );
 c023934:	f7f1 f847 	bl	c0149c6 <memset>
    if( ( ret = mbedtls_sha512_finish_ret( &ctx->accumulator, buf ) ) != 0 )
 c023938:	4669      	mov	r1, sp
 c02393a:	4630      	mov	r0, r6
 c02393c:	f009 fa93 	bl	c02ce66 <mbedtls_sha512_finish_ret>
 c023940:	4604      	mov	r4, r0
 c023942:	bb28      	cbnz	r0, c023990 <mbedtls_entropy_func+0x98>
        goto exit;

    /*
     * Reset accumulator and counters and recycle existing entropy
     */
    mbedtls_sha512_free( &ctx->accumulator );
 c023944:	4630      	mov	r0, r6
 c023946:	f008 fae9 	bl	c02bf1c <mbedtls_sha512_free>
    mbedtls_sha512_init( &ctx->accumulator );
 c02394a:	4630      	mov	r0, r6
 c02394c:	f008 fae2 	bl	c02bf14 <mbedtls_sha512_init>
    if( ( ret = mbedtls_sha512_starts_ret( &ctx->accumulator, 0 ) ) != 0 )
 c023950:	4621      	mov	r1, r4
 c023952:	4630      	mov	r0, r6
 c023954:	f008 faec 	bl	c02bf30 <mbedtls_sha512_starts_ret>
 c023958:	4604      	mov	r4, r0
 c02395a:	b9c8      	cbnz	r0, c023990 <mbedtls_entropy_func+0x98>
        goto exit;
    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, buf,
 c02395c:	2240      	movs	r2, #64	; 0x40
 c02395e:	4669      	mov	r1, sp
 c023960:	4630      	mov	r0, r6
 c023962:	f009 fa2d 	bl	c02cdc0 <mbedtls_sha512_update_ret>
 c023966:	4604      	mov	r4, r0
 c023968:	b990      	cbnz	r0, c023990 <mbedtls_entropy_func+0x98>
        goto exit;

    /*
     * Perform second SHA-512 on entropy
     */
    if( ( ret = mbedtls_sha512_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
 c02396a:	4603      	mov	r3, r0
 c02396c:	466a      	mov	r2, sp
 c02396e:	2140      	movs	r1, #64	; 0x40
 c023970:	4668      	mov	r0, sp
 c023972:	f009 fbb2 	bl	c02d0da <mbedtls_sha512_ret>
 c023976:	4604      	mov	r4, r0
 c023978:	b950      	cbnz	r0, c023990 <mbedtls_entropy_func+0x98>
    if( ( ret = mbedtls_sha256_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
                                    buf, 0 ) ) != 0 )
        goto exit;
#endif /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */

    for( i = 0; i < ctx->source_count; i++ )
 c02397a:	4603      	mov	r3, r0
        ctx->source[i].size = 0;
 c02397c:	2114      	movs	r1, #20
    for( i = 0; i < ctx->source_count; i++ )
 c02397e:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 c023982:	429a      	cmp	r2, r3
 c023984:	dc14      	bgt.n	c0239b0 <mbedtls_entropy_func+0xb8>

    memcpy( output, buf, len );
 c023986:	463a      	mov	r2, r7
 c023988:	4669      	mov	r1, sp
 c02398a:	4640      	mov	r0, r8
 c02398c:	f7f0 fff7 	bl	c01497e <memcpy>

    ret = 0;

exit:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 c023990:	2140      	movs	r1, #64	; 0x40
 c023992:	4668      	mov	r0, sp
 c023994:	f002 fec8 	bl	c026728 <mbedtls_platform_zeroize>
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
}
 c023998:	4620      	mov	r0, r4
 c02399a:	b010      	add	sp, #64	; 0x40
 c02399c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                done = 0;
 c0239a0:	e9d2 033b 	ldrd	r0, r3, [r2, #236]	; 0xec
        for( i = 0; i < ctx->source_count; i++ )
 c0239a4:	3401      	adds	r4, #1
                done = 0;
 c0239a6:	4298      	cmp	r0, r3
 c0239a8:	bf38      	it	cc
 c0239aa:	2100      	movcc	r1, #0
 c0239ac:	3214      	adds	r2, #20
 c0239ae:	e7b8      	b.n	c023922 <mbedtls_entropy_func+0x2a>
        ctx->source[i].size = 0;
 c0239b0:	fb01 5603 	mla	r6, r1, r3, r5
    for( i = 0; i < ctx->source_count; i++ )
 c0239b4:	3301      	adds	r3, #1
        ctx->source[i].size = 0;
 c0239b6:	f8c6 00ec 	str.w	r0, [r6, #236]	; 0xec
 c0239ba:	e7e2      	b.n	c023982 <mbedtls_entropy_func+0x8a>
            ret = MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
 c0239bc:	f06f 043b 	mvn.w	r4, #59	; 0x3b
 c0239c0:	e7e6      	b.n	c023990 <mbedtls_entropy_func+0x98>
        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );
 c0239c2:	f06f 043b 	mvn.w	r4, #59	; 0x3b
 c0239c6:	e7e7      	b.n	c023998 <mbedtls_entropy_func+0xa0>

0c0239c8 <gcm_mult>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
 c0239c8:	460b      	mov	r3, r1
 c0239ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        mbedtls_aesni_gcm_mult( output, x, h );
        return;
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;
 c0239ce:	7bc9      	ldrb	r1, [r1, #15]
{
 c0239d0:	b087      	sub	sp, #28
 c0239d2:	f001 010f 	and.w	r1, r1, #15
 c0239d6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 c0239da:	9005      	str	r0, [sp, #20]

    zh = ctx->HH[lo];
 c0239dc:	e9d1 4532 	ldrd	r4, r5, [r1, #200]	; 0xc8
    zl = ctx->HL[lo];
 c0239e0:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 c0239e4:	e9cd 0100 	strd	r0, r1, [sp]
 c0239e8:	f103 0e10 	add.w	lr, r3, #16
 c0239ec:	9900      	ldr	r1, [sp, #0]
 c0239ee:	4855      	ldr	r0, [pc, #340]	; (c023b44 <gcm_mult+0x17c>)
 c0239f0:	f001 010f 	and.w	r1, r1, #15
 c0239f4:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 c0239f8:	9801      	ldr	r0, [sp, #4]
 c0239fa:	0409      	lsls	r1, r1, #16
 c0239fc:	468b      	mov	fp, r1
 c0239fe:	2100      	movs	r1, #0
 c023a00:	460e      	mov	r6, r1
 c023a02:	468a      	mov	sl, r1
 c023a04:	9900      	ldr	r1, [sp, #0]

    for( i = 15; i >= 0; i-- )
    {
        lo = x[i] & 0xf;
 c023a06:	f81e cd01 	ldrb.w	ip, [lr, #-1]!
 c023a0a:	0909      	lsrs	r1, r1, #4
 c023a0c:	ea41 7100 	orr.w	r1, r1, r0, lsl #28
 c023a10:	9102      	str	r1, [sp, #8]
 c023a12:	0901      	lsrs	r1, r0, #4
 c023a14:	0727      	lsls	r7, r4, #28
 c023a16:	9103      	str	r1, [sp, #12]
        hi = x[i] >> 4;

        if( i != 15 )
 c023a18:	ebae 0903 	sub.w	r9, lr, r3
 c023a1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c023a20:	f1b9 0f0f 	cmp.w	r9, #15
 c023a24:	ea40 0006 	orr.w	r0, r0, r6
 c023a28:	ea41 0107 	orr.w	r1, r1, r7
 c023a2c:	ea4f 1614 	mov.w	r6, r4, lsr #4
        lo = x[i] & 0xf;
 c023a30:	f00c 080f 	and.w	r8, ip, #15
 c023a34:	e9cd 0102 	strd	r0, r1, [sp, #8]
        hi = x[i] >> 4;
 c023a38:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 c023a3c:	ea46 7605 	orr.w	r6, r6, r5, lsl #28
 c023a40:	ea4f 1715 	mov.w	r7, r5, lsr #4
        if( i != 15 )
 c023a44:	d01c      	beq.n	c023a80 <gcm_mult+0xb8>
 c023a46:	9c05      	ldr	r4, [sp, #20]
 c023a48:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
            zh ^= ctx->HH[lo];
 c023a4c:	e9d8 4532 	ldrd	r4, r5, [r8, #200]	; 0xc8
 c023a50:	ea84 0006 	eor.w	r0, r4, r6
 c023a54:	ea85 0107 	eor.w	r1, r5, r7
 c023a58:	4654      	mov	r4, sl
 c023a5a:	465d      	mov	r5, fp
            zl ^= ctx->HL[lo];
 c023a5c:	e9d8 ab12 	ldrd	sl, fp, [r8, #72]	; 0x48
            zh ^= ctx->HH[lo];
 c023a60:	4606      	mov	r6, r0
 c023a62:	460f      	mov	r7, r1
            zl ^= ctx->HL[lo];
 c023a64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
            zh ^= ctx->HH[lo];
 c023a68:	4066      	eors	r6, r4
 c023a6a:	406f      	eors	r7, r5
            zl ^= ctx->HL[lo];
 c023a6c:	ea80 000a 	eor.w	r0, r0, sl
 c023a70:	ea81 010b 	eor.w	r1, r1, fp
            zh ^= ctx->HH[lo];
 c023a74:	4634      	mov	r4, r6
 c023a76:	463d      	mov	r5, r7
            zl ^= ctx->HL[lo];
 c023a78:	4606      	mov	r6, r0
 c023a7a:	460f      	mov	r7, r1
 c023a7c:	e9cd 6700 	strd	r6, r7, [sp]

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
 c023a80:	f04f 0800 	mov.w	r8, #0
 c023a84:	9900      	ldr	r1, [sp, #0]
 c023a86:	ea4f 7904 	mov.w	r9, r4, lsl #28
 c023a8a:	090e      	lsrs	r6, r1, #4
 c023a8c:	9901      	ldr	r1, [sp, #4]
    for( i = 15; i >= 0; i-- )
 c023a8e:	4573      	cmp	r3, lr
        zl = ( zh << 60 ) | ( zl >> 4 );
 c023a90:	ea46 7601 	orr.w	r6, r6, r1, lsl #28
 c023a94:	ea46 0008 	orr.w	r0, r6, r8
 c023a98:	9e05      	ldr	r6, [sp, #20]
 c023a9a:	ea4f 1711 	mov.w	r7, r1, lsr #4
 c023a9e:	eb06 0ccc 	add.w	ip, r6, ip, lsl #3
        zh = ( zh >> 4 );
 c023aa2:	ea4f 1614 	mov.w	r6, r4, lsr #4
 c023aa6:	ea46 7605 	orr.w	r6, r6, r5, lsl #28
        zl = ( zh << 60 ) | ( zl >> 4 );
 c023aaa:	ea47 0109 	orr.w	r1, r7, r9
        zh = ( zh >> 4 );
 c023aae:	ea4f 1715 	mov.w	r7, r5, lsr #4
 c023ab2:	e9dc 4532 	ldrd	r4, r5, [ip, #200]	; 0xc8
 c023ab6:	ea84 0a06 	eor.w	sl, r4, r6
        zh ^= (uint64_t) last4[rem] << 48;
 c023aba:	9c00      	ldr	r4, [sp, #0]
 c023abc:	ea85 0b07 	eor.w	fp, r5, r7
 c023ac0:	e9cd ab02 	strd	sl, fp, [sp, #8]
 c023ac4:	f004 0a0f 	and.w	sl, r4, #15
 c023ac8:	4c1e      	ldr	r4, [pc, #120]	; (c023b44 <gcm_mult+0x17c>)
 c023aca:	f854 603a 	ldr.w	r6, [r4, sl, lsl #3]
        zh ^= ctx->HH[hi];
 c023ace:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
        zh ^= (uint64_t) last4[rem] << 48;
 c023ad2:	ea4f 4b06 	mov.w	fp, r6, lsl #16
        zh ^= ctx->HH[hi];
 c023ad6:	ea85 050b 	eor.w	r5, r5, fp
        zl ^= ctx->HL[hi];
 c023ada:	e9dc ab12 	ldrd	sl, fp, [ip, #72]	; 0x48
 c023ade:	ea8a 0600 	eor.w	r6, sl, r0
 c023ae2:	ea8b 0701 	eor.w	r7, fp, r1
        zh ^= ctx->HH[hi];
 c023ae6:	ea84 0408 	eor.w	r4, r4, r8
        zl ^= ctx->HL[hi];
 c023aea:	e9cd 6700 	strd	r6, r7, [sp]
    for( i = 15; i >= 0; i-- )
 c023aee:	f47f af7d 	bne.w	c0239ec <gcm_mult+0x24>
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 c023af2:	0e2b      	lsrs	r3, r5, #24
 c023af4:	7013      	strb	r3, [r2, #0]
 c023af6:	0c2b      	lsrs	r3, r5, #16
 c023af8:	7053      	strb	r3, [r2, #1]
 c023afa:	0a2b      	lsrs	r3, r5, #8
 c023afc:	7093      	strb	r3, [r2, #2]
    PUT_UINT32_BE( zh, output, 4 );
 c023afe:	0e23      	lsrs	r3, r4, #24
 c023b00:	7113      	strb	r3, [r2, #4]
 c023b02:	0c23      	lsrs	r3, r4, #16
 c023b04:	7153      	strb	r3, [r2, #5]
 c023b06:	0a23      	lsrs	r3, r4, #8
 c023b08:	7193      	strb	r3, [r2, #6]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 c023b0a:	9b01      	ldr	r3, [sp, #4]
    PUT_UINT32_BE( zh >> 32, output, 0 );
 c023b0c:	70d5      	strb	r5, [r2, #3]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 c023b0e:	0e1b      	lsrs	r3, r3, #24
 c023b10:	7213      	strb	r3, [r2, #8]
 c023b12:	9b01      	ldr	r3, [sp, #4]
    PUT_UINT32_BE( zh, output, 4 );
 c023b14:	71d4      	strb	r4, [r2, #7]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 c023b16:	0c1b      	lsrs	r3, r3, #16
 c023b18:	7253      	strb	r3, [r2, #9]
 c023b1a:	9b01      	ldr	r3, [sp, #4]
 c023b1c:	0a1b      	lsrs	r3, r3, #8
 c023b1e:	7293      	strb	r3, [r2, #10]
 c023b20:	f89d 3004 	ldrb.w	r3, [sp, #4]
 c023b24:	72d3      	strb	r3, [r2, #11]
    PUT_UINT32_BE( zl, output, 12 );
 c023b26:	9b00      	ldr	r3, [sp, #0]
 c023b28:	0e1b      	lsrs	r3, r3, #24
 c023b2a:	7313      	strb	r3, [r2, #12]
 c023b2c:	9b00      	ldr	r3, [sp, #0]
 c023b2e:	0c1b      	lsrs	r3, r3, #16
 c023b30:	7353      	strb	r3, [r2, #13]
 c023b32:	9b00      	ldr	r3, [sp, #0]
 c023b34:	0a1b      	lsrs	r3, r3, #8
 c023b36:	7393      	strb	r3, [r2, #14]
 c023b38:	f89d 3000 	ldrb.w	r3, [sp]
 c023b3c:	73d3      	strb	r3, [r2, #15]
}
 c023b3e:	b007      	add	sp, #28
 c023b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c023b44:	0c033f60 	.word	0x0c033f60

0c023b48 <mbedtls_gcm_init>:
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
 c023b48:	f44f 72c8 	mov.w	r2, #400	; 0x190
 c023b4c:	2100      	movs	r1, #0
 c023b4e:	f7f0 bf3a 	b.w	c0149c6 <memset>

0c023b52 <mbedtls_gcm_setkey>:
{
 c023b52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c023b56:	4682      	mov	sl, r0
 c023b58:	b08f      	sub	sp, #60	; 0x3c
 c023b5a:	4608      	mov	r0, r1
 c023b5c:	4617      	mov	r7, r2
    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits,
 c023b5e:	4619      	mov	r1, r3
 c023b60:	2201      	movs	r2, #1
{
 c023b62:	461e      	mov	r6, r3
    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits,
 c023b64:	f7fc f8e2 	bl	c01fd2c <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
 c023b68:	4605      	mov	r5, r0
 c023b6a:	2800      	cmp	r0, #0
 c023b6c:	f000 80b5 	beq.w	c023cda <mbedtls_gcm_setkey+0x188>
    if( cipher_info->block_size != 16 )
 c023b70:	6944      	ldr	r4, [r0, #20]
 c023b72:	2c10      	cmp	r4, #16
 c023b74:	f040 80b1 	bne.w	c023cda <mbedtls_gcm_setkey+0x188>
    mbedtls_cipher_free( &ctx->cipher_ctx );
 c023b78:	4650      	mov	r0, sl
 c023b7a:	f7fc f8ef 	bl	c01fd5c <mbedtls_cipher_free>
    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 c023b7e:	4629      	mov	r1, r5
 c023b80:	4650      	mov	r0, sl
 c023b82:	f7fc fae1 	bl	c020148 <mbedtls_cipher_setup>
 c023b86:	4683      	mov	fp, r0
 c023b88:	2800      	cmp	r0, #0
 c023b8a:	f040 80a2 	bne.w	c023cd2 <mbedtls_gcm_setkey+0x180>
    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 c023b8e:	2301      	movs	r3, #1
 c023b90:	4632      	mov	r2, r6
 c023b92:	4639      	mov	r1, r7
 c023b94:	4650      	mov	r0, sl
 c023b96:	f7fc f8f9 	bl	c01fd8c <mbedtls_cipher_setkey>
 c023b9a:	4683      	mov	fp, r0
 c023b9c:	2800      	cmp	r0, #0
 c023b9e:	f040 8098 	bne.w	c023cd2 <mbedtls_gcm_setkey+0x180>
    memset( h, 0, 16 );
 c023ba2:	4601      	mov	r1, r0
    size_t olen = 0;
 c023ba4:	9009      	str	r0, [sp, #36]	; 0x24
    memset( h, 0, 16 );
 c023ba6:	4622      	mov	r2, r4
 c023ba8:	a80a      	add	r0, sp, #40	; 0x28
 c023baa:	f7f0 ff0c 	bl	c0149c6 <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
 c023bae:	ab09      	add	r3, sp, #36	; 0x24
 c023bb0:	9300      	str	r3, [sp, #0]
 c023bb2:	ab0a      	add	r3, sp, #40	; 0x28
 c023bb4:	4622      	mov	r2, r4
 c023bb6:	4619      	mov	r1, r3
 c023bb8:	4650      	mov	r0, sl
 c023bba:	f7fc f933 	bl	c01fe24 <mbedtls_cipher_update>
 c023bbe:	4683      	mov	fp, r0
 c023bc0:	2800      	cmp	r0, #0
 c023bc2:	f040 8086 	bne.w	c023cd2 <mbedtls_gcm_setkey+0x180>
 c023bc6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 c023bc8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 c023bca:	ba0b      	rev	r3, r1
 c023bcc:	990a      	ldr	r1, [sp, #40]	; 0x28
 c023bce:	4698      	mov	r8, r3
 c023bd0:	ba0b      	rev	r3, r1
 c023bd2:	4699      	mov	r9, r3
 c023bd4:	ba23      	rev	r3, r4
 c023bd6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 c023bd8:	9302      	str	r3, [sp, #8]
 c023bda:	ba23      	rev	r3, r4
 c023bdc:	9303      	str	r3, [sp, #12]
    ctx->HL[8] = vl;
 c023bde:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    ctx->HH[8] = vh;
 c023be2:	4642      	mov	r2, r8
    ctx->HL[8] = vl;
 c023be4:	e9ca 3422 	strd	r3, r4, [sl, #136]	; 0x88
    ctx->HH[8] = vh;
 c023be8:	464b      	mov	r3, r9
 c023bea:	f50a 7484 	add.w	r4, sl, #264	; 0x108
 c023bee:	e9c4 2300 	strd	r2, r3, [r4]
    ctx->HH[0] = 0;
 c023bf2:	2500      	movs	r5, #0
 c023bf4:	2400      	movs	r4, #0
    ctx->HL[0] = 0;
 c023bf6:	2603      	movs	r6, #3
    for( i = 4; i > 0; i >>= 1 )
 c023bf8:	2704      	movs	r7, #4
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 c023bfa:	f04f 4c61 	mov.w	ip, #3774873600	; 0xe1000000
    ctx->HH[0] = 0;
 c023bfe:	e9ca 4532 	strd	r4, r5, [sl, #200]	; 0xc8
    ctx->HL[0] = 0;
 c023c02:	e9ca 4512 	strd	r4, r5, [sl, #72]	; 0x48
        vl  = ( vh << 63 ) | ( vl >> 1 );
 c023c06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 c023c0a:	9b02      	ldr	r3, [sp, #8]
        vl  = ( vh << 63 ) | ( vl >> 1 );
 c023c0c:	0849      	lsrs	r1, r1, #1
 c023c0e:	ea4f 0030 	mov.w	r0, r0, rrx
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 c023c12:	f003 0e01 	and.w	lr, r3, #1
        vl  = ( vh << 63 ) | ( vl >> 1 );
 c023c16:	4643      	mov	r3, r8
 c023c18:	2400      	movs	r4, #0
 c023c1a:	07dd      	lsls	r5, r3, #31
 c023c1c:	ea40 0204 	orr.w	r2, r0, r4
 c023c20:	ea41 0305 	orr.w	r3, r1, r5
 c023c24:	e9cd 2302 	strd	r2, r3, [sp, #8]
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 c023c28:	4642      	mov	r2, r8
 c023c2a:	464b      	mov	r3, r9
 c023c2c:	085b      	lsrs	r3, r3, #1
 c023c2e:	ea4f 0232 	mov.w	r2, r2, rrx
 c023c32:	fb0c f90e 	mul.w	r9, ip, lr
 c023c36:	ea82 0004 	eor.w	r0, r2, r4
 c023c3a:	ea83 0109 	eor.w	r1, r3, r9
 c023c3e:	eb0a 04c7 	add.w	r4, sl, r7, lsl #3
        ctx->HL[i] = vl;
 c023c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c023c46:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
        ctx->HH[i] = vh;
 c023c4a:	4602      	mov	r2, r0
 c023c4c:	460b      	mov	r3, r1
    for( i = 4; i > 0; i >>= 1 )
 c023c4e:	3e01      	subs	r6, #1
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 c023c50:	4680      	mov	r8, r0
 c023c52:	4689      	mov	r9, r1
        ctx->HH[i] = vh;
 c023c54:	e9c4 2332 	strd	r2, r3, [r4, #200]	; 0xc8
    for( i = 4; i > 0; i >>= 1 )
 c023c58:	ea4f 0767 	mov.w	r7, r7, asr #1
 c023c5c:	d1d3      	bne.n	c023c06 <mbedtls_gcm_setkey+0xb4>
 c023c5e:	2603      	movs	r6, #3
    for( i = 2; i <= 8; i *= 2 )
 c023c60:	2402      	movs	r4, #2
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 c023c62:	f10a 0348 	add.w	r3, sl, #72	; 0x48
 c023c66:	9307      	str	r3, [sp, #28]
 c023c68:	f10a 0cc8 	add.w	ip, sl, #200	; 0xc8
 c023c6c:	9b07      	ldr	r3, [sp, #28]
 c023c6e:	00e7      	lsls	r7, r4, #3
 c023c70:	19d9      	adds	r1, r3, r7
 c023c72:	eb0c 0307 	add.w	r3, ip, r7
        vh = *HiH;
 c023c76:	e9d3 8900 	ldrd	r8, r9, [r3]
 c023c7a:	e9cd 8902 	strd	r8, r9, [sp, #8]
        vl = *HiL;
 c023c7e:	e9d1 8900 	ldrd	r8, r9, [r1]
 c023c82:	e9cd 8904 	strd	r8, r9, [sp, #16]
 c023c86:	f10a 0050 	add.w	r0, sl, #80	; 0x50
 c023c8a:	f103 0508 	add.w	r5, r3, #8
 c023c8e:	441f      	add	r7, r3
            HiH[j] = vh ^ ctx->HH[j];
 c023c90:	e9d0 2320 	ldrd	r2, r3, [r0, #128]	; 0x80
 c023c94:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 c023c98:	ea88 0802 	eor.w	r8, r8, r2
 c023c9c:	ea89 0903 	eor.w	r9, r9, r3
 c023ca0:	4642      	mov	r2, r8
 c023ca2:	464b      	mov	r3, r9
            HiL[j] = vl ^ ctx->HL[j];
 c023ca4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
            HiH[j] = vh ^ ctx->HH[j];
 c023ca8:	e8e5 2302 	strd	r2, r3, [r5], #8
            HiL[j] = vl ^ ctx->HL[j];
 c023cac:	e9d0 2300 	ldrd	r2, r3, [r0]
 c023cb0:	ea88 0802 	eor.w	r8, r8, r2
 c023cb4:	ea89 0903 	eor.w	r9, r9, r3
 c023cb8:	4642      	mov	r2, r8
 c023cba:	464b      	mov	r3, r9
        for( j = 1; j < i; j++ )
 c023cbc:	42bd      	cmp	r5, r7
 c023cbe:	4686      	mov	lr, r0
            HiL[j] = vl ^ ctx->HL[j];
 c023cc0:	e9e1 2302 	strd	r2, r3, [r1, #8]!
 c023cc4:	f100 0008 	add.w	r0, r0, #8
        for( j = 1; j < i; j++ )
 c023cc8:	d1e2      	bne.n	c023c90 <mbedtls_gcm_setkey+0x13e>
    for( i = 2; i <= 8; i *= 2 )
 c023cca:	3e01      	subs	r6, #1
 c023ccc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 c023cd0:	d1cc      	bne.n	c023c6c <mbedtls_gcm_setkey+0x11a>
}
 c023cd2:	4658      	mov	r0, fp
 c023cd4:	b00f      	add	sp, #60	; 0x3c
 c023cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 c023cda:	f06f 0b13 	mvn.w	fp, #19
 c023cde:	e7f8      	b.n	c023cd2 <mbedtls_gcm_setkey+0x180>

0c023ce0 <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 c023ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 c023ce4:	f04f 0800 	mov.w	r8, #0
{
 c023ce8:	b08b      	sub	sp, #44	; 0x2c
 c023cea:	4604      	mov	r4, r0
 c023cec:	468b      	mov	fp, r1
 c023cee:	4617      	mov	r7, r2
 c023cf0:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
    size_t use_len, olen = 0;
 c023cf4:	f8cd 8014 	str.w	r8, [sp, #20]
    GCM_VALIDATE_RET( iv != NULL );
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
 c023cf8:	461d      	mov	r5, r3
 c023cfa:	2b00      	cmp	r3, #0
 c023cfc:	f000 8095 	beq.w	c023e2a <mbedtls_gcm_starts+0x14a>
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 c023d00:	f500 76b4 	add.w	r6, r0, #360	; 0x168
 c023d04:	2210      	movs	r2, #16
 c023d06:	4641      	mov	r1, r8
 c023d08:	4630      	mov	r0, r6
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 c023d0a:	f504 7abc 	add.w	sl, r4, #376	; 0x178
    memset( ctx->y, 0x00, sizeof(ctx->y) );
 c023d0e:	f7f0 fe5a 	bl	c0149c6 <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 c023d12:	4641      	mov	r1, r8
 c023d14:	2210      	movs	r2, #16
 c023d16:	4650      	mov	r0, sl
 c023d18:	f7f0 fe55 	bl	c0149c6 <memset>

    ctx->mode = mode;
    ctx->len = 0;
 c023d1c:	2000      	movs	r0, #0
 c023d1e:	2100      	movs	r1, #0
 c023d20:	f504 73a4 	add.w	r3, r4, #328	; 0x148
    ctx->mode = mode;
 c023d24:	f8c4 b188 	str.w	fp, [r4, #392]	; 0x188
    ctx->add_len = 0;

    if( iv_len == 12 )
 c023d28:	2d0c      	cmp	r5, #12
    ctx->len = 0;
 c023d2a:	e9c3 0100 	strd	r0, r1, [r3]
    ctx->add_len = 0;
 c023d2e:	f504 73a8 	add.w	r3, r4, #336	; 0x150
 c023d32:	e9c3 0100 	strd	r0, r1, [r3]
    if( iv_len == 12 )
 c023d36:	d11f      	bne.n	c023d78 <mbedtls_gcm_starts+0x98>
    {
        memcpy( ctx->y, iv, iv_len );
 c023d38:	683b      	ldr	r3, [r7, #0]
 c023d3a:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
 c023d3e:	687b      	ldr	r3, [r7, #4]
 c023d40:	6073      	str	r3, [r6, #4]
 c023d42:	68bb      	ldr	r3, [r7, #8]
 c023d44:	60b3      	str	r3, [r6, #8]
        ctx->y[15] = 1;
 c023d46:	2301      	movs	r3, #1
 c023d48:	f884 3177 	strb.w	r3, [r4, #375]	; 0x177
            ctx->y[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->y, ctx->y );
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16,
 c023d4c:	ab05      	add	r3, sp, #20
 c023d4e:	9300      	str	r3, [sp, #0]
 c023d50:	4631      	mov	r1, r6
 c023d52:	f504 73ac 	add.w	r3, r4, #344	; 0x158
 c023d56:	2210      	movs	r2, #16
 c023d58:	4620      	mov	r0, r4
 c023d5a:	f7fc f863 	bl	c01fe24 <mbedtls_cipher_update>
 c023d5e:	4606      	mov	r6, r0
 c023d60:	b930      	cbnz	r0, c023d70 <mbedtls_gcm_starts+0x90>
      ( (uint64_t) add_len ) >> 61 != 0 )
 c023d62:	f8c4 9150 	str.w	r9, [r4, #336]	; 0x150
 c023d66:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
        return( ret );
    }

    ctx->add_len = add_len;
    p = add;
    while( add_len > 0 )
 c023d6a:	f1b9 0f00 	cmp.w	r9, #0
 c023d6e:	d142      	bne.n	c023df6 <mbedtls_gcm_starts+0x116>
        add_len -= use_len;
        p += use_len;
    }

    return( 0 );
}
 c023d70:	4630      	mov	r0, r6
 c023d72:	b00b      	add	sp, #44	; 0x2c
 c023d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memset( work_buf, 0x00, 16 );
 c023d78:	f10d 0b18 	add.w	fp, sp, #24
 c023d7c:	f8cd 8018 	str.w	r8, [sp, #24]
 c023d80:	e9cb 8801 	strd	r8, r8, [fp, #4]
 c023d84:	46b0      	mov	r8, r6
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 c023d86:	00eb      	lsls	r3, r5, #3
 c023d88:	0e1a      	lsrs	r2, r3, #24
 c023d8a:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 c023d8e:	0c1a      	lsrs	r2, r3, #16
 c023d90:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
 c023d94:	0a1a      	lsrs	r2, r3, #8
 c023d96:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
 c023d9a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
            use_len = ( iv_len < 16 ) ? iv_len : 16;
 c023d9e:	2d10      	cmp	r5, #16
 c023da0:	462b      	mov	r3, r5
 c023da2:	bf28      	it	cs
 c023da4:	2310      	movcs	r3, #16
 c023da6:	463a      	mov	r2, r7
 c023da8:	f204 1167 	addw	r1, r4, #359	; 0x167
 c023dac:	eb03 0c07 	add.w	ip, r3, r7
                ctx->y[i] ^= p[i];
 c023db0:	f812 0b01 	ldrb.w	r0, [r2], #1
 c023db4:	f811 ef01 	ldrb.w	lr, [r1, #1]!
            for( i = 0; i < use_len; i++ )
 c023db8:	4594      	cmp	ip, r2
                ctx->y[i] ^= p[i];
 c023dba:	ea80 000e 	eor.w	r0, r0, lr
 c023dbe:	7008      	strb	r0, [r1, #0]
            for( i = 0; i < use_len; i++ )
 c023dc0:	d1f6      	bne.n	c023db0 <mbedtls_gcm_starts+0xd0>
            gcm_mult( ctx, ctx->y, ctx->y );
 c023dc2:	4632      	mov	r2, r6
 c023dc4:	4631      	mov	r1, r6
 c023dc6:	4620      	mov	r0, r4
 c023dc8:	9303      	str	r3, [sp, #12]
 c023dca:	f7ff fdfd 	bl	c0239c8 <gcm_mult>
            p += use_len;
 c023dce:	9b03      	ldr	r3, [sp, #12]
        while( iv_len > 0 )
 c023dd0:	1aed      	subs	r5, r5, r3
            p += use_len;
 c023dd2:	441f      	add	r7, r3
        while( iv_len > 0 )
 c023dd4:	d1e3      	bne.n	c023d9e <mbedtls_gcm_starts+0xbe>
 c023dd6:	4643      	mov	r3, r8
            ctx->y[i] ^= work_buf[i];
 c023dd8:	781a      	ldrb	r2, [r3, #0]
 c023dda:	f81b 1005 	ldrb.w	r1, [fp, r5]
        for( i = 0; i < 16; i++ )
 c023dde:	3501      	adds	r5, #1
            ctx->y[i] ^= work_buf[i];
 c023de0:	404a      	eors	r2, r1
        for( i = 0; i < 16; i++ )
 c023de2:	2d10      	cmp	r5, #16
            ctx->y[i] ^= work_buf[i];
 c023de4:	f803 2b01 	strb.w	r2, [r3], #1
        for( i = 0; i < 16; i++ )
 c023de8:	d1f6      	bne.n	c023dd8 <mbedtls_gcm_starts+0xf8>
        gcm_mult( ctx, ctx->y, ctx->y );
 c023dea:	4632      	mov	r2, r6
 c023dec:	4631      	mov	r1, r6
 c023dee:	4620      	mov	r0, r4
 c023df0:	f7ff fdea 	bl	c0239c8 <gcm_mult>
 c023df4:	e7aa      	b.n	c023d4c <mbedtls_gcm_starts+0x6c>
        use_len = ( add_len < 16 ) ? add_len : 16;
 c023df6:	464f      	mov	r7, r9
 c023df8:	2f10      	cmp	r7, #16
 c023dfa:	bf28      	it	cs
 c023dfc:	2710      	movcs	r7, #16
 c023dfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 c023e00:	f204 1277 	addw	r2, r4, #375	; 0x177
 c023e04:	19dd      	adds	r5, r3, r7
            ctx->buf[i] ^= p[i];
 c023e06:	f813 1b01 	ldrb.w	r1, [r3], #1
 c023e0a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
        for( i = 0; i < use_len; i++ )
 c023e0e:	429d      	cmp	r5, r3
            ctx->buf[i] ^= p[i];
 c023e10:	ea81 0100 	eor.w	r1, r1, r0
 c023e14:	7011      	strb	r1, [r2, #0]
        for( i = 0; i < use_len; i++ )
 c023e16:	d1f6      	bne.n	c023e06 <mbedtls_gcm_starts+0x126>
        gcm_mult( ctx, ctx->buf, ctx->buf );
 c023e18:	4652      	mov	r2, sl
 c023e1a:	4651      	mov	r1, sl
 c023e1c:	4620      	mov	r0, r4
 c023e1e:	f7ff fdd3 	bl	c0239c8 <gcm_mult>
        add_len -= use_len;
 c023e22:	eba9 0907 	sub.w	r9, r9, r7
        p += use_len;
 c023e26:	9514      	str	r5, [sp, #80]	; 0x50
 c023e28:	e79f      	b.n	c023d6a <mbedtls_gcm_starts+0x8a>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 c023e2a:	f06f 0613 	mvn.w	r6, #19
 c023e2e:	e79f      	b.n	c023d70 <mbedtls_gcm_starts+0x90>

0c023e30 <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 c023e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c023e34:	461f      	mov	r7, r3
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
 c023e36:	2300      	movs	r3, #0
{
 c023e38:	b08b      	sub	sp, #44	; 0x2c

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( output > input && (size_t) ( output - input ) < length )
 c023e3a:	4297      	cmp	r7, r2
{
 c023e3c:	4604      	mov	r4, r0
 c023e3e:	460d      	mov	r5, r1
 c023e40:	4616      	mov	r6, r2
    size_t use_len, olen = 0;
 c023e42:	9305      	str	r3, [sp, #20]
    if( output > input && (size_t) ( output - input ) < length )
 c023e44:	d902      	bls.n	c023e4c <mbedtls_gcm_update+0x1c>
 c023e46:	1abb      	subs	r3, r7, r2
 c023e48:	428b      	cmp	r3, r1
 c023e4a:	d36e      	bcc.n	c023f2a <mbedtls_gcm_update+0xfa>
 c023e4c:	2300      	movs	r3, #0
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
 c023e4e:	f504 7ca4 	add.w	ip, r4, #328	; 0x148
 c023e52:	e9dc ab00 	ldrd	sl, fp, [ip]
 c023e56:	eb1a 0805 	adds.w	r8, sl, r5
 c023e5a:	eb5b 0903 	adcs.w	r9, fp, r3
 c023e5e:	f04f 0000 	mov.w	r0, #0
 c023e62:	f04f 0100 	mov.w	r1, #0
 c023e66:	bf24      	itt	cs
 c023e68:	2001      	movcs	r0, #1
 c023e6a:	2100      	movcs	r1, #0
 c023e6c:	ea50 0301 	orrs.w	r3, r0, r1
 c023e70:	d15b      	bne.n	c023f2a <mbedtls_gcm_update+0xfa>
 c023e72:	230f      	movs	r3, #15
 c023e74:	f06f 021f 	mvn.w	r2, #31
 c023e78:	454b      	cmp	r3, r9
 c023e7a:	bf08      	it	eq
 c023e7c:	4542      	cmpeq	r2, r8
 c023e7e:	d354      	bcc.n	c023f2a <mbedtls_gcm_update+0xfa>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    ctx->len += length;
 c023e80:	e9cc 8900 	strd	r8, r9, [ip]
 c023e84:	f204 1a73 	addw	sl, r4, #371	; 0x173

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 c023e88:	f10d 0918 	add.w	r9, sp, #24
 c023e8c:	f504 7bb4 	add.w	fp, r4, #360	; 0x168
    while( length > 0 )
 c023e90:	b91d      	cbnz	r5, c023e9a <mbedtls_gcm_update+0x6a>
        length -= use_len;
        p += use_len;
        out_p += use_len;
    }

    return( 0 );
 c023e92:	4628      	mov	r0, r5
}
 c023e94:	b00b      	add	sp, #44	; 0x2c
 c023e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        use_len = ( length < 16 ) ? length : 16;
 c023e9a:	2d10      	cmp	r5, #16
 c023e9c:	46a8      	mov	r8, r5
 c023e9e:	bf28      	it	cs
 c023ea0:	f04f 0810 	movcs.w	r8, #16
 c023ea4:	f204 1277 	addw	r2, r4, #375	; 0x177
            if( ++ctx->y[i - 1] != 0 )
 c023ea8:	7813      	ldrb	r3, [r2, #0]
 c023eaa:	3301      	adds	r3, #1
 c023eac:	b2db      	uxtb	r3, r3
 c023eae:	f802 3901 	strb.w	r3, [r2], #-1
 c023eb2:	b90b      	cbnz	r3, c023eb8 <mbedtls_gcm_update+0x88>
        for( i = 16; i > 12; i-- )
 c023eb4:	4552      	cmp	r2, sl
 c023eb6:	d1f7      	bne.n	c023ea8 <mbedtls_gcm_update+0x78>
        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 c023eb8:	ab05      	add	r3, sp, #20
 c023eba:	9300      	str	r3, [sp, #0]
 c023ebc:	2210      	movs	r2, #16
 c023ebe:	464b      	mov	r3, r9
 c023ec0:	4659      	mov	r1, fp
 c023ec2:	4620      	mov	r0, r4
 c023ec4:	f7fb ffae 	bl	c01fe24 <mbedtls_cipher_update>
 c023ec8:	2800      	cmp	r0, #0
 c023eca:	d1e3      	bne.n	c023e94 <mbedtls_gcm_update+0x64>
 c023ecc:	4631      	mov	r1, r6
 c023ece:	f504 73bc 	add.w	r3, r4, #376	; 0x178
 c023ed2:	9303      	str	r3, [sp, #12]
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
 c023ed4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 c023ed8:	b93a      	cbnz	r2, c023eea <mbedtls_gcm_update+0xba>
                ctx->buf[i] ^= p[i];
 c023eda:	f893 c000 	ldrb.w	ip, [r3]
 c023ede:	f891 e000 	ldrb.w	lr, [r1]
 c023ee2:	ea8c 0c0e 	eor.w	ip, ip, lr
 c023ee6:	f883 c000 	strb.w	ip, [r3]
            out_p[i] = ectr[i] ^ p[i];
 c023eea:	f811 eb01 	ldrb.w	lr, [r1], #1
 c023eee:	f819 c000 	ldrb.w	ip, [r9, r0]
 c023ef2:	3301      	adds	r3, #1
 c023ef4:	ea8e 0c0c 	eor.w	ip, lr, ip
 c023ef8:	f807 c000 	strb.w	ip, [r7, r0]
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 c023efc:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
        for( i = 0; i < use_len; i++ )
 c023f00:	3001      	adds	r0, #1
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 c023f02:	2a01      	cmp	r2, #1
                ctx->buf[i] ^= out_p[i];
 c023f04:	bf02      	ittt	eq
 c023f06:	f813 ec01 	ldrbeq.w	lr, [r3, #-1]
 c023f0a:	ea8c 0c0e 	eoreq.w	ip, ip, lr
 c023f0e:	f803 cc01 	strbeq.w	ip, [r3, #-1]
        for( i = 0; i < use_len; i++ )
 c023f12:	4580      	cmp	r8, r0
 c023f14:	d1de      	bne.n	c023ed4 <mbedtls_gcm_update+0xa4>
        gcm_mult( ctx, ctx->buf, ctx->buf );
 c023f16:	9a03      	ldr	r2, [sp, #12]
 c023f18:	4620      	mov	r0, r4
 c023f1a:	4611      	mov	r1, r2
 c023f1c:	f7ff fd54 	bl	c0239c8 <gcm_mult>
        length -= use_len;
 c023f20:	eba5 0508 	sub.w	r5, r5, r8
        p += use_len;
 c023f24:	4446      	add	r6, r8
        out_p += use_len;
 c023f26:	4447      	add	r7, r8
 c023f28:	e7b2      	b.n	c023e90 <mbedtls_gcm_update+0x60>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 c023f2a:	f06f 0013 	mvn.w	r0, #19
 c023f2e:	e7b1      	b.n	c023e94 <mbedtls_gcm_update+0x64>

0c023f30 <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 c023f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 c023f34:	4688      	mov	r8, r1
    uint64_t orig_add_len;

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    orig_len = ctx->len * 8;
 c023f36:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
 c023f3a:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
 c023f3e:	00cd      	lsls	r5, r1, #3
    orig_add_len = ctx->add_len * 8;
 c023f40:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    orig_len = ctx->len * 8;
 c023f44:	ea45 7553 	orr.w	r5, r5, r3, lsr #29
 c023f48:	00dc      	lsls	r4, r3, #3
    orig_add_len = ctx->add_len * 8;
 c023f4a:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
 c023f4e:	00cf      	lsls	r7, r1, #3
 c023f50:	ea47 7753 	orr.w	r7, r7, r3, lsr #29
 c023f54:	00de      	lsls	r6, r3, #3

    if( tag_len > 16 || tag_len < 4 )
 c023f56:	1f13      	subs	r3, r2, #4
 c023f58:	2b0c      	cmp	r3, #12
{
 c023f5a:	4681      	mov	r9, r0
 c023f5c:	4692      	mov	sl, r2
    if( tag_len > 16 || tag_len < 4 )
 c023f5e:	d857      	bhi.n	c024010 <mbedtls_gcm_finish+0xe0>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    memcpy( tag, ctx->base_ectr, tag_len );
 c023f60:	f500 71ac 	add.w	r1, r0, #344	; 0x158
 c023f64:	4640      	mov	r0, r8
 c023f66:	f7f0 fd0a 	bl	c01497e <memcpy>

    if( orig_len || orig_add_len )
 c023f6a:	ea54 0305 	orrs.w	r3, r4, r5
 c023f6e:	d106      	bne.n	c023f7e <mbedtls_gcm_finish+0x4e>
 c023f70:	ea56 0307 	orrs.w	r3, r6, r7
 c023f74:	d103      	bne.n	c023f7e <mbedtls_gcm_finish+0x4e>

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
 c023f76:	2000      	movs	r0, #0
}
 c023f78:	b004      	add	sp, #16
 c023f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 c023f7e:	0e3b      	lsrs	r3, r7, #24
 c023f80:	f88d 3000 	strb.w	r3, [sp]
 c023f84:	0c3b      	lsrs	r3, r7, #16
 c023f86:	f88d 3001 	strb.w	r3, [sp, #1]
 c023f8a:	0a3b      	lsrs	r3, r7, #8
 c023f8c:	f88d 3002 	strb.w	r3, [sp, #2]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 c023f90:	0e33      	lsrs	r3, r6, #24
 c023f92:	f88d 3004 	strb.w	r3, [sp, #4]
 c023f96:	0c33      	lsrs	r3, r6, #16
 c023f98:	f88d 3005 	strb.w	r3, [sp, #5]
 c023f9c:	0a33      	lsrs	r3, r6, #8
 c023f9e:	f88d 3006 	strb.w	r3, [sp, #6]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 c023fa2:	0e2b      	lsrs	r3, r5, #24
 c023fa4:	f88d 3008 	strb.w	r3, [sp, #8]
 c023fa8:	0c2b      	lsrs	r3, r5, #16
 c023faa:	f88d 3009 	strb.w	r3, [sp, #9]
 c023fae:	0a2b      	lsrs	r3, r5, #8
 c023fb0:	f88d 300a 	strb.w	r3, [sp, #10]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 c023fb4:	0e23      	lsrs	r3, r4, #24
 c023fb6:	f88d 300c 	strb.w	r3, [sp, #12]
 c023fba:	0c23      	lsrs	r3, r4, #16
 c023fbc:	f88d 300d 	strb.w	r3, [sp, #13]
 c023fc0:	f88d 400f 	strb.w	r4, [sp, #15]
 c023fc4:	0a23      	lsrs	r3, r4, #8
 c023fc6:	f509 74bc 	add.w	r4, r9, #376	; 0x178
 c023fca:	f88d 300e 	strb.w	r3, [sp, #14]
 c023fce:	4622      	mov	r2, r4
        for( i = 0; i < 16; i++ )
 c023fd0:	2300      	movs	r3, #0
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 c023fd2:	f88d 7003 	strb.w	r7, [sp, #3]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 c023fd6:	f88d 6007 	strb.w	r6, [sp, #7]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 c023fda:	f88d 500b 	strb.w	r5, [sp, #11]
            ctx->buf[i] ^= work_buf[i];
 c023fde:	7811      	ldrb	r1, [r2, #0]
 c023fe0:	f81d 0003 	ldrb.w	r0, [sp, r3]
        for( i = 0; i < 16; i++ )
 c023fe4:	3301      	adds	r3, #1
            ctx->buf[i] ^= work_buf[i];
 c023fe6:	4041      	eors	r1, r0
        for( i = 0; i < 16; i++ )
 c023fe8:	2b10      	cmp	r3, #16
            ctx->buf[i] ^= work_buf[i];
 c023fea:	f802 1b01 	strb.w	r1, [r2], #1
        for( i = 0; i < 16; i++ )
 c023fee:	d1f6      	bne.n	c023fde <mbedtls_gcm_finish+0xae>
        gcm_mult( ctx, ctx->buf, ctx->buf );
 c023ff0:	4621      	mov	r1, r4
 c023ff2:	4622      	mov	r2, r4
 c023ff4:	4648      	mov	r0, r9
 c023ff6:	f7ff fce7 	bl	c0239c8 <gcm_mult>
 c023ffa:	4641      	mov	r1, r8
 c023ffc:	44c2      	add	sl, r8
            tag[i] ^= ctx->buf[i];
 c023ffe:	780b      	ldrb	r3, [r1, #0]
 c024000:	f814 2b01 	ldrb.w	r2, [r4], #1
 c024004:	4053      	eors	r3, r2
 c024006:	f801 3b01 	strb.w	r3, [r1], #1
        for( i = 0; i < tag_len; i++ )
 c02400a:	458a      	cmp	sl, r1
 c02400c:	d1f7      	bne.n	c023ffe <mbedtls_gcm_finish+0xce>
 c02400e:	e7b2      	b.n	c023f76 <mbedtls_gcm_finish+0x46>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 c024010:	f06f 0013 	mvn.w	r0, #19
 c024014:	e7b0      	b.n	c023f78 <mbedtls_gcm_finish+0x48>

0c024016 <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 c024016:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 c02401a:	4617      	mov	r7, r2
 c02401c:	e9dd 890d 	ldrd	r8, r9, [sp, #52]	; 0x34
 c024020:	e9dd 650f 	ldrd	r6, r5, [sp, #60]	; 0x3c
 c024024:	461a      	mov	r2, r3
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 c024026:	9b0c      	ldr	r3, [sp, #48]	; 0x30
{
 c024028:	4604      	mov	r4, r0
    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 c02402a:	9301      	str	r3, [sp, #4]
 c02402c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 c02402e:	9300      	str	r3, [sp, #0]
 c024030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c024032:	f7ff fe55 	bl	c023ce0 <mbedtls_gcm_starts>
 c024036:	b970      	cbnz	r0, c024056 <mbedtls_gcm_crypt_and_tag+0x40>
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
 c024038:	464b      	mov	r3, r9
 c02403a:	4642      	mov	r2, r8
 c02403c:	4639      	mov	r1, r7
 c02403e:	4620      	mov	r0, r4
 c024040:	f7ff fef6 	bl	c023e30 <mbedtls_gcm_update>
 c024044:	b938      	cbnz	r0, c024056 <mbedtls_gcm_crypt_and_tag+0x40>
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 c024046:	4632      	mov	r2, r6
 c024048:	4629      	mov	r1, r5
 c02404a:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
 c02404c:	b003      	add	sp, #12
 c02404e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 c024052:	f7ff bf6d 	b.w	c023f30 <mbedtls_gcm_finish>
}
 c024056:	b003      	add	sp, #12
 c024058:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0c02405c <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 c02405c:	b5f0      	push	{r4, r5, r6, r7, lr}
 c02405e:	460e      	mov	r6, r1
 c024060:	b08d      	sub	sp, #52	; 0x34
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( tag != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 c024062:	9916      	ldr	r1, [sp, #88]	; 0x58
{
 c024064:	9f15      	ldr	r7, [sp, #84]	; 0x54
    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 c024066:	9103      	str	r1, [sp, #12]
 c024068:	9913      	ldr	r1, [sp, #76]	; 0x4c
{
 c02406a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 c02406c:	9102      	str	r1, [sp, #8]
 c02406e:	9912      	ldr	r1, [sp, #72]	; 0x48
 c024070:	ac08      	add	r4, sp, #32
 c024072:	e9cd 3100 	strd	r3, r1, [sp]
 c024076:	e9cd 7405 	strd	r7, r4, [sp, #20]
 c02407a:	4613      	mov	r3, r2
 c02407c:	9504      	str	r5, [sp, #16]
 c02407e:	4632      	mov	r2, r6
 c024080:	2100      	movs	r1, #0
 c024082:	f7ff ffc8 	bl	c024016 <mbedtls_gcm_crypt_and_tag>
 c024086:	b948      	cbnz	r0, c02409c <mbedtls_gcm_auth_decrypt+0x40>
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 c024088:	4603      	mov	r3, r0
 c02408a:	42bb      	cmp	r3, r7
 c02408c:	d108      	bne.n	c0240a0 <mbedtls_gcm_auth_decrypt+0x44>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
 c02408e:	b128      	cbz	r0, c02409c <mbedtls_gcm_auth_decrypt+0x40>
    {
        mbedtls_platform_zeroize( output, length );
 c024090:	4628      	mov	r0, r5
 c024092:	4631      	mov	r1, r6
 c024094:	f002 fb48 	bl	c026728 <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
 c024098:	f06f 0011 	mvn.w	r0, #17
    }

    return( 0 );
}
 c02409c:	b00d      	add	sp, #52	; 0x34
 c02409e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        diff |= tag[i] ^ check_tag[i];
 c0240a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 c0240a2:	5ce1      	ldrb	r1, [r4, r3]
 c0240a4:	5cd2      	ldrb	r2, [r2, r3]
    for( diff = 0, i = 0; i < tag_len; i++ )
 c0240a6:	3301      	adds	r3, #1
        diff |= tag[i] ^ check_tag[i];
 c0240a8:	404a      	eors	r2, r1
 c0240aa:	4310      	orrs	r0, r2
 c0240ac:	e7ed      	b.n	c02408a <mbedtls_gcm_auth_decrypt+0x2e>

0c0240ae <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
 c0240ae:	b510      	push	{r4, lr}
    if( ctx == NULL )
 c0240b0:	4604      	mov	r4, r0
 c0240b2:	b140      	cbz	r0, c0240c6 <mbedtls_gcm_free+0x18>
        return;
    mbedtls_cipher_free( &ctx->cipher_ctx );
 c0240b4:	f7fb fe52 	bl	c01fd5c <mbedtls_cipher_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
 c0240b8:	4620      	mov	r0, r4
}
 c0240ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
 c0240be:	f44f 71c8 	mov.w	r1, #400	; 0x190
 c0240c2:	f002 bb31 	b.w	c026728 <mbedtls_platform_zeroize>
}
 c0240c6:	bd10      	pop	{r4, pc}

0c0240c8 <mbedtls_hmac_drbg_init>:
/*
 * HMAC_DRBG context initialization
 */
void mbedtls_hmac_drbg_init( mbedtls_hmac_drbg_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_hmac_drbg_context ) );
 c0240c8:	2264      	movs	r2, #100	; 0x64
 c0240ca:	2100      	movs	r1, #0
 c0240cc:	f7f0 bc7b 	b.w	c0149c6 <memset>

0c0240d0 <mbedtls_hmac_drbg_update_ret>:
 * HMAC_DRBG update, using optional additional data (10.1.2.2)
 */
int mbedtls_hmac_drbg_update_ret( mbedtls_hmac_drbg_context *ctx,
                                  const unsigned char *additional,
                                  size_t add_len )
{
 c0240d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c0240d4:	4605      	mov	r5, r0
 c0240d6:	b092      	sub	sp, #72	; 0x48
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 c0240d8:	6800      	ldr	r0, [r0, #0]
{
 c0240da:	4689      	mov	r9, r1
 c0240dc:	4692      	mov	sl, r2
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 c0240de:	f000 fa69 	bl	c0245b4 <mbedtls_md_get_size>
 c0240e2:	4607      	mov	r7, r0
    unsigned char rounds = ( additional != NULL && add_len != 0 ) ? 2 : 1;
 c0240e4:	f1b9 0f00 	cmp.w	r9, #0
 c0240e8:	d00f      	beq.n	c02410a <mbedtls_hmac_drbg_update_ret+0x3a>
 c0240ea:	f1ba 0f00 	cmp.w	sl, #0
 c0240ee:	bf14      	ite	ne
 c0240f0:	2602      	movne	r6, #2
 c0240f2:	2601      	moveq	r6, #1
    unsigned char sep[1];
    unsigned char K[MBEDTLS_MD_MAX_SIZE];
    int ret;

    for( sep[0] = 0; sep[0] < rounds; sep[0]++ )
 c0240f4:	2300      	movs	r3, #0
    {
        /* Step 1 or 4 */
        if( ( ret = mbedtls_md_hmac_reset( &ctx->md_ctx ) ) != 0 )
            goto exit;
        if( ( ret = mbedtls_md_hmac_update( &ctx->md_ctx,
                                            ctx->V, md_len ) ) != 0 )
 c0240f6:	f105 080c 	add.w	r8, r5, #12
    for( sep[0] = 0; sep[0] < rounds; sep[0]++ )
 c0240fa:	f88d 3004 	strb.w	r3, [sp, #4]
 c0240fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 c024102:	42b3      	cmp	r3, r6
 c024104:	d303      	bcc.n	c02410e <mbedtls_hmac_drbg_update_ret+0x3e>
            goto exit;
        if( ( ret = mbedtls_md_hmac_finish( &ctx->md_ctx, ctx->V ) ) != 0 )
            goto exit;
    }

exit:
 c024106:	2400      	movs	r4, #0
 c024108:	e01c      	b.n	c024144 <mbedtls_hmac_drbg_update_ret+0x74>
    unsigned char rounds = ( additional != NULL && add_len != 0 ) ? 2 : 1;
 c02410a:	2601      	movs	r6, #1
 c02410c:	e7f2      	b.n	c0240f4 <mbedtls_hmac_drbg_update_ret+0x24>
        if( ( ret = mbedtls_md_hmac_reset( &ctx->md_ctx ) ) != 0 )
 c02410e:	4628      	mov	r0, r5
 c024110:	f000 fa38 	bl	c024584 <mbedtls_md_hmac_reset>
 c024114:	4604      	mov	r4, r0
 c024116:	b9a8      	cbnz	r0, c024144 <mbedtls_hmac_drbg_update_ret+0x74>
        if( ( ret = mbedtls_md_hmac_update( &ctx->md_ctx,
 c024118:	463a      	mov	r2, r7
 c02411a:	4641      	mov	r1, r8
 c02411c:	4628      	mov	r0, r5
 c02411e:	f000 f9f1 	bl	c024504 <mbedtls_md_hmac_update>
 c024122:	4604      	mov	r4, r0
 c024124:	b970      	cbnz	r0, c024144 <mbedtls_hmac_drbg_update_ret+0x74>
        if( ( ret = mbedtls_md_hmac_update( &ctx->md_ctx,
 c024126:	2201      	movs	r2, #1
 c024128:	a901      	add	r1, sp, #4
 c02412a:	4628      	mov	r0, r5
 c02412c:	f000 f9ea 	bl	c024504 <mbedtls_md_hmac_update>
 c024130:	4604      	mov	r4, r0
 c024132:	b938      	cbnz	r0, c024144 <mbedtls_hmac_drbg_update_ret+0x74>
        if( rounds == 2 )
 c024134:	2e02      	cmp	r6, #2
 c024136:	d00d      	beq.n	c024154 <mbedtls_hmac_drbg_update_ret+0x84>
        if( ( ret = mbedtls_md_hmac_finish( &ctx->md_ctx, K ) ) != 0 )
 c024138:	a902      	add	r1, sp, #8
 c02413a:	4628      	mov	r0, r5
 c02413c:	f000 f9f4 	bl	c024528 <mbedtls_md_hmac_finish>
 c024140:	4604      	mov	r4, r0
 c024142:	b180      	cbz	r0, c024166 <mbedtls_hmac_drbg_update_ret+0x96>
    mbedtls_platform_zeroize( K, sizeof( K ) );
 c024144:	a802      	add	r0, sp, #8
 c024146:	2140      	movs	r1, #64	; 0x40
 c024148:	f002 faee 	bl	c026728 <mbedtls_platform_zeroize>
    return( ret );
}
 c02414c:	4620      	mov	r0, r4
 c02414e:	b012      	add	sp, #72	; 0x48
 c024150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if( ( ret = mbedtls_md_hmac_update( &ctx->md_ctx,
 c024154:	4652      	mov	r2, sl
 c024156:	4649      	mov	r1, r9
 c024158:	4628      	mov	r0, r5
 c02415a:	f000 f9d3 	bl	c024504 <mbedtls_md_hmac_update>
 c02415e:	4604      	mov	r4, r0
 c024160:	2800      	cmp	r0, #0
 c024162:	d0e9      	beq.n	c024138 <mbedtls_hmac_drbg_update_ret+0x68>
 c024164:	e7ee      	b.n	c024144 <mbedtls_hmac_drbg_update_ret+0x74>
        if( ( ret = mbedtls_md_hmac_starts( &ctx->md_ctx, K, md_len ) ) != 0 )
 c024166:	463a      	mov	r2, r7
 c024168:	a902      	add	r1, sp, #8
 c02416a:	4628      	mov	r0, r5
 c02416c:	f000 f966 	bl	c02443c <mbedtls_md_hmac_starts>
 c024170:	4604      	mov	r4, r0
 c024172:	2800      	cmp	r0, #0
 c024174:	d1e6      	bne.n	c024144 <mbedtls_hmac_drbg_update_ret+0x74>
        if( ( ret = mbedtls_md_hmac_update( &ctx->md_ctx,
 c024176:	463a      	mov	r2, r7
 c024178:	4641      	mov	r1, r8
 c02417a:	4628      	mov	r0, r5
 c02417c:	f000 f9c2 	bl	c024504 <mbedtls_md_hmac_update>
 c024180:	4604      	mov	r4, r0
 c024182:	2800      	cmp	r0, #0
 c024184:	d1de      	bne.n	c024144 <mbedtls_hmac_drbg_update_ret+0x74>
        if( ( ret = mbedtls_md_hmac_finish( &ctx->md_ctx, ctx->V ) ) != 0 )
 c024186:	4641      	mov	r1, r8
 c024188:	4628      	mov	r0, r5
 c02418a:	f000 f9cd 	bl	c024528 <mbedtls_md_hmac_finish>
 c02418e:	4604      	mov	r4, r0
 c024190:	2800      	cmp	r0, #0
 c024192:	d1d7      	bne.n	c024144 <mbedtls_hmac_drbg_update_ret+0x74>
    for( sep[0] = 0; sep[0] < rounds; sep[0]++ )
 c024194:	f89d 3004 	ldrb.w	r3, [sp, #4]
 c024198:	3301      	adds	r3, #1
 c02419a:	f88d 3004 	strb.w	r3, [sp, #4]
 c02419e:	e7ae      	b.n	c0240fe <mbedtls_hmac_drbg_update_ret+0x2e>

0c0241a0 <mbedtls_hmac_drbg_seed_buf>:
 * Simplified HMAC_DRBG initialisation (for use with deterministic ECDSA)
 */
int mbedtls_hmac_drbg_seed_buf( mbedtls_hmac_drbg_context *ctx,
                        const mbedtls_md_info_t * md_info,
                        const unsigned char *data, size_t data_len )
{
 c0241a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c0241a4:	4617      	mov	r7, r2
    int ret;

    if( ( ret = mbedtls_md_setup( &ctx->md_ctx, md_info, 1 ) ) != 0 )
 c0241a6:	2201      	movs	r2, #1
{
 c0241a8:	4604      	mov	r4, r0
 c0241aa:	460e      	mov	r6, r1
 c0241ac:	4698      	mov	r8, r3
    if( ( ret = mbedtls_md_setup( &ctx->md_ctx, md_info, 1 ) ) != 0 )
 c0241ae:	f000 f8f7 	bl	c0243a0 <mbedtls_md_setup>
 c0241b2:	b9c8      	cbnz	r0, c0241e8 <mbedtls_hmac_drbg_seed_buf+0x48>
     * Set initial working state.
     * Use the V memory location, which is currently all 0, to initialize the
     * MD context with an all-zero key. Then set V to its initial value.
     */
    if( ( ret = mbedtls_md_hmac_starts( &ctx->md_ctx, ctx->V,
                                        mbedtls_md_get_size( md_info ) ) ) != 0 )
 c0241b4:	4630      	mov	r0, r6
 c0241b6:	f000 f9fd 	bl	c0245b4 <mbedtls_md_get_size>
    if( ( ret = mbedtls_md_hmac_starts( &ctx->md_ctx, ctx->V,
 c0241ba:	f104 050c 	add.w	r5, r4, #12
 c0241be:	4602      	mov	r2, r0
 c0241c0:	4629      	mov	r1, r5
 c0241c2:	4620      	mov	r0, r4
 c0241c4:	f000 f93a 	bl	c02443c <mbedtls_md_hmac_starts>
 c0241c8:	b970      	cbnz	r0, c0241e8 <mbedtls_hmac_drbg_seed_buf+0x48>
        return( ret );
    memset( ctx->V, 0x01, mbedtls_md_get_size( md_info ) );
 c0241ca:	4630      	mov	r0, r6
 c0241cc:	f000 f9f2 	bl	c0245b4 <mbedtls_md_get_size>
 c0241d0:	2101      	movs	r1, #1
 c0241d2:	4602      	mov	r2, r0
 c0241d4:	4628      	mov	r0, r5
 c0241d6:	f7f0 fbf6 	bl	c0149c6 <memset>

    if( ( ret = mbedtls_hmac_drbg_update_ret( ctx, data, data_len ) ) != 0 )
 c0241da:	4642      	mov	r2, r8
 c0241dc:	4639      	mov	r1, r7
 c0241de:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
 c0241e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if( ( ret = mbedtls_hmac_drbg_update_ret( ctx, data, data_len ) ) != 0 )
 c0241e4:	f7ff bf74 	b.w	c0240d0 <mbedtls_hmac_drbg_update_ret>
}
 c0241e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0c0241ec <mbedtls_hmac_drbg_reseed>:
/*
 * HMAC_DRBG reseeding: 10.1.2.4 (arabic) + 9.2 (Roman)
 */
int mbedtls_hmac_drbg_reseed( mbedtls_hmac_drbg_context *ctx,
                      const unsigned char *additional, size_t len )
{
 c0241ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char seed[MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT];
    size_t seedlen;
    int ret;

    /* III. Check input length */
    if( len > MBEDTLS_HMAC_DRBG_MAX_INPUT ||
 c0241ee:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
{
 c0241f2:	b0e1      	sub	sp, #388	; 0x184
 c0241f4:	4604      	mov	r4, r0
 c0241f6:	460f      	mov	r7, r1
 c0241f8:	4615      	mov	r5, r2
    if( len > MBEDTLS_HMAC_DRBG_MAX_INPUT ||
 c0241fa:	d82a      	bhi.n	c024252 <mbedtls_hmac_drbg_reseed+0x66>
        ctx->entropy_len + len > MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT )
 c0241fc:	6d06      	ldr	r6, [r0, #80]	; 0x50
 c0241fe:	18b3      	adds	r3, r6, r2
    if( len > MBEDTLS_HMAC_DRBG_MAX_INPUT ||
 c024200:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 c024204:	d825      	bhi.n	c024252 <mbedtls_hmac_drbg_reseed+0x66>
    {
        return( MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG );
    }

    memset( seed, 0, MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT );
 c024206:	f44f 72c0 	mov.w	r2, #384	; 0x180
 c02420a:	2100      	movs	r1, #0
 c02420c:	4668      	mov	r0, sp
 c02420e:	f7f0 fbda 	bl	c0149c6 <memset>

    /* IV. Gather entropy_len bytes of entropy for the seed */
    if( ( ret = ctx->f_entropy( ctx->p_entropy,
 c024212:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 c024214:	4632      	mov	r2, r6
 c024216:	4669      	mov	r1, sp
 c024218:	6e20      	ldr	r0, [r4, #96]	; 0x60
 c02421a:	4798      	blx	r3
 c02421c:	b9e0      	cbnz	r0, c024258 <mbedtls_hmac_drbg_reseed+0x6c>
                                seed, ctx->entropy_len ) ) != 0 )
        return( MBEDTLS_ERR_HMAC_DRBG_ENTROPY_SOURCE_FAILED );

    seedlen = ctx->entropy_len;
 c02421e:	6d26      	ldr	r6, [r4, #80]	; 0x50

    /* 1. Concatenate entropy and additional data if any */
    if( additional != NULL && len != 0 )
 c024220:	b13f      	cbz	r7, c024232 <mbedtls_hmac_drbg_reseed+0x46>
 c024222:	b135      	cbz	r5, c024232 <mbedtls_hmac_drbg_reseed+0x46>
    {
        memcpy( seed + seedlen, additional, len );
 c024224:	eb0d 0006 	add.w	r0, sp, r6
 c024228:	462a      	mov	r2, r5
 c02422a:	4639      	mov	r1, r7
 c02422c:	f7f0 fba7 	bl	c01497e <memcpy>
        seedlen += len;
 c024230:	442e      	add	r6, r5
    }

    /* 2. Update state */
    if( ( ret = mbedtls_hmac_drbg_update_ret( ctx, seed, seedlen ) ) != 0 )
 c024232:	4632      	mov	r2, r6
 c024234:	4669      	mov	r1, sp
 c024236:	4620      	mov	r0, r4
 c024238:	f7ff ff4a 	bl	c0240d0 <mbedtls_hmac_drbg_update_ret>
 c02423c:	4605      	mov	r5, r0
 c02423e:	b908      	cbnz	r0, c024244 <mbedtls_hmac_drbg_reseed+0x58>
        goto exit;

    /* 3. Reset reseed_counter */
    ctx->reseed_counter = 1;
 c024240:	2301      	movs	r3, #1
 c024242:	64e3      	str	r3, [r4, #76]	; 0x4c

exit:
    /* 4. Done */
    mbedtls_platform_zeroize( seed, seedlen );
 c024244:	4631      	mov	r1, r6
 c024246:	4668      	mov	r0, sp
 c024248:	f002 fa6e 	bl	c026728 <mbedtls_platform_zeroize>
    return( ret );
}
 c02424c:	4628      	mov	r0, r5
 c02424e:	b061      	add	sp, #388	; 0x184
 c024250:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG );
 c024252:	f06f 0504 	mvn.w	r5, #4
 c024256:	e7f9      	b.n	c02424c <mbedtls_hmac_drbg_reseed+0x60>
        return( MBEDTLS_ERR_HMAC_DRBG_ENTROPY_SOURCE_FAILED );
 c024258:	f06f 0508 	mvn.w	r5, #8
 c02425c:	e7f6      	b.n	c02424c <mbedtls_hmac_drbg_reseed+0x60>

0c02425e <mbedtls_hmac_drbg_random_with_add>:
 * 10.1.2.5 (arabic) + 9.3 (Roman)
 */
int mbedtls_hmac_drbg_random_with_add( void *p_rng,
                               unsigned char *output, size_t out_len,
                               const unsigned char *additional, size_t add_len )
{
 c02425e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c024262:	4616      	mov	r6, r2
 c024264:	4604      	mov	r4, r0
    int ret;
    mbedtls_hmac_drbg_context *ctx = (mbedtls_hmac_drbg_context *) p_rng;
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 c024266:	6800      	ldr	r0, [r0, #0]
{
 c024268:	4688      	mov	r8, r1
 c02426a:	461f      	mov	r7, r3
 c02426c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 c02426e:	f000 f9a1 	bl	c0245b4 <mbedtls_md_get_size>
    size_t left = out_len;
    unsigned char *out = output;

    /* II. Check request length */
    if( out_len > MBEDTLS_HMAC_DRBG_MAX_REQUEST )
 c024272:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 c024276:	4683      	mov	fp, r0
    if( out_len > MBEDTLS_HMAC_DRBG_MAX_REQUEST )
 c024278:	d84b      	bhi.n	c024312 <mbedtls_hmac_drbg_random_with_add+0xb4>
        return( MBEDTLS_ERR_HMAC_DRBG_REQUEST_TOO_BIG );

    /* III. Check input length */
    if( add_len > MBEDTLS_HMAC_DRBG_MAX_INPUT )
 c02427a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 c02427e:	d84b      	bhi.n	c024318 <mbedtls_hmac_drbg_random_with_add+0xba>
        return( MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG );

    /* 1. (aka VII and IX) Check reseed counter and PR */
    if( ctx->f_entropy != NULL && /* For no-reseeding instances */
 c024280:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 c024282:	b1d3      	cbz	r3, c0242ba <mbedtls_hmac_drbg_random_with_add+0x5c>
 c024284:	6d63      	ldr	r3, [r4, #84]	; 0x54
 c024286:	2b01      	cmp	r3, #1
 c024288:	d003      	beq.n	c024292 <mbedtls_hmac_drbg_random_with_add+0x34>
        ( ctx->prediction_resistance == MBEDTLS_HMAC_DRBG_PR_ON ||
 c02428a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 c02428c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 c02428e:	429a      	cmp	r2, r3
 c024290:	dd13      	ble.n	c0242ba <mbedtls_hmac_drbg_random_with_add+0x5c>
          ctx->reseed_counter > ctx->reseed_interval ) )
    {
        if( ( ret = mbedtls_hmac_drbg_reseed( ctx, additional, add_len ) ) != 0 )
 c024292:	462a      	mov	r2, r5
 c024294:	4639      	mov	r1, r7
 c024296:	4620      	mov	r0, r4
 c024298:	f7ff ffa8 	bl	c0241ec <mbedtls_hmac_drbg_reseed>
 c02429c:	b9c0      	cbnz	r0, c0242d0 <mbedtls_hmac_drbg_random_with_add+0x72>
            return( ret );

        add_len = 0; /* VII.4 */
 c02429e:	2500      	movs	r5, #0
        size_t use_len = left > md_len ? md_len : left;

        if( ( ret = mbedtls_md_hmac_reset( &ctx->md_ctx ) ) != 0 )
            goto exit;
        if( ( ret = mbedtls_md_hmac_update( &ctx->md_ctx,
                                            ctx->V, md_len ) ) != 0 )
 c0242a0:	f104 090c 	add.w	r9, r4, #12
    while( left != 0 )
 c0242a4:	b9b6      	cbnz	r6, c0242d4 <mbedtls_hmac_drbg_random_with_add+0x76>
        out += use_len;
        left -= use_len;
    }

    /* 6. Update */
    if( ( ret = mbedtls_hmac_drbg_update_ret( ctx,
 c0242a6:	462a      	mov	r2, r5
 c0242a8:	4639      	mov	r1, r7
 c0242aa:	4620      	mov	r0, r4
 c0242ac:	f7ff ff10 	bl	c0240d0 <mbedtls_hmac_drbg_update_ret>
 c0242b0:	b970      	cbnz	r0, c0242d0 <mbedtls_hmac_drbg_random_with_add+0x72>
                                              additional, add_len ) ) != 0 )
        goto exit;

    /* 7. Update reseed counter */
    ctx->reseed_counter++;
 c0242b2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 c0242b4:	3301      	adds	r3, #1
 c0242b6:	64e3      	str	r3, [r4, #76]	; 0x4c
 c0242b8:	e00a      	b.n	c0242d0 <mbedtls_hmac_drbg_random_with_add+0x72>
    if( additional != NULL && add_len != 0 )
 c0242ba:	2f00      	cmp	r7, #0
 c0242bc:	d0f0      	beq.n	c0242a0 <mbedtls_hmac_drbg_random_with_add+0x42>
 c0242be:	2d00      	cmp	r5, #0
 c0242c0:	d0ed      	beq.n	c02429e <mbedtls_hmac_drbg_random_with_add+0x40>
        if( ( ret = mbedtls_hmac_drbg_update_ret( ctx,
 c0242c2:	462a      	mov	r2, r5
 c0242c4:	4639      	mov	r1, r7
 c0242c6:	4620      	mov	r0, r4
 c0242c8:	f7ff ff02 	bl	c0240d0 <mbedtls_hmac_drbg_update_ret>
 c0242cc:	2800      	cmp	r0, #0
 c0242ce:	d0e7      	beq.n	c0242a0 <mbedtls_hmac_drbg_random_with_add+0x42>

exit:
    /* 8. Done */
    return( ret );
}
 c0242d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        size_t use_len = left > md_len ? md_len : left;
 c0242d4:	455e      	cmp	r6, fp
        if( ( ret = mbedtls_md_hmac_reset( &ctx->md_ctx ) ) != 0 )
 c0242d6:	4620      	mov	r0, r4
        size_t use_len = left > md_len ? md_len : left;
 c0242d8:	46b2      	mov	sl, r6
 c0242da:	bf28      	it	cs
 c0242dc:	46da      	movcs	sl, fp
        if( ( ret = mbedtls_md_hmac_reset( &ctx->md_ctx ) ) != 0 )
 c0242de:	f000 f951 	bl	c024584 <mbedtls_md_hmac_reset>
 c0242e2:	2800      	cmp	r0, #0
 c0242e4:	d1f4      	bne.n	c0242d0 <mbedtls_hmac_drbg_random_with_add+0x72>
        if( ( ret = mbedtls_md_hmac_update( &ctx->md_ctx,
 c0242e6:	465a      	mov	r2, fp
 c0242e8:	4649      	mov	r1, r9
 c0242ea:	4620      	mov	r0, r4
 c0242ec:	f000 f90a 	bl	c024504 <mbedtls_md_hmac_update>
 c0242f0:	2800      	cmp	r0, #0
 c0242f2:	d1ed      	bne.n	c0242d0 <mbedtls_hmac_drbg_random_with_add+0x72>
        if( ( ret = mbedtls_md_hmac_finish( &ctx->md_ctx, ctx->V ) ) != 0 )
 c0242f4:	4649      	mov	r1, r9
 c0242f6:	4620      	mov	r0, r4
 c0242f8:	f000 f916 	bl	c024528 <mbedtls_md_hmac_finish>
 c0242fc:	2800      	cmp	r0, #0
 c0242fe:	d1e7      	bne.n	c0242d0 <mbedtls_hmac_drbg_random_with_add+0x72>
        memcpy( out, ctx->V, use_len );
 c024300:	4640      	mov	r0, r8
 c024302:	4652      	mov	r2, sl
 c024304:	4649      	mov	r1, r9
 c024306:	f7f0 fb3a 	bl	c01497e <memcpy>
        out += use_len;
 c02430a:	44d0      	add	r8, sl
        left -= use_len;
 c02430c:	eba6 060a 	sub.w	r6, r6, sl
 c024310:	e7c8      	b.n	c0242a4 <mbedtls_hmac_drbg_random_with_add+0x46>
        return( MBEDTLS_ERR_HMAC_DRBG_REQUEST_TOO_BIG );
 c024312:	f06f 0002 	mvn.w	r0, #2
 c024316:	e7db      	b.n	c0242d0 <mbedtls_hmac_drbg_random_with_add+0x72>
        return( MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG );
 c024318:	f06f 0004 	mvn.w	r0, #4
 c02431c:	e7d8      	b.n	c0242d0 <mbedtls_hmac_drbg_random_with_add+0x72>

0c02431e <mbedtls_hmac_drbg_random>:
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    ret = mbedtls_hmac_drbg_random_with_add( ctx, output, out_len, NULL, 0 );
 c02431e:	2300      	movs	r3, #0
{
 c024320:	b507      	push	{r0, r1, r2, lr}
    ret = mbedtls_hmac_drbg_random_with_add( ctx, output, out_len, NULL, 0 );
 c024322:	9300      	str	r3, [sp, #0]
 c024324:	f7ff ff9b 	bl	c02425e <mbedtls_hmac_drbg_random_with_add>
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
}
 c024328:	b003      	add	sp, #12
 c02432a:	f85d fb04 	ldr.w	pc, [sp], #4

0c02432e <mbedtls_hmac_drbg_free>:

/*
 * Free an HMAC_DRBG context
 */
void mbedtls_hmac_drbg_free( mbedtls_hmac_drbg_context *ctx )
{
 c02432e:	b510      	push	{r4, lr}
    if( ctx == NULL )
 c024330:	4604      	mov	r4, r0
 c024332:	b138      	cbz	r0, c024344 <mbedtls_hmac_drbg_free+0x16>
        return;

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
    mbedtls_md_free( &ctx->md_ctx );
 c024334:	f000 f819 	bl	c02436a <mbedtls_md_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_hmac_drbg_context ) );
 c024338:	4620      	mov	r0, r4
}
 c02433a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_hmac_drbg_context ) );
 c02433e:	2164      	movs	r1, #100	; 0x64
 c024340:	f002 b9f2 	b.w	c026728 <mbedtls_platform_zeroize>
}
 c024344:	bd10      	pop	{r4, pc}
	...

0c024348 <mbedtls_md_info_from_type>:
#endif
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
 c024348:	3805      	subs	r0, #5
 c02434a:	b2c0      	uxtb	r0, r0
 c02434c:	2803      	cmp	r0, #3
 c02434e:	bf9a      	itte	ls
 c024350:	4b02      	ldrls	r3, [pc, #8]	; (c02435c <mbedtls_md_info_from_type+0x14>)
 c024352:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 c024356:	2000      	movhi	r0, #0
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
    }
}
 c024358:	4770      	bx	lr
 c02435a:	bf00      	nop
 c02435c:	0c033fe0 	.word	0x0c033fe0

0c024360 <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
 c024360:	2300      	movs	r3, #0
 c024362:	6003      	str	r3, [r0, #0]
 c024364:	6043      	str	r3, [r0, #4]
 c024366:	6083      	str	r3, [r0, #8]
}
 c024368:	4770      	bx	lr

0c02436a <mbedtls_md_free>:

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
 c02436a:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 c02436c:	4604      	mov	r4, r0
 c02436e:	b1a8      	cbz	r0, c02439c <mbedtls_md_free+0x32>
 c024370:	6803      	ldr	r3, [r0, #0]
 c024372:	b19b      	cbz	r3, c02439c <mbedtls_md_free+0x32>
        return;

    if( ctx->md_ctx != NULL )
 c024374:	6840      	ldr	r0, [r0, #4]
 c024376:	b108      	cbz	r0, c02437c <mbedtls_md_free+0x12>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
 c024378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c02437a:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
 c02437c:	68a0      	ldr	r0, [r4, #8]
 c02437e:	b138      	cbz	r0, c024390 <mbedtls_md_free+0x26>
    {
        mbedtls_platform_zeroize( ctx->hmac_ctx,
                                  2 * ctx->md_info->block_size );
 c024380:	6823      	ldr	r3, [r4, #0]
 c024382:	68d9      	ldr	r1, [r3, #12]
        mbedtls_platform_zeroize( ctx->hmac_ctx,
 c024384:	0049      	lsls	r1, r1, #1
 c024386:	f002 f9cf 	bl	c026728 <mbedtls_platform_zeroize>
        mbedtls_free( ctx->hmac_ctx );
 c02438a:	68a0      	ldr	r0, [r4, #8]
 c02438c:	f002 f9bc 	bl	c026708 <mbedtls_free>
    }

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
 c024390:	4620      	mov	r0, r4
}
 c024392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
 c024396:	210c      	movs	r1, #12
 c024398:	f002 b9c6 	b.w	c026728 <mbedtls_platform_zeroize>
}
 c02439c:	bd10      	pop	{r4, pc}
	...

0c0243a0 <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
 c0243a0:	b570      	push	{r4, r5, r6, lr}
 c0243a2:	4604      	mov	r4, r0
 c0243a4:	4616      	mov	r6, r2
    if( md_info == NULL || ctx == NULL )
 c0243a6:	460d      	mov	r5, r1
 c0243a8:	b199      	cbz	r1, c0243d2 <mbedtls_md_setup+0x32>
 c0243aa:	b190      	cbz	r0, c0243d2 <mbedtls_md_setup+0x32>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
 c0243ac:	6a0b      	ldr	r3, [r1, #32]
 c0243ae:	4798      	blx	r3
 c0243b0:	6060      	str	r0, [r4, #4]
 c0243b2:	b148      	cbz	r0, c0243c8 <mbedtls_md_setup+0x28>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
 c0243b4:	b156      	cbz	r6, c0243cc <mbedtls_md_setup+0x2c>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
 c0243b6:	68e9      	ldr	r1, [r5, #12]
 c0243b8:	2002      	movs	r0, #2
 c0243ba:	f002 f99f 	bl	c0266fc <mbedtls_calloc>
 c0243be:	60a0      	str	r0, [r4, #8]
        if( ctx->hmac_ctx == NULL )
 c0243c0:	b920      	cbnz	r0, c0243cc <mbedtls_md_setup+0x2c>
        {
            md_info->ctx_free_func( ctx->md_ctx );
 c0243c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 c0243c4:	6860      	ldr	r0, [r4, #4]
 c0243c6:	4798      	blx	r3
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 c0243c8:	4803      	ldr	r0, [pc, #12]	; (c0243d8 <mbedtls_md_setup+0x38>)
 c0243ca:	e001      	b.n	c0243d0 <mbedtls_md_setup+0x30>
        }
    }

    ctx->md_info = md_info;

    return( 0 );
 c0243cc:	2000      	movs	r0, #0
    ctx->md_info = md_info;
 c0243ce:	6025      	str	r5, [r4, #0]
}
 c0243d0:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 c0243d2:	4802      	ldr	r0, [pc, #8]	; (c0243dc <mbedtls_md_setup+0x3c>)
 c0243d4:	e7fc      	b.n	c0243d0 <mbedtls_md_setup+0x30>
 c0243d6:	bf00      	nop
 c0243d8:	ffffae80 	.word	0xffffae80
 c0243dc:	ffffaf00 	.word	0xffffaf00

0c0243e0 <mbedtls_md_starts>:

int mbedtls_md_starts( mbedtls_md_context_t *ctx )
{
    if( ctx == NULL || ctx->md_info == NULL )
 c0243e0:	b120      	cbz	r0, c0243ec <mbedtls_md_starts+0xc>
 c0243e2:	6803      	ldr	r3, [r0, #0]
 c0243e4:	b113      	cbz	r3, c0243ec <mbedtls_md_starts+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->starts_func( ctx->md_ctx ) );
 c0243e6:	691b      	ldr	r3, [r3, #16]
 c0243e8:	6840      	ldr	r0, [r0, #4]
 c0243ea:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 c0243ec:	4800      	ldr	r0, [pc, #0]	; (c0243f0 <mbedtls_md_starts+0x10>)
}
 c0243ee:	4770      	bx	lr
 c0243f0:	ffffaf00 	.word	0xffffaf00

0c0243f4 <mbedtls_md_update>:

int mbedtls_md_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL )
 c0243f4:	b120      	cbz	r0, c024400 <mbedtls_md_update+0xc>
 c0243f6:	6803      	ldr	r3, [r0, #0]
 c0243f8:	b113      	cbz	r3, c024400 <mbedtls_md_update+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 c0243fa:	695b      	ldr	r3, [r3, #20]
 c0243fc:	6840      	ldr	r0, [r0, #4]
 c0243fe:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 c024400:	4800      	ldr	r0, [pc, #0]	; (c024404 <mbedtls_md_update+0x10>)
}
 c024402:	4770      	bx	lr
 c024404:	ffffaf00 	.word	0xffffaf00

0c024408 <mbedtls_md_finish>:

int mbedtls_md_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
    if( ctx == NULL || ctx->md_info == NULL )
 c024408:	b120      	cbz	r0, c024414 <mbedtls_md_finish+0xc>
 c02440a:	6803      	ldr	r3, [r0, #0]
 c02440c:	b113      	cbz	r3, c024414 <mbedtls_md_finish+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 c02440e:	699b      	ldr	r3, [r3, #24]
 c024410:	6840      	ldr	r0, [r0, #4]
 c024412:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 c024414:	4800      	ldr	r0, [pc, #0]	; (c024418 <mbedtls_md_finish+0x10>)
}
 c024416:	4770      	bx	lr
 c024418:	ffffaf00 	.word	0xffffaf00

0c02441c <mbedtls_md>:

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
 c02441c:	b430      	push	{r4, r5}
 c02441e:	460d      	mov	r5, r1
 c024420:	4611      	mov	r1, r2
    if( md_info == NULL )
 c024422:	b128      	cbz	r0, c024430 <mbedtls_md+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
 c024424:	69c4      	ldr	r4, [r0, #28]
 c024426:	461a      	mov	r2, r3
 c024428:	4628      	mov	r0, r5
 c02442a:	4623      	mov	r3, r4
}
 c02442c:	bc30      	pop	{r4, r5}
    return( md_info->digest_func( input, ilen, output ) );
 c02442e:	4718      	bx	r3
}
 c024430:	4801      	ldr	r0, [pc, #4]	; (c024438 <mbedtls_md+0x1c>)
 c024432:	bc30      	pop	{r4, r5}
 c024434:	4770      	bx	lr
 c024436:	bf00      	nop
 c024438:	ffffaf00 	.word	0xffffaf00

0c02443c <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
 c02443c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c024440:	460e      	mov	r6, r1
 c024442:	b090      	sub	sp, #64	; 0x40
 c024444:	4617      	mov	r7, r2
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 c024446:	4604      	mov	r4, r0
 c024448:	2800      	cmp	r0, #0
 c02444a:	d057      	beq.n	c0244fc <mbedtls_md_hmac_starts+0xc0>
 c02444c:	6803      	ldr	r3, [r0, #0]
 c02444e:	2b00      	cmp	r3, #0
 c024450:	d054      	beq.n	c0244fc <mbedtls_md_hmac_starts+0xc0>
 c024452:	6882      	ldr	r2, [r0, #8]
 c024454:	2a00      	cmp	r2, #0
 c024456:	d051      	beq.n	c0244fc <mbedtls_md_hmac_starts+0xc0>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
 c024458:	68da      	ldr	r2, [r3, #12]
 c02445a:	42ba      	cmp	r2, r7
 c02445c:	d217      	bcs.n	c02448e <mbedtls_md_hmac_starts+0x52>
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 c02445e:	691b      	ldr	r3, [r3, #16]
 c024460:	6840      	ldr	r0, [r0, #4]
 c024462:	4798      	blx	r3
 c024464:	4605      	mov	r5, r0
 c024466:	2800      	cmp	r0, #0
 c024468:	d134      	bne.n	c0244d4 <mbedtls_md_hmac_starts+0x98>
            goto cleanup;
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
 c02446a:	6823      	ldr	r3, [r4, #0]
 c02446c:	463a      	mov	r2, r7
 c02446e:	695b      	ldr	r3, [r3, #20]
 c024470:	4631      	mov	r1, r6
 c024472:	6860      	ldr	r0, [r4, #4]
 c024474:	4798      	blx	r3
 c024476:	4605      	mov	r5, r0
 c024478:	bb60      	cbnz	r0, c0244d4 <mbedtls_md_hmac_starts+0x98>
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
 c02447a:	6823      	ldr	r3, [r4, #0]
 c02447c:	4669      	mov	r1, sp
 c02447e:	699b      	ldr	r3, [r3, #24]
 c024480:	6860      	ldr	r0, [r4, #4]
 c024482:	4798      	blx	r3
 c024484:	4605      	mov	r5, r0
 c024486:	bb28      	cbnz	r0, c0244d4 <mbedtls_md_hmac_starts+0x98>
            goto cleanup;

        keylen = ctx->md_info->size;
        key = sum;
 c024488:	466e      	mov	r6, sp
        keylen = ctx->md_info->size;
 c02448a:	6823      	ldr	r3, [r4, #0]
 c02448c:	689f      	ldr	r7, [r3, #8]
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 c02448e:	6823      	ldr	r3, [r4, #0]
    ipad = (unsigned char *) ctx->hmac_ctx;
 c024490:	f8d4 8008 	ldr.w	r8, [r4, #8]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 c024494:	68da      	ldr	r2, [r3, #12]

    memset( ipad, 0x36, ctx->md_info->block_size );
 c024496:	2136      	movs	r1, #54	; 0x36
 c024498:	4640      	mov	r0, r8
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 c02449a:	eb08 0502 	add.w	r5, r8, r2
    memset( ipad, 0x36, ctx->md_info->block_size );
 c02449e:	f7f0 fa92 	bl	c0149c6 <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
 c0244a2:	6823      	ldr	r3, [r4, #0]
 c0244a4:	215c      	movs	r1, #92	; 0x5c
 c0244a6:	68da      	ldr	r2, [r3, #12]
 c0244a8:	4628      	mov	r0, r5
 c0244aa:	f7f0 fa8c 	bl	c0149c6 <memset>
 c0244ae:	4643      	mov	r3, r8
 c0244b0:	3e01      	subs	r6, #1
 c0244b2:	1e68      	subs	r0, r5, #1
 c0244b4:	4447      	add	r7, r8

    for( i = 0; i < keylen; i++ )
 c0244b6:	429f      	cmp	r7, r3
 c0244b8:	d114      	bne.n	c0244e4 <mbedtls_md_hmac_starts+0xa8>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
    }

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 c0244ba:	6823      	ldr	r3, [r4, #0]
 c0244bc:	6860      	ldr	r0, [r4, #4]
 c0244be:	691b      	ldr	r3, [r3, #16]
 c0244c0:	4798      	blx	r3
 c0244c2:	4605      	mov	r5, r0
 c0244c4:	b930      	cbnz	r0, c0244d4 <mbedtls_md_hmac_starts+0x98>
        goto cleanup;
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
 c0244c6:	6823      	ldr	r3, [r4, #0]
 c0244c8:	4641      	mov	r1, r8
 c0244ca:	695d      	ldr	r5, [r3, #20]
 c0244cc:	68da      	ldr	r2, [r3, #12]
 c0244ce:	6860      	ldr	r0, [r4, #4]
 c0244d0:	47a8      	blx	r5
 c0244d2:	4605      	mov	r5, r0
                                           ctx->md_info->block_size ) ) != 0 )
        goto cleanup;

cleanup:
    mbedtls_platform_zeroize( sum, sizeof( sum ) );
 c0244d4:	2140      	movs	r1, #64	; 0x40
 c0244d6:	4668      	mov	r0, sp
 c0244d8:	f002 f926 	bl	c026728 <mbedtls_platform_zeroize>

    return( ret );
}
 c0244dc:	4628      	mov	r0, r5
 c0244de:	b010      	add	sp, #64	; 0x40
 c0244e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 c0244e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 c0244e8:	781a      	ldrb	r2, [r3, #0]
 c0244ea:	404a      	eors	r2, r1
 c0244ec:	f803 2b01 	strb.w	r2, [r3], #1
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 c0244f0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 c0244f4:	7831      	ldrb	r1, [r6, #0]
 c0244f6:	404a      	eors	r2, r1
 c0244f8:	7002      	strb	r2, [r0, #0]
 c0244fa:	e7dc      	b.n	c0244b6 <mbedtls_md_hmac_starts+0x7a>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 c0244fc:	4d00      	ldr	r5, [pc, #0]	; (c024500 <mbedtls_md_hmac_starts+0xc4>)
 c0244fe:	e7ed      	b.n	c0244dc <mbedtls_md_hmac_starts+0xa0>
 c024500:	ffffaf00 	.word	0xffffaf00

0c024504 <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
 c024504:	b410      	push	{r4}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 c024506:	b140      	cbz	r0, c02451a <mbedtls_md_hmac_update+0x16>
 c024508:	6803      	ldr	r3, [r0, #0]
 c02450a:	b133      	cbz	r3, c02451a <mbedtls_md_hmac_update+0x16>
 c02450c:	6884      	ldr	r4, [r0, #8]
 c02450e:	b124      	cbz	r4, c02451a <mbedtls_md_hmac_update+0x16>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 c024510:	695b      	ldr	r3, [r3, #20]
 c024512:	6840      	ldr	r0, [r0, #4]
}
 c024514:	f85d 4b04 	ldr.w	r4, [sp], #4
    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 c024518:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 c02451a:	4802      	ldr	r0, [pc, #8]	; (c024524 <mbedtls_md_hmac_update+0x20>)
}
 c02451c:	f85d 4b04 	ldr.w	r4, [sp], #4
 c024520:	4770      	bx	lr
 c024522:	bf00      	nop
 c024524:	ffffaf00 	.word	0xffffaf00

0c024528 <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 c024528:	b5f0      	push	{r4, r5, r6, r7, lr}
 c02452a:	460e      	mov	r6, r1
 c02452c:	b091      	sub	sp, #68	; 0x44
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 c02452e:	4604      	mov	r4, r0
 c024530:	b320      	cbz	r0, c02457c <mbedtls_md_hmac_finish+0x54>
 c024532:	6803      	ldr	r3, [r0, #0]
 c024534:	b313      	cbz	r3, c02457c <mbedtls_md_hmac_finish+0x54>
 c024536:	6882      	ldr	r2, [r0, #8]
 c024538:	b302      	cbz	r2, c02457c <mbedtls_md_hmac_finish+0x54>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 c02453a:	68dd      	ldr	r5, [r3, #12]

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
 c02453c:	4669      	mov	r1, sp
 c02453e:	699b      	ldr	r3, [r3, #24]
 c024540:	6840      	ldr	r0, [r0, #4]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 c024542:	4415      	add	r5, r2
    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
 c024544:	4798      	blx	r3
 c024546:	b9b8      	cbnz	r0, c024578 <mbedtls_md_hmac_finish+0x50>
        return( ret );
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 c024548:	6823      	ldr	r3, [r4, #0]
 c02454a:	6860      	ldr	r0, [r4, #4]
 c02454c:	691b      	ldr	r3, [r3, #16]
 c02454e:	4798      	blx	r3
 c024550:	b990      	cbnz	r0, c024578 <mbedtls_md_hmac_finish+0x50>
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
 c024552:	6823      	ldr	r3, [r4, #0]
 c024554:	4629      	mov	r1, r5
 c024556:	695f      	ldr	r7, [r3, #20]
 c024558:	68da      	ldr	r2, [r3, #12]
 c02455a:	6860      	ldr	r0, [r4, #4]
 c02455c:	47b8      	blx	r7
 c02455e:	b958      	cbnz	r0, c024578 <mbedtls_md_hmac_finish+0x50>
                                           ctx->md_info->block_size ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
 c024560:	6823      	ldr	r3, [r4, #0]
 c024562:	4669      	mov	r1, sp
 c024564:	695d      	ldr	r5, [r3, #20]
 c024566:	689a      	ldr	r2, [r3, #8]
 c024568:	6860      	ldr	r0, [r4, #4]
 c02456a:	47a8      	blx	r5
 c02456c:	b920      	cbnz	r0, c024578 <mbedtls_md_hmac_finish+0x50>
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 c02456e:	6823      	ldr	r3, [r4, #0]
 c024570:	4631      	mov	r1, r6
 c024572:	699b      	ldr	r3, [r3, #24]
 c024574:	6860      	ldr	r0, [r4, #4]
 c024576:	4798      	blx	r3
}
 c024578:	b011      	add	sp, #68	; 0x44
 c02457a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 c02457c:	4800      	ldr	r0, [pc, #0]	; (c024580 <mbedtls_md_hmac_finish+0x58>)
 c02457e:	e7fb      	b.n	c024578 <mbedtls_md_hmac_finish+0x50>
 c024580:	ffffaf00 	.word	0xffffaf00

0c024584 <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
 c024584:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 c024586:	4604      	mov	r4, r0
 c024588:	b180      	cbz	r0, c0245ac <mbedtls_md_hmac_reset+0x28>
 c02458a:	6803      	ldr	r3, [r0, #0]
 c02458c:	b173      	cbz	r3, c0245ac <mbedtls_md_hmac_reset+0x28>
 c02458e:	6885      	ldr	r5, [r0, #8]
 c024590:	b165      	cbz	r5, c0245ac <mbedtls_md_hmac_reset+0x28>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 c024592:	691b      	ldr	r3, [r3, #16]
 c024594:	6840      	ldr	r0, [r0, #4]
 c024596:	4798      	blx	r3
 c024598:	b948      	cbnz	r0, c0245ae <mbedtls_md_hmac_reset+0x2a>
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 c02459a:	6823      	ldr	r3, [r4, #0]
 c02459c:	4629      	mov	r1, r5
 c02459e:	695e      	ldr	r6, [r3, #20]
 c0245a0:	68da      	ldr	r2, [r3, #12]
 c0245a2:	6860      	ldr	r0, [r4, #4]
 c0245a4:	4633      	mov	r3, r6
                                       ctx->md_info->block_size ) );
}
 c0245a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 c0245aa:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 c0245ac:	4800      	ldr	r0, [pc, #0]	; (c0245b0 <mbedtls_md_hmac_reset+0x2c>)
}
 c0245ae:	bd70      	pop	{r4, r5, r6, pc}
 c0245b0:	ffffaf00 	.word	0xffffaf00

0c0245b4 <mbedtls_md_get_size>:
    return( ctx->md_info->process_func( ctx->md_ctx, data ) );
}

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 c0245b4:	b100      	cbz	r0, c0245b8 <mbedtls_md_get_size+0x4>
        return( 0 );

    return md_info->size;
 c0245b6:	7a00      	ldrb	r0, [r0, #8]
}
 c0245b8:	4770      	bx	lr

0c0245ba <mbedtls_md_get_type>:

mbedtls_md_type_t mbedtls_md_get_type( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 c0245ba:	b100      	cbz	r0, c0245be <mbedtls_md_get_type+0x4>
        return( MBEDTLS_MD_NONE );

    return md_info->type;
 c0245bc:	7800      	ldrb	r0, [r0, #0]
}
 c0245be:	4770      	bx	lr

0c0245c0 <sha224_process_wrap>:
                    (const mbedtls_sha256_context *) src );
}

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
 c0245c0:	f007 b850 	b.w	c02b664 <mbedtls_internal_sha256_process>

0c0245c4 <sha224_clone_wrap>:
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
 c0245c4:	f006 bff7 	b.w	c02b5b6 <mbedtls_sha256_clone>

0c0245c8 <sha224_ctx_free>:
{
 c0245c8:	b510      	push	{r4, lr}
 c0245ca:	4604      	mov	r4, r0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
 c0245cc:	f006 ffee 	bl	c02b5ac <mbedtls_sha256_free>
    mbedtls_free( ctx );
 c0245d0:	4620      	mov	r0, r4
}
 c0245d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 c0245d6:	f002 b897 	b.w	c026708 <mbedtls_free>

0c0245da <sha224_ctx_alloc>:
{
 c0245da:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 c0245dc:	216c      	movs	r1, #108	; 0x6c
 c0245de:	2001      	movs	r0, #1
 c0245e0:	f002 f88c 	bl	c0266fc <mbedtls_calloc>
    if( ctx != NULL )
 c0245e4:	4604      	mov	r4, r0
 c0245e6:	b108      	cbz	r0, c0245ec <sha224_ctx_alloc+0x12>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
 c0245e8:	f006 ffdc 	bl	c02b5a4 <mbedtls_sha256_init>
}
 c0245ec:	4620      	mov	r0, r4
 c0245ee:	bd10      	pop	{r4, pc}

0c0245f0 <sha224_wrap>:
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
 c0245f0:	2301      	movs	r3, #1
 c0245f2:	f007 bc6e 	b.w	c02bed2 <mbedtls_sha256_ret>

0c0245f6 <sha256_wrap>:
}

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
 c0245f6:	2300      	movs	r3, #0
 c0245f8:	f007 bc6b 	b.w	c02bed2 <mbedtls_sha256_ret>

0c0245fc <sha224_finish_wrap>:
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
 c0245fc:	f007 bbd5 	b.w	c02bdaa <mbedtls_sha256_finish_ret>

0c024600 <sha224_update_wrap>:
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
 c024600:	f007 bb96 	b.w	c02bd30 <mbedtls_sha256_update_ret>

0c024604 <sha224_starts_wrap>:
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
 c024604:	2101      	movs	r1, #1
 c024606:	f006 bfdb 	b.w	c02b5c0 <mbedtls_sha256_starts_ret>

0c02460a <sha256_starts_wrap>:
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
 c02460a:	2100      	movs	r1, #0
 c02460c:	f006 bfd8 	b.w	c02b5c0 <mbedtls_sha256_starts_ret>

0c024610 <sha384_process_wrap>:
                    (const mbedtls_sha512_context *) src );
}

static int sha384_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha512_process( (mbedtls_sha512_context *) ctx,
 c024610:	f007 bd2a 	b.w	c02c068 <mbedtls_internal_sha512_process>

0c024614 <sha384_clone_wrap>:
    mbedtls_sha512_clone( (mbedtls_sha512_context *) dst,
 c024614:	f007 bc87 	b.w	c02bf26 <mbedtls_sha512_clone>

0c024618 <sha384_ctx_free>:
{
 c024618:	b510      	push	{r4, lr}
 c02461a:	4604      	mov	r4, r0
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
 c02461c:	f007 fc7e 	bl	c02bf1c <mbedtls_sha512_free>
    mbedtls_free( ctx );
 c024620:	4620      	mov	r0, r4
}
 c024622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 c024626:	f002 b86f 	b.w	c026708 <mbedtls_free>

0c02462a <sha384_ctx_alloc>:
{
 c02462a:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );
 c02462c:	21d8      	movs	r1, #216	; 0xd8
 c02462e:	2001      	movs	r0, #1
 c024630:	f002 f864 	bl	c0266fc <mbedtls_calloc>
    if( ctx != NULL )
 c024634:	4604      	mov	r4, r0
 c024636:	b108      	cbz	r0, c02463c <sha384_ctx_alloc+0x12>
        mbedtls_sha512_init( (mbedtls_sha512_context *) ctx );
 c024638:	f007 fc6c 	bl	c02bf14 <mbedtls_sha512_init>
}
 c02463c:	4620      	mov	r0, r4
 c02463e:	bd10      	pop	{r4, pc}

0c024640 <sha384_wrap>:
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
 c024640:	2301      	movs	r3, #1
 c024642:	f008 bd4a 	b.w	c02d0da <mbedtls_sha512_ret>

0c024646 <sha512_wrap>:
}

static int sha512_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 0 ) );
 c024646:	2300      	movs	r3, #0
 c024648:	f008 bd47 	b.w	c02d0da <mbedtls_sha512_ret>

0c02464c <sha384_finish_wrap>:
    return( mbedtls_sha512_finish_ret( (mbedtls_sha512_context *) ctx,
 c02464c:	f008 bc0b 	b.w	c02ce66 <mbedtls_sha512_finish_ret>

0c024650 <sha384_update_wrap>:
    return( mbedtls_sha512_update_ret( (mbedtls_sha512_context *) ctx,
 c024650:	f008 bbb6 	b.w	c02cdc0 <mbedtls_sha512_update_ret>

0c024654 <sha384_starts_wrap>:
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 1 ) );
 c024654:	2101      	movs	r1, #1
 c024656:	f007 bc6b 	b.w	c02bf30 <mbedtls_sha512_starts_ret>

0c02465a <sha512_starts_wrap>:
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 0 ) );
 c02465a:	2100      	movs	r1, #0
 c02465c:	f007 bc68 	b.w	c02bf30 <mbedtls_sha512_starts_ret>

0c024660 <verify_header>:
}
#endif /* MBEDTLS_MEMORY_DEBUG */

static int verify_header( memory_header *hdr )
{
    if( hdr->magic1 != MAGIC1 )
 c024660:	6802      	ldr	r2, [r0, #0]
 c024662:	4b0e      	ldr	r3, [pc, #56]	; (c02469c <verify_header+0x3c>)
 c024664:	429a      	cmp	r2, r3
 c024666:	d115      	bne.n	c024694 <verify_header+0x34>
        mbedtls_fprintf( stderr, "FATAL: MAGIC1 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->magic2 != MAGIC2 )
 c024668:	69c2      	ldr	r2, [r0, #28]
 c02466a:	f1a3 2310 	sub.w	r3, r3, #268439552	; 0x10001000
 c02466e:	f1a3 13ef 	sub.w	r3, r3, #15663343	; 0xef00ef
 c024672:	429a      	cmp	r2, r3
 c024674:	d10e      	bne.n	c024694 <verify_header+0x34>
        mbedtls_fprintf( stderr, "FATAL: MAGIC2 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->alloc > 1 )
 c024676:	6883      	ldr	r3, [r0, #8]
 c024678:	2b01      	cmp	r3, #1
 c02467a:	d80b      	bhi.n	c024694 <verify_header+0x34>
        mbedtls_fprintf( stderr, "FATAL: alloc has illegal value\n" );
#endif
        return( 1 );
    }

    if( hdr->prev != NULL && hdr->prev == hdr->next )
 c02467c:	68c3      	ldr	r3, [r0, #12]
 c02467e:	b113      	cbz	r3, c024686 <verify_header+0x26>
 c024680:	6902      	ldr	r2, [r0, #16]
 c024682:	4293      	cmp	r3, r2
 c024684:	d006      	beq.n	c024694 <verify_header+0x34>
        mbedtls_fprintf( stderr, "FATAL: prev == next\n" );
#endif
        return( 1 );
    }

    if( hdr->prev_free != NULL && hdr->prev_free == hdr->next_free )
 c024686:	6943      	ldr	r3, [r0, #20]
 c024688:	b133      	cbz	r3, c024698 <verify_header+0x38>
 c02468a:	6980      	ldr	r0, [r0, #24]
 c02468c:	1ac3      	subs	r3, r0, r3
 c02468e:	4258      	negs	r0, r3
 c024690:	4158      	adcs	r0, r3
 c024692:	4770      	bx	lr
        return( 1 );
 c024694:	2001      	movs	r0, #1
 c024696:	4770      	bx	lr
        mbedtls_fprintf( stderr, "FATAL: prev_free == next_free\n" );
#endif
        return( 1 );
    }

    return( 0 );
 c024698:	4618      	mov	r0, r3
}
 c02469a:	4770      	bx	lr
 c02469c:	ff00aa55 	.word	0xff00aa55

0c0246a0 <verify_chain>:

static int verify_chain( void )
{
 c0246a0:	b538      	push	{r3, r4, r5, lr}
    memory_header *prv = heap.first, *cur;
 c0246a2:	4b0d      	ldr	r3, [pc, #52]	; (c0246d8 <verify_chain+0x38>)
 c0246a4:	689d      	ldr	r5, [r3, #8]

    if( prv == NULL || verify_header( prv ) != 0 )
 c0246a6:	b1a5      	cbz	r5, c0246d2 <verify_chain+0x32>
 c0246a8:	4628      	mov	r0, r5
 c0246aa:	f7ff ffd9 	bl	c024660 <verify_header>
 c0246ae:	4601      	mov	r1, r0
 c0246b0:	b978      	cbnz	r0, c0246d2 <verify_chain+0x32>
                                  "failed\n" );
#endif
        return( 1 );
    }

    if( heap.first->prev != NULL )
 c0246b2:	68eb      	ldr	r3, [r5, #12]
 c0246b4:	b96b      	cbnz	r3, c0246d2 <verify_chain+0x32>
                                  "first->prev != NULL\n" );
#endif
        return( 1 );
    }

    cur = heap.first->next;
 c0246b6:	692c      	ldr	r4, [r5, #16]

    while( cur != NULL )
 c0246b8:	b90c      	cbnz	r4, c0246be <verify_chain+0x1e>
        prv = cur;
        cur = cur->next;
    }

    return( 0 );
}
 c0246ba:	4608      	mov	r0, r1
 c0246bc:	bd38      	pop	{r3, r4, r5, pc}
        if( verify_header( cur ) != 0 )
 c0246be:	4620      	mov	r0, r4
 c0246c0:	f7ff ffce 	bl	c024660 <verify_header>
 c0246c4:	b928      	cbnz	r0, c0246d2 <verify_chain+0x32>
        if( cur->prev != prv )
 c0246c6:	68e3      	ldr	r3, [r4, #12]
 c0246c8:	42ab      	cmp	r3, r5
 c0246ca:	d102      	bne.n	c0246d2 <verify_chain+0x32>
        cur = cur->next;
 c0246cc:	4625      	mov	r5, r4
 c0246ce:	6924      	ldr	r4, [r4, #16]
 c0246d0:	e7f2      	b.n	c0246b8 <verify_chain+0x18>
        return( 1 );
 c0246d2:	2101      	movs	r1, #1
 c0246d4:	e7f1      	b.n	c0246ba <verify_chain+0x1a>
 c0246d6:	bf00      	nop
 c0246d8:	30038038 	.word	0x30038038

0c0246dc <buffer_alloc_calloc>:

static void *buffer_alloc_calloc( size_t n, size_t size )
{
 c0246dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(MBEDTLS_MEMORY_BACKTRACE)
    void *trace_buffer[MAX_BT];
    size_t trace_cnt;
#endif

    if( heap.buf == NULL || heap.first == NULL )
 c0246e0:	4d38      	ldr	r5, [pc, #224]	; (c0247c4 <buffer_alloc_calloc+0xe8>)
 c0246e2:	682b      	ldr	r3, [r5, #0]
 c0246e4:	2b00      	cmp	r3, #0
 c0246e6:	d03b      	beq.n	c024760 <buffer_alloc_calloc+0x84>
 c0246e8:	68ab      	ldr	r3, [r5, #8]
 c0246ea:	2b00      	cmp	r3, #0
 c0246ec:	d038      	beq.n	c024760 <buffer_alloc_calloc+0x84>
        return( NULL );

    original_len = len = n * size;
 c0246ee:	fb01 f600 	mul.w	r6, r1, r0

    if( n == 0 || size == 0 || len / n != size )
 c0246f2:	b198      	cbz	r0, c02471c <buffer_alloc_calloc+0x40>
 c0246f4:	b191      	cbz	r1, c02471c <buffer_alloc_calloc+0x40>
 c0246f6:	fbb6 f3f0 	udiv	r3, r6, r0
 c0246fa:	428b      	cmp	r3, r1
 c0246fc:	d10e      	bne.n	c02471c <buffer_alloc_calloc+0x40>
        return( NULL );
    else if( len > (size_t)-MBEDTLS_MEMORY_ALIGN_MULTIPLE )
 c0246fe:	1d31      	adds	r1, r6, #4
 c024700:	d80c      	bhi.n	c02471c <buffer_alloc_calloc+0x40>
        return( NULL );

    if( len % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
 c024702:	07b2      	lsls	r2, r6, #30
 c024704:	d00c      	beq.n	c024720 <buffer_alloc_calloc+0x44>
    {
        len -= len % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
 c024706:	f026 0203 	bic.w	r2, r6, #3
        len += MBEDTLS_MEMORY_ALIGN_MULTIPLE;
 c02470a:	3204      	adds	r2, #4
    memory_header *new, *cur = heap.first_free;
 c02470c:	68e9      	ldr	r1, [r5, #12]
 c02470e:	e003      	b.n	c024718 <buffer_alloc_calloc+0x3c>

    // Find block that fits
    //
    while( cur != NULL )
    {
        if( cur->size >= len )
 c024710:	6848      	ldr	r0, [r1, #4]
 c024712:	4290      	cmp	r0, r2
 c024714:	d24e      	bcs.n	c0247b4 <buffer_alloc_calloc+0xd8>
            break;

        cur = cur->next_free;
 c024716:	6989      	ldr	r1, [r1, #24]
    while( cur != NULL )
 c024718:	2900      	cmp	r1, #0
 c02471a:	d1f9      	bne.n	c024710 <buffer_alloc_calloc+0x34>
        return( NULL );
 c02471c:	2300      	movs	r3, #0
 c02471e:	e01f      	b.n	c024760 <buffer_alloc_calloc+0x84>
 c024720:	4632      	mov	r2, r6
 c024722:	e7f3      	b.n	c02470c <buffer_alloc_calloc+0x30>
    heap.alloc_count++;
#endif

    // Found location, split block if > memory_header + 4 room left
    //
    if( cur->size - len < sizeof(memory_header) +
 c024724:	1a80      	subs	r0, r0, r2
 c024726:	2823      	cmp	r0, #35	; 0x23
 c024728:	e9d1 7c05 	ldrd	r7, ip, [r1, #20]
 c02472c:	f101 0420 	add.w	r4, r1, #32
 c024730:	d81c      	bhi.n	c02476c <buffer_alloc_calloc+0x90>
                          MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    {
        cur->alloc = 1;
 c024732:	2301      	movs	r3, #1
 c024734:	608b      	str	r3, [r1, #8]

        // Remove from free_list
        //
        if( cur->prev_free != NULL )
 c024736:	b1b7      	cbz	r7, c024766 <buffer_alloc_calloc+0x8a>
            cur->prev_free->next_free = cur->next_free;
 c024738:	f8c7 c018 	str.w	ip, [r7, #24]
        else
            heap.first_free = cur->next_free;

        if( cur->next_free != NULL )
 c02473c:	698b      	ldr	r3, [r1, #24]
 c02473e:	b103      	cbz	r3, c024742 <buffer_alloc_calloc+0x66>
            cur->next_free->prev_free = cur->prev_free;
 c024740:	615f      	str	r7, [r3, #20]
        new->next_free->prev_free = new;

    cur->alloc = 1;
    cur->size = len;
    cur->next = new;
    cur->prev_free = NULL;
 c024742:	2300      	movs	r3, #0
    cur->next_free = NULL;
 c024744:	e9c1 3305 	strd	r3, r3, [r1, #20]
    trace_cnt = backtrace( trace_buffer, MAX_BT );
    cur->trace = backtrace_symbols( trace_buffer, trace_cnt );
    cur->trace_count = trace_cnt;
#endif

    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
 c024748:	692b      	ldr	r3, [r5, #16]
 c02474a:	07db      	lsls	r3, r3, #31
 c02474c:	d502      	bpl.n	c024754 <buffer_alloc_calloc+0x78>
 c02474e:	f7ff ffa7 	bl	c0246a0 <verify_chain>
 c024752:	bba0      	cbnz	r0, c0247be <buffer_alloc_calloc+0xe2>
        mbedtls_exit( 1 );

    ret = (unsigned char *) cur + sizeof( memory_header );
    memset( ret, 0, original_len );
 c024754:	4632      	mov	r2, r6
 c024756:	2100      	movs	r1, #0
 c024758:	4620      	mov	r0, r4
 c02475a:	f7f0 f934 	bl	c0149c6 <memset>
 c02475e:	4603      	mov	r3, r0

    return( ret );
}
 c024760:	4618      	mov	r0, r3
 c024762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            heap.first_free = cur->next_free;
 c024766:	f8c5 c00c 	str.w	ip, [r5, #12]
 c02476a:	e7e7      	b.n	c02473c <buffer_alloc_calloc+0x60>
    p = ( (unsigned char *) cur ) + sizeof(memory_header) + len;
 c02476c:	f102 0820 	add.w	r8, r2, #32
 c024770:	eb01 0308 	add.w	r3, r1, r8
    new->size = cur->size - len - sizeof(memory_header);
 c024774:	3820      	subs	r0, #32
    new->alloc = 0;
 c024776:	e9c3 0e01 	strd	r0, lr, [r3, #4]
    new->next = cur->next;
 c02477a:	6908      	ldr	r0, [r1, #16]
    new->magic1 = MAGIC1;
 c02477c:	f8df e048 	ldr.w	lr, [pc, #72]	; c0247c8 <buffer_alloc_calloc+0xec>
    new->prev = cur;
 c024780:	60d9      	str	r1, [r3, #12]
    new->next = cur->next;
 c024782:	6118      	str	r0, [r3, #16]
    new->magic1 = MAGIC1;
 c024784:	f841 e008 	str.w	lr, [r1, r8]
    new->magic2 = MAGIC2;
 c024788:	f1ae 2e10 	sub.w	lr, lr, #268439552	; 0x10001000
 c02478c:	f1ae 1eef 	sub.w	lr, lr, #15663343	; 0xef00ef
 c024790:	f8c3 e01c 	str.w	lr, [r3, #28]
    if( new->next != NULL )
 c024794:	b100      	cbz	r0, c024798 <buffer_alloc_calloc+0xbc>
        new->next->prev = new;
 c024796:	60c3      	str	r3, [r0, #12]
    new->next_free = cur->next_free;
 c024798:	e9c3 7c05 	strd	r7, ip, [r3, #20]
    if( new->prev_free != NULL )
 c02479c:	b147      	cbz	r7, c0247b0 <buffer_alloc_calloc+0xd4>
        new->prev_free->next_free = new;
 c02479e:	61bb      	str	r3, [r7, #24]
    if( new->next_free != NULL )
 c0247a0:	6998      	ldr	r0, [r3, #24]
 c0247a2:	b100      	cbz	r0, c0247a6 <buffer_alloc_calloc+0xca>
        new->next_free->prev_free = new;
 c0247a4:	6143      	str	r3, [r0, #20]
    cur->alloc = 1;
 c0247a6:	2001      	movs	r0, #1
    cur->next = new;
 c0247a8:	610b      	str	r3, [r1, #16]
    cur->size = len;
 c0247aa:	e9c1 2001 	strd	r2, r0, [r1, #4]
 c0247ae:	e7c8      	b.n	c024742 <buffer_alloc_calloc+0x66>
        heap.first_free = new;
 c0247b0:	60eb      	str	r3, [r5, #12]
 c0247b2:	e7f5      	b.n	c0247a0 <buffer_alloc_calloc+0xc4>
    if( cur->alloc != 0 )
 c0247b4:	f8d1 e008 	ldr.w	lr, [r1, #8]
 c0247b8:	f1be 0f00 	cmp.w	lr, #0
 c0247bc:	d0b2      	beq.n	c024724 <buffer_alloc_calloc+0x48>
        mbedtls_exit( 1 );
 c0247be:	2001      	movs	r0, #1
 c0247c0:	f7f0 f886 	bl	c0148d0 <exit>
 c0247c4:	30038038 	.word	0x30038038
 c0247c8:	ff00aa55 	.word	0xff00aa55

0c0247cc <buffer_alloc_free>:

static void buffer_alloc_free( void *ptr )
{
 c0247cc:	b570      	push	{r4, r5, r6, lr}
    memory_header *hdr, *old = NULL;
    unsigned char *p = (unsigned char *) ptr;

    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
 c0247ce:	4606      	mov	r6, r0
 c0247d0:	2800      	cmp	r0, #0
 c0247d2:	d05d      	beq.n	c024890 <buffer_alloc_free+0xc4>
 c0247d4:	4c39      	ldr	r4, [pc, #228]	; (c0248bc <buffer_alloc_free+0xf0>)
 c0247d6:	6823      	ldr	r3, [r4, #0]
 c0247d8:	2b00      	cmp	r3, #0
 c0247da:	d059      	beq.n	c024890 <buffer_alloc_free+0xc4>
 c0247dc:	68a2      	ldr	r2, [r4, #8]
 c0247de:	2a00      	cmp	r2, #0
 c0247e0:	d056      	beq.n	c024890 <buffer_alloc_free+0xc4>
        return;

    if( p < heap.buf || p >= heap.buf + heap.len )
 c0247e2:	4283      	cmp	r3, r0
 c0247e4:	d803      	bhi.n	c0247ee <buffer_alloc_free+0x22>
 c0247e6:	6862      	ldr	r2, [r4, #4]
 c0247e8:	4413      	add	r3, r2
 c0247ea:	4298      	cmp	r0, r3
 c0247ec:	d302      	bcc.n	c0247f4 <buffer_alloc_free+0x28>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() outside of managed "
                                  "space\n" );
#endif
        mbedtls_exit( 1 );
 c0247ee:	2001      	movs	r0, #1
 c0247f0:	f7f0 f86e 	bl	c0148d0 <exit>
    }

    p -= sizeof(memory_header);
 c0247f4:	f1a0 0120 	sub.w	r1, r0, #32
    hdr = (memory_header *) p;

    if( verify_header( hdr ) != 0 )
 c0247f8:	4608      	mov	r0, r1
 c0247fa:	f7ff ff31 	bl	c024660 <verify_header>
 c0247fe:	2800      	cmp	r0, #0
 c024800:	d1f5      	bne.n	c0247ee <buffer_alloc_free+0x22>
        mbedtls_exit( 1 );

    if( hdr->alloc != 1 )
 c024802:	f856 3c18 	ldr.w	r3, [r6, #-24]
 c024806:	2b01      	cmp	r3, #1
 c024808:	d1f1      	bne.n	c0247ee <buffer_alloc_free+0x22>
    hdr->trace_count = 0;
#endif

    // Regroup with block before
    //
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
 c02480a:	f856 5c14 	ldr.w	r5, [r6, #-20]
    hdr->alloc = 0;
 c02480e:	f846 0c18 	str.w	r0, [r6, #-24]
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
 c024812:	b1b5      	cbz	r5, c024842 <buffer_alloc_free+0x76>
 c024814:	68ab      	ldr	r3, [r5, #8]
 c024816:	2b00      	cmp	r3, #0
 c024818:	d13b      	bne.n	c024892 <buffer_alloc_free+0xc6>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->prev->size += sizeof(memory_header) + hdr->size;
 c02481a:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 c02481e:	f103 0220 	add.w	r2, r3, #32
 c024822:	686b      	ldr	r3, [r5, #4]
 c024824:	4413      	add	r3, r2
 c024826:	606b      	str	r3, [r5, #4]
        hdr->prev->next = hdr->next;
 c024828:	f856 3c10 	ldr.w	r3, [r6, #-16]
 c02482c:	612b      	str	r3, [r5, #16]
        old = hdr;
        hdr = hdr->prev;

        if( hdr->next != NULL )
 c02482e:	b103      	cbz	r3, c024832 <buffer_alloc_free+0x66>
            hdr->next->prev = hdr;
 c024830:	60dd      	str	r5, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
 c024832:	460b      	mov	r3, r1
 c024834:	2220      	movs	r2, #32
 c024836:	2100      	movs	r1, #0
 c024838:	4618      	mov	r0, r3
 c02483a:	f7f0 f8c4 	bl	c0149c6 <memset>
 c02483e:	4629      	mov	r1, r5
 c024840:	4605      	mov	r5, r0
    }

    // Regroup with block after
    //
    if( hdr->next != NULL && hdr->next->alloc == 0 )
 c024842:	6908      	ldr	r0, [r1, #16]
 c024844:	2800      	cmp	r0, #0
 c024846:	d030      	beq.n	c0248aa <buffer_alloc_free+0xde>
 c024848:	6883      	ldr	r3, [r0, #8]
 c02484a:	2b00      	cmp	r3, #0
 c02484c:	d12d      	bne.n	c0248aa <buffer_alloc_free+0xde>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->size += sizeof(memory_header) + hdr->next->size;
 c02484e:	684b      	ldr	r3, [r1, #4]
 c024850:	6842      	ldr	r2, [r0, #4]
 c024852:	3320      	adds	r3, #32
 c024854:	4413      	add	r3, r2
 c024856:	604b      	str	r3, [r1, #4]
        old = hdr->next;
        hdr->next = hdr->next->next;
 c024858:	6903      	ldr	r3, [r0, #16]
 c02485a:	e9d1 2505 	ldrd	r2, r5, [r1, #20]
 c02485e:	610b      	str	r3, [r1, #16]

        if( hdr->prev_free != NULL || hdr->next_free != NULL )
 c024860:	b9ca      	cbnz	r2, c024896 <buffer_alloc_free+0xca>
 c024862:	b9f5      	cbnz	r5, c0248a2 <buffer_alloc_free+0xd6>

            if( hdr->next_free != NULL )
                hdr->next_free->prev_free = hdr->prev_free;
        }

        hdr->prev_free = old->prev_free;
 c024864:	6942      	ldr	r2, [r0, #20]
        hdr->next_free = old->next_free;
 c024866:	6985      	ldr	r5, [r0, #24]
        hdr->prev_free = old->prev_free;
 c024868:	614a      	str	r2, [r1, #20]
        hdr->next_free = old->next_free;
 c02486a:	618d      	str	r5, [r1, #24]

        if( hdr->prev_free != NULL )
 c02486c:	b1da      	cbz	r2, c0248a6 <buffer_alloc_free+0xda>
            hdr->prev_free->next_free = hdr;
 c02486e:	6191      	str	r1, [r2, #24]
        else
            heap.first_free = hdr;

        if( hdr->next_free != NULL )
 c024870:	698a      	ldr	r2, [r1, #24]
 c024872:	b102      	cbz	r2, c024876 <buffer_alloc_free+0xaa>
            hdr->next_free->prev_free = hdr;
 c024874:	6151      	str	r1, [r2, #20]

        if( hdr->next != NULL )
 c024876:	b103      	cbz	r3, c02487a <buffer_alloc_free+0xae>
            hdr->next->prev = hdr;
 c024878:	60d9      	str	r1, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
 c02487a:	2220      	movs	r2, #32
 c02487c:	2100      	movs	r1, #0
 c02487e:	f7f0 f8a2 	bl	c0149c6 <memset>
        if( heap.first_free != NULL )
            heap.first_free->prev_free = hdr;
        heap.first_free = hdr;
    }

    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
 c024882:	6923      	ldr	r3, [r4, #16]
 c024884:	079b      	lsls	r3, r3, #30
 c024886:	d503      	bpl.n	c024890 <buffer_alloc_free+0xc4>
 c024888:	f7ff ff0a 	bl	c0246a0 <verify_chain>
 c02488c:	2800      	cmp	r0, #0
 c02488e:	d1ae      	bne.n	c0247ee <buffer_alloc_free+0x22>
        mbedtls_exit( 1 );
}
 c024890:	bd70      	pop	{r4, r5, r6, pc}
    memory_header *hdr, *old = NULL;
 c024892:	4605      	mov	r5, r0
 c024894:	e7d5      	b.n	c024842 <buffer_alloc_free+0x76>
                hdr->prev_free->next_free = hdr->next_free;
 c024896:	6195      	str	r5, [r2, #24]
            if( hdr->next_free != NULL )
 c024898:	698d      	ldr	r5, [r1, #24]
 c02489a:	2d00      	cmp	r5, #0
 c02489c:	d0e2      	beq.n	c024864 <buffer_alloc_free+0x98>
                hdr->next_free->prev_free = hdr->prev_free;
 c02489e:	616a      	str	r2, [r5, #20]
 c0248a0:	e7e0      	b.n	c024864 <buffer_alloc_free+0x98>
                heap.first_free = hdr->next_free;
 c0248a2:	60e5      	str	r5, [r4, #12]
 c0248a4:	e7f8      	b.n	c024898 <buffer_alloc_free+0xcc>
            heap.first_free = hdr;
 c0248a6:	60e1      	str	r1, [r4, #12]
 c0248a8:	e7e2      	b.n	c024870 <buffer_alloc_free+0xa4>
    if( old == NULL )
 c0248aa:	2d00      	cmp	r5, #0
 c0248ac:	d1e9      	bne.n	c024882 <buffer_alloc_free+0xb6>
        hdr->next_free = heap.first_free;
 c0248ae:	68e3      	ldr	r3, [r4, #12]
 c0248b0:	618b      	str	r3, [r1, #24]
        if( heap.first_free != NULL )
 c0248b2:	b103      	cbz	r3, c0248b6 <buffer_alloc_free+0xea>
            heap.first_free->prev_free = hdr;
 c0248b4:	6159      	str	r1, [r3, #20]
        heap.first_free = hdr;
 c0248b6:	60e1      	str	r1, [r4, #12]
 c0248b8:	e7e3      	b.n	c024882 <buffer_alloc_free+0xb6>
 c0248ba:	bf00      	nop
 c0248bc:	30038038 	.word	0x30038038

0c0248c0 <mbedtls_memory_buffer_alloc_init>:
    (void) mbedtls_mutex_unlock( &heap.mutex );
}
#endif /* MBEDTLS_THREADING_C */

void mbedtls_memory_buffer_alloc_init( unsigned char *buf, size_t len )
{
 c0248c0:	b538      	push	{r3, r4, r5, lr}
 c0248c2:	460d      	mov	r5, r1
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
 c0248c4:	2214      	movs	r2, #20
 c0248c6:	2100      	movs	r1, #0
{
 c0248c8:	4604      	mov	r4, r0
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
 c0248ca:	4812      	ldr	r0, [pc, #72]	; (c024914 <mbedtls_memory_buffer_alloc_init+0x54>)
 c0248cc:	f7f0 f87b 	bl	c0149c6 <memset>
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &heap.mutex );
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc_mutexed,
                              buffer_alloc_free_mutexed );
#else
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc, buffer_alloc_free );
 c0248d0:	4911      	ldr	r1, [pc, #68]	; (c024918 <mbedtls_memory_buffer_alloc_init+0x58>)
 c0248d2:	4812      	ldr	r0, [pc, #72]	; (c02491c <mbedtls_memory_buffer_alloc_init+0x5c>)
 c0248d4:	f001 ff1e 	bl	c026714 <mbedtls_platform_set_calloc_free>
#endif

    if( len < sizeof( memory_header ) + MBEDTLS_MEMORY_ALIGN_MULTIPLE )
 c0248d8:	2d23      	cmp	r5, #35	; 0x23
 c0248da:	d91a      	bls.n	c024912 <mbedtls_memory_buffer_alloc_init+0x52>
        return;
    else if( (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
 c0248dc:	f014 0303 	ands.w	r3, r4, #3
 c0248e0:	bf1f      	itttt	ne
 c0248e2:	3d04      	subne	r5, #4
    {
        /* Adjust len first since buf is used in the computation */
        len -= MBEDTLS_MEMORY_ALIGN_MULTIPLE
 c0248e4:	18ed      	addne	r5, r5, r3
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
 c0248e6:	f1c3 0304 	rsbne	r3, r3, #4
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
 c0248ea:	18e4      	addne	r4, r4, r3
    }

    memset( buf, 0, len );
 c0248ec:	462a      	mov	r2, r5
 c0248ee:	2100      	movs	r1, #0
 c0248f0:	4620      	mov	r0, r4
 c0248f2:	f7f0 f868 	bl	c0149c6 <memset>

    heap.buf = buf;
 c0248f6:	4b07      	ldr	r3, [pc, #28]	; (c024914 <mbedtls_memory_buffer_alloc_init+0x54>)
    heap.len = len;

    heap.first = (memory_header *)buf;
    heap.first->size = len - sizeof( memory_header );
    heap.first->magic1 = MAGIC1;
 c0248f8:	4a09      	ldr	r2, [pc, #36]	; (c024920 <mbedtls_memory_buffer_alloc_init+0x60>)
    heap.len = len;
 c0248fa:	e9c3 4500 	strd	r4, r5, [r3]
    heap.first = (memory_header *)buf;
 c0248fe:	609c      	str	r4, [r3, #8]
    heap.first->magic1 = MAGIC1;
 c024900:	6022      	str	r2, [r4, #0]
    heap.first->magic2 = MAGIC2;
 c024902:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
    heap.first->size = len - sizeof( memory_header );
 c024906:	3d20      	subs	r5, #32
    heap.first->magic2 = MAGIC2;
 c024908:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
    heap.first->size = len - sizeof( memory_header );
 c02490c:	6065      	str	r5, [r4, #4]
    heap.first->magic2 = MAGIC2;
 c02490e:	61e2      	str	r2, [r4, #28]
    heap.first_free = heap.first;
 c024910:	60dc      	str	r4, [r3, #12]
}
 c024912:	bd38      	pop	{r3, r4, r5, pc}
 c024914:	30038038 	.word	0x30038038
 c024918:	0c0247cd 	.word	0x0c0247cd
 c02491c:	0c0246dd 	.word	0x0c0246dd
 c024920:	ff00aa55 	.word	0xff00aa55

0c024924 <mbedtls_oid_get_pk_alg>:
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 c024924:	b570      	push	{r4, r5, r6, lr}
 c024926:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 c024928:	4605      	mov	r5, r0
 c02492a:	b110      	cbz	r0, c024932 <mbedtls_oid_get_pk_alg+0xe>
 c02492c:	4c09      	ldr	r4, [pc, #36]	; (c024954 <mbedtls_oid_get_pk_alg+0x30>)
 c02492e:	6820      	ldr	r0, [r4, #0]
 c024930:	b910      	cbnz	r0, c024938 <mbedtls_oid_get_pk_alg+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 c024932:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 c024936:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 c024938:	6862      	ldr	r2, [r4, #4]
 c02493a:	686b      	ldr	r3, [r5, #4]
 c02493c:	429a      	cmp	r2, r3
 c02493e:	d103      	bne.n	c024948 <mbedtls_oid_get_pk_alg+0x24>
 c024940:	68a9      	ldr	r1, [r5, #8]
 c024942:	f7f0 f80d 	bl	c014960 <memcmp>
 c024946:	b108      	cbz	r0, c02494c <mbedtls_oid_get_pk_alg+0x28>
 c024948:	3414      	adds	r4, #20
 c02494a:	e7f0      	b.n	c02492e <mbedtls_oid_get_pk_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 c02494c:	7c23      	ldrb	r3, [r4, #16]
 c02494e:	7033      	strb	r3, [r6, #0]
 c024950:	e7f1      	b.n	c024936 <mbedtls_oid_get_pk_alg+0x12>
 c024952:	bf00      	nop
 c024954:	0c0342d0 	.word	0x0c0342d0

0c024958 <mbedtls_oid_get_ec_grp>:
        MBEDTLS_ECP_DP_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
 c024958:	b570      	push	{r4, r5, r6, lr}
 c02495a:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
 c02495c:	4605      	mov	r5, r0
 c02495e:	b110      	cbz	r0, c024966 <mbedtls_oid_get_ec_grp+0xe>
 c024960:	4c09      	ldr	r4, [pc, #36]	; (c024988 <mbedtls_oid_get_ec_grp+0x30>)
 c024962:	6820      	ldr	r0, [r4, #0]
 c024964:	b910      	cbnz	r0, c02496c <mbedtls_oid_get_ec_grp+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
 c024966:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 c02496a:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
 c02496c:	6862      	ldr	r2, [r4, #4]
 c02496e:	686b      	ldr	r3, [r5, #4]
 c024970:	429a      	cmp	r2, r3
 c024972:	d103      	bne.n	c02497c <mbedtls_oid_get_ec_grp+0x24>
 c024974:	68a9      	ldr	r1, [r5, #8]
 c024976:	f7ef fff3 	bl	c014960 <memcmp>
 c02497a:	b108      	cbz	r0, c024980 <mbedtls_oid_get_ec_grp+0x28>
 c02497c:	3414      	adds	r4, #20
 c02497e:	e7f0      	b.n	c024962 <mbedtls_oid_get_ec_grp+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
 c024980:	7c23      	ldrb	r3, [r4, #16]
 c024982:	7033      	strb	r3, [r6, #0]
 c024984:	e7f1      	b.n	c02496a <mbedtls_oid_get_ec_grp+0x12>
 c024986:	bf00      	nop
 c024988:	0c034118 	.word	0x0c034118

0c02498c <mbedtls_oid_get_oid_by_ec_grp>:
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_ec_grp, oid_ecp_grp_t, oid_ecp_grp, mbedtls_ecp_group_id, grp_id)
 c02498c:	b530      	push	{r4, r5, lr}
 c02498e:	4b08      	ldr	r3, [pc, #32]	; (c0249b0 <mbedtls_oid_get_oid_by_ec_grp+0x24>)
 c024990:	681c      	ldr	r4, [r3, #0]
 c024992:	b914      	cbnz	r4, c02499a <mbedtls_oid_get_oid_by_ec_grp+0xe>
 c024994:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 c024998:	e006      	b.n	c0249a8 <mbedtls_oid_get_oid_by_ec_grp+0x1c>
 c02499a:	7c1d      	ldrb	r5, [r3, #16]
 c02499c:	4285      	cmp	r5, r0
 c02499e:	d104      	bne.n	c0249aa <mbedtls_oid_get_oid_by_ec_grp+0x1e>
 c0249a0:	2000      	movs	r0, #0
 c0249a2:	685b      	ldr	r3, [r3, #4]
 c0249a4:	600c      	str	r4, [r1, #0]
 c0249a6:	6013      	str	r3, [r2, #0]
 c0249a8:	bd30      	pop	{r4, r5, pc}
 c0249aa:	3314      	adds	r3, #20
 c0249ac:	e7f0      	b.n	c024990 <mbedtls_oid_get_oid_by_ec_grp+0x4>
 c0249ae:	bf00      	nop
 c0249b0:	0c034118 	.word	0x0c034118

0c0249b4 <mbedtls_oid_get_cipher_alg>:
        MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
 c0249b4:	b570      	push	{r4, r5, r6, lr}
 c0249b6:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
 c0249b8:	4605      	mov	r5, r0
 c0249ba:	b110      	cbz	r0, c0249c2 <mbedtls_oid_get_cipher_alg+0xe>
 c0249bc:	4c09      	ldr	r4, [pc, #36]	; (c0249e4 <mbedtls_oid_get_cipher_alg+0x30>)
 c0249be:	6820      	ldr	r0, [r4, #0]
 c0249c0:	b910      	cbnz	r0, c0249c8 <mbedtls_oid_get_cipher_alg+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
 c0249c2:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 c0249c6:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
 c0249c8:	6862      	ldr	r2, [r4, #4]
 c0249ca:	686b      	ldr	r3, [r5, #4]
 c0249cc:	429a      	cmp	r2, r3
 c0249ce:	d103      	bne.n	c0249d8 <mbedtls_oid_get_cipher_alg+0x24>
 c0249d0:	68a9      	ldr	r1, [r5, #8]
 c0249d2:	f7ef ffc5 	bl	c014960 <memcmp>
 c0249d6:	b108      	cbz	r0, c0249dc <mbedtls_oid_get_cipher_alg+0x28>
 c0249d8:	3414      	adds	r4, #20
 c0249da:	e7f0      	b.n	c0249be <mbedtls_oid_get_cipher_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
 c0249dc:	7c23      	ldrb	r3, [r4, #16]
 c0249de:	7033      	strb	r3, [r6, #0]
 c0249e0:	e7f1      	b.n	c0249c6 <mbedtls_oid_get_cipher_alg+0x12>
 c0249e2:	bf00      	nop
 c0249e4:	0c0340dc 	.word	0x0c0340dc

0c0249e8 <mbedtls_oid_get_oid_by_md>:
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
 c0249e8:	b530      	push	{r4, r5, lr}
 c0249ea:	4b08      	ldr	r3, [pc, #32]	; (c024a0c <mbedtls_oid_get_oid_by_md+0x24>)
 c0249ec:	681c      	ldr	r4, [r3, #0]
 c0249ee:	b914      	cbnz	r4, c0249f6 <mbedtls_oid_get_oid_by_md+0xe>
 c0249f0:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 c0249f4:	e006      	b.n	c024a04 <mbedtls_oid_get_oid_by_md+0x1c>
 c0249f6:	7c1d      	ldrb	r5, [r3, #16]
 c0249f8:	4285      	cmp	r5, r0
 c0249fa:	d104      	bne.n	c024a06 <mbedtls_oid_get_oid_by_md+0x1e>
 c0249fc:	2000      	movs	r0, #0
 c0249fe:	685b      	ldr	r3, [r3, #4]
 c024a00:	600c      	str	r4, [r1, #0]
 c024a02:	6013      	str	r3, [r2, #0]
 c024a04:	bd30      	pop	{r4, r5, pc}
 c024a06:	3314      	adds	r3, #20
 c024a08:	e7f0      	b.n	c0249ec <mbedtls_oid_get_oid_by_md+0x4>
 c024a0a:	bf00      	nop
 c024a0c:	0c034208 	.word	0x0c034208

0c024a10 <mbedtls_oid_get_md_hmac>:
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
 c024a10:	b570      	push	{r4, r5, r6, lr}
 c024a12:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
 c024a14:	4605      	mov	r5, r0
 c024a16:	b110      	cbz	r0, c024a1e <mbedtls_oid_get_md_hmac+0xe>
 c024a18:	4c09      	ldr	r4, [pc, #36]	; (c024a40 <mbedtls_oid_get_md_hmac+0x30>)
 c024a1a:	6820      	ldr	r0, [r4, #0]
 c024a1c:	b910      	cbnz	r0, c024a24 <mbedtls_oid_get_md_hmac+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
 c024a1e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 c024a22:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
 c024a24:	6862      	ldr	r2, [r4, #4]
 c024a26:	686b      	ldr	r3, [r5, #4]
 c024a28:	429a      	cmp	r2, r3
 c024a2a:	d103      	bne.n	c024a34 <mbedtls_oid_get_md_hmac+0x24>
 c024a2c:	68a9      	ldr	r1, [r5, #8]
 c024a2e:	f7ef ff97 	bl	c014960 <memcmp>
 c024a32:	b108      	cbz	r0, c024a38 <mbedtls_oid_get_md_hmac+0x28>
 c024a34:	3414      	adds	r4, #20
 c024a36:	e7f0      	b.n	c024a1a <mbedtls_oid_get_md_hmac+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
 c024a38:	7c23      	ldrb	r3, [r4, #16]
 c024a3a:	7033      	strb	r3, [r6, #0]
 c024a3c:	e7f1      	b.n	c024a22 <mbedtls_oid_get_md_hmac+0x12>
 c024a3e:	bf00      	nop
 c024a40:	0c03426c 	.word	0x0c03426c

0c024a44 <mbedtls_oid_get_pkcs12_pbe_alg>:
        MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
 c024a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c024a46:	460f      	mov	r7, r1
 c024a48:	4616      	mov	r6, r2
FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
 c024a4a:	4605      	mov	r5, r0
 c024a4c:	b110      	cbz	r0, c024a54 <mbedtls_oid_get_pkcs12_pbe_alg+0x10>
 c024a4e:	4c0a      	ldr	r4, [pc, #40]	; (c024a78 <mbedtls_oid_get_pkcs12_pbe_alg+0x34>)
 c024a50:	6820      	ldr	r0, [r4, #0]
 c024a52:	b910      	cbnz	r0, c024a5a <mbedtls_oid_get_pkcs12_pbe_alg+0x16>
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
 c024a54:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 c024a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
 c024a5a:	6862      	ldr	r2, [r4, #4]
 c024a5c:	686b      	ldr	r3, [r5, #4]
 c024a5e:	429a      	cmp	r2, r3
 c024a60:	d103      	bne.n	c024a6a <mbedtls_oid_get_pkcs12_pbe_alg+0x26>
 c024a62:	68a9      	ldr	r1, [r5, #8]
 c024a64:	f7ef ff7c 	bl	c014960 <memcmp>
 c024a68:	b108      	cbz	r0, c024a6e <mbedtls_oid_get_pkcs12_pbe_alg+0x2a>
 c024a6a:	3414      	adds	r4, #20
 c024a6c:	e7f0      	b.n	c024a50 <mbedtls_oid_get_pkcs12_pbe_alg+0xc>
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
 c024a6e:	7c23      	ldrb	r3, [r4, #16]
 c024a70:	703b      	strb	r3, [r7, #0]
 c024a72:	7c63      	ldrb	r3, [r4, #17]
 c024a74:	7033      	strb	r3, [r6, #0]
 c024a76:	e7ef      	b.n	c024a58 <mbedtls_oid_get_pkcs12_pbe_alg+0x14>
 c024a78:	0c034320 	.word	0x0c034320

0c024a7c <mbedtls_pem_init>:
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
void mbedtls_pem_init( mbedtls_pem_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_pem_context ) );
 c024a7c:	2300      	movs	r3, #0
 c024a7e:	6003      	str	r3, [r0, #0]
 c024a80:	6043      	str	r3, [r0, #4]
 c024a82:	6083      	str	r3, [r0, #8]
}
 c024a84:	4770      	bx	lr
	...

0c024a88 <mbedtls_pem_read_buffer>:
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
                     const unsigned char *data, const unsigned char *pwd,
                     size_t pwdlen, size_t *use_len )
{
 c024a88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c024a8c:	4689      	mov	r9, r1
 c024a8e:	b085      	sub	sp, #20
 c024a90:	4690      	mov	r8, r2
 c024a92:	461f      	mov	r7, r3
    ((void) pwd);
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
 c024a94:	4606      	mov	r6, r0
 c024a96:	2800      	cmp	r0, #0
 c024a98:	d064      	beq.n	c024b64 <mbedtls_pem_read_buffer+0xdc>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );

    s1 = (unsigned char *) strstr( (const char *) data, header );
 c024a9a:	4618      	mov	r0, r3
 c024a9c:	f7f0 fce4 	bl	c015468 <strstr>

    if( s1 == NULL )
 c024aa0:	4604      	mov	r4, r0
 c024aa2:	2800      	cmp	r0, #0
 c024aa4:	d060      	beq.n	c024b68 <mbedtls_pem_read_buffer+0xe0>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s2 = (unsigned char *) strstr( (const char *) data, footer );
 c024aa6:	4641      	mov	r1, r8
 c024aa8:	4638      	mov	r0, r7
 c024aaa:	f7f0 fcdd 	bl	c015468 <strstr>

    if( s2 == NULL || s2 <= s1 )
 c024aae:	4605      	mov	r5, r0
 c024ab0:	2800      	cmp	r0, #0
 c024ab2:	d059      	beq.n	c024b68 <mbedtls_pem_read_buffer+0xe0>
 c024ab4:	4284      	cmp	r4, r0
 c024ab6:	d257      	bcs.n	c024b68 <mbedtls_pem_read_buffer+0xe0>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
 c024ab8:	4648      	mov	r0, r9
 c024aba:	f7f0 fccd 	bl	c015458 <strlen>
    if( *s1 == ' '  ) s1++;
 c024abe:	5c22      	ldrb	r2, [r4, r0]
    s1 += strlen( header );
 c024ac0:	1823      	adds	r3, r4, r0
    if( *s1 == ' '  ) s1++;
 c024ac2:	2a20      	cmp	r2, #32
 c024ac4:	bf08      	it	eq
 c024ac6:	3301      	addeq	r3, #1
    if( *s1 == '\r' ) s1++;
 c024ac8:	781a      	ldrb	r2, [r3, #0]
 c024aca:	2a0d      	cmp	r2, #13
 c024acc:	bf08      	it	eq
 c024ace:	3301      	addeq	r3, #1
    if( *s1 == '\n' ) s1++;
 c024ad0:	781a      	ldrb	r2, [r3, #0]
 c024ad2:	2a0a      	cmp	r2, #10
 c024ad4:	d148      	bne.n	c024b68 <mbedtls_pem_read_buffer+0xe0>
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 c024ad6:	4640      	mov	r0, r8
    if( *s1 == '\n' ) s1++;
 c024ad8:	1c5c      	adds	r4, r3, #1
    end += strlen( footer );
 c024ada:	f7f0 fcbd 	bl	c015458 <strlen>
    if( *end == ' '  ) end++;
 c024ade:	5c2a      	ldrb	r2, [r5, r0]
    end += strlen( footer );
 c024ae0:	182b      	adds	r3, r5, r0
    if( *end == ' '  ) end++;
 c024ae2:	2a20      	cmp	r2, #32
 c024ae4:	bf08      	it	eq
 c024ae6:	3301      	addeq	r3, #1
    if( *end == '\r' ) end++;
 c024ae8:	781a      	ldrb	r2, [r3, #0]
 c024aea:	2a0d      	cmp	r2, #13
 c024aec:	bf08      	it	eq
 c024aee:	3301      	addeq	r3, #1
    if( *end == '\n' ) end++;
 c024af0:	781a      	ldrb	r2, [r3, #0]
 c024af2:	2a0a      	cmp	r2, #10
 c024af4:	bf08      	it	eq
 c024af6:	3301      	addeq	r3, #1
    *use_len = end - data;
 c024af8:	1bdb      	subs	r3, r3, r7
 c024afa:	9a0e      	ldr	r2, [sp, #56]	; 0x38

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 c024afc:	1b2f      	subs	r7, r5, r4
 c024afe:	2f15      	cmp	r7, #21
    *use_len = end - data;
 c024b00:	6013      	str	r3, [r2, #0]
    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 c024b02:	dd05      	ble.n	c024b10 <mbedtls_pem_read_buffer+0x88>
 c024b04:	2216      	movs	r2, #22
 c024b06:	491d      	ldr	r1, [pc, #116]	; (c024b7c <mbedtls_pem_read_buffer+0xf4>)
 c024b08:	4620      	mov	r0, r4
 c024b0a:	f7ef ff29 	bl	c014960 <memcmp>
 c024b0e:	b368      	cbz	r0, c024b6c <mbedtls_pem_read_buffer+0xe4>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
 c024b10:	42a5      	cmp	r5, r4
 c024b12:	d92d      	bls.n	c024b70 <mbedtls_pem_read_buffer+0xe8>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
 c024b14:	2100      	movs	r1, #0
 c024b16:	9700      	str	r7, [sp, #0]
 c024b18:	4623      	mov	r3, r4
 c024b1a:	aa03      	add	r2, sp, #12
 c024b1c:	4608      	mov	r0, r1
 c024b1e:	f7f8 fc1b 	bl	c01d358 <mbedtls_base64_decode>

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
 c024b22:	302c      	adds	r0, #44	; 0x2c
 c024b24:	d026      	beq.n	c024b74 <mbedtls_pem_read_buffer+0xec>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );

    if( ( buf = mbedtls_calloc( 1, len ) ) == NULL )
 c024b26:	9903      	ldr	r1, [sp, #12]
 c024b28:	2001      	movs	r0, #1
 c024b2a:	f001 fde7 	bl	c0266fc <mbedtls_calloc>
 c024b2e:	4605      	mov	r5, r0
 c024b30:	b310      	cbz	r0, c024b78 <mbedtls_pem_read_buffer+0xf0>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
 c024b32:	4623      	mov	r3, r4
 c024b34:	9700      	str	r7, [sp, #0]
 c024b36:	aa03      	add	r2, sp, #12
 c024b38:	9903      	ldr	r1, [sp, #12]
 c024b3a:	f7f8 fc0d 	bl	c01d358 <mbedtls_base64_decode>
 c024b3e:	4604      	mov	r4, r0
 c024b40:	b160      	cbz	r0, c024b5c <mbedtls_pem_read_buffer+0xd4>
    {
        mbedtls_platform_zeroize( buf, len );
 c024b42:	9903      	ldr	r1, [sp, #12]
 c024b44:	4628      	mov	r0, r5
 c024b46:	f001 fdef 	bl	c026728 <mbedtls_platform_zeroize>
        mbedtls_free( buf );
 c024b4a:	4628      	mov	r0, r5
 c024b4c:	f001 fddc 	bl	c026708 <mbedtls_free>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 c024b50:	f5a4 5488 	sub.w	r4, r4, #4352	; 0x1100

    ctx->buf = buf;
    ctx->buflen = len;

    return( 0 );
}
 c024b54:	4620      	mov	r0, r4
 c024b56:	b005      	add	sp, #20
 c024b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ctx->buflen = len;
 c024b5c:	9b03      	ldr	r3, [sp, #12]
    ctx->buf = buf;
 c024b5e:	6035      	str	r5, [r6, #0]
    ctx->buflen = len;
 c024b60:	6073      	str	r3, [r6, #4]
    return( 0 );
 c024b62:	e7f7      	b.n	c024b54 <mbedtls_pem_read_buffer+0xcc>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
 c024b64:	4c06      	ldr	r4, [pc, #24]	; (c024b80 <mbedtls_pem_read_buffer+0xf8>)
 c024b66:	e7f5      	b.n	c024b54 <mbedtls_pem_read_buffer+0xcc>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 c024b68:	4c06      	ldr	r4, [pc, #24]	; (c024b84 <mbedtls_pem_read_buffer+0xfc>)
 c024b6a:	e7f3      	b.n	c024b54 <mbedtls_pem_read_buffer+0xcc>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
 c024b6c:	4c06      	ldr	r4, [pc, #24]	; (c024b88 <mbedtls_pem_read_buffer+0x100>)
 c024b6e:	e7f1      	b.n	c024b54 <mbedtls_pem_read_buffer+0xcc>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );
 c024b70:	4c06      	ldr	r4, [pc, #24]	; (c024b8c <mbedtls_pem_read_buffer+0x104>)
 c024b72:	e7ef      	b.n	c024b54 <mbedtls_pem_read_buffer+0xcc>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 c024b74:	4c06      	ldr	r4, [pc, #24]	; (c024b90 <mbedtls_pem_read_buffer+0x108>)
 c024b76:	e7ed      	b.n	c024b54 <mbedtls_pem_read_buffer+0xcc>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
 c024b78:	4c06      	ldr	r4, [pc, #24]	; (c024b94 <mbedtls_pem_read_buffer+0x10c>)
 c024b7a:	e7eb      	b.n	c024b54 <mbedtls_pem_read_buffer+0xcc>
 c024b7c:	0c034c70 	.word	0x0c034c70
 c024b80:	ffffeb80 	.word	0xffffeb80
 c024b84:	ffffef80 	.word	0xffffef80
 c024b88:	ffffec00 	.word	0xffffec00
 c024b8c:	ffffef00 	.word	0xffffef00
 c024b90:	ffffeed4 	.word	0xffffeed4
 c024b94:	ffffee80 	.word	0xffffee80

0c024b98 <mbedtls_pem_free>:

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
 c024b98:	b510      	push	{r4, lr}
 c024b9a:	4604      	mov	r4, r0
    if ( ctx->buf != NULL )
 c024b9c:	6800      	ldr	r0, [r0, #0]
 c024b9e:	b128      	cbz	r0, c024bac <mbedtls_pem_free+0x14>
    {
        mbedtls_platform_zeroize( ctx->buf, ctx->buflen );
 c024ba0:	6861      	ldr	r1, [r4, #4]
 c024ba2:	f001 fdc1 	bl	c026728 <mbedtls_platform_zeroize>
        mbedtls_free( ctx->buf );
 c024ba6:	6820      	ldr	r0, [r4, #0]
 c024ba8:	f001 fdae 	bl	c026708 <mbedtls_free>
    }
    mbedtls_free( ctx->info );
 c024bac:	68a0      	ldr	r0, [r4, #8]
 c024bae:	f001 fdab 	bl	c026708 <mbedtls_free>

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pem_context ) );
 c024bb2:	4620      	mov	r0, r4
}
 c024bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pem_context ) );
 c024bb8:	210c      	movs	r1, #12
 c024bba:	f001 bdb5 	b.w	c026728 <mbedtls_platform_zeroize>

0c024bbe <mbedtls_pk_init>:
 */
void mbedtls_pk_init( mbedtls_pk_context *ctx )
{
    PK_VALIDATE( ctx != NULL );

    ctx->pk_info = NULL;
 c024bbe:	2300      	movs	r3, #0
    ctx->pk_ctx = NULL;
 c024bc0:	e9c0 3300 	strd	r3, r3, [r0]
}
 c024bc4:	4770      	bx	lr

0c024bc6 <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
 c024bc6:	b510      	push	{r4, lr}
    if( ctx == NULL )
 c024bc8:	4604      	mov	r4, r0
 c024bca:	b150      	cbz	r0, c024be2 <mbedtls_pk_free+0x1c>
        return;

    if ( ctx->pk_info != NULL )
 c024bcc:	6803      	ldr	r3, [r0, #0]
 c024bce:	b113      	cbz	r3, c024bd6 <mbedtls_pk_free+0x10>
        ctx->pk_info->ctx_free_func( ctx->pk_ctx );
 c024bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c024bd2:	6840      	ldr	r0, [r0, #4]
 c024bd4:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pk_context ) );
 c024bd6:	4620      	mov	r0, r4
}
 c024bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pk_context ) );
 c024bdc:	2108      	movs	r1, #8
 c024bde:	f001 bda3 	b.w	c026728 <mbedtls_platform_zeroize>
}
 c024be2:	bd10      	pop	{r4, pc}

0c024be4 <mbedtls_pk_info_from_type>:

/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
 c024be4:	3801      	subs	r0, #1
 c024be6:	b2c0      	uxtb	r0, r0
 c024be8:	2803      	cmp	r0, #3
 c024bea:	bf9a      	itte	ls
 c024bec:	4b02      	ldrls	r3, [pc, #8]	; (c024bf8 <mbedtls_pk_info_from_type+0x14>)
 c024bee:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 c024bf2:	2000      	movhi	r0, #0
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
    }
}
 c024bf4:	4770      	bx	lr
 c024bf6:	bf00      	nop
 c024bf8:	0c034c88 	.word	0x0c034c88

0c024bfc <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
 c024bfc:	b570      	push	{r4, r5, r6, lr}
 c024bfe:	4605      	mov	r5, r0
    PK_VALIDATE_RET( ctx != NULL );
    if( info == NULL || ctx->pk_info != NULL )
 c024c00:	460e      	mov	r6, r1
 c024c02:	b141      	cbz	r1, c024c16 <mbedtls_pk_setup+0x1a>
 c024c04:	6804      	ldr	r4, [r0, #0]
 c024c06:	b934      	cbnz	r4, c024c16 <mbedtls_pk_setup+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
 c024c08:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 c024c0a:	4798      	blx	r3
 c024c0c:	6068      	str	r0, [r5, #4]
 c024c0e:	b120      	cbz	r0, c024c1a <mbedtls_pk_setup+0x1e>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );

    ctx->pk_info = info;

    return( 0 );
 c024c10:	4620      	mov	r0, r4
    ctx->pk_info = info;
 c024c12:	602e      	str	r6, [r5, #0]
}
 c024c14:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 c024c16:	4802      	ldr	r0, [pc, #8]	; (c024c20 <mbedtls_pk_setup+0x24>)
 c024c18:	e7fc      	b.n	c024c14 <mbedtls_pk_setup+0x18>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 c024c1a:	4802      	ldr	r0, [pc, #8]	; (c024c24 <mbedtls_pk_setup+0x28>)
 c024c1c:	e7fa      	b.n	c024c14 <mbedtls_pk_setup+0x18>
 c024c1e:	bf00      	nop
 c024c20:	ffffc180 	.word	0xffffc180
 c024c24:	ffffc080 	.word	0xffffc080

0c024c28 <mbedtls_pk_get_type>:
/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 c024c28:	b110      	cbz	r0, c024c30 <mbedtls_pk_get_type+0x8>
 c024c2a:	6800      	ldr	r0, [r0, #0]
 c024c2c:	b100      	cbz	r0, c024c30 <mbedtls_pk_get_type+0x8>
        return( MBEDTLS_PK_NONE );

    return( ctx->pk_info->type );
 c024c2e:	7800      	ldrb	r0, [r0, #0]
}
 c024c30:	4770      	bx	lr

0c024c32 <rsa_can_do>:
#include <stdint.h>

#if defined(MBEDTLS_RSA_C)
static int rsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_RSA ||
 c024c32:	2801      	cmp	r0, #1
 c024c34:	d002      	beq.n	c024c3c <rsa_can_do+0xa>
 c024c36:	1f83      	subs	r3, r0, #6
 c024c38:	4258      	negs	r0, r3
 c024c3a:	4158      	adcs	r0, r3
            type == MBEDTLS_PK_RSASSA_PSS );
}
 c024c3c:	4770      	bx	lr
	...

0c024c40 <rsa_debug>:
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
 c024c40:	2301      	movs	r3, #1
    items->name = "rsa.N";
 c024c42:	4a06      	ldr	r2, [pc, #24]	; (c024c5c <rsa_debug+0x1c>)
    items->type = MBEDTLS_PK_DEBUG_MPI;
 c024c44:	700b      	strb	r3, [r1, #0]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
 c024c46:	730b      	strb	r3, [r1, #12]
    items->name = "rsa.E";
 c024c48:	4b05      	ldr	r3, [pc, #20]	; (c024c60 <rsa_debug+0x20>)
    items->name = "rsa.N";
 c024c4a:	604a      	str	r2, [r1, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 c024c4c:	f100 0208 	add.w	r2, r0, #8
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 c024c50:	3014      	adds	r0, #20
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 c024c52:	608a      	str	r2, [r1, #8]
    items->name = "rsa.E";
 c024c54:	610b      	str	r3, [r1, #16]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 c024c56:	6148      	str	r0, [r1, #20]
}
 c024c58:	4770      	bx	lr
 c024c5a:	bf00      	nop
 c024c5c:	0c034d60 	.word	0x0c034d60
 c024c60:	0c034d66 	.word	0x0c034d66

0c024c64 <eckey_can_do>:
 * Generic EC key
 */
static int eckey_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECKEY ||
            type == MBEDTLS_PK_ECKEY_DH ||
 c024c64:	3802      	subs	r0, #2
            type == MBEDTLS_PK_ECDSA );
}
 c024c66:	2802      	cmp	r0, #2
 c024c68:	bf8c      	ite	hi
 c024c6a:	2000      	movhi	r0, #0
 c024c6c:	2001      	movls	r0, #1
 c024c6e:	4770      	bx	lr

0c024c70 <eckey_get_bitlen>:

static size_t eckey_get_bitlen( const void *ctx )
{
    return( ((mbedtls_ecp_keypair *) ctx)->grp.pbits );
}
 c024c70:	6d80      	ldr	r0, [r0, #88]	; 0x58
 c024c72:	4770      	bx	lr

0c024c74 <eckey_debug>:
    mbedtls_free( ctx );
}

static void eckey_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_ECP;
 c024c74:	2302      	movs	r3, #2
 c024c76:	700b      	strb	r3, [r1, #0]
    items->name = "eckey.Q";
 c024c78:	4b02      	ldr	r3, [pc, #8]	; (c024c84 <eckey_debug+0x10>)
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
 c024c7a:	3088      	adds	r0, #136	; 0x88
    items->name = "eckey.Q";
 c024c7c:	604b      	str	r3, [r1, #4]
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
 c024c7e:	6088      	str	r0, [r1, #8]
}
 c024c80:	4770      	bx	lr
 c024c82:	bf00      	nop
 c024c84:	0c034c98 	.word	0x0c034c98

0c024c88 <eckeydh_can_do>:
/*
 * EC key restricted to ECDH
 */
static int eckeydh_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECKEY ||
 c024c88:	3802      	subs	r0, #2
            type == MBEDTLS_PK_ECKEY_DH );
}
 c024c8a:	2801      	cmp	r0, #1
 c024c8c:	bf8c      	ite	hi
 c024c8e:	2000      	movhi	r0, #0
 c024c90:	2001      	movls	r0, #1
 c024c92:	4770      	bx	lr

0c024c94 <ecdsa_can_do>:

#if defined(MBEDTLS_ECDSA_C)
static int ecdsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECDSA );
}
 c024c94:	1f03      	subs	r3, r0, #4
 c024c96:	4258      	negs	r0, r3
 c024c98:	4158      	adcs	r0, r3
 c024c9a:	4770      	bx	lr

0c024c9c <rsa_free_wrap>:
{
 c024c9c:	b510      	push	{r4, lr}
 c024c9e:	4604      	mov	r4, r0
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
 c024ca0:	f006 f858 	bl	c02ad54 <mbedtls_rsa_free>
    mbedtls_free( ctx );
 c024ca4:	4620      	mov	r0, r4
}
 c024ca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 c024caa:	f001 bd2d 	b.w	c026708 <mbedtls_free>

0c024cae <rsa_alloc_wrap>:
{
 c024cae:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
 c024cb0:	21ac      	movs	r1, #172	; 0xac
 c024cb2:	2001      	movs	r0, #1
 c024cb4:	f001 fd22 	bl	c0266fc <mbedtls_calloc>
    if( ctx != NULL )
 c024cb8:	4604      	mov	r4, r0
 c024cba:	b118      	cbz	r0, c024cc4 <rsa_alloc_wrap+0x16>
        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );
 c024cbc:	2200      	movs	r2, #0
 c024cbe:	4611      	mov	r1, r2
 c024cc0:	f005 f828 	bl	c029d14 <mbedtls_rsa_init>
}
 c024cc4:	4620      	mov	r0, r4
 c024cc6:	bd10      	pop	{r4, pc}

0c024cc8 <rsa_check_pair_wrap>:
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
 c024cc8:	f005 b88e 	b.w	c029de8 <mbedtls_rsa_check_pub_priv>

0c024ccc <rsa_get_bitlen>:
{
 c024ccc:	b508      	push	{r3, lr}
    return( 8 * mbedtls_rsa_get_len( rsa ) );
 c024cce:	f005 f82e 	bl	c029d2e <mbedtls_rsa_get_len>
}
 c024cd2:	00c0      	lsls	r0, r0, #3
 c024cd4:	bd08      	pop	{r3, pc}
	...

0c024cd8 <rsa_encrypt_wrap>:
{
 c024cd8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c024cdc:	4604      	mov	r4, r0
 c024cde:	e9dd ba0a 	ldrd	fp, sl, [sp, #40]	; 0x28
 c024ce2:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 c024ce6:	4688      	mov	r8, r1
 c024ce8:	4617      	mov	r7, r2
 c024cea:	4699      	mov	r9, r3
    *olen = mbedtls_rsa_get_len( rsa );
 c024cec:	f005 f81f 	bl	c029d2e <mbedtls_rsa_get_len>
    if( *olen > osize )
 c024cf0:	4550      	cmp	r0, sl
    *olen = mbedtls_rsa_get_len( rsa );
 c024cf2:	f8cb 0000 	str.w	r0, [fp]
    if( *olen > osize )
 c024cf6:	d80b      	bhi.n	c024d10 <rsa_encrypt_wrap+0x38>
    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
 c024cf8:	2300      	movs	r3, #0
 c024cfa:	4632      	mov	r2, r6
 c024cfc:	4629      	mov	r1, r5
 c024cfe:	4620      	mov	r0, r4
 c024d00:	e9cd 890b 	strd	r8, r9, [sp, #44]	; 0x2c
 c024d04:	970a      	str	r7, [sp, #40]	; 0x28
}
 c024d06:	b001      	add	sp, #4
 c024d08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
 c024d0c:	f005 bb82 	b.w	c02a414 <mbedtls_rsa_pkcs1_encrypt>
}
 c024d10:	4801      	ldr	r0, [pc, #4]	; (c024d18 <rsa_encrypt_wrap+0x40>)
 c024d12:	b001      	add	sp, #4
 c024d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c024d18:	ffffbc00 	.word	0xffffbc00

0c024d1c <rsa_decrypt_wrap>:
{
 c024d1c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c024d20:	4693      	mov	fp, r2
 c024d22:	e9dd 7a0a 	ldrd	r7, sl, [sp, #40]	; 0x28
 c024d26:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 c024d2a:	4604      	mov	r4, r0
 c024d2c:	4688      	mov	r8, r1
 c024d2e:	4699      	mov	r9, r3
    if( ilen != mbedtls_rsa_get_len( rsa ) )
 c024d30:	f004 fffd 	bl	c029d2e <mbedtls_rsa_get_len>
 c024d34:	4558      	cmp	r0, fp
 c024d36:	d10c      	bne.n	c024d52 <rsa_decrypt_wrap+0x36>
    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
 c024d38:	2301      	movs	r3, #1
 c024d3a:	4632      	mov	r2, r6
 c024d3c:	4629      	mov	r1, r5
 c024d3e:	4620      	mov	r0, r4
 c024d40:	e9cd 9a0c 	strd	r9, sl, [sp, #48]	; 0x30
 c024d44:	e9cd 780a 	strd	r7, r8, [sp, #40]	; 0x28
}
 c024d48:	b001      	add	sp, #4
 c024d4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
 c024d4e:	f005 bd2b 	b.w	c02a7a8 <mbedtls_rsa_pkcs1_decrypt>
}
 c024d52:	4802      	ldr	r0, [pc, #8]	; (c024d5c <rsa_decrypt_wrap+0x40>)
 c024d54:	b001      	add	sp, #4
 c024d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c024d5a:	bf00      	nop
 c024d5c:	ffffbf80 	.word	0xffffbf80

0c024d60 <rsa_sign_wrap>:
{
 c024d60:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c024d64:	460f      	mov	r7, r1
 c024d66:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 c024d6a:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 c024d6e:	4691      	mov	r9, r2
 c024d70:	4698      	mov	r8, r3
 c024d72:	4604      	mov	r4, r0
    *sig_len = mbedtls_rsa_get_len( rsa );
 c024d74:	f004 ffdb 	bl	c029d2e <mbedtls_rsa_get_len>
    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 c024d78:	2301      	movs	r3, #1
    *sig_len = mbedtls_rsa_get_len( rsa );
 c024d7a:	f8cb 0000 	str.w	r0, [fp]
    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 c024d7e:	4632      	mov	r2, r6
 c024d80:	4629      	mov	r1, r5
 c024d82:	4620      	mov	r0, r4
 c024d84:	e9cd 9a0c 	strd	r9, sl, [sp, #48]	; 0x30
 c024d88:	e9cd 780a 	strd	r7, r8, [sp, #40]	; 0x28
}
 c024d8c:	b001      	add	sp, #4
 c024d8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 c024d92:	f005 be5d 	b.w	c02aa50 <mbedtls_rsa_pkcs1_sign>
	...

0c024d98 <rsa_verify_wrap>:
{
 c024d98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c024d9c:	b085      	sub	sp, #20
 c024d9e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 c024da0:	4606      	mov	r6, r0
 c024da2:	460f      	mov	r7, r1
 c024da4:	4691      	mov	r9, r2
 c024da6:	4698      	mov	r8, r3
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 c024da8:	f004 ffc1 	bl	c029d2e <mbedtls_rsa_get_len>
    if( sig_len < rsa_len )
 c024dac:	42a0      	cmp	r0, r4
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 c024dae:	4605      	mov	r5, r0
    if( sig_len < rsa_len )
 c024db0:	d812      	bhi.n	c024dd8 <rsa_verify_wrap+0x40>
    if( ( ret = mbedtls_rsa_pkcs1_verify( rsa, NULL, NULL,
 c024db2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 c024db4:	e9cd 7800 	strd	r7, r8, [sp]
 c024db8:	e9cd 9302 	strd	r9, r3, [sp, #8]
 c024dbc:	2300      	movs	r3, #0
 c024dbe:	4630      	mov	r0, r6
 c024dc0:	461a      	mov	r2, r3
 c024dc2:	4619      	mov	r1, r3
 c024dc4:	f005 ffb0 	bl	c02ad28 <mbedtls_rsa_pkcs1_verify>
 c024dc8:	b918      	cbnz	r0, c024dd2 <rsa_verify_wrap+0x3a>
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 c024dca:	4b04      	ldr	r3, [pc, #16]	; (c024ddc <rsa_verify_wrap+0x44>)
 c024dcc:	42a5      	cmp	r5, r4
 c024dce:	bf38      	it	cc
 c024dd0:	4618      	movcc	r0, r3
}
 c024dd2:	b005      	add	sp, #20
 c024dd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 c024dd8:	4801      	ldr	r0, [pc, #4]	; (c024de0 <rsa_verify_wrap+0x48>)
 c024dda:	e7fa      	b.n	c024dd2 <rsa_verify_wrap+0x3a>
 c024ddc:	ffffc700 	.word	0xffffc700
 c024de0:	ffffbc80 	.word	0xffffbc80

0c024de4 <eckey_free_wrap>:
{
 c024de4:	b510      	push	{r4, lr}
 c024de6:	4604      	mov	r4, r0
    mbedtls_ecp_keypair_free( (mbedtls_ecp_keypair *) ctx );
 c024de8:	f7fc fe30 	bl	c021a4c <mbedtls_ecp_keypair_free>
    mbedtls_free( ctx );
 c024dec:	4620      	mov	r0, r4
}
 c024dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 c024df2:	f001 bc89 	b.w	c026708 <mbedtls_free>

0c024df6 <eckey_alloc_wrap>:
{
 c024df6:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecp_keypair ) );
 c024df8:	21ac      	movs	r1, #172	; 0xac
 c024dfa:	2001      	movs	r0, #1
 c024dfc:	f001 fc7e 	bl	c0266fc <mbedtls_calloc>
    if( ctx != NULL )
 c024e00:	4604      	mov	r4, r0
 c024e02:	b108      	cbz	r0, c024e08 <eckey_alloc_wrap+0x12>
        mbedtls_ecp_keypair_init( ctx );
 c024e04:	f7fc fddf 	bl	c0219c6 <mbedtls_ecp_keypair_init>
}
 c024e08:	4620      	mov	r0, r4
 c024e0a:	bd10      	pop	{r4, pc}

0c024e0c <eckey_check_pair>:
    return( mbedtls_ecp_check_pub_priv( (const mbedtls_ecp_keypair *) pub,
 c024e0c:	f7fe b896 	b.w	c022f3c <mbedtls_ecp_check_pub_priv>

0c024e10 <ecdsa_alloc_wrap>:

}
#endif /* MBEDTLS_ECP_RESTARTABLE */

static void *ecdsa_alloc_wrap( void )
{
 c024e10:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecdsa_context ) );
 c024e12:	21ac      	movs	r1, #172	; 0xac
 c024e14:	2001      	movs	r0, #1
 c024e16:	f001 fc71 	bl	c0266fc <mbedtls_calloc>

    if( ctx != NULL )
 c024e1a:	4604      	mov	r4, r0
 c024e1c:	b108      	cbz	r0, c024e22 <ecdsa_alloc_wrap+0x12>
        mbedtls_ecdsa_init( (mbedtls_ecdsa_context *) ctx );
 c024e1e:	f7fc f8fe 	bl	c02101e <mbedtls_ecdsa_init>

    return( ctx );
}
 c024e22:	4620      	mov	r0, r4
 c024e24:	bd10      	pop	{r4, pc}

0c024e26 <ecdsa_free_wrap>:

static void ecdsa_free_wrap( void *ctx )
{
 c024e26:	b510      	push	{r4, lr}
 c024e28:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( (mbedtls_ecdsa_context *) ctx );
 c024e2a:	f7fc f8fa 	bl	c021022 <mbedtls_ecdsa_free>
    mbedtls_free( ctx );
 c024e2e:	4620      	mov	r0, r4
}
 c024e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 c024e34:	f001 bc68 	b.w	c026708 <mbedtls_free>

0c024e38 <ecdsa_sign_wrap>:
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
 c024e38:	f7fc b888 	b.w	c020f4c <mbedtls_ecdsa_write_signature>

0c024e3c <eckey_sign_wrap>:
{
 c024e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 c024e3e:	4604      	mov	r4, r0
 c024e40:	b0b1      	sub	sp, #196	; 0xc4
    mbedtls_ecdsa_init( &ecdsa );
 c024e42:	a805      	add	r0, sp, #20
{
 c024e44:	460d      	mov	r5, r1
 c024e46:	4616      	mov	r6, r2
 c024e48:	461f      	mov	r7, r3
    mbedtls_ecdsa_init( &ecdsa );
 c024e4a:	f7fc f8e8 	bl	c02101e <mbedtls_ecdsa_init>
    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, ctx ) ) == 0 )
 c024e4e:	4621      	mov	r1, r4
 c024e50:	a805      	add	r0, sp, #20
 c024e52:	f7fc f8ea 	bl	c02102a <mbedtls_ecdsa_from_keypair>
 c024e56:	4604      	mov	r4, r0
 c024e58:	b970      	cbnz	r0, c024e78 <eckey_sign_wrap+0x3c>
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
 c024e5a:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 c024e5c:	4632      	mov	r2, r6
 c024e5e:	9303      	str	r3, [sp, #12]
 c024e60:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 c024e62:	4629      	mov	r1, r5
 c024e64:	9302      	str	r3, [sp, #8]
 c024e66:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 c024e68:	a805      	add	r0, sp, #20
 c024e6a:	9301      	str	r3, [sp, #4]
 c024e6c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 c024e6e:	9300      	str	r3, [sp, #0]
 c024e70:	463b      	mov	r3, r7
 c024e72:	f7fc f86b 	bl	c020f4c <mbedtls_ecdsa_write_signature>
 c024e76:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( &ecdsa );
 c024e78:	a805      	add	r0, sp, #20
 c024e7a:	f7fc f8d2 	bl	c021022 <mbedtls_ecdsa_free>
}
 c024e7e:	4620      	mov	r0, r4
 c024e80:	b031      	add	sp, #196	; 0xc4
 c024e82:	bdf0      	pop	{r4, r5, r6, r7, pc}

0c024e84 <ecdsa_verify_wrap>:
{
 c024e84:	b507      	push	{r0, r1, r2, lr}
 c024e86:	4611      	mov	r1, r2
 c024e88:	461a      	mov	r2, r3
    ret = mbedtls_ecdsa_read_signature( (mbedtls_ecdsa_context *) ctx,
 c024e8a:	9b05      	ldr	r3, [sp, #20]
 c024e8c:	9300      	str	r3, [sp, #0]
 c024e8e:	9b04      	ldr	r3, [sp, #16]
 c024e90:	f7fc f8bc 	bl	c02100c <mbedtls_ecdsa_read_signature>
    if( ret == MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH )
 c024e94:	f510 4f98 	cmn.w	r0, #19456	; 0x4c00
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 c024e98:	bf08      	it	eq
 c024e9a:	f500 5098 	addeq.w	r0, r0, #4864	; 0x1300
}
 c024e9e:	b003      	add	sp, #12
 c024ea0:	f85d fb04 	ldr.w	pc, [sp], #4

0c024ea4 <eckey_verify_wrap>:
{
 c024ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 c024ea6:	4604      	mov	r4, r0
 c024ea8:	b0af      	sub	sp, #188	; 0xbc
    mbedtls_ecdsa_init( &ecdsa );
 c024eaa:	a803      	add	r0, sp, #12
{
 c024eac:	460d      	mov	r5, r1
 c024eae:	4616      	mov	r6, r2
 c024eb0:	461f      	mov	r7, r3
    mbedtls_ecdsa_init( &ecdsa );
 c024eb2:	f7fc f8b4 	bl	c02101e <mbedtls_ecdsa_init>
    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, ctx ) ) == 0 )
 c024eb6:	4621      	mov	r1, r4
 c024eb8:	a803      	add	r0, sp, #12
 c024eba:	f7fc f8b6 	bl	c02102a <mbedtls_ecdsa_from_keypair>
 c024ebe:	4604      	mov	r4, r0
 c024ec0:	b950      	cbnz	r0, c024ed8 <eckey_verify_wrap+0x34>
        ret = ecdsa_verify_wrap( &ecdsa, md_alg, hash, hash_len, sig, sig_len );
 c024ec2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 c024ec4:	4632      	mov	r2, r6
 c024ec6:	9301      	str	r3, [sp, #4]
 c024ec8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 c024eca:	4629      	mov	r1, r5
 c024ecc:	9300      	str	r3, [sp, #0]
 c024ece:	a803      	add	r0, sp, #12
 c024ed0:	463b      	mov	r3, r7
 c024ed2:	f7ff ffd7 	bl	c024e84 <ecdsa_verify_wrap>
 c024ed6:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( &ecdsa );
 c024ed8:	a803      	add	r0, sp, #12
 c024eda:	f7fc f8a2 	bl	c021022 <mbedtls_ecdsa_free>
}
 c024ede:	4620      	mov	r0, r4
 c024ee0:	b02f      	add	sp, #188	; 0xbc
 c024ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0c024ee4 <mbedtls_pkcs12_pbe_sha1_rc4_128>:
    mbedtls_platform_zeroize( key, sizeof( key ) );
    mbedtls_arc4_free( &ctx );

    return( ret );
#endif /* MBEDTLS_ARC4_C */
}
 c024ee4:	4800      	ldr	r0, [pc, #0]	; (c024ee8 <mbedtls_pkcs12_pbe_sha1_rc4_128+0x4>)
 c024ee6:	4770      	bx	lr
 c024ee8:	ffffe100 	.word	0xffffe100

0c024eec <mbedtls_pkcs12_derivation>:

int mbedtls_pkcs12_derivation( unsigned char *data, size_t datalen,
                       const unsigned char *pwd, size_t pwdlen,
                       const unsigned char *salt, size_t saltlen,
                       mbedtls_md_type_t md_type, int id, int iterations )
{
 c024eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
 c024ef0:	2980      	cmp	r1, #128	; 0x80
{
 c024ef2:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 c024ef6:	9003      	str	r0, [sp, #12]
 c024ef8:	460f      	mov	r7, r1
 c024efa:	4693      	mov	fp, r2
 c024efc:	469a      	mov	sl, r3
 c024efe:	9ea3      	ldr	r6, [sp, #652]	; 0x28c
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
 c024f00:	f200 80e0 	bhi.w	c0250c4 <mbedtls_pkcs12_derivation+0x1d8>
 c024f04:	2b40      	cmp	r3, #64	; 0x40
 c024f06:	f200 80dd 	bhi.w	c0250c4 <mbedtls_pkcs12_derivation+0x1d8>
 c024f0a:	2e40      	cmp	r6, #64	; 0x40
 c024f0c:	f200 80da 	bhi.w	c0250c4 <mbedtls_pkcs12_derivation+0x1d8>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( md_type );
 c024f10:	f89d 0290 	ldrb.w	r0, [sp, #656]	; 0x290
 c024f14:	f7ff fa18 	bl	c024348 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 c024f18:	9001      	str	r0, [sp, #4]
 c024f1a:	2800      	cmp	r0, #0
 c024f1c:	f000 80d4 	beq.w	c0250c8 <mbedtls_pkcs12_derivation+0x1dc>
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    mbedtls_md_init( &md_ctx );
 c024f20:	a805      	add	r0, sp, #20
 c024f22:	f7ff fa1d 	bl	c024360 <mbedtls_md_init>

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 c024f26:	2200      	movs	r2, #0
 c024f28:	9901      	ldr	r1, [sp, #4]
 c024f2a:	a805      	add	r0, sp, #20
 c024f2c:	f7ff fa38 	bl	c0243a0 <mbedtls_md_setup>
 c024f30:	2800      	cmp	r0, #0
 c024f32:	d17c      	bne.n	c02502e <mbedtls_pkcs12_derivation+0x142>
        return( ret );
    hlen = mbedtls_md_get_size( md_info );
 c024f34:	9801      	ldr	r0, [sp, #4]
 c024f36:	f7ff fb3d 	bl	c0245b4 <mbedtls_md_get_size>

    if( hlen <= 32 )
        v = 64;
 c024f3a:	2820      	cmp	r0, #32
 c024f3c:	bf8c      	ite	hi
 c024f3e:	2480      	movhi	r4, #128	; 0x80
 c024f40:	2440      	movls	r4, #64	; 0x40
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );
 c024f42:	46a0      	mov	r8, r4
    hlen = mbedtls_md_get_size( md_info );
 c024f44:	9002      	str	r0, [sp, #8]
    memset( diversifier, (unsigned char) id, v );
 c024f46:	4622      	mov	r2, r4
 c024f48:	f89d 1294 	ldrb.w	r1, [sp, #660]	; 0x294
 c024f4c:	a818      	add	r0, sp, #96	; 0x60
 c024f4e:	f7ef fd3a 	bl	c0149c6 <memset>
    unsigned char *p = data;
 c024f52:	ab38      	add	r3, sp, #224	; 0xe0
        use_len = ( data_len > fill_len ) ? fill_len : data_len;
 c024f54:	4546      	cmp	r6, r8
 c024f56:	4635      	mov	r5, r6
 c024f58:	bf28      	it	cs
 c024f5a:	4645      	movcs	r5, r8
        memcpy( p, filler, use_len );
 c024f5c:	4618      	mov	r0, r3
 c024f5e:	462a      	mov	r2, r5
 c024f60:	99a2      	ldr	r1, [sp, #648]	; 0x288
 c024f62:	f7ef fd0c 	bl	c01497e <memcpy>
 c024f66:	4603      	mov	r3, r0
    while( data_len > 0 )
 c024f68:	ebb8 0805 	subs.w	r8, r8, r5
        p += use_len;
 c024f6c:	442b      	add	r3, r5
    while( data_len > 0 )
 c024f6e:	d1f1      	bne.n	c024f54 <mbedtls_pkcs12_derivation+0x68>
    unsigned char *p = data;
 c024f70:	ab58      	add	r3, sp, #352	; 0x160
    while( data_len > 0 )
 c024f72:	46a1      	mov	r9, r4
 c024f74:	4698      	mov	r8, r3
        use_len = ( data_len > fill_len ) ? fill_len : data_len;
 c024f76:	45ca      	cmp	sl, r9
 c024f78:	4655      	mov	r5, sl
 c024f7a:	bf28      	it	cs
 c024f7c:	464d      	movcs	r5, r9
        memcpy( p, filler, use_len );
 c024f7e:	4618      	mov	r0, r3
 c024f80:	462a      	mov	r2, r5
 c024f82:	4659      	mov	r1, fp
 c024f84:	f7ef fcfb 	bl	c01497e <memcpy>
 c024f88:	4603      	mov	r3, r0
    while( data_len > 0 )
 c024f8a:	ebb9 0905 	subs.w	r9, r9, r5
        p += use_len;
 c024f8e:	442b      	add	r3, r5
    while( data_len > 0 )
 c024f90:	d1f1      	bne.n	c024f76 <mbedtls_pkcs12_derivation+0x8a>
 c024f92:	ad08      	add	r5, sp, #32

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );

    p = data;
    while( datalen > 0 )
 c024f94:	2f00      	cmp	r7, #0
 c024f96:	d035      	beq.n	c025004 <mbedtls_pkcs12_derivation+0x118>
    {
        // Calculate hash( diversifier || salt_block || pwd_block )
        if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
 c024f98:	a805      	add	r0, sp, #20
 c024f9a:	f7ff fa21 	bl	c0243e0 <mbedtls_md_starts>
 c024f9e:	4606      	mov	r6, r0
 c024fa0:	bb88      	cbnz	r0, c025006 <mbedtls_pkcs12_derivation+0x11a>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, diversifier, v ) ) != 0 )
 c024fa2:	4622      	mov	r2, r4
 c024fa4:	a918      	add	r1, sp, #96	; 0x60
 c024fa6:	a805      	add	r0, sp, #20
 c024fa8:	f7ff fa24 	bl	c0243f4 <mbedtls_md_update>
 c024fac:	4606      	mov	r6, r0
 c024fae:	bb50      	cbnz	r0, c025006 <mbedtls_pkcs12_derivation+0x11a>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, salt_block, v ) ) != 0 )
 c024fb0:	4622      	mov	r2, r4
 c024fb2:	a938      	add	r1, sp, #224	; 0xe0
 c024fb4:	a805      	add	r0, sp, #20
 c024fb6:	f7ff fa1d 	bl	c0243f4 <mbedtls_md_update>
 c024fba:	4606      	mov	r6, r0
 c024fbc:	bb18      	cbnz	r0, c025006 <mbedtls_pkcs12_derivation+0x11a>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, pwd_block, v ) ) != 0 )
 c024fbe:	4622      	mov	r2, r4
 c024fc0:	4641      	mov	r1, r8
 c024fc2:	a805      	add	r0, sp, #20
 c024fc4:	f7ff fa16 	bl	c0243f4 <mbedtls_md_update>
 c024fc8:	4606      	mov	r6, r0
 c024fca:	b9e0      	cbnz	r0, c025006 <mbedtls_pkcs12_derivation+0x11a>
            goto exit;

        if( ( ret = mbedtls_md_finish( &md_ctx, hash_output ) ) != 0 )
 c024fcc:	4629      	mov	r1, r5
 c024fce:	a805      	add	r0, sp, #20
 c024fd0:	f7ff fa1a 	bl	c024408 <mbedtls_md_finish>
 c024fd4:	4606      	mov	r6, r0
 c024fd6:	b9b0      	cbnz	r0, c025006 <mbedtls_pkcs12_derivation+0x11a>
            goto exit;

        // Perform remaining ( iterations - 1 ) recursive hash calculations
        for( i = 1; i < (size_t) iterations; i++ )
 c024fd8:	f04f 0901 	mov.w	r9, #1
        {
            if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
 c024fdc:	46aa      	mov	sl, r5
        for( i = 1; i < (size_t) iterations; i++ )
 c024fde:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 c024fe0:	454b      	cmp	r3, r9
 c024fe2:	d828      	bhi.n	c025036 <mbedtls_pkcs12_derivation+0x14a>
                goto exit;
        }

        use_len = ( datalen > hlen ) ? hlen : datalen;
 c024fe4:	9b02      	ldr	r3, [sp, #8]
        memcpy( p, hash_output, use_len );
 c024fe6:	4629      	mov	r1, r5
        use_len = ( datalen > hlen ) ? hlen : datalen;
 c024fe8:	42bb      	cmp	r3, r7
 c024fea:	bf28      	it	cs
 c024fec:	463b      	movcs	r3, r7
 c024fee:	4699      	mov	r9, r3
        memcpy( p, hash_output, use_len );
 c024ff0:	461a      	mov	r2, r3
 c024ff2:	9803      	ldr	r0, [sp, #12]
 c024ff4:	f7ef fcc3 	bl	c01497e <memcpy>
        datalen -= use_len;
        p += use_len;
 c024ff8:	9b03      	ldr	r3, [sp, #12]

        if( datalen == 0 )
 c024ffa:	ebb7 0709 	subs.w	r7, r7, r9
        p += use_len;
 c024ffe:	444b      	add	r3, r9
 c025000:	9303      	str	r3, [sp, #12]
        if( datalen == 0 )
 c025002:	d124      	bne.n	c02504e <mbedtls_pkcs12_derivation+0x162>
            c = (unsigned char) (j >> 8);
            pwd_block[i - 1] = j & 0xFF;
        }
    }

    ret = 0;
 c025004:	2600      	movs	r6, #0

exit:
    mbedtls_platform_zeroize( salt_block, sizeof( salt_block ) );
 c025006:	2180      	movs	r1, #128	; 0x80
 c025008:	a838      	add	r0, sp, #224	; 0xe0
 c02500a:	f001 fb8d 	bl	c026728 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( pwd_block, sizeof( pwd_block ) );
 c02500e:	2180      	movs	r1, #128	; 0x80
 c025010:	4640      	mov	r0, r8
 c025012:	f001 fb89 	bl	c026728 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( hash_block, sizeof( hash_block ) );
 c025016:	2180      	movs	r1, #128	; 0x80
 c025018:	a878      	add	r0, sp, #480	; 0x1e0
 c02501a:	f001 fb85 	bl	c026728 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( hash_output, sizeof( hash_output ) );
 c02501e:	2140      	movs	r1, #64	; 0x40
 c025020:	4628      	mov	r0, r5
 c025022:	f001 fb81 	bl	c026728 <mbedtls_platform_zeroize>

    mbedtls_md_free( &md_ctx );
 c025026:	a805      	add	r0, sp, #20
 c025028:	f7ff f99f 	bl	c02436a <mbedtls_md_free>

    return( ret );
 c02502c:	4630      	mov	r0, r6
}
 c02502e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 c025032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
 c025036:	4653      	mov	r3, sl
 c025038:	9a02      	ldr	r2, [sp, #8]
 c02503a:	4651      	mov	r1, sl
 c02503c:	9801      	ldr	r0, [sp, #4]
 c02503e:	f7ff f9ed 	bl	c02441c <mbedtls_md>
 c025042:	4606      	mov	r6, r0
 c025044:	2800      	cmp	r0, #0
 c025046:	d1de      	bne.n	c025006 <mbedtls_pkcs12_derivation+0x11a>
        for( i = 1; i < (size_t) iterations; i++ )
 c025048:	f109 0901 	add.w	r9, r9, #1
 c02504c:	e7c7      	b.n	c024fde <mbedtls_pkcs12_derivation+0xf2>
    unsigned char *p = data;
 c02504e:	ab78      	add	r3, sp, #480	; 0x1e0
 c025050:	46a1      	mov	r9, r4
 c025052:	469a      	mov	sl, r3
        use_len = ( data_len > fill_len ) ? fill_len : data_len;
 c025054:	9a02      	ldr	r2, [sp, #8]
        memcpy( p, filler, use_len );
 c025056:	4618      	mov	r0, r3
        use_len = ( data_len > fill_len ) ? fill_len : data_len;
 c025058:	454a      	cmp	r2, r9
 c02505a:	bf28      	it	cs
 c02505c:	464a      	movcs	r2, r9
        memcpy( p, filler, use_len );
 c02505e:	4629      	mov	r1, r5
        use_len = ( data_len > fill_len ) ? fill_len : data_len;
 c025060:	4693      	mov	fp, r2
        memcpy( p, filler, use_len );
 c025062:	f7ef fc8c 	bl	c01497e <memcpy>
 c025066:	4603      	mov	r3, r0
    while( data_len > 0 )
 c025068:	ebb9 090b 	subs.w	r9, r9, fp
        p += use_len;
 c02506c:	445b      	add	r3, fp
    while( data_len > 0 )
 c02506e:	d1f1      	bne.n	c025054 <mbedtls_pkcs12_derivation+0x168>
 c025070:	ab78      	add	r3, sp, #480	; 0x1e0
 c025072:	4423      	add	r3, r4
            if( ++hash_block[i - 1] != 0 )
 c025074:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 c025078:	3201      	adds	r2, #1
 c02507a:	b2d2      	uxtb	r2, r2
 c02507c:	701a      	strb	r2, [r3, #0]
 c02507e:	b9f2      	cbnz	r2, c0250be <mbedtls_pkcs12_derivation+0x1d2>
        for( i = v; i > 0; i-- )
 c025080:	a978      	add	r1, sp, #480	; 0x1e0
 c025082:	428b      	cmp	r3, r1
 c025084:	d1f6      	bne.n	c025074 <mbedtls_pkcs12_derivation+0x188>
 c025086:	4623      	mov	r3, r4
            j = salt_block[i - 1] + hash_block[i - 1] + c;
 c025088:	a838      	add	r0, sp, #224	; 0xe0
 c02508a:	3b01      	subs	r3, #1
 c02508c:	5c19      	ldrb	r1, [r3, r0]
 c02508e:	f81a 5003 	ldrb.w	r5, [sl, r3]
 c025092:	4429      	add	r1, r5
 c025094:	4411      	add	r1, r2
            c = (unsigned char) (j >> 8);
 c025096:	f3c1 2207 	ubfx	r2, r1, #8, #8
            salt_block[i - 1] = j & 0xFF;
 c02509a:	5419      	strb	r1, [r3, r0]
        for( i = v; i > 0; i-- )
 c02509c:	2b00      	cmp	r3, #0
 c02509e:	d1f4      	bne.n	c02508a <mbedtls_pkcs12_derivation+0x19e>
        for( i = v; i > 0; i-- )
 c0250a0:	4622      	mov	r2, r4
            j = pwd_block[i - 1] + hash_block[i - 1] + c;
 c0250a2:	3a01      	subs	r2, #1
 c0250a4:	f818 1002 	ldrb.w	r1, [r8, r2]
 c0250a8:	f81a 0002 	ldrb.w	r0, [sl, r2]
 c0250ac:	4401      	add	r1, r0
 c0250ae:	4419      	add	r1, r3
            c = (unsigned char) (j >> 8);
 c0250b0:	f3c1 2307 	ubfx	r3, r1, #8, #8
            pwd_block[i - 1] = j & 0xFF;
 c0250b4:	f808 1002 	strb.w	r1, [r8, r2]
        for( i = v; i > 0; i-- )
 c0250b8:	2a00      	cmp	r2, #0
 c0250ba:	d1f2      	bne.n	c0250a2 <mbedtls_pkcs12_derivation+0x1b6>
 c0250bc:	e769      	b.n	c024f92 <mbedtls_pkcs12_derivation+0xa6>
 c0250be:	4623      	mov	r3, r4
 c0250c0:	2200      	movs	r2, #0
 c0250c2:	e7e1      	b.n	c025088 <mbedtls_pkcs12_derivation+0x19c>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
 c0250c4:	4801      	ldr	r0, [pc, #4]	; (c0250cc <mbedtls_pkcs12_derivation+0x1e0>)
 c0250c6:	e7b2      	b.n	c02502e <mbedtls_pkcs12_derivation+0x142>
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
 c0250c8:	4801      	ldr	r0, [pc, #4]	; (c0250d0 <mbedtls_pkcs12_derivation+0x1e4>)
 c0250ca:	e7b0      	b.n	c02502e <mbedtls_pkcs12_derivation+0x142>
 c0250cc:	ffffe080 	.word	0xffffe080
 c0250d0:	ffffe100 	.word	0xffffe100

0c0250d4 <mbedtls_pkcs12_pbe>:
{
 c0250d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t olen = 0;
 c0250d8:	2600      	movs	r6, #0
{
 c0250da:	b0d9      	sub	sp, #356	; 0x164
 c0250dc:	4604      	mov	r4, r0
    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
 c0250de:	4610      	mov	r0, r2
{
 c0250e0:	468b      	mov	fp, r1
 c0250e2:	4699      	mov	r9, r3
    size_t olen = 0;
 c0250e4:	9606      	str	r6, [sp, #24]
    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
 c0250e6:	f7fa fe13 	bl	c01fd10 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 c0250ea:	4605      	mov	r5, r0
 c0250ec:	2800      	cmp	r0, #0
 c0250ee:	f000 80b3 	beq.w	c025258 <mbedtls_pkcs12_pbe+0x184>
    if( pwdlen > PKCS12_MAX_PWDLEN )
 c0250f2:	9b63      	ldr	r3, [sp, #396]	; 0x18c
    keylen = cipher_info->key_bitlen / 8;
 c0250f4:	6847      	ldr	r7, [r0, #4]
    if( pwdlen > PKCS12_MAX_PWDLEN )
 c0250f6:	2b80      	cmp	r3, #128	; 0x80
    if( ( ret = pkcs12_pbe_derive_key_iv( pbe_params, md_type, pwd, pwdlen,
 c0250f8:	f8d0 800c 	ldr.w	r8, [r0, #12]
    int ret, iterations = 0;
 c0250fc:	9607      	str	r6, [sp, #28]
    if( pwdlen > PKCS12_MAX_PWDLEN )
 c0250fe:	f200 80a9 	bhi.w	c025254 <mbedtls_pkcs12_pbe+0x180>
    memset( &unipwd, 0, sizeof(unipwd) );
 c025102:	4631      	mov	r1, r6
 c025104:	f44f 7281 	mov.w	r2, #258	; 0x102
 c025108:	a817      	add	r0, sp, #92	; 0x5c
    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
 c02510a:	e9cd 6608 	strd	r6, r6, [sp, #32]
 c02510e:	960a      	str	r6, [sp, #40]	; 0x28
    memset( &unipwd, 0, sizeof(unipwd) );
 c025110:	f7ef fc59 	bl	c0149c6 <memset>
    const unsigned char *end = params->p + params->len;
 c025114:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 c025118:	441e      	add	r6, r3
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 c02511a:	6823      	ldr	r3, [r4, #0]
    unsigned char **p = &params->p;
 c02511c:	f104 0a08 	add.w	sl, r4, #8
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 c025120:	2b30      	cmp	r3, #48	; 0x30
 c025122:	f040 809b 	bne.w	c02525c <mbedtls_pkcs12_pbe+0x188>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 c025126:	2304      	movs	r3, #4
 c025128:	aa09      	add	r2, sp, #36	; 0x24
 c02512a:	4631      	mov	r1, r6
 c02512c:	4650      	mov	r0, sl
 c02512e:	f7f7 ff29 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c025132:	2800      	cmp	r0, #0
 c025134:	d05f      	beq.n	c0251f6 <mbedtls_pkcs12_pbe+0x122>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );
 c025136:	f5a0 54f4 	sub.w	r4, r0, #7808	; 0x1e80
    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
 c02513a:	2c00      	cmp	r4, #0
 c02513c:	f040 8086 	bne.w	c02524c <mbedtls_pkcs12_pbe+0x178>
{
 c025140:	2300      	movs	r3, #0
    for( i = 0; i < pwdlen; i++ )
 c025142:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 c025144:	429a      	cmp	r2, r3
 c025146:	d167      	bne.n	c025218 <mbedtls_pkcs12_pbe+0x144>
    if( ( ret = mbedtls_pkcs12_derivation( key, keylen, unipwd, pwdlen * 2 + 2,
 c025148:	9b07      	ldr	r3, [sp, #28]
 c02514a:	1c56      	adds	r6, r2, #1
 c02514c:	9304      	str	r3, [sp, #16]
 c02514e:	2301      	movs	r3, #1
 c025150:	e9cd 9302 	strd	r9, r3, [sp, #8]
 c025154:	9b09      	ldr	r3, [sp, #36]	; 0x24
    keylen = cipher_info->key_bitlen / 8;
 c025156:	08ff      	lsrs	r7, r7, #3
    if( ( ret = mbedtls_pkcs12_derivation( key, keylen, unipwd, pwdlen * 2 + 2,
 c025158:	9301      	str	r3, [sp, #4]
 c02515a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c02515c:	0076      	lsls	r6, r6, #1
 c02515e:	9300      	str	r3, [sp, #0]
 c025160:	aa17      	add	r2, sp, #92	; 0x5c
 c025162:	4633      	mov	r3, r6
 c025164:	4639      	mov	r1, r7
 c025166:	a80f      	add	r0, sp, #60	; 0x3c
 c025168:	f7ff fec0 	bl	c024eec <mbedtls_pkcs12_derivation>
 c02516c:	4604      	mov	r4, r0
 c02516e:	2800      	cmp	r0, #0
 c025170:	d16c      	bne.n	c02524c <mbedtls_pkcs12_pbe+0x178>
    if( iv == NULL || ivlen == 0 )
 c025172:	f1b8 0f00 	cmp.w	r8, #0
 c025176:	d157      	bne.n	c025228 <mbedtls_pkcs12_pbe+0x154>
    mbedtls_cipher_init( &cipher_ctx );
 c025178:	a817      	add	r0, sp, #92	; 0x5c
 c02517a:	f7fa fdeb 	bl	c01fd54 <mbedtls_cipher_init>
    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
 c02517e:	4629      	mov	r1, r5
 c025180:	a817      	add	r0, sp, #92	; 0x5c
 c025182:	f7fa ffe1 	bl	c020148 <mbedtls_cipher_setup>
 c025186:	4604      	mov	r4, r0
 c025188:	bb48      	cbnz	r0, c0251de <mbedtls_pkcs12_pbe+0x10a>
    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
 c02518a:	fa4f f38b 	sxtb.w	r3, fp
 c02518e:	00fa      	lsls	r2, r7, #3
 c025190:	a90f      	add	r1, sp, #60	; 0x3c
 c025192:	a817      	add	r0, sp, #92	; 0x5c
 c025194:	f7fa fdfa 	bl	c01fd8c <mbedtls_cipher_setkey>
 c025198:	4604      	mov	r4, r0
 c02519a:	bb00      	cbnz	r0, c0251de <mbedtls_pkcs12_pbe+0x10a>
    if( ( ret = mbedtls_cipher_set_iv( &cipher_ctx, iv, cipher_info->iv_size ) ) != 0 )
 c02519c:	68ea      	ldr	r2, [r5, #12]
 c02519e:	a90b      	add	r1, sp, #44	; 0x2c
 c0251a0:	a817      	add	r0, sp, #92	; 0x5c
 c0251a2:	f7fa fe13 	bl	c01fdcc <mbedtls_cipher_set_iv>
 c0251a6:	4604      	mov	r4, r0
 c0251a8:	b9c8      	cbnz	r0, c0251de <mbedtls_pkcs12_pbe+0x10a>
    if( ( ret = mbedtls_cipher_reset( &cipher_ctx ) ) != 0 )
 c0251aa:	a817      	add	r0, sp, #92	; 0x5c
 c0251ac:	f7fa fe30 	bl	c01fe10 <mbedtls_cipher_reset>
 c0251b0:	4604      	mov	r4, r0
 c0251b2:	b9a0      	cbnz	r0, c0251de <mbedtls_pkcs12_pbe+0x10a>
    if( ( ret = mbedtls_cipher_update( &cipher_ctx, data, len,
 c0251b4:	ad06      	add	r5, sp, #24
 c0251b6:	9500      	str	r5, [sp, #0]
 c0251b8:	a964      	add	r1, sp, #400	; 0x190
 c0251ba:	c90e      	ldmia	r1, {r1, r2, r3}
 c0251bc:	a817      	add	r0, sp, #92	; 0x5c
 c0251be:	f7fa fe31 	bl	c01fe24 <mbedtls_cipher_update>
 c0251c2:	4604      	mov	r4, r0
 c0251c4:	b958      	cbnz	r0, c0251de <mbedtls_pkcs12_pbe+0x10a>
    if( ( ret = mbedtls_cipher_finish( &cipher_ctx, output + olen, &olen ) ) != 0 )
 c0251c6:	6829      	ldr	r1, [r5, #0]
 c0251c8:	9b66      	ldr	r3, [sp, #408]	; 0x198
 c0251ca:	462a      	mov	r2, r5
 c0251cc:	4419      	add	r1, r3
 c0251ce:	a817      	add	r0, sp, #92	; 0x5c
 c0251d0:	f7fa ff1a 	bl	c020008 <mbedtls_cipher_finish>
        ret = MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH;
 c0251d4:	f5a4 54f0 	sub.w	r4, r4, #7680	; 0x1e00
 c0251d8:	2800      	cmp	r0, #0
 c0251da:	bf08      	it	eq
 c0251dc:	2400      	moveq	r4, #0
    mbedtls_platform_zeroize( key, sizeof( key ) );
 c0251de:	a80f      	add	r0, sp, #60	; 0x3c
 c0251e0:	2120      	movs	r1, #32
 c0251e2:	f001 faa1 	bl	c026728 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( iv,  sizeof( iv  ) );
 c0251e6:	a80b      	add	r0, sp, #44	; 0x2c
 c0251e8:	2110      	movs	r1, #16
 c0251ea:	f001 fa9d 	bl	c026728 <mbedtls_platform_zeroize>
    mbedtls_cipher_free( &cipher_ctx );
 c0251ee:	a817      	add	r0, sp, #92	; 0x5c
 c0251f0:	f7fa fdb4 	bl	c01fd5c <mbedtls_cipher_free>
    return( ret );
 c0251f4:	e02a      	b.n	c02524c <mbedtls_pkcs12_pbe+0x178>
    salt->p = *p;
 c0251f6:	68a3      	ldr	r3, [r4, #8]
    *p += salt->len;
 c0251f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    salt->p = *p;
 c0251fa:	930a      	str	r3, [sp, #40]	; 0x28
    *p += salt->len;
 c0251fc:	4413      	add	r3, r2
 c0251fe:	60a3      	str	r3, [r4, #8]
    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
 c025200:	aa07      	add	r2, sp, #28
 c025202:	4631      	mov	r1, r6
 c025204:	4650      	mov	r0, sl
 c025206:	f7f7 fed1 	bl	c01cfac <mbedtls_asn1_get_int>
 c02520a:	2800      	cmp	r0, #0
 c02520c:	d193      	bne.n	c025136 <mbedtls_pkcs12_pbe+0x62>
    if( *p != end )
 c02520e:	68a3      	ldr	r3, [r4, #8]
 c025210:	429e      	cmp	r6, r3
 c025212:	d095      	beq.n	c025140 <mbedtls_pkcs12_pbe+0x6c>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
 c025214:	4c12      	ldr	r4, [pc, #72]	; (c025260 <mbedtls_pkcs12_pbe+0x18c>)
 c025216:	e019      	b.n	c02524c <mbedtls_pkcs12_pbe+0x178>
        unipwd[i * 2 + 1] = pwd[i];
 c025218:	9962      	ldr	r1, [sp, #392]	; 0x188
 c02521a:	aa17      	add	r2, sp, #92	; 0x5c
 c02521c:	5cc9      	ldrb	r1, [r1, r3]
 c02521e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 c025222:	7051      	strb	r1, [r2, #1]
    for( i = 0; i < pwdlen; i++ )
 c025224:	3301      	adds	r3, #1
 c025226:	e78c      	b.n	c025142 <mbedtls_pkcs12_pbe+0x6e>
    if( ( ret = mbedtls_pkcs12_derivation( iv, ivlen, unipwd, pwdlen * 2 + 2,
 c025228:	9b07      	ldr	r3, [sp, #28]
 c02522a:	aa17      	add	r2, sp, #92	; 0x5c
 c02522c:	9304      	str	r3, [sp, #16]
 c02522e:	2302      	movs	r3, #2
 c025230:	e9cd 9302 	strd	r9, r3, [sp, #8]
 c025234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c025236:	4641      	mov	r1, r8
 c025238:	9301      	str	r3, [sp, #4]
 c02523a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c02523c:	a80b      	add	r0, sp, #44	; 0x2c
 c02523e:	9300      	str	r3, [sp, #0]
 c025240:	4633      	mov	r3, r6
 c025242:	f7ff fe53 	bl	c024eec <mbedtls_pkcs12_derivation>
 c025246:	4604      	mov	r4, r0
 c025248:	2800      	cmp	r0, #0
 c02524a:	d095      	beq.n	c025178 <mbedtls_pkcs12_pbe+0xa4>
}
 c02524c:	4620      	mov	r0, r4
 c02524e:	b059      	add	sp, #356	; 0x164
 c025250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
 c025254:	4c03      	ldr	r4, [pc, #12]	; (c025264 <mbedtls_pkcs12_pbe+0x190>)
 c025256:	e7f9      	b.n	c02524c <mbedtls_pkcs12_pbe+0x178>
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
 c025258:	4c03      	ldr	r4, [pc, #12]	; (c025268 <mbedtls_pkcs12_pbe+0x194>)
 c02525a:	e7f7      	b.n	c02524c <mbedtls_pkcs12_pbe+0x178>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
 c02525c:	4c03      	ldr	r4, [pc, #12]	; (c02526c <mbedtls_pkcs12_pbe+0x198>)
 c02525e:	e7f5      	b.n	c02524c <mbedtls_pkcs12_pbe+0x178>
 c025260:	ffffe11a 	.word	0xffffe11a
 c025264:	ffffe080 	.word	0xffffe080
 c025268:	ffffe100 	.word	0xffffe100
 c02526c:	ffffe11e 	.word	0xffffe11e

0c025270 <mbedtls_pkcs5_pbkdf2_hmac>:
int mbedtls_pkcs5_pbkdf2_hmac( mbedtls_md_context_t *ctx,
                       const unsigned char *password,
                       size_t plen, const unsigned char *salt, size_t slen,
                       unsigned int iteration_count,
                       uint32_t key_length, unsigned char *output )
{
 c025270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c025274:	4604      	mov	r4, r0
 c025276:	b0a5      	sub	sp, #148	; 0x94
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
 c025278:	6800      	ldr	r0, [r0, #0]
{
 c02527a:	9301      	str	r3, [sp, #4]
 c02527c:	460f      	mov	r7, r1
 c02527e:	4693      	mov	fp, r2
 c025280:	9e30      	ldr	r6, [sp, #192]	; 0xc0
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
 c025282:	f7ff f997 	bl	c0245b4 <mbedtls_md_get_size>
    size_t use_len;
    unsigned char *out_p = output;
    unsigned char counter[4];

    memset( counter, 0, 4 );
 c025286:	2300      	movs	r3, #0
 c025288:	9303      	str	r3, [sp, #12]
    counter[3] = 1;
 c02528a:	2301      	movs	r3, #1
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
 c02528c:	4681      	mov	r9, r0
    counter[3] = 1;
 c02528e:	f88d 300f 	strb.w	r3, [sp, #15]
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
            return( ret );

        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
 c025292:	f10d 0850 	add.w	r8, sp, #80	; 0x50
    while( key_length )
 c025296:	b90e      	cbnz	r6, c02529c <mbedtls_pkcs5_pbkdf2_hmac+0x2c>
        for( i = 4; i > 0; i-- )
            if( ++counter[i - 1] != 0 )
                break;
    }

    return( 0 );
 c025298:	4630      	mov	r0, r6
 c02529a:	e04e      	b.n	c02533a <mbedtls_pkcs5_pbkdf2_hmac+0xca>
        if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
 c02529c:	465a      	mov	r2, fp
 c02529e:	4639      	mov	r1, r7
 c0252a0:	4620      	mov	r0, r4
 c0252a2:	f7ff f8cb 	bl	c02443c <mbedtls_md_hmac_starts>
 c0252a6:	2800      	cmp	r0, #0
 c0252a8:	d147      	bne.n	c02533a <mbedtls_pkcs5_pbkdf2_hmac+0xca>
        if( ( ret = mbedtls_md_hmac_update( ctx, salt, slen ) ) != 0 )
 c0252aa:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 c0252ac:	9901      	ldr	r1, [sp, #4]
 c0252ae:	4620      	mov	r0, r4
 c0252b0:	f7ff f928 	bl	c024504 <mbedtls_md_hmac_update>
 c0252b4:	2800      	cmp	r0, #0
 c0252b6:	d140      	bne.n	c02533a <mbedtls_pkcs5_pbkdf2_hmac+0xca>
        if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
 c0252b8:	2204      	movs	r2, #4
 c0252ba:	a903      	add	r1, sp, #12
 c0252bc:	4620      	mov	r0, r4
 c0252be:	f7ff f921 	bl	c024504 <mbedtls_md_hmac_update>
 c0252c2:	2800      	cmp	r0, #0
 c0252c4:	d139      	bne.n	c02533a <mbedtls_pkcs5_pbkdf2_hmac+0xca>
        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
 c0252c6:	4641      	mov	r1, r8
 c0252c8:	4620      	mov	r0, r4
 c0252ca:	f7ff f92d 	bl	c024528 <mbedtls_md_hmac_finish>
 c0252ce:	bba0      	cbnz	r0, c02533a <mbedtls_pkcs5_pbkdf2_hmac+0xca>
        memcpy( md1, work, md_size );
 c0252d0:	ad04      	add	r5, sp, #16
 c0252d2:	464a      	mov	r2, r9
 c0252d4:	4641      	mov	r1, r8
 c0252d6:	4628      	mov	r0, r5
 c0252d8:	f7ef fb51 	bl	c01497e <memcpy>
        for( i = 1; i < iteration_count; i++ )
 c0252dc:	f04f 0a01 	mov.w	sl, #1
 c0252e0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 c0252e2:	459a      	cmp	sl, r3
 c0252e4:	d318      	bcc.n	c025318 <mbedtls_pkcs5_pbkdf2_hmac+0xa8>
        use_len = ( key_length < md_size ) ? key_length : md_size;
 c0252e6:	45b1      	cmp	r9, r6
 c0252e8:	464d      	mov	r5, r9
 c0252ea:	bf28      	it	cs
 c0252ec:	4635      	movcs	r5, r6
        memcpy( out_p, work, use_len );
 c0252ee:	4641      	mov	r1, r8
 c0252f0:	462a      	mov	r2, r5
 c0252f2:	9831      	ldr	r0, [sp, #196]	; 0xc4
 c0252f4:	f7ef fb43 	bl	c01497e <memcpy>
        out_p += use_len;
 c0252f8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
        key_length -= (uint32_t) use_len;
 c0252fa:	1b76      	subs	r6, r6, r5
        out_p += use_len;
 c0252fc:	442b      	add	r3, r5
 c0252fe:	9331      	str	r3, [sp, #196]	; 0xc4
 c025300:	aa04      	add	r2, sp, #16
            if( ++counter[i - 1] != 0 )
 c025302:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 c025306:	3301      	adds	r3, #1
 c025308:	b2db      	uxtb	r3, r3
 c02530a:	7013      	strb	r3, [r2, #0]
 c02530c:	2b00      	cmp	r3, #0
 c02530e:	d1c2      	bne.n	c025296 <mbedtls_pkcs5_pbkdf2_hmac+0x26>
        for( i = 4; i > 0; i-- )
 c025310:	ab03      	add	r3, sp, #12
 c025312:	429a      	cmp	r2, r3
 c025314:	d1f5      	bne.n	c025302 <mbedtls_pkcs5_pbkdf2_hmac+0x92>
 c025316:	e7be      	b.n	c025296 <mbedtls_pkcs5_pbkdf2_hmac+0x26>
            if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
 c025318:	465a      	mov	r2, fp
 c02531a:	4639      	mov	r1, r7
 c02531c:	4620      	mov	r0, r4
 c02531e:	f7ff f88d 	bl	c02443c <mbedtls_md_hmac_starts>
 c025322:	b950      	cbnz	r0, c02533a <mbedtls_pkcs5_pbkdf2_hmac+0xca>
            if( ( ret = mbedtls_md_hmac_update( ctx, md1, md_size ) ) != 0 )
 c025324:	464a      	mov	r2, r9
 c025326:	4629      	mov	r1, r5
 c025328:	4620      	mov	r0, r4
 c02532a:	f7ff f8eb 	bl	c024504 <mbedtls_md_hmac_update>
 c02532e:	b920      	cbnz	r0, c02533a <mbedtls_pkcs5_pbkdf2_hmac+0xca>
            if( ( ret = mbedtls_md_hmac_finish( ctx, md1 ) ) != 0 )
 c025330:	4629      	mov	r1, r5
 c025332:	4620      	mov	r0, r4
 c025334:	f7ff f8f8 	bl	c024528 <mbedtls_md_hmac_finish>
 c025338:	b148      	cbz	r0, c02534e <mbedtls_pkcs5_pbkdf2_hmac+0xde>
}
 c02533a:	b025      	add	sp, #148	; 0x94
 c02533c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                work[j] ^= md1[j];
 c025340:	f810 3008 	ldrb.w	r3, [r0, r8]
 c025344:	5d42      	ldrb	r2, [r0, r5]
 c025346:	4053      	eors	r3, r2
 c025348:	f800 3008 	strb.w	r3, [r0, r8]
            for( j = 0; j < md_size; j++ )
 c02534c:	3001      	adds	r0, #1
 c02534e:	4581      	cmp	r9, r0
 c025350:	dcf6      	bgt.n	c025340 <mbedtls_pkcs5_pbkdf2_hmac+0xd0>
        for( i = 1; i < iteration_count; i++ )
 c025352:	f10a 0a01 	add.w	sl, sl, #1
 c025356:	e7c3      	b.n	c0252e0 <mbedtls_pkcs5_pbkdf2_hmac+0x70>

0c025358 <mbedtls_pkcs5_pbes2>:
{
 c025358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c02535c:	461f      	mov	r7, r3
    int ret, iterations = 0, keylen = 0;
 c02535e:	2300      	movs	r3, #0
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
 c025360:	2404      	movs	r4, #4
{
 c025362:	b0bd      	sub	sp, #244	; 0xf4
 c025364:	4616      	mov	r6, r2
    int ret, iterations = 0, keylen = 0;
 c025366:	e9cd 3305 	strd	r3, r3, [sp, #20]
    size_t olen = 0;
 c02536a:	9308      	str	r3, [sp, #32]
    end = p + pbe_params->len;
 c02536c:	6842      	ldr	r2, [r0, #4]
    p = pbe_params->p;
 c02536e:	6883      	ldr	r3, [r0, #8]
{
 c025370:	460d      	mov	r5, r1
    p = pbe_params->p;
 c025372:	9307      	str	r3, [sp, #28]
    end = p + pbe_params->len;
 c025374:	eb03 0802 	add.w	r8, r3, r2
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 c025378:	6803      	ldr	r3, [r0, #0]
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
 c02537a:	f88d 4012 	strb.w	r4, [sp, #18]
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 c02537e:	2b30      	cmp	r3, #48	; 0x30
 c025380:	d11c      	bne.n	c0253bc <mbedtls_pkcs5_pbes2+0x64>
    if( ( ret = mbedtls_asn1_get_alg( &p, end, &kdf_alg_oid,
 c025382:	ab0f      	add	r3, sp, #60	; 0x3c
 c025384:	aa09      	add	r2, sp, #36	; 0x24
 c025386:	4641      	mov	r1, r8
 c025388:	a807      	add	r0, sp, #28
 c02538a:	f7f7 fe5a 	bl	c01d042 <mbedtls_asn1_get_alg>
 c02538e:	b110      	cbz	r0, c025396 <mbedtls_pkcs5_pbes2+0x3e>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
 c025390:	f5a0 543c 	sub.w	r4, r0, #12032	; 0x2f00
 c025394:	e0ca      	b.n	c02552c <mbedtls_pkcs5_pbes2+0x1d4>
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
 c025396:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 c025398:	2a09      	cmp	r2, #9
 c02539a:	d001      	beq.n	c0253a0 <mbedtls_pkcs5_pbes2+0x48>
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );
 c02539c:	4c66      	ldr	r4, [pc, #408]	; (c025538 <mbedtls_pkcs5_pbes2+0x1e0>)
 c02539e:	e0c5      	b.n	c02552c <mbedtls_pkcs5_pbes2+0x1d4>
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
 c0253a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 c0253a2:	4866      	ldr	r0, [pc, #408]	; (c02553c <mbedtls_pkcs5_pbes2+0x1e4>)
 c0253a4:	f7ef fadc 	bl	c014960 <memcmp>
 c0253a8:	2800      	cmp	r0, #0
 c0253aa:	d1f7      	bne.n	c02539c <mbedtls_pkcs5_pbes2+0x44>
    unsigned char *p = params->p;
 c0253ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
    const unsigned char *end = params->p + params->len;
 c0253ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
    unsigned char *p = params->p;
 c0253b0:	9323      	str	r3, [sp, #140]	; 0x8c
    const unsigned char *end = params->p + params->len;
 c0253b2:	eb03 0902 	add.w	r9, r3, r2
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 c0253b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 c0253b8:	2b30      	cmp	r3, #48	; 0x30
 c0253ba:	d001      	beq.n	c0253c0 <mbedtls_pkcs5_pbes2+0x68>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
 c0253bc:	4c60      	ldr	r4, [pc, #384]	; (c025540 <mbedtls_pkcs5_pbes2+0x1e8>)
 c0253be:	e0b5      	b.n	c02552c <mbedtls_pkcs5_pbes2+0x1d4>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len,
 c0253c0:	4623      	mov	r3, r4
 c0253c2:	aa16      	add	r2, sp, #88	; 0x58
 c0253c4:	4649      	mov	r1, r9
 c0253c6:	a823      	add	r0, sp, #140	; 0x8c
 c0253c8:	f7f7 fddc 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c0253cc:	2800      	cmp	r0, #0
 c0253ce:	d079      	beq.n	c0254c4 <mbedtls_pkcs5_pbes2+0x16c>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
 c0253d0:	f5a0 543c 	sub.w	r4, r0, #12032	; 0x2f00
    if( ( ret = pkcs5_parse_pbkdf2_params( &kdf_alg_params,
 c0253d4:	2c00      	cmp	r4, #0
 c0253d6:	f040 80a9 	bne.w	c02552c <mbedtls_pkcs5_pbes2+0x1d4>
    md_info = mbedtls_md_info_from_type( md_type );
 c0253da:	f89d 0012 	ldrb.w	r0, [sp, #18]
 c0253de:	f7fe ffb3 	bl	c024348 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 c0253e2:	4604      	mov	r4, r0
 c0253e4:	2800      	cmp	r0, #0
 c0253e6:	d0d9      	beq.n	c02539c <mbedtls_pkcs5_pbes2+0x44>
    if( ( ret = mbedtls_asn1_get_alg( &p, end, &enc_scheme_oid,
 c0253e8:	ab12      	add	r3, sp, #72	; 0x48
 c0253ea:	aa0c      	add	r2, sp, #48	; 0x30
 c0253ec:	4641      	mov	r1, r8
 c0253ee:	a807      	add	r0, sp, #28
 c0253f0:	f7f7 fe27 	bl	c01d042 <mbedtls_asn1_get_alg>
 c0253f4:	2800      	cmp	r0, #0
 c0253f6:	d1cb      	bne.n	c025390 <mbedtls_pkcs5_pbes2+0x38>
    if( mbedtls_oid_get_cipher_alg( &enc_scheme_oid, &cipher_alg ) != 0 )
 c0253f8:	f10d 0113 	add.w	r1, sp, #19
 c0253fc:	a80c      	add	r0, sp, #48	; 0x30
 c0253fe:	f7ff fad9 	bl	c0249b4 <mbedtls_oid_get_cipher_alg>
 c025402:	2800      	cmp	r0, #0
 c025404:	d1ca      	bne.n	c02539c <mbedtls_pkcs5_pbes2+0x44>
    cipher_info = mbedtls_cipher_info_from_type( cipher_alg );
 c025406:	f89d 0013 	ldrb.w	r0, [sp, #19]
 c02540a:	f7fa fc81 	bl	c01fd10 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 c02540e:	4680      	mov	r8, r0
 c025410:	2800      	cmp	r0, #0
 c025412:	d0c3      	beq.n	c02539c <mbedtls_pkcs5_pbes2+0x44>
    keylen = cipher_info->key_bitlen / 8;
 c025414:	6843      	ldr	r3, [r0, #4]
 c025416:	08db      	lsrs	r3, r3, #3
 c025418:	9306      	str	r3, [sp, #24]
    if( enc_scheme_params.tag != MBEDTLS_ASN1_OCTET_STRING ||
 c02541a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 c02541c:	2b04      	cmp	r3, #4
 c02541e:	f040 8089 	bne.w	c025534 <mbedtls_pkcs5_pbes2+0x1dc>
 c025422:	68c3      	ldr	r3, [r0, #12]
 c025424:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 c025426:	429a      	cmp	r2, r3
 c025428:	f040 8084 	bne.w	c025534 <mbedtls_pkcs5_pbes2+0x1dc>
    mbedtls_md_init( &md_ctx );
 c02542c:	a818      	add	r0, sp, #96	; 0x60
 c02542e:	f7fe ff97 	bl	c024360 <mbedtls_md_init>
    mbedtls_cipher_init( &cipher_ctx );
 c025432:	a82b      	add	r0, sp, #172	; 0xac
 c025434:	f7fa fc8e 	bl	c01fd54 <mbedtls_cipher_init>
    memcpy( iv, enc_scheme_params.p, enc_scheme_params.len );
 c025438:	e9dd 2113 	ldrd	r2, r1, [sp, #76]	; 0x4c
 c02543c:	a823      	add	r0, sp, #140	; 0x8c
 c02543e:	f7ef fa9e 	bl	c01497e <memcpy>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 c025442:	4621      	mov	r1, r4
 c025444:	2201      	movs	r2, #1
 c025446:	a818      	add	r0, sp, #96	; 0x60
 c025448:	f7fe ffaa 	bl	c0243a0 <mbedtls_md_setup>
 c02544c:	4604      	mov	r4, r0
 c02544e:	2800      	cmp	r0, #0
 c025450:	d131      	bne.n	c0254b6 <mbedtls_pkcs5_pbes2+0x15e>
    if( ( ret = mbedtls_pkcs5_pbkdf2_hmac( &md_ctx, pwd, pwdlen, salt.p, salt.len,
 c025452:	9b06      	ldr	r3, [sp, #24]
 c025454:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
 c025458:	9302      	str	r3, [sp, #8]
 c02545a:	9b05      	ldr	r3, [sp, #20]
 c02545c:	f8cd 900c 	str.w	r9, [sp, #12]
 c025460:	9301      	str	r3, [sp, #4]
 c025462:	9b16      	ldr	r3, [sp, #88]	; 0x58
 c025464:	463a      	mov	r2, r7
 c025466:	9300      	str	r3, [sp, #0]
 c025468:	4631      	mov	r1, r6
 c02546a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 c02546c:	a818      	add	r0, sp, #96	; 0x60
 c02546e:	f7ff feff 	bl	c025270 <mbedtls_pkcs5_pbkdf2_hmac>
 c025472:	4604      	mov	r4, r0
 c025474:	b9f8      	cbnz	r0, c0254b6 <mbedtls_pkcs5_pbes2+0x15e>
    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
 c025476:	4641      	mov	r1, r8
 c025478:	a82b      	add	r0, sp, #172	; 0xac
 c02547a:	f7fa fe65 	bl	c020148 <mbedtls_cipher_setup>
 c02547e:	4604      	mov	r4, r0
 c025480:	b9c8      	cbnz	r0, c0254b6 <mbedtls_pkcs5_pbes2+0x15e>
    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen,
 c025482:	9a06      	ldr	r2, [sp, #24]
 c025484:	b26b      	sxtb	r3, r5
 c025486:	00d2      	lsls	r2, r2, #3
 c025488:	4649      	mov	r1, r9
 c02548a:	a82b      	add	r0, sp, #172	; 0xac
 c02548c:	f7fa fc7e 	bl	c01fd8c <mbedtls_cipher_setkey>
 c025490:	4604      	mov	r4, r0
 c025492:	b980      	cbnz	r0, c0254b6 <mbedtls_pkcs5_pbes2+0x15e>
    if( ( ret = mbedtls_cipher_crypt( &cipher_ctx, iv, enc_scheme_params.len,
 c025494:	ab08      	add	r3, sp, #32
 c025496:	9302      	str	r3, [sp, #8]
 c025498:	9b46      	ldr	r3, [sp, #280]	; 0x118
 c02549a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 c02549c:	9301      	str	r3, [sp, #4]
 c02549e:	9b45      	ldr	r3, [sp, #276]	; 0x114
 c0254a0:	a923      	add	r1, sp, #140	; 0x8c
 c0254a2:	9300      	str	r3, [sp, #0]
 c0254a4:	a82b      	add	r0, sp, #172	; 0xac
 c0254a6:	9b44      	ldr	r3, [sp, #272]	; 0x110
 c0254a8:	f7fa fe6a 	bl	c020180 <mbedtls_cipher_crypt>
        ret = MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH;
 c0254ac:	f5a4 5438 	sub.w	r4, r4, #11776	; 0x2e00
 c0254b0:	2800      	cmp	r0, #0
 c0254b2:	bf08      	it	eq
 c0254b4:	2400      	moveq	r4, #0
    mbedtls_md_free( &md_ctx );
 c0254b6:	a818      	add	r0, sp, #96	; 0x60
 c0254b8:	f7fe ff57 	bl	c02436a <mbedtls_md_free>
    mbedtls_cipher_free( &cipher_ctx );
 c0254bc:	a82b      	add	r0, sp, #172	; 0xac
 c0254be:	f7fa fc4d 	bl	c01fd5c <mbedtls_cipher_free>
    return( ret );
 c0254c2:	e033      	b.n	c02552c <mbedtls_pkcs5_pbes2+0x1d4>
    salt->p = p;
 c0254c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    p += salt->len;
 c0254c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    salt->p = p;
 c0254c8:	9317      	str	r3, [sp, #92]	; 0x5c
    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
 c0254ca:	4649      	mov	r1, r9
    p += salt->len;
 c0254cc:	4413      	add	r3, r2
    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
 c0254ce:	a823      	add	r0, sp, #140	; 0x8c
 c0254d0:	aa05      	add	r2, sp, #20
    p += salt->len;
 c0254d2:	9323      	str	r3, [sp, #140]	; 0x8c
    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
 c0254d4:	f7f7 fd6a 	bl	c01cfac <mbedtls_asn1_get_int>
 c0254d8:	2800      	cmp	r0, #0
 c0254da:	f47f af79 	bne.w	c0253d0 <mbedtls_pkcs5_pbes2+0x78>
    if( p == end )
 c0254de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 c0254e0:	4599      	cmp	r9, r3
 c0254e2:	f43f af7a 	beq.w	c0253da <mbedtls_pkcs5_pbes2+0x82>
    if( ( ret = mbedtls_asn1_get_int( &p, end, keylen ) ) != 0 )
 c0254e6:	aa06      	add	r2, sp, #24
 c0254e8:	4649      	mov	r1, r9
 c0254ea:	a823      	add	r0, sp, #140	; 0x8c
 c0254ec:	f7f7 fd5e 	bl	c01cfac <mbedtls_asn1_get_int>
 c0254f0:	b118      	cbz	r0, c0254fa <mbedtls_pkcs5_pbes2+0x1a2>
        if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 c0254f2:	f110 0f62 	cmn.w	r0, #98	; 0x62
 c0254f6:	f47f af6b 	bne.w	c0253d0 <mbedtls_pkcs5_pbes2+0x78>
    if( p == end )
 c0254fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 c0254fc:	4599      	cmp	r9, r3
 c0254fe:	f43f af6c 	beq.w	c0253da <mbedtls_pkcs5_pbes2+0x82>
    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
 c025502:	aa2b      	add	r2, sp, #172	; 0xac
 c025504:	4649      	mov	r1, r9
 c025506:	a823      	add	r0, sp, #140	; 0x8c
 c025508:	f7f7 fde8 	bl	c01d0dc <mbedtls_asn1_get_alg_null>
 c02550c:	2800      	cmp	r0, #0
 c02550e:	f47f af5f 	bne.w	c0253d0 <mbedtls_pkcs5_pbes2+0x78>
    if( mbedtls_oid_get_md_hmac( &prf_alg_oid, md_type ) != 0 )
 c025512:	f10d 0112 	add.w	r1, sp, #18
 c025516:	a82b      	add	r0, sp, #172	; 0xac
 c025518:	f7ff fa7a 	bl	c024a10 <mbedtls_oid_get_md_hmac>
 c02551c:	2800      	cmp	r0, #0
 c02551e:	f47f af3d 	bne.w	c02539c <mbedtls_pkcs5_pbes2+0x44>
    if( p != end )
 c025522:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 c025524:	4599      	cmp	r9, r3
 c025526:	f43f af58 	beq.w	c0253da <mbedtls_pkcs5_pbes2+0x82>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
 c02552a:	4c06      	ldr	r4, [pc, #24]	; (c025544 <mbedtls_pkcs5_pbes2+0x1ec>)
}
 c02552c:	4620      	mov	r0, r4
 c02552e:	b03d      	add	sp, #244	; 0xf4
 c025530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT );
 c025534:	4c04      	ldr	r4, [pc, #16]	; (c025548 <mbedtls_pkcs5_pbes2+0x1f0>)
 c025536:	e7f9      	b.n	c02552c <mbedtls_pkcs5_pbes2+0x1d4>
 c025538:	ffffd180 	.word	0xffffd180
 c02553c:	0c034d83 	.word	0x0c034d83
 c025540:	ffffd09e 	.word	0xffffd09e
 c025544:	ffffd09a 	.word	0xffffd09a
 c025548:	ffffd100 	.word	0xffffd100

0c02554c <pk_get_rsapubkey>:
 *  }
 */
static int pk_get_rsapubkey( unsigned char **p,
                             const unsigned char *end,
                             mbedtls_rsa_context *rsa )
{
 c02554c:	b570      	push	{r4, r5, r6, lr}
 c02554e:	b08a      	sub	sp, #40	; 0x28
 c025550:	4616      	mov	r6, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 c025552:	2330      	movs	r3, #48	; 0x30
 c025554:	aa09      	add	r2, sp, #36	; 0x24
{
 c025556:	4604      	mov	r4, r0
 c025558:	460d      	mov	r5, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 c02555a:	f7f7 fd13 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c02555e:	b110      	cbz	r0, c025566 <pk_get_rsapubkey+0x1a>

    *p += len;

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 c025560:	f5a0 506c 	sub.w	r0, r0, #15104	; 0x3b00
 c025564:	e005      	b.n	c025572 <pk_get_rsapubkey+0x26>
    if( *p + len != end )
 c025566:	6823      	ldr	r3, [r4, #0]
 c025568:	9a09      	ldr	r2, [sp, #36]	; 0x24
 c02556a:	4413      	add	r3, r2
 c02556c:	429d      	cmp	r5, r3
 c02556e:	d002      	beq.n	c025576 <pk_get_rsapubkey+0x2a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 c025570:	4824      	ldr	r0, [pc, #144]	; (c025604 <pk_get_rsapubkey+0xb8>)
    if( *p != end )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 c025572:	b00a      	add	sp, #40	; 0x28
 c025574:	bd70      	pop	{r4, r5, r6, pc}
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 c025576:	2302      	movs	r3, #2
 c025578:	aa09      	add	r2, sp, #36	; 0x24
 c02557a:	4629      	mov	r1, r5
 c02557c:	4620      	mov	r0, r4
 c02557e:	f7f7 fd01 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c025582:	2800      	cmp	r0, #0
 c025584:	d1ec      	bne.n	c025560 <pk_get_rsapubkey+0x14>
    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
 c025586:	e9cd 0005 	strd	r0, r0, [sp, #20]
 c02558a:	e9cd 0003 	strd	r0, r0, [sp, #12]
 c02558e:	e9cd 0001 	strd	r0, r0, [sp, #4]
 c025592:	9000      	str	r0, [sp, #0]
 c025594:	4603      	mov	r3, r0
 c025596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 c025598:	6821      	ldr	r1, [r4, #0]
 c02559a:	4630      	mov	r0, r6
 c02559c:	f004 fa2c 	bl	c0299f8 <mbedtls_rsa_import_raw>
 c0255a0:	b108      	cbz	r0, c0255a6 <pk_get_rsapubkey+0x5a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 c0255a2:	4819      	ldr	r0, [pc, #100]	; (c025608 <pk_get_rsapubkey+0xbc>)
 c0255a4:	e7e5      	b.n	c025572 <pk_get_rsapubkey+0x26>
    *p += len;
 c0255a6:	6823      	ldr	r3, [r4, #0]
 c0255a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 c0255aa:	4629      	mov	r1, r5
    *p += len;
 c0255ac:	4413      	add	r3, r2
 c0255ae:	6023      	str	r3, [r4, #0]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 c0255b0:	aa09      	add	r2, sp, #36	; 0x24
 c0255b2:	2302      	movs	r3, #2
 c0255b4:	4620      	mov	r0, r4
 c0255b6:	f7f7 fce5 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c0255ba:	2800      	cmp	r0, #0
 c0255bc:	d1d0      	bne.n	c025560 <pk_get_rsapubkey+0x14>
    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
 c0255be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c0255c0:	e9cd 0002 	strd	r0, r0, [sp, #8]
 c0255c4:	9306      	str	r3, [sp, #24]
 c0255c6:	6823      	ldr	r3, [r4, #0]
 c0255c8:	e9cd 0000 	strd	r0, r0, [sp]
 c0255cc:	e9cd 0304 	strd	r0, r3, [sp, #16]
 c0255d0:	4602      	mov	r2, r0
 c0255d2:	4603      	mov	r3, r0
 c0255d4:	4601      	mov	r1, r0
 c0255d6:	4630      	mov	r0, r6
 c0255d8:	f004 fa0e 	bl	c0299f8 <mbedtls_rsa_import_raw>
 c0255dc:	2800      	cmp	r0, #0
 c0255de:	d1e0      	bne.n	c0255a2 <pk_get_rsapubkey+0x56>
    *p += len;
 c0255e0:	6823      	ldr	r3, [r4, #0]
 c0255e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    if( mbedtls_rsa_complete( rsa ) != 0 ||
 c0255e4:	4630      	mov	r0, r6
    *p += len;
 c0255e6:	4413      	add	r3, r2
 c0255e8:	6023      	str	r3, [r4, #0]
    if( mbedtls_rsa_complete( rsa ) != 0 ||
 c0255ea:	f004 fa47 	bl	c029a7c <mbedtls_rsa_complete>
 c0255ee:	2800      	cmp	r0, #0
 c0255f0:	d1d7      	bne.n	c0255a2 <pk_get_rsapubkey+0x56>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
 c0255f2:	4630      	mov	r0, r6
 c0255f4:	f004 fb9e 	bl	c029d34 <mbedtls_rsa_check_pubkey>
    if( mbedtls_rsa_complete( rsa ) != 0 ||
 c0255f8:	2800      	cmp	r0, #0
 c0255fa:	d1d2      	bne.n	c0255a2 <pk_get_rsapubkey+0x56>
    if( *p != end )
 c0255fc:	6823      	ldr	r3, [r4, #0]
 c0255fe:	42ab      	cmp	r3, r5
 c025600:	d0b7      	beq.n	c025572 <pk_get_rsapubkey+0x26>
 c025602:	e7b5      	b.n	c025570 <pk_get_rsapubkey+0x24>
 c025604:	ffffc49a 	.word	0xffffc49a
 c025608:	ffffc500 	.word	0xffffc500

0c02560c <pk_use_ecparams>:
{
 c02560c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( params->tag == MBEDTLS_ASN1_OID )
 c02560e:	6803      	ldr	r3, [r0, #0]
{
 c025610:	b0c1      	sub	sp, #260	; 0x104
    if( params->tag == MBEDTLS_ASN1_OID )
 c025612:	2b06      	cmp	r3, #6
{
 c025614:	4604      	mov	r4, r0
 c025616:	460d      	mov	r5, r1
    if( params->tag == MBEDTLS_ASN1_OID )
 c025618:	d110      	bne.n	c02563c <pk_use_ecparams+0x30>
        if( mbedtls_oid_get_ec_grp( params, &grp_id ) != 0 )
 c02561a:	a901      	add	r1, sp, #4
 c02561c:	f7ff f99c 	bl	c024958 <mbedtls_oid_get_ec_grp>
 c025620:	2800      	cmp	r0, #0
 c025622:	f040 8155 	bne.w	c0258d0 <pk_use_ecparams+0x2c4>
    if( grp->id != MBEDTLS_ECP_DP_NONE && grp->id != grp_id )
 c025626:	782b      	ldrb	r3, [r5, #0]
 c025628:	f89d 1004 	ldrb.w	r1, [sp, #4]
 c02562c:	2b00      	cmp	r3, #0
 c02562e:	f040 814a 	bne.w	c0258c6 <pk_use_ecparams+0x2ba>
    if( ( ret = mbedtls_ecp_group_load( grp, grp_id ) ) != 0 )
 c025632:	4628      	mov	r0, r5
 c025634:	f7fd fe18 	bl	c023268 <mbedtls_ecp_group_load>
 c025638:	4604      	mov	r4, r0
 c02563a:	e077      	b.n	c02572c <pk_use_ecparams+0x120>
    mbedtls_ecp_group_init( &grp );
 c02563c:	a802      	add	r0, sp, #8
 c02563e:	f7fc f9a1 	bl	c021984 <mbedtls_ecp_group_init>
    unsigned char *p = params->p;
 c025642:	68a6      	ldr	r6, [r4, #8]
    const unsigned char * const end = params->p + params->len;
 c025644:	6863      	ldr	r3, [r4, #4]
    unsigned char *p = params->p;
 c025646:	9600      	str	r6, [sp, #0]
    const unsigned char * const end = params->p + params->len;
 c025648:	441e      	add	r6, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &ver ) ) != 0 )
 c02564a:	aa21      	add	r2, sp, #132	; 0x84
 c02564c:	4631      	mov	r1, r6
 c02564e:	4668      	mov	r0, sp
 c025650:	f7f7 fcac 	bl	c01cfac <mbedtls_asn1_get_int>
 c025654:	2800      	cmp	r0, #0
 c025656:	d05e      	beq.n	c025716 <pk_use_ecparams+0x10a>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 c025658:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
    if( ( ret = pk_group_from_specified( params, &grp ) ) != 0 )
 c02565c:	2c00      	cmp	r4, #0
 c02565e:	d15f      	bne.n	c025720 <pk_use_ecparams+0x114>
    mbedtls_ecp_group_init( &ref );
 c025660:	a821      	add	r0, sp, #132	; 0x84
 c025662:	f7fc f98f 	bl	c021984 <mbedtls_ecp_group_init>
    for( id = mbedtls_ecp_grp_id_list(); *id != MBEDTLS_ECP_DP_NONE; id++ )
 c025666:	f7fc f94b 	bl	c021900 <mbedtls_ecp_grp_id_list>
 c02566a:	4606      	mov	r6, r0
 c02566c:	4637      	mov	r7, r6
 c02566e:	783b      	ldrb	r3, [r7, #0]
 c025670:	3601      	adds	r6, #1
 c025672:	2b00      	cmp	r3, #0
 c025674:	d041      	beq.n	c0256fa <pk_use_ecparams+0xee>
        mbedtls_ecp_group_free( &ref );
 c025676:	a821      	add	r0, sp, #132	; 0x84
 c025678:	f7fc f9b7 	bl	c0219ea <mbedtls_ecp_group_free>
        MBEDTLS_MPI_CHK( mbedtls_ecp_group_load( &ref, *id ) );
 c02567c:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 c025680:	a821      	add	r0, sp, #132	; 0x84
 c025682:	f7fd fdf1 	bl	c023268 <mbedtls_ecp_group_load>
 c025686:	4604      	mov	r4, r0
 c025688:	2800      	cmp	r0, #0
 c02568a:	d137      	bne.n	c0256fc <pk_use_ecparams+0xf0>
        if( grp->pbits == ref.pbits && grp->nbits == ref.nbits &&
 c02568c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 c02568e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 c025690:	429a      	cmp	r2, r3
 c025692:	d1eb      	bne.n	c02566c <pk_use_ecparams+0x60>
 c025694:	9a19      	ldr	r2, [sp, #100]	; 0x64
 c025696:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 c025698:	429a      	cmp	r2, r3
 c02569a:	d1e7      	bne.n	c02566c <pk_use_ecparams+0x60>
            mbedtls_mpi_cmp_mpi( &grp->P, &ref.P ) == 0 &&
 c02569c:	a922      	add	r1, sp, #136	; 0x88
 c02569e:	a803      	add	r0, sp, #12
 c0256a0:	f7f8 fd88 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
        if( grp->pbits == ref.pbits && grp->nbits == ref.nbits &&
 c0256a4:	2800      	cmp	r0, #0
 c0256a6:	d1e1      	bne.n	c02566c <pk_use_ecparams+0x60>
            mbedtls_mpi_cmp_mpi( &grp->A, &ref.A ) == 0 &&
 c0256a8:	a925      	add	r1, sp, #148	; 0x94
 c0256aa:	a806      	add	r0, sp, #24
 c0256ac:	f7f8 fd82 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
            mbedtls_mpi_cmp_mpi( &grp->P, &ref.P ) == 0 &&
 c0256b0:	2800      	cmp	r0, #0
 c0256b2:	d1db      	bne.n	c02566c <pk_use_ecparams+0x60>
            mbedtls_mpi_cmp_mpi( &grp->B, &ref.B ) == 0 &&
 c0256b4:	a928      	add	r1, sp, #160	; 0xa0
 c0256b6:	a809      	add	r0, sp, #36	; 0x24
 c0256b8:	f7f8 fd7c 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
            mbedtls_mpi_cmp_mpi( &grp->A, &ref.A ) == 0 &&
 c0256bc:	2800      	cmp	r0, #0
 c0256be:	d1d5      	bne.n	c02566c <pk_use_ecparams+0x60>
            mbedtls_mpi_cmp_mpi( &grp->N, &ref.N ) == 0 &&
 c0256c0:	a934      	add	r1, sp, #208	; 0xd0
 c0256c2:	a815      	add	r0, sp, #84	; 0x54
 c0256c4:	f7f8 fd76 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
            mbedtls_mpi_cmp_mpi( &grp->B, &ref.B ) == 0 &&
 c0256c8:	2800      	cmp	r0, #0
 c0256ca:	d1cf      	bne.n	c02566c <pk_use_ecparams+0x60>
            mbedtls_mpi_cmp_mpi( &grp->G.X, &ref.G.X ) == 0 &&
 c0256cc:	a92b      	add	r1, sp, #172	; 0xac
 c0256ce:	a80c      	add	r0, sp, #48	; 0x30
 c0256d0:	f7f8 fd70 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
            mbedtls_mpi_cmp_mpi( &grp->N, &ref.N ) == 0 &&
 c0256d4:	2800      	cmp	r0, #0
 c0256d6:	d1c9      	bne.n	c02566c <pk_use_ecparams+0x60>
            mbedtls_mpi_cmp_mpi( &grp->G.Z, &ref.G.Z ) == 0 &&
 c0256d8:	a931      	add	r1, sp, #196	; 0xc4
 c0256da:	a812      	add	r0, sp, #72	; 0x48
 c0256dc:	f7f8 fd6a 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
            mbedtls_mpi_cmp_mpi( &grp->G.X, &ref.G.X ) == 0 &&
 c0256e0:	2800      	cmp	r0, #0
 c0256e2:	d1c3      	bne.n	c02566c <pk_use_ecparams+0x60>
            mbedtls_mpi_get_bit( &grp->G.Y, 0 ) == mbedtls_mpi_get_bit( &ref.G.Y, 0 ) )
 c0256e4:	2100      	movs	r1, #0
 c0256e6:	a80f      	add	r0, sp, #60	; 0x3c
 c0256e8:	f7f8 fafc 	bl	c01dce4 <mbedtls_mpi_get_bit>
 c0256ec:	2100      	movs	r1, #0
 c0256ee:	4604      	mov	r4, r0
 c0256f0:	a82e      	add	r0, sp, #184	; 0xb8
 c0256f2:	f7f8 faf7 	bl	c01dce4 <mbedtls_mpi_get_bit>
            mbedtls_mpi_cmp_mpi( &grp->G.Z, &ref.G.Z ) == 0 &&
 c0256f6:	4284      	cmp	r4, r0
 c0256f8:	d1b8      	bne.n	c02566c <pk_use_ecparams+0x60>
        MBEDTLS_MPI_CHK( mbedtls_ecp_group_load( &ref, *id ) );
 c0256fa:	2400      	movs	r4, #0
    mbedtls_ecp_group_free( &ref );
 c0256fc:	a821      	add	r0, sp, #132	; 0x84
 c0256fe:	f7fc f974 	bl	c0219ea <mbedtls_ecp_group_free>
    *grp_id = *id;
 c025702:	783b      	ldrb	r3, [r7, #0]
 c025704:	f88d 3004 	strb.w	r3, [sp, #4]
    if( ret == 0 && *id == MBEDTLS_ECP_DP_NONE )
 c025708:	b954      	cbnz	r4, c025720 <pk_use_ecparams+0x114>
 c02570a:	783a      	ldrb	r2, [r7, #0]
        ret = MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE;
 c02570c:	4b71      	ldr	r3, [pc, #452]	; (c0258d4 <pk_use_ecparams+0x2c8>)
 c02570e:	2a00      	cmp	r2, #0
 c025710:	bf08      	it	eq
 c025712:	461c      	moveq	r4, r3
 c025714:	e004      	b.n	c025720 <pk_use_ecparams+0x114>
    if( ver < 1 || ver > 3 )
 c025716:	9b21      	ldr	r3, [sp, #132]	; 0x84
 c025718:	3b01      	subs	r3, #1
 c02571a:	2b02      	cmp	r3, #2
 c02571c:	d909      	bls.n	c025732 <pk_use_ecparams+0x126>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 c02571e:	4c6e      	ldr	r4, [pc, #440]	; (c0258d8 <pk_use_ecparams+0x2cc>)
    mbedtls_ecp_group_free( &grp );
 c025720:	a802      	add	r0, sp, #8
 c025722:	f7fc f962 	bl	c0219ea <mbedtls_ecp_group_free>
        if( ( ret = pk_group_id_from_specified( params, &grp_id ) ) != 0 )
 c025726:	2c00      	cmp	r4, #0
 c025728:	f43f af7d 	beq.w	c025626 <pk_use_ecparams+0x1a>
}
 c02572c:	4620      	mov	r0, r4
 c02572e:	b041      	add	sp, #260	; 0x104
 c025730:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c025732:	2330      	movs	r3, #48	; 0x30
 c025734:	aa01      	add	r2, sp, #4
 c025736:	4631      	mov	r1, r6
 c025738:	4668      	mov	r0, sp
 c02573a:	f7f7 fc23 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c02573e:	4604      	mov	r4, r0
 c025740:	2800      	cmp	r0, #0
 c025742:	d1ed      	bne.n	c025720 <pk_use_ecparams+0x114>
    end_field = p + len;
 c025744:	e9dd 7300 	ldrd	r7, r3, [sp]
 c025748:	441f      	add	r7, r3
    if( ( ret = mbedtls_asn1_get_tag( &p, end_field, &len, MBEDTLS_ASN1_OID ) ) != 0 )
 c02574a:	aa01      	add	r2, sp, #4
 c02574c:	2306      	movs	r3, #6
 c02574e:	4639      	mov	r1, r7
 c025750:	4668      	mov	r0, sp
 c025752:	f7f7 fc17 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c025756:	4604      	mov	r4, r0
 c025758:	2800      	cmp	r0, #0
 c02575a:	d1e1      	bne.n	c025720 <pk_use_ecparams+0x114>
    if( len != MBEDTLS_OID_SIZE( MBEDTLS_OID_ANSI_X9_62_PRIME_FIELD ) ||
 c02575c:	9a01      	ldr	r2, [sp, #4]
 c02575e:	2a07      	cmp	r2, #7
 c025760:	f040 80af 	bne.w	c0258c2 <pk_use_ecparams+0x2b6>
        memcmp( p, MBEDTLS_OID_ANSI_X9_62_PRIME_FIELD, len ) != 0 )
 c025764:	9c00      	ldr	r4, [sp, #0]
 c025766:	495d      	ldr	r1, [pc, #372]	; (c0258dc <pk_use_ecparams+0x2d0>)
 c025768:	4620      	mov	r0, r4
 c02576a:	f7ef f8f9 	bl	c014960 <memcmp>
    if( len != MBEDTLS_OID_SIZE( MBEDTLS_OID_ANSI_X9_62_PRIME_FIELD ) ||
 c02576e:	2800      	cmp	r0, #0
 c025770:	f040 80a7 	bne.w	c0258c2 <pk_use_ecparams+0x2b6>
    p += len;
 c025774:	3407      	adds	r4, #7
    if( ( ret = mbedtls_asn1_get_mpi( &p, end_field, &grp->P ) ) != 0 )
 c025776:	aa03      	add	r2, sp, #12
 c025778:	4639      	mov	r1, r7
 c02577a:	4668      	mov	r0, sp
    p += len;
 c02577c:	9400      	str	r4, [sp, #0]
    if( ( ret = mbedtls_asn1_get_mpi( &p, end_field, &grp->P ) ) != 0 )
 c02577e:	f7f7 fc39 	bl	c01cff4 <mbedtls_asn1_get_mpi>
 c025782:	2800      	cmp	r0, #0
 c025784:	f47f af68 	bne.w	c025658 <pk_use_ecparams+0x4c>
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 c025788:	a803      	add	r0, sp, #12
 c02578a:	f7f8 faff 	bl	c01dd8c <mbedtls_mpi_bitlen>
    if( p != end_field )
 c02578e:	9b00      	ldr	r3, [sp, #0]
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 c025790:	9018      	str	r0, [sp, #96]	; 0x60
    if( p != end_field )
 c025792:	429f      	cmp	r7, r3
 c025794:	f040 8093 	bne.w	c0258be <pk_use_ecparams+0x2b2>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c025798:	2330      	movs	r3, #48	; 0x30
 c02579a:	aa01      	add	r2, sp, #4
 c02579c:	4631      	mov	r1, r6
 c02579e:	4668      	mov	r0, sp
 c0257a0:	f7f7 fbf0 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c0257a4:	4604      	mov	r4, r0
 c0257a6:	2800      	cmp	r0, #0
 c0257a8:	d1ba      	bne.n	c025720 <pk_use_ecparams+0x114>
    end_curve = p + len;
 c0257aa:	e9dd 4300 	ldrd	r4, r3, [sp]
 c0257ae:	441c      	add	r4, r3
    if( ( ret = mbedtls_asn1_get_tag( &p, end_curve, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 ||
 c0257b0:	2304      	movs	r3, #4
 c0257b2:	4621      	mov	r1, r4
 c0257b4:	eb0d 0203 	add.w	r2, sp, r3
 c0257b8:	4668      	mov	r0, sp
 c0257ba:	f7f7 fbe3 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c0257be:	2800      	cmp	r0, #0
 c0257c0:	f47f af4a 	bne.w	c025658 <pk_use_ecparams+0x4c>
 c0257c4:	e9dd 1200 	ldrd	r1, r2, [sp]
 c0257c8:	a806      	add	r0, sp, #24
 c0257ca:	f7f8 fb39 	bl	c01de40 <mbedtls_mpi_read_binary>
 c0257ce:	2800      	cmp	r0, #0
 c0257d0:	f47f af42 	bne.w	c025658 <pk_use_ecparams+0x4c>
    p += len;
 c0257d4:	e9dd 3200 	ldrd	r3, r2, [sp]
 c0257d8:	4413      	add	r3, r2
 c0257da:	9300      	str	r3, [sp, #0]
    if( ( ret = mbedtls_asn1_get_tag( &p, end_curve, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 ||
 c0257dc:	2304      	movs	r3, #4
 c0257de:	4621      	mov	r1, r4
 c0257e0:	eb0d 0203 	add.w	r2, sp, r3
 c0257e4:	4668      	mov	r0, sp
 c0257e6:	f7f7 fbcd 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c0257ea:	2800      	cmp	r0, #0
 c0257ec:	f47f af34 	bne.w	c025658 <pk_use_ecparams+0x4c>
 c0257f0:	e9dd 1200 	ldrd	r1, r2, [sp]
 c0257f4:	a809      	add	r0, sp, #36	; 0x24
 c0257f6:	f7f8 fb23 	bl	c01de40 <mbedtls_mpi_read_binary>
 c0257fa:	2800      	cmp	r0, #0
 c0257fc:	f47f af2c 	bne.w	c025658 <pk_use_ecparams+0x4c>
    p += len;
 c025800:	e9dd 3200 	ldrd	r3, r2, [sp]
 c025804:	4413      	add	r3, r2
 c025806:	9300      	str	r3, [sp, #0]
    if( ( ret = mbedtls_asn1_get_tag( &p, end_curve, &len, MBEDTLS_ASN1_BIT_STRING ) ) == 0 )
 c025808:	aa01      	add	r2, sp, #4
 c02580a:	2303      	movs	r3, #3
 c02580c:	4621      	mov	r1, r4
 c02580e:	4668      	mov	r0, sp
 c025810:	f7f7 fbb8 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c025814:	b918      	cbnz	r0, c02581e <pk_use_ecparams+0x212>
        p += len;
 c025816:	e9dd 3200 	ldrd	r3, r2, [sp]
 c02581a:	4413      	add	r3, r2
 c02581c:	9300      	str	r3, [sp, #0]
    if( p != end_curve )
 c02581e:	9b00      	ldr	r3, [sp, #0]
 c025820:	429c      	cmp	r4, r3
 c025822:	d14c      	bne.n	c0258be <pk_use_ecparams+0x2b2>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 c025824:	2304      	movs	r3, #4
 c025826:	4631      	mov	r1, r6
 c025828:	eb0d 0203 	add.w	r2, sp, r3
 c02582c:	4668      	mov	r0, sp
 c02582e:	f7f7 fba9 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c025832:	2800      	cmp	r0, #0
 c025834:	f47f af10 	bne.w	c025658 <pk_use_ecparams+0x4c>
    if( ( ret = mbedtls_ecp_point_read_binary( grp, &grp->G,
 c025838:	e9dd 2300 	ldrd	r2, r3, [sp]
 c02583c:	a90c      	add	r1, sp, #48	; 0x30
 c02583e:	a802      	add	r0, sp, #8
 c025840:	f7fc fd22 	bl	c022288 <mbedtls_ecp_point_read_binary>
 c025844:	b980      	cbnz	r0, c025868 <pk_use_ecparams+0x25c>
    p += len;
 c025846:	e9dd 3200 	ldrd	r3, r2, [sp]
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &grp->N ) ) != 0 )
 c02584a:	4631      	mov	r1, r6
    p += len;
 c02584c:	4413      	add	r3, r2
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &grp->N ) ) != 0 )
 c02584e:	4668      	mov	r0, sp
 c025850:	aa15      	add	r2, sp, #84	; 0x54
    p += len;
 c025852:	9300      	str	r3, [sp, #0]
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &grp->N ) ) != 0 )
 c025854:	f7f7 fbce 	bl	c01cff4 <mbedtls_asn1_get_mpi>
 c025858:	2800      	cmp	r0, #0
 c02585a:	f47f aefd 	bne.w	c025658 <pk_use_ecparams+0x4c>
    grp->nbits = mbedtls_mpi_bitlen( &grp->N );
 c02585e:	a815      	add	r0, sp, #84	; 0x54
 c025860:	f7f8 fa94 	bl	c01dd8c <mbedtls_mpi_bitlen>
 c025864:	9019      	str	r0, [sp, #100]	; 0x64
 c025866:	e6fb      	b.n	c025660 <pk_use_ecparams+0x54>
        if( ret != MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE ||
 c025868:	f510 4f9d 	cmn.w	r0, #20096	; 0x4e80
 c02586c:	f47f af57 	bne.w	c02571e <pk_use_ecparams+0x112>
            ( p[0] != 0x02 && p[0] != 0x03 ) ||
 c025870:	9b00      	ldr	r3, [sp, #0]
 c025872:	781b      	ldrb	r3, [r3, #0]
        if( ret != MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE ||
 c025874:	3b02      	subs	r3, #2
 c025876:	2b01      	cmp	r3, #1
 c025878:	f63f af51 	bhi.w	c02571e <pk_use_ecparams+0x112>
            len != mbedtls_mpi_size( &grp->P ) + 1 ||
 c02587c:	a803      	add	r0, sp, #12
 c02587e:	f7f8 faa5 	bl	c01ddcc <mbedtls_mpi_size>
            ( p[0] != 0x02 && p[0] != 0x03 ) ||
 c025882:	9b01      	ldr	r3, [sp, #4]
            len != mbedtls_mpi_size( &grp->P ) + 1 ||
 c025884:	1c41      	adds	r1, r0, #1
            ( p[0] != 0x02 && p[0] != 0x03 ) ||
 c025886:	4299      	cmp	r1, r3
            len != mbedtls_mpi_size( &grp->P ) + 1 ||
 c025888:	4602      	mov	r2, r0
            ( p[0] != 0x02 && p[0] != 0x03 ) ||
 c02588a:	f47f af48 	bne.w	c02571e <pk_use_ecparams+0x112>
            mbedtls_mpi_read_binary( &grp->G.X, p + 1, len - 1 ) != 0 ||
 c02588e:	9900      	ldr	r1, [sp, #0]
 c025890:	a80c      	add	r0, sp, #48	; 0x30
 c025892:	3101      	adds	r1, #1
 c025894:	f7f8 fad4 	bl	c01de40 <mbedtls_mpi_read_binary>
            len != mbedtls_mpi_size( &grp->P ) + 1 ||
 c025898:	2800      	cmp	r0, #0
 c02589a:	f47f af40 	bne.w	c02571e <pk_use_ecparams+0x112>
            mbedtls_mpi_lset( &grp->G.Y, p[0] - 2 ) != 0 ||
 c02589e:	9b00      	ldr	r3, [sp, #0]
 c0258a0:	a80f      	add	r0, sp, #60	; 0x3c
 c0258a2:	7819      	ldrb	r1, [r3, #0]
 c0258a4:	3902      	subs	r1, #2
 c0258a6:	f7f8 fa01 	bl	c01dcac <mbedtls_mpi_lset>
            mbedtls_mpi_read_binary( &grp->G.X, p + 1, len - 1 ) != 0 ||
 c0258aa:	2800      	cmp	r0, #0
 c0258ac:	f47f af37 	bne.w	c02571e <pk_use_ecparams+0x112>
            mbedtls_mpi_lset( &grp->G.Z, 1 ) != 0 )
 c0258b0:	2101      	movs	r1, #1
 c0258b2:	a812      	add	r0, sp, #72	; 0x48
 c0258b4:	f7f8 f9fa 	bl	c01dcac <mbedtls_mpi_lset>
            mbedtls_mpi_lset( &grp->G.Y, p[0] - 2 ) != 0 ||
 c0258b8:	2800      	cmp	r0, #0
 c0258ba:	d0c4      	beq.n	c025846 <pk_use_ecparams+0x23a>
 c0258bc:	e72f      	b.n	c02571e <pk_use_ecparams+0x112>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 c0258be:	4c08      	ldr	r4, [pc, #32]	; (c0258e0 <pk_use_ecparams+0x2d4>)
 c0258c0:	e72e      	b.n	c025720 <pk_use_ecparams+0x114>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
 c0258c2:	4c08      	ldr	r4, [pc, #32]	; (c0258e4 <pk_use_ecparams+0x2d8>)
 c0258c4:	e72c      	b.n	c025720 <pk_use_ecparams+0x114>
    if( grp->id != MBEDTLS_ECP_DP_NONE && grp->id != grp_id )
 c0258c6:	428b      	cmp	r3, r1
 c0258c8:	f43f aeb3 	beq.w	c025632 <pk_use_ecparams+0x26>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 c0258cc:	4c02      	ldr	r4, [pc, #8]	; (c0258d8 <pk_use_ecparams+0x2cc>)
 c0258ce:	e72d      	b.n	c02572c <pk_use_ecparams+0x120>
            return( MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE );
 c0258d0:	4c05      	ldr	r4, [pc, #20]	; (c0258e8 <pk_use_ecparams+0x2dc>)
 c0258d2:	e72b      	b.n	c02572c <pk_use_ecparams+0x120>
 c0258d4:	ffffb180 	.word	0xffffb180
 c0258d8:	ffffc300 	.word	0xffffc300
 c0258dc:	0c034f0c 	.word	0x0c034f0c
 c0258e0:	ffffc29a 	.word	0xffffc29a
 c0258e4:	ffffc680 	.word	0xffffc680
 c0258e8:	ffffc600 	.word	0xffffc600

0c0258ec <pk_parse_key_pkcs1_der>:
 * Parse a PKCS#1 encoded private RSA key
 */
static int pk_parse_key_pkcs1_der( mbedtls_rsa_context *rsa,
                                   const unsigned char *key,
                                   size_t keylen )
{
 c0258ec:	b570      	push	{r4, r5, r6, lr}
 c0258ee:	460c      	mov	r4, r1
 c0258f0:	4615      	mov	r5, r2
 c0258f2:	b08e      	sub	sp, #56	; 0x38
 c0258f4:	4606      	mov	r6, r0
    int ret, version;
    size_t len;
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );
 c0258f6:	a80b      	add	r0, sp, #44	; 0x2c
 c0258f8:	f7f8 f8aa 	bl	c01da50 <mbedtls_mpi_init>
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c0258fc:	2330      	movs	r3, #48	; 0x30
 c0258fe:	aa09      	add	r2, sp, #36	; 0x24
 c025900:	1961      	adds	r1, r4, r5
 c025902:	a80a      	add	r0, sp, #40	; 0x28
    p = (unsigned char *) key;
 c025904:	940a      	str	r4, [sp, #40]	; 0x28
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c025906:	f7f7 fb3d 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c02590a:	b120      	cbz	r0, c025916 <pk_parse_key_pkcs1_der+0x2a>

    end = p + len;

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 c02590c:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00

        mbedtls_rsa_free( rsa );
    }

    return( ret );
}
 c025910:	4620      	mov	r0, r4
 c025912:	b00e      	add	sp, #56	; 0x38
 c025914:	bd70      	pop	{r4, r5, r6, pc}
    end = p + len;
 c025916:	e9dd 3509 	ldrd	r3, r5, [sp, #36]	; 0x24
 c02591a:	441d      	add	r5, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 c02591c:	aa08      	add	r2, sp, #32
 c02591e:	4629      	mov	r1, r5
 c025920:	a80a      	add	r0, sp, #40	; 0x28
 c025922:	f7f7 fb43 	bl	c01cfac <mbedtls_asn1_get_int>
 c025926:	2800      	cmp	r0, #0
 c025928:	d1f0      	bne.n	c02590c <pk_parse_key_pkcs1_der+0x20>
    if( version != 0 )
 c02592a:	9b08      	ldr	r3, [sp, #32]
 c02592c:	2b00      	cmp	r3, #0
 c02592e:	f040 80ca 	bne.w	c025ac6 <pk_parse_key_pkcs1_der+0x1da>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c025932:	2302      	movs	r3, #2
 c025934:	aa09      	add	r2, sp, #36	; 0x24
 c025936:	4629      	mov	r1, r5
 c025938:	a80a      	add	r0, sp, #40	; 0x28
 c02593a:	f7f7 fb23 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c02593e:	4604      	mov	r4, r0
 c025940:	2800      	cmp	r0, #0
 c025942:	f040 80af 	bne.w	c025aa4 <pk_parse_key_pkcs1_der+0x1b8>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 c025946:	e9dd 2109 	ldrd	r2, r1, [sp, #36]	; 0x24
 c02594a:	e9cd 0005 	strd	r0, r0, [sp, #20]
 c02594e:	e9cd 0003 	strd	r0, r0, [sp, #12]
 c025952:	e9cd 0001 	strd	r0, r0, [sp, #4]
 c025956:	9000      	str	r0, [sp, #0]
 c025958:	4603      	mov	r3, r0
 c02595a:	4630      	mov	r0, r6
 c02595c:	f004 f84c 	bl	c0299f8 <mbedtls_rsa_import_raw>
 c025960:	4604      	mov	r4, r0
 c025962:	2800      	cmp	r0, #0
 c025964:	f040 809e 	bne.w	c025aa4 <pk_parse_key_pkcs1_der+0x1b8>
    p += len;
 c025968:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 c02596c:	4413      	add	r3, r2
 c02596e:	930a      	str	r3, [sp, #40]	; 0x28
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c025970:	aa09      	add	r2, sp, #36	; 0x24
 c025972:	2302      	movs	r3, #2
 c025974:	4629      	mov	r1, r5
 c025976:	a80a      	add	r0, sp, #40	; 0x28
 c025978:	f7f7 fb04 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c02597c:	4604      	mov	r4, r0
 c02597e:	2800      	cmp	r0, #0
 c025980:	f040 8090 	bne.w	c025aa4 <pk_parse_key_pkcs1_der+0x1b8>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 c025984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c025986:	e9cd 0002 	strd	r0, r0, [sp, #8]
 c02598a:	9306      	str	r3, [sp, #24]
 c02598c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c02598e:	e9cd 0000 	strd	r0, r0, [sp]
 c025992:	e9cd 0304 	strd	r0, r3, [sp, #16]
 c025996:	4602      	mov	r2, r0
 c025998:	4603      	mov	r3, r0
 c02599a:	4601      	mov	r1, r0
 c02599c:	4630      	mov	r0, r6
 c02599e:	f004 f82b 	bl	c0299f8 <mbedtls_rsa_import_raw>
 c0259a2:	4604      	mov	r4, r0
 c0259a4:	2800      	cmp	r0, #0
 c0259a6:	d17d      	bne.n	c025aa4 <pk_parse_key_pkcs1_der+0x1b8>
    p += len;
 c0259a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 c0259ac:	4413      	add	r3, r2
 c0259ae:	930a      	str	r3, [sp, #40]	; 0x28
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c0259b0:	aa09      	add	r2, sp, #36	; 0x24
 c0259b2:	2302      	movs	r3, #2
 c0259b4:	4629      	mov	r1, r5
 c0259b6:	a80a      	add	r0, sp, #40	; 0x28
 c0259b8:	f7f7 fae4 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c0259bc:	4604      	mov	r4, r0
 c0259be:	2800      	cmp	r0, #0
 c0259c0:	d170      	bne.n	c025aa4 <pk_parse_key_pkcs1_der+0x1b8>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 c0259c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c0259c4:	e9cd 0005 	strd	r0, r0, [sp, #20]
 c0259c8:	9304      	str	r3, [sp, #16]
 c0259ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c0259cc:	e9cd 0000 	strd	r0, r0, [sp]
 c0259d0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 c0259d4:	4602      	mov	r2, r0
 c0259d6:	4603      	mov	r3, r0
 c0259d8:	4601      	mov	r1, r0
 c0259da:	4630      	mov	r0, r6
 c0259dc:	f004 f80c 	bl	c0299f8 <mbedtls_rsa_import_raw>
 c0259e0:	4604      	mov	r4, r0
 c0259e2:	2800      	cmp	r0, #0
 c0259e4:	d15e      	bne.n	c025aa4 <pk_parse_key_pkcs1_der+0x1b8>
    p += len;
 c0259e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 c0259ea:	4413      	add	r3, r2
 c0259ec:	930a      	str	r3, [sp, #40]	; 0x28
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c0259ee:	aa09      	add	r2, sp, #36	; 0x24
 c0259f0:	2302      	movs	r3, #2
 c0259f2:	4629      	mov	r1, r5
 c0259f4:	a80a      	add	r0, sp, #40	; 0x28
 c0259f6:	f7f7 fac5 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c0259fa:	4604      	mov	r4, r0
 c0259fc:	2800      	cmp	r0, #0
 c0259fe:	d151      	bne.n	c025aa4 <pk_parse_key_pkcs1_der+0x1b8>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 c025a00:	2200      	movs	r2, #0
 c025a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c025a04:	e9cd 2205 	strd	r2, r2, [sp, #20]
 c025a08:	9300      	str	r3, [sp, #0]
 c025a0a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 c025a0e:	e9cd 2201 	strd	r2, r2, [sp, #4]
 c025a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c025a14:	4611      	mov	r1, r2
 c025a16:	4630      	mov	r0, r6
 c025a18:	f003 ffee 	bl	c0299f8 <mbedtls_rsa_import_raw>
 c025a1c:	4604      	mov	r4, r0
 c025a1e:	2800      	cmp	r0, #0
 c025a20:	d140      	bne.n	c025aa4 <pk_parse_key_pkcs1_der+0x1b8>
    p += len;
 c025a22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 c025a26:	4413      	add	r3, r2
 c025a28:	930a      	str	r3, [sp, #40]	; 0x28
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c025a2a:	aa09      	add	r2, sp, #36	; 0x24
 c025a2c:	2302      	movs	r3, #2
 c025a2e:	4629      	mov	r1, r5
 c025a30:	a80a      	add	r0, sp, #40	; 0x28
 c025a32:	f7f7 faa7 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c025a36:	4604      	mov	r4, r0
 c025a38:	2800      	cmp	r0, #0
 c025a3a:	d133      	bne.n	c025aa4 <pk_parse_key_pkcs1_der+0x1b8>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 c025a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c025a3e:	e9cd 0005 	strd	r0, r0, [sp, #20]
 c025a42:	9302      	str	r3, [sp, #8]
 c025a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c025a46:	e9cd 0003 	strd	r0, r0, [sp, #12]
 c025a4a:	e9cd 0300 	strd	r0, r3, [sp]
 c025a4e:	4602      	mov	r2, r0
 c025a50:	4603      	mov	r3, r0
 c025a52:	4601      	mov	r1, r0
 c025a54:	4630      	mov	r0, r6
 c025a56:	f003 ffcf 	bl	c0299f8 <mbedtls_rsa_import_raw>
 c025a5a:	4604      	mov	r4, r0
 c025a5c:	bb10      	cbnz	r0, c025aa4 <pk_parse_key_pkcs1_der+0x1b8>
    p += len;
 c025a5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
 c025a62:	4630      	mov	r0, r6
    p += len;
 c025a64:	4413      	add	r3, r2
 c025a66:	930a      	str	r3, [sp, #40]	; 0x28
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
 c025a68:	f004 f808 	bl	c029a7c <mbedtls_rsa_complete>
 c025a6c:	4604      	mov	r4, r0
 c025a6e:	b9c8      	cbnz	r0, c025aa4 <pk_parse_key_pkcs1_der+0x1b8>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 c025a70:	aa0b      	add	r2, sp, #44	; 0x2c
 c025a72:	4629      	mov	r1, r5
 c025a74:	a80a      	add	r0, sp, #40	; 0x28
 c025a76:	f7f7 fabd 	bl	c01cff4 <mbedtls_asn1_get_mpi>
 c025a7a:	4604      	mov	r4, r0
 c025a7c:	b990      	cbnz	r0, c025aa4 <pk_parse_key_pkcs1_der+0x1b8>
 c025a7e:	aa0b      	add	r2, sp, #44	; 0x2c
 c025a80:	4629      	mov	r1, r5
 c025a82:	a80a      	add	r0, sp, #40	; 0x28
 c025a84:	f7f7 fab6 	bl	c01cff4 <mbedtls_asn1_get_mpi>
 c025a88:	4604      	mov	r4, r0
 c025a8a:	b958      	cbnz	r0, c025aa4 <pk_parse_key_pkcs1_der+0x1b8>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 c025a8c:	aa0b      	add	r2, sp, #44	; 0x2c
 c025a8e:	4629      	mov	r1, r5
 c025a90:	a80a      	add	r0, sp, #40	; 0x28
 c025a92:	f7f7 faaf 	bl	c01cff4 <mbedtls_asn1_get_mpi>
 c025a96:	4604      	mov	r4, r0
 c025a98:	b920      	cbnz	r0, c025aa4 <pk_parse_key_pkcs1_der+0x1b8>
        ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 c025a9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 c025a9c:	4b0b      	ldr	r3, [pc, #44]	; (c025acc <pk_parse_key_pkcs1_der+0x1e0>)
 c025a9e:	42aa      	cmp	r2, r5
 c025aa0:	bf18      	it	ne
 c025aa2:	461c      	movne	r4, r3
    mbedtls_mpi_free( &T );
 c025aa4:	a80b      	add	r0, sp, #44	; 0x2c
 c025aa6:	f7f7 ffd9 	bl	c01da5c <mbedtls_mpi_free>
    if( ret != 0 )
 c025aaa:	2c00      	cmp	r4, #0
 c025aac:	f43f af30 	beq.w	c025910 <pk_parse_key_pkcs1_der+0x24>
        if( ( ret & 0xff80 ) == 0 )
 c025ab0:	f64f 7380 	movw	r3, #65408	; 0xff80
        mbedtls_rsa_free( rsa );
 c025ab4:	4630      	mov	r0, r6
        if( ( ret & 0xff80 ) == 0 )
 c025ab6:	421c      	tst	r4, r3
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret;
 c025ab8:	bf0c      	ite	eq
 c025aba:	f5a4 5474 	subeq.w	r4, r4, #15616	; 0x3d00
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT;
 c025abe:	4c04      	ldrne	r4, [pc, #16]	; (c025ad0 <pk_parse_key_pkcs1_der+0x1e4>)
        mbedtls_rsa_free( rsa );
 c025ac0:	f005 f948 	bl	c02ad54 <mbedtls_rsa_free>
 c025ac4:	e724      	b.n	c025910 <pk_parse_key_pkcs1_der+0x24>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
 c025ac6:	4c03      	ldr	r4, [pc, #12]	; (c025ad4 <pk_parse_key_pkcs1_der+0x1e8>)
 c025ac8:	e722      	b.n	c025910 <pk_parse_key_pkcs1_der+0x24>
 c025aca:	bf00      	nop
 c025acc:	ffffc29a 	.word	0xffffc29a
 c025ad0:	ffffc300 	.word	0xffffc300
 c025ad4:	ffffc280 	.word	0xffffc280

0c025ad8 <pk_parse_key_sec1_der>:
 * Parse a SEC1 encoded private EC key
 */
static int pk_parse_key_sec1_der( mbedtls_ecp_keypair *eck,
                                  const unsigned char *key,
                                  size_t keylen )
{
 c025ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 c025ada:	b089      	sub	sp, #36	; 0x24
 c025adc:	4605      	mov	r5, r0
    int ret;
    int version, pubkey_done;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
 c025ade:	9104      	str	r1, [sp, #16]
     *      privateKey     OCTET STRING,
     *      parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,
     *      publicKey  [1] BIT STRING OPTIONAL
     *    }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c025ae0:	2330      	movs	r3, #48	; 0x30
    unsigned char *end = p + keylen;
 c025ae2:	4411      	add	r1, r2
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c025ae4:	a804      	add	r0, sp, #16
 c025ae6:	aa03      	add	r2, sp, #12
 c025ae8:	f7f7 fa4c 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c025aec:	b120      	cbz	r0, c025af8 <pk_parse_key_sec1_der+0x20>
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 1 ) ) == 0 )
        {
            end2 = p + len;

            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 c025aee:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
        mbedtls_ecp_keypair_free( eck );
        return( ret );
    }

    return( 0 );
}
 c025af2:	4620      	mov	r0, r4
 c025af4:	b009      	add	sp, #36	; 0x24
 c025af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    end = p + len;
 c025af8:	e9dd 3703 	ldrd	r3, r7, [sp, #12]
 c025afc:	441f      	add	r7, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 c025afe:	aa02      	add	r2, sp, #8
 c025b00:	4639      	mov	r1, r7
 c025b02:	a804      	add	r0, sp, #16
 c025b04:	f7f7 fa52 	bl	c01cfac <mbedtls_asn1_get_int>
 c025b08:	2800      	cmp	r0, #0
 c025b0a:	d1f0      	bne.n	c025aee <pk_parse_key_sec1_der+0x16>
    if( version != 1 )
 c025b0c:	9b02      	ldr	r3, [sp, #8]
 c025b0e:	2b01      	cmp	r3, #1
 c025b10:	f040 809b 	bne.w	c025c4a <pk_parse_key_sec1_der+0x172>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 c025b14:	2304      	movs	r3, #4
 c025b16:	aa03      	add	r2, sp, #12
 c025b18:	4639      	mov	r1, r7
 c025b1a:	a804      	add	r0, sp, #16
 c025b1c:	f7f7 fa32 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c025b20:	2800      	cmp	r0, #0
 c025b22:	d1e4      	bne.n	c025aee <pk_parse_key_sec1_der+0x16>
    if( ( ret = mbedtls_mpi_read_binary( &eck->d, p, len ) ) != 0 )
 c025b24:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 c025b28:	f105 067c 	add.w	r6, r5, #124	; 0x7c
 c025b2c:	4630      	mov	r0, r6
 c025b2e:	f7f8 f987 	bl	c01de40 <mbedtls_mpi_read_binary>
 c025b32:	4604      	mov	r4, r0
 c025b34:	b128      	cbz	r0, c025b42 <pk_parse_key_sec1_der+0x6a>
        mbedtls_ecp_keypair_free( eck );
 c025b36:	4628      	mov	r0, r5
 c025b38:	f7fb ff88 	bl	c021a4c <mbedtls_ecp_keypair_free>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 c025b3c:	f5a4 5474 	sub.w	r4, r4, #15616	; 0x3d00
 c025b40:	e7d7      	b.n	c025af2 <pk_parse_key_sec1_der+0x1a>
    p += len;
 c025b42:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 c025b46:	4413      	add	r3, r2
    if( p != end )
 c025b48:	42bb      	cmp	r3, r7
    p += len;
 c025b4a:	9304      	str	r3, [sp, #16]
    if( p != end )
 c025b4c:	d036      	beq.n	c025bbc <pk_parse_key_sec1_der+0xe4>
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c025b4e:	23a0      	movs	r3, #160	; 0xa0
 c025b50:	aa03      	add	r2, sp, #12
 c025b52:	4639      	mov	r1, r7
 c025b54:	a804      	add	r0, sp, #16
 c025b56:	f7f7 fa15 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c025b5a:	4604      	mov	r4, r0
 c025b5c:	bb58      	cbnz	r0, c025bb6 <pk_parse_key_sec1_der+0xde>
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
 c025b5e:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
    if ( end - *p < 1 )
 c025b62:	2a00      	cmp	r2, #0
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
 c025b64:	eb03 0402 	add.w	r4, r3, r2
    if ( end - *p < 1 )
 c025b68:	dd21      	ble.n	c025bae <pk_parse_key_sec1_der+0xd6>
    params->tag = **p;
 c025b6a:	781b      	ldrb	r3, [r3, #0]
    if( params->tag != MBEDTLS_ASN1_OID
 c025b6c:	2b06      	cmp	r3, #6
    params->tag = **p;
 c025b6e:	9305      	str	r3, [sp, #20]
    if( params->tag != MBEDTLS_ASN1_OID
 c025b70:	d001      	beq.n	c025b76 <pk_parse_key_sec1_der+0x9e>
            && params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE )
 c025b72:	2b30      	cmp	r3, #48	; 0x30
 c025b74:	d11d      	bne.n	c025bb2 <pk_parse_key_sec1_der+0xda>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &params->len, params->tag ) ) != 0 )
 c025b76:	aa06      	add	r2, sp, #24
 c025b78:	4621      	mov	r1, r4
 c025b7a:	a804      	add	r0, sp, #16
 c025b7c:	f7f7 fa02 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c025b80:	b160      	cbz	r0, c025b9c <pk_parse_key_sec1_der+0xc4>
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
 c025b82:	f5b0 5474 	subs.w	r4, r0, #15616	; 0x3d00
 c025b86:	d105      	bne.n	c025b94 <pk_parse_key_sec1_der+0xbc>
 c025b88:	4629      	mov	r1, r5
 c025b8a:	a805      	add	r0, sp, #20
 c025b8c:	f7ff fd3e 	bl	c02560c <pk_use_ecparams>
 c025b90:	4604      	mov	r4, r0
 c025b92:	b198      	cbz	r0, c025bbc <pk_parse_key_sec1_der+0xe4>
        mbedtls_ecp_keypair_free( eck );
 c025b94:	4628      	mov	r0, r5
 c025b96:	f7fb ff59 	bl	c021a4c <mbedtls_ecp_keypair_free>
        return( ret );
 c025b9a:	e7aa      	b.n	c025af2 <pk_parse_key_sec1_der+0x1a>
    params->p = *p;
 c025b9c:	9b04      	ldr	r3, [sp, #16]
    *p += params->len;
 c025b9e:	9a06      	ldr	r2, [sp, #24]
    params->p = *p;
 c025ba0:	9307      	str	r3, [sp, #28]
    *p += params->len;
 c025ba2:	4413      	add	r3, r2
    if( *p != end )
 c025ba4:	429c      	cmp	r4, r3
    *p += params->len;
 c025ba6:	9304      	str	r3, [sp, #16]
    if( *p != end )
 c025ba8:	d0ee      	beq.n	c025b88 <pk_parse_key_sec1_der+0xb0>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 c025baa:	4c2a      	ldr	r4, [pc, #168]	; (c025c54 <pk_parse_key_sec1_der+0x17c>)
 c025bac:	e7f2      	b.n	c025b94 <pk_parse_key_sec1_der+0xbc>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 c025bae:	4c2a      	ldr	r4, [pc, #168]	; (c025c58 <pk_parse_key_sec1_der+0x180>)
 c025bb0:	e7f0      	b.n	c025b94 <pk_parse_key_sec1_der+0xbc>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 c025bb2:	4c2a      	ldr	r4, [pc, #168]	; (c025c5c <pk_parse_key_sec1_der+0x184>)
 c025bb4:	e7ee      	b.n	c025b94 <pk_parse_key_sec1_der+0xbc>
        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 c025bb6:	f110 0f62 	cmn.w	r0, #98	; 0x62
 c025bba:	d1bc      	bne.n	c025b36 <pk_parse_key_sec1_der+0x5e>
    if( p != end )
 c025bbc:	9b04      	ldr	r3, [sp, #16]
 c025bbe:	42bb      	cmp	r3, r7
 c025bc0:	d02b      	beq.n	c025c1a <pk_parse_key_sec1_der+0x142>
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c025bc2:	23a1      	movs	r3, #161	; 0xa1
 c025bc4:	aa03      	add	r2, sp, #12
 c025bc6:	4639      	mov	r1, r7
 c025bc8:	a804      	add	r0, sp, #16
 c025bca:	f7f7 f9db 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c025bce:	4604      	mov	r4, r0
 c025bd0:	bb00      	cbnz	r0, c025c14 <pk_parse_key_sec1_der+0x13c>
            end2 = p + len;
 c025bd2:	e9dd 3403 	ldrd	r3, r4, [sp, #12]
 c025bd6:	441c      	add	r4, r3
            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )
 c025bd8:	aa03      	add	r2, sp, #12
 c025bda:	4621      	mov	r1, r4
 c025bdc:	a804      	add	r0, sp, #16
 c025bde:	f7f7 fa1c 	bl	c01d01a <mbedtls_asn1_get_bitstring_null>
 c025be2:	2800      	cmp	r0, #0
 c025be4:	d183      	bne.n	c025aee <pk_parse_key_sec1_der+0x16>
            if( p + len != end2 )
 c025be6:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 c025bea:	18d1      	adds	r1, r2, r3
 c025bec:	428c      	cmp	r4, r1
 c025bee:	d12e      	bne.n	c025c4e <pk_parse_key_sec1_der+0x176>
    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
 c025bf0:	f105 0788 	add.w	r7, r5, #136	; 0x88
 c025bf4:	4639      	mov	r1, r7
 c025bf6:	4628      	mov	r0, r5
 c025bf8:	f7fc fb46 	bl	c022288 <mbedtls_ecp_point_read_binary>
 c025bfc:	b918      	cbnz	r0, c025c06 <pk_parse_key_sec1_der+0x12e>
        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
 c025bfe:	4639      	mov	r1, r7
 c025c00:	4628      	mov	r0, r5
 c025c02:	f7fc fbb1 	bl	c022368 <mbedtls_ecp_check_pubkey>
    *p = (unsigned char *) end;
 c025c06:	9404      	str	r4, [sp, #16]
            if( ( ret = pk_get_ecpubkey( &p, end2, eck ) ) == 0 )
 c025c08:	b1b0      	cbz	r0, c025c38 <pk_parse_key_sec1_der+0x160>
                if( ret != MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE )
 c025c0a:	f510 4f9d 	cmn.w	r0, #20096	; 0x4e80
 c025c0e:	d004      	beq.n	c025c1a <pk_parse_key_sec1_der+0x142>
                    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 c025c10:	4c13      	ldr	r4, [pc, #76]	; (c025c60 <pk_parse_key_sec1_der+0x188>)
 c025c12:	e76e      	b.n	c025af2 <pk_parse_key_sec1_der+0x1a>
        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 c025c14:	f110 0f62 	cmn.w	r0, #98	; 0x62
 c025c18:	d18d      	bne.n	c025b36 <pk_parse_key_sec1_der+0x5e>
    if( ! pubkey_done &&
 c025c1a:	2300      	movs	r3, #0
 c025c1c:	4632      	mov	r2, r6
 c025c1e:	e9cd 3300 	strd	r3, r3, [sp]
 c025c22:	f105 0188 	add.w	r1, r5, #136	; 0x88
 c025c26:	f105 0328 	add.w	r3, r5, #40	; 0x28
 c025c2a:	4628      	mov	r0, r5
 c025c2c:	f7fd f848 	bl	c022cc0 <mbedtls_ecp_mul>
 c025c30:	4604      	mov	r4, r0
 c025c32:	2800      	cmp	r0, #0
 c025c34:	f47f af7f 	bne.w	c025b36 <pk_parse_key_sec1_der+0x5e>
    if( ( ret = mbedtls_ecp_check_privkey( &eck->grp, &eck->d ) ) != 0 )
 c025c38:	4631      	mov	r1, r6
 c025c3a:	4628      	mov	r0, r5
 c025c3c:	f7fc fc58 	bl	c0224f0 <mbedtls_ecp_check_privkey>
 c025c40:	4604      	mov	r4, r0
 c025c42:	2800      	cmp	r0, #0
 c025c44:	f43f af55 	beq.w	c025af2 <pk_parse_key_sec1_der+0x1a>
 c025c48:	e7a4      	b.n	c025b94 <pk_parse_key_sec1_der+0xbc>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
 c025c4a:	4c06      	ldr	r4, [pc, #24]	; (c025c64 <pk_parse_key_sec1_der+0x18c>)
 c025c4c:	e751      	b.n	c025af2 <pk_parse_key_sec1_der+0x1a>
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 c025c4e:	4c01      	ldr	r4, [pc, #4]	; (c025c54 <pk_parse_key_sec1_der+0x17c>)
 c025c50:	e74f      	b.n	c025af2 <pk_parse_key_sec1_der+0x1a>
 c025c52:	bf00      	nop
 c025c54:	ffffc29a 	.word	0xffffc29a
 c025c58:	ffffc2a0 	.word	0xffffc2a0
 c025c5c:	ffffc29e 	.word	0xffffc29e
 c025c60:	ffffc300 	.word	0xffffc300
 c025c64:	ffffc280 	.word	0xffffc280

0c025c68 <pk_get_pk_alg>:
{
 c025c68:	b530      	push	{r4, r5, lr}
 c025c6a:	4615      	mov	r5, r2
    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 c025c6c:	2200      	movs	r2, #0
{
 c025c6e:	b085      	sub	sp, #20
    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 c025c70:	e9c3 2200 	strd	r2, r2, [r3]
 c025c74:	609a      	str	r2, [r3, #8]
    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 c025c76:	aa01      	add	r2, sp, #4
{
 c025c78:	461c      	mov	r4, r3
    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 c025c7a:	f7f7 f9e2 	bl	c01d042 <mbedtls_asn1_get_alg>
 c025c7e:	b118      	cbz	r0, c025c88 <pk_get_pk_alg+0x20>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
 c025c80:	f5a0 506a 	sub.w	r0, r0, #14976	; 0x3a80
}
 c025c84:	b005      	add	sp, #20
 c025c86:	bd30      	pop	{r4, r5, pc}
    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
 c025c88:	4629      	mov	r1, r5
 c025c8a:	a801      	add	r0, sp, #4
 c025c8c:	f7fe fe4a 	bl	c024924 <mbedtls_oid_get_pk_alg>
 c025c90:	b960      	cbnz	r0, c025cac <pk_get_pk_alg+0x44>
    if( *pk_alg == MBEDTLS_PK_RSA &&
 c025c92:	782b      	ldrb	r3, [r5, #0]
 c025c94:	2b01      	cmp	r3, #1
 c025c96:	d1f5      	bne.n	c025c84 <pk_get_pk_alg+0x1c>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 c025c98:	6823      	ldr	r3, [r4, #0]
    if( *pk_alg == MBEDTLS_PK_RSA &&
 c025c9a:	2b05      	cmp	r3, #5
 c025c9c:	d000      	beq.n	c025ca0 <pk_get_pk_alg+0x38>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 c025c9e:	b93b      	cbnz	r3, c025cb0 <pk_get_pk_alg+0x48>
 c025ca0:	6862      	ldr	r2, [r4, #4]
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 c025ca2:	4b04      	ldr	r3, [pc, #16]	; (c025cb4 <pk_get_pk_alg+0x4c>)
 c025ca4:	2a00      	cmp	r2, #0
 c025ca6:	bf18      	it	ne
 c025ca8:	4618      	movne	r0, r3
 c025caa:	e7eb      	b.n	c025c84 <pk_get_pk_alg+0x1c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 c025cac:	4802      	ldr	r0, [pc, #8]	; (c025cb8 <pk_get_pk_alg+0x50>)
 c025cae:	e7e9      	b.n	c025c84 <pk_get_pk_alg+0x1c>
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 c025cb0:	4800      	ldr	r0, [pc, #0]	; (c025cb4 <pk_get_pk_alg+0x4c>)
 c025cb2:	e7e7      	b.n	c025c84 <pk_get_pk_alg+0x1c>
 c025cb4:	ffffc580 	.word	0xffffc580
 c025cb8:	ffffc380 	.word	0xffffc380

0c025cbc <pk_parse_key_pkcs8_unencrypted_der>:
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 c025cbc:	2300      	movs	r3, #0
{
 c025cbe:	b530      	push	{r4, r5, lr}
 c025cc0:	b089      	sub	sp, #36	; 0x24
 c025cc2:	4605      	mov	r5, r0
    unsigned char *p = (unsigned char *) key;
 c025cc4:	9104      	str	r1, [sp, #16]
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 c025cc6:	f88d 3007 	strb.w	r3, [sp, #7]
    unsigned char *end = p + keylen;
 c025cca:	4411      	add	r1, r2
     *    PrivateKey ::= OCTET STRING
     *
     *  The PrivateKey OCTET STRING is a SEC1 ECPrivateKey
     */

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c025ccc:	2330      	movs	r3, #48	; 0x30
 c025cce:	aa03      	add	r2, sp, #12
 c025cd0:	a804      	add	r0, sp, #16
 c025cd2:	f7f7 f957 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c025cd6:	b120      	cbz	r0, c025ce2 <pk_parse_key_pkcs8_unencrypted_der+0x26>

    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 c025cd8:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
    } else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    return( 0 );
}
 c025cdc:	4620      	mov	r0, r4
 c025cde:	b009      	add	sp, #36	; 0x24
 c025ce0:	bd30      	pop	{r4, r5, pc}
    end = p + len;
 c025ce2:	e9dd 3403 	ldrd	r3, r4, [sp, #12]
 c025ce6:	441c      	add	r4, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 c025ce8:	aa02      	add	r2, sp, #8
 c025cea:	4621      	mov	r1, r4
 c025cec:	a804      	add	r0, sp, #16
 c025cee:	f7f7 f95d 	bl	c01cfac <mbedtls_asn1_get_int>
 c025cf2:	2800      	cmp	r0, #0
 c025cf4:	d1f0      	bne.n	c025cd8 <pk_parse_key_pkcs8_unencrypted_der+0x1c>
    if( version != 0 )
 c025cf6:	9b02      	ldr	r3, [sp, #8]
 c025cf8:	2b00      	cmp	r3, #0
 c025cfa:	d140      	bne.n	c025d7e <pk_parse_key_pkcs8_unencrypted_der+0xc2>
    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
 c025cfc:	ab05      	add	r3, sp, #20
 c025cfe:	f10d 0207 	add.w	r2, sp, #7
 c025d02:	4621      	mov	r1, r4
 c025d04:	a804      	add	r0, sp, #16
 c025d06:	f7ff ffaf 	bl	c025c68 <pk_get_pk_alg>
 c025d0a:	2800      	cmp	r0, #0
 c025d0c:	d1e4      	bne.n	c025cd8 <pk_parse_key_pkcs8_unencrypted_der+0x1c>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 c025d0e:	2304      	movs	r3, #4
 c025d10:	aa03      	add	r2, sp, #12
 c025d12:	4621      	mov	r1, r4
 c025d14:	a804      	add	r0, sp, #16
 c025d16:	f7f7 f935 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c025d1a:	2800      	cmp	r0, #0
 c025d1c:	d1dc      	bne.n	c025cd8 <pk_parse_key_pkcs8_unencrypted_der+0x1c>
    if( len < 1 )
 c025d1e:	9b03      	ldr	r3, [sp, #12]
 c025d20:	b37b      	cbz	r3, c025d82 <pk_parse_key_pkcs8_unencrypted_der+0xc6>
    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 c025d22:	f89d 0007 	ldrb.w	r0, [sp, #7]
 c025d26:	f7fe ff5d 	bl	c024be4 <mbedtls_pk_info_from_type>
 c025d2a:	4601      	mov	r1, r0
 c025d2c:	b908      	cbnz	r0, c025d32 <pk_parse_key_pkcs8_unencrypted_der+0x76>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 c025d2e:	4c16      	ldr	r4, [pc, #88]	; (c025d88 <pk_parse_key_pkcs8_unencrypted_der+0xcc>)
 c025d30:	e7d4      	b.n	c025cdc <pk_parse_key_pkcs8_unencrypted_der+0x20>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 c025d32:	4628      	mov	r0, r5
 c025d34:	f7fe ff62 	bl	c024bfc <mbedtls_pk_setup>
 c025d38:	4604      	mov	r4, r0
 c025d3a:	2800      	cmp	r0, #0
 c025d3c:	d1ce      	bne.n	c025cdc <pk_parse_key_pkcs8_unencrypted_der+0x20>
    if( pk_alg == MBEDTLS_PK_RSA )
 c025d3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 c025d42:	2b01      	cmp	r3, #1
 c025d44:	d10b      	bne.n	c025d5e <pk_parse_key_pkcs8_unencrypted_der+0xa2>
        if( ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), p, len ) ) != 0 )
 c025d46:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 c025d4a:	6868      	ldr	r0, [r5, #4]
 c025d4c:	f7ff fdce 	bl	c0258ec <pk_parse_key_pkcs1_der>
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
 c025d50:	4604      	mov	r4, r0
 c025d52:	2800      	cmp	r0, #0
 c025d54:	d0c2      	beq.n	c025cdc <pk_parse_key_pkcs8_unencrypted_der+0x20>
            mbedtls_pk_free( pk );
 c025d56:	4628      	mov	r0, r5
 c025d58:	f7fe ff35 	bl	c024bc6 <mbedtls_pk_free>
            return( ret );
 c025d5c:	e7be      	b.n	c025cdc <pk_parse_key_pkcs8_unencrypted_der+0x20>
    if( pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH )
 c025d5e:	3b02      	subs	r3, #2
 c025d60:	2b01      	cmp	r3, #1
 c025d62:	d8e4      	bhi.n	c025d2e <pk_parse_key_pkcs8_unencrypted_der+0x72>
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
 c025d64:	6869      	ldr	r1, [r5, #4]
 c025d66:	a805      	add	r0, sp, #20
 c025d68:	f7ff fc50 	bl	c02560c <pk_use_ecparams>
 c025d6c:	4604      	mov	r4, r0
 c025d6e:	2800      	cmp	r0, #0
 c025d70:	d1f1      	bne.n	c025d56 <pk_parse_key_pkcs8_unencrypted_der+0x9a>
 c025d72:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 c025d76:	6868      	ldr	r0, [r5, #4]
 c025d78:	f7ff feae 	bl	c025ad8 <pk_parse_key_sec1_der>
 c025d7c:	e7e8      	b.n	c025d50 <pk_parse_key_pkcs8_unencrypted_der+0x94>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );
 c025d7e:	4c03      	ldr	r4, [pc, #12]	; (c025d8c <pk_parse_key_pkcs8_unencrypted_der+0xd0>)
 c025d80:	e7ac      	b.n	c025cdc <pk_parse_key_pkcs8_unencrypted_der+0x20>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 c025d82:	4c03      	ldr	r4, [pc, #12]	; (c025d90 <pk_parse_key_pkcs8_unencrypted_der+0xd4>)
 c025d84:	e7aa      	b.n	c025cdc <pk_parse_key_pkcs8_unencrypted_der+0x20>
 c025d86:	bf00      	nop
 c025d88:	ffffc380 	.word	0xffffc380
 c025d8c:	ffffc280 	.word	0xffffc280
 c025d90:	ffffc2a0 	.word	0xffffc2a0

0c025d94 <pk_parse_key_pkcs8_encrypted_der>:
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
static int pk_parse_key_pkcs8_encrypted_der(
                                    mbedtls_pk_context *pk,
                                    unsigned char *key, size_t keylen,
                                    const unsigned char *pwd, size_t pwdlen )
{
 c025d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 c025d96:	b091      	sub	sp, #68	; 0x44
 c025d98:	9d16      	ldr	r5, [sp, #88]	; 0x58
#if defined(MBEDTLS_PKCS12_C)
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_md_type_t md_alg;
#endif

    p = key;
 c025d9a:	9109      	str	r1, [sp, #36]	; 0x24
{
 c025d9c:	4606      	mov	r6, r0
 c025d9e:	461f      	mov	r7, r3
    end = p + keylen;
 c025da0:	4411      	add	r1, r2

    if( pwdlen == 0 )
 c025da2:	2d00      	cmp	r5, #0
 c025da4:	d070      	beq.n	c025e88 <pk_parse_key_pkcs8_encrypted_der+0xf4>
     *  EncryptedData ::= OCTET STRING
     *
     *  The EncryptedData OCTET STRING is a PKCS#8 PrivateKeyInfo
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 c025da6:	2330      	movs	r3, #48	; 0x30
 c025da8:	aa08      	add	r2, sp, #32
 c025daa:	a809      	add	r0, sp, #36	; 0x24
 c025dac:	f7f7 f8ea 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c025db0:	b118      	cbz	r0, c025dba <pk_parse_key_pkcs8_encrypted_der+0x26>

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 c025db2:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00

    if( decrypted == 0 )
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );

    return( pk_parse_key_pkcs8_unencrypted_der( pk, buf, len ) );
}
 c025db6:	b011      	add	sp, #68	; 0x44
 c025db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    end = p + len;
 c025dba:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 c025dbe:	441c      	add	r4, r3
    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
 c025dc0:	aa0a      	add	r2, sp, #40	; 0x28
 c025dc2:	ab0d      	add	r3, sp, #52	; 0x34
 c025dc4:	4621      	mov	r1, r4
 c025dc6:	a809      	add	r0, sp, #36	; 0x24
 c025dc8:	f7f7 f93b 	bl	c01d042 <mbedtls_asn1_get_alg>
 c025dcc:	2800      	cmp	r0, #0
 c025dce:	d1f0      	bne.n	c025db2 <pk_parse_key_pkcs8_encrypted_der+0x1e>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 c025dd0:	2304      	movs	r3, #4
 c025dd2:	aa08      	add	r2, sp, #32
 c025dd4:	4621      	mov	r1, r4
 c025dd6:	a809      	add	r0, sp, #36	; 0x24
 c025dd8:	f7f7 f8d4 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c025ddc:	2800      	cmp	r0, #0
 c025dde:	d1e8      	bne.n	c025db2 <pk_parse_key_pkcs8_encrypted_der+0x1e>
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
 c025de0:	f10d 011f 	add.w	r1, sp, #31
 c025de4:	f10d 021e 	add.w	r2, sp, #30
 c025de8:	a80a      	add	r0, sp, #40	; 0x28
    buf = p;
 c025dea:	9c09      	ldr	r4, [sp, #36]	; 0x24
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
 c025dec:	f7fe fe2a 	bl	c024a44 <mbedtls_oid_get_pkcs12_pbe_alg>
 c025df0:	4601      	mov	r1, r0
 c025df2:	b998      	cbnz	r0, c025e1c <pk_parse_key_pkcs8_encrypted_der+0x88>
        if( ( ret = mbedtls_pkcs12_pbe( &pbe_params, MBEDTLS_PKCS12_PBE_DECRYPT,
 c025df4:	9808      	ldr	r0, [sp, #32]
 c025df6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 c025dfa:	9003      	str	r0, [sp, #12]
 c025dfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 c025dfe:	f89d 201e 	ldrb.w	r2, [sp, #30]
 c025e02:	e9cd 5001 	strd	r5, r0, [sp, #4]
 c025e06:	9404      	str	r4, [sp, #16]
 c025e08:	9700      	str	r7, [sp, #0]
 c025e0a:	a80d      	add	r0, sp, #52	; 0x34
 c025e0c:	f7ff f962 	bl	c0250d4 <mbedtls_pkcs12_pbe>
 c025e10:	b1e8      	cbz	r0, c025e4e <pk_parse_key_pkcs8_encrypted_der+0xba>
            if( ret == MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH )
 c025e12:	f510 5ff0 	cmn.w	r0, #7680	; 0x1e00
 c025e16:	d1ce      	bne.n	c025db6 <pk_parse_key_pkcs8_encrypted_der+0x22>
                return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
 c025e18:	481d      	ldr	r0, [pc, #116]	; (c025e90 <pk_parse_key_pkcs8_encrypted_der+0xfc>)
 c025e1a:	e7cc      	b.n	c025db6 <pk_parse_key_pkcs8_encrypted_der+0x22>
    else if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS12_PBE_SHA1_RC4_128, &pbe_alg_oid ) == 0 )
 c025e1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 c025e1e:	2a0a      	cmp	r2, #10
 c025e20:	d11b      	bne.n	c025e5a <pk_parse_key_pkcs8_encrypted_der+0xc6>
 c025e22:	990c      	ldr	r1, [sp, #48]	; 0x30
 c025e24:	481b      	ldr	r0, [pc, #108]	; (c025e94 <pk_parse_key_pkcs8_encrypted_der+0x100>)
 c025e26:	f7ee fd9b 	bl	c014960 <memcmp>
 c025e2a:	4601      	mov	r1, r0
 c025e2c:	2800      	cmp	r0, #0
 c025e2e:	d12d      	bne.n	c025e8c <pk_parse_key_pkcs8_encrypted_der+0xf8>
        if( ( ret = mbedtls_pkcs12_pbe_sha1_rc4_128( &pbe_params,
 c025e30:	9b08      	ldr	r3, [sp, #32]
 c025e32:	9402      	str	r4, [sp, #8]
 c025e34:	9301      	str	r3, [sp, #4]
 c025e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c025e38:	463a      	mov	r2, r7
 c025e3a:	9300      	str	r3, [sp, #0]
 c025e3c:	a80d      	add	r0, sp, #52	; 0x34
 c025e3e:	462b      	mov	r3, r5
 c025e40:	f7ff f850 	bl	c024ee4 <mbedtls_pkcs12_pbe_sha1_rc4_128>
 c025e44:	2800      	cmp	r0, #0
 c025e46:	d1b6      	bne.n	c025db6 <pk_parse_key_pkcs8_encrypted_der+0x22>
        if( *buf != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 c025e48:	7823      	ldrb	r3, [r4, #0]
 c025e4a:	2b30      	cmp	r3, #48	; 0x30
 c025e4c:	d1e4      	bne.n	c025e18 <pk_parse_key_pkcs8_encrypted_der+0x84>
    return( pk_parse_key_pkcs8_unencrypted_der( pk, buf, len ) );
 c025e4e:	9a08      	ldr	r2, [sp, #32]
 c025e50:	4621      	mov	r1, r4
 c025e52:	4630      	mov	r0, r6
 c025e54:	f7ff ff32 	bl	c025cbc <pk_parse_key_pkcs8_unencrypted_der>
 c025e58:	e7ad      	b.n	c025db6 <pk_parse_key_pkcs8_encrypted_der+0x22>
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBES2, &pbe_alg_oid ) == 0 )
 c025e5a:	2a09      	cmp	r2, #9
 c025e5c:	d116      	bne.n	c025e8c <pk_parse_key_pkcs8_encrypted_der+0xf8>
 c025e5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 c025e60:	480d      	ldr	r0, [pc, #52]	; (c025e98 <pk_parse_key_pkcs8_encrypted_der+0x104>)
 c025e62:	f7ee fd7d 	bl	c014960 <memcmp>
 c025e66:	4601      	mov	r1, r0
 c025e68:	b980      	cbnz	r0, c025e8c <pk_parse_key_pkcs8_encrypted_der+0xf8>
        if( ( ret = mbedtls_pkcs5_pbes2( &pbe_params, MBEDTLS_PKCS5_DECRYPT, pwd, pwdlen,
 c025e6a:	9b08      	ldr	r3, [sp, #32]
 c025e6c:	9402      	str	r4, [sp, #8]
 c025e6e:	9301      	str	r3, [sp, #4]
 c025e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c025e72:	463a      	mov	r2, r7
 c025e74:	9300      	str	r3, [sp, #0]
 c025e76:	a80d      	add	r0, sp, #52	; 0x34
 c025e78:	462b      	mov	r3, r5
 c025e7a:	f7ff fa6d 	bl	c025358 <mbedtls_pkcs5_pbes2>
 c025e7e:	2800      	cmp	r0, #0
 c025e80:	d0e5      	beq.n	c025e4e <pk_parse_key_pkcs8_encrypted_der+0xba>
            if( ret == MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH )
 c025e82:	f510 5f38 	cmn.w	r0, #11776	; 0x2e00
 c025e86:	e7c6      	b.n	c025e16 <pk_parse_key_pkcs8_encrypted_der+0x82>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
 c025e88:	4804      	ldr	r0, [pc, #16]	; (c025e9c <pk_parse_key_pkcs8_encrypted_der+0x108>)
 c025e8a:	e794      	b.n	c025db6 <pk_parse_key_pkcs8_encrypted_der+0x22>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
 c025e8c:	4804      	ldr	r0, [pc, #16]	; (c025ea0 <pk_parse_key_pkcs8_encrypted_der+0x10c>)
 c025e8e:	e792      	b.n	c025db6 <pk_parse_key_pkcs8_encrypted_der+0x22>
 c025e90:	ffffc480 	.word	0xffffc480
 c025e94:	0c034ef7 	.word	0x0c034ef7
 c025e98:	0c034f02 	.word	0x0c034f02
 c025e9c:	ffffc400 	.word	0xffffc400
 c025ea0:	ffffc680 	.word	0xffffc680

0c025ea4 <mbedtls_pk_parse_subpubkey>:
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 c025ea4:	2300      	movs	r3, #0
{
 c025ea6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c025eaa:	b086      	sub	sp, #24
 c025eac:	4690      	mov	r8, r2
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 c025eae:	f88d 3007 	strb.w	r3, [sp, #7]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 c025eb2:	aa02      	add	r2, sp, #8
 c025eb4:	2330      	movs	r3, #48	; 0x30
{
 c025eb6:	4607      	mov	r7, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 c025eb8:	f7f7 f864 	bl	c01cf84 <mbedtls_asn1_get_tag>
 c025ebc:	b128      	cbz	r0, c025eca <mbedtls_pk_parse_subpubkey+0x26>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 c025ebe:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
}
 c025ec2:	4620      	mov	r0, r4
 c025ec4:	b006      	add	sp, #24
 c025ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    end = *p + len;
 c025eca:	9b02      	ldr	r3, [sp, #8]
 c025ecc:	683e      	ldr	r6, [r7, #0]
    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 c025ece:	f10d 0207 	add.w	r2, sp, #7
    end = *p + len;
 c025ed2:	441e      	add	r6, r3
    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 c025ed4:	4631      	mov	r1, r6
 c025ed6:	ab03      	add	r3, sp, #12
 c025ed8:	4638      	mov	r0, r7
 c025eda:	f7ff fec5 	bl	c025c68 <pk_get_pk_alg>
 c025ede:	4604      	mov	r4, r0
 c025ee0:	2800      	cmp	r0, #0
 c025ee2:	d1ee      	bne.n	c025ec2 <mbedtls_pk_parse_subpubkey+0x1e>
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 c025ee4:	aa02      	add	r2, sp, #8
 c025ee6:	4631      	mov	r1, r6
 c025ee8:	4638      	mov	r0, r7
 c025eea:	f7f7 f896 	bl	c01d01a <mbedtls_asn1_get_bitstring_null>
 c025eee:	b110      	cbz	r0, c025ef6 <mbedtls_pk_parse_subpubkey+0x52>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 c025ef0:	f5a0 546c 	sub.w	r4, r0, #15104	; 0x3b00
 c025ef4:	e7e5      	b.n	c025ec2 <mbedtls_pk_parse_subpubkey+0x1e>
    if( *p + len != end )
 c025ef6:	683b      	ldr	r3, [r7, #0]
 c025ef8:	9a02      	ldr	r2, [sp, #8]
 c025efa:	4413      	add	r3, r2
 c025efc:	429e      	cmp	r6, r3
 c025efe:	d144      	bne.n	c025f8a <mbedtls_pk_parse_subpubkey+0xe6>
    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 c025f00:	f89d 0007 	ldrb.w	r0, [sp, #7]
 c025f04:	f7fe fe6e 	bl	c024be4 <mbedtls_pk_info_from_type>
 c025f08:	4601      	mov	r1, r0
 c025f0a:	2800      	cmp	r0, #0
 c025f0c:	d03f      	beq.n	c025f8e <mbedtls_pk_parse_subpubkey+0xea>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 c025f0e:	4640      	mov	r0, r8
 c025f10:	f7fe fe74 	bl	c024bfc <mbedtls_pk_setup>
 c025f14:	4604      	mov	r4, r0
 c025f16:	2800      	cmp	r0, #0
 c025f18:	d1d3      	bne.n	c025ec2 <mbedtls_pk_parse_subpubkey+0x1e>
    if( pk_alg == MBEDTLS_PK_RSA )
 c025f1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 c025f1e:	2b01      	cmp	r3, #1
 c025f20:	d10c      	bne.n	c025f3c <mbedtls_pk_parse_subpubkey+0x98>
        ret = pk_get_rsapubkey( p, end, mbedtls_pk_rsa( *pk ) );
 c025f22:	f8d8 2004 	ldr.w	r2, [r8, #4]
 c025f26:	4631      	mov	r1, r6
 c025f28:	4638      	mov	r0, r7
 c025f2a:	f7ff fb0f 	bl	c02554c <pk_get_rsapubkey>
    if( ret == 0 && *p != end )
 c025f2e:	4605      	mov	r5, r0
 c025f30:	b320      	cbz	r0, c025f7c <mbedtls_pk_parse_subpubkey+0xd8>
        mbedtls_pk_free( pk );
 c025f32:	4640      	mov	r0, r8
 c025f34:	f7fe fe47 	bl	c024bc6 <mbedtls_pk_free>
 c025f38:	462c      	mov	r4, r5
 c025f3a:	e7c2      	b.n	c025ec2 <mbedtls_pk_parse_subpubkey+0x1e>
    if( pk_alg == MBEDTLS_PK_ECKEY_DH || pk_alg == MBEDTLS_PK_ECKEY )
 c025f3c:	3b02      	subs	r3, #2
 c025f3e:	2b01      	cmp	r3, #1
 c025f40:	d821      	bhi.n	c025f86 <mbedtls_pk_parse_subpubkey+0xe2>
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
 c025f42:	f8d8 1004 	ldr.w	r1, [r8, #4]
 c025f46:	a803      	add	r0, sp, #12
 c025f48:	f7ff fb60 	bl	c02560c <pk_use_ecparams>
        if( ret == 0 )
 c025f4c:	4605      	mov	r5, r0
 c025f4e:	2800      	cmp	r0, #0
 c025f50:	d1ef      	bne.n	c025f32 <mbedtls_pk_parse_subpubkey+0x8e>
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
 c025f52:	f8d8 9004 	ldr.w	r9, [r8, #4]
    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
 c025f56:	683a      	ldr	r2, [r7, #0]
 c025f58:	f109 0a88 	add.w	sl, r9, #136	; 0x88
 c025f5c:	1ab3      	subs	r3, r6, r2
 c025f5e:	4651      	mov	r1, sl
 c025f60:	4648      	mov	r0, r9
 c025f62:	f7fc f991 	bl	c022288 <mbedtls_ecp_point_read_binary>
 c025f66:	4605      	mov	r5, r0
 c025f68:	b920      	cbnz	r0, c025f74 <mbedtls_pk_parse_subpubkey+0xd0>
        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
 c025f6a:	4651      	mov	r1, sl
 c025f6c:	4648      	mov	r0, r9
 c025f6e:	f7fc f9fb 	bl	c022368 <mbedtls_ecp_check_pubkey>
 c025f72:	4605      	mov	r5, r0
    *p = (unsigned char *) end;
 c025f74:	603e      	str	r6, [r7, #0]
    if( ret == 0 && *p != end )
 c025f76:	2d00      	cmp	r5, #0
 c025f78:	d0a3      	beq.n	c025ec2 <mbedtls_pk_parse_subpubkey+0x1e>
 c025f7a:	e7da      	b.n	c025f32 <mbedtls_pk_parse_subpubkey+0x8e>
 c025f7c:	683b      	ldr	r3, [r7, #0]
 c025f7e:	42b3      	cmp	r3, r6
 c025f80:	d09f      	beq.n	c025ec2 <mbedtls_pk_parse_subpubkey+0x1e>
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
 c025f82:	4d04      	ldr	r5, [pc, #16]	; (c025f94 <mbedtls_pk_parse_subpubkey+0xf0>)
 c025f84:	e7d5      	b.n	c025f32 <mbedtls_pk_parse_subpubkey+0x8e>
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
 c025f86:	4d04      	ldr	r5, [pc, #16]	; (c025f98 <mbedtls_pk_parse_subpubkey+0xf4>)
 c025f88:	e7d3      	b.n	c025f32 <mbedtls_pk_parse_subpubkey+0x8e>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 c025f8a:	4c02      	ldr	r4, [pc, #8]	; (c025f94 <mbedtls_pk_parse_subpubkey+0xf0>)
 c025f8c:	e799      	b.n	c025ec2 <mbedtls_pk_parse_subpubkey+0x1e>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 c025f8e:	4c02      	ldr	r4, [pc, #8]	; (c025f98 <mbedtls_pk_parse_subpubkey+0xf4>)
 c025f90:	e797      	b.n	c025ec2 <mbedtls_pk_parse_subpubkey+0x1e>
 c025f92:	bf00      	nop
 c025f94:	ffffc49a 	.word	0xffffc49a
 c025f98:	ffffc380 	.word	0xffffc380

0c025f9c <mbedtls_pk_parse_key>:
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
 c025f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c025fa0:	b088      	sub	sp, #32
 c025fa2:	4605      	mov	r5, r0
 c025fa4:	460e      	mov	r6, r1
 c025fa6:	4698      	mov	r8, r3
 c025fa8:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    size_t len;
    mbedtls_pem_context pem;
#endif

    PK_VALIDATE_RET( pk != NULL );
    if( keylen == 0 )
 c025fac:	4617      	mov	r7, r2
 c025fae:	2a00      	cmp	r2, #0
 c025fb0:	f000 80ea 	beq.w	c026188 <mbedtls_pk_parse_key+0x1ec>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
    PK_VALIDATE_RET( key != NULL );

#if defined(MBEDTLS_PEM_PARSE_C)
   mbedtls_pem_init( &pem );
 c025fb4:	a805      	add	r0, sp, #20

#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
 c025fb6:	f107 3aff 	add.w	sl, r7, #4294967295
   mbedtls_pem_init( &pem );
 c025fba:	f7fe fd5f 	bl	c024a7c <mbedtls_pem_init>
    if( key[keylen - 1] != '\0' )
 c025fbe:	f816 300a 	ldrb.w	r3, [r6, sl]
 c025fc2:	b303      	cbz	r3, c026006 <mbedtls_pk_parse_key+0x6a>
        return( ret );
#endif /* MBEDTLS_RSA_C */

#if defined(MBEDTLS_ECP_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
 c025fc4:	f816 300a 	ldrb.w	r3, [r6, sl]
 c025fc8:	2b00      	cmp	r3, #0
 c025fca:	d15a      	bne.n	c026082 <mbedtls_pk_parse_key+0xe6>
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
 c025fcc:	ab04      	add	r3, sp, #16
 c025fce:	e9cd 9301 	strd	r9, r3, [sp, #4]
 c025fd2:	f8cd 8000 	str.w	r8, [sp]
 c025fd6:	4633      	mov	r3, r6
 c025fd8:	4a74      	ldr	r2, [pc, #464]	; (c0261ac <mbedtls_pk_parse_key+0x210>)
 c025fda:	4975      	ldr	r1, [pc, #468]	; (c0261b0 <mbedtls_pk_parse_key+0x214>)
 c025fdc:	a805      	add	r0, sp, #20
 c025fde:	f7fe fd53 	bl	c024a88 <mbedtls_pem_read_buffer>
                               "-----BEGIN EC PRIVATE KEY-----",
                               "-----END EC PRIVATE KEY-----",
                               key, pwd, pwdlen, &len );
    if( ret == 0 )
 c025fe2:	4604      	mov	r4, r0
 c025fe4:	2800      	cmp	r0, #0
 c025fe6:	d143      	bne.n	c026070 <mbedtls_pk_parse_key+0xd4>
    {
        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );
 c025fe8:	2002      	movs	r0, #2
 c025fea:	f7fe fdfb 	bl	c024be4 <mbedtls_pk_info_from_type>

        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
 c025fee:	4601      	mov	r1, r0
 c025ff0:	4628      	mov	r0, r5
 c025ff2:	f7fe fe03 	bl	c024bfc <mbedtls_pk_setup>
 c025ff6:	4604      	mov	r4, r0
 c025ff8:	bb10      	cbnz	r0, c026040 <mbedtls_pk_parse_key+0xa4>
 c025ffa:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 c025ffe:	6868      	ldr	r0, [r5, #4]
 c026000:	f7ff fd6a 	bl	c025ad8 <pk_parse_key_sec1_der>
 c026004:	e01a      	b.n	c02603c <mbedtls_pk_parse_key+0xa0>
        ret = mbedtls_pem_read_buffer( &pem,
 c026006:	ab04      	add	r3, sp, #16
 c026008:	e9cd 9301 	strd	r9, r3, [sp, #4]
 c02600c:	f8cd 8000 	str.w	r8, [sp]
 c026010:	4633      	mov	r3, r6
 c026012:	4a68      	ldr	r2, [pc, #416]	; (c0261b4 <mbedtls_pk_parse_key+0x218>)
 c026014:	4968      	ldr	r1, [pc, #416]	; (c0261b8 <mbedtls_pk_parse_key+0x21c>)
 c026016:	a805      	add	r0, sp, #20
 c026018:	f7fe fd36 	bl	c024a88 <mbedtls_pem_read_buffer>
    if( ret == 0 )
 c02601c:	4604      	mov	r4, r0
 c02601e:	b9b0      	cbnz	r0, c02604e <mbedtls_pk_parse_key+0xb2>
        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
 c026020:	2001      	movs	r0, #1
 c026022:	f7fe fddf 	bl	c024be4 <mbedtls_pk_info_from_type>
        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
 c026026:	4601      	mov	r1, r0
 c026028:	4628      	mov	r0, r5
 c02602a:	f7fe fde7 	bl	c024bfc <mbedtls_pk_setup>
 c02602e:	4604      	mov	r4, r0
 c026030:	b930      	cbnz	r0, c026040 <mbedtls_pk_parse_key+0xa4>
 c026032:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 c026036:	6868      	ldr	r0, [r5, #4]
 c026038:	f7ff fc58 	bl	c0258ec <pk_parse_key_pkcs1_der>
                               "-----BEGIN ENCRYPTED PRIVATE KEY-----",
                               "-----END ENCRYPTED PRIVATE KEY-----",
                               key, NULL, 0, &len );
    if( ret == 0 )
    {
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
 c02603c:	4604      	mov	r4, r0
 c02603e:	b110      	cbz	r0, c026046 <mbedtls_pk_parse_key+0xaa>
                                                      pem.buf, pem.buflen,
                                                      pwd, pwdlen ) ) != 0 )
        {
            mbedtls_pk_free( pk );
 c026040:	4628      	mov	r0, r5
 c026042:	f7fe fdc0 	bl	c024bc6 <mbedtls_pk_free>
        }

        mbedtls_pem_free( &pem );
 c026046:	a805      	add	r0, sp, #20
 c026048:	f7fe fda6 	bl	c024b98 <mbedtls_pem_free>
        return( ret );
 c02604c:	e003      	b.n	c026056 <mbedtls_pk_parse_key+0xba>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
 c02604e:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
 c026052:	d104      	bne.n	c02605e <mbedtls_pk_parse_key+0xc2>
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
 c026054:	4c59      	ldr	r4, [pc, #356]	; (c0261bc <mbedtls_pk_parse_key+0x220>)
     * twice, once here and once by the caller, but this is
     * also ok and in line with the mbedtls_pk_free() calls
     * on failed PEM parsing attempts. */

    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
}
 c026056:	4620      	mov	r0, r4
 c026058:	b008      	add	sp, #32
 c02605a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
 c02605e:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
 c026062:	d101      	bne.n	c026068 <mbedtls_pk_parse_key+0xcc>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
 c026064:	4c56      	ldr	r4, [pc, #344]	; (c0261c0 <mbedtls_pk_parse_key+0x224>)
 c026066:	e7f6      	b.n	c026056 <mbedtls_pk_parse_key+0xba>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 c026068:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 c02606c:	d1f3      	bne.n	c026056 <mbedtls_pk_parse_key+0xba>
 c02606e:	e7a9      	b.n	c025fc4 <mbedtls_pk_parse_key+0x28>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
 c026070:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
 c026074:	d0ee      	beq.n	c026054 <mbedtls_pk_parse_key+0xb8>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
 c026076:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
 c02607a:	d0f3      	beq.n	c026064 <mbedtls_pk_parse_key+0xc8>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 c02607c:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 c026080:	d1e9      	bne.n	c026056 <mbedtls_pk_parse_key+0xba>
    if( key[keylen - 1] != '\0' )
 c026082:	f816 300a 	ldrb.w	r3, [r6, sl]
 c026086:	b9a3      	cbnz	r3, c0260b2 <mbedtls_pk_parse_key+0x116>
        ret = mbedtls_pem_read_buffer( &pem,
 c026088:	aa04      	add	r2, sp, #16
 c02608a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 c02608e:	9300      	str	r3, [sp, #0]
 c026090:	4a4c      	ldr	r2, [pc, #304]	; (c0261c4 <mbedtls_pk_parse_key+0x228>)
 c026092:	4633      	mov	r3, r6
 c026094:	494c      	ldr	r1, [pc, #304]	; (c0261c8 <mbedtls_pk_parse_key+0x22c>)
 c026096:	a805      	add	r0, sp, #20
 c026098:	f7fe fcf6 	bl	c024a88 <mbedtls_pem_read_buffer>
    if( ret == 0 )
 c02609c:	4604      	mov	r4, r0
 c02609e:	b928      	cbnz	r0, c0260ac <mbedtls_pk_parse_key+0x110>
        if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,
 c0260a0:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 c0260a4:	4628      	mov	r0, r5
 c0260a6:	f7ff fe09 	bl	c025cbc <pk_parse_key_pkcs8_unencrypted_der>
 c0260aa:	e7c7      	b.n	c02603c <mbedtls_pk_parse_key+0xa0>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 c0260ac:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 c0260b0:	d1d1      	bne.n	c026056 <mbedtls_pk_parse_key+0xba>
    if( key[keylen - 1] != '\0' )
 c0260b2:	f816 300a 	ldrb.w	r3, [r6, sl]
 c0260b6:	b9bb      	cbnz	r3, c0260e8 <mbedtls_pk_parse_key+0x14c>
        ret = mbedtls_pem_read_buffer( &pem,
 c0260b8:	aa04      	add	r2, sp, #16
 c0260ba:	e9cd 3201 	strd	r3, r2, [sp, #4]
 c0260be:	9300      	str	r3, [sp, #0]
 c0260c0:	4a42      	ldr	r2, [pc, #264]	; (c0261cc <mbedtls_pk_parse_key+0x230>)
 c0260c2:	4633      	mov	r3, r6
 c0260c4:	4942      	ldr	r1, [pc, #264]	; (c0261d0 <mbedtls_pk_parse_key+0x234>)
 c0260c6:	a805      	add	r0, sp, #20
 c0260c8:	f7fe fcde 	bl	c024a88 <mbedtls_pem_read_buffer>
    if( ret == 0 )
 c0260cc:	4604      	mov	r4, r0
 c0260ce:	b940      	cbnz	r0, c0260e2 <mbedtls_pk_parse_key+0x146>
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
 c0260d0:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 c0260d4:	f8cd 9000 	str.w	r9, [sp]
 c0260d8:	4643      	mov	r3, r8
 c0260da:	4628      	mov	r0, r5
 c0260dc:	f7ff fe5a 	bl	c025d94 <pk_parse_key_pkcs8_encrypted_der>
 c0260e0:	e7ac      	b.n	c02603c <mbedtls_pk_parse_key+0xa0>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 c0260e2:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 c0260e6:	d1b6      	bne.n	c026056 <mbedtls_pk_parse_key+0xba>
        if( ( key_copy = mbedtls_calloc( 1, keylen ) ) == NULL )
 c0260e8:	4639      	mov	r1, r7
 c0260ea:	2001      	movs	r0, #1
 c0260ec:	f000 fb06 	bl	c0266fc <mbedtls_calloc>
 c0260f0:	4604      	mov	r4, r0
 c0260f2:	b908      	cbnz	r0, c0260f8 <mbedtls_pk_parse_key+0x15c>
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 c0260f4:	4c37      	ldr	r4, [pc, #220]	; (c0261d4 <mbedtls_pk_parse_key+0x238>)
 c0260f6:	e7ae      	b.n	c026056 <mbedtls_pk_parse_key+0xba>
        memcpy( key_copy, key, keylen );
 c0260f8:	463a      	mov	r2, r7
 c0260fa:	4631      	mov	r1, r6
 c0260fc:	f7ee fc3f 	bl	c01497e <memcpy>
        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,
 c026100:	4643      	mov	r3, r8
 c026102:	463a      	mov	r2, r7
 c026104:	4621      	mov	r1, r4
 c026106:	f8cd 9000 	str.w	r9, [sp]
 c02610a:	4628      	mov	r0, r5
 c02610c:	f7ff fe42 	bl	c025d94 <pk_parse_key_pkcs8_encrypted_der>
 c026110:	4680      	mov	r8, r0
        mbedtls_platform_zeroize( key_copy, keylen );
 c026112:	4639      	mov	r1, r7
 c026114:	4620      	mov	r0, r4
 c026116:	f000 fb07 	bl	c026728 <mbedtls_platform_zeroize>
        mbedtls_free( key_copy );
 c02611a:	4620      	mov	r0, r4
 c02611c:	f000 faf4 	bl	c026708 <mbedtls_free>
    if( ret == 0 )
 c026120:	f1b8 0f00 	cmp.w	r8, #0
 c026124:	d101      	bne.n	c02612a <mbedtls_pk_parse_key+0x18e>
        return( 0 );
 c026126:	2400      	movs	r4, #0
 c026128:	e795      	b.n	c026056 <mbedtls_pk_parse_key+0xba>
    mbedtls_pk_free( pk );
 c02612a:	4628      	mov	r0, r5
 c02612c:	f7fe fd4b 	bl	c024bc6 <mbedtls_pk_free>
    mbedtls_pk_init( pk );
 c026130:	4628      	mov	r0, r5
 c026132:	f7fe fd44 	bl	c024bbe <mbedtls_pk_init>
    if( ret == MBEDTLS_ERR_PK_PASSWORD_MISMATCH )
 c026136:	f518 5f6e 	cmn.w	r8, #15232	; 0x3b80
 c02613a:	d08b      	beq.n	c026054 <mbedtls_pk_parse_key+0xb8>
    if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk, key, keylen ) ) == 0 )
 c02613c:	463a      	mov	r2, r7
 c02613e:	4631      	mov	r1, r6
 c026140:	4628      	mov	r0, r5
 c026142:	f7ff fdbb 	bl	c025cbc <pk_parse_key_pkcs8_unencrypted_der>
 c026146:	2800      	cmp	r0, #0
 c026148:	d0ed      	beq.n	c026126 <mbedtls_pk_parse_key+0x18a>
    mbedtls_pk_free( pk );
 c02614a:	4628      	mov	r0, r5
 c02614c:	f7fe fd3b 	bl	c024bc6 <mbedtls_pk_free>
    mbedtls_pk_init( pk );
 c026150:	4628      	mov	r0, r5
 c026152:	f7fe fd34 	bl	c024bbe <mbedtls_pk_init>
    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
 c026156:	2001      	movs	r0, #1
 c026158:	f7fe fd44 	bl	c024be4 <mbedtls_pk_info_from_type>
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
 c02615c:	4601      	mov	r1, r0
 c02615e:	4628      	mov	r0, r5
 c026160:	f7fe fd4c 	bl	c024bfc <mbedtls_pk_setup>
 c026164:	b190      	cbz	r0, c02618c <mbedtls_pk_parse_key+0x1f0>
    mbedtls_pk_free( pk );
 c026166:	4628      	mov	r0, r5
 c026168:	f7fe fd2d 	bl	c024bc6 <mbedtls_pk_free>
    mbedtls_pk_init( pk );
 c02616c:	4628      	mov	r0, r5
 c02616e:	f7fe fd26 	bl	c024bbe <mbedtls_pk_init>
    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );
 c026172:	2002      	movs	r0, #2
 c026174:	f7fe fd36 	bl	c024be4 <mbedtls_pk_info_from_type>
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
 c026178:	4601      	mov	r1, r0
 c02617a:	4628      	mov	r0, r5
 c02617c:	f7fe fd3e 	bl	c024bfc <mbedtls_pk_setup>
 c026180:	b160      	cbz	r0, c02619c <mbedtls_pk_parse_key+0x200>
    mbedtls_pk_free( pk );
 c026182:	4628      	mov	r0, r5
 c026184:	f7fe fd1f 	bl	c024bc6 <mbedtls_pk_free>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 c026188:	4c13      	ldr	r4, [pc, #76]	; (c0261d8 <mbedtls_pk_parse_key+0x23c>)
 c02618a:	e764      	b.n	c026056 <mbedtls_pk_parse_key+0xba>
        pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), key, keylen ) == 0 )
 c02618c:	463a      	mov	r2, r7
 c02618e:	4631      	mov	r1, r6
 c026190:	6868      	ldr	r0, [r5, #4]
 c026192:	f7ff fbab 	bl	c0258ec <pk_parse_key_pkcs1_der>
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
 c026196:	2800      	cmp	r0, #0
 c026198:	d1e5      	bne.n	c026166 <mbedtls_pk_parse_key+0x1ca>
 c02619a:	e7c4      	b.n	c026126 <mbedtls_pk_parse_key+0x18a>
        pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),
 c02619c:	463a      	mov	r2, r7
 c02619e:	4631      	mov	r1, r6
 c0261a0:	6868      	ldr	r0, [r5, #4]
 c0261a2:	f7ff fc99 	bl	c025ad8 <pk_parse_key_sec1_der>
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
 c0261a6:	2800      	cmp	r0, #0
 c0261a8:	d0bd      	beq.n	c026126 <mbedtls_pk_parse_key+0x18a>
 c0261aa:	e7ea      	b.n	c026182 <mbedtls_pk_parse_key+0x1e6>
 c0261ac:	0c034dcb 	.word	0x0c034dcb
 c0261b0:	0c034de8 	.word	0x0c034de8
 c0261b4:	0c034d8d 	.word	0x0c034d8d
 c0261b8:	0c034dab 	.word	0x0c034dab
 c0261bc:	ffffc480 	.word	0xffffc480
 c0261c0:	ffffc400 	.word	0xffffc400
 c0261c4:	0c034e07 	.word	0x0c034e07
 c0261c8:	0c034e21 	.word	0x0c034e21
 c0261cc:	0c034e3d 	.word	0x0c034e3d
 c0261d0:	0c034e61 	.word	0x0c034e61
 c0261d4:	ffffc080 	.word	0xffffc080
 c0261d8:	ffffc300 	.word	0xffffc300

0c0261dc <mbedtls_pk_parse_public_key>:
/*
 * Parse a public key
 */
int mbedtls_pk_parse_public_key( mbedtls_pk_context *ctx,
                         const unsigned char *key, size_t keylen )
{
 c0261dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c0261e0:	4605      	mov	r5, r0
 c0261e2:	b08a      	sub	sp, #40	; 0x28
 c0261e4:	460e      	mov	r6, r1
    size_t len;
    mbedtls_pem_context pem;
#endif

    PK_VALIDATE_RET( ctx != NULL );
    if( keylen == 0 )
 c0261e6:	4617      	mov	r7, r2
 c0261e8:	2a00      	cmp	r2, #0
 c0261ea:	d07f      	beq.n	c0262ec <mbedtls_pk_parse_public_key+0x110>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
    PK_VALIDATE_RET( key != NULL || keylen == 0 );

#if defined(MBEDTLS_PEM_PARSE_C)
    mbedtls_pem_init( &pem );
 c0261ec:	a807      	add	r0, sp, #28
#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
 c0261ee:	f107 38ff 	add.w	r8, r7, #4294967295
    mbedtls_pem_init( &pem );
 c0261f2:	f7fe fc43 	bl	c024a7c <mbedtls_pem_init>
    if( key[keylen - 1] != '\0' )
 c0261f6:	f816 3008 	ldrb.w	r3, [r6, r8]
 c0261fa:	2b00      	cmp	r3, #0
 c0261fc:	d130      	bne.n	c026260 <mbedtls_pk_parse_public_key+0x84>
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
 c0261fe:	aa06      	add	r2, sp, #24
 c026200:	e9cd 3201 	strd	r3, r2, [sp, #4]
 c026204:	9300      	str	r3, [sp, #0]
 c026206:	4a3a      	ldr	r2, [pc, #232]	; (c0262f0 <mbedtls_pk_parse_public_key+0x114>)
 c026208:	4633      	mov	r3, r6
 c02620a:	493a      	ldr	r1, [pc, #232]	; (c0262f4 <mbedtls_pk_parse_public_key+0x118>)
 c02620c:	a807      	add	r0, sp, #28
 c02620e:	f7fe fc3b 	bl	c024a88 <mbedtls_pem_read_buffer>
                               "-----BEGIN RSA PUBLIC KEY-----",
                               "-----END RSA PUBLIC KEY-----",
                               key, NULL, 0, &len );

    if( ret == 0 )
 c026212:	4604      	mov	r4, r0
 c026214:	bb08      	cbnz	r0, c02625a <mbedtls_pk_parse_public_key+0x7e>
    {
        p = pem.buf;
 c026216:	9b07      	ldr	r3, [sp, #28]
        if( ( pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA ) ) == NULL )
 c026218:	2001      	movs	r0, #1
        p = pem.buf;
 c02621a:	9305      	str	r3, [sp, #20]
        if( ( pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA ) ) == NULL )
 c02621c:	f7fe fce2 	bl	c024be4 <mbedtls_pk_info_from_type>
 c026220:	4601      	mov	r1, r0
 c026222:	b920      	cbnz	r0, c02622e <mbedtls_pk_parse_public_key+0x52>
            return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 c026224:	4c34      	ldr	r4, [pc, #208]	; (c0262f8 <mbedtls_pk_parse_public_key+0x11c>)
    p = (unsigned char *) key;

    ret = mbedtls_pk_parse_subpubkey( &p, p + keylen, ctx );

    return( ret );
}
 c026226:	4620      	mov	r0, r4
 c026228:	b00a      	add	sp, #40	; 0x28
 c02622a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( ret = mbedtls_pk_setup( ctx, pk_info ) ) != 0 )
 c02622e:	4628      	mov	r0, r5
 c026230:	f7fe fce4 	bl	c024bfc <mbedtls_pk_setup>
 c026234:	4604      	mov	r4, r0
 c026236:	2800      	cmp	r0, #0
 c026238:	d1f5      	bne.n	c026226 <mbedtls_pk_parse_public_key+0x4a>
        if ( ( ret = pk_get_rsapubkey( &p, p + pem.buflen, mbedtls_pk_rsa( *ctx ) ) ) != 0 )
 c02623a:	9905      	ldr	r1, [sp, #20]
 c02623c:	9b08      	ldr	r3, [sp, #32]
 c02623e:	686a      	ldr	r2, [r5, #4]
 c026240:	4419      	add	r1, r3
 c026242:	a805      	add	r0, sp, #20
 c026244:	f7ff f982 	bl	c02554c <pk_get_rsapubkey>
 c026248:	4604      	mov	r4, r0
 c02624a:	b110      	cbz	r0, c026252 <mbedtls_pk_parse_public_key+0x76>
            mbedtls_pk_free( ctx );
 c02624c:	4628      	mov	r0, r5
 c02624e:	f7fe fcba 	bl	c024bc6 <mbedtls_pk_free>
        mbedtls_pem_free( &pem );
 c026252:	a807      	add	r0, sp, #28
 c026254:	f7fe fca0 	bl	c024b98 <mbedtls_pem_free>
        return( ret );
 c026258:	e7e5      	b.n	c026226 <mbedtls_pk_parse_public_key+0x4a>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 c02625a:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 c02625e:	d1f8      	bne.n	c026252 <mbedtls_pk_parse_public_key+0x76>
    if( key[keylen - 1] != '\0' )
 c026260:	f816 3008 	ldrb.w	r3, [r6, r8]
 c026264:	b9c3      	cbnz	r3, c026298 <mbedtls_pk_parse_public_key+0xbc>
        ret = mbedtls_pem_read_buffer( &pem,
 c026266:	aa06      	add	r2, sp, #24
 c026268:	e9cd 3201 	strd	r3, r2, [sp, #4]
 c02626c:	9300      	str	r3, [sp, #0]
 c02626e:	4a23      	ldr	r2, [pc, #140]	; (c0262fc <mbedtls_pk_parse_public_key+0x120>)
 c026270:	4633      	mov	r3, r6
 c026272:	4923      	ldr	r1, [pc, #140]	; (c026300 <mbedtls_pk_parse_public_key+0x124>)
 c026274:	a807      	add	r0, sp, #28
 c026276:	f7fe fc07 	bl	c024a88 <mbedtls_pem_read_buffer>
    if( ret == 0 )
 c02627a:	4604      	mov	r4, r0
 c02627c:	b948      	cbnz	r0, c026292 <mbedtls_pk_parse_public_key+0xb6>
        p = pem.buf;
 c02627e:	9b07      	ldr	r3, [sp, #28]
        ret = mbedtls_pk_parse_subpubkey( &p,  p + pem.buflen, ctx );
 c026280:	9908      	ldr	r1, [sp, #32]
 c026282:	462a      	mov	r2, r5
 c026284:	4419      	add	r1, r3
 c026286:	a805      	add	r0, sp, #20
        p = pem.buf;
 c026288:	9305      	str	r3, [sp, #20]
        ret = mbedtls_pk_parse_subpubkey( &p,  p + pem.buflen, ctx );
 c02628a:	f7ff fe0b 	bl	c025ea4 <mbedtls_pk_parse_subpubkey>
 c02628e:	4604      	mov	r4, r0
 c026290:	e7df      	b.n	c026252 <mbedtls_pk_parse_public_key+0x76>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 c026292:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 c026296:	d1dc      	bne.n	c026252 <mbedtls_pk_parse_public_key+0x76>
    mbedtls_pem_free( &pem );
 c026298:	a807      	add	r0, sp, #28
 c02629a:	f7fe fc7d 	bl	c024b98 <mbedtls_pem_free>
    if( ( pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA ) ) == NULL )
 c02629e:	2001      	movs	r0, #1
 c0262a0:	f7fe fca0 	bl	c024be4 <mbedtls_pk_info_from_type>
 c0262a4:	4601      	mov	r1, r0
 c0262a6:	2800      	cmp	r0, #0
 c0262a8:	d0bc      	beq.n	c026224 <mbedtls_pk_parse_public_key+0x48>
    if( ( ret = mbedtls_pk_setup( ctx, pk_info ) ) != 0 )
 c0262aa:	4628      	mov	r0, r5
 c0262ac:	f7fe fca6 	bl	c024bfc <mbedtls_pk_setup>
 c0262b0:	4604      	mov	r4, r0
 c0262b2:	2800      	cmp	r0, #0
 c0262b4:	d1b7      	bne.n	c026226 <mbedtls_pk_parse_public_key+0x4a>
    p = (unsigned char *)key;
 c0262b6:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 c0262ba:	f848 6d14 	str.w	r6, [r8, #-20]!
    ret = pk_get_rsapubkey( &p, p + keylen, mbedtls_pk_rsa( *ctx ) );
 c0262be:	4437      	add	r7, r6
 c0262c0:	686a      	ldr	r2, [r5, #4]
 c0262c2:	4639      	mov	r1, r7
 c0262c4:	4640      	mov	r0, r8
 c0262c6:	f7ff f941 	bl	c02554c <pk_get_rsapubkey>
    if( ret == 0 )
 c0262ca:	4604      	mov	r4, r0
 c0262cc:	2800      	cmp	r0, #0
 c0262ce:	d0aa      	beq.n	c026226 <mbedtls_pk_parse_public_key+0x4a>
    mbedtls_pk_free( ctx );
 c0262d0:	4628      	mov	r0, r5
 c0262d2:	f7fe fc78 	bl	c024bc6 <mbedtls_pk_free>
    if( ret != ( MBEDTLS_ERR_PK_INVALID_PUBKEY + MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
 c0262d6:	4b0b      	ldr	r3, [pc, #44]	; (c026304 <mbedtls_pk_parse_public_key+0x128>)
 c0262d8:	429c      	cmp	r4, r3
 c0262da:	d1a4      	bne.n	c026226 <mbedtls_pk_parse_public_key+0x4a>
    ret = mbedtls_pk_parse_subpubkey( &p, p + keylen, ctx );
 c0262dc:	462a      	mov	r2, r5
 c0262de:	4639      	mov	r1, r7
 c0262e0:	4640      	mov	r0, r8
    p = (unsigned char *) key;
 c0262e2:	9605      	str	r6, [sp, #20]
    ret = mbedtls_pk_parse_subpubkey( &p, p + keylen, ctx );
 c0262e4:	f7ff fdde 	bl	c025ea4 <mbedtls_pk_parse_subpubkey>
 c0262e8:	4604      	mov	r4, r0
    return( ret );
 c0262ea:	e79c      	b.n	c026226 <mbedtls_pk_parse_public_key+0x4a>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 c0262ec:	4c06      	ldr	r4, [pc, #24]	; (c026308 <mbedtls_pk_parse_public_key+0x12c>)
 c0262ee:	e79a      	b.n	c026226 <mbedtls_pk_parse_public_key+0x4a>
 c0262f0:	0c034e87 	.word	0x0c034e87
 c0262f4:	0c034ea4 	.word	0x0c034ea4
 c0262f8:	ffffc380 	.word	0xffffc380
 c0262fc:	0c034ec3 	.word	0x0c034ec3
 c026300:	0c034edc 	.word	0x0c034edc
 c026304:	ffffc49e 	.word	0xffffc49e
 c026308:	ffffc300 	.word	0xffffc300

0c02630c <pk_write_ec_pubkey>:
/*
 * EC public key is an EC point
 */
static int pk_write_ec_pubkey( unsigned char **p, unsigned char *start,
                               mbedtls_ecp_keypair *ec )
{
 c02630c:	b570      	push	{r4, r5, r6, lr}
 c02630e:	4606      	mov	r6, r0
 c026310:	460c      	mov	r4, r1
 c026312:	4610      	mov	r0, r2
    int ret;
    size_t len = 0;
    unsigned char buf[MBEDTLS_ECP_MAX_PT_LEN];

    if( ( ret = mbedtls_ecp_point_write_binary( &ec->grp, &ec->Q,
 c026314:	2185      	movs	r1, #133	; 0x85
    size_t len = 0;
 c026316:	2200      	movs	r2, #0
{
 c026318:	b0a6      	sub	sp, #152	; 0x98
    size_t len = 0;
 c02631a:	ab26      	add	r3, sp, #152	; 0x98
    if( ( ret = mbedtls_ecp_point_write_binary( &ec->grp, &ec->Q,
 c02631c:	ad04      	add	r5, sp, #16
    size_t len = 0;
 c02631e:	f843 2d8c 	str.w	r2, [r3, #-140]!
    if( ( ret = mbedtls_ecp_point_write_binary( &ec->grp, &ec->Q,
 c026322:	9101      	str	r1, [sp, #4]
 c026324:	9500      	str	r5, [sp, #0]
 c026326:	f100 0188 	add.w	r1, r0, #136	; 0x88
 c02632a:	f7fb ff41 	bl	c0221b0 <mbedtls_ecp_point_write_binary>
 c02632e:	b960      	cbnz	r0, c02634a <pk_write_ec_pubkey+0x3e>
                                        &len, buf, sizeof( buf ) ) ) != 0 )
    {
        return( ret );
    }

    if( *p < start || (size_t)( *p - start ) < len )
 c026330:	6830      	ldr	r0, [r6, #0]
 c026332:	42a0      	cmp	r0, r4
 c026334:	d30b      	bcc.n	c02634e <pk_write_ec_pubkey+0x42>
 c026336:	9a03      	ldr	r2, [sp, #12]
 c026338:	1b04      	subs	r4, r0, r4
 c02633a:	4294      	cmp	r4, r2
 c02633c:	d307      	bcc.n	c02634e <pk_write_ec_pubkey+0x42>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    *p -= len;
 c02633e:	1a80      	subs	r0, r0, r2
 c026340:	6030      	str	r0, [r6, #0]
    memcpy( *p, buf, len );
 c026342:	4629      	mov	r1, r5
 c026344:	f7ee fb1b 	bl	c01497e <memcpy>

    return( (int) len );
 c026348:	9803      	ldr	r0, [sp, #12]
}
 c02634a:	b026      	add	sp, #152	; 0x98
 c02634c:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 c02634e:	f06f 006b 	mvn.w	r0, #107	; 0x6b
 c026352:	e7fa      	b.n	c02634a <pk_write_ec_pubkey+0x3e>

0c026354 <pk_write_ec_param.isra.2>:
/*
 * ECParameters ::= CHOICE {
 *   namedCurve         OBJECT IDENTIFIER
 * }
 */
static int pk_write_ec_param( unsigned char **p, unsigned char *start,
 c026354:	b537      	push	{r0, r1, r2, r4, r5, lr}
 c026356:	4604      	mov	r4, r0
 c026358:	460d      	mov	r5, r1
 c02635a:	4610      	mov	r0, r2
    int ret;
    size_t len = 0;
    const char *oid;
    size_t oid_len;

    if( ( ret = mbedtls_oid_get_oid_by_ec_grp( ec->grp.id, &oid, &oid_len ) ) != 0 )
 c02635c:	4669      	mov	r1, sp
 c02635e:	aa01      	add	r2, sp, #4
 c026360:	f7fe fb14 	bl	c02498c <mbedtls_oid_get_oid_by_ec_grp>
 c026364:	b928      	cbnz	r0, c026372 <pk_write_ec_param.isra.2+0x1e>
        return( ret );

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_oid( p, start, oid, oid_len ) );
 c026366:	e9dd 2300 	ldrd	r2, r3, [sp]
 c02636a:	4629      	mov	r1, r5
 c02636c:	4620      	mov	r0, r4
 c02636e:	f7f6 ffa4 	bl	c01d2ba <mbedtls_asn1_write_oid>

    return( (int) len );
}
 c026372:	b003      	add	sp, #12
 c026374:	bd30      	pop	{r4, r5, pc}
	...

0c026378 <mbedtls_pk_write_pubkey>:
#endif /* MBEDTLS_ECP_C */

int mbedtls_pk_write_pubkey( unsigned char **p, unsigned char *start,
                             const mbedtls_pk_context *key )
{
 c026378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c02637c:	4680      	mov	r8, r0
 c02637e:	b086      	sub	sp, #24
    PK_VALIDATE_RET( *p != NULL );
    PK_VALIDATE_RET( start != NULL );
    PK_VALIDATE_RET( key != NULL );

#if defined(MBEDTLS_RSA_C)
    if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_RSA )
 c026380:	4610      	mov	r0, r2
{
 c026382:	4689      	mov	r9, r1
 c026384:	4614      	mov	r4, r2
    if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_RSA )
 c026386:	f7fe fc4f 	bl	c024c28 <mbedtls_pk_get_type>
 c02638a:	2801      	cmp	r0, #1
 c02638c:	d145      	bne.n	c02641a <mbedtls_pk_write_pubkey+0xa2>
    if ( ( ret = mbedtls_rsa_export( rsa, NULL, NULL, NULL, NULL, &T ) ) != 0 ||
 c02638e:	2500      	movs	r5, #0
        MBEDTLS_ASN1_CHK_ADD( len, pk_write_rsa_pubkey( p, start, mbedtls_pk_rsa( *key ) ) );
 c026390:	f8d4 a004 	ldr.w	sl, [r4, #4]
    mbedtls_mpi_init( &T );
 c026394:	af03      	add	r7, sp, #12
 c026396:	4638      	mov	r0, r7
 c026398:	f7f7 fb5a 	bl	c01da50 <mbedtls_mpi_init>
    if ( ( ret = mbedtls_rsa_export( rsa, NULL, NULL, NULL, NULL, &T ) ) != 0 ||
 c02639c:	9701      	str	r7, [sp, #4]
 c02639e:	9500      	str	r5, [sp, #0]
 c0263a0:	462b      	mov	r3, r5
 c0263a2:	462a      	mov	r2, r5
 c0263a4:	4629      	mov	r1, r5
 c0263a6:	4650      	mov	r0, sl
 c0263a8:	f003 fc00 	bl	c029bac <mbedtls_rsa_export>
 c0263ac:	4604      	mov	r4, r0
 c0263ae:	bb90      	cbnz	r0, c026416 <mbedtls_pk_write_pubkey+0x9e>
 c0263b0:	463a      	mov	r2, r7
 c0263b2:	4649      	mov	r1, r9
 c0263b4:	4640      	mov	r0, r8
 c0263b6:	f7f6 ff40 	bl	c01d23a <mbedtls_asn1_write_mpi>
 c0263ba:	1e04      	subs	r4, r0, #0
 c0263bc:	db2b      	blt.n	c026416 <mbedtls_pk_write_pubkey+0x9e>
    if ( ( ret = mbedtls_rsa_export( rsa, &T, NULL, NULL, NULL, NULL ) ) != 0 ||
 c0263be:	e9cd 5500 	strd	r5, r5, [sp]
 c0263c2:	462b      	mov	r3, r5
 c0263c4:	462a      	mov	r2, r5
 c0263c6:	4639      	mov	r1, r7
 c0263c8:	4650      	mov	r0, sl
 c0263ca:	f003 fbef 	bl	c029bac <mbedtls_rsa_export>
    len += ret;
 c0263ce:	4626      	mov	r6, r4
    if ( ( ret = mbedtls_rsa_export( rsa, &T, NULL, NULL, NULL, NULL ) ) != 0 ||
 c0263d0:	4604      	mov	r4, r0
 c0263d2:	b938      	cbnz	r0, c0263e4 <mbedtls_pk_write_pubkey+0x6c>
 c0263d4:	463a      	mov	r2, r7
 c0263d6:	4649      	mov	r1, r9
 c0263d8:	4640      	mov	r0, r8
 c0263da:	f7f6 ff2e 	bl	c01d23a <mbedtls_asn1_write_mpi>
 c0263de:	1e04      	subs	r4, r0, #0
 c0263e0:	db00      	blt.n	c0263e4 <mbedtls_pk_write_pubkey+0x6c>
    len += ret;
 c0263e2:	4426      	add	r6, r4
    mbedtls_mpi_free( &T );
 c0263e4:	4638      	mov	r0, r7
 c0263e6:	f7f7 fb39 	bl	c01da5c <mbedtls_mpi_free>
    if( ret < 0 )
 c0263ea:	2c00      	cmp	r4, #0
 c0263ec:	db0f      	blt.n	c02640e <mbedtls_pk_write_pubkey+0x96>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 c0263ee:	4632      	mov	r2, r6
 c0263f0:	4649      	mov	r1, r9
 c0263f2:	4640      	mov	r0, r8
 c0263f4:	f7f6 fe8a 	bl	c01d10c <mbedtls_asn1_write_len>
 c0263f8:	1e05      	subs	r5, r0, #0
 c0263fa:	db1c      	blt.n	c026436 <mbedtls_pk_write_pubkey+0xbe>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_CONSTRUCTED |
 c0263fc:	2230      	movs	r2, #48	; 0x30
 c0263fe:	4649      	mov	r1, r9
 c026400:	4640      	mov	r0, r8
 c026402:	f7f6 fef7 	bl	c01d1f4 <mbedtls_asn1_write_tag>
 c026406:	1e04      	subs	r4, r0, #0
 c026408:	db01      	blt.n	c02640e <mbedtls_pk_write_pubkey+0x96>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 c02640a:	442e      	add	r6, r5
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_CONSTRUCTED |
 c02640c:	4434      	add	r4, r6
    else
#endif /* MBEDTLS_USE_PSA_CRYPTO */
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );

    return( (int) len );
}
 c02640e:	4620      	mov	r0, r4
 c026410:	b006      	add	sp, #24
 c026412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    size_t len = 0;
 c026416:	462e      	mov	r6, r5
 c026418:	e7e4      	b.n	c0263e4 <mbedtls_pk_write_pubkey+0x6c>
    if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_ECKEY )
 c02641a:	4620      	mov	r0, r4
 c02641c:	f7fe fc04 	bl	c024c28 <mbedtls_pk_get_type>
 c026420:	2802      	cmp	r0, #2
 c026422:	d106      	bne.n	c026432 <mbedtls_pk_write_pubkey+0xba>
        MBEDTLS_ASN1_CHK_ADD( len, pk_write_ec_pubkey( p, start, mbedtls_pk_ec( *key ) ) );
 c026424:	6862      	ldr	r2, [r4, #4]
 c026426:	4649      	mov	r1, r9
 c026428:	4640      	mov	r0, r8
 c02642a:	f7ff ff6f 	bl	c02630c <pk_write_ec_pubkey>
 c02642e:	4604      	mov	r4, r0
 c026430:	e7ed      	b.n	c02640e <mbedtls_pk_write_pubkey+0x96>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
 c026432:	4c02      	ldr	r4, [pc, #8]	; (c02643c <mbedtls_pk_write_pubkey+0xc4>)
 c026434:	e7eb      	b.n	c02640e <mbedtls_pk_write_pubkey+0x96>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 c026436:	462c      	mov	r4, r5
 c026438:	e7e9      	b.n	c02640e <mbedtls_pk_write_pubkey+0x96>
 c02643a:	bf00      	nop
 c02643c:	ffffc680 	.word	0xffffc680

0c026440 <mbedtls_pk_write_key_der>:

    return( (int) len );
}

int mbedtls_pk_write_key_der( mbedtls_pk_context *key, unsigned char *buf, size_t size )
{
 c026440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c026444:	4604      	mov	r4, r0
 c026446:	b087      	sub	sp, #28
 c026448:	460e      	mov	r6, r1
    int ret;
    unsigned char *c;
    size_t len = 0;

    PK_VALIDATE_RET( key != NULL );
    if( size == 0 )
 c02644a:	b92a      	cbnz	r2, c026458 <mbedtls_pk_write_key_der+0x18>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 c02644c:	f06f 046b 	mvn.w	r4, #107	; 0x6b
    else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );

    return( (int) len );
}
 c026450:	4620      	mov	r0, r4
 c026452:	b007      	add	sp, #28
 c026454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c = buf + size;
 c026458:	440a      	add	r2, r1
 c02645a:	9202      	str	r2, [sp, #8]
    if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_RSA )
 c02645c:	f7fe fbe4 	bl	c024c28 <mbedtls_pk_get_type>
 c026460:	2801      	cmp	r0, #1
 c026462:	f040 80bd 	bne.w	c0265e0 <mbedtls_pk_write_key_der+0x1a0>
        mbedtls_mpi_init( &T );
 c026466:	af03      	add	r7, sp, #12
 c026468:	4638      	mov	r0, r7
        mbedtls_rsa_context *rsa = mbedtls_pk_rsa( *key );
 c02646a:	f8d4 9004 	ldr.w	r9, [r4, #4]
        mbedtls_mpi_init( &T );
 c02646e:	f7f7 faef 	bl	c01da50 <mbedtls_mpi_init>
        if( ( ret = mbedtls_rsa_export_crt( rsa, NULL, NULL, &T ) ) != 0 ||
 c026472:	2200      	movs	r2, #0
 c026474:	463b      	mov	r3, r7
 c026476:	4611      	mov	r1, r2
 c026478:	4648      	mov	r0, r9
 c02647a:	f003 fc01 	bl	c029c80 <mbedtls_rsa_export_crt>
 c02647e:	4604      	mov	r4, r0
 c026480:	2800      	cmp	r0, #0
 c026482:	f040 80ab 	bne.w	c0265dc <mbedtls_pk_write_key_der+0x19c>
 c026486:	463a      	mov	r2, r7
 c026488:	4631      	mov	r1, r6
 c02648a:	a802      	add	r0, sp, #8
 c02648c:	f7f6 fed5 	bl	c01d23a <mbedtls_asn1_write_mpi>
 c026490:	1e04      	subs	r4, r0, #0
 c026492:	f2c0 80a3 	blt.w	c0265dc <mbedtls_pk_write_key_der+0x19c>
        if( ( ret = mbedtls_rsa_export_crt( rsa, NULL, &T, NULL ) ) != 0 ||
 c026496:	2300      	movs	r3, #0
 c026498:	463a      	mov	r2, r7
 c02649a:	4619      	mov	r1, r3
 c02649c:	4648      	mov	r0, r9
 c02649e:	f003 fbef 	bl	c029c80 <mbedtls_rsa_export_crt>
        len += ret;
 c0264a2:	4625      	mov	r5, r4
        if( ( ret = mbedtls_rsa_export_crt( rsa, NULL, &T, NULL ) ) != 0 ||
 c0264a4:	4604      	mov	r4, r0
 c0264a6:	2800      	cmp	r0, #0
 c0264a8:	d176      	bne.n	c026598 <mbedtls_pk_write_key_der+0x158>
 c0264aa:	463a      	mov	r2, r7
 c0264ac:	4631      	mov	r1, r6
 c0264ae:	a802      	add	r0, sp, #8
 c0264b0:	f7f6 fec3 	bl	c01d23a <mbedtls_asn1_write_mpi>
 c0264b4:	1e04      	subs	r4, r0, #0
 c0264b6:	db6f      	blt.n	c026598 <mbedtls_pk_write_key_der+0x158>
        if( ( ret = mbedtls_rsa_export_crt( rsa, &T, NULL, NULL ) ) != 0 ||
 c0264b8:	2300      	movs	r3, #0
 c0264ba:	4639      	mov	r1, r7
 c0264bc:	461a      	mov	r2, r3
 c0264be:	4648      	mov	r0, r9
 c0264c0:	f003 fbde 	bl	c029c80 <mbedtls_rsa_export_crt>
        len += ret;
 c0264c4:	4425      	add	r5, r4
        if( ( ret = mbedtls_rsa_export_crt( rsa, &T, NULL, NULL ) ) != 0 ||
 c0264c6:	4604      	mov	r4, r0
 c0264c8:	2800      	cmp	r0, #0
 c0264ca:	d165      	bne.n	c026598 <mbedtls_pk_write_key_der+0x158>
 c0264cc:	463a      	mov	r2, r7
 c0264ce:	4631      	mov	r1, r6
 c0264d0:	a802      	add	r0, sp, #8
 c0264d2:	f7f6 feb2 	bl	c01d23a <mbedtls_asn1_write_mpi>
 c0264d6:	1e04      	subs	r4, r0, #0
 c0264d8:	db5e      	blt.n	c026598 <mbedtls_pk_write_key_der+0x158>
        if ( ( ret = mbedtls_rsa_export( rsa, NULL, NULL,
 c0264da:	2200      	movs	r2, #0
 c0264dc:	463b      	mov	r3, r7
 c0264de:	e9cd 2200 	strd	r2, r2, [sp]
 c0264e2:	4611      	mov	r1, r2
 c0264e4:	4648      	mov	r0, r9
 c0264e6:	f003 fb61 	bl	c029bac <mbedtls_rsa_export>
        len += ret;
 c0264ea:	4425      	add	r5, r4
        if ( ( ret = mbedtls_rsa_export( rsa, NULL, NULL,
 c0264ec:	4604      	mov	r4, r0
 c0264ee:	2800      	cmp	r0, #0
 c0264f0:	d152      	bne.n	c026598 <mbedtls_pk_write_key_der+0x158>
                                         &T, NULL, NULL ) ) != 0 ||
 c0264f2:	463a      	mov	r2, r7
 c0264f4:	4631      	mov	r1, r6
 c0264f6:	a802      	add	r0, sp, #8
 c0264f8:	f7f6 fe9f 	bl	c01d23a <mbedtls_asn1_write_mpi>
 c0264fc:	1e04      	subs	r4, r0, #0
 c0264fe:	db4b      	blt.n	c026598 <mbedtls_pk_write_key_der+0x158>
        if ( ( ret = mbedtls_rsa_export( rsa, NULL, &T,
 c026500:	f04f 0800 	mov.w	r8, #0
 c026504:	463a      	mov	r2, r7
 c026506:	e9cd 8800 	strd	r8, r8, [sp]
 c02650a:	4643      	mov	r3, r8
 c02650c:	4641      	mov	r1, r8
 c02650e:	4648      	mov	r0, r9
 c026510:	f003 fb4c 	bl	c029bac <mbedtls_rsa_export>
        len += ret;
 c026514:	4425      	add	r5, r4
        if ( ( ret = mbedtls_rsa_export( rsa, NULL, &T,
 c026516:	4604      	mov	r4, r0
 c026518:	2800      	cmp	r0, #0
 c02651a:	d13d      	bne.n	c026598 <mbedtls_pk_write_key_der+0x158>
                                         NULL, NULL, NULL ) ) != 0 ||
 c02651c:	463a      	mov	r2, r7
 c02651e:	4631      	mov	r1, r6
 c026520:	a802      	add	r0, sp, #8
 c026522:	f7f6 fe8a 	bl	c01d23a <mbedtls_asn1_write_mpi>
 c026526:	1e04      	subs	r4, r0, #0
 c026528:	db36      	blt.n	c026598 <mbedtls_pk_write_key_der+0x158>
        if ( ( ret = mbedtls_rsa_export( rsa, NULL, NULL,
 c02652a:	e9cd 7800 	strd	r7, r8, [sp]
 c02652e:	4643      	mov	r3, r8
 c026530:	4642      	mov	r2, r8
 c026532:	4641      	mov	r1, r8
 c026534:	4648      	mov	r0, r9
 c026536:	f003 fb39 	bl	c029bac <mbedtls_rsa_export>
        len += ret;
 c02653a:	4425      	add	r5, r4
        if ( ( ret = mbedtls_rsa_export( rsa, NULL, NULL,
 c02653c:	4604      	mov	r4, r0
 c02653e:	bb58      	cbnz	r0, c026598 <mbedtls_pk_write_key_der+0x158>
                                         NULL, &T, NULL ) ) != 0 ||
 c026540:	463a      	mov	r2, r7
 c026542:	4631      	mov	r1, r6
 c026544:	a802      	add	r0, sp, #8
 c026546:	f7f6 fe78 	bl	c01d23a <mbedtls_asn1_write_mpi>
 c02654a:	1e04      	subs	r4, r0, #0
 c02654c:	db24      	blt.n	c026598 <mbedtls_pk_write_key_der+0x158>
        if ( ( ret = mbedtls_rsa_export( rsa, NULL, NULL,
 c02654e:	e9cd 8700 	strd	r8, r7, [sp]
 c026552:	4643      	mov	r3, r8
 c026554:	4642      	mov	r2, r8
 c026556:	4641      	mov	r1, r8
 c026558:	4648      	mov	r0, r9
 c02655a:	f003 fb27 	bl	c029bac <mbedtls_rsa_export>
        len += ret;
 c02655e:	4425      	add	r5, r4
        if ( ( ret = mbedtls_rsa_export( rsa, NULL, NULL,
 c026560:	4604      	mov	r4, r0
 c026562:	b9c8      	cbnz	r0, c026598 <mbedtls_pk_write_key_der+0x158>
                                         NULL, NULL, &T ) ) != 0 ||
 c026564:	463a      	mov	r2, r7
 c026566:	4631      	mov	r1, r6
 c026568:	a802      	add	r0, sp, #8
 c02656a:	f7f6 fe66 	bl	c01d23a <mbedtls_asn1_write_mpi>
 c02656e:	1e04      	subs	r4, r0, #0
 c026570:	db12      	blt.n	c026598 <mbedtls_pk_write_key_der+0x158>
        if ( ( ret = mbedtls_rsa_export( rsa, &T, NULL,
 c026572:	e9cd 8800 	strd	r8, r8, [sp]
 c026576:	4643      	mov	r3, r8
 c026578:	4642      	mov	r2, r8
 c02657a:	4639      	mov	r1, r7
 c02657c:	4648      	mov	r0, r9
 c02657e:	f003 fb15 	bl	c029bac <mbedtls_rsa_export>
        len += ret;
 c026582:	4425      	add	r5, r4
        if ( ( ret = mbedtls_rsa_export( rsa, &T, NULL,
 c026584:	4604      	mov	r4, r0
 c026586:	b938      	cbnz	r0, c026598 <mbedtls_pk_write_key_der+0x158>
                                         NULL, NULL, NULL ) ) != 0 ||
 c026588:	463a      	mov	r2, r7
 c02658a:	4631      	mov	r1, r6
 c02658c:	a802      	add	r0, sp, #8
 c02658e:	f7f6 fe54 	bl	c01d23a <mbedtls_asn1_write_mpi>
 c026592:	1e04      	subs	r4, r0, #0
 c026594:	db00      	blt.n	c026598 <mbedtls_pk_write_key_der+0x158>
        len += ret;
 c026596:	4425      	add	r5, r4
        mbedtls_mpi_free( &T );
 c026598:	4638      	mov	r0, r7
 c02659a:	f7f7 fa5f 	bl	c01da5c <mbedtls_mpi_free>
        if( ret < 0 )
 c02659e:	2c00      	cmp	r4, #0
 c0265a0:	f6ff af56 	blt.w	c026450 <mbedtls_pk_write_key_der+0x10>
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_int( &c, buf, 0 ) );
 c0265a4:	2200      	movs	r2, #0
 c0265a6:	4631      	mov	r1, r6
 c0265a8:	a802      	add	r0, sp, #8
 c0265aa:	f7f6 fea1 	bl	c01d2f0 <mbedtls_asn1_write_int>
 c0265ae:	1e04      	subs	r4, r0, #0
 c0265b0:	f6ff af4e 	blt.w	c026450 <mbedtls_pk_write_key_der+0x10>
 c0265b4:	4425      	add	r5, r4
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, buf, len ) );
 c0265b6:	462a      	mov	r2, r5
 c0265b8:	4631      	mov	r1, r6
 c0265ba:	a802      	add	r0, sp, #8
 c0265bc:	f7f6 fda6 	bl	c01d10c <mbedtls_asn1_write_len>
 c0265c0:	1e04      	subs	r4, r0, #0
 c0265c2:	f6ff af45 	blt.w	c026450 <mbedtls_pk_write_key_der+0x10>
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c,
 c0265c6:	2230      	movs	r2, #48	; 0x30
 c0265c8:	4631      	mov	r1, r6
 c0265ca:	a802      	add	r0, sp, #8
 c0265cc:	f7f6 fe12 	bl	c01d1f4 <mbedtls_asn1_write_tag>
 c0265d0:	2800      	cmp	r0, #0
 c0265d2:	f2c0 808e 	blt.w	c0266f2 <mbedtls_pk_write_key_der+0x2b2>
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, buf, len ) );
 c0265d6:	442c      	add	r4, r5
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c,
 c0265d8:	4404      	add	r4, r0
 c0265da:	e739      	b.n	c026450 <mbedtls_pk_write_key_der+0x10>
    size_t len = 0;
 c0265dc:	2500      	movs	r5, #0
 c0265de:	e7db      	b.n	c026598 <mbedtls_pk_write_key_der+0x158>
    if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_ECKEY )
 c0265e0:	4620      	mov	r0, r4
 c0265e2:	f7fe fb21 	bl	c024c28 <mbedtls_pk_get_type>
 c0265e6:	2802      	cmp	r0, #2
 c0265e8:	d179      	bne.n	c0266de <mbedtls_pk_write_key_der+0x29e>
        mbedtls_ecp_keypair *ec = mbedtls_pk_ec( *key );
 c0265ea:	6867      	ldr	r7, [r4, #4]
        MBEDTLS_ASN1_CHK_ADD( pub_len, pk_write_ec_pubkey( &c, buf, ec ) );
 c0265ec:	4631      	mov	r1, r6
 c0265ee:	463a      	mov	r2, r7
 c0265f0:	a802      	add	r0, sp, #8
 c0265f2:	f7ff fe8b 	bl	c02630c <pk_write_ec_pubkey>
 c0265f6:	1e04      	subs	r4, r0, #0
 c0265f8:	f6ff af2a 	blt.w	c026450 <mbedtls_pk_write_key_der+0x10>
        if( c - buf < 1 )
 c0265fc:	9b02      	ldr	r3, [sp, #8]
 c0265fe:	1b9a      	subs	r2, r3, r6
 c026600:	2a00      	cmp	r2, #0
 c026602:	f77f af23 	ble.w	c02644c <mbedtls_pk_write_key_der+0xc>
        *--c = 0;
 c026606:	1e5a      	subs	r2, r3, #1
 c026608:	9202      	str	r2, [sp, #8]
 c02660a:	2200      	movs	r2, #0
        pub_len += 1;
 c02660c:	1c65      	adds	r5, r4, #1
        *--c = 0;
 c02660e:	f803 2c01 	strb.w	r2, [r3, #-1]
        MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_len( &c, buf, pub_len ) );
 c026612:	4631      	mov	r1, r6
 c026614:	462a      	mov	r2, r5
 c026616:	a802      	add	r0, sp, #8
 c026618:	f7f6 fd78 	bl	c01d10c <mbedtls_asn1_write_len>
 c02661c:	1e04      	subs	r4, r0, #0
 c02661e:	f6ff af17 	blt.w	c026450 <mbedtls_pk_write_key_der+0x10>
        MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_tag( &c, buf, MBEDTLS_ASN1_BIT_STRING ) );
 c026622:	2203      	movs	r2, #3
 c026624:	4631      	mov	r1, r6
 c026626:	a802      	add	r0, sp, #8
 c026628:	f7f6 fde4 	bl	c01d1f4 <mbedtls_asn1_write_tag>
 c02662c:	2800      	cmp	r0, #0
 c02662e:	db60      	blt.n	c0266f2 <mbedtls_pk_write_key_der+0x2b2>
        MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_len( &c, buf, pub_len ) );
 c026630:	4425      	add	r5, r4
        MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_tag( &c, buf, MBEDTLS_ASN1_BIT_STRING ) );
 c026632:	4405      	add	r5, r0
        MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_len( &c, buf, pub_len ) );
 c026634:	462a      	mov	r2, r5
 c026636:	4631      	mov	r1, r6
 c026638:	a802      	add	r0, sp, #8
 c02663a:	f7f6 fd67 	bl	c01d10c <mbedtls_asn1_write_len>
 c02663e:	f1b0 0a00 	subs.w	sl, r0, #0
 c026642:	db4e      	blt.n	c0266e2 <mbedtls_pk_write_key_der+0x2a2>
        MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_tag( &c, buf,
 c026644:	22a1      	movs	r2, #161	; 0xa1
 c026646:	4631      	mov	r1, r6
 c026648:	a802      	add	r0, sp, #8
 c02664a:	f7f6 fdd3 	bl	c01d1f4 <mbedtls_asn1_write_tag>
 c02664e:	f1b0 0900 	subs.w	r9, r0, #0
 c026652:	db48      	blt.n	c0266e6 <mbedtls_pk_write_key_der+0x2a6>
        MBEDTLS_ASN1_CHK_ADD( par_len, pk_write_ec_param( &c, buf, ec ) );
 c026654:	783a      	ldrb	r2, [r7, #0]
 c026656:	4631      	mov	r1, r6
 c026658:	a802      	add	r0, sp, #8
 c02665a:	f7ff fe7b 	bl	c026354 <pk_write_ec_param.isra.2>
 c02665e:	1e04      	subs	r4, r0, #0
 c026660:	f6ff aef6 	blt.w	c026450 <mbedtls_pk_write_key_der+0x10>
        MBEDTLS_ASN1_CHK_ADD( par_len, mbedtls_asn1_write_len( &c, buf, par_len ) );
 c026664:	4622      	mov	r2, r4
 c026666:	4631      	mov	r1, r6
 c026668:	a802      	add	r0, sp, #8
 c02666a:	f7f6 fd4f 	bl	c01d10c <mbedtls_asn1_write_len>
        MBEDTLS_ASN1_CHK_ADD( par_len, pk_write_ec_param( &c, buf, ec ) );
 c02666e:	46a3      	mov	fp, r4
        MBEDTLS_ASN1_CHK_ADD( par_len, mbedtls_asn1_write_len( &c, buf, par_len ) );
 c026670:	1e04      	subs	r4, r0, #0
 c026672:	f6ff aeed 	blt.w	c026450 <mbedtls_pk_write_key_der+0x10>
        MBEDTLS_ASN1_CHK_ADD( par_len, mbedtls_asn1_write_tag( &c, buf,
 c026676:	22a0      	movs	r2, #160	; 0xa0
 c026678:	4631      	mov	r1, r6
 c02667a:	a802      	add	r0, sp, #8
 c02667c:	f7f6 fdba 	bl	c01d1f4 <mbedtls_asn1_write_tag>
 c026680:	f1b0 0800 	subs.w	r8, r0, #0
 c026684:	db31      	blt.n	c0266ea <mbedtls_pk_write_key_der+0x2aa>
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &c, buf, &ec->d ) );
 c026686:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 c02668a:	4631      	mov	r1, r6
 c02668c:	a802      	add	r0, sp, #8
 c02668e:	f7f6 fdd4 	bl	c01d23a <mbedtls_asn1_write_mpi>
 c026692:	1e07      	subs	r7, r0, #0
 c026694:	db2b      	blt.n	c0266ee <mbedtls_pk_write_key_der+0x2ae>
        *c = MBEDTLS_ASN1_OCTET_STRING;
 c026696:	2204      	movs	r2, #4
 c026698:	9b02      	ldr	r3, [sp, #8]
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_int( &c, buf, 1 ) );
 c02669a:	4631      	mov	r1, r6
        *c = MBEDTLS_ASN1_OCTET_STRING;
 c02669c:	701a      	strb	r2, [r3, #0]
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_int( &c, buf, 1 ) );
 c02669e:	a802      	add	r0, sp, #8
 c0266a0:	2201      	movs	r2, #1
 c0266a2:	f7f6 fe25 	bl	c01d2f0 <mbedtls_asn1_write_int>
 c0266a6:	2800      	cmp	r0, #0
 c0266a8:	db23      	blt.n	c0266f2 <mbedtls_pk_write_key_der+0x2b2>
        MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_len( &c, buf, pub_len ) );
 c0266aa:	4455      	add	r5, sl
        MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_tag( &c, buf,
 c0266ac:	444d      	add	r5, r9
        len += par_len;
 c0266ae:	445d      	add	r5, fp
 c0266b0:	4425      	add	r5, r4
 c0266b2:	4445      	add	r5, r8
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &c, buf, &ec->d ) );
 c0266b4:	443d      	add	r5, r7
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_int( &c, buf, 1 ) );
 c0266b6:	4405      	add	r5, r0
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, buf, len ) );
 c0266b8:	462a      	mov	r2, r5
 c0266ba:	4631      	mov	r1, r6
 c0266bc:	a802      	add	r0, sp, #8
 c0266be:	f7f6 fd25 	bl	c01d10c <mbedtls_asn1_write_len>
 c0266c2:	1e04      	subs	r4, r0, #0
 c0266c4:	f6ff aec4 	blt.w	c026450 <mbedtls_pk_write_key_der+0x10>
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, buf, MBEDTLS_ASN1_CONSTRUCTED |
 c0266c8:	2230      	movs	r2, #48	; 0x30
 c0266ca:	4631      	mov	r1, r6
 c0266cc:	a802      	add	r0, sp, #8
 c0266ce:	f7f6 fd91 	bl	c01d1f4 <mbedtls_asn1_write_tag>
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, buf, len ) );
 c0266d2:	4425      	add	r5, r4
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, buf, MBEDTLS_ASN1_CONSTRUCTED |
 c0266d4:	1e04      	subs	r4, r0, #0
 c0266d6:	f6ff aebb 	blt.w	c026450 <mbedtls_pk_write_key_der+0x10>
 c0266da:	442c      	add	r4, r5
    return( (int) len );
 c0266dc:	e6b8      	b.n	c026450 <mbedtls_pk_write_key_der+0x10>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
 c0266de:	4c06      	ldr	r4, [pc, #24]	; (c0266f8 <mbedtls_pk_write_key_der+0x2b8>)
 c0266e0:	e6b6      	b.n	c026450 <mbedtls_pk_write_key_der+0x10>
 c0266e2:	4654      	mov	r4, sl
 c0266e4:	e6b4      	b.n	c026450 <mbedtls_pk_write_key_der+0x10>
 c0266e6:	464c      	mov	r4, r9
 c0266e8:	e6b2      	b.n	c026450 <mbedtls_pk_write_key_der+0x10>
 c0266ea:	4644      	mov	r4, r8
 c0266ec:	e6b0      	b.n	c026450 <mbedtls_pk_write_key_der+0x10>
 c0266ee:	463c      	mov	r4, r7
 c0266f0:	e6ae      	b.n	c026450 <mbedtls_pk_write_key_der+0x10>
 c0266f2:	4604      	mov	r4, r0
 c0266f4:	e6ac      	b.n	c026450 <mbedtls_pk_write_key_der+0x10>
 c0266f6:	bf00      	nop
 c0266f8:	ffffc680 	.word	0xffffc680

0c0266fc <mbedtls_calloc>:
static void * (*mbedtls_calloc_func)( size_t, size_t ) = MBEDTLS_PLATFORM_STD_CALLOC;
static void (*mbedtls_free_func)( void * ) = MBEDTLS_PLATFORM_STD_FREE;

void * mbedtls_calloc( size_t nmemb, size_t size )
{
    return (*mbedtls_calloc_func)( nmemb, size );
 c0266fc:	4b01      	ldr	r3, [pc, #4]	; (c026704 <mbedtls_calloc+0x8>)
 c0266fe:	681b      	ldr	r3, [r3, #0]
 c026700:	4718      	bx	r3
 c026702:	bf00      	nop
 c026704:	30035b44 	.word	0x30035b44

0c026708 <mbedtls_free>:
}

void mbedtls_free( void * ptr )
{
    (*mbedtls_free_func)( ptr );
 c026708:	4b01      	ldr	r3, [pc, #4]	; (c026710 <mbedtls_free+0x8>)
 c02670a:	681b      	ldr	r3, [r3, #0]
 c02670c:	4718      	bx	r3
 c02670e:	bf00      	nop
 c026710:	30035b48 	.word	0x30035b48

0c026714 <mbedtls_platform_set_calloc_free>:
}

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc_func = calloc_func;
 c026714:	4b02      	ldr	r3, [pc, #8]	; (c026720 <mbedtls_platform_set_calloc_free+0xc>)
 c026716:	6018      	str	r0, [r3, #0]
    mbedtls_free_func = free_func;
 c026718:	4b02      	ldr	r3, [pc, #8]	; (c026724 <mbedtls_platform_set_calloc_free+0x10>)
    return( 0 );
}
 c02671a:	2000      	movs	r0, #0
    mbedtls_free_func = free_func;
 c02671c:	6019      	str	r1, [r3, #0]
}
 c02671e:	4770      	bx	lr
 c026720:	30035b44 	.word	0x30035b44
 c026724:	30035b48 	.word	0x30035b48

0c026728 <mbedtls_platform_zeroize>:
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    memset_func( buf, 0, len );
 c026728:	4b02      	ldr	r3, [pc, #8]	; (c026734 <mbedtls_platform_zeroize+0xc>)
 c02672a:	460a      	mov	r2, r1
 c02672c:	681b      	ldr	r3, [r3, #0]
 c02672e:	2100      	movs	r1, #0
 c026730:	4718      	bx	r3
 c026732:	bf00      	nop
 c026734:	30035b4c 	.word	0x30035b4c

0c026738 <mbedtls_to_psa_error>:

static psa_status_t mbedtls_to_psa_error( int ret )
{
    /* If there's both a high-level code and low-level code, dispatch on
     * the high-level code. */
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 c026738:	f110 0f7f 	cmn.w	r0, #127	; 0x7f
 c02673c:	bfbe      	ittt	lt
 c02673e:	4240      	neglt	r0, r0
 c026740:	f400 40ff 	andlt.w	r0, r0, #32640	; 0x7f80
 c026744:	4240      	neglt	r0, r0
 c026746:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
 c02674a:	f000 8166 	beq.w	c026a1a <mbedtls_to_psa_error+0x2e2>
 c02674e:	f300 80c4 	bgt.w	c0268da <mbedtls_to_psa_error+0x1a2>
 c026752:	f510 4f89 	cmn.w	r0, #17536	; 0x4480
 c026756:	d036      	beq.n	c0267c6 <mbedtls_to_psa_error+0x8e>
 c026758:	dc65      	bgt.n	c026826 <mbedtls_to_psa_error+0xee>
 c02675a:	f510 4fa2 	cmn.w	r0, #20736	; 0x5100
 c02675e:	d044      	beq.n	c0267ea <mbedtls_to_psa_error+0xb2>
 c026760:	dc34      	bgt.n	c0267cc <mbedtls_to_psa_error+0x94>
 c026762:	f510 4fc3 	cmn.w	r0, #24960	; 0x6180
 c026766:	d02e      	beq.n	c0267c6 <mbedtls_to_psa_error+0x8e>
 c026768:	dc18      	bgt.n	c02679c <mbedtls_to_psa_error+0x64>
 c02676a:	f510 4fc6 	cmn.w	r0, #25344	; 0x6300
 c02676e:	d045      	beq.n	c0267fc <mbedtls_to_psa_error+0xc4>
 c026770:	dc0a      	bgt.n	c026788 <mbedtls_to_psa_error+0x50>
 c026772:	f510 4fc8 	cmn.w	r0, #25600	; 0x6400
 c026776:	f000 80e1 	beq.w	c02693c <mbedtls_to_psa_error+0x204>
 c02677a:	f510 4fc7 	cmn.w	r0, #25472	; 0x6380
 c02677e:	f000 815c 	beq.w	c026a3a <mbedtls_to_psa_error+0x302>
            return( PSA_ERROR_INSUFFICIENT_MEMORY );
        case MBEDTLS_ERR_ECP_HW_ACCEL_FAILED:
            return( PSA_ERROR_HARDWARE_FAILURE );

        default:
            return( PSA_ERROR_GENERIC_ERROR );
 c026782:	f06f 0083 	mvn.w	r0, #131	; 0x83
    }
}
 c026786:	4770      	bx	lr
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 c026788:	f510 4fc5 	cmn.w	r0, #25216	; 0x6280
 c02678c:	f000 814f 	beq.w	c026a2e <mbedtls_to_psa_error+0x2f6>
 c026790:	f510 4fc4 	cmn.w	r0, #25088	; 0x6200
 c026794:	d1f5      	bne.n	c026782 <mbedtls_to_psa_error+0x4a>
            return( PSA_ERROR_INVALID_PADDING );
 c026796:	f06f 0095 	mvn.w	r0, #149	; 0x95
 c02679a:	4770      	bx	lr
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 c02679c:	f510 4fa5 	cmn.w	r0, #21120	; 0x5280
 c0267a0:	f000 80cc 	beq.w	c02693c <mbedtls_to_psa_error+0x204>
 c0267a4:	dc08      	bgt.n	c0267b8 <mbedtls_to_psa_error+0x80>
 c0267a6:	f510 4fc2 	cmn.w	r0, #24832	; 0x6100
 c0267aa:	d01e      	beq.n	c0267ea <mbedtls_to_psa_error+0xb2>
 c0267ac:	f510 4fc1 	cmn.w	r0, #24704	; 0x6080
 c0267b0:	d1e7      	bne.n	c026782 <mbedtls_to_psa_error+0x4a>
            return( PSA_ERROR_NOT_SUPPORTED );
 c0267b2:	f06f 0085 	mvn.w	r0, #133	; 0x85
 c0267b6:	4770      	bx	lr
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 c0267b8:	f510 4fa4 	cmn.w	r0, #20992	; 0x5200
 c0267bc:	f000 813a 	beq.w	c026a34 <mbedtls_to_psa_error+0x2fc>
 c0267c0:	f510 4fa3 	cmn.w	r0, #20864	; 0x5180
 c0267c4:	d1dd      	bne.n	c026782 <mbedtls_to_psa_error+0x4a>
            return( PSA_ERROR_INSUFFICIENT_MEMORY );
 c0267c6:	f06f 008c 	mvn.w	r0, #140	; 0x8c
 c0267ca:	4770      	bx	lr
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 c0267cc:	f510 4f9b 	cmn.w	r0, #19840	; 0x4d80
 c0267d0:	d0f9      	beq.n	c0267c6 <mbedtls_to_psa_error+0x8e>
 c0267d2:	dc16      	bgt.n	c026802 <mbedtls_to_psa_error+0xca>
 c0267d4:	f510 4f9e 	cmn.w	r0, #20224	; 0x4f00
 c0267d8:	f000 811f 	beq.w	c026a1a <mbedtls_to_psa_error+0x2e2>
 c0267dc:	dc08      	bgt.n	c0267f0 <mbedtls_to_psa_error+0xb8>
 c0267de:	f510 4fa1 	cmn.w	r0, #20608	; 0x5080
 c0267e2:	d0e6      	beq.n	c0267b2 <mbedtls_to_psa_error+0x7a>
 c0267e4:	f510 4f9f 	cmn.w	r0, #20352	; 0x4f80
 c0267e8:	d1cb      	bne.n	c026782 <mbedtls_to_psa_error+0x4a>
            return( PSA_ERROR_INVALID_ARGUMENT );
 c0267ea:	f06f 0086 	mvn.w	r0, #134	; 0x86
 c0267ee:	4770      	bx	lr
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 c0267f0:	f510 4f9d 	cmn.w	r0, #20096	; 0x4e80
 c0267f4:	d0dd      	beq.n	c0267b2 <mbedtls_to_psa_error+0x7a>
 c0267f6:	f510 4f9c 	cmn.w	r0, #19968	; 0x4e00
 c0267fa:	d1c2      	bne.n	c026782 <mbedtls_to_psa_error+0x4a>
            return( PSA_ERROR_INVALID_SIGNATURE );
 c0267fc:	f06f 0094 	mvn.w	r0, #148	; 0x94
 c026800:	4770      	bx	lr
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 c026802:	f510 4f97 	cmn.w	r0, #19328	; 0x4b80
 c026806:	f000 8099 	beq.w	c02693c <mbedtls_to_psa_error+0x204>
 c02680a:	dc05      	bgt.n	c026818 <mbedtls_to_psa_error+0xe0>
 c02680c:	f510 4f99 	cmn.w	r0, #19584	; 0x4c80
 c026810:	d0eb      	beq.n	c0267ea <mbedtls_to_psa_error+0xb2>
 c026812:	f510 4f98 	cmn.w	r0, #19456	; 0x4c00
 c026816:	e7f0      	b.n	c0267fa <mbedtls_to_psa_error+0xc2>
 c026818:	f510 4f8b 	cmn.w	r0, #17792	; 0x4580
 c02681c:	f000 808e 	beq.w	c02693c <mbedtls_to_psa_error+0x204>
 c026820:	f510 4f8a 	cmn.w	r0, #17664	; 0x4500
 c026824:	e7c4      	b.n	c0267b0 <mbedtls_to_psa_error+0x78>
 c026826:	f510 5f78 	cmn.w	r0, #15872	; 0x3e00
 c02682a:	f000 8103 	beq.w	c026a34 <mbedtls_to_psa_error+0x2fc>
 c02682e:	dc27      	bgt.n	c026880 <mbedtls_to_psa_error+0x148>
 c026830:	f510 4f83 	cmn.w	r0, #16768	; 0x4180
 c026834:	f000 8082 	beq.w	c02693c <mbedtls_to_psa_error+0x204>
 c026838:	dc12      	bgt.n	c026860 <mbedtls_to_psa_error+0x128>
 c02683a:	f510 4f86 	cmn.w	r0, #17152	; 0x4300
 c02683e:	f000 80fc 	beq.w	c026a3a <mbedtls_to_psa_error+0x302>
 c026842:	dc06      	bgt.n	c026852 <mbedtls_to_psa_error+0x11a>
 c026844:	f510 4f88 	cmn.w	r0, #17408	; 0x4400
 c026848:	f000 80e7 	beq.w	c026a1a <mbedtls_to_psa_error+0x2e2>
 c02684c:	f510 4f87 	cmn.w	r0, #17280	; 0x4380
 c026850:	e7d3      	b.n	c0267fa <mbedtls_to_psa_error+0xc2>
 c026852:	f510 4f85 	cmn.w	r0, #17024	; 0x4280
 c026856:	f000 80f0 	beq.w	c026a3a <mbedtls_to_psa_error+0x302>
 c02685a:	f510 4f84 	cmn.w	r0, #16896	; 0x4200
 c02685e:	e7c3      	b.n	c0267e8 <mbedtls_to_psa_error+0xb0>
 c026860:	f510 5f7e 	cmn.w	r0, #16256	; 0x3f80
 c026864:	d0af      	beq.n	c0267c6 <mbedtls_to_psa_error+0x8e>
 c026866:	dc05      	bgt.n	c026874 <mbedtls_to_psa_error+0x13c>
 c026868:	f510 4f82 	cmn.w	r0, #16640	; 0x4100
 c02686c:	d093      	beq.n	c026796 <mbedtls_to_psa_error+0x5e>
 c02686e:	f510 4f81 	cmn.w	r0, #16512	; 0x4080
 c026872:	e7b9      	b.n	c0267e8 <mbedtls_to_psa_error+0xb0>
 c026874:	f510 5f7c 	cmn.w	r0, #16128	; 0x3f00
 c026878:	d0b7      	beq.n	c0267ea <mbedtls_to_psa_error+0xb2>
 c02687a:	f510 5f7a 	cmn.w	r0, #16000	; 0x3e80
 c02687e:	e7b3      	b.n	c0267e8 <mbedtls_to_psa_error+0xb0>
 c026880:	f510 5f6c 	cmn.w	r0, #15104	; 0x3b00
 c026884:	d0b1      	beq.n	c0267ea <mbedtls_to_psa_error+0xb2>
 c026886:	dc13      	bgt.n	c0268b0 <mbedtls_to_psa_error+0x178>
 c026888:	f510 5f72 	cmn.w	r0, #15488	; 0x3c80
 c02688c:	d091      	beq.n	c0267b2 <mbedtls_to_psa_error+0x7a>
 c02688e:	dc05      	bgt.n	c02689c <mbedtls_to_psa_error+0x164>
 c026890:	f510 5f76 	cmn.w	r0, #15744	; 0x3d80
 c026894:	d0a9      	beq.n	c0267ea <mbedtls_to_psa_error+0xb2>
 c026896:	f510 5f74 	cmn.w	r0, #15616	; 0x3d00
 c02689a:	e7a5      	b.n	c0267e8 <mbedtls_to_psa_error+0xb0>
 c02689c:	f510 5f70 	cmn.w	r0, #15360	; 0x3c00
 c0268a0:	d003      	beq.n	c0268aa <mbedtls_to_psa_error+0x172>
 c0268a2:	f510 5f6e 	cmn.w	r0, #15232	; 0x3b80
 c0268a6:	f47f af6c 	bne.w	c026782 <mbedtls_to_psa_error+0x4a>
            return( PSA_ERROR_NOT_PERMITTED );
 c0268aa:	f06f 0084 	mvn.w	r0, #132	; 0x84
 c0268ae:	4770      	bx	lr
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 c0268b0:	f510 5f66 	cmn.w	r0, #14720	; 0x3980
 c0268b4:	f43f af7d 	beq.w	c0267b2 <mbedtls_to_psa_error+0x7a>
 c0268b8:	dc06      	bgt.n	c0268c8 <mbedtls_to_psa_error+0x190>
 c0268ba:	f510 5f6a 	cmn.w	r0, #14976	; 0x3a80
 c0268be:	f43f af78 	beq.w	c0267b2 <mbedtls_to_psa_error+0x7a>
 c0268c2:	f510 5f68 	cmn.w	r0, #14848	; 0x3a00
 c0268c6:	e773      	b.n	c0267b0 <mbedtls_to_psa_error+0x78>
 c0268c8:	f510 5f62 	cmn.w	r0, #14464	; 0x3880
 c0268cc:	d036      	beq.n	c02693c <mbedtls_to_psa_error+0x204>
 c0268ce:	f110 0f7a 	cmn.w	r0, #122	; 0x7a
 c0268d2:	d033      	beq.n	c02693c <mbedtls_to_psa_error+0x204>
 c0268d4:	f510 5f64 	cmn.w	r0, #14592	; 0x3900
 c0268d8:	e78f      	b.n	c0267fa <mbedtls_to_psa_error+0xc2>
 c0268da:	f110 0f27 	cmn.w	r0, #39	; 0x27
 c0268de:	d02d      	beq.n	c02693c <mbedtls_to_psa_error+0x204>
 c0268e0:	dc52      	bgt.n	c026988 <mbedtls_to_psa_error+0x250>
 c0268e2:	f110 0f38 	cmn.w	r0, #56	; 0x38
 c0268e6:	f43f af64 	beq.w	c0267b2 <mbedtls_to_psa_error+0x7a>
 c0268ea:	dc2a      	bgt.n	c026942 <mbedtls_to_psa_error+0x20a>
 c0268ec:	f110 0f60 	cmn.w	r0, #96	; 0x60
 c0268f0:	f43f af7b 	beq.w	c0267ea <mbedtls_to_psa_error+0xb2>
 c0268f4:	dc10      	bgt.n	c026918 <mbedtls_to_psa_error+0x1e0>
 c0268f6:	f110 0f66 	cmn.w	r0, #102	; 0x66
 c0268fa:	f43f af76 	beq.w	c0267ea <mbedtls_to_psa_error+0xb2>
 c0268fe:	dc05      	bgt.n	c02690c <mbedtls_to_psa_error+0x1d4>
 c026900:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
 c026904:	f43f af5f 	beq.w	c0267c6 <mbedtls_to_psa_error+0x8e>
 c026908:	3068      	adds	r0, #104	; 0x68
 c02690a:	e76d      	b.n	c0267e8 <mbedtls_to_psa_error+0xb0>
 c02690c:	f110 0f64 	cmn.w	r0, #100	; 0x64
 c026910:	f43f af6b 	beq.w	c0267ea <mbedtls_to_psa_error+0xb2>
 c026914:	3062      	adds	r0, #98	; 0x62
 c026916:	e767      	b.n	c0267e8 <mbedtls_to_psa_error+0xb0>
 c026918:	f110 0f3c 	cmn.w	r0, #60	; 0x3c
 c02691c:	dc08      	bgt.n	c026930 <mbedtls_to_psa_error+0x1f8>
 c02691e:	f110 0f3d 	cmn.w	r0, #61	; 0x3d
 c026922:	da02      	bge.n	c02692a <mbedtls_to_psa_error+0x1f2>
 c026924:	3040      	adds	r0, #64	; 0x40
 c026926:	f47f af2c 	bne.w	c026782 <mbedtls_to_psa_error+0x4a>
            return( PSA_ERROR_INSUFFICIENT_ENTROPY );
 c02692a:	f06f 0093 	mvn.w	r0, #147	; 0x93
 c02692e:	4770      	bx	lr
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 c026930:	f110 0f3a 	cmn.w	r0, #58	; 0x3a
 c026934:	d0f9      	beq.n	c02692a <mbedtls_to_psa_error+0x1f2>
 c026936:	3039      	adds	r0, #57	; 0x39
 c026938:	f47f af23 	bne.w	c026782 <mbedtls_to_psa_error+0x4a>
            return( PSA_ERROR_HARDWARE_FAILURE );
 c02693c:	f06f 0092 	mvn.w	r0, #146	; 0x92
 c026940:	4770      	bx	lr
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 c026942:	f110 0f32 	cmn.w	r0, #50	; 0x32
 c026946:	f43f af34 	beq.w	c0267b2 <mbedtls_to_psa_error+0x7a>
 c02694a:	dc0d      	bgt.n	c026968 <mbedtls_to_psa_error+0x230>
 c02694c:	f110 0f35 	cmn.w	r0, #53	; 0x35
 c026950:	d0f4      	beq.n	c02693c <mbedtls_to_psa_error+0x204>
 c026952:	dc04      	bgt.n	c02695e <mbedtls_to_psa_error+0x226>
 c026954:	f110 0f37 	cmn.w	r0, #55	; 0x37
 c026958:	d0f0      	beq.n	c02693c <mbedtls_to_psa_error+0x204>
 c02695a:	3036      	adds	r0, #54	; 0x36
 c02695c:	e728      	b.n	c0267b0 <mbedtls_to_psa_error+0x78>
 c02695e:	f110 0f34 	cmn.w	r0, #52	; 0x34
 c026962:	d0e2      	beq.n	c02692a <mbedtls_to_psa_error+0x1f2>
 c026964:	3033      	adds	r0, #51	; 0x33
 c026966:	e7e7      	b.n	c026938 <mbedtls_to_psa_error+0x200>
 c026968:	f110 0f2d 	cmn.w	r0, #45	; 0x2d
 c02696c:	d0e6      	beq.n	c02693c <mbedtls_to_psa_error+0x204>
 c02696e:	dc04      	bgt.n	c02697a <mbedtls_to_psa_error+0x242>
 c026970:	f110 0f31 	cmn.w	r0, #49	; 0x31
 c026974:	d0e2      	beq.n	c02693c <mbedtls_to_psa_error+0x204>
 c026976:	302f      	adds	r0, #47	; 0x2f
 c026978:	e7de      	b.n	c026938 <mbedtls_to_psa_error+0x200>
 c02697a:	f110 0f29 	cmn.w	r0, #41	; 0x29
 c02697e:	d0dd      	beq.n	c02693c <mbedtls_to_psa_error+0x204>
 c026980:	f73f af33 	bgt.w	c0267ea <mbedtls_to_psa_error+0xb2>
 c026984:	302b      	adds	r0, #43	; 0x2b
 c026986:	e7d7      	b.n	c026938 <mbedtls_to_psa_error+0x200>
 c026988:	f110 0f12 	cmn.w	r0, #18
 c02698c:	f43f af36 	beq.w	c0267fc <mbedtls_to_psa_error+0xc4>
 c026990:	dc23      	bgt.n	c0269da <mbedtls_to_psa_error+0x2a2>
 c026992:	f110 0f19 	cmn.w	r0, #25
 c026996:	d0d1      	beq.n	c02693c <mbedtls_to_psa_error+0x204>
 c026998:	dc0e      	bgt.n	c0269b8 <mbedtls_to_psa_error+0x280>
 c02699a:	f110 0f22 	cmn.w	r0, #34	; 0x22
 c02699e:	dc09      	bgt.n	c0269b4 <mbedtls_to_psa_error+0x27c>
 c0269a0:	f110 0f24 	cmn.w	r0, #36	; 0x24
 c0269a4:	f6bf af05 	bge.w	c0267b2 <mbedtls_to_psa_error+0x7a>
 c0269a8:	f110 0f26 	cmn.w	r0, #38	; 0x26
 c0269ac:	f43f af01 	beq.w	c0267b2 <mbedtls_to_psa_error+0x7a>
 c0269b0:	3025      	adds	r0, #37	; 0x25
 c0269b2:	e7c1      	b.n	c026938 <mbedtls_to_psa_error+0x200>
 c0269b4:	3020      	adds	r0, #32
 c0269b6:	e6fb      	b.n	c0267b0 <mbedtls_to_psa_error+0x78>
 c0269b8:	f110 0f16 	cmn.w	r0, #22
 c0269bc:	f43f aef9 	beq.w	c0267b2 <mbedtls_to_psa_error+0x7a>
 c0269c0:	dc05      	bgt.n	c0269ce <mbedtls_to_psa_error+0x296>
 c0269c2:	f110 0f18 	cmn.w	r0, #24
 c0269c6:	f43f aef4 	beq.w	c0267b2 <mbedtls_to_psa_error+0x7a>
 c0269ca:	3017      	adds	r0, #23
 c0269cc:	e7b4      	b.n	c026938 <mbedtls_to_psa_error+0x200>
 c0269ce:	f110 0f14 	cmn.w	r0, #20
 c0269d2:	f43f af0a 	beq.w	c0267ea <mbedtls_to_psa_error+0xb2>
 c0269d6:	3013      	adds	r0, #19
 c0269d8:	e7ae      	b.n	c026938 <mbedtls_to_psa_error+0x200>
 c0269da:	f110 0f0c 	cmn.w	r0, #12
 c0269de:	f43f af04 	beq.w	c0267ea <mbedtls_to_psa_error+0xb2>
 c0269e2:	dc0f      	bgt.n	c026a04 <mbedtls_to_psa_error+0x2cc>
 c0269e4:	f110 0f0f 	cmn.w	r0, #15
 c0269e8:	f43f af08 	beq.w	c0267fc <mbedtls_to_psa_error+0xc4>
 c0269ec:	dc04      	bgt.n	c0269f8 <mbedtls_to_psa_error+0x2c0>
 c0269ee:	f110 0f11 	cmn.w	r0, #17
 c0269f2:	d0a3      	beq.n	c02693c <mbedtls_to_psa_error+0x204>
 c0269f4:	3010      	adds	r0, #16
 c0269f6:	e6e5      	b.n	c0267c4 <mbedtls_to_psa_error+0x8c>
 c0269f8:	f110 0f0e 	cmn.w	r0, #14
 c0269fc:	f43f aef5 	beq.w	c0267ea <mbedtls_to_psa_error+0xb2>
 c026a00:	300d      	adds	r0, #13
 c026a02:	e6f1      	b.n	c0267e8 <mbedtls_to_psa_error+0xb0>
 c026a04:	1d82      	adds	r2, r0, #6
 c026a06:	f43f aef0 	beq.w	c0267ea <mbedtls_to_psa_error+0xb2>
 c026a0a:	dc09      	bgt.n	c026a20 <mbedtls_to_psa_error+0x2e8>
 c026a0c:	f110 0f0a 	cmn.w	r0, #10
 c026a10:	f43f aeeb 	beq.w	c0267ea <mbedtls_to_psa_error+0xb2>
 c026a14:	3008      	adds	r0, #8
 c026a16:	f47f aeb4 	bne.w	c026782 <mbedtls_to_psa_error+0x4a>
            return( PSA_ERROR_BUFFER_TOO_SMALL );
 c026a1a:	f06f 0089 	mvn.w	r0, #137	; 0x89
 c026a1e:	4770      	bx	lr
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 c026a20:	1c83      	adds	r3, r0, #2
 c026a22:	d007      	beq.n	c026a34 <mbedtls_to_psa_error+0x2fc>
 c026a24:	2800      	cmp	r0, #0
 c026a26:	f43f aeae 	beq.w	c026786 <mbedtls_to_psa_error+0x4e>
 c026a2a:	3004      	adds	r0, #4
 c026a2c:	e6dc      	b.n	c0267e8 <mbedtls_to_psa_error+0xb0>
            return( PSA_ERROR_BAD_STATE );
 c026a2e:	f06f 0088 	mvn.w	r0, #136	; 0x88
 c026a32:	4770      	bx	lr
            return( PSA_ERROR_STORAGE_FAILURE );
 c026a34:	f06f 0091 	mvn.w	r0, #145	; 0x91
 c026a38:	4770      	bx	lr
            return( PSA_ERROR_TAMPERING_DETECTED );
 c026a3a:	f06f 0096 	mvn.w	r0, #150	; 0x96
 c026a3e:	4770      	bx	lr

0c026a40 <psa_generator_tls12_prf_setup>:
    psa_algorithm_t hash_alg,
    const uint8_t *salt,
    size_t salt_length,
    const uint8_t *label,
    size_t label_length )
{
 c026a40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t hash_length = PSA_HASH_SIZE( hash_alg );
 c026a44:	b2dc      	uxtb	r4, r3
 c026a46:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 c026a4a:	f104 437f 	add.w	r3, r4, #4278190080	; 0xff000000
 c026a4e:	3b01      	subs	r3, #1
 c026a50:	2b02      	cmp	r3, #2
{
 c026a52:	4606      	mov	r6, r0
 c026a54:	468b      	mov	fp, r1
 c026a56:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 c026a5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    uint8_t hash_length = PSA_HASH_SIZE( hash_alg );
 c026a5c:	d93e      	bls.n	c026adc <psa_generator_tls12_prf_setup+0x9c>
 c026a5e:	f104 437f 	add.w	r3, r4, #4278190080	; 0xff000000
 c026a62:	3b04      	subs	r3, #4
 c026a64:	2b01      	cmp	r3, #1
 c026a66:	d93b      	bls.n	c026ae0 <psa_generator_tls12_prf_setup+0xa0>
 c026a68:	4b38      	ldr	r3, [pc, #224]	; (c026b4c <psa_generator_tls12_prf_setup+0x10c>)
 c026a6a:	429c      	cmp	r4, r3
 c026a6c:	d03c      	beq.n	c026ae8 <psa_generator_tls12_prf_setup+0xa8>
 c026a6e:	3301      	adds	r3, #1
 c026a70:	429c      	cmp	r4, r3
 c026a72:	d03b      	beq.n	c026aec <psa_generator_tls12_prf_setup+0xac>
 c026a74:	3301      	adds	r3, #1
 c026a76:	429c      	cmp	r4, r3
 c026a78:	d03a      	beq.n	c026af0 <psa_generator_tls12_prf_setup+0xb0>
 c026a7a:	3301      	adds	r3, #1
 c026a7c:	429c      	cmp	r4, r3
 c026a7e:	d031      	beq.n	c026ae4 <psa_generator_tls12_prf_setup+0xa4>
 c026a80:	3301      	adds	r3, #1
 c026a82:	429c      	cmp	r4, r3
 c026a84:	d030      	beq.n	c026ae8 <psa_generator_tls12_prf_setup+0xa8>
 c026a86:	3301      	adds	r3, #1
 c026a88:	429c      	cmp	r4, r3
 c026a8a:	d02f      	beq.n	c026aec <psa_generator_tls12_prf_setup+0xac>
 c026a8c:	3303      	adds	r3, #3
 c026a8e:	429c      	cmp	r4, r3
 c026a90:	d02a      	beq.n	c026ae8 <psa_generator_tls12_prf_setup+0xa8>
 c026a92:	3301      	adds	r3, #1
 c026a94:	429c      	cmp	r4, r3
 c026a96:	d029      	beq.n	c026aec <psa_generator_tls12_prf_setup+0xac>
 c026a98:	3301      	adds	r3, #1
 c026a9a:	429c      	cmp	r4, r3
 c026a9c:	d028      	beq.n	c026af0 <psa_generator_tls12_prf_setup+0xb0>
 c026a9e:	3301      	adds	r3, #1
 c026aa0:	429c      	cmp	r4, r3
 c026aa2:	bf0c      	ite	eq
 c026aa4:	2440      	moveq	r4, #64	; 0x40
 c026aa6:	2400      	movne	r4, #0
 c026aa8:	eb18 0705 	adds.w	r7, r8, r5
    size_t Ai_with_seed_len = hash_length + salt_length + label_length;
    int overflow;

    tls12_prf->key = mbedtls_calloc( 1, key_len );
 c026aac:	4611      	mov	r1, r2
 c026aae:	bf2c      	ite	cs
 c026ab0:	f04f 0a01 	movcs.w	sl, #1
 c026ab4:	f04f 0a00 	movcc.w	sl, #0
 c026ab8:	2001      	movs	r0, #1
 c026aba:	19e7      	adds	r7, r4, r7
 c026abc:	9201      	str	r2, [sp, #4]
 c026abe:	bf2c      	ite	cs
 c026ac0:	f04f 0901 	movcs.w	r9, #1
 c026ac4:	f04f 0900 	movcc.w	r9, #0
 c026ac8:	f7ff fe18 	bl	c0266fc <mbedtls_calloc>
    if( tls12_prf->key == NULL )
 c026acc:	9a01      	ldr	r2, [sp, #4]
    tls12_prf->key = mbedtls_calloc( 1, key_len );
 c026ace:	6030      	str	r0, [r6, #0]
    if( tls12_prf->key == NULL )
 c026ad0:	b980      	cbnz	r0, c026af4 <psa_generator_tls12_prf_setup+0xb4>
        return( PSA_ERROR_INSUFFICIENT_MEMORY );
 c026ad2:	f06f 008c 	mvn.w	r0, #140	; 0x8c
     * psa_generator_read() is called. */
    tls12_prf->block_number    = 0;
    tls12_prf->offset_in_block = hash_length;

    return( PSA_SUCCESS );
}
 c026ad6:	b003      	add	sp, #12
 c026ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t hash_length = PSA_HASH_SIZE( hash_alg );
 c026adc:	2410      	movs	r4, #16
 c026ade:	e7e3      	b.n	c026aa8 <psa_generator_tls12_prf_setup+0x68>
 c026ae0:	2414      	movs	r4, #20
 c026ae2:	e7e1      	b.n	c026aa8 <psa_generator_tls12_prf_setup+0x68>
 c026ae4:	2440      	movs	r4, #64	; 0x40
 c026ae6:	e7df      	b.n	c026aa8 <psa_generator_tls12_prf_setup+0x68>
 c026ae8:	241c      	movs	r4, #28
 c026aea:	e7dd      	b.n	c026aa8 <psa_generator_tls12_prf_setup+0x68>
 c026aec:	2420      	movs	r4, #32
 c026aee:	e7db      	b.n	c026aa8 <psa_generator_tls12_prf_setup+0x68>
 c026af0:	2430      	movs	r4, #48	; 0x30
 c026af2:	e7d9      	b.n	c026aa8 <psa_generator_tls12_prf_setup+0x68>
    tls12_prf->key_len = key_len;
 c026af4:	6072      	str	r2, [r6, #4]
    memcpy( tls12_prf->key, key, key_len );
 c026af6:	4659      	mov	r1, fp
 c026af8:	f7ed ff41 	bl	c01497e <memcpy>
    overflow = ( salt_length + label_length               < salt_length ) ||
 c026afc:	f1ba 0f00 	cmp.w	sl, #0
 c026b00:	d120      	bne.n	c026b44 <psa_generator_tls12_prf_setup+0x104>
 c026b02:	f1b9 0f00 	cmp.w	r9, #0
 c026b06:	d11d      	bne.n	c026b44 <psa_generator_tls12_prf_setup+0x104>
    tls12_prf->Ai_with_seed = mbedtls_calloc( 1, Ai_with_seed_len );
 c026b08:	4639      	mov	r1, r7
 c026b0a:	2001      	movs	r0, #1
 c026b0c:	f7ff fdf6 	bl	c0266fc <mbedtls_calloc>
 c026b10:	60b0      	str	r0, [r6, #8]
    if( tls12_prf->Ai_with_seed == NULL )
 c026b12:	2800      	cmp	r0, #0
 c026b14:	d0dd      	beq.n	c026ad2 <psa_generator_tls12_prf_setup+0x92>
    tls12_prf->Ai_with_seed_len = Ai_with_seed_len;
 c026b16:	60f7      	str	r7, [r6, #12]
    if( label_length != 0 )
 c026b18:	b125      	cbz	r5, c026b24 <psa_generator_tls12_prf_setup+0xe4>
        memcpy( tls12_prf->Ai_with_seed + hash_length,
 c026b1a:	462a      	mov	r2, r5
 c026b1c:	990e      	ldr	r1, [sp, #56]	; 0x38
 c026b1e:	4420      	add	r0, r4
 c026b20:	f7ed ff2d 	bl	c01497e <memcpy>
    if( salt_length != 0 )
 c026b24:	f1b8 0f00 	cmp.w	r8, #0
 c026b28:	d006      	beq.n	c026b38 <psa_generator_tls12_prf_setup+0xf8>
        memcpy( tls12_prf->Ai_with_seed + hash_length + label_length,
 c026b2a:	68b0      	ldr	r0, [r6, #8]
 c026b2c:	4425      	add	r5, r4
 c026b2e:	4642      	mov	r2, r8
 c026b30:	990c      	ldr	r1, [sp, #48]	; 0x30
 c026b32:	4428      	add	r0, r5
 c026b34:	f7ed ff23 	bl	c01497e <memcpy>
    tls12_prf->block_number    = 0;
 c026b38:	2000      	movs	r0, #0
    tls12_prf->offset_in_block = hash_length;
 c026b3a:	f886 4050 	strb.w	r4, [r6, #80]	; 0x50
    tls12_prf->block_number    = 0;
 c026b3e:	f886 0051 	strb.w	r0, [r6, #81]	; 0x51
    return( PSA_SUCCESS );
 c026b42:	e7c8      	b.n	c026ad6 <psa_generator_tls12_prf_setup+0x96>
        return( PSA_ERROR_INVALID_ARGUMENT );
 c026b44:	f06f 0086 	mvn.w	r0, #134	; 0x86
 c026b48:	e7c5      	b.n	c026ad6 <psa_generator_tls12_prf_setup+0x96>
 c026b4a:	bf00      	nop
 c026b4c:	01000008 	.word	0x01000008

0c026b50 <psa_get_empty_key_slot>:
{
 c026b50:	b513      	push	{r0, r1, r4, lr}
    psa_key_slot_t *slot = NULL;
 c026b52:	2300      	movs	r3, #0
{
 c026b54:	460c      	mov	r4, r1
    psa_key_slot_t *slot = NULL;
 c026b56:	a902      	add	r1, sp, #8
 c026b58:	f841 3d04 	str.w	r3, [r1, #-4]!
    *p_slot = NULL;
 c026b5c:	6023      	str	r3, [r4, #0]
    status = psa_get_key_slot( handle, &slot );
 c026b5e:	f002 fdcd 	bl	c0296fc <psa_get_key_slot>
    if( status != PSA_SUCCESS )
 c026b62:	b918      	cbnz	r0, c026b6c <psa_get_empty_key_slot+0x1c>
    if( slot->type != PSA_KEY_TYPE_NONE )
 c026b64:	9b01      	ldr	r3, [sp, #4]
 c026b66:	681a      	ldr	r2, [r3, #0]
 c026b68:	b912      	cbnz	r2, c026b70 <psa_get_empty_key_slot+0x20>
    *p_slot = slot;
 c026b6a:	6023      	str	r3, [r4, #0]
}
 c026b6c:	b002      	add	sp, #8
 c026b6e:	bd10      	pop	{r4, pc}
        return( PSA_ERROR_ALREADY_EXISTS );
 c026b70:	f06f 008a 	mvn.w	r0, #138	; 0x8a
 c026b74:	e7fa      	b.n	c026b6c <psa_get_empty_key_slot+0x1c>

0c026b76 <psa_generator_tls12_psk_to_ms_setup>:
    psa_algorithm_t hash_alg,
    const uint8_t *salt,
    size_t salt_length,
    const uint8_t *label,
    size_t label_length )
{
 c026b76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    psa_status_t status;
    unsigned char pms[ 4 + 2 * PSA_ALG_TLS12_PSK_TO_MS_MAX_PSK_LEN ];

    if( psk_len > PSA_ALG_TLS12_PSK_TO_MS_MAX_PSK_LEN )
 c026b7a:	2a80      	cmp	r2, #128	; 0x80
{
 c026b7c:	b0c6      	sub	sp, #280	; 0x118
 c026b7e:	4680      	mov	r8, r0
 c026b80:	468a      	mov	sl, r1
 c026b82:	4615      	mov	r5, r2
 c026b84:	4699      	mov	r9, r3
    if( psk_len > PSA_ALG_TLS12_PSK_TO_MS_MAX_PSK_LEN )
 c026b86:	d82d      	bhi.n	c026be4 <psa_generator_tls12_psk_to_ms_setup+0x6e>
     * The premaster secret is formed as follows: if the PSK is N octets
     * long, concatenate a uint16 with the value N, N zero octets, a second
     * uint16 with the value N, and the PSK itself.
     */

    pms[0] = ( psk_len >> 8 ) & 0xff;
 c026b88:	2600      	movs	r6, #0
 c026b8a:	ac05      	add	r4, sp, #20
    pms[1] = ( psk_len >> 0 ) & 0xff;
    memset( pms + 2, 0, psk_len );
    pms[2 + psk_len + 0] = pms[0];
 c026b8c:	1caf      	adds	r7, r5, #2
    memset( pms + 2, 0, psk_len );
 c026b8e:	4631      	mov	r1, r6
 c026b90:	f10d 0016 	add.w	r0, sp, #22
    pms[1] = ( psk_len >> 0 ) & 0xff;
 c026b94:	f88d 2015 	strb.w	r2, [sp, #21]
    pms[0] = ( psk_len >> 8 ) & 0xff;
 c026b98:	f88d 6014 	strb.w	r6, [sp, #20]
    memset( pms + 2, 0, psk_len );
 c026b9c:	f7ed ff13 	bl	c0149c6 <memset>
    pms[2 + psk_len + 0] = pms[0];
 c026ba0:	55e6      	strb	r6, [r4, r7]
    pms[2 + psk_len + 1] = pms[1];
 c026ba2:	7862      	ldrb	r2, [r4, #1]
 c026ba4:	1963      	adds	r3, r4, r5
    memcpy( pms + 4 + psk_len, psk, psk_len );
 c026ba6:	1d28      	adds	r0, r5, #4
    pms[2 + psk_len + 1] = pms[1];
 c026ba8:	70da      	strb	r2, [r3, #3]
    memcpy( pms + 4 + psk_len, psk, psk_len );
 c026baa:	4651      	mov	r1, sl
 c026bac:	462a      	mov	r2, r5
 c026bae:	4420      	add	r0, r4
 c026bb0:	f7ed fee5 	bl	c01497e <memcpy>

    status = psa_generator_tls12_prf_setup( tls12_prf,
 c026bb4:	9b51      	ldr	r3, [sp, #324]	; 0x144
 c026bb6:	4621      	mov	r1, r4
 c026bb8:	9303      	str	r3, [sp, #12]
 c026bba:	9b50      	ldr	r3, [sp, #320]	; 0x140
 c026bbc:	007a      	lsls	r2, r7, #1
 c026bbe:	9302      	str	r3, [sp, #8]
 c026bc0:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 c026bc2:	4640      	mov	r0, r8
 c026bc4:	9301      	str	r3, [sp, #4]
 c026bc6:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 c026bc8:	9300      	str	r3, [sp, #0]
 c026bca:	464b      	mov	r3, r9
 c026bcc:	f7ff ff38 	bl	c026a40 <psa_generator_tls12_prf_setup>
                                            pms, 4 + 2 * psk_len,
                                            hash_alg,
                                            salt, salt_length,
                                            label, label_length );

    mbedtls_platform_zeroize( pms, sizeof( pms ) );
 c026bd0:	f44f 7182 	mov.w	r1, #260	; 0x104
    status = psa_generator_tls12_prf_setup( tls12_prf,
 c026bd4:	4605      	mov	r5, r0
    mbedtls_platform_zeroize( pms, sizeof( pms ) );
 c026bd6:	4620      	mov	r0, r4
 c026bd8:	f7ff fda6 	bl	c026728 <mbedtls_platform_zeroize>
    return( status );
}
 c026bdc:	4628      	mov	r0, r5
 c026bde:	b046      	add	sp, #280	; 0x118
 c026be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return( PSA_ERROR_INVALID_ARGUMENT );
 c026be4:	f06f 0586 	mvn.w	r5, #134	; 0x86
 c026be8:	e7f8      	b.n	c026bdc <psa_generator_tls12_psk_to_ms_setup+0x66>
	...

0c026bec <mbedtls_cipher_info_from_psa>:
{
 c026bec:	b410      	push	{r4}
 c026bee:	4614      	mov	r4, r2
    if( PSA_ALG_IS_AEAD( alg ) )
 c026bf0:	f000 42fe 	and.w	r2, r0, #2130706432	; 0x7f000000
 c026bf4:	f1b2 6fc0 	cmp.w	r2, #100663296	; 0x6000000
        alg = PSA_ALG_AEAD_WITH_TAG_LENGTH( alg, 0 );
 c026bf8:	bf08      	it	eq
 c026bfa:	f420 507c 	biceq.w	r0, r0, #16128	; 0x3f00
    if( PSA_ALG_IS_CIPHER( alg ) || PSA_ALG_IS_AEAD( alg ) )
 c026bfe:	f000 42fa 	and.w	r2, r0, #2097152000	; 0x7d000000
 c026c02:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 c026c06:	d12e      	bne.n	c026c66 <mbedtls_cipher_info_from_psa+0x7a>
        switch( alg )
 c026c08:	4a25      	ldr	r2, [pc, #148]	; (c026ca0 <mbedtls_cipher_info_from_psa+0xb4>)
 c026c0a:	4290      	cmp	r0, r2
 c026c0c:	d019      	beq.n	c026c42 <mbedtls_cipher_info_from_psa+0x56>
 c026c0e:	d80c      	bhi.n	c026c2a <mbedtls_cipher_info_from_psa+0x3e>
 c026c10:	4a24      	ldr	r2, [pc, #144]	; (c026ca4 <mbedtls_cipher_info_from_psa+0xb8>)
 c026c12:	4290      	cmp	r0, r2
 c026c14:	d305      	bcc.n	c026c22 <mbedtls_cipher_info_from_psa+0x36>
 c026c16:	3201      	adds	r2, #1
 c026c18:	4290      	cmp	r0, r2
 c026c1a:	d920      	bls.n	c026c5e <mbedtls_cipher_info_from_psa+0x72>
 c026c1c:	4a22      	ldr	r2, [pc, #136]	; (c026ca8 <mbedtls_cipher_info_from_psa+0xbc>)
 c026c1e:	4290      	cmp	r0, r2
 c026c20:	d026      	beq.n	c026c70 <mbedtls_cipher_info_from_psa+0x84>
}
 c026c22:	2000      	movs	r0, #0
 c026c24:	f85d 4b04 	ldr.w	r4, [sp], #4
 c026c28:	4770      	bx	lr
        switch( alg )
 c026c2a:	4a20      	ldr	r2, [pc, #128]	; (c026cac <mbedtls_cipher_info_from_psa+0xc0>)
 c026c2c:	4290      	cmp	r0, r2
 c026c2e:	d014      	beq.n	c026c5a <mbedtls_cipher_info_from_psa+0x6e>
 c026c30:	d311      	bcc.n	c026c56 <mbedtls_cipher_info_from_psa+0x6a>
 c026c32:	4a1f      	ldr	r2, [pc, #124]	; (c026cb0 <mbedtls_cipher_info_from_psa+0xc4>)
 c026c34:	4290      	cmp	r0, r2
 c026c36:	d014      	beq.n	c026c62 <mbedtls_cipher_info_from_psa+0x76>
    else if( alg == PSA_ALG_GMAC )
 c026c38:	3201      	adds	r2, #1
 c026c3a:	4290      	cmp	r0, r2
 c026c3c:	d1f1      	bne.n	c026c22 <mbedtls_cipher_info_from_psa+0x36>
        mode = MBEDTLS_MODE_GCM;
 c026c3e:	2206      	movs	r2, #6
 c026c40:	e000      	b.n	c026c44 <mbedtls_cipher_info_from_psa+0x58>
                mode = MBEDTLS_MODE_CTR;
 c026c42:	2205      	movs	r2, #5
    switch( key_type )
 c026c44:	f101 4040 	add.w	r0, r1, #3221225472	; 0xc0000000
 c026c48:	3801      	subs	r0, #1
 c026c4a:	2803      	cmp	r0, #3
 c026c4c:	d8e9      	bhi.n	c026c22 <mbedtls_cipher_info_from_psa+0x36>
 c026c4e:	e8df f000 	tbb	[pc, r0]
 c026c52:	1923      	.short	0x1923
 c026c54:	2111      	.short	0x2111
                mode = MBEDTLS_MODE_CFB;
 c026c56:	2203      	movs	r2, #3
                break;
 c026c58:	e7f4      	b.n	c026c44 <mbedtls_cipher_info_from_psa+0x58>
                mode = MBEDTLS_MODE_OFB;
 c026c5a:	2204      	movs	r2, #4
                break;
 c026c5c:	e7f2      	b.n	c026c44 <mbedtls_cipher_info_from_psa+0x58>
                mode = MBEDTLS_MODE_CBC;
 c026c5e:	2202      	movs	r2, #2
                break;
 c026c60:	e7f0      	b.n	c026c44 <mbedtls_cipher_info_from_psa+0x58>
                mode = MBEDTLS_MODE_CCM;
 c026c62:	2208      	movs	r2, #8
                break;
 c026c64:	e7ee      	b.n	c026c44 <mbedtls_cipher_info_from_psa+0x58>
    else if( alg == PSA_ALG_CMAC )
 c026c66:	4a13      	ldr	r2, [pc, #76]	; (c026cb4 <mbedtls_cipher_info_from_psa+0xc8>)
 c026c68:	4290      	cmp	r0, r2
 c026c6a:	d1e5      	bne.n	c026c38 <mbedtls_cipher_info_from_psa+0x4c>
        mode = MBEDTLS_MODE_ECB;
 c026c6c:	2201      	movs	r2, #1
 c026c6e:	e7e9      	b.n	c026c44 <mbedtls_cipher_info_from_psa+0x58>
                mode = MBEDTLS_MODE_STREAM;
 c026c70:	2207      	movs	r2, #7
 c026c72:	e7e7      	b.n	c026c44 <mbedtls_cipher_info_from_psa+0x58>
            cipher_id_tmp = MBEDTLS_CIPHER_ID_CAMELLIA;
 c026c74:	2005      	movs	r0, #5
    if( cipher_id != NULL )
 c026c76:	b103      	cbz	r3, c026c7a <mbedtls_cipher_info_from_psa+0x8e>
        *cipher_id = cipher_id_tmp;
 c026c78:	7018      	strb	r0, [r3, #0]
    return( mbedtls_cipher_info_from_values( cipher_id_tmp,
 c026c7a:	4621      	mov	r1, r4
}
 c026c7c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return( mbedtls_cipher_info_from_values( cipher_id_tmp,
 c026c80:	f7f9 b854 	b.w	c01fd2c <mbedtls_cipher_info_from_values>
            if( key_bits == 64 )
 c026c84:	2c40      	cmp	r4, #64	; 0x40
 c026c86:	d009      	beq.n	c026c9c <mbedtls_cipher_info_from_psa+0xb0>
            if( key_bits == 128 )
 c026c88:	2c80      	cmp	r4, #128	; 0x80
                cipher_id_tmp = MBEDTLS_CIPHER_ID_3DES;
 c026c8a:	f04f 0004 	mov.w	r0, #4
            if( key_bits == 128 )
 c026c8e:	d1f2      	bne.n	c026c76 <mbedtls_cipher_info_from_psa+0x8a>
                key_bits = 192;
 c026c90:	24c0      	movs	r4, #192	; 0xc0
 c026c92:	e7f0      	b.n	c026c76 <mbedtls_cipher_info_from_psa+0x8a>
            cipher_id_tmp = MBEDTLS_CIPHER_ID_ARC4;
 c026c94:	2007      	movs	r0, #7
            break;
 c026c96:	e7ee      	b.n	c026c76 <mbedtls_cipher_info_from_psa+0x8a>
            cipher_id_tmp = MBEDTLS_CIPHER_ID_AES;
 c026c98:	2002      	movs	r0, #2
 c026c9a:	e7ec      	b.n	c026c76 <mbedtls_cipher_info_from_psa+0x8a>
                cipher_id_tmp = MBEDTLS_CIPHER_ID_DES;
 c026c9c:	2003      	movs	r0, #3
 c026c9e:	e7ea      	b.n	c026c76 <mbedtls_cipher_info_from_psa+0x8a>
 c026ca0:	04c00001 	.word	0x04c00001
 c026ca4:	04600100 	.word	0x04600100
 c026ca8:	04800001 	.word	0x04800001
 c026cac:	04c00003 	.word	0x04c00003
 c026cb0:	06000001 	.word	0x06000001
 c026cb4:	02c00002 	.word	0x02c00002

0c026cb8 <psa_aead_abort>:
    switch( operation->core_alg )
 c026cb8:	f8d0 3198 	ldr.w	r3, [r0, #408]	; 0x198
 c026cbc:	4a06      	ldr	r2, [pc, #24]	; (c026cd8 <psa_aead_abort+0x20>)
 c026cbe:	4293      	cmp	r3, r2
 c026cc0:	d003      	beq.n	c026cca <psa_aead_abort+0x12>
 c026cc2:	3201      	adds	r2, #1
 c026cc4:	4293      	cmp	r3, r2
 c026cc6:	d003      	beq.n	c026cd0 <psa_aead_abort+0x18>
 c026cc8:	4770      	bx	lr
            mbedtls_ccm_free( &operation->ctx.ccm );
 c026cca:	3008      	adds	r0, #8
 c026ccc:	f7f8 bee0 	b.w	c01fa90 <mbedtls_ccm_free>
            mbedtls_gcm_free( &operation->ctx.gcm );
 c026cd0:	3008      	adds	r0, #8
 c026cd2:	f7fd b9ec 	b.w	c0240ae <mbedtls_gcm_free>
 c026cd6:	bf00      	nop
 c026cd8:	06001001 	.word	0x06001001

0c026cdc <psa_key_policy_algorithm_intersection.part.1>:
    if( PSA_ALG_IS_HASH_AND_SIGN( alg1 ) &&
 c026cdc:	4b23      	ldr	r3, [pc, #140]	; (c026d6c <psa_key_policy_algorithm_intersection.part.1+0x90>)
 c026cde:	4a24      	ldr	r2, [pc, #144]	; (c026d70 <psa_key_policy_algorithm_intersection.part.1+0x94>)
static psa_algorithm_t psa_key_policy_algorithm_intersection(
 c026ce0:	b570      	push	{r4, r5, r6, lr}
    if( PSA_ALG_IS_HASH_AND_SIGN( alg1 ) &&
 c026ce2:	ea00 0503 	and.w	r5, r0, r3
 c026ce6:	4295      	cmp	r5, r2
 c026ce8:	d006      	beq.n	c026cf8 <psa_key_policy_algorithm_intersection.part.1+0x1c>
 c026cea:	f420 3440 	bic.w	r4, r0, #196608	; 0x30000
 c026cee:	4e21      	ldr	r6, [pc, #132]	; (c026d74 <psa_key_policy_algorithm_intersection.part.1+0x98>)
 c026cf0:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
 c026cf4:	42b4      	cmp	r4, r6
 c026cf6:	d137      	bne.n	c026d68 <psa_key_policy_algorithm_intersection.part.1+0x8c>
        PSA_ALG_IS_HASH_AND_SIGN( alg2 ) &&
 c026cf8:	400b      	ands	r3, r1
 c026cfa:	4293      	cmp	r3, r2
 c026cfc:	d006      	beq.n	c026d0c <psa_key_policy_algorithm_intersection.part.1+0x30>
 c026cfe:	f421 3240 	bic.w	r2, r1, #196608	; 0x30000
 c026d02:	4c1c      	ldr	r4, [pc, #112]	; (c026d74 <psa_key_policy_algorithm_intersection.part.1+0x98>)
 c026d04:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 c026d08:	42a2      	cmp	r2, r4
 c026d0a:	d12d      	bne.n	c026d68 <psa_key_policy_algorithm_intersection.part.1+0x8c>
        ( alg1 & ~PSA_ALG_HASH_MASK ) == ( alg2 & ~PSA_ALG_HASH_MASK ) )
 c026d0c:	ea80 0201 	eor.w	r2, r0, r1
        PSA_ALG_IS_HASH_AND_SIGN( alg2 ) &&
 c026d10:	f032 02ff 	bics.w	r2, r2, #255	; 0xff
 c026d14:	d128      	bne.n	c026d68 <psa_key_policy_algorithm_intersection.part.1+0x8c>
        if( PSA_ALG_SIGN_GET_HASH( alg1 ) == PSA_ALG_ANY_HASH )
 c026d16:	4a16      	ldr	r2, [pc, #88]	; (c026d70 <psa_key_policy_algorithm_intersection.part.1+0x94>)
 c026d18:	4295      	cmp	r5, r2
 c026d1a:	d006      	beq.n	c026d2a <psa_key_policy_algorithm_intersection.part.1+0x4e>
 c026d1c:	f420 3240 	bic.w	r2, r0, #196608	; 0x30000
 c026d20:	4c14      	ldr	r4, [pc, #80]	; (c026d74 <psa_key_policy_algorithm_intersection.part.1+0x98>)
 c026d22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 c026d26:	42a2      	cmp	r2, r4
 c026d28:	d107      	bne.n	c026d3a <psa_key_policy_algorithm_intersection.part.1+0x5e>
 c026d2a:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
 c026d2e:	d004      	beq.n	c026d3a <psa_key_policy_algorithm_intersection.part.1+0x5e>
 c026d30:	4c11      	ldr	r4, [pc, #68]	; (c026d78 <psa_key_policy_algorithm_intersection.part.1+0x9c>)
 c026d32:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 c026d36:	42a2      	cmp	r2, r4
 c026d38:	d014      	beq.n	c026d64 <psa_key_policy_algorithm_intersection.part.1+0x88>
        if( PSA_ALG_SIGN_GET_HASH( alg2 ) == PSA_ALG_ANY_HASH )
 c026d3a:	4a0d      	ldr	r2, [pc, #52]	; (c026d70 <psa_key_policy_algorithm_intersection.part.1+0x94>)
 c026d3c:	4293      	cmp	r3, r2
 c026d3e:	d007      	beq.n	c026d50 <psa_key_policy_algorithm_intersection.part.1+0x74>
 c026d40:	f421 3340 	bic.w	r3, r1, #196608	; 0x30000
 c026d44:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 c026d48:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 c026d4c:	4293      	cmp	r3, r2
 c026d4e:	d10b      	bne.n	c026d68 <psa_key_policy_algorithm_intersection.part.1+0x8c>
 c026d50:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 c026d54:	d006      	beq.n	c026d64 <psa_key_policy_algorithm_intersection.part.1+0x88>
 c026d56:	4b08      	ldr	r3, [pc, #32]	; (c026d78 <psa_key_policy_algorithm_intersection.part.1+0x9c>)
 c026d58:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 c026d5c:	4299      	cmp	r1, r3
 c026d5e:	bf0c      	ite	eq
 c026d60:	4601      	moveq	r1, r0
 c026d62:	2100      	movne	r1, #0
}
 c026d64:	4608      	mov	r0, r1
 c026d66:	bd70      	pop	{r4, r5, r6, pc}
    return( 0 );
 c026d68:	2100      	movs	r1, #0
 c026d6a:	e7fb      	b.n	c026d64 <psa_key_policy_algorithm_intersection.part.1+0x88>
 c026d6c:	fffeff00 	.word	0xfffeff00
 c026d70:	10020000 	.word	0x10020000
 c026d74:	10040000 	.word	0x10040000
 c026d78:	010000ff 	.word	0x010000ff

0c026d7c <psa_key_algorithm_permits>:
    if( requested_alg == policy_alg )
 c026d7c:	4281      	cmp	r1, r0
{
 c026d7e:	b530      	push	{r4, r5, lr}
    if( requested_alg == policy_alg )
 c026d80:	d025      	beq.n	c026dce <psa_key_algorithm_permits+0x52>
    if( PSA_ALG_IS_HASH_AND_SIGN( requested_alg ) &&
 c026d82:	4b15      	ldr	r3, [pc, #84]	; (c026dd8 <psa_key_algorithm_permits+0x5c>)
 c026d84:	4a15      	ldr	r2, [pc, #84]	; (c026ddc <psa_key_algorithm_permits+0x60>)
 c026d86:	ea01 0403 	and.w	r4, r1, r3
 c026d8a:	4294      	cmp	r4, r2
 c026d8c:	d006      	beq.n	c026d9c <psa_key_algorithm_permits+0x20>
 c026d8e:	f421 3440 	bic.w	r4, r1, #196608	; 0x30000
 c026d92:	4d13      	ldr	r5, [pc, #76]	; (c026de0 <psa_key_algorithm_permits+0x64>)
 c026d94:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
 c026d98:	42ac      	cmp	r4, r5
 c026d9a:	d11a      	bne.n	c026dd2 <psa_key_algorithm_permits+0x56>
        PSA_ALG_SIGN_GET_HASH( policy_alg ) == PSA_ALG_ANY_HASH )
 c026d9c:	4003      	ands	r3, r0
 c026d9e:	4293      	cmp	r3, r2
 c026da0:	d006      	beq.n	c026db0 <psa_key_algorithm_permits+0x34>
 c026da2:	f420 3340 	bic.w	r3, r0, #196608	; 0x30000
 c026da6:	4a0e      	ldr	r2, [pc, #56]	; (c026de0 <psa_key_algorithm_permits+0x64>)
 c026da8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 c026dac:	4293      	cmp	r3, r2
 c026dae:	d110      	bne.n	c026dd2 <psa_key_algorithm_permits+0x56>
 c026db0:	f010 03ff 	ands.w	r3, r0, #255	; 0xff
 c026db4:	d00d      	beq.n	c026dd2 <psa_key_algorithm_permits+0x56>
 c026db6:	4a0b      	ldr	r2, [pc, #44]	; (c026de4 <psa_key_algorithm_permits+0x68>)
 c026db8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c026dbc:	4293      	cmp	r3, r2
 c026dbe:	d108      	bne.n	c026dd2 <psa_key_algorithm_permits+0x56>
        return( ( policy_alg & ~PSA_ALG_HASH_MASK ) ==
 c026dc0:	4041      	eors	r1, r0
 c026dc2:	f031 03ff 	bics.w	r3, r1, #255	; 0xff
 c026dc6:	bf0c      	ite	eq
 c026dc8:	2001      	moveq	r0, #1
 c026dca:	2000      	movne	r0, #0
}
 c026dcc:	bd30      	pop	{r4, r5, pc}
        return( 1 );
 c026dce:	2001      	movs	r0, #1
 c026dd0:	e7fc      	b.n	c026dcc <psa_key_algorithm_permits+0x50>
    return( 0 );
 c026dd2:	2000      	movs	r0, #0
 c026dd4:	e7fa      	b.n	c026dcc <psa_key_algorithm_permits+0x50>
 c026dd6:	bf00      	nop
 c026dd8:	fffeff00 	.word	0xfffeff00
 c026ddc:	10020000 	.word	0x10020000
 c026de0:	10040000 	.word	0x10040000
 c026de4:	010000ff 	.word	0x010000ff

0c026de8 <psa_get_key_from_slot>:
{
 c026de8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 c026dec:	4688      	mov	r8, r1
 c026dee:	461e      	mov	r6, r3
    psa_key_slot_t *slot = NULL;
 c026df0:	2300      	movs	r3, #0
 c026df2:	a902      	add	r1, sp, #8
 c026df4:	f841 3d04 	str.w	r3, [r1, #-4]!
    *p_slot = NULL;
 c026df8:	f8c8 3000 	str.w	r3, [r8]
{
 c026dfc:	4617      	mov	r7, r2
    status = psa_get_key_slot( handle, &slot );
 c026dfe:	f002 fc7d 	bl	c0296fc <psa_get_key_slot>
    if( status != PSA_SUCCESS )
 c026e02:	4604      	mov	r4, r0
 c026e04:	b9d0      	cbnz	r0, c026e3c <psa_get_key_from_slot+0x54>
    if( slot->type == PSA_KEY_TYPE_NONE )
 c026e06:	9d01      	ldr	r5, [sp, #4]
 c026e08:	6829      	ldr	r1, [r5, #0]
 c026e0a:	b1d9      	cbz	r1, c026e44 <psa_get_key_from_slot+0x5c>
    if( PSA_KEY_TYPE_IS_PUBLIC_KEY( slot->type ) )
 c026e0c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 c026e10:	f1b1 4fc0 	cmp.w	r1, #1610612736	; 0x60000000
    if( ( slot->policy.usage & usage ) != usage )
 c026e14:	686b      	ldr	r3, [r5, #4]
        usage &= ~PSA_KEY_USAGE_EXPORT;
 c026e16:	bf08      	it	eq
 c026e18:	f027 0701 	biceq.w	r7, r7, #1
    if( ( slot->policy.usage & usage ) != usage )
 c026e1c:	ea37 0303 	bics.w	r3, r7, r3
 c026e20:	d113      	bne.n	c026e4a <psa_get_key_from_slot+0x62>
    if( alg != 0 && ! psa_key_policy_permits( &slot->policy, alg ) )
 c026e22:	b14e      	cbz	r6, c026e38 <psa_get_key_from_slot+0x50>
    return( psa_key_algorithm_permits( policy->alg, alg ) ||
 c026e24:	4631      	mov	r1, r6
 c026e26:	68a8      	ldr	r0, [r5, #8]
 c026e28:	f7ff ffa8 	bl	c026d7c <psa_key_algorithm_permits>
 c026e2c:	b920      	cbnz	r0, c026e38 <psa_get_key_from_slot+0x50>
            psa_key_algorithm_permits( policy->alg2, alg ) );
 c026e2e:	4631      	mov	r1, r6
 c026e30:	68e8      	ldr	r0, [r5, #12]
 c026e32:	f7ff ffa3 	bl	c026d7c <psa_key_algorithm_permits>
    return( psa_key_algorithm_permits( policy->alg, alg ) ||
 c026e36:	b140      	cbz	r0, c026e4a <psa_get_key_from_slot+0x62>
    *p_slot = slot;
 c026e38:	f8c8 5000 	str.w	r5, [r8]
}
 c026e3c:	4620      	mov	r0, r4
 c026e3e:	b002      	add	sp, #8
 c026e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( PSA_ERROR_DOES_NOT_EXIST );
 c026e44:	f06f 048b 	mvn.w	r4, #139	; 0x8b
 c026e48:	e7f8      	b.n	c026e3c <psa_get_key_from_slot+0x54>
        return( PSA_ERROR_NOT_PERMITTED );
 c026e4a:	f06f 0484 	mvn.w	r4, #132	; 0x84
 c026e4e:	e7f5      	b.n	c026e3c <psa_get_key_from_slot+0x54>

0c026e50 <prepare_raw_data_slot>:
{
 c026e50:	b538      	push	{r3, r4, r5, lr}
    switch( type )
 c026e52:	4b19      	ldr	r3, [pc, #100]	; (c026eb8 <prepare_raw_data_slot+0x68>)
{
 c026e54:	4615      	mov	r5, r2
    switch( type )
 c026e56:	4298      	cmp	r0, r3
 c026e58:	d01c      	beq.n	c026e94 <prepare_raw_data_slot+0x44>
 c026e5a:	d806      	bhi.n	c026e6a <prepare_raw_data_slot+0x1a>
 c026e5c:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 c026e60:	4298      	cmp	r0, r3
 c026e62:	d01d      	beq.n	c026ea0 <prepare_raw_data_slot+0x50>
            return( PSA_ERROR_NOT_SUPPORTED );
 c026e64:	f06f 0085 	mvn.w	r0, #133	; 0x85
 c026e68:	e019      	b.n	c026e9e <prepare_raw_data_slot+0x4e>
    switch( type )
 c026e6a:	f1b0 4fa2 	cmp.w	r0, #1358954496	; 0x51000000
 c026e6e:	d002      	beq.n	c026e76 <prepare_raw_data_slot+0x26>
 c026e70:	f1b0 4fa4 	cmp.w	r0, #1375731712	; 0x52000000
 c026e74:	d1f6      	bne.n	c026e64 <prepare_raw_data_slot+0x14>
    if( bits % 8 != 0 )
 c026e76:	f011 0407 	ands.w	r4, r1, #7
 c026e7a:	d118      	bne.n	c026eae <prepare_raw_data_slot+0x5e>
    raw->bytes = PSA_BITS_TO_BYTES( bits );
 c026e7c:	3107      	adds	r1, #7
 c026e7e:	08c9      	lsrs	r1, r1, #3
 c026e80:	6069      	str	r1, [r5, #4]
    raw->data = mbedtls_calloc( 1, raw->bytes );
 c026e82:	2001      	movs	r0, #1
 c026e84:	f7ff fc3a 	bl	c0266fc <mbedtls_calloc>
 c026e88:	6028      	str	r0, [r5, #0]
    if( raw->data == NULL )
 c026e8a:	b998      	cbnz	r0, c026eb4 <prepare_raw_data_slot+0x64>
        raw->bytes = 0;
 c026e8c:	6068      	str	r0, [r5, #4]
        return( PSA_ERROR_INSUFFICIENT_MEMORY );
 c026e8e:	f06f 008c 	mvn.w	r0, #140	; 0x8c
 c026e92:	e004      	b.n	c026e9e <prepare_raw_data_slot+0x4e>
            if( bits == 0 )
 c026e94:	2900      	cmp	r1, #0
 c026e96:	d1ee      	bne.n	c026e76 <prepare_raw_data_slot+0x26>
                return( PSA_SUCCESS );
 c026e98:	4608      	mov	r0, r1
                raw->data = NULL;
 c026e9a:	e9c2 1100 	strd	r1, r1, [r2]
}
 c026e9e:	bd38      	pop	{r3, r4, r5, pc}
            if( bits != 128 && bits != 192 && bits != 256 )
 c026ea0:	f021 0340 	bic.w	r3, r1, #64	; 0x40
 c026ea4:	2b80      	cmp	r3, #128	; 0x80
 c026ea6:	d0e6      	beq.n	c026e76 <prepare_raw_data_slot+0x26>
 c026ea8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 c026eac:	d0e3      	beq.n	c026e76 <prepare_raw_data_slot+0x26>
                return( PSA_ERROR_INVALID_ARGUMENT );
 c026eae:	f06f 0086 	mvn.w	r0, #134	; 0x86
 c026eb2:	e7f4      	b.n	c026e9e <prepare_raw_data_slot+0x4e>
    return( PSA_SUCCESS );
 c026eb4:	4620      	mov	r0, r4
 c026eb6:	e7f2      	b.n	c026e9e <prepare_raw_data_slot+0x4e>
 c026eb8:	50000001 	.word	0x50000001

0c026ebc <psa_get_key_bits>:
    if( key_type_is_raw_bytes( slot->type ) )
 c026ebc:	6802      	ldr	r2, [r0, #0]
{
 c026ebe:	b508      	push	{r3, lr}
    return( PSA_KEY_TYPE_IS_UNSTRUCTURED( type ) );
 c026ec0:	f002 43c0 	and.w	r3, r2, #1610612736	; 0x60000000
    if( key_type_is_raw_bytes( slot->type ) )
 c026ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c026ec8:	d102      	bne.n	c026ed0 <psa_get_key_bits+0x14>
        return( slot->data.raw.bytes * 8 );
 c026eca:	6a00      	ldr	r0, [r0, #32]
        return( PSA_BYTES_TO_BITS( mbedtls_rsa_get_len( slot->data.rsa ) ) );
 c026ecc:	00c0      	lsls	r0, r0, #3
}
 c026ece:	bd08      	pop	{r3, pc}
    if( PSA_KEY_TYPE_IS_RSA( slot->type ) )
 c026ed0:	4b08      	ldr	r3, [pc, #32]	; (c026ef4 <psa_get_key_bits+0x38>)
 c026ed2:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 c026ed6:	4299      	cmp	r1, r3
 c026ed8:	d103      	bne.n	c026ee2 <psa_get_key_bits+0x26>
        return( PSA_BYTES_TO_BITS( mbedtls_rsa_get_len( slot->data.rsa ) ) );
 c026eda:	69c0      	ldr	r0, [r0, #28]
 c026edc:	f002 ff27 	bl	c029d2e <mbedtls_rsa_get_len>
 c026ee0:	e7f4      	b.n	c026ecc <psa_get_key_bits+0x10>
    if( PSA_KEY_TYPE_IS_ECC( slot->type ) )
 c026ee2:	4b05      	ldr	r3, [pc, #20]	; (c026ef8 <psa_get_key_bits+0x3c>)
 c026ee4:	4013      	ands	r3, r2
 c026ee6:	4a05      	ldr	r2, [pc, #20]	; (c026efc <psa_get_key_bits+0x40>)
 c026ee8:	4293      	cmp	r3, r2
        return( slot->data.ecp->grp.pbits );
 c026eea:	bf0a      	itet	eq
 c026eec:	69c3      	ldreq	r3, [r0, #28]
    return( 0 );
 c026eee:	2000      	movne	r0, #0
        return( slot->data.ecp->grp.pbits );
 c026ef0:	6d98      	ldreq	r0, [r3, #88]	; 0x58
 c026ef2:	e7ec      	b.n	c026ece <psa_get_key_bits+0x12>
 c026ef4:	60010000 	.word	0x60010000
 c026ef8:	efff0000 	.word	0xefff0000
 c026efc:	60030000 	.word	0x60030000

0c026f00 <psa_internal_export_key>:
{
 c026f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c026f04:	4698      	mov	r8, r3
    *data_length = 0;
 c026f06:	2300      	movs	r3, #0
{
 c026f08:	b085      	sub	sp, #20
    *data_length = 0;
 c026f0a:	f8c8 3000 	str.w	r3, [r8]
{
 c026f0e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 c026f12:	6803      	ldr	r3, [r0, #0]
 c026f14:	4614      	mov	r4, r2
 c026f16:	4606      	mov	r6, r0
 c026f18:	460d      	mov	r5, r1
 c026f1a:	f003 42c0 	and.w	r2, r3, #1610612736	; 0x60000000
    if( export_public_key && ! PSA_KEY_TYPE_IS_ASYMMETRIC( slot->type ) )
 c026f1e:	f1b9 0f00 	cmp.w	r9, #0
 c026f22:	d005      	beq.n	c026f30 <psa_internal_export_key+0x30>
 c026f24:	f1b2 4fc0 	cmp.w	r2, #1610612736	; 0x60000000
 c026f28:	d01e      	beq.n	c026f68 <psa_internal_export_key+0x68>
        return( PSA_ERROR_INVALID_ARGUMENT );
 c026f2a:	f06f 0686 	mvn.w	r6, #134	; 0x86
 c026f2e:	e007      	b.n	c026f40 <psa_internal_export_key+0x40>
    if( key_type_is_raw_bytes( slot->type ) )
 c026f30:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 c026f34:	d118      	bne.n	c026f68 <psa_internal_export_key+0x68>
        if( slot->data.raw.bytes > data_size )
 c026f36:	6a02      	ldr	r2, [r0, #32]
 c026f38:	42a2      	cmp	r2, r4
 c026f3a:	d905      	bls.n	c026f48 <psa_internal_export_key+0x48>
            return( PSA_ERROR_BUFFER_TOO_SMALL );
 c026f3c:	f06f 0689 	mvn.w	r6, #137	; 0x89
}
 c026f40:	4630      	mov	r0, r6
 c026f42:	b005      	add	sp, #20
 c026f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( data_size != 0 )
 c026f48:	b14c      	cbz	r4, c026f5e <psa_internal_export_key+0x5e>
            memcpy( data, slot->data.raw.data, slot->data.raw.bytes );
 c026f4a:	69c1      	ldr	r1, [r0, #28]
 c026f4c:	4628      	mov	r0, r5
 c026f4e:	f7ed fd16 	bl	c01497e <memcpy>
            memset( data + slot->data.raw.bytes, 0,
 c026f52:	6a30      	ldr	r0, [r6, #32]
 c026f54:	4649      	mov	r1, r9
 c026f56:	1a22      	subs	r2, r4, r0
 c026f58:	4428      	add	r0, r5
 c026f5a:	f7ed fd34 	bl	c0149c6 <memset>
        *data_length = slot->data.raw.bytes;
 c026f5e:	6a33      	ldr	r3, [r6, #32]
 c026f60:	f8c8 3000 	str.w	r3, [r8]
            return( PSA_SUCCESS );
 c026f64:	2600      	movs	r6, #0
 c026f66:	e7eb      	b.n	c026f40 <psa_internal_export_key+0x40>
    if( PSA_KEY_TYPE_IS_ECC_KEYPAIR( slot->type ) && !export_public_key )
 c026f68:	0c1a      	lsrs	r2, r3, #16
 c026f6a:	493f      	ldr	r1, [pc, #252]	; (c027068 <psa_internal_export_key+0x168>)
 c026f6c:	0412      	lsls	r2, r2, #16
 c026f6e:	428a      	cmp	r2, r1
 c026f70:	d11c      	bne.n	c026fac <psa_internal_export_key+0xac>
 c026f72:	f1b9 0f00 	cmp.w	r9, #0
 c026f76:	d119      	bne.n	c026fac <psa_internal_export_key+0xac>
        size_t bytes = PSA_BITS_TO_BYTES( psa_get_key_bits( slot ) );
 c026f78:	4630      	mov	r0, r6
 c026f7a:	f7ff ff9f 	bl	c026ebc <psa_get_key_bits>
 c026f7e:	3007      	adds	r0, #7
 c026f80:	08c7      	lsrs	r7, r0, #3
        if( bytes > data_size )
 c026f82:	42a7      	cmp	r7, r4
 c026f84:	d8da      	bhi.n	c026f3c <psa_internal_export_key+0x3c>
            mbedtls_mpi_write_binary( &slot->data.ecp->d, data, bytes ) );
 c026f86:	69f0      	ldr	r0, [r6, #28]
        status = mbedtls_to_psa_error(
 c026f88:	463a      	mov	r2, r7
 c026f8a:	4629      	mov	r1, r5
 c026f8c:	307c      	adds	r0, #124	; 0x7c
 c026f8e:	f7f6 ffc4 	bl	c01df1a <mbedtls_mpi_write_binary>
 c026f92:	f7ff fbd1 	bl	c026738 <mbedtls_to_psa_error>
        if( status != PSA_SUCCESS )
 c026f96:	4606      	mov	r6, r0
 c026f98:	2800      	cmp	r0, #0
 c026f9a:	d1d1      	bne.n	c026f40 <psa_internal_export_key+0x40>
        memset( data + bytes, 0, data_size - bytes );
 c026f9c:	1be2      	subs	r2, r4, r7
 c026f9e:	4649      	mov	r1, r9
 c026fa0:	19e8      	adds	r0, r5, r7
 c026fa2:	f7ed fd10 	bl	c0149c6 <memset>
        *data_length = bytes;
 c026fa6:	f8c8 7000 	str.w	r7, [r8]
        return( PSA_SUCCESS );
 c026faa:	e7c9      	b.n	c026f40 <psa_internal_export_key+0x40>
        if( PSA_KEY_TYPE_IS_RSA( slot->type ) ||
 c026fac:	4a2f      	ldr	r2, [pc, #188]	; (c02706c <psa_internal_export_key+0x16c>)
 c026fae:	f023 5180 	bic.w	r1, r3, #268435456	; 0x10000000
 c026fb2:	4291      	cmp	r1, r2
 c026fb4:	d007      	beq.n	c026fc6 <psa_internal_export_key+0xc6>
            PSA_KEY_TYPE_IS_ECC( slot->type ) )
 c026fb6:	4a2e      	ldr	r2, [pc, #184]	; (c027070 <psa_internal_export_key+0x170>)
 c026fb8:	401a      	ands	r2, r3
        if( PSA_KEY_TYPE_IS_RSA( slot->type ) ||
 c026fba:	4b2e      	ldr	r3, [pc, #184]	; (c027074 <psa_internal_export_key+0x174>)
 c026fbc:	429a      	cmp	r2, r3
 c026fbe:	d029      	beq.n	c027014 <psa_internal_export_key+0x114>
            return( PSA_ERROR_NOT_SUPPORTED );
 c026fc0:	f06f 0685 	mvn.w	r6, #133	; 0x85
 c026fc4:	e7bc      	b.n	c026f40 <psa_internal_export_key+0x40>
                mbedtls_pk_init( &pk );
 c026fc6:	a802      	add	r0, sp, #8
 c026fc8:	f7fd fdf9 	bl	c024bbe <mbedtls_pk_init>
                pk.pk_info = &mbedtls_rsa_info;
 c026fcc:	4b2a      	ldr	r3, [pc, #168]	; (c027078 <psa_internal_export_key+0x178>)
                pk.pk_info = &mbedtls_eckey_info;
 c026fce:	9302      	str	r3, [sp, #8]
                pk.pk_ctx = slot->data.ecp;
 c026fd0:	69f3      	ldr	r3, [r6, #28]
 c026fd2:	9303      	str	r3, [sp, #12]
            if( export_public_key || PSA_KEY_TYPE_IS_PUBLIC_KEY( slot->type ) )
 c026fd4:	f1b9 0f00 	cmp.w	r9, #0
 c026fd8:	d105      	bne.n	c026fe6 <psa_internal_export_key+0xe6>
 c026fda:	6833      	ldr	r3, [r6, #0]
 c026fdc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 c026fe0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 c026fe4:	d11b      	bne.n	c02701e <psa_internal_export_key+0x11e>
    c = buf + size;
 c026fe6:	192b      	adds	r3, r5, r4
 c026fe8:	a804      	add	r0, sp, #16
 c026fea:	f840 3d0c 	str.w	r3, [r0, #-12]!
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_pk_write_pubkey( &c, buf, key ) );
 c026fee:	aa02      	add	r2, sp, #8
 c026ff0:	4629      	mov	r1, r5
 c026ff2:	f7ff f9c1 	bl	c026378 <mbedtls_pk_write_pubkey>
            if( ret < 0 )
 c026ff6:	2800      	cmp	r0, #0
                ret = mbedtls_pk_write_key_der( &pk, data, data_size );
 c026ff8:	4606      	mov	r6, r0
            if( ret < 0 )
 c026ffa:	da16      	bge.n	c02702a <psa_internal_export_key+0x12a>
                if( data_size != 0 )
 c026ffc:	b124      	cbz	r4, c027008 <psa_internal_export_key+0x108>
                    memset( data, 0, data_size );
 c026ffe:	4622      	mov	r2, r4
 c027000:	2100      	movs	r1, #0
 c027002:	4628      	mov	r0, r5
 c027004:	f7ed fcdf 	bl	c0149c6 <memset>
                return( mbedtls_to_psa_error( ret ) );
 c027008:	4630      	mov	r0, r6
}
 c02700a:	b005      	add	sp, #20
 c02700c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                return( mbedtls_to_psa_error( ret ) );
 c027010:	f7ff bb92 	b.w	c026738 <mbedtls_to_psa_error>
                mbedtls_pk_init( &pk );
 c027014:	a802      	add	r0, sp, #8
 c027016:	f7fd fdd2 	bl	c024bbe <mbedtls_pk_init>
                pk.pk_info = &mbedtls_eckey_info;
 c02701a:	4b18      	ldr	r3, [pc, #96]	; (c02707c <psa_internal_export_key+0x17c>)
 c02701c:	e7d7      	b.n	c026fce <psa_internal_export_key+0xce>
                ret = mbedtls_pk_write_key_der( &pk, data, data_size );
 c02701e:	4622      	mov	r2, r4
 c027020:	4629      	mov	r1, r5
 c027022:	a802      	add	r0, sp, #8
 c027024:	f7ff fa0c 	bl	c026440 <mbedtls_pk_write_key_der>
 c027028:	e7e5      	b.n	c026ff6 <psa_internal_export_key+0xf6>
            if( 2 * (size_t) ret <= data_size )
 c02702a:	ebb4 0f40 	cmp.w	r4, r0, lsl #1
 c02702e:	d30e      	bcc.n	c02704e <psa_internal_export_key+0x14e>
                memcpy( data, data + data_size - ret, ret );
 c027030:	1a24      	subs	r4, r4, r0
 c027032:	442c      	add	r4, r5
 c027034:	4602      	mov	r2, r0
 c027036:	4621      	mov	r1, r4
 c027038:	4628      	mov	r0, r5
 c02703a:	f7ed fca0 	bl	c01497e <memcpy>
                memset( data + data_size - ret, 0, ret );
 c02703e:	4632      	mov	r2, r6
 c027040:	2100      	movs	r1, #0
 c027042:	4620      	mov	r0, r4
                memset( data + ret, 0, data_size - ret );
 c027044:	f7ed fcbf 	bl	c0149c6 <memset>
            *data_length = ret;
 c027048:	f8c8 6000 	str.w	r6, [r8]
 c02704c:	e78a      	b.n	c026f64 <psa_internal_export_key+0x64>
            else if( (size_t) ret < data_size )
 c02704e:	42a0      	cmp	r0, r4
 c027050:	d2fa      	bcs.n	c027048 <psa_internal_export_key+0x148>
                memmove( data, data + data_size - ret, ret );
 c027052:	1a24      	subs	r4, r4, r0
 c027054:	4602      	mov	r2, r0
 c027056:	1929      	adds	r1, r5, r4
 c027058:	4628      	mov	r0, r5
 c02705a:	f7ed fc9b 	bl	c014994 <memmove>
                memset( data + ret, 0, data_size - ret );
 c02705e:	4622      	mov	r2, r4
 c027060:	2100      	movs	r1, #0
 c027062:	19a8      	adds	r0, r5, r6
 c027064:	e7ee      	b.n	c027044 <psa_internal_export_key+0x144>
 c027066:	bf00      	nop
 c027068:	70030000 	.word	0x70030000
 c02706c:	60010000 	.word	0x60010000
 c027070:	efff0000 	.word	0xefff0000
 c027074:	60030000 	.word	0x60030000
 c027078:	0c034d30 	.word	0x0c034d30
 c02707c:	0c034cd0 	.word	0x0c034cd0

0c027080 <psa_aead_setup.part.6>:
static psa_status_t psa_aead_setup( aead_operation_t *operation,
 c027080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 c027082:	4604      	mov	r4, r0
    key_bits = psa_get_key_bits( operation->slot );
 c027084:	6800      	ldr	r0, [r0, #0]
static psa_status_t psa_aead_setup( aead_operation_t *operation,
 c027086:	460d      	mov	r5, r1
    key_bits = psa_get_key_bits( operation->slot );
 c027088:	f7ff ff18 	bl	c026ebc <psa_get_key_bits>
        mbedtls_cipher_info_from_psa( alg, operation->slot->type, key_bits,
 c02708c:	6821      	ldr	r1, [r4, #0]
 c02708e:	4602      	mov	r2, r0
    key_bits = psa_get_key_bits( operation->slot );
 c027090:	4606      	mov	r6, r0
        mbedtls_cipher_info_from_psa( alg, operation->slot->type, key_bits,
 c027092:	f10d 0307 	add.w	r3, sp, #7
 c027096:	6809      	ldr	r1, [r1, #0]
 c027098:	4628      	mov	r0, r5
 c02709a:	f7ff fda7 	bl	c026bec <mbedtls_cipher_info_from_psa>
    operation->cipher_info =
 c02709e:	6060      	str	r0, [r4, #4]
    if( operation->cipher_info == NULL )
 c0270a0:	b138      	cbz	r0, c0270b2 <psa_aead_setup.part.6+0x32>
    switch( PSA_ALG_AEAD_WITH_TAG_LENGTH( alg, 0 ) )
 c0270a2:	4a33      	ldr	r2, [pc, #204]	; (c027170 <psa_aead_setup.part.6+0xf0>)
 c0270a4:	f425 537c 	bic.w	r3, r5, #16128	; 0x3f00
 c0270a8:	4293      	cmp	r3, r2
 c0270aa:	d005      	beq.n	c0270b8 <psa_aead_setup.part.6+0x38>
 c0270ac:	3201      	adds	r2, #1
 c0270ae:	4293      	cmp	r3, r2
 c0270b0:	d03c      	beq.n	c02712c <psa_aead_setup.part.6+0xac>
            return( PSA_ERROR_NOT_SUPPORTED );
 c0270b2:	f06f 0685 	mvn.w	r6, #133	; 0x85
 c0270b6:	e00e      	b.n	c0270d6 <psa_aead_setup.part.6+0x56>
            operation->core_alg = PSA_ALG_CCM;
 c0270b8:	4b2e      	ldr	r3, [pc, #184]	; (c027174 <psa_aead_setup.part.6+0xf4>)
            if( PSA_BLOCK_CIPHER_BLOCK_SIZE( operation->slot->type ) != 16 )
 c0270ba:	4a2f      	ldr	r2, [pc, #188]	; (c027178 <psa_aead_setup.part.6+0xf8>)
            operation->core_alg = PSA_ALG_CCM;
 c0270bc:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
            operation->full_tag_length = 16;
 c0270c0:	2310      	movs	r3, #16
 c0270c2:	f884 319c 	strb.w	r3, [r4, #412]	; 0x19c
            if( PSA_BLOCK_CIPHER_BLOCK_SIZE( operation->slot->type ) != 16 )
 c0270c6:	6823      	ldr	r3, [r4, #0]
 c0270c8:	681b      	ldr	r3, [r3, #0]
 c0270ca:	f023 0302 	bic.w	r3, r3, #2
 c0270ce:	4293      	cmp	r3, r2
 c0270d0:	d004      	beq.n	c0270dc <psa_aead_setup.part.6+0x5c>
                return( PSA_ERROR_INVALID_ARGUMENT );
 c0270d2:	f06f 0686 	mvn.w	r6, #134	; 0x86
}
 c0270d6:	4630      	mov	r0, r6
 c0270d8:	b003      	add	sp, #12
 c0270da:	bdf0      	pop	{r4, r5, r6, r7, pc}
            mbedtls_ccm_init( &operation->ctx.ccm );
 c0270dc:	f104 0708 	add.w	r7, r4, #8
 c0270e0:	4638      	mov	r0, r7
 c0270e2:	f7f8 fcae 	bl	c01fa42 <mbedtls_ccm_init>
                                    operation->slot->data.raw.data,
 c0270e6:	6822      	ldr	r2, [r4, #0]
            status = mbedtls_to_psa_error(
 c0270e8:	4633      	mov	r3, r6
 c0270ea:	69d2      	ldr	r2, [r2, #28]
 c0270ec:	f89d 1007 	ldrb.w	r1, [sp, #7]
 c0270f0:	4638      	mov	r0, r7
 c0270f2:	f7f8 fcaa 	bl	c01fa4a <mbedtls_ccm_setkey>
 c0270f6:	f7ff fb1f 	bl	c026738 <mbedtls_to_psa_error>
            if( status != 0 )
 c0270fa:	4606      	mov	r6, r0
 c0270fc:	bb98      	cbnz	r0, c027166 <psa_aead_setup.part.6+0xe6>
    if( PSA_AEAD_TAG_LENGTH( alg ) > operation->full_tag_length )
 c0270fe:	f005 43fe 	and.w	r3, r5, #2130706432	; 0x7f000000
 c027102:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 c027106:	bf18      	it	ne
 c027108:	2200      	movne	r2, #0
 c02710a:	f894 119c 	ldrb.w	r1, [r4, #412]	; 0x19c
 c02710e:	bf08      	it	eq
 c027110:	f3c5 2205 	ubfxeq	r2, r5, #8, #6
 c027114:	4291      	cmp	r1, r2
 c027116:	d324      	bcc.n	c027162 <psa_aead_setup.part.6+0xe2>
    operation->tag_length = PSA_AEAD_TAG_LENGTH( alg );
 c027118:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 c02711c:	bf14      	ite	ne
 c02711e:	2500      	movne	r5, #0
 c027120:	f3c5 2505 	ubfxeq	r5, r5, #8, #6
 c027124:	f884 519d 	strb.w	r5, [r4, #413]	; 0x19d
    return( PSA_SUCCESS );
 c027128:	2600      	movs	r6, #0
 c02712a:	e7d4      	b.n	c0270d6 <psa_aead_setup.part.6+0x56>
            operation->core_alg = PSA_ALG_GCM;
 c02712c:	4b13      	ldr	r3, [pc, #76]	; (c02717c <psa_aead_setup.part.6+0xfc>)
            if( PSA_BLOCK_CIPHER_BLOCK_SIZE( operation->slot->type ) != 16 )
 c02712e:	4a12      	ldr	r2, [pc, #72]	; (c027178 <psa_aead_setup.part.6+0xf8>)
            operation->core_alg = PSA_ALG_GCM;
 c027130:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
            operation->full_tag_length = 16;
 c027134:	2310      	movs	r3, #16
 c027136:	f884 319c 	strb.w	r3, [r4, #412]	; 0x19c
            if( PSA_BLOCK_CIPHER_BLOCK_SIZE( operation->slot->type ) != 16 )
 c02713a:	6823      	ldr	r3, [r4, #0]
 c02713c:	681b      	ldr	r3, [r3, #0]
 c02713e:	f023 0302 	bic.w	r3, r3, #2
 c027142:	4293      	cmp	r3, r2
 c027144:	d1c5      	bne.n	c0270d2 <psa_aead_setup.part.6+0x52>
            mbedtls_gcm_init( &operation->ctx.gcm );
 c027146:	f104 0708 	add.w	r7, r4, #8
 c02714a:	4638      	mov	r0, r7
 c02714c:	f7fc fcfc 	bl	c023b48 <mbedtls_gcm_init>
                                    operation->slot->data.raw.data,
 c027150:	6822      	ldr	r2, [r4, #0]
            status = mbedtls_to_psa_error(
 c027152:	4633      	mov	r3, r6
 c027154:	69d2      	ldr	r2, [r2, #28]
 c027156:	f89d 1007 	ldrb.w	r1, [sp, #7]
 c02715a:	4638      	mov	r0, r7
 c02715c:	f7fc fcf9 	bl	c023b52 <mbedtls_gcm_setkey>
 c027160:	e7cd      	b.n	c0270fe <psa_aead_setup.part.6+0x7e>
        status = PSA_ERROR_INVALID_ARGUMENT;
 c027162:	f06f 0686 	mvn.w	r6, #134	; 0x86
    psa_aead_abort( operation );
 c027166:	4620      	mov	r0, r4
 c027168:	f7ff fda6 	bl	c026cb8 <psa_aead_abort>
 c02716c:	e7b3      	b.n	c0270d6 <psa_aead_setup.part.6+0x56>
 c02716e:	bf00      	nop
 c027170:	06000001 	.word	0x06000001
 c027174:	06001001 	.word	0x06001001
 c027178:	40000001 	.word	0x40000001
 c02717c:	06001002 	.word	0x06001002

0c027180 <psa_rsa_oaep_set_padding_mode>:
    psa_algorithm_t hash_alg = PSA_ALG_RSA_OAEP_GET_HASH( alg );
 c027180:	4b0e      	ldr	r3, [pc, #56]	; (c0271bc <psa_rsa_oaep_set_padding_mode+0x3c>)
 c027182:	f020 02ff 	bic.w	r2, r0, #255	; 0xff
 c027186:	429a      	cmp	r2, r3
 c027188:	bf12      	itee	ne
 c02718a:	2000      	movne	r0, #0
 c02718c:	b2c0      	uxtbeq	r0, r0
 c02718e:	f040 7080 	orreq.w	r0, r0, #16777216	; 0x1000000
 c027192:	f100 407f 	add.w	r0, r0, #4278190080	; 0xff000000
 c027196:	3808      	subs	r0, #8
 c027198:	2803      	cmp	r0, #3
 c02719a:	bf98      	it	ls
 c02719c:	4b08      	ldrls	r3, [pc, #32]	; (c0271c0 <psa_rsa_oaep_set_padding_mode+0x40>)
{
 c02719e:	b510      	push	{r4, lr}
 c0271a0:	bf94      	ite	ls
 c0271a2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    psa_algorithm_t hash_alg = PSA_ALG_RSA_OAEP_GET_HASH( alg );
 c0271a6:	2000      	movhi	r0, #0
{
 c0271a8:	460c      	mov	r4, r1
    mbedtls_md_type_t md_alg = mbedtls_md_get_type( md_info );
 c0271aa:	f7fd fa06 	bl	c0245ba <mbedtls_md_get_type>
    mbedtls_rsa_set_padding( rsa, MBEDTLS_RSA_PKCS_V21, md_alg );
 c0271ae:	2101      	movs	r1, #1
 c0271b0:	4602      	mov	r2, r0
 c0271b2:	4620      	mov	r0, r4
}
 c0271b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_rsa_set_padding( rsa, MBEDTLS_RSA_PKCS_V21, md_alg );
 c0271b8:	f002 bdb6 	b.w	c029d28 <mbedtls_rsa_set_padding>
 c0271bc:	12030000 	.word	0x12030000
 c0271c0:	0c034f30 	.word	0x0c034f30

0c0271c4 <psa_rsa_decode_md_type>:
{
 c0271c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    psa_algorithm_t hash_alg = PSA_ALG_SIGN_GET_HASH( alg );
 c0271c8:	f420 3380 	bic.w	r3, r0, #65536	; 0x10000
{
 c0271cc:	4690      	mov	r8, r2
    psa_algorithm_t hash_alg = PSA_ALG_SIGN_GET_HASH( alg );
 c0271ce:	4a1f      	ldr	r2, [pc, #124]	; (c02724c <psa_rsa_decode_md_type+0x88>)
 c0271d0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 c0271d4:	4293      	cmp	r3, r2
{
 c0271d6:	4604      	mov	r4, r0
 c0271d8:	460f      	mov	r7, r1
    psa_algorithm_t hash_alg = PSA_ALG_SIGN_GET_HASH( alg );
 c0271da:	f020 06ff 	bic.w	r6, r0, #255	; 0xff
 c0271de:	d007      	beq.n	c0271f0 <psa_rsa_decode_md_type+0x2c>
 c0271e0:	f420 3340 	bic.w	r3, r0, #196608	; 0x30000
 c0271e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 c0271e8:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 c0271ec:	4293      	cmp	r3, r2
 c0271ee:	d120      	bne.n	c027232 <psa_rsa_decode_md_type+0x6e>
 c0271f0:	f014 03ff 	ands.w	r3, r4, #255	; 0xff
 c0271f4:	d001      	beq.n	c0271fa <psa_rsa_decode_md_type+0x36>
 c0271f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c0271fa:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 c0271fe:	3b08      	subs	r3, #8
 c027200:	2b03      	cmp	r3, #3
 c027202:	bf8e      	itee	hi
 c027204:	2500      	movhi	r5, #0
 c027206:	4a12      	ldrls	r2, [pc, #72]	; (c027250 <psa_rsa_decode_md_type+0x8c>)
 c027208:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    *md_alg = mbedtls_md_get_type( md_info );
 c02720c:	4628      	mov	r0, r5
 c02720e:	f7fd f9d4 	bl	c0245ba <mbedtls_md_get_type>
    if( PSA_ALG_IS_RSA_PKCS1V15_SIGN( alg ) &&
 c027212:	4b0e      	ldr	r3, [pc, #56]	; (c02724c <psa_rsa_decode_md_type+0x88>)
    *md_alg = mbedtls_md_get_type( md_info );
 c027214:	f888 0000 	strb.w	r0, [r8]
    if( PSA_ALG_IS_RSA_PKCS1V15_SIGN( alg ) &&
 c027218:	429e      	cmp	r6, r3
 c02721a:	d10c      	bne.n	c027236 <psa_rsa_decode_md_type+0x72>
 c02721c:	42b4      	cmp	r4, r6
 c02721e:	d00e      	beq.n	c02723e <psa_rsa_decode_md_type+0x7a>
        if( md_info == NULL )
 c027220:	b185      	cbz	r5, c027244 <psa_rsa_decode_md_type+0x80>
        if( mbedtls_md_get_size( md_info ) != hash_length )
 c027222:	4628      	mov	r0, r5
 c027224:	f7fd f9c6 	bl	c0245b4 <mbedtls_md_get_size>
 c027228:	42b8      	cmp	r0, r7
 c02722a:	d008      	beq.n	c02723e <psa_rsa_decode_md_type+0x7a>
            return( PSA_ERROR_INVALID_ARGUMENT );
 c02722c:	f06f 0086 	mvn.w	r0, #134	; 0x86
 c027230:	e006      	b.n	c027240 <psa_rsa_decode_md_type+0x7c>
    psa_algorithm_t hash_alg = PSA_ALG_SIGN_GET_HASH( alg );
 c027232:	2300      	movs	r3, #0
 c027234:	e7e1      	b.n	c0271fa <psa_rsa_decode_md_type+0x36>
    if( PSA_ALG_IS_RSA_PSS( alg ) )
 c027236:	4b07      	ldr	r3, [pc, #28]	; (c027254 <psa_rsa_decode_md_type+0x90>)
 c027238:	429e      	cmp	r6, r3
 c02723a:	d100      	bne.n	c02723e <psa_rsa_decode_md_type+0x7a>
        if( md_info == NULL )
 c02723c:	b115      	cbz	r5, c027244 <psa_rsa_decode_md_type+0x80>
    return( PSA_SUCCESS );
 c02723e:	2000      	movs	r0, #0
}
 c027240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return( PSA_ERROR_NOT_SUPPORTED );
 c027244:	f06f 0085 	mvn.w	r0, #133	; 0x85
 c027248:	e7fa      	b.n	c027240 <psa_rsa_decode_md_type+0x7c>
 c02724a:	bf00      	nop
 c02724c:	10020000 	.word	0x10020000
 c027250:	0c034f30 	.word	0x0c034f30
 c027254:	10030000 	.word	0x10030000

0c027258 <psa_import_ec_public_key>:
{
 c027258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c02725c:	461e      	mov	r6, r3
 c02725e:	2300      	movs	r3, #0
 c027260:	3812      	subs	r0, #18
 c027262:	b280      	uxth	r0, r0
 c027264:	280c      	cmp	r0, #12
 c027266:	4691      	mov	r9, r2
 c027268:	bf98      	it	ls
 c02726a:	4a1d      	ldrls	r2, [pc, #116]	; (c0272e0 <psa_import_ec_public_key+0x88>)
 c02726c:	4688      	mov	r8, r1
 c02726e:	bf98      	it	ls
 c027270:	5c14      	ldrbls	r4, [r2, r0]
    *p_ecp = NULL;
 c027272:	6033      	str	r3, [r6, #0]
    ecp = mbedtls_calloc( 1, sizeof( *ecp ) );
 c027274:	f04f 01ac 	mov.w	r1, #172	; 0xac
 c027278:	f04f 0001 	mov.w	r0, #1
{
 c02727c:	bf88      	it	hi
 c02727e:	461c      	movhi	r4, r3
    ecp = mbedtls_calloc( 1, sizeof( *ecp ) );
 c027280:	f7ff fa3c 	bl	c0266fc <mbedtls_calloc>
    if( ecp == NULL )
 c027284:	4605      	mov	r5, r0
 c027286:	b340      	cbz	r0, c0272da <psa_import_ec_public_key+0x82>
    mbedtls_ecp_keypair_init( ecp );
 c027288:	f7fa fb9d 	bl	c0219c6 <mbedtls_ecp_keypair_init>
    status = mbedtls_to_psa_error(
 c02728c:	4621      	mov	r1, r4
 c02728e:	4628      	mov	r0, r5
 c027290:	f7fb ffea 	bl	c023268 <mbedtls_ecp_group_load>
 c027294:	f7ff fa50 	bl	c026738 <mbedtls_to_psa_error>
    if( status != PSA_SUCCESS )
 c027298:	4604      	mov	r4, r0
 c02729a:	b9b8      	cbnz	r0, c0272cc <psa_import_ec_public_key+0x74>
    status = mbedtls_to_psa_error(
 c02729c:	f105 0788 	add.w	r7, r5, #136	; 0x88
 c0272a0:	464b      	mov	r3, r9
 c0272a2:	4642      	mov	r2, r8
 c0272a4:	4639      	mov	r1, r7
 c0272a6:	4628      	mov	r0, r5
 c0272a8:	f7fa ffee 	bl	c022288 <mbedtls_ecp_point_read_binary>
 c0272ac:	f7ff fa44 	bl	c026738 <mbedtls_to_psa_error>
    if( status != PSA_SUCCESS )
 c0272b0:	4604      	mov	r4, r0
 c0272b2:	b958      	cbnz	r0, c0272cc <psa_import_ec_public_key+0x74>
    status = mbedtls_to_psa_error(
 c0272b4:	4639      	mov	r1, r7
 c0272b6:	4628      	mov	r0, r5
 c0272b8:	f7fb f856 	bl	c022368 <mbedtls_ecp_check_pubkey>
 c0272bc:	f7ff fa3c 	bl	c026738 <mbedtls_to_psa_error>
    if( status != PSA_SUCCESS )
 c0272c0:	4604      	mov	r4, r0
 c0272c2:	b918      	cbnz	r0, c0272cc <psa_import_ec_public_key+0x74>
    *p_ecp = ecp;
 c0272c4:	6035      	str	r5, [r6, #0]
}
 c0272c6:	4620      	mov	r0, r4
 c0272c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        mbedtls_ecp_keypair_free( ecp );
 c0272cc:	4628      	mov	r0, r5
 c0272ce:	f7fa fbbd 	bl	c021a4c <mbedtls_ecp_keypair_free>
        mbedtls_free( ecp );
 c0272d2:	4628      	mov	r0, r5
 c0272d4:	f7ff fa18 	bl	c026708 <mbedtls_free>
    return( status );
 c0272d8:	e7f5      	b.n	c0272c6 <psa_import_ec_public_key+0x6e>
        return( PSA_ERROR_INSUFFICIENT_MEMORY );
 c0272da:	f06f 048c 	mvn.w	r4, #140	; 0x8c
 c0272de:	e7f2      	b.n	c0272c6 <psa_import_ec_public_key+0x6e>
 c0272e0:	0c034f21 	.word	0x0c034f21

0c0272e4 <psa_restrict_key_policy>:
{
 c0272e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        psa_key_policy_algorithm_intersection( policy->alg, constraint->alg );
 c0272e8:	6846      	ldr	r6, [r0, #4]
 c0272ea:	f8d1 a004 	ldr.w	sl, [r1, #4]
{
 c0272ee:	4604      	mov	r4, r0
    if( alg1 == alg2 )
 c0272f0:	4556      	cmp	r6, sl
{
 c0272f2:	4688      	mov	r8, r1
    if( alg1 == alg2 )
 c0272f4:	d021      	beq.n	c02733a <psa_restrict_key_policy+0x56>
 c0272f6:	4651      	mov	r1, sl
 c0272f8:	4630      	mov	r0, r6
 c0272fa:	f7ff fcef 	bl	c026cdc <psa_key_policy_algorithm_intersection.part.1>
 c0272fe:	4607      	mov	r7, r0
        psa_key_policy_algorithm_intersection( policy->alg2, constraint->alg2 );
 c027300:	68a5      	ldr	r5, [r4, #8]
 c027302:	f8d8 9008 	ldr.w	r9, [r8, #8]
    if( alg1 == alg2 )
 c027306:	454d      	cmp	r5, r9
 c027308:	d019      	beq.n	c02733e <psa_restrict_key_policy+0x5a>
 c02730a:	4649      	mov	r1, r9
 c02730c:	4628      	mov	r0, r5
 c02730e:	f7ff fce5 	bl	c026cdc <psa_key_policy_algorithm_intersection.part.1>
    if( intersection_alg == 0 && policy->alg != 0 && constraint->alg != 0 )
 c027312:	b91f      	cbnz	r7, c02731c <psa_restrict_key_policy+0x38>
 c027314:	b116      	cbz	r6, c02731c <psa_restrict_key_policy+0x38>
 c027316:	f1ba 0f00 	cmp.w	sl, #0
 c02731a:	d112      	bne.n	c027342 <psa_restrict_key_policy+0x5e>
    if( intersection_alg2 == 0 && policy->alg2 != 0 && constraint->alg2 != 0 )
 c02731c:	b918      	cbnz	r0, c027326 <psa_restrict_key_policy+0x42>
 c02731e:	b115      	cbz	r5, c027326 <psa_restrict_key_policy+0x42>
 c027320:	f1b9 0f00 	cmp.w	r9, #0
 c027324:	d10d      	bne.n	c027342 <psa_restrict_key_policy+0x5e>
    policy->usage &= constraint->usage;
 c027326:	f8d8 2000 	ldr.w	r2, [r8]
    policy->alg2 = intersection_alg2;
 c02732a:	60a0      	str	r0, [r4, #8]
    return( PSA_SUCCESS );
 c02732c:	2000      	movs	r0, #0
    policy->usage &= constraint->usage;
 c02732e:	6823      	ldr	r3, [r4, #0]
 c027330:	4013      	ands	r3, r2
    policy->alg = intersection_alg;
 c027332:	e9c4 3700 	strd	r3, r7, [r4]
}
 c027336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( alg1 == alg2 )
 c02733a:	4637      	mov	r7, r6
 c02733c:	e7e0      	b.n	c027300 <psa_restrict_key_policy+0x1c>
 c02733e:	4628      	mov	r0, r5
 c027340:	e7e7      	b.n	c027312 <psa_restrict_key_policy+0x2e>
        return( PSA_ERROR_INVALID_ARGUMENT );
 c027342:	f06f 0086 	mvn.w	r0, #134	; 0x86
 c027346:	e7f6      	b.n	c027336 <psa_restrict_key_policy+0x52>

0c027348 <psa_import_key_into_slot>:
{
 c027348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( key_type_is_raw_bytes( slot->type ) )
 c02734c:	6804      	ldr	r4, [r0, #0]
{
 c02734e:	b089      	sub	sp, #36	; 0x24
    return( PSA_KEY_TYPE_IS_UNSTRUCTURED( type ) );
 c027350:	f004 43c0 	and.w	r3, r4, #1610612736	; 0x60000000
    if( key_type_is_raw_bytes( slot->type ) )
 c027354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 c027358:	4606      	mov	r6, r0
 c02735a:	460f      	mov	r7, r1
 c02735c:	4615      	mov	r5, r2
    if( key_type_is_raw_bytes( slot->type ) )
 c02735e:	d115      	bne.n	c02738c <psa_import_key_into_slot+0x44>
        if( data_length > SIZE_MAX / 8 )
 c027360:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 c027364:	f080 8118 	bcs.w	c027598 <psa_import_key_into_slot+0x250>
        status = prepare_raw_data_slot( slot->type,
 c027368:	f100 021c 	add.w	r2, r0, #28
 c02736c:	00e9      	lsls	r1, r5, #3
 c02736e:	4620      	mov	r0, r4
 c027370:	f7ff fd6e 	bl	c026e50 <prepare_raw_data_slot>
        if( status != PSA_SUCCESS )
 c027374:	4604      	mov	r4, r0
 c027376:	b928      	cbnz	r0, c027384 <psa_import_key_into_slot+0x3c>
        if( data_length != 0 )
 c027378:	b125      	cbz	r5, c027384 <psa_import_key_into_slot+0x3c>
            memcpy( slot->data.raw.data, data, data_length );
 c02737a:	462a      	mov	r2, r5
 c02737c:	4639      	mov	r1, r7
 c02737e:	69f0      	ldr	r0, [r6, #28]
 c027380:	f7ed fafd 	bl	c01497e <memcpy>
}
 c027384:	4620      	mov	r0, r4
 c027386:	b009      	add	sp, #36	; 0x24
 c027388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( PSA_KEY_TYPE_IS_ECC_KEYPAIR( slot->type ) )
 c02738c:	0c23      	lsrs	r3, r4, #16
 c02738e:	4884      	ldr	r0, [pc, #528]	; (c0275a0 <psa_import_key_into_slot+0x258>)
 c027390:	041b      	lsls	r3, r3, #16
 c027392:	4283      	cmp	r3, r0
 c027394:	f040 809e 	bne.w	c0274d4 <psa_import_key_into_slot+0x18c>
        status = psa_import_ec_private_key( PSA_KEY_TYPE_GET_CURVE( slot->type ),
 c027398:	b2a0      	uxth	r0, r4
 c02739a:	f1a0 0312 	sub.w	r3, r0, #18
 c02739e:	b29b      	uxth	r3, r3
 c0273a0:	2b0c      	cmp	r3, #12
 c0273a2:	d872      	bhi.n	c02748a <psa_import_key_into_slot+0x142>
 c0273a4:	4a7f      	ldr	r2, [pc, #508]	; (c0275a4 <psa_import_key_into_slot+0x25c>)
 c0273a6:	5cd4      	ldrb	r4, [r2, r3]
    if( PSA_BITS_TO_BYTES( PSA_ECC_CURVE_BITS( curve ) ) != data_length )
 c0273a8:	1e82      	subs	r2, r0, #2
 c0273aa:	2a01      	cmp	r2, #1
 c0273ac:	d971      	bls.n	c027492 <psa_import_key_into_slot+0x14a>
 c0273ae:	1f02      	subs	r2, r0, #4
 c0273b0:	2a01      	cmp	r2, #1
 c0273b2:	d970      	bls.n	c027496 <psa_import_key_into_slot+0x14e>
 c0273b4:	1f82      	subs	r2, r0, #6
 c0273b6:	2a02      	cmp	r2, #2
 c0273b8:	d96f      	bls.n	c02749a <psa_import_key_into_slot+0x152>
 c0273ba:	f1a0 0209 	sub.w	r2, r0, #9
 c0273be:	2a01      	cmp	r2, #1
 c0273c0:	d96d      	bls.n	c02749e <psa_import_key_into_slot+0x156>
 c0273c2:	f1a0 020b 	sub.w	r2, r0, #11
 c0273c6:	2a01      	cmp	r2, #1
 c0273c8:	d96b      	bls.n	c0274a2 <psa_import_key_into_slot+0x15a>
 c0273ca:	f1a0 020d 	sub.w	r2, r0, #13
 c0273ce:	2a01      	cmp	r2, #1
 c0273d0:	d969      	bls.n	c0274a6 <psa_import_key_into_slot+0x15e>
 c0273d2:	f1a0 020f 	sub.w	r2, r0, #15
 c0273d6:	2a02      	cmp	r2, #2
 c0273d8:	d967      	bls.n	c0274aa <psa_import_key_into_slot+0x162>
 c0273da:	2b01      	cmp	r3, #1
 c0273dc:	d967      	bls.n	c0274ae <psa_import_key_into_slot+0x166>
 c0273de:	f1a0 0314 	sub.w	r3, r0, #20
 c0273e2:	2b01      	cmp	r3, #1
 c0273e4:	d965      	bls.n	c0274b2 <psa_import_key_into_slot+0x16a>
 c0273e6:	f1a0 0316 	sub.w	r3, r0, #22
 c0273ea:	2b01      	cmp	r3, #1
 c0273ec:	d969      	bls.n	c0274c2 <psa_import_key_into_slot+0x17a>
 c0273ee:	2818      	cmp	r0, #24
 c0273f0:	d063      	beq.n	c0274ba <psa_import_key_into_slot+0x172>
 c0273f2:	2819      	cmp	r0, #25
 c0273f4:	d05f      	beq.n	c0274b6 <psa_import_key_into_slot+0x16e>
 c0273f6:	281a      	cmp	r0, #26
 c0273f8:	d063      	beq.n	c0274c2 <psa_import_key_into_slot+0x17a>
 c0273fa:	281b      	cmp	r0, #27
 c0273fc:	d05d      	beq.n	c0274ba <psa_import_key_into_slot+0x172>
 c0273fe:	281c      	cmp	r0, #28
 c027400:	d05d      	beq.n	c0274be <psa_import_key_into_slot+0x176>
 c027402:	281d      	cmp	r0, #29
 c027404:	d05d      	beq.n	c0274c2 <psa_import_key_into_slot+0x17a>
 c027406:	281e      	cmp	r0, #30
 c027408:	bf14      	ite	ne
 c02740a:	2300      	movne	r3, #0
 c02740c:	2338      	moveq	r3, #56	; 0x38
 c02740e:	429d      	cmp	r5, r3
 c027410:	f040 80bc 	bne.w	c02758c <psa_import_key_into_slot+0x244>
    *p_ecp = NULL;
 c027414:	2300      	movs	r3, #0
    ecp = mbedtls_calloc( 1, sizeof( mbedtls_ecp_keypair ) );
 c027416:	21ac      	movs	r1, #172	; 0xac
    *p_ecp = NULL;
 c027418:	61f3      	str	r3, [r6, #28]
    ecp = mbedtls_calloc( 1, sizeof( mbedtls_ecp_keypair ) );
 c02741a:	2001      	movs	r0, #1
 c02741c:	f7ff f96e 	bl	c0266fc <mbedtls_calloc>
    if( ecp == NULL )
 c027420:	4680      	mov	r8, r0
 c027422:	2800      	cmp	r0, #0
 c027424:	f000 80b5 	beq.w	c027592 <psa_import_key_into_slot+0x24a>
    mbedtls_ecp_keypair_init( ecp );
 c027428:	f7fa facd 	bl	c0219c6 <mbedtls_ecp_keypair_init>
    status = mbedtls_to_psa_error(
 c02742c:	4621      	mov	r1, r4
 c02742e:	4640      	mov	r0, r8
 c027430:	f7fb ff1a 	bl	c023268 <mbedtls_ecp_group_load>
 c027434:	f7ff f980 	bl	c026738 <mbedtls_to_psa_error>
    if( status != PSA_SUCCESS )
 c027438:	4604      	mov	r4, r0
 c02743a:	2800      	cmp	r0, #0
 c02743c:	d143      	bne.n	c0274c6 <psa_import_key_into_slot+0x17e>
    status = mbedtls_to_psa_error(
 c02743e:	f108 097c 	add.w	r9, r8, #124	; 0x7c
 c027442:	462a      	mov	r2, r5
 c027444:	4639      	mov	r1, r7
 c027446:	4648      	mov	r0, r9
 c027448:	f7f6 fcfa 	bl	c01de40 <mbedtls_mpi_read_binary>
 c02744c:	f7ff f974 	bl	c026738 <mbedtls_to_psa_error>
    if( status != PSA_SUCCESS )
 c027450:	4604      	mov	r4, r0
 c027452:	bbc0      	cbnz	r0, c0274c6 <psa_import_key_into_slot+0x17e>
    status = mbedtls_to_psa_error(
 c027454:	4649      	mov	r1, r9
 c027456:	4640      	mov	r0, r8
 c027458:	f7fb f84a 	bl	c0224f0 <mbedtls_ecp_check_privkey>
 c02745c:	f7ff f96c 	bl	c026738 <mbedtls_to_psa_error>
    if( status != PSA_SUCCESS )
 c027460:	4604      	mov	r4, r0
 c027462:	bb80      	cbnz	r0, c0274c6 <psa_import_key_into_slot+0x17e>
    status = mbedtls_to_psa_error(
 c027464:	4b50      	ldr	r3, [pc, #320]	; (c0275a8 <psa_import_key_into_slot+0x260>)
 c027466:	464a      	mov	r2, r9
 c027468:	9301      	str	r3, [sp, #4]
 c02746a:	4b50      	ldr	r3, [pc, #320]	; (c0275ac <psa_import_key_into_slot+0x264>)
 c02746c:	f108 0188 	add.w	r1, r8, #136	; 0x88
 c027470:	9300      	str	r3, [sp, #0]
 c027472:	4640      	mov	r0, r8
 c027474:	f108 0328 	add.w	r3, r8, #40	; 0x28
 c027478:	f7fb fc22 	bl	c022cc0 <mbedtls_ecp_mul>
 c02747c:	f7ff f95c 	bl	c026738 <mbedtls_to_psa_error>
    if( status != PSA_SUCCESS )
 c027480:	4604      	mov	r4, r0
 c027482:	bb00      	cbnz	r0, c0274c6 <psa_import_key_into_slot+0x17e>
    *p_ecp = ecp;
 c027484:	f8c6 801c 	str.w	r8, [r6, #28]
 c027488:	e77c      	b.n	c027384 <psa_import_key_into_slot+0x3c>
    if( PSA_BITS_TO_BYTES( PSA_ECC_CURVE_BITS( curve ) ) != data_length )
 c02748a:	2801      	cmp	r0, #1
 c02748c:	f04f 0400 	mov.w	r4, #0
 c027490:	d18a      	bne.n	c0273a8 <psa_import_key_into_slot+0x60>
 c027492:	2315      	movs	r3, #21
 c027494:	e7bb      	b.n	c02740e <psa_import_key_into_slot+0xc6>
 c027496:	2319      	movs	r3, #25
 c027498:	e7b9      	b.n	c02740e <psa_import_key_into_slot+0xc6>
 c02749a:	231e      	movs	r3, #30
 c02749c:	e7b7      	b.n	c02740e <psa_import_key_into_slot+0xc6>
 c02749e:	2324      	movs	r3, #36	; 0x24
 c0274a0:	e7b5      	b.n	c02740e <psa_import_key_into_slot+0xc6>
 c0274a2:	2334      	movs	r3, #52	; 0x34
 c0274a4:	e7b3      	b.n	c02740e <psa_import_key_into_slot+0xc6>
 c0274a6:	2348      	movs	r3, #72	; 0x48
 c0274a8:	e7b1      	b.n	c02740e <psa_import_key_into_slot+0xc6>
 c0274aa:	2314      	movs	r3, #20
 c0274ac:	e7af      	b.n	c02740e <psa_import_key_into_slot+0xc6>
 c0274ae:	2318      	movs	r3, #24
 c0274b0:	e7ad      	b.n	c02740e <psa_import_key_into_slot+0xc6>
 c0274b2:	231c      	movs	r3, #28
 c0274b4:	e7ab      	b.n	c02740e <psa_import_key_into_slot+0xc6>
 c0274b6:	2342      	movs	r3, #66	; 0x42
 c0274b8:	e7a9      	b.n	c02740e <psa_import_key_into_slot+0xc6>
 c0274ba:	2330      	movs	r3, #48	; 0x30
 c0274bc:	e7a7      	b.n	c02740e <psa_import_key_into_slot+0xc6>
 c0274be:	2340      	movs	r3, #64	; 0x40
 c0274c0:	e7a5      	b.n	c02740e <psa_import_key_into_slot+0xc6>
 c0274c2:	2320      	movs	r3, #32
 c0274c4:	e7a3      	b.n	c02740e <psa_import_key_into_slot+0xc6>
        mbedtls_ecp_keypair_free( ecp );
 c0274c6:	4640      	mov	r0, r8
 c0274c8:	f7fa fac0 	bl	c021a4c <mbedtls_ecp_keypair_free>
        mbedtls_free( ecp );
 c0274cc:	4640      	mov	r0, r8
 c0274ce:	f7ff f91b 	bl	c026708 <mbedtls_free>
 c0274d2:	e757      	b.n	c027384 <psa_import_key_into_slot+0x3c>
    else if( PSA_KEY_TYPE_IS_ECC_PUBLIC_KEY( slot->type ) )
 c0274d4:	4836      	ldr	r0, [pc, #216]	; (c0275b0 <psa_import_key_into_slot+0x268>)
 c0274d6:	4283      	cmp	r3, r0
 c0274d8:	d106      	bne.n	c0274e8 <psa_import_key_into_slot+0x1a0>
        status = psa_import_ec_public_key(
 c0274da:	b2a0      	uxth	r0, r4
 c0274dc:	f106 031c 	add.w	r3, r6, #28
 c0274e0:	f7ff feba 	bl	c027258 <psa_import_ec_public_key>
 c0274e4:	4604      	mov	r4, r0
 c0274e6:	e74d      	b.n	c027384 <psa_import_key_into_slot+0x3c>
    if( PSA_KEY_TYPE_IS_RSA( slot->type ) )
 c0274e8:	4b32      	ldr	r3, [pc, #200]	; (c0275b4 <psa_import_key_into_slot+0x26c>)
 c0274ea:	f024 5280 	bic.w	r2, r4, #268435456	; 0x10000000
 c0274ee:	429a      	cmp	r2, r3
 c0274f0:	d152      	bne.n	c027598 <psa_import_key_into_slot+0x250>
    mbedtls_pk_init( &pk );
 c0274f2:	a803      	add	r0, sp, #12
 c0274f4:	f7fd fb63 	bl	c024bbe <mbedtls_pk_init>
    if( PSA_KEY_TYPE_IS_KEYPAIR( type ) )
 c0274f8:	f004 40e0 	and.w	r0, r4, #1879048192	; 0x70000000
 c0274fc:	f1b0 4fe0 	cmp.w	r0, #1879048192	; 0x70000000
 c027500:	d136      	bne.n	c027570 <psa_import_key_into_slot+0x228>
        status = mbedtls_to_psa_error(
 c027502:	2300      	movs	r3, #0
 c027504:	462a      	mov	r2, r5
 c027506:	9300      	str	r3, [sp, #0]
 c027508:	4639      	mov	r1, r7
 c02750a:	a803      	add	r0, sp, #12
 c02750c:	f7fe fd46 	bl	c025f9c <mbedtls_pk_parse_key>
        status = mbedtls_to_psa_error(
 c027510:	f7ff f912 	bl	c026738 <mbedtls_to_psa_error>
 c027514:	4604      	mov	r4, r0
    if( status != PSA_SUCCESS )
 c027516:	bb38      	cbnz	r0, c027568 <psa_import_key_into_slot+0x220>
    if( mbedtls_pk_get_type( &pk ) != MBEDTLS_PK_RSA )
 c027518:	a803      	add	r0, sp, #12
 c02751a:	f7fd fb85 	bl	c024c28 <mbedtls_pk_get_type>
 c02751e:	2801      	cmp	r0, #1
 c027520:	d12c      	bne.n	c02757c <psa_import_key_into_slot+0x234>
    rsa = mbedtls_pk_rsa( pk );
 c027522:	9d04      	ldr	r5, [sp, #16]
    bits = PSA_BYTES_TO_BITS( mbedtls_rsa_get_len( rsa ) );
 c027524:	4628      	mov	r0, r5
 c027526:	f002 fc02 	bl	c029d2e <mbedtls_rsa_get_len>
 c02752a:	00c0      	lsls	r0, r0, #3
    if( bits > PSA_VENDOR_RSA_MAX_KEY_BITS )
 c02752c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 c027530:	d827      	bhi.n	c027582 <psa_import_key_into_slot+0x23a>
    mbedtls_mpi_init( &n );
 c027532:	a805      	add	r0, sp, #20
 c027534:	f7f6 fa8c 	bl	c01da50 <mbedtls_mpi_init>
    status = mbedtls_to_psa_error(
 c027538:	4623      	mov	r3, r4
 c02753a:	4622      	mov	r2, r4
 c02753c:	e9cd 4400 	strd	r4, r4, [sp]
 c027540:	a905      	add	r1, sp, #20
 c027542:	4628      	mov	r0, r5
 c027544:	f002 fb32 	bl	c029bac <mbedtls_rsa_export>
 c027548:	f7ff f8f6 	bl	c026738 <mbedtls_to_psa_error>
    if( status == PSA_SUCCESS )
 c02754c:	4604      	mov	r4, r0
 c02754e:	b938      	cbnz	r0, c027560 <psa_import_key_into_slot+0x218>
        if( mbedtls_mpi_bitlen( &n ) % 8 != 0 )
 c027550:	a805      	add	r0, sp, #20
 c027552:	f7f6 fc1b 	bl	c01dd8c <mbedtls_mpi_bitlen>
            status = PSA_ERROR_NOT_SUPPORTED;
 c027556:	f010 0f07 	tst.w	r0, #7
 c02755a:	bf18      	it	ne
 c02755c:	f06f 0485 	mvnne.w	r4, #133	; 0x85
    mbedtls_mpi_free( &n );
 c027560:	a805      	add	r0, sp, #20
 c027562:	f7f6 fa7b 	bl	c01da5c <mbedtls_mpi_free>
    if( status != PSA_SUCCESS )
 c027566:	b17c      	cbz	r4, c027588 <psa_import_key_into_slot+0x240>
        mbedtls_pk_free( &pk );
 c027568:	a803      	add	r0, sp, #12
 c02756a:	f7fd fb2c 	bl	c024bc6 <mbedtls_pk_free>
 c02756e:	e709      	b.n	c027384 <psa_import_key_into_slot+0x3c>
        status = mbedtls_to_psa_error(
 c027570:	462a      	mov	r2, r5
 c027572:	4639      	mov	r1, r7
 c027574:	a803      	add	r0, sp, #12
 c027576:	f7fe fe31 	bl	c0261dc <mbedtls_pk_parse_public_key>
 c02757a:	e7c9      	b.n	c027510 <psa_import_key_into_slot+0x1c8>
        status = PSA_ERROR_INVALID_ARGUMENT;
 c02757c:	f06f 0486 	mvn.w	r4, #134	; 0x86
 c027580:	e7f2      	b.n	c027568 <psa_import_key_into_slot+0x220>
        status = PSA_ERROR_NOT_SUPPORTED;
 c027582:	f06f 0485 	mvn.w	r4, #133	; 0x85
 c027586:	e7ef      	b.n	c027568 <psa_import_key_into_slot+0x220>
    *p_rsa = rsa;
 c027588:	61f5      	str	r5, [r6, #28]
 c02758a:	e6fb      	b.n	c027384 <psa_import_key_into_slot+0x3c>
        return( PSA_ERROR_INVALID_ARGUMENT );
 c02758c:	f06f 0486 	mvn.w	r4, #134	; 0x86
 c027590:	e6f8      	b.n	c027384 <psa_import_key_into_slot+0x3c>
        return( PSA_ERROR_INSUFFICIENT_MEMORY );
 c027592:	f06f 048c 	mvn.w	r4, #140	; 0x8c
 c027596:	e6f5      	b.n	c027384 <psa_import_key_into_slot+0x3c>
            return( PSA_ERROR_NOT_SUPPORTED );
 c027598:	f06f 0485 	mvn.w	r4, #133	; 0x85
 c02759c:	e6f2      	b.n	c027384 <psa_import_key_into_slot+0x3c>
 c02759e:	bf00      	nop
 c0275a0:	70030000 	.word	0x70030000
 c0275a4:	0c034f21 	.word	0x0c034f21
 c0275a8:	300382d0 	.word	0x300382d0
 c0275ac:	0c0208e5 	.word	0x0c0208e5
 c0275b0:	60030000 	.word	0x60030000
 c0275b4:	60010000 	.word	0x60010000

0c0275b8 <psa_wipe_key_slot>:
{
 c0275b8:	b538      	push	{r3, r4, r5, lr}
    if( slot->type == PSA_KEY_TYPE_NONE )
 c0275ba:	6804      	ldr	r4, [r0, #0]
{
 c0275bc:	4605      	mov	r5, r0
    if( slot->type == PSA_KEY_TYPE_NONE )
 c0275be:	b144      	cbz	r4, c0275d2 <psa_wipe_key_slot+0x1a>
    return( PSA_KEY_TYPE_IS_UNSTRUCTURED( type ) );
 c0275c0:	f004 43c0 	and.w	r3, r4, #1610612736	; 0x60000000
    else if( key_type_is_raw_bytes( slot->type ) )
 c0275c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c0275c8:	d10a      	bne.n	c0275e0 <psa_wipe_key_slot+0x28>
        mbedtls_free( slot->data.ecp );
 c0275ca:	69e8      	ldr	r0, [r5, #28]
 c0275cc:	f7ff f89c 	bl	c026708 <mbedtls_free>
    return( PSA_SUCCESS );
 c0275d0:	2400      	movs	r4, #0
    memset( slot, 0, sizeof( *slot ) );
 c0275d2:	2224      	movs	r2, #36	; 0x24
 c0275d4:	2100      	movs	r1, #0
 c0275d6:	4628      	mov	r0, r5
 c0275d8:	f7ed f9f5 	bl	c0149c6 <memset>
}
 c0275dc:	4620      	mov	r0, r4
 c0275de:	bd38      	pop	{r3, r4, r5, pc}
    if( PSA_KEY_TYPE_IS_RSA( slot->type ) )
 c0275e0:	4b0a      	ldr	r3, [pc, #40]	; (c02760c <psa_wipe_key_slot+0x54>)
 c0275e2:	f024 5280 	bic.w	r2, r4, #268435456	; 0x10000000
 c0275e6:	429a      	cmp	r2, r3
 c0275e8:	d103      	bne.n	c0275f2 <psa_wipe_key_slot+0x3a>
        mbedtls_rsa_free( slot->data.rsa );
 c0275ea:	69c0      	ldr	r0, [r0, #28]
 c0275ec:	f003 fbb2 	bl	c02ad54 <mbedtls_rsa_free>
 c0275f0:	e7eb      	b.n	c0275ca <psa_wipe_key_slot+0x12>
    if( PSA_KEY_TYPE_IS_ECC( slot->type ) )
 c0275f2:	4b07      	ldr	r3, [pc, #28]	; (c027610 <psa_wipe_key_slot+0x58>)
 c0275f4:	4a07      	ldr	r2, [pc, #28]	; (c027614 <psa_wipe_key_slot+0x5c>)
 c0275f6:	4023      	ands	r3, r4
 c0275f8:	4293      	cmp	r3, r2
 c0275fa:	d103      	bne.n	c027604 <psa_wipe_key_slot+0x4c>
        mbedtls_ecp_keypair_free( slot->data.ecp );
 c0275fc:	69c0      	ldr	r0, [r0, #28]
 c0275fe:	f7fa fa25 	bl	c021a4c <mbedtls_ecp_keypair_free>
 c027602:	e7e2      	b.n	c0275ca <psa_wipe_key_slot+0x12>
        return( PSA_ERROR_TAMPERING_DETECTED );
 c027604:	f06f 0496 	mvn.w	r4, #150	; 0x96
 c027608:	e7e3      	b.n	c0275d2 <psa_wipe_key_slot+0x1a>
 c02760a:	bf00      	nop
 c02760c:	60010000 	.word	0x60010000
 c027610:	efff0000 	.word	0xefff0000
 c027614:	60030000 	.word	0x60030000

0c027618 <mbedcrypto__psa_import_key>:
{
 c027618:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c02761a:	460e      	mov	r6, r1
    status = psa_get_empty_key_slot( handle, &slot );
 c02761c:	a901      	add	r1, sp, #4
{
 c02761e:	4614      	mov	r4, r2
 c027620:	461d      	mov	r5, r3
    status = psa_get_empty_key_slot( handle, &slot );
 c027622:	f7ff fa95 	bl	c026b50 <psa_get_empty_key_slot>
    if( status != PSA_SUCCESS )
 c027626:	b948      	cbnz	r0, c02763c <mbedcrypto__psa_import_key+0x24>
    slot->type = type;
 c027628:	9801      	ldr	r0, [sp, #4]
    status = psa_import_key_into_slot( slot, data, data_length );
 c02762a:	462a      	mov	r2, r5
    slot->type = type;
 c02762c:	6006      	str	r6, [r0, #0]
    status = psa_import_key_into_slot( slot, data, data_length );
 c02762e:	4621      	mov	r1, r4
 c027630:	f7ff fe8a 	bl	c027348 <psa_import_key_into_slot>
    if( status != PSA_SUCCESS )
 c027634:	b110      	cbz	r0, c02763c <mbedcrypto__psa_import_key+0x24>
        slot->type = PSA_KEY_TYPE_NONE;
 c027636:	2200      	movs	r2, #0
 c027638:	9b01      	ldr	r3, [sp, #4]
 c02763a:	601a      	str	r2, [r3, #0]
}
 c02763c:	b002      	add	sp, #8
 c02763e:	bd70      	pop	{r4, r5, r6, pc}

0c027640 <mbedcrypto__psa_destroy_key>:
{
 c027640:	b507      	push	{r0, r1, r2, lr}
    status = psa_get_key_slot( handle, &slot );
 c027642:	a901      	add	r1, sp, #4
 c027644:	f002 f85a 	bl	c0296fc <psa_get_key_slot>
    if( status != PSA_SUCCESS )
 c027648:	b910      	cbnz	r0, c027650 <mbedcrypto__psa_destroy_key+0x10>
    status = psa_wipe_key_slot( slot );
 c02764a:	9801      	ldr	r0, [sp, #4]
 c02764c:	f7ff ffb4 	bl	c0275b8 <psa_wipe_key_slot>
}
 c027650:	b003      	add	sp, #12
 c027652:	f85d fb04 	ldr.w	pc, [sp], #4

0c027656 <mbedcrypto__psa_get_key_information>:
{
 c027656:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c027658:	4614      	mov	r4, r2
    if( type != NULL )
 c02765a:	460d      	mov	r5, r1
 c02765c:	b109      	cbz	r1, c027662 <mbedcrypto__psa_get_key_information+0xc>
        *type = 0;
 c02765e:	2300      	movs	r3, #0
 c027660:	600b      	str	r3, [r1, #0]
    if( bits != NULL )
 c027662:	b10c      	cbz	r4, c027668 <mbedcrypto__psa_get_key_information+0x12>
        *bits = 0;
 c027664:	2300      	movs	r3, #0
 c027666:	6023      	str	r3, [r4, #0]
    status = psa_get_key_slot( handle, &slot );
 c027668:	a901      	add	r1, sp, #4
 c02766a:	f002 f847 	bl	c0296fc <psa_get_key_slot>
    if( status != PSA_SUCCESS )
 c02766e:	4606      	mov	r6, r0
 c027670:	b940      	cbnz	r0, c027684 <mbedcrypto__psa_get_key_information+0x2e>
    if( slot->type == PSA_KEY_TYPE_NONE )
 c027672:	9801      	ldr	r0, [sp, #4]
 c027674:	6803      	ldr	r3, [r0, #0]
 c027676:	b143      	cbz	r3, c02768a <mbedcrypto__psa_get_key_information+0x34>
    if( type != NULL )
 c027678:	b105      	cbz	r5, c02767c <mbedcrypto__psa_get_key_information+0x26>
        *type = slot->type;
 c02767a:	602b      	str	r3, [r5, #0]
    if( bits != NULL )
 c02767c:	b114      	cbz	r4, c027684 <mbedcrypto__psa_get_key_information+0x2e>
        *bits = psa_get_key_bits( slot );
 c02767e:	f7ff fc1d 	bl	c026ebc <psa_get_key_bits>
 c027682:	6020      	str	r0, [r4, #0]
}
 c027684:	4630      	mov	r0, r6
 c027686:	b002      	add	sp, #8
 c027688:	bd70      	pop	{r4, r5, r6, pc}
        return( PSA_ERROR_DOES_NOT_EXIST );
 c02768a:	f06f 068b 	mvn.w	r6, #139	; 0x8b
 c02768e:	e7f9      	b.n	c027684 <mbedcrypto__psa_get_key_information+0x2e>

0c027690 <mbedcrypto__psa_export_key>:
{
 c027690:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 c027692:	461c      	mov	r4, r3
    *data_length = 0;
 c027694:	2300      	movs	r3, #0
{
 c027696:	460d      	mov	r5, r1
 c027698:	4616      	mov	r6, r2
    *data_length = 0;
 c02769a:	6023      	str	r3, [r4, #0]
    status = psa_get_key_from_slot( handle, &slot, PSA_KEY_USAGE_EXPORT, 0 );
 c02769c:	2201      	movs	r2, #1
 c02769e:	a903      	add	r1, sp, #12
 c0276a0:	f7ff fba2 	bl	c026de8 <psa_get_key_from_slot>
    if( status != PSA_SUCCESS )
 c0276a4:	b930      	cbnz	r0, c0276b4 <mbedcrypto__psa_export_key+0x24>
    return( psa_internal_export_key( slot, data, data_size,
 c0276a6:	9000      	str	r0, [sp, #0]
 c0276a8:	4623      	mov	r3, r4
 c0276aa:	4632      	mov	r2, r6
 c0276ac:	4629      	mov	r1, r5
 c0276ae:	9803      	ldr	r0, [sp, #12]
 c0276b0:	f7ff fc26 	bl	c026f00 <psa_internal_export_key>
}
 c0276b4:	b004      	add	sp, #16
 c0276b6:	bd70      	pop	{r4, r5, r6, pc}

0c0276b8 <mbedcrypto__psa_export_public_key>:
{
 c0276b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 c0276ba:	461c      	mov	r4, r3
    *data_length = 0;
 c0276bc:	2300      	movs	r3, #0
{
 c0276be:	460d      	mov	r5, r1
 c0276c0:	4616      	mov	r6, r2
    *data_length = 0;
 c0276c2:	6023      	str	r3, [r4, #0]
    status = psa_get_key_from_slot( handle, &slot, 0, 0 );
 c0276c4:	461a      	mov	r2, r3
 c0276c6:	a903      	add	r1, sp, #12
 c0276c8:	f7ff fb8e 	bl	c026de8 <psa_get_key_from_slot>
    if( status != PSA_SUCCESS )
 c0276cc:	b938      	cbnz	r0, c0276de <mbedcrypto__psa_export_public_key+0x26>
    return( psa_internal_export_key( slot, data, data_size,
 c0276ce:	2301      	movs	r3, #1
 c0276d0:	4632      	mov	r2, r6
 c0276d2:	9300      	str	r3, [sp, #0]
 c0276d4:	4629      	mov	r1, r5
 c0276d6:	4623      	mov	r3, r4
 c0276d8:	9803      	ldr	r0, [sp, #12]
 c0276da:	f7ff fc11 	bl	c026f00 <psa_internal_export_key>
}
 c0276de:	b004      	add	sp, #16
 c0276e0:	bd70      	pop	{r4, r5, r6, pc}
	...

0c0276e4 <mbedcrypto__psa_copy_key>:
    psa_key_slot_t *source_slot = NULL;
 c0276e4:	2300      	movs	r3, #0
{
 c0276e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c0276ea:	b089      	sub	sp, #36	; 0x24
 c0276ec:	460f      	mov	r7, r1
 c0276ee:	4614      	mov	r4, r2
    status = psa_get_key_from_slot( source_handle, &source_slot, 0, 0 );
 c0276f0:	a902      	add	r1, sp, #8
 c0276f2:	461a      	mov	r2, r3
    psa_key_slot_t *target_slot = NULL;
 c0276f4:	e9cd 3302 	strd	r3, r3, [sp, #8]
    status = psa_get_key_from_slot( source_handle, &source_slot, 0, 0 );
 c0276f8:	f7ff fb76 	bl	c026de8 <psa_get_key_from_slot>
    if( status != PSA_SUCCESS )
 c0276fc:	4680      	mov	r8, r0
 c0276fe:	bb40      	cbnz	r0, c027752 <mbedcrypto__psa_copy_key+0x6e>
    status = psa_get_empty_key_slot( target_handle, &target_slot );
 c027700:	a903      	add	r1, sp, #12
 c027702:	4638      	mov	r0, r7
 c027704:	f7ff fa24 	bl	c026b50 <psa_get_empty_key_slot>
    if( status != PSA_SUCCESS )
 c027708:	4680      	mov	r8, r0
 c02770a:	bb10      	cbnz	r0, c027752 <mbedcrypto__psa_copy_key+0x6e>
    new_policy = target_slot->policy;
 c02770c:	9b03      	ldr	r3, [sp, #12]
 c02770e:	ae05      	add	r6, sp, #20
 c027710:	3304      	adds	r3, #4
 c027712:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 c027716:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    status = psa_restrict_key_policy( &new_policy, &source_slot->policy );
 c02771a:	9902      	ldr	r1, [sp, #8]
 c02771c:	4630      	mov	r0, r6
 c02771e:	3104      	adds	r1, #4
 c027720:	f7ff fde0 	bl	c0272e4 <psa_restrict_key_policy>
    if( status != PSA_SUCCESS )
 c027724:	4680      	mov	r8, r0
 c027726:	b9a0      	cbnz	r0, c027752 <mbedcrypto__psa_copy_key+0x6e>
    if( constraint != NULL )
 c027728:	b964      	cbnz	r4, c027744 <mbedcrypto__psa_copy_key+0x60>
    status = psa_copy_key_material( source_slot, target_handle );
 c02772a:	9d02      	ldr	r5, [sp, #8]
    buffer_size = PSA_KEY_EXPORT_MAX_SIZE( source->type,
 c02772c:	682b      	ldr	r3, [r5, #0]
 c02772e:	f003 42c0 	and.w	r2, r3, #1610612736	; 0x60000000
 c027732:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 c027736:	d110      	bne.n	c02775a <mbedcrypto__psa_copy_key+0x76>
 c027738:	4628      	mov	r0, r5
 c02773a:	f7ff fbbf 	bl	c026ebc <psa_get_key_bits>
 c02773e:	3007      	adds	r0, #7
 c027740:	08c4      	lsrs	r4, r0, #3
 c027742:	e016      	b.n	c027772 <mbedcrypto__psa_copy_key+0x8e>
        status = psa_restrict_key_policy( &new_policy, constraint );
 c027744:	4621      	mov	r1, r4
 c027746:	4630      	mov	r0, r6
 c027748:	f7ff fdcc 	bl	c0272e4 <psa_restrict_key_policy>
        if( status != PSA_SUCCESS )
 c02774c:	4680      	mov	r8, r0
 c02774e:	2800      	cmp	r0, #0
 c027750:	d0eb      	beq.n	c02772a <mbedcrypto__psa_copy_key+0x46>
}
 c027752:	4640      	mov	r0, r8
 c027754:	b009      	add	sp, #36	; 0x24
 c027756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    buffer_size = PSA_KEY_EXPORT_MAX_SIZE( source->type,
 c02775a:	4a39      	ldr	r2, [pc, #228]	; (c027840 <mbedcrypto__psa_copy_key+0x15c>)
 c02775c:	4293      	cmp	r3, r2
 c02775e:	d112      	bne.n	c027786 <mbedcrypto__psa_copy_key+0xa2>
 c027760:	4628      	mov	r0, r5
 c027762:	f7ff fbab 	bl	c026ebc <psa_get_key_bits>
 c027766:	0844      	lsrs	r4, r0, #1
 c027768:	3401      	adds	r4, #1
 c02776a:	08e4      	lsrs	r4, r4, #3
 c02776c:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 c027770:	343b      	adds	r4, #59	; 0x3b
    buffer = mbedtls_calloc( 1, buffer_size );
 c027772:	4621      	mov	r1, r4
 c027774:	2001      	movs	r0, #1
 c027776:	f7fe ffc1 	bl	c0266fc <mbedtls_calloc>
    if( buffer == NULL && buffer_size != 0 )
 c02777a:	4681      	mov	r9, r0
 c02777c:	bbb8      	cbnz	r0, c0277ee <mbedcrypto__psa_copy_key+0x10a>
 c02777e:	b3b4      	cbz	r4, c0277ee <mbedcrypto__psa_copy_key+0x10a>
        return( PSA_ERROR_INSUFFICIENT_MEMORY );
 c027780:	f06f 088c 	mvn.w	r8, #140	; 0x8c
 c027784:	e7e5      	b.n	c027752 <mbedcrypto__psa_copy_key+0x6e>
    buffer_size = PSA_KEY_EXPORT_MAX_SIZE( source->type,
 c027786:	4a2f      	ldr	r2, [pc, #188]	; (c027844 <mbedcrypto__psa_copy_key+0x160>)
 c027788:	4293      	cmp	r3, r2
 c02778a:	d106      	bne.n	c02779a <mbedcrypto__psa_copy_key+0xb6>
 c02778c:	4628      	mov	r0, r5
 c02778e:	f7ff fb95 	bl	c026ebc <psa_get_key_bits>
 c027792:	08c0      	lsrs	r0, r0, #3
 c027794:	f100 0410 	add.w	r4, r0, #16
 c027798:	e7eb      	b.n	c027772 <mbedcrypto__psa_copy_key+0x8e>
 c02779a:	4a2b      	ldr	r2, [pc, #172]	; (c027848 <mbedcrypto__psa_copy_key+0x164>)
 c02779c:	4293      	cmp	r3, r2
 c02779e:	d108      	bne.n	c0277b2 <mbedcrypto__psa_copy_key+0xce>
 c0277a0:	4628      	mov	r0, r5
 c0277a2:	f7ff fb8b 	bl	c026ebc <psa_get_key_bits>
 c0277a6:	08c0      	lsrs	r0, r0, #3
 c0277a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 c0277ac:	f100 045a 	add.w	r4, r0, #90	; 0x5a
 c0277b0:	e7df      	b.n	c027772 <mbedcrypto__psa_copy_key+0x8e>
 c0277b2:	4a26      	ldr	r2, [pc, #152]	; (c02784c <mbedcrypto__psa_copy_key+0x168>)
 c0277b4:	4293      	cmp	r3, r2
 c0277b6:	d108      	bne.n	c0277ca <mbedcrypto__psa_copy_key+0xe6>
 c0277b8:	4628      	mov	r0, r5
 c0277ba:	f7ff fb7f 	bl	c026ebc <psa_get_key_bits>
 c0277be:	08c0      	lsrs	r0, r0, #3
 c0277c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 c0277c4:	f100 044a 	add.w	r4, r0, #74	; 0x4a
 c0277c8:	e7d3      	b.n	c027772 <mbedcrypto__psa_copy_key+0x8e>
 c0277ca:	0c1b      	lsrs	r3, r3, #16
 c0277cc:	4a20      	ldr	r2, [pc, #128]	; (c027850 <mbedcrypto__psa_copy_key+0x16c>)
 c0277ce:	041b      	lsls	r3, r3, #16
 c0277d0:	4293      	cmp	r3, r2
 c0277d2:	d0b1      	beq.n	c027738 <mbedcrypto__psa_copy_key+0x54>
 c0277d4:	4a1f      	ldr	r2, [pc, #124]	; (c027854 <mbedcrypto__psa_copy_key+0x170>)
 c0277d6:	4293      	cmp	r3, r2
 c0277d8:	d107      	bne.n	c0277ea <mbedcrypto__psa_copy_key+0x106>
 c0277da:	4628      	mov	r0, r5
 c0277dc:	f7ff fb6e 	bl	c026ebc <psa_get_key_bits>
 c0277e0:	3007      	adds	r0, #7
 c0277e2:	08c0      	lsrs	r0, r0, #3
 c0277e4:	0040      	lsls	r0, r0, #1
 c0277e6:	1c44      	adds	r4, r0, #1
 c0277e8:	e7c3      	b.n	c027772 <mbedcrypto__psa_copy_key+0x8e>
 c0277ea:	2400      	movs	r4, #0
 c0277ec:	e7c1      	b.n	c027772 <mbedcrypto__psa_copy_key+0x8e>
    status = psa_internal_export_key( source, buffer, buffer_size, &length, 0 );
 c0277ee:	2300      	movs	r3, #0
 c0277f0:	4622      	mov	r2, r4
 c0277f2:	9300      	str	r3, [sp, #0]
 c0277f4:	4649      	mov	r1, r9
 c0277f6:	ab04      	add	r3, sp, #16
 c0277f8:	4628      	mov	r0, r5
 c0277fa:	f7ff fb81 	bl	c026f00 <psa_internal_export_key>
    if( status != PSA_SUCCESS )
 c0277fe:	4680      	mov	r8, r0
 c027800:	b9c0      	cbnz	r0, c027834 <mbedcrypto__psa_copy_key+0x150>
    status = psa_import_key( target, source->type, buffer, length );
 c027802:	9b04      	ldr	r3, [sp, #16]
 c027804:	464a      	mov	r2, r9
 c027806:	6829      	ldr	r1, [r5, #0]
 c027808:	4638      	mov	r0, r7
 c02780a:	f7ff ff05 	bl	c027618 <mbedcrypto__psa_import_key>
 c02780e:	4680      	mov	r8, r0
    if( buffer_size != 0 )
 c027810:	b11c      	cbz	r4, c02781a <mbedcrypto__psa_copy_key+0x136>
        mbedtls_platform_zeroize( buffer, buffer_size );
 c027812:	4621      	mov	r1, r4
 c027814:	4648      	mov	r0, r9
 c027816:	f7fe ff87 	bl	c026728 <mbedtls_platform_zeroize>
    mbedtls_free( buffer );
 c02781a:	4648      	mov	r0, r9
 c02781c:	f7fe ff74 	bl	c026708 <mbedtls_free>
    if( status != PSA_SUCCESS )
 c027820:	f1b8 0f00 	cmp.w	r8, #0
 c027824:	d195      	bne.n	c027752 <mbedcrypto__psa_copy_key+0x6e>
    target_slot->policy = new_policy;
 c027826:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 c02782a:	9b03      	ldr	r3, [sp, #12]
 c02782c:	3304      	adds	r3, #4
 c02782e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return( PSA_SUCCESS );
 c027832:	e78e      	b.n	c027752 <mbedcrypto__psa_copy_key+0x6e>
    if( buffer_size != 0 )
 c027834:	2c00      	cmp	r4, #0
 c027836:	d1ec      	bne.n	c027812 <mbedcrypto__psa_copy_key+0x12e>
    mbedtls_free( buffer );
 c027838:	4648      	mov	r0, r9
 c02783a:	f7fe ff65 	bl	c026708 <mbedtls_free>
 c02783e:	e788      	b.n	c027752 <mbedcrypto__psa_copy_key+0x6e>
 c027840:	70010000 	.word	0x70010000
 c027844:	60010000 	.word	0x60010000
 c027848:	70020000 	.word	0x70020000
 c02784c:	60020000 	.word	0x60020000
 c027850:	70030000 	.word	0x70030000
 c027854:	60030000 	.word	0x60030000

0c027858 <mbedcrypto__psa_hash_abort>:
    switch( operation->alg )
 c027858:	6803      	ldr	r3, [r0, #0]
 c02785a:	4a0c      	ldr	r2, [pc, #48]	; (c02788c <mbedcrypto__psa_hash_abort+0x34>)
{
 c02785c:	b510      	push	{r4, lr}
    switch( operation->alg )
 c02785e:	4293      	cmp	r3, r2
{
 c027860:	4604      	mov	r4, r0
    switch( operation->alg )
 c027862:	d806      	bhi.n	c027872 <mbedcrypto__psa_hash_abort+0x1a>
 c027864:	3a01      	subs	r2, #1
 c027866:	4293      	cmp	r3, r2
 c027868:	d20a      	bcs.n	c027880 <mbedcrypto__psa_hash_abort+0x28>
 c02786a:	b163      	cbz	r3, c027886 <mbedcrypto__psa_hash_abort+0x2e>
            return( PSA_ERROR_BAD_STATE );
 c02786c:	f06f 0088 	mvn.w	r0, #136	; 0x88
 c027870:	e00b      	b.n	c02788a <mbedcrypto__psa_hash_abort+0x32>
    switch( operation->alg )
 c027872:	4a07      	ldr	r2, [pc, #28]	; (c027890 <mbedcrypto__psa_hash_abort+0x38>)
 c027874:	4293      	cmp	r3, r2
 c027876:	d8f9      	bhi.n	c02786c <mbedcrypto__psa_hash_abort+0x14>
            mbedtls_sha512_free( &operation->ctx.sha512 );
 c027878:	3008      	adds	r0, #8
 c02787a:	f004 fb4f 	bl	c02bf1c <mbedtls_sha512_free>
            break;
 c02787e:	e002      	b.n	c027886 <mbedcrypto__psa_hash_abort+0x2e>
            mbedtls_sha256_free( &operation->ctx.sha256 );
 c027880:	3008      	adds	r0, #8
 c027882:	f003 fe93 	bl	c02b5ac <mbedtls_sha256_free>
    operation->alg = 0;
 c027886:	2000      	movs	r0, #0
 c027888:	6020      	str	r0, [r4, #0]
}
 c02788a:	bd10      	pop	{r4, pc}
 c02788c:	01000009 	.word	0x01000009
 c027890:	0100000b 	.word	0x0100000b

0c027894 <psa_hmac_abort_internal>:
{
 c027894:	b510      	push	{r4, lr}
 c027896:	4604      	mov	r4, r0
    mbedtls_platform_zeroize( hmac->opad, sizeof( hmac->opad ) );
 c027898:	2180      	movs	r1, #128	; 0x80
 c02789a:	30e0      	adds	r0, #224	; 0xe0
 c02789c:	f7fe ff44 	bl	c026728 <mbedtls_platform_zeroize>
    return( psa_hash_abort( &hmac->hash_ctx ) );
 c0278a0:	4620      	mov	r0, r4
}
 c0278a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return( psa_hash_abort( &hmac->hash_ctx ) );
 c0278a6:	f7ff bfd7 	b.w	c027858 <mbedcrypto__psa_hash_abort>

0c0278aa <mbedcrypto__psa_hash_update.part.7>:
psa_status_t psa_hash_update( psa_hash_operation_t *operation,
 c0278aa:	b538      	push	{r3, r4, r5, lr}
    switch( operation->alg )
 c0278ac:	6803      	ldr	r3, [r0, #0]
psa_status_t psa_hash_update( psa_hash_operation_t *operation,
 c0278ae:	4604      	mov	r4, r0
    switch( operation->alg )
 c0278b0:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 c0278b4:	3b08      	subs	r3, #8
 c0278b6:	2b03      	cmp	r3, #3
 c0278b8:	d816      	bhi.n	c0278e8 <mbedcrypto__psa_hash_update.part.7+0x3e>
 c0278ba:	e8df f003 	tbb	[pc, r3]
 c0278be:	0202      	.short	0x0202
 c0278c0:	1010      	.short	0x1010
            ret = mbedtls_sha256_update_ret( &operation->ctx.sha256,
 c0278c2:	f104 0008 	add.w	r0, r4, #8
 c0278c6:	f004 fa33 	bl	c02bd30 <mbedtls_sha256_update_ret>
            ret = mbedtls_sha512_update_ret( &operation->ctx.sha512,
 c0278ca:	4605      	mov	r5, r0
    if( ret != 0 )
 c0278cc:	b110      	cbz	r0, c0278d4 <mbedcrypto__psa_hash_update.part.7+0x2a>
        psa_hash_abort( operation );
 c0278ce:	4620      	mov	r0, r4
 c0278d0:	f7ff ffc2 	bl	c027858 <mbedcrypto__psa_hash_abort>
    return( mbedtls_to_psa_error( ret ) );
 c0278d4:	4628      	mov	r0, r5
}
 c0278d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return( mbedtls_to_psa_error( ret ) );
 c0278da:	f7fe bf2d 	b.w	c026738 <mbedtls_to_psa_error>
            ret = mbedtls_sha512_update_ret( &operation->ctx.sha512,
 c0278de:	f104 0008 	add.w	r0, r4, #8
 c0278e2:	f005 fa6d 	bl	c02cdc0 <mbedtls_sha512_update_ret>
 c0278e6:	e7f0      	b.n	c0278ca <mbedcrypto__psa_hash_update.part.7+0x20>
}
 c0278e8:	f06f 0088 	mvn.w	r0, #136	; 0x88
 c0278ec:	bd38      	pop	{r3, r4, r5, pc}

0c0278ee <mbedcrypto__psa_hash_setup>:
    if( operation->alg != 0 )
 c0278ee:	6803      	ldr	r3, [r0, #0]
{
 c0278f0:	b570      	push	{r4, r5, r6, lr}
 c0278f2:	4604      	mov	r4, r0
 c0278f4:	460e      	mov	r6, r1
    if( operation->alg != 0 )
 c0278f6:	2b00      	cmp	r3, #0
 c0278f8:	d13f      	bne.n	c02797a <mbedcrypto__psa_hash_setup+0x8c>
    switch( alg )
 c0278fa:	f101 437f 	add.w	r3, r1, #4278190080	; 0xff000000
 c0278fe:	3b08      	subs	r3, #8
 c027900:	2b03      	cmp	r3, #3
 c027902:	d82c      	bhi.n	c02795e <mbedcrypto__psa_hash_setup+0x70>
 c027904:	e8df f003 	tbb	[pc, r3]
 c027908:	241a1302 	.word	0x241a1302
            mbedtls_sha256_init( &operation->ctx.sha256 );
 c02790c:	f100 0508 	add.w	r5, r0, #8
 c027910:	4628      	mov	r0, r5
 c027912:	f003 fe47 	bl	c02b5a4 <mbedtls_sha256_init>
            ret = mbedtls_sha256_starts_ret( &operation->ctx.sha256, 1 );
 c027916:	2101      	movs	r1, #1
            ret = mbedtls_sha256_starts_ret( &operation->ctx.sha256, 0 );
 c027918:	4628      	mov	r0, r5
 c02791a:	f003 fe51 	bl	c02b5c0 <mbedtls_sha256_starts_ret>
            ret = mbedtls_sha512_starts_ret( &operation->ctx.sha512, 0 );
 c02791e:	4605      	mov	r5, r0
    if( ret == 0 )
 c027920:	bb38      	cbnz	r0, c027972 <mbedcrypto__psa_hash_setup+0x84>
        operation->alg = alg;
 c027922:	6026      	str	r6, [r4, #0]
    return( mbedtls_to_psa_error( ret ) );
 c027924:	4628      	mov	r0, r5
}
 c027926:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return( mbedtls_to_psa_error( ret ) );
 c02792a:	f7fe bf05 	b.w	c026738 <mbedtls_to_psa_error>
            mbedtls_sha256_init( &operation->ctx.sha256 );
 c02792e:	f100 0508 	add.w	r5, r0, #8
 c027932:	4628      	mov	r0, r5
 c027934:	f003 fe36 	bl	c02b5a4 <mbedtls_sha256_init>
            ret = mbedtls_sha256_starts_ret( &operation->ctx.sha256, 0 );
 c027938:	2100      	movs	r1, #0
 c02793a:	e7ed      	b.n	c027918 <mbedcrypto__psa_hash_setup+0x2a>
            mbedtls_sha512_init( &operation->ctx.sha512 );
 c02793c:	f100 0508 	add.w	r5, r0, #8
 c027940:	4628      	mov	r0, r5
 c027942:	f004 fae7 	bl	c02bf14 <mbedtls_sha512_init>
            ret = mbedtls_sha512_starts_ret( &operation->ctx.sha512, 1 );
 c027946:	2101      	movs	r1, #1
            ret = mbedtls_sha512_starts_ret( &operation->ctx.sha512, 0 );
 c027948:	4628      	mov	r0, r5
 c02794a:	f004 faf1 	bl	c02bf30 <mbedtls_sha512_starts_ret>
 c02794e:	e7e6      	b.n	c02791e <mbedcrypto__psa_hash_setup+0x30>
            mbedtls_sha512_init( &operation->ctx.sha512 );
 c027950:	f100 0508 	add.w	r5, r0, #8
 c027954:	4628      	mov	r0, r5
 c027956:	f004 fadd 	bl	c02bf14 <mbedtls_sha512_init>
            ret = mbedtls_sha512_starts_ret( &operation->ctx.sha512, 0 );
 c02795a:	2100      	movs	r1, #0
 c02795c:	e7f4      	b.n	c027948 <mbedcrypto__psa_hash_setup+0x5a>
            return( PSA_ALG_IS_HASH( alg ) ?
 c02795e:	f001 46fe 	and.w	r6, r1, #2130706432	; 0x7f000000
                    PSA_ERROR_NOT_SUPPORTED :
 c027962:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
 c027966:	bf0c      	ite	eq
 c027968:	f06f 0085 	mvneq.w	r0, #133	; 0x85
 c02796c:	f06f 0086 	mvnne.w	r0, #134	; 0x86
}
 c027970:	bd70      	pop	{r4, r5, r6, pc}
        psa_hash_abort( operation );
 c027972:	4620      	mov	r0, r4
 c027974:	f7ff ff70 	bl	c027858 <mbedcrypto__psa_hash_abort>
 c027978:	e7d4      	b.n	c027924 <mbedcrypto__psa_hash_setup+0x36>
        return( PSA_ERROR_BAD_STATE );
 c02797a:	f06f 0088 	mvn.w	r0, #136	; 0x88
 c02797e:	e7f7      	b.n	c027970 <mbedcrypto__psa_hash_setup+0x82>

0c027980 <mbedcrypto__psa_hash_update>:
    if( input_length == 0 )
 c027980:	b10a      	cbz	r2, c027986 <mbedcrypto__psa_hash_update+0x6>
 c027982:	f7ff bf92 	b.w	c0278aa <mbedcrypto__psa_hash_update.part.7>
}
 c027986:	4610      	mov	r0, r2
 c027988:	4770      	bx	lr
	...

0c02798c <mbedcrypto__psa_hash_finish>:
{
 c02798c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t actual_hash_length = PSA_HASH_SIZE( operation->alg );
 c027990:	7804      	ldrb	r4, [r0, #0]
{
 c027992:	461f      	mov	r7, r3
    size_t actual_hash_length = PSA_HASH_SIZE( operation->alg );
 c027994:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 c027998:	f104 437f 	add.w	r3, r4, #4278190080	; 0xff000000
 c02799c:	3b01      	subs	r3, #1
 c02799e:	2b02      	cmp	r3, #2
{
 c0279a0:	4605      	mov	r5, r0
 c0279a2:	4688      	mov	r8, r1
 c0279a4:	4616      	mov	r6, r2
    size_t actual_hash_length = PSA_HASH_SIZE( operation->alg );
 c0279a6:	d937      	bls.n	c027a18 <mbedcrypto__psa_hash_finish+0x8c>
 c0279a8:	f104 437f 	add.w	r3, r4, #4278190080	; 0xff000000
 c0279ac:	3b04      	subs	r3, #4
 c0279ae:	2b01      	cmp	r3, #1
 c0279b0:	d934      	bls.n	c027a1c <mbedcrypto__psa_hash_finish+0x90>
 c0279b2:	4b2f      	ldr	r3, [pc, #188]	; (c027a70 <mbedcrypto__psa_hash_finish+0xe4>)
 c0279b4:	429c      	cmp	r4, r3
 c0279b6:	d035      	beq.n	c027a24 <mbedcrypto__psa_hash_finish+0x98>
 c0279b8:	3301      	adds	r3, #1
 c0279ba:	429c      	cmp	r4, r3
 c0279bc:	d034      	beq.n	c027a28 <mbedcrypto__psa_hash_finish+0x9c>
 c0279be:	3301      	adds	r3, #1
 c0279c0:	429c      	cmp	r4, r3
 c0279c2:	d033      	beq.n	c027a2c <mbedcrypto__psa_hash_finish+0xa0>
 c0279c4:	3301      	adds	r3, #1
 c0279c6:	429c      	cmp	r4, r3
 c0279c8:	d02a      	beq.n	c027a20 <mbedcrypto__psa_hash_finish+0x94>
 c0279ca:	3301      	adds	r3, #1
 c0279cc:	429c      	cmp	r4, r3
 c0279ce:	d029      	beq.n	c027a24 <mbedcrypto__psa_hash_finish+0x98>
 c0279d0:	3301      	adds	r3, #1
 c0279d2:	429c      	cmp	r4, r3
 c0279d4:	d028      	beq.n	c027a28 <mbedcrypto__psa_hash_finish+0x9c>
 c0279d6:	3303      	adds	r3, #3
 c0279d8:	429c      	cmp	r4, r3
 c0279da:	d023      	beq.n	c027a24 <mbedcrypto__psa_hash_finish+0x98>
 c0279dc:	3301      	adds	r3, #1
 c0279de:	429c      	cmp	r4, r3
 c0279e0:	d022      	beq.n	c027a28 <mbedcrypto__psa_hash_finish+0x9c>
 c0279e2:	3301      	adds	r3, #1
 c0279e4:	429c      	cmp	r4, r3
 c0279e6:	d021      	beq.n	c027a2c <mbedcrypto__psa_hash_finish+0xa0>
 c0279e8:	3301      	adds	r3, #1
 c0279ea:	429c      	cmp	r4, r3
 c0279ec:	bf0c      	ite	eq
 c0279ee:	2440      	moveq	r4, #64	; 0x40
 c0279f0:	2400      	movne	r4, #0
    *hash_length = hash_size;
 c0279f2:	603e      	str	r6, [r7, #0]
    if( hash_size != 0 )
 c0279f4:	b126      	cbz	r6, c027a00 <mbedcrypto__psa_hash_finish+0x74>
        memset( hash, '!', hash_size );
 c0279f6:	4632      	mov	r2, r6
 c0279f8:	2121      	movs	r1, #33	; 0x21
 c0279fa:	4640      	mov	r0, r8
 c0279fc:	f7ec ffe3 	bl	c0149c6 <memset>
    if( hash_size < actual_hash_length )
 c027a00:	42b4      	cmp	r4, r6
 c027a02:	d82a      	bhi.n	c027a5a <mbedcrypto__psa_hash_finish+0xce>
    switch( operation->alg )
 c027a04:	682b      	ldr	r3, [r5, #0]
 c027a06:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 c027a0a:	3b08      	subs	r3, #8
 c027a0c:	2b03      	cmp	r3, #3
 c027a0e:	d82c      	bhi.n	c027a6a <mbedcrypto__psa_hash_finish+0xde>
 c027a10:	e8df f003 	tbb	[pc, r3]
 c027a14:	1d1d0e0e 	.word	0x1d1d0e0e
    size_t actual_hash_length = PSA_HASH_SIZE( operation->alg );
 c027a18:	2410      	movs	r4, #16
 c027a1a:	e7ea      	b.n	c0279f2 <mbedcrypto__psa_hash_finish+0x66>
 c027a1c:	2414      	movs	r4, #20
 c027a1e:	e7e8      	b.n	c0279f2 <mbedcrypto__psa_hash_finish+0x66>
 c027a20:	2440      	movs	r4, #64	; 0x40
 c027a22:	e7e6      	b.n	c0279f2 <mbedcrypto__psa_hash_finish+0x66>
 c027a24:	241c      	movs	r4, #28
 c027a26:	e7e4      	b.n	c0279f2 <mbedcrypto__psa_hash_finish+0x66>
 c027a28:	2420      	movs	r4, #32
 c027a2a:	e7e2      	b.n	c0279f2 <mbedcrypto__psa_hash_finish+0x66>
 c027a2c:	2430      	movs	r4, #48	; 0x30
 c027a2e:	e7e0      	b.n	c0279f2 <mbedcrypto__psa_hash_finish+0x66>
            ret = mbedtls_sha256_finish_ret( &operation->ctx.sha256, hash );
 c027a30:	4641      	mov	r1, r8
 c027a32:	f105 0008 	add.w	r0, r5, #8
 c027a36:	f004 f9b8 	bl	c02bdaa <mbedtls_sha256_finish_ret>
    status = mbedtls_to_psa_error( ret );
 c027a3a:	f7fe fe7d 	bl	c026738 <mbedtls_to_psa_error>
    if( status == PSA_SUCCESS )
 c027a3e:	4606      	mov	r6, r0
 c027a40:	b968      	cbnz	r0, c027a5e <mbedcrypto__psa_hash_finish+0xd2>
        *hash_length = actual_hash_length;
 c027a42:	603c      	str	r4, [r7, #0]
        return( psa_hash_abort( operation ) );
 c027a44:	4628      	mov	r0, r5
}
 c027a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return( psa_hash_abort( operation ) );
 c027a4a:	f7ff bf05 	b.w	c027858 <mbedcrypto__psa_hash_abort>
            ret = mbedtls_sha512_finish_ret( &operation->ctx.sha512, hash );
 c027a4e:	4641      	mov	r1, r8
 c027a50:	f105 0008 	add.w	r0, r5, #8
 c027a54:	f005 fa07 	bl	c02ce66 <mbedtls_sha512_finish_ret>
            break;
 c027a58:	e7ef      	b.n	c027a3a <mbedcrypto__psa_hash_finish+0xae>
        status = PSA_ERROR_BUFFER_TOO_SMALL;
 c027a5a:	f06f 0689 	mvn.w	r6, #137	; 0x89
        psa_hash_abort( operation );
 c027a5e:	4628      	mov	r0, r5
 c027a60:	f7ff fefa 	bl	c027858 <mbedcrypto__psa_hash_abort>
}
 c027a64:	4630      	mov	r0, r6
 c027a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return( PSA_ERROR_BAD_STATE );
 c027a6a:	f06f 0688 	mvn.w	r6, #136	; 0x88
 c027a6e:	e7f9      	b.n	c027a64 <mbedcrypto__psa_hash_finish+0xd8>
 c027a70:	01000008 	.word	0x01000008

0c027a74 <psa_hmac_setup_internal>:
{
 c027a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c027a78:	461f      	mov	r7, r3
    size_t hash_size = PSA_HASH_SIZE( hash_alg );
 c027a7a:	b2db      	uxtb	r3, r3
{
 c027a7c:	b0a3      	sub	sp, #140	; 0x8c
    size_t hash_size = PSA_HASH_SIZE( hash_alg );
 c027a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
{
 c027a82:	9201      	str	r2, [sp, #4]
    size_t hash_size = PSA_HASH_SIZE( hash_alg );
 c027a84:	f103 427f 	add.w	r2, r3, #4278190080	; 0xff000000
 c027a88:	3a01      	subs	r2, #1
 c027a8a:	2a02      	cmp	r2, #2
{
 c027a8c:	4606      	mov	r6, r0
 c027a8e:	4688      	mov	r8, r1
    size_t hash_size = PSA_HASH_SIZE( hash_alg );
 c027a90:	d932      	bls.n	c027af8 <psa_hmac_setup_internal+0x84>
 c027a92:	f103 427f 	add.w	r2, r3, #4278190080	; 0xff000000
 c027a96:	3a04      	subs	r2, #4
 c027a98:	2a01      	cmp	r2, #1
 c027a9a:	d92f      	bls.n	c027afc <psa_hmac_setup_internal+0x88>
 c027a9c:	4a4a      	ldr	r2, [pc, #296]	; (c027bc8 <psa_hmac_setup_internal+0x154>)
 c027a9e:	4293      	cmp	r3, r2
 c027aa0:	d030      	beq.n	c027b04 <psa_hmac_setup_internal+0x90>
 c027aa2:	3201      	adds	r2, #1
 c027aa4:	4293      	cmp	r3, r2
 c027aa6:	d02f      	beq.n	c027b08 <psa_hmac_setup_internal+0x94>
 c027aa8:	3201      	adds	r2, #1
 c027aaa:	4293      	cmp	r3, r2
 c027aac:	d02e      	beq.n	c027b0c <psa_hmac_setup_internal+0x98>
 c027aae:	3201      	adds	r2, #1
 c027ab0:	4293      	cmp	r3, r2
 c027ab2:	d025      	beq.n	c027b00 <psa_hmac_setup_internal+0x8c>
 c027ab4:	3201      	adds	r2, #1
 c027ab6:	4293      	cmp	r3, r2
 c027ab8:	d024      	beq.n	c027b04 <psa_hmac_setup_internal+0x90>
 c027aba:	3201      	adds	r2, #1
 c027abc:	4293      	cmp	r3, r2
 c027abe:	d023      	beq.n	c027b08 <psa_hmac_setup_internal+0x94>
 c027ac0:	3203      	adds	r2, #3
 c027ac2:	4293      	cmp	r3, r2
 c027ac4:	d01e      	beq.n	c027b04 <psa_hmac_setup_internal+0x90>
 c027ac6:	3201      	adds	r2, #1
 c027ac8:	4293      	cmp	r3, r2
 c027aca:	d01d      	beq.n	c027b08 <psa_hmac_setup_internal+0x94>
 c027acc:	3201      	adds	r2, #1
 c027ace:	4293      	cmp	r3, r2
 c027ad0:	d01c      	beq.n	c027b0c <psa_hmac_setup_internal+0x98>
 c027ad2:	3201      	adds	r2, #1
 c027ad4:	4293      	cmp	r3, r2
 c027ad6:	bf0c      	ite	eq
 c027ad8:	2340      	moveq	r3, #64	; 0x40
 c027ada:	2300      	movne	r3, #0
 c027adc:	f107 427f 	add.w	r2, r7, #4278190080	; 0xff000000
 c027ae0:	3a01      	subs	r2, #1
 c027ae2:	2a0a      	cmp	r2, #10
 c027ae4:	d814      	bhi.n	c027b10 <psa_hmac_setup_internal+0x9c>
 c027ae6:	4939      	ldr	r1, [pc, #228]	; (c027bcc <psa_hmac_setup_internal+0x158>)
 c027ae8:	f811 9002 	ldrb.w	r9, [r1, r2]
    if( block_size > sizeof( ipad ) )
 c027aec:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 c027af0:	d910      	bls.n	c027b14 <psa_hmac_setup_internal+0xa0>
        return( PSA_ERROR_NOT_SUPPORTED );
 c027af2:	f06f 0485 	mvn.w	r4, #133	; 0x85
 c027af6:	e04e      	b.n	c027b96 <psa_hmac_setup_internal+0x122>
    size_t hash_size = PSA_HASH_SIZE( hash_alg );
 c027af8:	2310      	movs	r3, #16
 c027afa:	e7ef      	b.n	c027adc <psa_hmac_setup_internal+0x68>
 c027afc:	2314      	movs	r3, #20
 c027afe:	e7ed      	b.n	c027adc <psa_hmac_setup_internal+0x68>
 c027b00:	2340      	movs	r3, #64	; 0x40
 c027b02:	e7eb      	b.n	c027adc <psa_hmac_setup_internal+0x68>
 c027b04:	231c      	movs	r3, #28
 c027b06:	e7e9      	b.n	c027adc <psa_hmac_setup_internal+0x68>
 c027b08:	2320      	movs	r3, #32
 c027b0a:	e7e7      	b.n	c027adc <psa_hmac_setup_internal+0x68>
 c027b0c:	2330      	movs	r3, #48	; 0x30
 c027b0e:	e7e5      	b.n	c027adc <psa_hmac_setup_internal+0x68>
 c027b10:	f04f 0900 	mov.w	r9, #0
    if( block_size < hash_size )
 c027b14:	454b      	cmp	r3, r9
 c027b16:	d8ec      	bhi.n	c027af2 <psa_hmac_setup_internal+0x7e>
    if( key_length > block_size )
 c027b18:	9c01      	ldr	r4, [sp, #4]
 c027b1a:	ad02      	add	r5, sp, #8
 c027b1c:	454c      	cmp	r4, r9
 c027b1e:	d93e      	bls.n	c027b9e <psa_hmac_setup_internal+0x12a>
        status = psa_hash_setup( &hmac->hash_ctx, hash_alg );
 c027b20:	4639      	mov	r1, r7
 c027b22:	4630      	mov	r0, r6
 c027b24:	f7ff fee3 	bl	c0278ee <mbedcrypto__psa_hash_setup>
        if( status != PSA_SUCCESS )
 c027b28:	4604      	mov	r4, r0
 c027b2a:	bb80      	cbnz	r0, c027b8e <psa_hmac_setup_internal+0x11a>
        status = psa_hash_update( &hmac->hash_ctx, key, key_length );
 c027b2c:	9a01      	ldr	r2, [sp, #4]
 c027b2e:	4641      	mov	r1, r8
 c027b30:	4630      	mov	r0, r6
 c027b32:	f7ff ff25 	bl	c027980 <mbedcrypto__psa_hash_update>
        if( status != PSA_SUCCESS )
 c027b36:	4604      	mov	r4, r0
 c027b38:	bb48      	cbnz	r0, c027b8e <psa_hmac_setup_internal+0x11a>
        status = psa_hash_finish( &hmac->hash_ctx,
 c027b3a:	ab01      	add	r3, sp, #4
 c027b3c:	2280      	movs	r2, #128	; 0x80
 c027b3e:	4629      	mov	r1, r5
 c027b40:	4630      	mov	r0, r6
 c027b42:	f7ff ff23 	bl	c02798c <mbedcrypto__psa_hash_finish>
        if( status != PSA_SUCCESS )
 c027b46:	4604      	mov	r4, r0
 c027b48:	bb08      	cbnz	r0, c027b8e <psa_hmac_setup_internal+0x11a>
    for( i = 0; i < key_length; i++ )
 c027b4a:	2300      	movs	r3, #0
 c027b4c:	9c01      	ldr	r4, [sp, #4]
 c027b4e:	429c      	cmp	r4, r3
 c027b50:	d12d      	bne.n	c027bae <psa_hmac_setup_internal+0x13a>
    memset( ipad + key_length, 0x36, block_size - key_length );
 c027b52:	eba9 0804 	sub.w	r8, r9, r4
 c027b56:	4642      	mov	r2, r8
 c027b58:	2136      	movs	r1, #54	; 0x36
 c027b5a:	1928      	adds	r0, r5, r4
 c027b5c:	f7ec ff33 	bl	c0149c6 <memset>
 c027b60:	f106 02e0 	add.w	r2, r6, #224	; 0xe0
    for( i = 0; i < key_length; i++ )
 c027b64:	2300      	movs	r3, #0
 c027b66:	4610      	mov	r0, r2
 c027b68:	42a3      	cmp	r3, r4
 c027b6a:	d126      	bne.n	c027bba <psa_hmac_setup_internal+0x146>
    memset( hmac->opad + key_length, 0x5C, block_size - key_length );
 c027b6c:	4642      	mov	r2, r8
 c027b6e:	215c      	movs	r1, #92	; 0x5c
 c027b70:	4418      	add	r0, r3
 c027b72:	f7ec ff28 	bl	c0149c6 <memset>
    status = psa_hash_setup( &hmac->hash_ctx, hash_alg );
 c027b76:	4639      	mov	r1, r7
 c027b78:	4630      	mov	r0, r6
 c027b7a:	f7ff feb8 	bl	c0278ee <mbedcrypto__psa_hash_setup>
    if( status != PSA_SUCCESS )
 c027b7e:	4604      	mov	r4, r0
 c027b80:	b928      	cbnz	r0, c027b8e <psa_hmac_setup_internal+0x11a>
    status = psa_hash_update( &hmac->hash_ctx, ipad, block_size );
 c027b82:	464a      	mov	r2, r9
 c027b84:	4629      	mov	r1, r5
 c027b86:	4630      	mov	r0, r6
 c027b88:	f7ff fefa 	bl	c027980 <mbedcrypto__psa_hash_update>
 c027b8c:	4604      	mov	r4, r0
    mbedtls_platform_zeroize( ipad, key_length );
 c027b8e:	9901      	ldr	r1, [sp, #4]
 c027b90:	4628      	mov	r0, r5
 c027b92:	f7fe fdc9 	bl	c026728 <mbedtls_platform_zeroize>
}
 c027b96:	4620      	mov	r0, r4
 c027b98:	b023      	add	sp, #140	; 0x8c
 c027b9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if( key_length != 0 )
 c027b9e:	2c00      	cmp	r4, #0
 c027ba0:	d0d7      	beq.n	c027b52 <psa_hmac_setup_internal+0xde>
        memcpy( ipad, key, key_length );
 c027ba2:	4622      	mov	r2, r4
 c027ba4:	4641      	mov	r1, r8
 c027ba6:	4628      	mov	r0, r5
 c027ba8:	f7ec fee9 	bl	c01497e <memcpy>
 c027bac:	e7cd      	b.n	c027b4a <psa_hmac_setup_internal+0xd6>
        ipad[i] ^= 0x36;
 c027bae:	5cea      	ldrb	r2, [r5, r3]
 c027bb0:	f082 0236 	eor.w	r2, r2, #54	; 0x36
 c027bb4:	54ea      	strb	r2, [r5, r3]
    for( i = 0; i < key_length; i++ )
 c027bb6:	3301      	adds	r3, #1
 c027bb8:	e7c9      	b.n	c027b4e <psa_hmac_setup_internal+0xda>
        hmac->opad[i] = ipad[i] ^ 0x36 ^ 0x5C;
 c027bba:	5ce9      	ldrb	r1, [r5, r3]
    for( i = 0; i < key_length; i++ )
 c027bbc:	3301      	adds	r3, #1
        hmac->opad[i] = ipad[i] ^ 0x36 ^ 0x5C;
 c027bbe:	f081 016a 	eor.w	r1, r1, #106	; 0x6a
 c027bc2:	f802 1b01 	strb.w	r1, [r2], #1
 c027bc6:	e7cf      	b.n	c027b68 <psa_hmac_setup_internal+0xf4>
 c027bc8:	01000008 	.word	0x01000008
 c027bcc:	0c034f40 	.word	0x0c034f40

0c027bd0 <psa_hmac_finish_internal>:
{
 c027bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    size_t hash_size = 0;
 c027bd4:	2600      	movs	r6, #0
    psa_algorithm_t hash_alg = hmac->hash_ctx.alg;
 c027bd6:	6807      	ldr	r7, [r0, #0]
{
 c027bd8:	4691      	mov	r9, r2
 c027bda:	f107 437f 	add.w	r3, r7, #4278190080	; 0xff000000
 c027bde:	3b01      	subs	r3, #1
 c027be0:	2b0a      	cmp	r3, #10
 c027be2:	bf98      	it	ls
 c027be4:	4a1b      	ldrls	r2, [pc, #108]	; (c027c54 <psa_hmac_finish_internal+0x84>)
 c027be6:	b093      	sub	sp, #76	; 0x4c
    size_t hash_size = 0;
 c027be8:	9601      	str	r6, [sp, #4]
{
 c027bea:	4688      	mov	r8, r1
 c027bec:	bf98      	it	ls
 c027bee:	5cd6      	ldrbls	r6, [r2, r3]
    status = psa_hash_finish( &hmac->hash_ctx, tmp, sizeof( tmp ), &hash_size );
 c027bf0:	a902      	add	r1, sp, #8
 c027bf2:	ab01      	add	r3, sp, #4
 c027bf4:	2240      	movs	r2, #64	; 0x40
{
 c027bf6:	4605      	mov	r5, r0
    status = psa_hash_finish( &hmac->hash_ctx, tmp, sizeof( tmp ), &hash_size );
 c027bf8:	f7ff fec8 	bl	c02798c <mbedcrypto__psa_hash_finish>
    if( status != PSA_SUCCESS )
 c027bfc:	4604      	mov	r4, r0
 c027bfe:	bb28      	cbnz	r0, c027c4c <psa_hmac_finish_internal+0x7c>
    status = psa_hash_setup( &hmac->hash_ctx, hash_alg );
 c027c00:	4639      	mov	r1, r7
 c027c02:	4628      	mov	r0, r5
 c027c04:	f7ff fe73 	bl	c0278ee <mbedcrypto__psa_hash_setup>
    if( status != PSA_SUCCESS )
 c027c08:	4604      	mov	r4, r0
 c027c0a:	b9d8      	cbnz	r0, c027c44 <psa_hmac_finish_internal+0x74>
    status = psa_hash_update( &hmac->hash_ctx, hmac->opad, block_size );
 c027c0c:	4632      	mov	r2, r6
 c027c0e:	f105 01e0 	add.w	r1, r5, #224	; 0xe0
 c027c12:	4628      	mov	r0, r5
 c027c14:	f7ff feb4 	bl	c027980 <mbedcrypto__psa_hash_update>
    if( status != PSA_SUCCESS )
 c027c18:	4604      	mov	r4, r0
 c027c1a:	b998      	cbnz	r0, c027c44 <psa_hmac_finish_internal+0x74>
    status = psa_hash_update( &hmac->hash_ctx, tmp, hash_size );
 c027c1c:	9a01      	ldr	r2, [sp, #4]
 c027c1e:	a902      	add	r1, sp, #8
 c027c20:	4628      	mov	r0, r5
 c027c22:	f7ff fead 	bl	c027980 <mbedcrypto__psa_hash_update>
    if( status != PSA_SUCCESS )
 c027c26:	4604      	mov	r4, r0
 c027c28:	b960      	cbnz	r0, c027c44 <psa_hmac_finish_internal+0x74>
    status = psa_hash_finish( &hmac->hash_ctx, tmp, sizeof( tmp ), &hash_size );
 c027c2a:	ab01      	add	r3, sp, #4
 c027c2c:	2240      	movs	r2, #64	; 0x40
 c027c2e:	a902      	add	r1, sp, #8
 c027c30:	4628      	mov	r0, r5
 c027c32:	f7ff feab 	bl	c02798c <mbedcrypto__psa_hash_finish>
    if( status != PSA_SUCCESS )
 c027c36:	4604      	mov	r4, r0
 c027c38:	b920      	cbnz	r0, c027c44 <psa_hmac_finish_internal+0x74>
    memcpy( mac, tmp, mac_size );
 c027c3a:	464a      	mov	r2, r9
 c027c3c:	a902      	add	r1, sp, #8
 c027c3e:	4640      	mov	r0, r8
 c027c40:	f7ec fe9d 	bl	c01497e <memcpy>
    mbedtls_platform_zeroize( tmp, hash_size );
 c027c44:	9901      	ldr	r1, [sp, #4]
 c027c46:	a802      	add	r0, sp, #8
 c027c48:	f7fe fd6e 	bl	c026728 <mbedtls_platform_zeroize>
}
 c027c4c:	4620      	mov	r0, r4
 c027c4e:	b013      	add	sp, #76	; 0x4c
 c027c50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 c027c54:	0c034f40 	.word	0x0c034f40

0c027c58 <psa_mac_finish_internal>:
{
 c027c58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 c027c5a:	4604      	mov	r4, r0
    if( ! operation->key_set )
 c027c5c:	7923      	ldrb	r3, [r4, #4]
{
 c027c5e:	4610      	mov	r0, r2
    if( ! operation->key_set )
 c027c60:	07da      	lsls	r2, r3, #31
{
 c027c62:	460e      	mov	r6, r1
    if( ! operation->key_set )
 c027c64:	d52e      	bpl.n	c027cc4 <psa_mac_finish_internal+0x6c>
    if( operation->iv_required && ! operation->iv_set )
 c027c66:	f003 0306 	and.w	r3, r3, #6
 c027c6a:	2b02      	cmp	r3, #2
 c027c6c:	d02a      	beq.n	c027cc4 <psa_mac_finish_internal+0x6c>
    if( mac_size < operation->mac_size )
 c027c6e:	7962      	ldrb	r2, [r4, #5]
 c027c70:	4282      	cmp	r2, r0
 c027c72:	d824      	bhi.n	c027cbe <psa_mac_finish_internal+0x66>
    if( operation->alg == PSA_ALG_CMAC )
 c027c74:	6820      	ldr	r0, [r4, #0]
 c027c76:	4b15      	ldr	r3, [pc, #84]	; (c027ccc <psa_mac_finish_internal+0x74>)
 c027c78:	4298      	cmp	r0, r3
 c027c7a:	d115      	bne.n	c027ca8 <psa_mac_finish_internal+0x50>
        int ret = mbedtls_cipher_cmac_finish( &operation->ctx.cmac, tmp );
 c027c7c:	4669      	mov	r1, sp
 c027c7e:	f104 0008 	add.w	r0, r4, #8
 c027c82:	f7f8 fbb5 	bl	c0203f0 <mbedtls_cipher_cmac_finish>
        if( ret == 0 )
 c027c86:	4605      	mov	r5, r0
 c027c88:	b920      	cbnz	r0, c027c94 <psa_mac_finish_internal+0x3c>
            memcpy( mac, tmp, operation->mac_size );
 c027c8a:	7962      	ldrb	r2, [r4, #5]
 c027c8c:	4669      	mov	r1, sp
 c027c8e:	4630      	mov	r0, r6
 c027c90:	f7ec fe75 	bl	c01497e <memcpy>
        mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 c027c94:	4668      	mov	r0, sp
 c027c96:	2110      	movs	r1, #16
 c027c98:	f7fe fd46 	bl	c026728 <mbedtls_platform_zeroize>
        return( mbedtls_to_psa_error( ret ) );
 c027c9c:	4628      	mov	r0, r5
}
 c027c9e:	b004      	add	sp, #16
 c027ca0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return( mbedtls_to_psa_error( ret ) );
 c027ca4:	f7fe bd48 	b.w	c026738 <mbedtls_to_psa_error>
    if( PSA_ALG_IS_HMAC( operation->alg ) )
 c027ca8:	4b09      	ldr	r3, [pc, #36]	; (c027cd0 <psa_mac_finish_internal+0x78>)
 c027caa:	4003      	ands	r3, r0
 c027cac:	f1b3 7f20 	cmp.w	r3, #41943040	; 0x2800000
 c027cb0:	d108      	bne.n	c027cc4 <psa_mac_finish_internal+0x6c>
        return( psa_hmac_finish_internal( &operation->ctx.hmac,
 c027cb2:	f104 0008 	add.w	r0, r4, #8
 c027cb6:	f7ff ff8b 	bl	c027bd0 <psa_hmac_finish_internal>
}
 c027cba:	b004      	add	sp, #16
 c027cbc:	bd70      	pop	{r4, r5, r6, pc}
        return( PSA_ERROR_BUFFER_TOO_SMALL );
 c027cbe:	f06f 0089 	mvn.w	r0, #137	; 0x89
 c027cc2:	e7fa      	b.n	c027cba <psa_mac_finish_internal+0x62>
        return( PSA_ERROR_BAD_STATE );
 c027cc4:	f06f 0088 	mvn.w	r0, #136	; 0x88
 c027cc8:	e7f7      	b.n	c027cba <psa_mac_finish_internal+0x62>
 c027cca:	bf00      	nop
 c027ccc:	02c00002 	.word	0x02c00002
 c027cd0:	7fc00000 	.word	0x7fc00000

0c027cd4 <psa_generator_tls12_prf_generate_next_block>:
{
 c027cd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    psa_algorithm_t hash_alg = PSA_ALG_HKDF_GET_HASH( alg );
 c027cd8:	b2c9      	uxtb	r1, r1
 c027cda:	f041 7580 	orr.w	r5, r1, #16777216	; 0x1000000
    uint8_t hash_length = PSA_HASH_SIZE( hash_alg );
 c027cde:	f105 437f 	add.w	r3, r5, #4278190080	; 0xff000000
 c027ce2:	3b01      	subs	r3, #1
 c027ce4:	2b02      	cmp	r3, #2
{
 c027ce6:	b0d9      	sub	sp, #356	; 0x164
 c027ce8:	4607      	mov	r7, r0
    uint8_t hash_length = PSA_HASH_SIZE( hash_alg );
 c027cea:	d975      	bls.n	c027dd8 <psa_generator_tls12_prf_generate_next_block+0x104>
 c027cec:	f105 437f 	add.w	r3, r5, #4278190080	; 0xff000000
 c027cf0:	3b04      	subs	r3, #4
 c027cf2:	2b01      	cmp	r3, #1
 c027cf4:	d972      	bls.n	c027ddc <psa_generator_tls12_prf_generate_next_block+0x108>
 c027cf6:	4b40      	ldr	r3, [pc, #256]	; (c027df8 <psa_generator_tls12_prf_generate_next_block+0x124>)
 c027cf8:	429d      	cmp	r5, r3
 c027cfa:	d073      	beq.n	c027de4 <psa_generator_tls12_prf_generate_next_block+0x110>
 c027cfc:	3301      	adds	r3, #1
 c027cfe:	429d      	cmp	r5, r3
 c027d00:	d072      	beq.n	c027de8 <psa_generator_tls12_prf_generate_next_block+0x114>
 c027d02:	3301      	adds	r3, #1
 c027d04:	429d      	cmp	r5, r3
 c027d06:	d071      	beq.n	c027dec <psa_generator_tls12_prf_generate_next_block+0x118>
 c027d08:	3301      	adds	r3, #1
 c027d0a:	429d      	cmp	r5, r3
 c027d0c:	d068      	beq.n	c027de0 <psa_generator_tls12_prf_generate_next_block+0x10c>
 c027d0e:	3301      	adds	r3, #1
 c027d10:	429d      	cmp	r5, r3
 c027d12:	d067      	beq.n	c027de4 <psa_generator_tls12_prf_generate_next_block+0x110>
 c027d14:	3301      	adds	r3, #1
 c027d16:	429d      	cmp	r5, r3
 c027d18:	d066      	beq.n	c027de8 <psa_generator_tls12_prf_generate_next_block+0x114>
 c027d1a:	3303      	adds	r3, #3
 c027d1c:	429d      	cmp	r5, r3
 c027d1e:	d061      	beq.n	c027de4 <psa_generator_tls12_prf_generate_next_block+0x110>
 c027d20:	3301      	adds	r3, #1
 c027d22:	429d      	cmp	r5, r3
 c027d24:	d060      	beq.n	c027de8 <psa_generator_tls12_prf_generate_next_block+0x114>
 c027d26:	3301      	adds	r3, #1
 c027d28:	429d      	cmp	r5, r3
 c027d2a:	d05f      	beq.n	c027dec <psa_generator_tls12_prf_generate_next_block+0x118>
 c027d2c:	4c33      	ldr	r4, [pc, #204]	; (c027dfc <psa_generator_tls12_prf_generate_next_block+0x128>)
 c027d2e:	42a5      	cmp	r5, r4
 c027d30:	bf0c      	ite	eq
 c027d32:	2440      	moveq	r4, #64	; 0x40
 c027d34:	2400      	movne	r4, #0
    if( tls12_prf->block_number == 0xff )
 c027d36:	f897 6051 	ldrb.w	r6, [r7, #81]	; 0x51
 c027d3a:	2eff      	cmp	r6, #255	; 0xff
 c027d3c:	d058      	beq.n	c027df0 <psa_generator_tls12_prf_generate_next_block+0x11c>
    tls12_prf->offset_in_block = 0;
 c027d3e:	2100      	movs	r1, #0
    ++tls12_prf->block_number;
 c027d40:	3601      	adds	r6, #1
 c027d42:	b2f6      	uxtb	r6, r6
 c027d44:	f887 6051 	strb.w	r6, [r7, #81]	; 0x51
    tls12_prf->offset_in_block = 0;
 c027d48:	f887 1050 	strb.w	r1, [r7, #80]	; 0x50
    memset( hmac, 0, sizeof( *hmac ) );
 c027d4c:	f44f 72b0 	mov.w	r2, #352	; 0x160
 c027d50:	4668      	mov	r0, sp
 c027d52:	f7ec fe38 	bl	c0149c6 <memset>
    status = psa_hmac_setup_internal( &hmac,
 c027d56:	e9d7 1200 	ldrd	r1, r2, [r7]
    if( tls12_prf->block_number == 1 )
 c027d5a:	2e01      	cmp	r6, #1
        Ai_len = tls12_prf->Ai_with_seed_len - hash_length;
 c027d5c:	bf08      	it	eq
 c027d5e:	68fb      	ldreq	r3, [r7, #12]
 c027d60:	f8d7 9008 	ldr.w	r9, [r7, #8]
 c027d64:	bf08      	it	eq
 c027d66:	eba3 0804 	subeq.w	r8, r3, r4
    status = psa_hmac_setup_internal( &hmac,
 c027d6a:	4668      	mov	r0, sp
 c027d6c:	462b      	mov	r3, r5
        Ai     = tls12_prf->Ai_with_seed + hash_length;
 c027d6e:	bf0c      	ite	eq
 c027d70:	44a1      	addeq	r9, r4
        Ai_len = hash_length;
 c027d72:	46a0      	movne	r8, r4
    status = psa_hmac_setup_internal( &hmac,
 c027d74:	f7ff fe7e 	bl	c027a74 <psa_hmac_setup_internal>
    if( status != PSA_SUCCESS )
 c027d78:	4606      	mov	r6, r0
 c027d7a:	bb18      	cbnz	r0, c027dc4 <psa_generator_tls12_prf_generate_next_block+0xf0>
    status = psa_hash_update( &hmac.hash_ctx,
 c027d7c:	4642      	mov	r2, r8
 c027d7e:	4649      	mov	r1, r9
 c027d80:	4668      	mov	r0, sp
 c027d82:	f7ff fdfd 	bl	c027980 <mbedcrypto__psa_hash_update>
    if( status != PSA_SUCCESS )
 c027d86:	4606      	mov	r6, r0
 c027d88:	b9e0      	cbnz	r0, c027dc4 <psa_generator_tls12_prf_generate_next_block+0xf0>
    status = psa_hmac_finish_internal( &hmac,
 c027d8a:	4622      	mov	r2, r4
 c027d8c:	68b9      	ldr	r1, [r7, #8]
 c027d8e:	4668      	mov	r0, sp
 c027d90:	f7ff ff1e 	bl	c027bd0 <psa_hmac_finish_internal>
    if( status != PSA_SUCCESS )
 c027d94:	4606      	mov	r6, r0
 c027d96:	b9a8      	cbnz	r0, c027dc4 <psa_generator_tls12_prf_generate_next_block+0xf0>
    status = psa_hmac_setup_internal( &hmac,
 c027d98:	e9d7 1200 	ldrd	r1, r2, [r7]
 c027d9c:	462b      	mov	r3, r5
 c027d9e:	4668      	mov	r0, sp
 c027da0:	f7ff fe68 	bl	c027a74 <psa_hmac_setup_internal>
    if( status != PSA_SUCCESS )
 c027da4:	4606      	mov	r6, r0
 c027da6:	b968      	cbnz	r0, c027dc4 <psa_generator_tls12_prf_generate_next_block+0xf0>
    status = psa_hash_update( &hmac.hash_ctx,
 c027da8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 c027dac:	4668      	mov	r0, sp
 c027dae:	f7ff fde7 	bl	c027980 <mbedcrypto__psa_hash_update>
    if( status != PSA_SUCCESS )
 c027db2:	4606      	mov	r6, r0
 c027db4:	b930      	cbnz	r0, c027dc4 <psa_generator_tls12_prf_generate_next_block+0xf0>
    status = psa_hmac_finish_internal( &hmac,
 c027db6:	4622      	mov	r2, r4
 c027db8:	f107 0110 	add.w	r1, r7, #16
 c027dbc:	4668      	mov	r0, sp
 c027dbe:	f7ff ff07 	bl	c027bd0 <psa_hmac_finish_internal>
 c027dc2:	4606      	mov	r6, r0
    cleanup_status = psa_hmac_abort_internal( &hmac );
 c027dc4:	4668      	mov	r0, sp
 c027dc6:	f7ff fd65 	bl	c027894 <psa_hmac_abort_internal>
    if( status == PSA_SUCCESS && cleanup_status != PSA_SUCCESS )
 c027dca:	2e00      	cmp	r6, #0
 c027dcc:	bf08      	it	eq
 c027dce:	4606      	moveq	r6, r0
}
 c027dd0:	4630      	mov	r0, r6
 c027dd2:	b059      	add	sp, #356	; 0x164
 c027dd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t hash_length = PSA_HASH_SIZE( hash_alg );
 c027dd8:	2410      	movs	r4, #16
 c027dda:	e7ac      	b.n	c027d36 <psa_generator_tls12_prf_generate_next_block+0x62>
 c027ddc:	2414      	movs	r4, #20
 c027dde:	e7aa      	b.n	c027d36 <psa_generator_tls12_prf_generate_next_block+0x62>
 c027de0:	2440      	movs	r4, #64	; 0x40
 c027de2:	e7a8      	b.n	c027d36 <psa_generator_tls12_prf_generate_next_block+0x62>
 c027de4:	241c      	movs	r4, #28
 c027de6:	e7a6      	b.n	c027d36 <psa_generator_tls12_prf_generate_next_block+0x62>
 c027de8:	2420      	movs	r4, #32
 c027dea:	e7a4      	b.n	c027d36 <psa_generator_tls12_prf_generate_next_block+0x62>
 c027dec:	2430      	movs	r4, #48	; 0x30
 c027dee:	e7a2      	b.n	c027d36 <psa_generator_tls12_prf_generate_next_block+0x62>
        return( PSA_ERROR_BAD_STATE );
 c027df0:	f06f 0688 	mvn.w	r6, #136	; 0x88
 c027df4:	e7ec      	b.n	c027dd0 <psa_generator_tls12_prf_generate_next_block+0xfc>
 c027df6:	bf00      	nop
 c027df8:	01000008 	.word	0x01000008
 c027dfc:	01000013 	.word	0x01000013

0c027e00 <psa_key_derivation_internal>:
    const uint8_t *secret, size_t secret_length,
    psa_algorithm_t alg,
    const uint8_t *salt, size_t salt_length,
    const uint8_t *label, size_t label_length,
    size_t capacity )
{
 c027e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c027e04:	4606      	mov	r6, r0
    psa_status_t status;
    size_t max_capacity;

    /* Set generator->alg even on failure so that abort knows what to do. */
    generator->alg = alg;
 c027e06:	6003      	str	r3, [r0, #0]

    if( alg == PSA_ALG_SELECT_RAW )
 c027e08:	4898      	ldr	r0, [pc, #608]	; (c02806c <psa_key_derivation_internal+0x26c>)
{
 c027e0a:	b085      	sub	sp, #20
    if( alg == PSA_ALG_SELECT_RAW )
 c027e0c:	4283      	cmp	r3, r0
{
 c027e0e:	4689      	mov	r9, r1
 c027e10:	4617      	mov	r7, r2
 c027e12:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 c027e16:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
    if( alg == PSA_ALG_SELECT_RAW )
 c027e1a:	d11e      	bne.n	c027e5a <psa_key_derivation_internal+0x5a>
    {
        (void) salt;
        if( salt_length != 0 )
 c027e1c:	b122      	cbz	r2, c027e28 <psa_key_derivation_internal+0x28>
            return( PSA_ERROR_INVALID_ARGUMENT );
 c027e1e:	f06f 0086 	mvn.w	r0, #134	; 0x86
        generator->capacity = max_capacity;
    else
        return( PSA_ERROR_INVALID_ARGUMENT );

    return( PSA_SUCCESS );
}
 c027e22:	b005      	add	sp, #20
 c027e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( label_length != 0 )
 c027e28:	f1b8 0f00 	cmp.w	r8, #0
 c027e2c:	d1f7      	bne.n	c027e1e <psa_key_derivation_internal+0x1e>
        generator->ctx.buffer.data = mbedtls_calloc( 1, secret_length );
 c027e2e:	4639      	mov	r1, r7
 c027e30:	2001      	movs	r0, #1
 c027e32:	f7fe fc63 	bl	c0266fc <mbedtls_calloc>
 c027e36:	60b0      	str	r0, [r6, #8]
        if( generator->ctx.buffer.data == NULL )
 c027e38:	b910      	cbnz	r0, c027e40 <psa_key_derivation_internal+0x40>
            return( PSA_ERROR_INSUFFICIENT_MEMORY );
 c027e3a:	f06f 008c 	mvn.w	r0, #140	; 0x8c
 c027e3e:	e7f0      	b.n	c027e22 <psa_key_derivation_internal+0x22>
        max_capacity = secret_length;
 c027e40:	463d      	mov	r5, r7
        memcpy( generator->ctx.buffer.data, secret, secret_length );
 c027e42:	463a      	mov	r2, r7
 c027e44:	4649      	mov	r1, r9
 c027e46:	f7ec fd9a 	bl	c01497e <memcpy>
        generator->ctx.buffer.size = secret_length;
 c027e4a:	60f7      	str	r7, [r6, #12]
    if( capacity <= max_capacity )
 c027e4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 c027e4e:	42ab      	cmp	r3, r5
 c027e50:	f200 8102 	bhi.w	c028058 <psa_key_derivation_internal+0x258>
        generator->capacity = capacity;
 c027e54:	6073      	str	r3, [r6, #4]
    return( PSA_SUCCESS );
 c027e56:	2000      	movs	r0, #0
 c027e58:	e7e3      	b.n	c027e22 <psa_key_derivation_internal+0x22>
    if( PSA_ALG_IS_HKDF( alg ) )
 c027e5a:	4885      	ldr	r0, [pc, #532]	; (c028070 <psa_key_derivation_internal+0x270>)
 c027e5c:	f023 0cff 	bic.w	ip, r3, #255	; 0xff
 c027e60:	4584      	cmp	ip, r0
 c027e62:	f040 809e 	bne.w	c027fa2 <psa_key_derivation_internal+0x1a2>
        psa_algorithm_t hash_alg = PSA_ALG_HKDF_GET_HASH( alg );
 c027e66:	b2db      	uxtb	r3, r3
 c027e68:	f043 7480 	orr.w	r4, r3, #16777216	; 0x1000000
        size_t hash_size = PSA_HASH_SIZE( hash_alg );
 c027e6c:	f104 4a7f 	add.w	sl, r4, #4278190080	; 0xff000000
 c027e70:	f10a 3aff 	add.w	sl, sl, #4294967295
 c027e74:	f1ba 0f02 	cmp.w	sl, #2
 c027e78:	d925      	bls.n	c027ec6 <psa_key_derivation_internal+0xc6>
 c027e7a:	f104 437f 	add.w	r3, r4, #4278190080	; 0xff000000
 c027e7e:	3b04      	subs	r3, #4
 c027e80:	2b01      	cmp	r3, #1
 c027e82:	d97a      	bls.n	c027f7a <psa_key_derivation_internal+0x17a>
 c027e84:	4b7b      	ldr	r3, [pc, #492]	; (c028074 <psa_key_derivation_internal+0x274>)
 c027e86:	429c      	cmp	r4, r3
 c027e88:	d079      	beq.n	c027f7e <psa_key_derivation_internal+0x17e>
 c027e8a:	3301      	adds	r3, #1
 c027e8c:	429c      	cmp	r4, r3
 c027e8e:	d078      	beq.n	c027f82 <psa_key_derivation_internal+0x182>
 c027e90:	3301      	adds	r3, #1
 c027e92:	429c      	cmp	r4, r3
 c027e94:	d077      	beq.n	c027f86 <psa_key_derivation_internal+0x186>
 c027e96:	3301      	adds	r3, #1
 c027e98:	429c      	cmp	r4, r3
 c027e9a:	d012      	beq.n	c027ec2 <psa_key_derivation_internal+0xc2>
 c027e9c:	3301      	adds	r3, #1
 c027e9e:	429c      	cmp	r4, r3
 c027ea0:	d06d      	beq.n	c027f7e <psa_key_derivation_internal+0x17e>
 c027ea2:	3301      	adds	r3, #1
 c027ea4:	429c      	cmp	r4, r3
 c027ea6:	d06c      	beq.n	c027f82 <psa_key_derivation_internal+0x182>
 c027ea8:	3303      	adds	r3, #3
 c027eaa:	429c      	cmp	r4, r3
 c027eac:	d067      	beq.n	c027f7e <psa_key_derivation_internal+0x17e>
 c027eae:	3301      	adds	r3, #1
 c027eb0:	429c      	cmp	r4, r3
 c027eb2:	d066      	beq.n	c027f82 <psa_key_derivation_internal+0x182>
 c027eb4:	3301      	adds	r3, #1
 c027eb6:	429c      	cmp	r4, r3
 c027eb8:	d065      	beq.n	c027f86 <psa_key_derivation_internal+0x186>
 c027eba:	3301      	adds	r3, #1
 c027ebc:	429c      	cmp	r4, r3
 c027ebe:	f040 80d1 	bne.w	c028064 <psa_key_derivation_internal+0x264>
 c027ec2:	2540      	movs	r5, #64	; 0x40
 c027ec4:	e000      	b.n	c027ec8 <psa_key_derivation_internal+0xc8>
 c027ec6:	2510      	movs	r5, #16
    status = psa_hmac_setup_internal( &hkdf->hmac,
 c027ec8:	f106 0b10 	add.w	fp, r6, #16
 c027ecc:	4623      	mov	r3, r4
 c027ece:	4658      	mov	r0, fp
        max_capacity = 255 * hash_size;
 c027ed0:	ebc5 2505 	rsb	r5, r5, r5, lsl #8
    status = psa_hmac_setup_internal( &hkdf->hmac,
 c027ed4:	f7ff fdce 	bl	c027a74 <psa_hmac_setup_internal>
    if( status != PSA_SUCCESS )
 c027ed8:	2800      	cmp	r0, #0
 c027eda:	d1a2      	bne.n	c027e22 <psa_key_derivation_internal+0x22>
    status = psa_hash_update( &hkdf->hmac.hash_ctx, secret, secret_length );
 c027edc:	463a      	mov	r2, r7
 c027ede:	4649      	mov	r1, r9
 c027ee0:	4658      	mov	r0, fp
 c027ee2:	f7ff fd4d 	bl	c027980 <mbedcrypto__psa_hash_update>
    if( status != PSA_SUCCESS )
 c027ee6:	2800      	cmp	r0, #0
 c027ee8:	d19b      	bne.n	c027e22 <psa_key_derivation_internal+0x22>
    status = psa_hmac_finish_internal( &hkdf->hmac,
 c027eea:	2240      	movs	r2, #64	; 0x40
 c027eec:	f506 71b8 	add.w	r1, r6, #368	; 0x170
 c027ef0:	4658      	mov	r0, fp
 c027ef2:	f7ff fe6d 	bl	c027bd0 <psa_hmac_finish_internal>
    if( status != PSA_SUCCESS )
 c027ef6:	2800      	cmp	r0, #0
 c027ef8:	d193      	bne.n	c027e22 <psa_key_derivation_internal+0x22>
    hkdf->offset_in_block = PSA_HASH_SIZE( hash_alg );
 c027efa:	f1ba 0f02 	cmp.w	sl, #2
 c027efe:	d944      	bls.n	c027f8a <psa_key_derivation_internal+0x18a>
 c027f00:	f104 437f 	add.w	r3, r4, #4278190080	; 0xff000000
 c027f04:	3b04      	subs	r3, #4
 c027f06:	2b01      	cmp	r3, #1
 c027f08:	d941      	bls.n	c027f8e <psa_key_derivation_internal+0x18e>
 c027f0a:	4b5a      	ldr	r3, [pc, #360]	; (c028074 <psa_key_derivation_internal+0x274>)
 c027f0c:	429c      	cmp	r4, r3
 c027f0e:	d042      	beq.n	c027f96 <psa_key_derivation_internal+0x196>
 c027f10:	3301      	adds	r3, #1
 c027f12:	429c      	cmp	r4, r3
 c027f14:	d041      	beq.n	c027f9a <psa_key_derivation_internal+0x19a>
 c027f16:	3301      	adds	r3, #1
 c027f18:	429c      	cmp	r4, r3
 c027f1a:	d040      	beq.n	c027f9e <psa_key_derivation_internal+0x19e>
 c027f1c:	3301      	adds	r3, #1
 c027f1e:	429c      	cmp	r4, r3
 c027f20:	d037      	beq.n	c027f92 <psa_key_derivation_internal+0x192>
 c027f22:	3301      	adds	r3, #1
 c027f24:	429c      	cmp	r4, r3
 c027f26:	d036      	beq.n	c027f96 <psa_key_derivation_internal+0x196>
 c027f28:	3301      	adds	r3, #1
 c027f2a:	429c      	cmp	r4, r3
 c027f2c:	d035      	beq.n	c027f9a <psa_key_derivation_internal+0x19a>
 c027f2e:	3303      	adds	r3, #3
 c027f30:	429c      	cmp	r4, r3
 c027f32:	d030      	beq.n	c027f96 <psa_key_derivation_internal+0x196>
 c027f34:	3301      	adds	r3, #1
 c027f36:	429c      	cmp	r4, r3
 c027f38:	d02f      	beq.n	c027f9a <psa_key_derivation_internal+0x19a>
 c027f3a:	3301      	adds	r3, #1
 c027f3c:	429c      	cmp	r4, r3
 c027f3e:	d02e      	beq.n	c027f9e <psa_key_derivation_internal+0x19e>
 c027f40:	3301      	adds	r3, #1
 c027f42:	429c      	cmp	r4, r3
 c027f44:	bf0c      	ite	eq
 c027f46:	2440      	moveq	r4, #64	; 0x40
 c027f48:	2400      	movne	r4, #0
    hkdf->block_number = 0;
 c027f4a:	2300      	movs	r3, #0
    hkdf->offset_in_block = PSA_HASH_SIZE( hash_alg );
 c027f4c:	f886 41f0 	strb.w	r4, [r6, #496]	; 0x1f0
    hkdf->block_number = 0;
 c027f50:	f886 31f1 	strb.w	r3, [r6, #497]	; 0x1f1
    hkdf->info_length = label_length;
 c027f54:	f8c6 800c 	str.w	r8, [r6, #12]
    if( label_length != 0 )
 c027f58:	f1b8 0f00 	cmp.w	r8, #0
 c027f5c:	f43f af76 	beq.w	c027e4c <psa_key_derivation_internal+0x4c>
        hkdf->info = mbedtls_calloc( 1, label_length );
 c027f60:	4641      	mov	r1, r8
 c027f62:	2001      	movs	r0, #1
 c027f64:	f7fe fbca 	bl	c0266fc <mbedtls_calloc>
 c027f68:	60b0      	str	r0, [r6, #8]
        if( hkdf->info == NULL )
 c027f6a:	2800      	cmp	r0, #0
 c027f6c:	f43f af65 	beq.w	c027e3a <psa_key_derivation_internal+0x3a>
        memcpy( hkdf->info, label, label_length );
 c027f70:	4642      	mov	r2, r8
 c027f72:	9910      	ldr	r1, [sp, #64]	; 0x40
 c027f74:	f7ec fd03 	bl	c01497e <memcpy>
 c027f78:	e768      	b.n	c027e4c <psa_key_derivation_internal+0x4c>
        size_t hash_size = PSA_HASH_SIZE( hash_alg );
 c027f7a:	2514      	movs	r5, #20
 c027f7c:	e7a4      	b.n	c027ec8 <psa_key_derivation_internal+0xc8>
 c027f7e:	251c      	movs	r5, #28
 c027f80:	e7a2      	b.n	c027ec8 <psa_key_derivation_internal+0xc8>
 c027f82:	2520      	movs	r5, #32
 c027f84:	e7a0      	b.n	c027ec8 <psa_key_derivation_internal+0xc8>
 c027f86:	2530      	movs	r5, #48	; 0x30
 c027f88:	e79e      	b.n	c027ec8 <psa_key_derivation_internal+0xc8>
    hkdf->offset_in_block = PSA_HASH_SIZE( hash_alg );
 c027f8a:	2410      	movs	r4, #16
 c027f8c:	e7dd      	b.n	c027f4a <psa_key_derivation_internal+0x14a>
 c027f8e:	2414      	movs	r4, #20
 c027f90:	e7db      	b.n	c027f4a <psa_key_derivation_internal+0x14a>
 c027f92:	2440      	movs	r4, #64	; 0x40
 c027f94:	e7d9      	b.n	c027f4a <psa_key_derivation_internal+0x14a>
 c027f96:	241c      	movs	r4, #28
 c027f98:	e7d7      	b.n	c027f4a <psa_key_derivation_internal+0x14a>
 c027f9a:	2420      	movs	r4, #32
 c027f9c:	e7d5      	b.n	c027f4a <psa_key_derivation_internal+0x14a>
 c027f9e:	2430      	movs	r4, #48	; 0x30
 c027fa0:	e7d3      	b.n	c027f4a <psa_key_derivation_internal+0x14a>
    else if( PSA_ALG_IS_TLS12_PRF( alg ) ||
 c027fa2:	f423 70ff 	bic.w	r0, r3, #510	; 0x1fe
 c027fa6:	4c34      	ldr	r4, [pc, #208]	; (c028078 <psa_key_derivation_internal+0x278>)
 c027fa8:	f020 0001 	bic.w	r0, r0, #1
 c027fac:	42a0      	cmp	r0, r4
 c027fae:	d159      	bne.n	c028064 <psa_key_derivation_internal+0x264>
        psa_algorithm_t hash_alg = PSA_ALG_TLS12_PRF_GET_HASH( alg );
 c027fb0:	b2db      	uxtb	r3, r3
 c027fb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
        size_t hash_size = PSA_HASH_SIZE( hash_alg );
 c027fb6:	f103 407f 	add.w	r0, r3, #4278190080	; 0xff000000
 c027fba:	3801      	subs	r0, #1
 c027fbc:	2802      	cmp	r0, #2
 c027fbe:	f103 407f 	add.w	r0, r3, #4278190080	; 0xff000000
 c027fc2:	d93a      	bls.n	c02803a <psa_key_derivation_internal+0x23a>
 c027fc4:	1f04      	subs	r4, r0, #4
 c027fc6:	2c01      	cmp	r4, #1
 c027fc8:	d939      	bls.n	c02803e <psa_key_derivation_internal+0x23e>
 c027fca:	4c2a      	ldr	r4, [pc, #168]	; (c028074 <psa_key_derivation_internal+0x274>)
 c027fcc:	42a3      	cmp	r3, r4
 c027fce:	d03a      	beq.n	c028046 <psa_key_derivation_internal+0x246>
 c027fd0:	3401      	adds	r4, #1
 c027fd2:	42a3      	cmp	r3, r4
 c027fd4:	d039      	beq.n	c02804a <psa_key_derivation_internal+0x24a>
 c027fd6:	3401      	adds	r4, #1
 c027fd8:	42a3      	cmp	r3, r4
 c027fda:	d038      	beq.n	c02804e <psa_key_derivation_internal+0x24e>
 c027fdc:	3401      	adds	r4, #1
 c027fde:	42a3      	cmp	r3, r4
 c027fe0:	d02f      	beq.n	c028042 <psa_key_derivation_internal+0x242>
 c027fe2:	3401      	adds	r4, #1
 c027fe4:	42a3      	cmp	r3, r4
 c027fe6:	d02e      	beq.n	c028046 <psa_key_derivation_internal+0x246>
 c027fe8:	3401      	adds	r4, #1
 c027fea:	42a3      	cmp	r3, r4
 c027fec:	d02d      	beq.n	c02804a <psa_key_derivation_internal+0x24a>
 c027fee:	3403      	adds	r4, #3
 c027ff0:	42a3      	cmp	r3, r4
 c027ff2:	d028      	beq.n	c028046 <psa_key_derivation_internal+0x246>
 c027ff4:	3401      	adds	r4, #1
 c027ff6:	42a3      	cmp	r3, r4
 c027ff8:	d027      	beq.n	c02804a <psa_key_derivation_internal+0x24a>
 c027ffa:	3401      	adds	r4, #1
 c027ffc:	42a3      	cmp	r3, r4
 c027ffe:	d026      	beq.n	c02804e <psa_key_derivation_internal+0x24e>
 c028000:	4d1e      	ldr	r5, [pc, #120]	; (c02807c <psa_key_derivation_internal+0x27c>)
 c028002:	42ab      	cmp	r3, r5
 c028004:	bf0c      	ite	eq
 c028006:	2540      	moveq	r5, #64	; 0x40
 c028008:	2500      	movne	r5, #0
        if( hash_alg != PSA_ALG_SHA_256 &&
 c02800a:	3809      	subs	r0, #9
 c02800c:	2801      	cmp	r0, #1
 c02800e:	d829      	bhi.n	c028064 <psa_key_derivation_internal+0x264>
        if( PSA_ALG_IS_TLS12_PRF( alg ) )
 c028010:	4c19      	ldr	r4, [pc, #100]	; (c028078 <psa_key_derivation_internal+0x278>)
            status = psa_generator_tls12_prf_setup( &generator->ctx.tls12_prf,
 c028012:	9100      	str	r1, [sp, #0]
        if( PSA_ALG_IS_TLS12_PRF( alg ) )
 c028014:	45a4      	cmp	ip, r4
            status = psa_generator_tls12_prf_setup( &generator->ctx.tls12_prf,
 c028016:	9c10      	ldr	r4, [sp, #64]	; 0x40
        max_capacity = 255 * hash_size;
 c028018:	ebc5 2505 	rsb	r5, r5, r5, lsl #8
            status = psa_generator_tls12_prf_setup( &generator->ctx.tls12_prf,
 c02801c:	e9cd 2401 	strd	r2, r4, [sp, #4]
 c028020:	f106 0008 	add.w	r0, r6, #8
 c028024:	f8cd 800c 	str.w	r8, [sp, #12]
 c028028:	463a      	mov	r2, r7
 c02802a:	4649      	mov	r1, r9
        if( PSA_ALG_IS_TLS12_PRF( alg ) )
 c02802c:	d111      	bne.n	c028052 <psa_key_derivation_internal+0x252>
            status = psa_generator_tls12_prf_setup( &generator->ctx.tls12_prf,
 c02802e:	f7fe fd07 	bl	c026a40 <psa_generator_tls12_prf_setup>
    if( status != PSA_SUCCESS )
 c028032:	2800      	cmp	r0, #0
 c028034:	f43f af0a 	beq.w	c027e4c <psa_key_derivation_internal+0x4c>
 c028038:	e6f3      	b.n	c027e22 <psa_key_derivation_internal+0x22>
        size_t hash_size = PSA_HASH_SIZE( hash_alg );
 c02803a:	2510      	movs	r5, #16
 c02803c:	e7e5      	b.n	c02800a <psa_key_derivation_internal+0x20a>
 c02803e:	2514      	movs	r5, #20
 c028040:	e7e3      	b.n	c02800a <psa_key_derivation_internal+0x20a>
 c028042:	2540      	movs	r5, #64	; 0x40
 c028044:	e7e1      	b.n	c02800a <psa_key_derivation_internal+0x20a>
 c028046:	251c      	movs	r5, #28
 c028048:	e7df      	b.n	c02800a <psa_key_derivation_internal+0x20a>
 c02804a:	2520      	movs	r5, #32
 c02804c:	e7dd      	b.n	c02800a <psa_key_derivation_internal+0x20a>
 c02804e:	2530      	movs	r5, #48	; 0x30
 c028050:	e7db      	b.n	c02800a <psa_key_derivation_internal+0x20a>
            status = psa_generator_tls12_psk_to_ms_setup(
 c028052:	f7fe fd90 	bl	c026b76 <psa_generator_tls12_psk_to_ms_setup>
 c028056:	e7ec      	b.n	c028032 <psa_key_derivation_internal+0x232>
    else if( capacity == PSA_GENERATOR_UNBRIDLED_CAPACITY )
 c028058:	9b12      	ldr	r3, [sp, #72]	; 0x48
 c02805a:	3301      	adds	r3, #1
 c02805c:	f47f aedf 	bne.w	c027e1e <psa_key_derivation_internal+0x1e>
        generator->capacity = max_capacity;
 c028060:	6075      	str	r5, [r6, #4]
 c028062:	e6f8      	b.n	c027e56 <psa_key_derivation_internal+0x56>
            return( PSA_ERROR_NOT_SUPPORTED );
 c028064:	f06f 0085 	mvn.w	r0, #133	; 0x85
 c028068:	e6db      	b.n	c027e22 <psa_key_derivation_internal+0x22>
 c02806a:	bf00      	nop
 c02806c:	31000001 	.word	0x31000001
 c028070:	30000100 	.word	0x30000100
 c028074:	01000008 	.word	0x01000008
 c028078:	30000200 	.word	0x30000200
 c02807c:	01000013 	.word	0x01000013

0c028080 <psa_key_agreement_internal>:
static psa_status_t psa_key_agreement_internal( psa_crypto_generator_t *generator,
                                                psa_key_slot_t *private_key,
                                                const uint8_t *peer_key,
                                                size_t peer_key_length,
                                                psa_algorithm_t alg )
{
 c028080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    psa_status_t status;
    uint8_t shared_secret[PSA_KEY_AGREEMENT_MAX_SHARED_SECRET_SIZE];
    size_t shared_secret_length = 0;
 c028084:	2400      	movs	r4, #0
{
 c028086:	b0d3      	sub	sp, #332	; 0x14c
 c028088:	4699      	mov	r9, r3
 c02808a:	9d5a      	ldr	r5, [sp, #360]	; 0x168

    /* Step 1: run the secret agreement algorithm to generate the shared
     * secret. */
    switch( PSA_ALG_KEY_AGREEMENT_GET_BASE( alg ) )
 c02808c:	4b35      	ldr	r3, [pc, #212]	; (c028164 <psa_key_agreement_internal+0xe4>)
{
 c02808e:	4690      	mov	r8, r2
    switch( PSA_ALG_KEY_AGREEMENT_GET_BASE( alg ) )
 c028090:	4a35      	ldr	r2, [pc, #212]	; (c028168 <psa_key_agreement_internal+0xe8>)
 c028092:	402b      	ands	r3, r5
 c028094:	4293      	cmp	r3, r2
{
 c028096:	4606      	mov	r6, r0
    size_t shared_secret_length = 0;
 c028098:	9407      	str	r4, [sp, #28]
    switch( PSA_ALG_KEY_AGREEMENT_GET_BASE( alg ) )
 c02809a:	d15d      	bne.n	c028158 <psa_key_agreement_internal+0xd8>
    {
#if defined(MBEDTLS_ECDH_C)
        case PSA_ALG_ECDH_BASE:
            if( ! PSA_KEY_TYPE_IS_ECC_KEYPAIR( private_key->type ) )
 c02809c:	680b      	ldr	r3, [r1, #0]
 c02809e:	4a33      	ldr	r2, [pc, #204]	; (c02816c <psa_key_agreement_internal+0xec>)
 c0280a0:	0c1b      	lsrs	r3, r3, #16
 c0280a2:	041b      	lsls	r3, r3, #16
 c0280a4:	4293      	cmp	r3, r2
 c0280a6:	d15a      	bne.n	c02815e <psa_key_agreement_internal+0xde>
    mbedtls_ecdh_init( &ecdh );
 c0280a8:	a81a      	add	r0, sp, #104	; 0x68
                return( PSA_ERROR_INVALID_ARGUMENT );
            status = psa_key_agreement_ecdh( peer_key, peer_key_length,
                                             private_key->data.ecp,
 c0280aa:	69cf      	ldr	r7, [r1, #28]
    mbedtls_ecp_keypair *their_key = NULL;
 c0280ac:	9408      	str	r4, [sp, #32]
    mbedtls_ecdh_init( &ecdh );
 c0280ae:	f7f8 fc4b 	bl	c020948 <mbedtls_ecdh_init>
 c0280b2:	783b      	ldrb	r3, [r7, #0]
    status = psa_import_ec_public_key(
 c0280b4:	4641      	mov	r1, r8
 c0280b6:	3b01      	subs	r3, #1
 c0280b8:	b2db      	uxtb	r3, r3
 c0280ba:	2b0c      	cmp	r3, #12
 c0280bc:	bf96      	itet	ls
 c0280be:	4a2c      	ldrls	r2, [pc, #176]	; (c028170 <psa_key_agreement_internal+0xf0>)
 c0280c0:	4620      	movhi	r0, r4
 c0280c2:	5cd0      	ldrbls	r0, [r2, r3]
 c0280c4:	ab08      	add	r3, sp, #32
 c0280c6:	464a      	mov	r2, r9
 c0280c8:	f7ff f8c6 	bl	c027258 <psa_import_ec_public_key>
    if( status != PSA_SUCCESS )
 c0280cc:	4604      	mov	r4, r0
 c0280ce:	b9f0      	cbnz	r0, c02810e <psa_key_agreement_internal+0x8e>
    status = mbedtls_to_psa_error(
 c0280d0:	2201      	movs	r2, #1
 c0280d2:	9908      	ldr	r1, [sp, #32]
 c0280d4:	a81a      	add	r0, sp, #104	; 0x68
 c0280d6:	f7f8 fc87 	bl	c0209e8 <mbedtls_ecdh_get_params>
 c0280da:	f7fe fb2d 	bl	c026738 <mbedtls_to_psa_error>
    if( status != PSA_SUCCESS )
 c0280de:	4604      	mov	r4, r0
 c0280e0:	b9a8      	cbnz	r0, c02810e <psa_key_agreement_internal+0x8e>
    status = mbedtls_to_psa_error(
 c0280e2:	4602      	mov	r2, r0
 c0280e4:	4639      	mov	r1, r7
 c0280e6:	a81a      	add	r0, sp, #104	; 0x68
 c0280e8:	f7f8 fc7e 	bl	c0209e8 <mbedtls_ecdh_get_params>
 c0280ec:	f7fe fb24 	bl	c026738 <mbedtls_to_psa_error>
    if( status != PSA_SUCCESS )
 c0280f0:	4604      	mov	r4, r0
 c0280f2:	b960      	cbnz	r0, c02810e <psa_key_agreement_internal+0x8e>
    status = mbedtls_to_psa_error(
 c0280f4:	4b1f      	ldr	r3, [pc, #124]	; (c028174 <psa_key_agreement_internal+0xf4>)
 c0280f6:	aa09      	add	r2, sp, #36	; 0x24
 c0280f8:	9301      	str	r3, [sp, #4]
 c0280fa:	4b1f      	ldr	r3, [pc, #124]	; (c028178 <psa_key_agreement_internal+0xf8>)
 c0280fc:	a907      	add	r1, sp, #28
 c0280fe:	9300      	str	r3, [sp, #0]
 c028100:	a81a      	add	r0, sp, #104	; 0x68
 c028102:	2342      	movs	r3, #66	; 0x42
 c028104:	f7f8 fca0 	bl	c020a48 <mbedtls_ecdh_calc_secret>
 c028108:	f7fe fb16 	bl	c026738 <mbedtls_to_psa_error>
 c02810c:	4604      	mov	r4, r0
    mbedtls_ecdh_free( &ecdh );
 c02810e:	a81a      	add	r0, sp, #104	; 0x68
 c028110:	f7f8 fc4c 	bl	c0209ac <mbedtls_ecdh_free>
    mbedtls_ecp_keypair_free( their_key );
 c028114:	9808      	ldr	r0, [sp, #32]
 c028116:	f7f9 fc99 	bl	c021a4c <mbedtls_ecp_keypair_free>
    mbedtls_free( their_key );
 c02811a:	9808      	ldr	r0, [sp, #32]
 c02811c:	f7fe faf4 	bl	c026708 <mbedtls_free>
            (void) private_key;
            (void) peer_key;
            (void) peer_key_length;
            return( PSA_ERROR_NOT_SUPPORTED );
    }
    if( status != PSA_SUCCESS )
 c028120:	b994      	cbnz	r4, c028148 <psa_key_agreement_internal+0xc8>
        goto exit;

    /* Step 2: set up the key derivation to generate key material from
     * the shared secret. */
    status = psa_key_derivation_internal( generator,
 c028122:	f04f 32ff 	mov.w	r2, #4294967295
                                          shared_secret, shared_secret_length,
                                          PSA_ALG_KEY_AGREEMENT_GET_KDF( alg ),
 c028126:	f025 437e 	bic.w	r3, r5, #4261412864	; 0xfe000000
 c02812a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    status = psa_key_derivation_internal( generator,
 c02812e:	e9cd 4203 	strd	r4, r2, [sp, #12]
 c028132:	e9cd 4401 	strd	r4, r4, [sp, #4]
 c028136:	9400      	str	r4, [sp, #0]
 c028138:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 c02813c:	9a07      	ldr	r2, [sp, #28]
 c02813e:	a909      	add	r1, sp, #36	; 0x24
 c028140:	4630      	mov	r0, r6
 c028142:	f7ff fe5d 	bl	c027e00 <psa_key_derivation_internal>
 c028146:	4604      	mov	r4, r0
                                          NULL, 0, NULL, 0,
                                          PSA_GENERATOR_UNBRIDLED_CAPACITY );
exit:
    mbedtls_platform_zeroize( shared_secret, shared_secret_length );
 c028148:	9907      	ldr	r1, [sp, #28]
 c02814a:	a809      	add	r0, sp, #36	; 0x24
 c02814c:	f7fe faec 	bl	c026728 <mbedtls_platform_zeroize>
    return( status );
}
 c028150:	4620      	mov	r0, r4
 c028152:	b053      	add	sp, #332	; 0x14c
 c028154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return( PSA_ERROR_NOT_SUPPORTED );
 c028158:	f06f 0485 	mvn.w	r4, #133	; 0x85
 c02815c:	e7f8      	b.n	c028150 <psa_key_agreement_internal+0xd0>
                return( PSA_ERROR_INVALID_ARGUMENT );
 c02815e:	f06f 0486 	mvn.w	r4, #134	; 0x86
 c028162:	e7f5      	b.n	c028150 <psa_key_agreement_internal+0xd0>
 c028164:	fef00000 	.word	0xfef00000
 c028168:	22200000 	.word	0x22200000
 c02816c:	70030000 	.word	0x70030000
 c028170:	0c034f14 	.word	0x0c034f14
 c028174:	300382d0 	.word	0x300382d0
 c028178:	0c0208e5 	.word	0x0c0208e5

0c02817c <mbedcrypto__psa_hash_verify>:
{
 c02817c:	b5f0      	push	{r4, r5, r6, r7, lr}
 c02817e:	b093      	sub	sp, #76	; 0x4c
    psa_status_t status = psa_hash_finish( operation,
 c028180:	ad02      	add	r5, sp, #8
{
 c028182:	460e      	mov	r6, r1
 c028184:	4617      	mov	r7, r2
    psa_status_t status = psa_hash_finish( operation,
 c028186:	ab01      	add	r3, sp, #4
 c028188:	2240      	movs	r2, #64	; 0x40
 c02818a:	4629      	mov	r1, r5
 c02818c:	f7ff fbfe 	bl	c02798c <mbedcrypto__psa_hash_finish>
    if( status != PSA_SUCCESS )
 c028190:	b950      	cbnz	r0, c0281a8 <mbedcrypto__psa_hash_verify+0x2c>
    if( actual_hash_length != hash_length )
 c028192:	9c01      	ldr	r4, [sp, #4]
 c028194:	42bc      	cmp	r4, r7
 c028196:	d10f      	bne.n	c0281b8 <mbedcrypto__psa_hash_verify+0x3c>
    unsigned char diff = 0;
 c028198:	4602      	mov	r2, r0
    for( i = 0; i < n; i++ )
 c02819a:	4603      	mov	r3, r0
 c02819c:	429c      	cmp	r4, r3
 c02819e:	d105      	bne.n	c0281ac <mbedcrypto__psa_hash_verify+0x30>
        return( PSA_ERROR_INVALID_SIGNATURE );
 c0281a0:	2a00      	cmp	r2, #0
 c0281a2:	bf18      	it	ne
 c0281a4:	f06f 0094 	mvnne.w	r0, #148	; 0x94
}
 c0281a8:	b013      	add	sp, #76	; 0x4c
 c0281aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        diff |= a[i] ^ b[i];
 c0281ac:	5cf1      	ldrb	r1, [r6, r3]
 c0281ae:	5cef      	ldrb	r7, [r5, r3]
    for( i = 0; i < n; i++ )
 c0281b0:	3301      	adds	r3, #1
        diff |= a[i] ^ b[i];
 c0281b2:	4079      	eors	r1, r7
 c0281b4:	430a      	orrs	r2, r1
 c0281b6:	e7f1      	b.n	c02819c <mbedcrypto__psa_hash_verify+0x20>
        return( PSA_ERROR_INVALID_SIGNATURE );
 c0281b8:	f06f 0094 	mvn.w	r0, #148	; 0x94
 c0281bc:	e7f4      	b.n	c0281a8 <mbedcrypto__psa_hash_verify+0x2c>
	...

0c0281c0 <mbedcrypto__psa_hash_clone>:
{
 c0281c0:	b538      	push	{r3, r4, r5, lr}
    if( target_operation->alg != 0 )
 c0281c2:	680b      	ldr	r3, [r1, #0]
{
 c0281c4:	4605      	mov	r5, r0
 c0281c6:	460c      	mov	r4, r1
    if( target_operation->alg != 0 )
 c0281c8:	b9f3      	cbnz	r3, c028208 <mbedcrypto__psa_hash_clone+0x48>
    switch( source_operation->alg )
 c0281ca:	6803      	ldr	r3, [r0, #0]
 c0281cc:	4a10      	ldr	r2, [pc, #64]	; (c028210 <mbedcrypto__psa_hash_clone+0x50>)
 c0281ce:	4293      	cmp	r3, r2
 c0281d0:	d806      	bhi.n	c0281e0 <mbedcrypto__psa_hash_clone+0x20>
 c0281d2:	3a01      	subs	r2, #1
 c0281d4:	4293      	cmp	r3, r2
 c0281d6:	d20d      	bcs.n	c0281f4 <mbedcrypto__psa_hash_clone+0x34>
 c0281d8:	b1b3      	cbz	r3, c028208 <mbedcrypto__psa_hash_clone+0x48>
            return( PSA_ERROR_NOT_SUPPORTED );
 c0281da:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 c0281de:	bd38      	pop	{r3, r4, r5, pc}
    switch( source_operation->alg )
 c0281e0:	4a0c      	ldr	r2, [pc, #48]	; (c028214 <mbedcrypto__psa_hash_clone+0x54>)
 c0281e2:	4293      	cmp	r3, r2
 c0281e4:	d8f9      	bhi.n	c0281da <mbedcrypto__psa_hash_clone+0x1a>
            mbedtls_sha512_clone( &target_operation->ctx.sha512,
 c0281e6:	f100 0108 	add.w	r1, r0, #8
 c0281ea:	f104 0008 	add.w	r0, r4, #8
 c0281ee:	f003 fe9a 	bl	c02bf26 <mbedtls_sha512_clone>
            break;
 c0281f2:	e005      	b.n	c028200 <mbedcrypto__psa_hash_clone+0x40>
            mbedtls_sha256_clone( &target_operation->ctx.sha256,
 c0281f4:	f100 0108 	add.w	r1, r0, #8
 c0281f8:	f104 0008 	add.w	r0, r4, #8
 c0281fc:	f003 f9db 	bl	c02b5b6 <mbedtls_sha256_clone>
    target_operation->alg = source_operation->alg;
 c028200:	682b      	ldr	r3, [r5, #0]
    return( PSA_SUCCESS );
 c028202:	2000      	movs	r0, #0
    target_operation->alg = source_operation->alg;
 c028204:	6023      	str	r3, [r4, #0]
    return( PSA_SUCCESS );
 c028206:	e7ea      	b.n	c0281de <mbedcrypto__psa_hash_clone+0x1e>
            return( PSA_ERROR_BAD_STATE );
 c028208:	f06f 0088 	mvn.w	r0, #136	; 0x88
 c02820c:	e7e7      	b.n	c0281de <mbedcrypto__psa_hash_clone+0x1e>
 c02820e:	bf00      	nop
 c028210:	01000009 	.word	0x01000009
 c028214:	0100000b 	.word	0x0100000b

0c028218 <mbedcrypto__psa_mac_abort>:
    if( operation->alg == 0 )
 c028218:	6803      	ldr	r3, [r0, #0]
{
 c02821a:	b510      	push	{r4, lr}
 c02821c:	4604      	mov	r4, r0
    if( operation->alg == 0 )
 c02821e:	b1fb      	cbz	r3, c028260 <mbedcrypto__psa_mac_abort+0x48>
    if( operation->alg == PSA_ALG_CMAC )
 c028220:	4a10      	ldr	r2, [pc, #64]	; (c028264 <mbedcrypto__psa_mac_abort+0x4c>)
 c028222:	4293      	cmp	r3, r2
 c028224:	d10b      	bne.n	c02823e <mbedcrypto__psa_mac_abort+0x26>
        mbedtls_cipher_free( &operation->ctx.cmac );
 c028226:	3008      	adds	r0, #8
 c028228:	f7f7 fd98 	bl	c01fd5c <mbedtls_cipher_free>
    operation->alg = 0;
 c02822c:	2000      	movs	r0, #0
    operation->key_set = 0;
 c02822e:	7923      	ldrb	r3, [r4, #4]
    operation->alg = 0;
 c028230:	6020      	str	r0, [r4, #0]
    operation->is_sign = 0;
 c028232:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c028236:	f360 1304 	bfi	r3, r0, #4, #1
 c02823a:	7123      	strb	r3, [r4, #4]
}
 c02823c:	bd10      	pop	{r4, pc}
    if( PSA_ALG_IS_HMAC( operation->alg ) )
 c02823e:	4a0a      	ldr	r2, [pc, #40]	; (c028268 <mbedcrypto__psa_mac_abort+0x50>)
 c028240:	401a      	ands	r2, r3
 c028242:	f1b2 7f20 	cmp.w	r2, #41943040	; 0x2800000
 c028246:	d103      	bne.n	c028250 <mbedcrypto__psa_mac_abort+0x38>
        psa_hmac_abort_internal( &operation->ctx.hmac );
 c028248:	3008      	adds	r0, #8
 c02824a:	f7ff fb23 	bl	c027894 <psa_hmac_abort_internal>
 c02824e:	e7ed      	b.n	c02822c <mbedcrypto__psa_mac_abort+0x14>
    memset( operation, 0, sizeof( *operation ) );
 c028250:	f44f 72b4 	mov.w	r2, #360	; 0x168
 c028254:	2100      	movs	r1, #0
 c028256:	f7ec fbb6 	bl	c0149c6 <memset>
 c02825a:	f06f 0088 	mvn.w	r0, #136	; 0x88
 c02825e:	e7ed      	b.n	c02823c <mbedcrypto__psa_mac_abort+0x24>
        return( PSA_SUCCESS );
 c028260:	4618      	mov	r0, r3
 c028262:	e7eb      	b.n	c02823c <mbedcrypto__psa_mac_abort+0x24>
 c028264:	02c00002 	.word	0x02c00002
 c028268:	7fc00000 	.word	0x7fc00000

0c02826c <psa_mac_setup>:
{
 c02826c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 c028270:	4688      	mov	r8, r1
    if( operation->alg != 0 )
 c028272:	6801      	ldr	r1, [r0, #0]
{
 c028274:	4604      	mov	r4, r0
 c028276:	4615      	mov	r5, r2
        is_sign ? PSA_KEY_USAGE_SIGN : PSA_KEY_USAGE_VERIFY;
 c028278:	469a      	mov	sl, r3
 c02827a:	2b00      	cmp	r3, #0
 c02827c:	bf14      	ite	ne
 c02827e:	f44f 6980 	movne.w	r9, #1024	; 0x400
 c028282:	f44f 6900 	moveq.w	r9, #2048	; 0x800
    psa_algorithm_t full_length_alg = PSA_ALG_FULL_LENGTH_MAC( alg );
 c028286:	f422 577c 	bic.w	r7, r2, #16128	; 0x3f00
    if( operation->alg != 0 )
 c02828a:	2900      	cmp	r1, #0
 c02828c:	f040 80c3 	bne.w	c028416 <psa_mac_setup+0x1aa>
    operation->key_set = 0;
 c028290:	7906      	ldrb	r6, [r0, #4]
    if( alg == PSA_ALG_CMAC )
 c028292:	4b66      	ldr	r3, [pc, #408]	; (c02842c <psa_mac_setup+0x1c0>)
    operation->key_set = 0;
 c028294:	f361 0600 	bfi	r6, r1, #0, #1
    operation->iv_set = 0;
 c028298:	f361 0682 	bfi	r6, r1, #2, #1
    operation->iv_required = 0;
 c02829c:	f361 0641 	bfi	r6, r1, #1, #1
    operation->has_input = 0;
 c0282a0:	f361 06c3 	bfi	r6, r1, #3, #1
    operation->is_sign = 0;
 c0282a4:	f361 1604 	bfi	r6, r1, #4, #1
    if( alg == PSA_ALG_CMAC )
 c0282a8:	429f      	cmp	r7, r3
    operation->alg = alg;
 c0282aa:	6007      	str	r7, [r0, #0]
    operation->is_sign = 0;
 c0282ac:	7106      	strb	r6, [r0, #4]
    if( alg == PSA_ALG_CMAC )
 c0282ae:	d129      	bne.n	c028304 <psa_mac_setup+0x98>
        mbedtls_cipher_init( &operation->ctx.cmac );
 c0282b0:	3008      	adds	r0, #8
 c0282b2:	f7f7 fd4f 	bl	c01fd54 <mbedtls_cipher_init>
    if( is_sign )
 c0282b6:	f1ba 0f00 	cmp.w	sl, #0
 c0282ba:	d003      	beq.n	c0282c4 <psa_mac_setup+0x58>
        operation->is_sign = 1;
 c0282bc:	7923      	ldrb	r3, [r4, #4]
 c0282be:	f043 0310 	orr.w	r3, r3, #16
 c0282c2:	7123      	strb	r3, [r4, #4]
    status = psa_get_key_from_slot( handle, &slot, usage, alg );
 c0282c4:	462b      	mov	r3, r5
 c0282c6:	464a      	mov	r2, r9
 c0282c8:	a901      	add	r1, sp, #4
 c0282ca:	4640      	mov	r0, r8
 c0282cc:	f7fe fd8c 	bl	c026de8 <psa_get_key_from_slot>
    if( status != PSA_SUCCESS )
 c0282d0:	4606      	mov	r6, r0
 c0282d2:	b998      	cbnz	r0, c0282fc <psa_mac_setup+0x90>
    key_bits = psa_get_key_bits( slot );
 c0282d4:	9801      	ldr	r0, [sp, #4]
 c0282d6:	f7fe fdf1 	bl	c026ebc <psa_get_key_bits>
    if( full_length_alg == PSA_ALG_CMAC )
 c0282da:	4b54      	ldr	r3, [pc, #336]	; (c02842c <psa_mac_setup+0x1c0>)
    unsigned char truncated = PSA_MAC_TRUNCATED_LENGTH( alg );
 c0282dc:	f3c5 2805 	ubfx	r8, r5, #8, #6
    if( full_length_alg == PSA_ALG_CMAC )
 c0282e0:	429f      	cmp	r7, r3
    key_bits = psa_get_key_bits( slot );
 c0282e2:	4681      	mov	r9, r0
    if( full_length_alg == PSA_ALG_CMAC )
 c0282e4:	d149      	bne.n	c02837a <psa_mac_setup+0x10e>
        const mbedtls_cipher_info_t *cipher_info =
 c0282e6:	9901      	ldr	r1, [sp, #4]
 c0282e8:	4602      	mov	r2, r0
 c0282ea:	6809      	ldr	r1, [r1, #0]
 c0282ec:	4633      	mov	r3, r6
 c0282ee:	4638      	mov	r0, r7
 c0282f0:	f7fe fc7c 	bl	c026bec <mbedtls_cipher_info_from_psa>
        if( cipher_info == NULL )
 c0282f4:	4601      	mov	r1, r0
 c0282f6:	b9e8      	cbnz	r0, c028334 <psa_mac_setup+0xc8>
            status = PSA_ERROR_NOT_SUPPORTED;
 c0282f8:	f06f 0685 	mvn.w	r6, #133	; 0x85
        psa_mac_abort( operation );
 c0282fc:	4620      	mov	r0, r4
 c0282fe:	f7ff ff8b 	bl	c028218 <mbedcrypto__psa_mac_abort>
 c028302:	e013      	b.n	c02832c <psa_mac_setup+0xc0>
    if( PSA_ALG_IS_HMAC( operation->alg ) )
 c028304:	4b4a      	ldr	r3, [pc, #296]	; (c028430 <psa_mac_setup+0x1c4>)
 c028306:	4013      	ands	r3, r2
 c028308:	f1b3 7f20 	cmp.w	r3, #41943040	; 0x2800000
 c02830c:	d101      	bne.n	c028312 <psa_mac_setup+0xa6>
        operation->ctx.hmac.hash_ctx.alg = 0;
 c02830e:	6081      	str	r1, [r0, #8]
 c028310:	e7d1      	b.n	c0282b6 <psa_mac_setup+0x4a>
        if( ! PSA_ALG_IS_MAC( alg ) )
 c028312:	f002 45fe 	and.w	r5, r2, #2130706432	; 0x7f000000
    psa_status_t status = PSA_ERROR_NOT_SUPPORTED;
 c028316:	f1b5 7f00 	cmp.w	r5, #33554432	; 0x2000000
        memset( operation, 0, sizeof( *operation ) );
 c02831a:	f44f 72b4 	mov.w	r2, #360	; 0x168
    psa_status_t status = PSA_ERROR_NOT_SUPPORTED;
 c02831e:	bf14      	ite	ne
 c028320:	f06f 0686 	mvnne.w	r6, #134	; 0x86
 c028324:	f06f 0685 	mvneq.w	r6, #133	; 0x85
        memset( operation, 0, sizeof( *operation ) );
 c028328:	f7ec fb4d 	bl	c0149c6 <memset>
}
 c02832c:	4630      	mov	r0, r6
 c02832e:	b002      	add	sp, #8
 c028330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        operation->mac_size = cipher_info->block_size;
 c028334:	6943      	ldr	r3, [r0, #20]
    ret = mbedtls_cipher_setup( &operation->ctx.cmac, cipher_info );
 c028336:	f104 0508 	add.w	r5, r4, #8
        operation->mac_size = cipher_info->block_size;
 c02833a:	7163      	strb	r3, [r4, #5]
    ret = mbedtls_cipher_setup( &operation->ctx.cmac, cipher_info );
 c02833c:	4628      	mov	r0, r5
        ret = psa_cmac_setup( operation, key_bits, slot, cipher_info );
 c02833e:	9e01      	ldr	r6, [sp, #4]
    ret = mbedtls_cipher_setup( &operation->ctx.cmac, cipher_info );
 c028340:	f7f7 ff02 	bl	c020148 <mbedtls_cipher_setup>
    if( ret != 0 )
 c028344:	b920      	cbnz	r0, c028350 <psa_mac_setup+0xe4>
    ret = mbedtls_cipher_cmac_starts( &operation->ctx.cmac,
 c028346:	464a      	mov	r2, r9
 c028348:	69f1      	ldr	r1, [r6, #28]
 c02834a:	4628      	mov	r0, r5
 c02834c:	f7f7 ffc4 	bl	c0202d8 <mbedtls_cipher_cmac_starts>
        status = mbedtls_to_psa_error( ret );
 c028350:	f7fe f9f2 	bl	c026738 <mbedtls_to_psa_error>
        status = psa_hmac_setup_internal( &operation->ctx.hmac,
 c028354:	4606      	mov	r6, r0
    if( truncated == 0 )
 c028356:	f1b8 0f00 	cmp.w	r8, #0
 c02835a:	d007      	beq.n	c02836c <psa_mac_setup+0x100>
    else if( truncated < 4 )
 c02835c:	f1b8 0f03 	cmp.w	r8, #3
 c028360:	d9ca      	bls.n	c0282f8 <psa_mac_setup+0x8c>
    else if( truncated > operation->mac_size )
 c028362:	7963      	ldrb	r3, [r4, #5]
 c028364:	4543      	cmp	r3, r8
 c028366:	d333      	bcc.n	c0283d0 <psa_mac_setup+0x164>
        operation->mac_size = truncated;
 c028368:	f884 8005 	strb.w	r8, [r4, #5]
    if( status != PSA_SUCCESS )
 c02836c:	2e00      	cmp	r6, #0
 c02836e:	d1c5      	bne.n	c0282fc <psa_mac_setup+0x90>
        operation->key_set = 1;
 c028370:	7923      	ldrb	r3, [r4, #4]
 c028372:	f043 0301 	orr.w	r3, r3, #1
 c028376:	7123      	strb	r3, [r4, #4]
 c028378:	e7d8      	b.n	c02832c <psa_mac_setup+0xc0>
    if( PSA_ALG_IS_HMAC( full_length_alg ) )
 c02837a:	4b2d      	ldr	r3, [pc, #180]	; (c028430 <psa_mac_setup+0x1c4>)
 c02837c:	402b      	ands	r3, r5
 c02837e:	f1b3 7f20 	cmp.w	r3, #41943040	; 0x2800000
 c028382:	d14b      	bne.n	c02841c <psa_mac_setup+0x1b0>
        psa_algorithm_t hash_alg = PSA_ALG_HMAC_GET_HASH( alg );
 c028384:	b2eb      	uxtb	r3, r5
 c028386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
        operation->mac_size = PSA_HASH_SIZE( hash_alg );
 c02838a:	f103 427f 	add.w	r2, r3, #4278190080	; 0xff000000
 c02838e:	3a01      	subs	r2, #1
 c028390:	2a02      	cmp	r2, #2
 c028392:	d937      	bls.n	c028404 <psa_mac_setup+0x198>
 c028394:	f103 427f 	add.w	r2, r3, #4278190080	; 0xff000000
 c028398:	3a04      	subs	r2, #4
 c02839a:	2a01      	cmp	r2, #1
 c02839c:	d930      	bls.n	c028400 <psa_mac_setup+0x194>
 c02839e:	4a25      	ldr	r2, [pc, #148]	; (c028434 <psa_mac_setup+0x1c8>)
 c0283a0:	4293      	cmp	r3, r2
 c0283a2:	d101      	bne.n	c0283a8 <psa_mac_setup+0x13c>
 c0283a4:	221c      	movs	r2, #28
 c0283a6:	e00d      	b.n	c0283c4 <psa_mac_setup+0x158>
 c0283a8:	4a23      	ldr	r2, [pc, #140]	; (c028438 <psa_mac_setup+0x1cc>)
 c0283aa:	4293      	cmp	r3, r2
 c0283ac:	d101      	bne.n	c0283b2 <psa_mac_setup+0x146>
 c0283ae:	2220      	movs	r2, #32
 c0283b0:	e008      	b.n	c0283c4 <psa_mac_setup+0x158>
 c0283b2:	4a22      	ldr	r2, [pc, #136]	; (c02843c <psa_mac_setup+0x1d0>)
 c0283b4:	4293      	cmp	r3, r2
 c0283b6:	d101      	bne.n	c0283bc <psa_mac_setup+0x150>
 c0283b8:	2230      	movs	r2, #48	; 0x30
 c0283ba:	e003      	b.n	c0283c4 <psa_mac_setup+0x158>
 c0283bc:	4a20      	ldr	r2, [pc, #128]	; (c028440 <psa_mac_setup+0x1d4>)
 c0283be:	4293      	cmp	r3, r2
 c0283c0:	d109      	bne.n	c0283d6 <psa_mac_setup+0x16a>
 c0283c2:	2240      	movs	r2, #64	; 0x40
        if( slot->type != PSA_KEY_TYPE_HMAC )
 c0283c4:	9901      	ldr	r1, [sp, #4]
        operation->mac_size = PSA_HASH_SIZE( hash_alg );
 c0283c6:	7162      	strb	r2, [r4, #5]
        if( slot->type != PSA_KEY_TYPE_HMAC )
 c0283c8:	680a      	ldr	r2, [r1, #0]
 c0283ca:	f1b2 4fa2 	cmp.w	r2, #1358954496	; 0x51000000
 c0283ce:	d01b      	beq.n	c028408 <psa_mac_setup+0x19c>
            status = PSA_ERROR_INVALID_ARGUMENT;
 c0283d0:	f06f 0686 	mvn.w	r6, #134	; 0x86
 c0283d4:	e792      	b.n	c0282fc <psa_mac_setup+0x90>
        operation->mac_size = PSA_HASH_SIZE( hash_alg );
 c0283d6:	4a1b      	ldr	r2, [pc, #108]	; (c028444 <psa_mac_setup+0x1d8>)
 c0283d8:	4293      	cmp	r3, r2
 c0283da:	d0e3      	beq.n	c0283a4 <psa_mac_setup+0x138>
 c0283dc:	3201      	adds	r2, #1
 c0283de:	4293      	cmp	r3, r2
 c0283e0:	d0e5      	beq.n	c0283ae <psa_mac_setup+0x142>
 c0283e2:	3203      	adds	r2, #3
 c0283e4:	4293      	cmp	r3, r2
 c0283e6:	d0dd      	beq.n	c0283a4 <psa_mac_setup+0x138>
 c0283e8:	4a17      	ldr	r2, [pc, #92]	; (c028448 <psa_mac_setup+0x1dc>)
 c0283ea:	4293      	cmp	r3, r2
 c0283ec:	d0df      	beq.n	c0283ae <psa_mac_setup+0x142>
 c0283ee:	4a17      	ldr	r2, [pc, #92]	; (c02844c <psa_mac_setup+0x1e0>)
 c0283f0:	4293      	cmp	r3, r2
 c0283f2:	d0e1      	beq.n	c0283b8 <psa_mac_setup+0x14c>
 c0283f4:	3201      	adds	r2, #1
 c0283f6:	4293      	cmp	r3, r2
 c0283f8:	d0e3      	beq.n	c0283c2 <psa_mac_setup+0x156>
 c0283fa:	2300      	movs	r3, #0
 c0283fc:	7163      	strb	r3, [r4, #5]
 c0283fe:	e77b      	b.n	c0282f8 <psa_mac_setup+0x8c>
 c028400:	2214      	movs	r2, #20
 c028402:	e7df      	b.n	c0283c4 <psa_mac_setup+0x158>
 c028404:	2210      	movs	r2, #16
 c028406:	e7dd      	b.n	c0283c4 <psa_mac_setup+0x158>
        status = psa_hmac_setup_internal( &operation->ctx.hmac,
 c028408:	e9d1 1207 	ldrd	r1, r2, [r1, #28]
 c02840c:	f104 0008 	add.w	r0, r4, #8
 c028410:	f7ff fb30 	bl	c027a74 <psa_hmac_setup_internal>
 c028414:	e79e      	b.n	c028354 <psa_mac_setup+0xe8>
        return( PSA_ERROR_BAD_STATE );
 c028416:	f06f 0688 	mvn.w	r6, #136	; 0x88
 c02841a:	e787      	b.n	c02832c <psa_mac_setup+0xc0>
    if( truncated == 0 )
 c02841c:	f1b8 0f00 	cmp.w	r8, #0
 c028420:	f43f af6a 	beq.w	c0282f8 <psa_mac_setup+0x8c>
        status = PSA_ERROR_NOT_SUPPORTED;
 c028424:	f06f 0685 	mvn.w	r6, #133	; 0x85
 c028428:	e798      	b.n	c02835c <psa_mac_setup+0xf0>
 c02842a:	bf00      	nop
 c02842c:	02c00002 	.word	0x02c00002
 c028430:	7fc00000 	.word	0x7fc00000
 c028434:	01000008 	.word	0x01000008
 c028438:	01000009 	.word	0x01000009
 c02843c:	0100000a 	.word	0x0100000a
 c028440:	0100000b 	.word	0x0100000b
 c028444:	0100000c 	.word	0x0100000c
 c028448:	01000011 	.word	0x01000011
 c02844c:	01000012 	.word	0x01000012

0c028450 <mbedcrypto__psa_mac_sign_setup>:
    return( psa_mac_setup( operation, handle, alg, 1 ) );
 c028450:	2301      	movs	r3, #1
 c028452:	f7ff bf0b 	b.w	c02826c <psa_mac_setup>

0c028456 <mbedcrypto__psa_mac_verify_setup>:
    return( psa_mac_setup( operation, handle, alg, 0 ) );
 c028456:	2300      	movs	r3, #0
 c028458:	f7ff bf08 	b.w	c02826c <psa_mac_setup>

0c02845c <mbedcrypto__psa_mac_update>:
{
 c02845c:	b538      	push	{r3, r4, r5, lr}
    if( ! operation->key_set )
 c02845e:	7903      	ldrb	r3, [r0, #4]
{
 c028460:	4604      	mov	r4, r0
    if( ! operation->key_set )
 c028462:	07d8      	lsls	r0, r3, #31
 c028464:	d403      	bmi.n	c02846e <mbedcrypto__psa_mac_update+0x12>
        return( PSA_ERROR_BAD_STATE );
 c028466:	f06f 0588 	mvn.w	r5, #136	; 0x88
}
 c02846a:	4628      	mov	r0, r5
 c02846c:	bd38      	pop	{r3, r4, r5, pc}
    if( operation->iv_required && ! operation->iv_set )
 c02846e:	f003 0006 	and.w	r0, r3, #6
 c028472:	2802      	cmp	r0, #2
 c028474:	d0f7      	beq.n	c028466 <mbedcrypto__psa_mac_update+0xa>
    operation->has_input = 1;
 c028476:	f043 0308 	orr.w	r3, r3, #8
 c02847a:	7123      	strb	r3, [r4, #4]
    if( operation->alg == PSA_ALG_CMAC )
 c02847c:	6820      	ldr	r0, [r4, #0]
 c02847e:	4b0d      	ldr	r3, [pc, #52]	; (c0284b4 <mbedcrypto__psa_mac_update+0x58>)
 c028480:	4298      	cmp	r0, r3
 c028482:	d10c      	bne.n	c02849e <mbedcrypto__psa_mac_update+0x42>
        int ret = mbedtls_cipher_cmac_update( &operation->ctx.cmac,
 c028484:	f104 0008 	add.w	r0, r4, #8
 c028488:	f7f7 ff4c 	bl	c020324 <mbedtls_cipher_cmac_update>
        status = mbedtls_to_psa_error( ret );
 c02848c:	f7fe f954 	bl	c026738 <mbedtls_to_psa_error>
        status = psa_hash_update( &operation->ctx.hmac.hash_ctx, input,
 c028490:	4605      	mov	r5, r0
    if( status != PSA_SUCCESS )
 c028492:	2800      	cmp	r0, #0
 c028494:	d0e9      	beq.n	c02846a <mbedcrypto__psa_mac_update+0xe>
        psa_mac_abort( operation );
 c028496:	4620      	mov	r0, r4
 c028498:	f7ff febe 	bl	c028218 <mbedcrypto__psa_mac_abort>
 c02849c:	e7e5      	b.n	c02846a <mbedcrypto__psa_mac_update+0xe>
    if( PSA_ALG_IS_HMAC( operation->alg ) )
 c02849e:	4b06      	ldr	r3, [pc, #24]	; (c0284b8 <mbedcrypto__psa_mac_update+0x5c>)
 c0284a0:	4003      	ands	r3, r0
 c0284a2:	f1b3 7f20 	cmp.w	r3, #41943040	; 0x2800000
 c0284a6:	d1de      	bne.n	c028466 <mbedcrypto__psa_mac_update+0xa>
        status = psa_hash_update( &operation->ctx.hmac.hash_ctx, input,
 c0284a8:	f104 0008 	add.w	r0, r4, #8
 c0284ac:	f7ff fa68 	bl	c027980 <mbedcrypto__psa_hash_update>
 c0284b0:	e7ee      	b.n	c028490 <mbedcrypto__psa_mac_update+0x34>
 c0284b2:	bf00      	nop
 c0284b4:	02c00002 	.word	0x02c00002
 c0284b8:	7fc00000 	.word	0x7fc00000

0c0284bc <mbedcrypto__psa_mac_sign_finish>:
{
 c0284bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c0284c0:	4698      	mov	r8, r3
    if( operation->alg == 0 )
 c0284c2:	6803      	ldr	r3, [r0, #0]
{
 c0284c4:	4604      	mov	r4, r0
 c0284c6:	460f      	mov	r7, r1
 c0284c8:	4616      	mov	r6, r2
    if( operation->alg == 0 )
 c0284ca:	b923      	cbnz	r3, c0284d6 <mbedcrypto__psa_mac_sign_finish+0x1a>
        return( PSA_ERROR_BAD_STATE );
 c0284cc:	f06f 0588 	mvn.w	r5, #136	; 0x88
}
 c0284d0:	4628      	mov	r0, r5
 c0284d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *mac_length = mac_size;
 c0284d6:	f8c8 2000 	str.w	r2, [r8]
    if( mac_size != 0 )
 c0284da:	b11a      	cbz	r2, c0284e4 <mbedcrypto__psa_mac_sign_finish+0x28>
        memset( mac, '!', mac_size );
 c0284dc:	2121      	movs	r1, #33	; 0x21
 c0284de:	4638      	mov	r0, r7
 c0284e0:	f7ec fa71 	bl	c0149c6 <memset>
    if( ! operation->is_sign )
 c0284e4:	7923      	ldrb	r3, [r4, #4]
 c0284e6:	06db      	lsls	r3, r3, #27
 c0284e8:	d5f0      	bpl.n	c0284cc <mbedcrypto__psa_mac_sign_finish+0x10>
    status = psa_mac_finish_internal( operation, mac, mac_size );
 c0284ea:	4632      	mov	r2, r6
 c0284ec:	4639      	mov	r1, r7
 c0284ee:	4620      	mov	r0, r4
 c0284f0:	f7ff fbb2 	bl	c027c58 <psa_mac_finish_internal>
    if( status == PSA_SUCCESS )
 c0284f4:	4605      	mov	r5, r0
        status = psa_mac_abort( operation );
 c0284f6:	4620      	mov	r0, r4
    if( status == PSA_SUCCESS )
 c0284f8:	b96d      	cbnz	r5, c028516 <mbedcrypto__psa_mac_sign_finish+0x5a>
        status = psa_mac_abort( operation );
 c0284fa:	f7ff fe8d 	bl	c028218 <mbedcrypto__psa_mac_abort>
        if( status == PSA_SUCCESS )
 c0284fe:	4605      	mov	r5, r0
 c028500:	b918      	cbnz	r0, c02850a <mbedcrypto__psa_mac_sign_finish+0x4e>
            *mac_length = operation->mac_size;
 c028502:	7963      	ldrb	r3, [r4, #5]
 c028504:	f8c8 3000 	str.w	r3, [r8]
 c028508:	e7e2      	b.n	c0284d0 <mbedcrypto__psa_mac_sign_finish+0x14>
            memset( mac, '!', mac_size );
 c02850a:	4632      	mov	r2, r6
 c02850c:	2121      	movs	r1, #33	; 0x21
 c02850e:	4638      	mov	r0, r7
 c028510:	f7ec fa59 	bl	c0149c6 <memset>
 c028514:	e7dc      	b.n	c0284d0 <mbedcrypto__psa_mac_sign_finish+0x14>
        psa_mac_abort( operation );
 c028516:	f7ff fe7f 	bl	c028218 <mbedcrypto__psa_mac_abort>
 c02851a:	e7d9      	b.n	c0284d0 <mbedcrypto__psa_mac_sign_finish+0x14>

0c02851c <mbedcrypto__psa_mac_verify_finish>:
{
 c02851c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( operation->alg == 0 )
 c028520:	6803      	ldr	r3, [r0, #0]
{
 c028522:	b090      	sub	sp, #64	; 0x40
 c028524:	4606      	mov	r6, r0
 c028526:	4688      	mov	r8, r1
    if( operation->alg == 0 )
 c028528:	b353      	cbz	r3, c028580 <mbedcrypto__psa_mac_verify_finish+0x64>
    if( operation->is_sign )
 c02852a:	7904      	ldrb	r4, [r0, #4]
 c02852c:	f014 0410 	ands.w	r4, r4, #16
 c028530:	d126      	bne.n	c028580 <mbedcrypto__psa_mac_verify_finish+0x64>
    if( operation->mac_size != mac_length )
 c028532:	7947      	ldrb	r7, [r0, #5]
 c028534:	4297      	cmp	r7, r2
 c028536:	d11d      	bne.n	c028574 <mbedcrypto__psa_mac_verify_finish+0x58>
    status = psa_mac_finish_internal( operation,
 c028538:	2240      	movs	r2, #64	; 0x40
 c02853a:	4669      	mov	r1, sp
 c02853c:	f7ff fb8c 	bl	c027c58 <psa_mac_finish_internal>
    for( i = 0; i < n; i++ )
 c028540:	4623      	mov	r3, r4
    status = psa_mac_finish_internal( operation,
 c028542:	4605      	mov	r5, r0
    for( i = 0; i < n; i++ )
 c028544:	429f      	cmp	r7, r3
 c028546:	d80d      	bhi.n	c028564 <mbedcrypto__psa_mac_verify_finish+0x48>
    if( safer_memcmp( mac, actual_mac, mac_length ) != 0 )
 c028548:	b9a4      	cbnz	r4, c028574 <mbedcrypto__psa_mac_verify_finish+0x58>
    if( status == PSA_SUCCESS )
 c02854a:	b9ad      	cbnz	r5, c028578 <mbedcrypto__psa_mac_verify_finish+0x5c>
        status = psa_mac_abort( operation );
 c02854c:	4630      	mov	r0, r6
 c02854e:	f7ff fe63 	bl	c028218 <mbedcrypto__psa_mac_abort>
 c028552:	4605      	mov	r5, r0
    mbedtls_platform_zeroize( actual_mac, sizeof( actual_mac ) );
 c028554:	2140      	movs	r1, #64	; 0x40
 c028556:	4668      	mov	r0, sp
 c028558:	f7fe f8e6 	bl	c026728 <mbedtls_platform_zeroize>
}
 c02855c:	4628      	mov	r0, r5
 c02855e:	b010      	add	sp, #64	; 0x40
 c028560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        diff |= a[i] ^ b[i];
 c028564:	f818 2003 	ldrb.w	r2, [r8, r3]
 c028568:	f81d 1003 	ldrb.w	r1, [sp, r3]
    for( i = 0; i < n; i++ )
 c02856c:	3301      	adds	r3, #1
        diff |= a[i] ^ b[i];
 c02856e:	404a      	eors	r2, r1
 c028570:	4314      	orrs	r4, r2
 c028572:	e7e7      	b.n	c028544 <mbedcrypto__psa_mac_verify_finish+0x28>
        status = PSA_ERROR_INVALID_SIGNATURE;
 c028574:	f06f 0594 	mvn.w	r5, #148	; 0x94
        psa_mac_abort( operation );
 c028578:	4630      	mov	r0, r6
 c02857a:	f7ff fe4d 	bl	c028218 <mbedcrypto__psa_mac_abort>
 c02857e:	e7e9      	b.n	c028554 <mbedcrypto__psa_mac_verify_finish+0x38>
        return( PSA_ERROR_BAD_STATE );
 c028580:	f06f 0588 	mvn.w	r5, #136	; 0x88
 c028584:	e7ea      	b.n	c02855c <mbedcrypto__psa_mac_verify_finish+0x40>
	...

0c028588 <mbedcrypto__psa_asymmetric_sign>:
{
 c028588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02858c:	b08f      	sub	sp, #60	; 0x3c
 c02858e:	4698      	mov	r8, r3
 c028590:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
    *signature_length = signature_size;
 c028594:	9b1a      	ldr	r3, [sp, #104]	; 0x68
{
 c028596:	460c      	mov	r4, r1
    *signature_length = signature_size;
 c028598:	601f      	str	r7, [r3, #0]
{
 c02859a:	4692      	mov	sl, r2
    status = psa_get_key_from_slot( handle, &slot, PSA_KEY_USAGE_SIGN, alg );
 c02859c:	460b      	mov	r3, r1
 c02859e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 c0285a2:	a907      	add	r1, sp, #28
 c0285a4:	f7fe fc20 	bl	c026de8 <psa_get_key_from_slot>
    if( status != PSA_SUCCESS )
 c0285a8:	4605      	mov	r5, r0
 c0285aa:	b9d0      	cbnz	r0, c0285e2 <mbedcrypto__psa_asymmetric_sign+0x5a>
    if( ! PSA_KEY_TYPE_IS_KEYPAIR( slot->type ) )
 c0285ac:	9b07      	ldr	r3, [sp, #28]
 c0285ae:	6819      	ldr	r1, [r3, #0]
 c0285b0:	f001 42e0 	and.w	r2, r1, #1879048192	; 0x70000000
 c0285b4:	f1b2 4fe0 	cmp.w	r2, #1879048192	; 0x70000000
 c0285b8:	d14a      	bne.n	c028650 <mbedcrypto__psa_asymmetric_sign+0xc8>
    if( slot->type == PSA_KEY_TYPE_RSA_KEYPAIR )
 c0285ba:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 c0285be:	4291      	cmp	r1, r2
 c0285c0:	d15a      	bne.n	c028678 <mbedcrypto__psa_asymmetric_sign+0xf0>
    status = psa_rsa_decode_md_type( alg, hash_length, &md_alg );
 c0285c2:	aa0b      	add	r2, sp, #44	; 0x2c
 c0285c4:	4641      	mov	r1, r8
 c0285c6:	4620      	mov	r0, r4
        status = psa_rsa_sign( slot->data.rsa,
 c0285c8:	f8d3 901c 	ldr.w	r9, [r3, #28]
    status = psa_rsa_decode_md_type( alg, hash_length, &md_alg );
 c0285cc:	f7fe fdfa 	bl	c0271c4 <psa_rsa_decode_md_type>
    if( status != PSA_SUCCESS )
 c0285d0:	4605      	mov	r5, r0
 c0285d2:	b930      	cbnz	r0, c0285e2 <mbedcrypto__psa_asymmetric_sign+0x5a>
    if( signature_size < mbedtls_rsa_get_len( rsa ) )
 c0285d4:	4648      	mov	r0, r9
 c0285d6:	f001 fbaa 	bl	c029d2e <mbedtls_rsa_get_len>
 c0285da:	4287      	cmp	r7, r0
 c0285dc:	d206      	bcs.n	c0285ec <mbedcrypto__psa_asymmetric_sign+0x64>
        return( PSA_ERROR_BUFFER_TOO_SMALL );
 c0285de:	f06f 0589 	mvn.w	r5, #137	; 0x89
    else if( signature_size != 0 )
 c0285e2:	b377      	cbz	r7, c028642 <mbedcrypto__psa_asymmetric_sign+0xba>
        memset( signature, '!', signature_size );
 c0285e4:	463a      	mov	r2, r7
 c0285e6:	2121      	movs	r1, #33	; 0x21
 c0285e8:	4630      	mov	r0, r6
 c0285ea:	e028      	b.n	c02863e <mbedcrypto__psa_asymmetric_sign+0xb6>
    if( PSA_ALG_IS_RSA_PKCS1V15_SIGN( alg ) )
 c0285ec:	4b56      	ldr	r3, [pc, #344]	; (c028748 <mbedcrypto__psa_asymmetric_sign+0x1c0>)
 c0285ee:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
 c0285f2:	429c      	cmp	r4, r3
 c0285f4:	d129      	bne.n	c02864a <mbedcrypto__psa_asymmetric_sign+0xc2>
        mbedtls_rsa_set_padding( rsa, MBEDTLS_RSA_PKCS_V15,
 c0285f6:	462a      	mov	r2, r5
 c0285f8:	4629      	mov	r1, r5
 c0285fa:	4648      	mov	r0, r9
 c0285fc:	f001 fb94 	bl	c029d28 <mbedtls_rsa_set_padding>
        ret = mbedtls_rsa_pkcs1_sign( rsa,
 c028600:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 c028604:	e9cd a602 	strd	sl, r6, [sp, #8]
 c028608:	9300      	str	r3, [sp, #0]
 c02860a:	f8cd 8004 	str.w	r8, [sp, #4]
 c02860e:	2301      	movs	r3, #1
 c028610:	4a4e      	ldr	r2, [pc, #312]	; (c02874c <mbedcrypto__psa_asymmetric_sign+0x1c4>)
 c028612:	494f      	ldr	r1, [pc, #316]	; (c028750 <mbedcrypto__psa_asymmetric_sign+0x1c8>)
 c028614:	4648      	mov	r0, r9
 c028616:	f002 fa1b 	bl	c02aa50 <mbedtls_rsa_pkcs1_sign>
        ret = mbedtls_rsa_rsassa_pss_sign( rsa,
 c02861a:	4604      	mov	r4, r0
    if( ret == 0 )
 c02861c:	b920      	cbnz	r0, c028628 <mbedcrypto__psa_asymmetric_sign+0xa0>
        *signature_length = mbedtls_rsa_get_len( rsa );
 c02861e:	4648      	mov	r0, r9
 c028620:	f001 fb85 	bl	c029d2e <mbedtls_rsa_get_len>
 c028624:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 c028626:	6018      	str	r0, [r3, #0]
    return( mbedtls_to_psa_error( ret ) );
 c028628:	4620      	mov	r0, r4
 c02862a:	f7fe f885 	bl	c026738 <mbedtls_to_psa_error>
 c02862e:	4605      	mov	r5, r0
    if( status == PSA_SUCCESS )
 c028630:	2800      	cmp	r0, #0
 c028632:	d1d6      	bne.n	c0285e2 <mbedcrypto__psa_asymmetric_sign+0x5a>
        memset( signature + *signature_length, '!',
 c028634:	2121      	movs	r1, #33	; 0x21
 c028636:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 c028638:	6818      	ldr	r0, [r3, #0]
 c02863a:	1a3a      	subs	r2, r7, r0
 c02863c:	4430      	add	r0, r6
        memset( signature, '!', signature_size );
 c02863e:	f7ec f9c2 	bl	c0149c6 <memset>
}
 c028642:	4628      	mov	r0, r5
 c028644:	b00f      	add	sp, #60	; 0x3c
 c028646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( PSA_ALG_IS_RSA_PSS( alg ) )
 c02864a:	4b42      	ldr	r3, [pc, #264]	; (c028754 <mbedcrypto__psa_asymmetric_sign+0x1cc>)
 c02864c:	429c      	cmp	r4, r3
 c02864e:	d002      	beq.n	c028656 <mbedcrypto__psa_asymmetric_sign+0xce>
        status = PSA_ERROR_INVALID_ARGUMENT;
 c028650:	f06f 0586 	mvn.w	r5, #134	; 0x86
 c028654:	e7c5      	b.n	c0285e2 <mbedcrypto__psa_asymmetric_sign+0x5a>
        mbedtls_rsa_set_padding( rsa, MBEDTLS_RSA_PKCS_V21, md_alg );
 c028656:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 c02865a:	4648      	mov	r0, r9
 c02865c:	2101      	movs	r1, #1
 c02865e:	f001 fb63 	bl	c029d28 <mbedtls_rsa_set_padding>
        ret = mbedtls_rsa_rsassa_pss_sign( rsa,
 c028662:	e9cd a602 	strd	sl, r6, [sp, #8]
 c028666:	e9cd 5800 	strd	r5, r8, [sp]
 c02866a:	2301      	movs	r3, #1
 c02866c:	4a37      	ldr	r2, [pc, #220]	; (c02874c <mbedcrypto__psa_asymmetric_sign+0x1c4>)
 c02866e:	4938      	ldr	r1, [pc, #224]	; (c028750 <mbedcrypto__psa_asymmetric_sign+0x1c8>)
 c028670:	4648      	mov	r0, r9
 c028672:	f002 f8b9 	bl	c02a7e8 <mbedtls_rsa_rsassa_pss_sign>
 c028676:	e7d0      	b.n	c02861a <mbedcrypto__psa_asymmetric_sign+0x92>
    if( PSA_KEY_TYPE_IS_ECC( slot->type ) )
 c028678:	4a37      	ldr	r2, [pc, #220]	; (c028758 <mbedcrypto__psa_asymmetric_sign+0x1d0>)
 c02867a:	400a      	ands	r2, r1
 c02867c:	4937      	ldr	r1, [pc, #220]	; (c02875c <mbedcrypto__psa_asymmetric_sign+0x1d4>)
 c02867e:	428a      	cmp	r2, r1
 c028680:	d15f      	bne.n	c028742 <mbedcrypto__psa_asymmetric_sign+0x1ba>
            PSA_ALG_IS_ECDSA( alg )
 c028682:	f424 3280 	bic.w	r2, r4, #65536	; 0x10000
        if(
 c028686:	4936      	ldr	r1, [pc, #216]	; (c028760 <mbedcrypto__psa_asymmetric_sign+0x1d8>)
            PSA_ALG_IS_ECDSA( alg )
 c028688:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
        if(
 c02868c:	428a      	cmp	r2, r1
 c02868e:	d1df      	bne.n	c028650 <mbedcrypto__psa_asymmetric_sign+0xc8>
            status = psa_ecdsa_sign( slot->data.ecp,
 c028690:	f8d3 901c 	ldr.w	r9, [r3, #28]
    mbedtls_mpi_init( &r );
 c028694:	a808      	add	r0, sp, #32
    size_t curve_bytes = PSA_BITS_TO_BYTES( ecp->grp.pbits );
 c028696:	f8d9 5058 	ldr.w	r5, [r9, #88]	; 0x58
    mbedtls_mpi_init( &r );
 c02869a:	f7f5 f9d9 	bl	c01da50 <mbedtls_mpi_init>
    size_t curve_bytes = PSA_BITS_TO_BYTES( ecp->grp.pbits );
 c02869e:	3507      	adds	r5, #7
 c0286a0:	08ed      	lsrs	r5, r5, #3
    mbedtls_mpi_init( &s );
 c0286a2:	a80b      	add	r0, sp, #44	; 0x2c
    if( signature_size < 2 * curve_bytes )
 c0286a4:	ea4f 0b45 	mov.w	fp, r5, lsl #1
    mbedtls_mpi_init( &s );
 c0286a8:	f7f5 f9d2 	bl	c01da50 <mbedtls_mpi_init>
    if( signature_size < 2 * curve_bytes )
 c0286ac:	455f      	cmp	r7, fp
 c0286ae:	d346      	bcc.n	c02873e <mbedcrypto__psa_asymmetric_sign+0x1b6>
    if( PSA_ALG_DSA_IS_DETERMINISTIC( alg ) )
 c0286b0:	03e2      	lsls	r2, r4, #15
 c0286b2:	f109 037c 	add.w	r3, r9, #124	; 0x7c
 c0286b6:	d535      	bpl.n	c028724 <mbedcrypto__psa_asymmetric_sign+0x19c>
        psa_algorithm_t hash_alg = PSA_ALG_SIGN_GET_HASH( alg );
 c0286b8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 c0286bc:	bf18      	it	ne
 c0286be:	f044 7480 	orrne.w	r4, r4, #16777216	; 0x1000000
 c0286c2:	f104 447f 	add.w	r4, r4, #4278190080	; 0xff000000
 c0286c6:	3c08      	subs	r4, #8
 c0286c8:	2c03      	cmp	r4, #3
 c0286ca:	bf96      	itet	ls
 c0286cc:	4a25      	ldrls	r2, [pc, #148]	; (c028764 <mbedcrypto__psa_asymmetric_sign+0x1dc>)
{
 c0286ce:	2000      	movhi	r0, #0
 c0286d0:	f852 0024 	ldrls.w	r0, [r2, r4, lsl #2]
 c0286d4:	9305      	str	r3, [sp, #20]
        mbedtls_md_type_t md_alg = mbedtls_md_get_type( md_info );
 c0286d6:	f7fb ff70 	bl	c0245ba <mbedtls_md_get_type>
        MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign_det( &ecp->grp, &r, &s, &ecp->d,
 c0286da:	f8cd a000 	str.w	sl, [sp]
 c0286de:	e9cd 8001 	strd	r8, r0, [sp, #4]
 c0286e2:	9b05      	ldr	r3, [sp, #20]
 c0286e4:	aa0b      	add	r2, sp, #44	; 0x2c
 c0286e6:	a908      	add	r1, sp, #32
 c0286e8:	4648      	mov	r0, r9
 c0286ea:	f7f8 fbd5 	bl	c020e98 <mbedtls_ecdsa_sign_det>
 c0286ee:	4604      	mov	r4, r0
 c0286f0:	b960      	cbnz	r0, c02870c <mbedcrypto__psa_asymmetric_sign+0x184>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &r,
 c0286f2:	462a      	mov	r2, r5
 c0286f4:	4631      	mov	r1, r6
 c0286f6:	a808      	add	r0, sp, #32
 c0286f8:	f7f5 fc0f 	bl	c01df1a <mbedtls_mpi_write_binary>
 c0286fc:	4604      	mov	r4, r0
 c0286fe:	b928      	cbnz	r0, c02870c <mbedcrypto__psa_asymmetric_sign+0x184>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &s,
 c028700:	462a      	mov	r2, r5
 c028702:	1971      	adds	r1, r6, r5
 c028704:	a80b      	add	r0, sp, #44	; 0x2c
 c028706:	f7f5 fc08 	bl	c01df1a <mbedtls_mpi_write_binary>
 c02870a:	4604      	mov	r4, r0
    mbedtls_mpi_free( &r );
 c02870c:	a808      	add	r0, sp, #32
 c02870e:	f7f5 f9a5 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 c028712:	a80b      	add	r0, sp, #44	; 0x2c
 c028714:	f7f5 f9a2 	bl	c01da5c <mbedtls_mpi_free>
    if( ret == 0 )
 c028718:	2c00      	cmp	r4, #0
 c02871a:	d185      	bne.n	c028628 <mbedcrypto__psa_asymmetric_sign+0xa0>
        *signature_length = 2 * curve_bytes;
 c02871c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 c02871e:	f8c3 b000 	str.w	fp, [r3]
 c028722:	e781      	b.n	c028628 <mbedcrypto__psa_asymmetric_sign+0xa0>
        MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign( &ecp->grp, &r, &s, &ecp->d,
 c028724:	4a09      	ldr	r2, [pc, #36]	; (c02874c <mbedcrypto__psa_asymmetric_sign+0x1c4>)
 c028726:	f8cd a000 	str.w	sl, [sp]
 c02872a:	9203      	str	r2, [sp, #12]
 c02872c:	4a08      	ldr	r2, [pc, #32]	; (c028750 <mbedcrypto__psa_asymmetric_sign+0x1c8>)
 c02872e:	a908      	add	r1, sp, #32
 c028730:	e9cd 8201 	strd	r8, r2, [sp, #4]
 c028734:	4648      	mov	r0, r9
 c028736:	aa0b      	add	r2, sp, #44	; 0x2c
 c028738:	f7f8 fbac 	bl	c020e94 <mbedtls_ecdsa_sign>
 c02873c:	e7d7      	b.n	c0286ee <mbedcrypto__psa_asymmetric_sign+0x166>
        ret = MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL;
 c02873e:	4c0a      	ldr	r4, [pc, #40]	; (c028768 <mbedcrypto__psa_asymmetric_sign+0x1e0>)
 c028740:	e7e4      	b.n	c02870c <mbedcrypto__psa_asymmetric_sign+0x184>
        status = PSA_ERROR_NOT_SUPPORTED;
 c028742:	f06f 0585 	mvn.w	r5, #133	; 0x85
 c028746:	e74c      	b.n	c0285e2 <mbedcrypto__psa_asymmetric_sign+0x5a>
 c028748:	10020000 	.word	0x10020000
 c02874c:	300382d0 	.word	0x300382d0
 c028750:	0c0208e5 	.word	0x0c0208e5
 c028754:	10030000 	.word	0x10030000
 c028758:	efff0000 	.word	0xefff0000
 c02875c:	60030000 	.word	0x60030000
 c028760:	10060000 	.word	0x10060000
 c028764:	0c034f30 	.word	0x0c034f30
 c028768:	ffffb100 	.word	0xffffb100

0c02876c <mbedcrypto__psa_asymmetric_verify>:
{
 c02876c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c028770:	b08d      	sub	sp, #52	; 0x34
 c028772:	460d      	mov	r5, r1
 c028774:	e9dd 7916 	ldrd	r7, r9, [sp, #88]	; 0x58
 c028778:	4690      	mov	r8, r2
 c02877a:	461e      	mov	r6, r3
    status = psa_get_key_from_slot( handle, &slot, PSA_KEY_USAGE_VERIFY, alg );
 c02877c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 c028780:	460b      	mov	r3, r1
 c028782:	a905      	add	r1, sp, #20
 c028784:	f7fe fb30 	bl	c026de8 <psa_get_key_from_slot>
    if( status != PSA_SUCCESS )
 c028788:	4604      	mov	r4, r0
 c02878a:	2800      	cmp	r0, #0
 c02878c:	d149      	bne.n	c028822 <mbedcrypto__psa_asymmetric_verify+0xb6>
    if( PSA_KEY_TYPE_IS_RSA( slot->type ) )
 c02878e:	9b05      	ldr	r3, [sp, #20]
 c028790:	4a49      	ldr	r2, [pc, #292]	; (c0288b8 <mbedcrypto__psa_asymmetric_verify+0x14c>)
 c028792:	6819      	ldr	r1, [r3, #0]
 c028794:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 c028798:	4290      	cmp	r0, r2
 c02879a:	d146      	bne.n	c02882a <mbedcrypto__psa_asymmetric_verify+0xbe>
    status = psa_rsa_decode_md_type( alg, hash_length, &md_alg );
 c02879c:	aa09      	add	r2, sp, #36	; 0x24
 c02879e:	4631      	mov	r1, r6
 c0287a0:	4628      	mov	r0, r5
        return( psa_rsa_verify( slot->data.rsa,
 c0287a2:	f8d3 a01c 	ldr.w	sl, [r3, #28]
    status = psa_rsa_decode_md_type( alg, hash_length, &md_alg );
 c0287a6:	f7fe fd0d 	bl	c0271c4 <psa_rsa_decode_md_type>
    if( status != PSA_SUCCESS )
 c0287aa:	4604      	mov	r4, r0
 c0287ac:	2800      	cmp	r0, #0
 c0287ae:	d138      	bne.n	c028822 <mbedcrypto__psa_asymmetric_verify+0xb6>
    if( signature_length < mbedtls_rsa_get_len( rsa ) )
 c0287b0:	4650      	mov	r0, sl
 c0287b2:	f001 fabc 	bl	c029d2e <mbedtls_rsa_get_len>
 c0287b6:	4581      	cmp	r9, r0
 c0287b8:	d331      	bcc.n	c02881e <mbedcrypto__psa_asymmetric_verify+0xb2>
    if( PSA_ALG_IS_RSA_PKCS1V15_SIGN( alg ) )
 c0287ba:	4b40      	ldr	r3, [pc, #256]	; (c0288bc <mbedcrypto__psa_asymmetric_verify+0x150>)
 c0287bc:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 c0287c0:	429d      	cmp	r5, r3
 c0287c2:	d118      	bne.n	c0287f6 <mbedcrypto__psa_asymmetric_verify+0x8a>
        mbedtls_rsa_set_padding( rsa, MBEDTLS_RSA_PKCS_V15,
 c0287c4:	4622      	mov	r2, r4
 c0287c6:	4621      	mov	r1, r4
 c0287c8:	4650      	mov	r0, sl
 c0287ca:	f001 faad 	bl	c029d28 <mbedtls_rsa_set_padding>
        ret = mbedtls_rsa_pkcs1_verify( rsa,
 c0287ce:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 c0287d2:	e9cd 8702 	strd	r8, r7, [sp, #8]
 c0287d6:	9300      	str	r3, [sp, #0]
 c0287d8:	9601      	str	r6, [sp, #4]
 c0287da:	4623      	mov	r3, r4
 c0287dc:	4a38      	ldr	r2, [pc, #224]	; (c0288c0 <mbedcrypto__psa_asymmetric_verify+0x154>)
 c0287de:	4939      	ldr	r1, [pc, #228]	; (c0288c4 <mbedcrypto__psa_asymmetric_verify+0x158>)
 c0287e0:	4650      	mov	r0, sl
 c0287e2:	f002 faa1 	bl	c02ad28 <mbedtls_rsa_pkcs1_verify>
    if( ret == MBEDTLS_ERR_RSA_INVALID_PADDING )
 c0287e6:	f510 4f82 	cmn.w	r0, #16640	; 0x4100
 c0287ea:	d05b      	beq.n	c0288a4 <mbedcrypto__psa_asymmetric_verify+0x138>
}
 c0287ec:	b00d      	add	sp, #52	; 0x34
 c0287ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_to_psa_error( ret ) );
 c0287f2:	f7fd bfa1 	b.w	c026738 <mbedtls_to_psa_error>
    if( PSA_ALG_IS_RSA_PSS( alg ) )
 c0287f6:	4b34      	ldr	r3, [pc, #208]	; (c0288c8 <mbedcrypto__psa_asymmetric_verify+0x15c>)
 c0287f8:	429d      	cmp	r5, r3
 c0287fa:	d159      	bne.n	c0288b0 <mbedcrypto__psa_asymmetric_verify+0x144>
        mbedtls_rsa_set_padding( rsa, MBEDTLS_RSA_PKCS_V21, md_alg );
 c0287fc:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 c028800:	4650      	mov	r0, sl
 c028802:	2101      	movs	r1, #1
 c028804:	f001 fa90 	bl	c029d28 <mbedtls_rsa_set_padding>
        ret = mbedtls_rsa_rsassa_pss_verify( rsa,
 c028808:	e9cd 8702 	strd	r8, r7, [sp, #8]
 c02880c:	e9cd 4600 	strd	r4, r6, [sp]
 c028810:	4623      	mov	r3, r4
 c028812:	4a2b      	ldr	r2, [pc, #172]	; (c0288c0 <mbedcrypto__psa_asymmetric_verify+0x154>)
 c028814:	492b      	ldr	r1, [pc, #172]	; (c0288c4 <mbedcrypto__psa_asymmetric_verify+0x158>)
 c028816:	4650      	mov	r0, sl
 c028818:	f002 fa08 	bl	c02ac2c <mbedtls_rsa_rsassa_pss_verify>
 c02881c:	e7e3      	b.n	c0287e6 <mbedcrypto__psa_asymmetric_verify+0x7a>
        return( PSA_ERROR_BUFFER_TOO_SMALL );
 c02881e:	f06f 0489 	mvn.w	r4, #137	; 0x89
}
 c028822:	4620      	mov	r0, r4
 c028824:	b00d      	add	sp, #52	; 0x34
 c028826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( PSA_KEY_TYPE_IS_ECC( slot->type ) )
 c02882a:	4a28      	ldr	r2, [pc, #160]	; (c0288cc <mbedcrypto__psa_asymmetric_verify+0x160>)
 c02882c:	400a      	ands	r2, r1
 c02882e:	4928      	ldr	r1, [pc, #160]	; (c0288d0 <mbedcrypto__psa_asymmetric_verify+0x164>)
 c028830:	428a      	cmp	r2, r1
 c028832:	d13a      	bne.n	c0288aa <mbedcrypto__psa_asymmetric_verify+0x13e>
        if( PSA_ALG_IS_ECDSA( alg ) )
 c028834:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
 c028838:	4a26      	ldr	r2, [pc, #152]	; (c0288d4 <mbedcrypto__psa_asymmetric_verify+0x168>)
 c02883a:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 c02883e:	4295      	cmp	r5, r2
 c028840:	d136      	bne.n	c0288b0 <mbedcrypto__psa_asymmetric_verify+0x144>
            return( psa_ecdsa_verify( slot->data.ecp,
 c028842:	69dd      	ldr	r5, [r3, #28]
    mbedtls_mpi_init( &r );
 c028844:	f10d 0b18 	add.w	fp, sp, #24
    size_t curve_bytes = PSA_BITS_TO_BYTES( ecp->grp.pbits );
 c028848:	6dac      	ldr	r4, [r5, #88]	; 0x58
    mbedtls_mpi_init( &r );
 c02884a:	4658      	mov	r0, fp
    size_t curve_bytes = PSA_BITS_TO_BYTES( ecp->grp.pbits );
 c02884c:	3407      	adds	r4, #7
    mbedtls_mpi_init( &s );
 c02884e:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
    mbedtls_mpi_init( &r );
 c028852:	f7f5 f8fd 	bl	c01da50 <mbedtls_mpi_init>
    size_t curve_bytes = PSA_BITS_TO_BYTES( ecp->grp.pbits );
 c028856:	08e4      	lsrs	r4, r4, #3
    mbedtls_mpi_init( &s );
 c028858:	4650      	mov	r0, sl
 c02885a:	f7f5 f8f9 	bl	c01da50 <mbedtls_mpi_init>
    if( signature_length != 2 * curve_bytes )
 c02885e:	ebb9 0f44 	cmp.w	r9, r4, lsl #1
 c028862:	d11f      	bne.n	c0288a4 <mbedcrypto__psa_asymmetric_verify+0x138>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &r,
 c028864:	4622      	mov	r2, r4
 c028866:	4639      	mov	r1, r7
 c028868:	4658      	mov	r0, fp
 c02886a:	f7f5 fae9 	bl	c01de40 <mbedtls_mpi_read_binary>
 c02886e:	4681      	mov	r9, r0
 c028870:	b980      	cbnz	r0, c028894 <mbedcrypto__psa_asymmetric_verify+0x128>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &s,
 c028872:	4622      	mov	r2, r4
 c028874:	1939      	adds	r1, r7, r4
 c028876:	4650      	mov	r0, sl
 c028878:	f7f5 fae2 	bl	c01de40 <mbedtls_mpi_read_binary>
 c02887c:	4681      	mov	r9, r0
 c02887e:	b948      	cbnz	r0, c028894 <mbedcrypto__psa_asymmetric_verify+0x128>
    ret = mbedtls_ecdsa_verify( &ecp->grp, hash, hash_length,
 c028880:	e9cd ba00 	strd	fp, sl, [sp]
 c028884:	f105 0388 	add.w	r3, r5, #136	; 0x88
 c028888:	4632      	mov	r2, r6
 c02888a:	4641      	mov	r1, r8
 c02888c:	4628      	mov	r0, r5
 c02888e:	f7f8 fb0b 	bl	c020ea8 <mbedtls_ecdsa_verify>
 c028892:	4681      	mov	r9, r0
    mbedtls_mpi_free( &r );
 c028894:	4658      	mov	r0, fp
 c028896:	f7f5 f8e1 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 c02889a:	4650      	mov	r0, sl
 c02889c:	f7f5 f8de 	bl	c01da5c <mbedtls_mpi_free>
    return( mbedtls_to_psa_error( ret ) );
 c0288a0:	4648      	mov	r0, r9
 c0288a2:	e7a3      	b.n	c0287ec <mbedcrypto__psa_asymmetric_verify+0x80>
        return( PSA_ERROR_INVALID_SIGNATURE );
 c0288a4:	f06f 0494 	mvn.w	r4, #148	; 0x94
            return( psa_ecdsa_verify( slot->data.ecp,
 c0288a8:	e7bb      	b.n	c028822 <mbedcrypto__psa_asymmetric_verify+0xb6>
        return( PSA_ERROR_NOT_SUPPORTED );
 c0288aa:	f06f 0485 	mvn.w	r4, #133	; 0x85
 c0288ae:	e7b8      	b.n	c028822 <mbedcrypto__psa_asymmetric_verify+0xb6>
            return( PSA_ERROR_INVALID_ARGUMENT );
 c0288b0:	f06f 0486 	mvn.w	r4, #134	; 0x86
 c0288b4:	e7b5      	b.n	c028822 <mbedcrypto__psa_asymmetric_verify+0xb6>
 c0288b6:	bf00      	nop
 c0288b8:	60010000 	.word	0x60010000
 c0288bc:	10020000 	.word	0x10020000
 c0288c0:	300382d0 	.word	0x300382d0
 c0288c4:	0c0208e5 	.word	0x0c0208e5
 c0288c8:	10030000 	.word	0x10030000
 c0288cc:	efff0000 	.word	0xefff0000
 c0288d0:	60030000 	.word	0x60030000
 c0288d4:	10060000 	.word	0x10060000

0c0288d8 <mbedcrypto__psa_asymmetric_encrypt>:
{
 c0288d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0288dc:	b08d      	sub	sp, #52	; 0x34
 c0288de:	4698      	mov	r8, r3
 c0288e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 c0288e2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 c0288e4:	9308      	str	r3, [sp, #32]
 c0288e6:	e9dd 7317 	ldrd	r7, r3, [sp, #92]	; 0x5c
 c0288ea:	9307      	str	r3, [sp, #28]
 c0288ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
    if( ! PSA_ALG_IS_RSA_OAEP( alg ) && salt_length != 0 )
 c0288ee:	f021 0bff 	bic.w	fp, r1, #255	; 0xff
{
 c0288f2:	9309      	str	r3, [sp, #36]	; 0x24
    *output_length = 0;
 c0288f4:	2300      	movs	r3, #0
 c0288f6:	6033      	str	r3, [r6, #0]
    if( ! PSA_ALG_IS_RSA_OAEP( alg ) && salt_length != 0 )
 c0288f8:	4b2d      	ldr	r3, [pc, #180]	; (c0289b0 <mbedcrypto__psa_asymmetric_encrypt+0xd8>)
{
 c0288fa:	460d      	mov	r5, r1
    if( ! PSA_ALG_IS_RSA_OAEP( alg ) && salt_length != 0 )
 c0288fc:	459b      	cmp	fp, r3
{
 c0288fe:	4691      	mov	r9, r2
    if( ! PSA_ALG_IS_RSA_OAEP( alg ) && salt_length != 0 )
 c028900:	d006      	beq.n	c028910 <mbedcrypto__psa_asymmetric_encrypt+0x38>
 c028902:	b12f      	cbz	r7, c028910 <mbedcrypto__psa_asymmetric_encrypt+0x38>
        return( PSA_ERROR_INVALID_ARGUMENT );
 c028904:	f06f 0a86 	mvn.w	sl, #134	; 0x86
}
 c028908:	4650      	mov	r0, sl
 c02890a:	b00d      	add	sp, #52	; 0x34
 c02890c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    status = psa_get_key_from_slot( handle, &slot, PSA_KEY_USAGE_ENCRYPT, alg );
 c028910:	462b      	mov	r3, r5
 c028912:	f44f 7280 	mov.w	r2, #256	; 0x100
 c028916:	a90b      	add	r1, sp, #44	; 0x2c
 c028918:	f7fe fa66 	bl	c026de8 <psa_get_key_from_slot>
    if( status != PSA_SUCCESS )
 c02891c:	4682      	mov	sl, r0
 c02891e:	2800      	cmp	r0, #0
 c028920:	d1f2      	bne.n	c028908 <mbedcrypto__psa_asymmetric_encrypt+0x30>
    if( ! ( PSA_KEY_TYPE_IS_PUBLIC_KEY( slot->type ) ||
 c028922:	990b      	ldr	r1, [sp, #44]	; 0x2c
 c028924:	680a      	ldr	r2, [r1, #0]
 c028926:	f002 40c0 	and.w	r0, r2, #1610612736	; 0x60000000
 c02892a:	f1b0 4fc0 	cmp.w	r0, #1610612736	; 0x60000000
 c02892e:	d1e9      	bne.n	c028904 <mbedcrypto__psa_asymmetric_encrypt+0x2c>
    if( PSA_KEY_TYPE_IS_RSA( slot->type ) )
 c028930:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 c028934:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 c028938:	4282      	cmp	r2, r0
 c02893a:	d135      	bne.n	c0289a8 <mbedcrypto__psa_asymmetric_encrypt+0xd0>
        mbedtls_rsa_context *rsa = slot->data.rsa;
 c02893c:	69cc      	ldr	r4, [r1, #28]
        if( output_size < mbedtls_rsa_get_len( rsa ) )
 c02893e:	4620      	mov	r0, r4
 c028940:	f001 f9f5 	bl	c029d2e <mbedtls_rsa_get_len>
 c028944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c028946:	4298      	cmp	r0, r3
 c028948:	d8dc      	bhi.n	c028904 <mbedcrypto__psa_asymmetric_encrypt+0x2c>
        if( alg == PSA_ALG_RSA_PKCS1V15_CRYPT )
 c02894a:	4a1a      	ldr	r2, [pc, #104]	; (c0289b4 <mbedcrypto__psa_asymmetric_encrypt+0xdc>)
 c02894c:	4295      	cmp	r5, r2
 c02894e:	d116      	bne.n	c02897e <mbedcrypto__psa_asymmetric_encrypt+0xa6>
            ret = mbedtls_rsa_pkcs1_encrypt( rsa,
 c028950:	9b07      	ldr	r3, [sp, #28]
 c028952:	f8cd 8000 	str.w	r8, [sp]
 c028956:	e9cd 9301 	strd	r9, r3, [sp, #4]
 c02895a:	4a17      	ldr	r2, [pc, #92]	; (c0289b8 <mbedcrypto__psa_asymmetric_encrypt+0xe0>)
 c02895c:	4653      	mov	r3, sl
 c02895e:	4917      	ldr	r1, [pc, #92]	; (c0289bc <mbedcrypto__psa_asymmetric_encrypt+0xe4>)
 c028960:	4620      	mov	r0, r4
 c028962:	f001 fd57 	bl	c02a414 <mbedtls_rsa_pkcs1_encrypt>
            ret = mbedtls_rsa_rsaes_oaep_encrypt( rsa,
 c028966:	4605      	mov	r5, r0
        if( ret == 0 )
 c028968:	b918      	cbnz	r0, c028972 <mbedcrypto__psa_asymmetric_encrypt+0x9a>
            *output_length = mbedtls_rsa_get_len( rsa );
 c02896a:	4620      	mov	r0, r4
 c02896c:	f001 f9df 	bl	c029d2e <mbedtls_rsa_get_len>
 c028970:	6030      	str	r0, [r6, #0]
        return( mbedtls_to_psa_error( ret ) );
 c028972:	4628      	mov	r0, r5
}
 c028974:	b00d      	add	sp, #52	; 0x34
 c028976:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return( mbedtls_to_psa_error( ret ) );
 c02897a:	f7fd bedd 	b.w	c026738 <mbedtls_to_psa_error>
        if( PSA_ALG_IS_RSA_OAEP( alg ) )
 c02897e:	4a0c      	ldr	r2, [pc, #48]	; (c0289b0 <mbedcrypto__psa_asymmetric_encrypt+0xd8>)
 c028980:	4593      	cmp	fp, r2
 c028982:	d1bf      	bne.n	c028904 <mbedcrypto__psa_asymmetric_encrypt+0x2c>
            psa_rsa_oaep_set_padding_mode( alg, rsa );
 c028984:	4621      	mov	r1, r4
 c028986:	4628      	mov	r0, r5
 c028988:	f7fe fbfa 	bl	c027180 <psa_rsa_oaep_set_padding_mode>
            ret = mbedtls_rsa_rsaes_oaep_encrypt( rsa,
 c02898c:	9b07      	ldr	r3, [sp, #28]
 c02898e:	e9cd 7801 	strd	r7, r8, [sp, #4]
 c028992:	e9cd 9303 	strd	r9, r3, [sp, #12]
 c028996:	9b08      	ldr	r3, [sp, #32]
 c028998:	4a07      	ldr	r2, [pc, #28]	; (c0289b8 <mbedcrypto__psa_asymmetric_encrypt+0xe0>)
 c02899a:	9300      	str	r3, [sp, #0]
 c02899c:	4907      	ldr	r1, [pc, #28]	; (c0289bc <mbedcrypto__psa_asymmetric_encrypt+0xe4>)
 c02899e:	4653      	mov	r3, sl
 c0289a0:	4620      	mov	r0, r4
 c0289a2:	f001 fc37 	bl	c02a214 <mbedtls_rsa_rsaes_oaep_encrypt>
 c0289a6:	e7de      	b.n	c028966 <mbedcrypto__psa_asymmetric_encrypt+0x8e>
        return( PSA_ERROR_NOT_SUPPORTED );
 c0289a8:	f06f 0a85 	mvn.w	sl, #133	; 0x85
 c0289ac:	e7ac      	b.n	c028908 <mbedcrypto__psa_asymmetric_encrypt+0x30>
 c0289ae:	bf00      	nop
 c0289b0:	12030000 	.word	0x12030000
 c0289b4:	12020000 	.word	0x12020000
 c0289b8:	300382d0 	.word	0x300382d0
 c0289bc:	0c0208e5 	.word	0x0c0208e5

0c0289c0 <mbedcrypto__psa_asymmetric_decrypt>:
{
 c0289c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0289c4:	b08b      	sub	sp, #44	; 0x2c
 c0289c6:	9306      	str	r3, [sp, #24]
 c0289c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 c0289ca:	e9dd a617 	ldrd	sl, r6, [sp, #92]	; 0x5c
 c0289ce:	9307      	str	r3, [sp, #28]
    *output_length = 0;
 c0289d0:	2300      	movs	r3, #0
{
 c0289d2:	e9dd 7915 	ldrd	r7, r9, [sp, #84]	; 0x54
    *output_length = 0;
 c0289d6:	6033      	str	r3, [r6, #0]
    if( ! PSA_ALG_IS_RSA_OAEP( alg ) && salt_length != 0 )
 c0289d8:	4b28      	ldr	r3, [pc, #160]	; (c028a7c <mbedcrypto__psa_asymmetric_decrypt+0xbc>)
 c0289da:	f021 0bff 	bic.w	fp, r1, #255	; 0xff
 c0289de:	459b      	cmp	fp, r3
{
 c0289e0:	460d      	mov	r5, r1
 c0289e2:	4690      	mov	r8, r2
    if( ! PSA_ALG_IS_RSA_OAEP( alg ) && salt_length != 0 )
 c0289e4:	d005      	beq.n	c0289f2 <mbedcrypto__psa_asymmetric_decrypt+0x32>
 c0289e6:	b127      	cbz	r7, c0289f2 <mbedcrypto__psa_asymmetric_decrypt+0x32>
        return( PSA_ERROR_INVALID_ARGUMENT );
 c0289e8:	f06f 0086 	mvn.w	r0, #134	; 0x86
}
 c0289ec:	b00b      	add	sp, #44	; 0x2c
 c0289ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    status = psa_get_key_from_slot( handle, &slot, PSA_KEY_USAGE_DECRYPT, alg );
 c0289f2:	462b      	mov	r3, r5
 c0289f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 c0289f8:	a909      	add	r1, sp, #36	; 0x24
 c0289fa:	f7fe f9f5 	bl	c026de8 <psa_get_key_from_slot>
    if( status != PSA_SUCCESS )
 c0289fe:	2800      	cmp	r0, #0
 c028a00:	d1f4      	bne.n	c0289ec <mbedcrypto__psa_asymmetric_decrypt+0x2c>
    if( ! PSA_KEY_TYPE_IS_KEYPAIR( slot->type ) )
 c028a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c028a04:	681a      	ldr	r2, [r3, #0]
 c028a06:	f002 41e0 	and.w	r1, r2, #1879048192	; 0x70000000
 c028a0a:	f1b1 4fe0 	cmp.w	r1, #1879048192	; 0x70000000
 c028a0e:	d1eb      	bne.n	c0289e8 <mbedcrypto__psa_asymmetric_decrypt+0x28>
    if( slot->type == PSA_KEY_TYPE_RSA_KEYPAIR )
 c028a10:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 c028a14:	428a      	cmp	r2, r1
 c028a16:	d12d      	bne.n	c028a74 <mbedcrypto__psa_asymmetric_decrypt+0xb4>
        mbedtls_rsa_context *rsa = slot->data.rsa;
 c028a18:	69dc      	ldr	r4, [r3, #28]
        if( input_length != mbedtls_rsa_get_len( rsa ) )
 c028a1a:	4620      	mov	r0, r4
 c028a1c:	f001 f987 	bl	c029d2e <mbedtls_rsa_get_len>
 c028a20:	9b06      	ldr	r3, [sp, #24]
 c028a22:	4298      	cmp	r0, r3
 c028a24:	d1e0      	bne.n	c0289e8 <mbedcrypto__psa_asymmetric_decrypt+0x28>
        if( alg == PSA_ALG_RSA_PKCS1V15_CRYPT )
 c028a26:	4b16      	ldr	r3, [pc, #88]	; (c028a80 <mbedcrypto__psa_asymmetric_decrypt+0xc0>)
 c028a28:	429d      	cmp	r5, r3
 c028a2a:	d10e      	bne.n	c028a4a <mbedcrypto__psa_asymmetric_decrypt+0x8a>
            ret = mbedtls_rsa_pkcs1_decrypt( rsa,
 c028a2c:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 c028a30:	e9cd 6800 	strd	r6, r8, [sp]
 c028a34:	2301      	movs	r3, #1
 c028a36:	4a13      	ldr	r2, [pc, #76]	; (c028a84 <mbedcrypto__psa_asymmetric_decrypt+0xc4>)
 c028a38:	4913      	ldr	r1, [pc, #76]	; (c028a88 <mbedcrypto__psa_asymmetric_decrypt+0xc8>)
 c028a3a:	4620      	mov	r0, r4
 c028a3c:	f001 feb4 	bl	c02a7a8 <mbedtls_rsa_pkcs1_decrypt>
}
 c028a40:	b00b      	add	sp, #44	; 0x2c
 c028a42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return( mbedtls_to_psa_error( ret ) );
 c028a46:	f7fd be77 	b.w	c026738 <mbedtls_to_psa_error>
        if( PSA_ALG_IS_RSA_OAEP( alg ) )
 c028a4a:	4b0c      	ldr	r3, [pc, #48]	; (c028a7c <mbedcrypto__psa_asymmetric_decrypt+0xbc>)
 c028a4c:	459b      	cmp	fp, r3
 c028a4e:	d1cb      	bne.n	c0289e8 <mbedcrypto__psa_asymmetric_decrypt+0x28>
            psa_rsa_oaep_set_padding_mode( alg, rsa );
 c028a50:	4621      	mov	r1, r4
 c028a52:	4628      	mov	r0, r5
 c028a54:	f7fe fb94 	bl	c027180 <psa_rsa_oaep_set_padding_mode>
            ret = mbedtls_rsa_rsaes_oaep_decrypt( rsa,
 c028a58:	9b07      	ldr	r3, [sp, #28]
 c028a5a:	e9cd 9a04 	strd	r9, sl, [sp, #16]
 c028a5e:	9300      	str	r3, [sp, #0]
 c028a60:	e9cd 6802 	strd	r6, r8, [sp, #8]
 c028a64:	9701      	str	r7, [sp, #4]
 c028a66:	2301      	movs	r3, #1
 c028a68:	4a06      	ldr	r2, [pc, #24]	; (c028a84 <mbedcrypto__psa_asymmetric_decrypt+0xc4>)
 c028a6a:	4907      	ldr	r1, [pc, #28]	; (c028a88 <mbedcrypto__psa_asymmetric_decrypt+0xc8>)
 c028a6c:	4620      	mov	r0, r4
 c028a6e:	f001 fcef 	bl	c02a450 <mbedtls_rsa_rsaes_oaep_decrypt>
 c028a72:	e7e5      	b.n	c028a40 <mbedcrypto__psa_asymmetric_decrypt+0x80>
        return( PSA_ERROR_NOT_SUPPORTED );
 c028a74:	f06f 0085 	mvn.w	r0, #133	; 0x85
 c028a78:	e7b8      	b.n	c0289ec <mbedcrypto__psa_asymmetric_decrypt+0x2c>
 c028a7a:	bf00      	nop
 c028a7c:	12030000 	.word	0x12030000
 c028a80:	12020000 	.word	0x12020000
 c028a84:	300382d0 	.word	0x300382d0
 c028a88:	0c0208e5 	.word	0x0c0208e5

0c028a8c <mbedcrypto__psa_cipher_abort>:
{
 c028a8c:	b510      	push	{r4, lr}
 c028a8e:	4604      	mov	r4, r0
    if( operation->alg == 0 )
 c028a90:	6800      	ldr	r0, [r0, #0]
 c028a92:	b190      	cbz	r0, c028aba <mbedcrypto__psa_cipher_abort+0x2e>
    if( ! PSA_ALG_IS_CIPHER( operation->alg ) )
 c028a94:	f000 40fe 	and.w	r0, r0, #2130706432	; 0x7f000000
 c028a98:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 c028a9c:	d10e      	bne.n	c028abc <mbedcrypto__psa_cipher_abort+0x30>
    mbedtls_cipher_free( &operation->ctx.cipher );
 c028a9e:	f104 0008 	add.w	r0, r4, #8
 c028aa2:	f7f7 f95b 	bl	c01fd5c <mbedtls_cipher_free>
    operation->alg = 0;
 c028aa6:	2000      	movs	r0, #0
    operation->key_set = 0;
 c028aa8:	7923      	ldrb	r3, [r4, #4]
    operation->alg = 0;
 c028aaa:	6020      	str	r0, [r4, #0]
    operation->iv_required = 0;
 c028aac:	f003 03fa 	and.w	r3, r3, #250	; 0xfa
 c028ab0:	f360 0341 	bfi	r3, r0, #1, #1
    operation->iv_size = 0;
 c028ab4:	7160      	strb	r0, [r4, #5]
    operation->block_size = 0;
 c028ab6:	71a0      	strb	r0, [r4, #6]
    operation->iv_required = 0;
 c028ab8:	7123      	strb	r3, [r4, #4]
}
 c028aba:	bd10      	pop	{r4, pc}
        return( PSA_ERROR_BAD_STATE );
 c028abc:	f06f 0088 	mvn.w	r0, #136	; 0x88
 c028ac0:	e7fb      	b.n	c028aba <mbedcrypto__psa_cipher_abort+0x2e>
	...

0c028ac4 <psa_cipher_setup>:
{
 c028ac4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 c028ac8:	460e      	mov	r6, r1
    if( operation->alg != 0 )
 c028aca:	6801      	ldr	r1, [r0, #0]
                              PSA_KEY_USAGE_ENCRYPT :
 c028acc:	2b01      	cmp	r3, #1
{
 c028ace:	4604      	mov	r4, r0
 c028ad0:	4615      	mov	r5, r2
 c028ad2:	461f      	mov	r7, r3
                              PSA_KEY_USAGE_ENCRYPT :
 c028ad4:	bf0c      	ite	eq
 c028ad6:	f44f 7880 	moveq.w	r8, #256	; 0x100
 c028ada:	f44f 7800 	movne.w	r8, #512	; 0x200
    if( operation->alg != 0 )
 c028ade:	2900      	cmp	r1, #0
 c028ae0:	f040 8099 	bne.w	c028c16 <psa_cipher_setup+0x152>
    if( ! PSA_ALG_IS_CIPHER( alg ) )
 c028ae4:	f002 43fe 	and.w	r3, r2, #2130706432	; 0x7f000000
 c028ae8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c028aec:	d008      	beq.n	c028b00 <psa_cipher_setup+0x3c>
        memset( operation, 0, sizeof( *operation ) );
 c028aee:	224c      	movs	r2, #76	; 0x4c
 c028af0:	f7eb ff69 	bl	c0149c6 <memset>
        return( PSA_ERROR_INVALID_ARGUMENT );
 c028af4:	f06f 0686 	mvn.w	r6, #134	; 0x86
}
 c028af8:	4630      	mov	r0, r6
 c028afa:	b003      	add	sp, #12
 c028afc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    operation->alg = alg;
 c028b00:	6022      	str	r2, [r4, #0]
    operation->key_set = 0;
 c028b02:	7903      	ldrb	r3, [r0, #4]
    mbedtls_cipher_init( &operation->ctx.cipher );
 c028b04:	f100 0908 	add.w	r9, r0, #8
    operation->key_set = 0;
 c028b08:	f361 0300 	bfi	r3, r1, #0, #1
    operation->iv_set = 0;
 c028b0c:	f361 0382 	bfi	r3, r1, #2, #1
    operation->iv_required = 1;
 c028b10:	b2db      	uxtb	r3, r3
 c028b12:	f043 0302 	orr.w	r3, r3, #2
 c028b16:	7103      	strb	r3, [r0, #4]
    operation->iv_size = 0;
 c028b18:	7141      	strb	r1, [r0, #5]
    operation->block_size = 0;
 c028b1a:	7181      	strb	r1, [r0, #6]
    mbedtls_cipher_init( &operation->ctx.cipher );
 c028b1c:	4648      	mov	r0, r9
 c028b1e:	f7f7 f919 	bl	c01fd54 <mbedtls_cipher_init>
    status = psa_get_key_from_slot( handle, &slot, usage, alg);
 c028b22:	4630      	mov	r0, r6
 c028b24:	462b      	mov	r3, r5
 c028b26:	4642      	mov	r2, r8
 c028b28:	a901      	add	r1, sp, #4
 c028b2a:	f7fe f95d 	bl	c026de8 <psa_get_key_from_slot>
    if( status != PSA_SUCCESS )
 c028b2e:	4606      	mov	r6, r0
 c028b30:	2800      	cmp	r0, #0
 c028b32:	d16c      	bne.n	c028c0e <psa_cipher_setup+0x14a>
    key_bits = psa_get_key_bits( slot );
 c028b34:	9801      	ldr	r0, [sp, #4]
 c028b36:	f7fe f9c1 	bl	c026ebc <psa_get_key_bits>
    cipher_info = mbedtls_cipher_info_from_psa( alg, slot->type, key_bits, NULL );
 c028b3a:	9901      	ldr	r1, [sp, #4]
 c028b3c:	4602      	mov	r2, r0
 c028b3e:	6809      	ldr	r1, [r1, #0]
    key_bits = psa_get_key_bits( slot );
 c028b40:	4680      	mov	r8, r0
    cipher_info = mbedtls_cipher_info_from_psa( alg, slot->type, key_bits, NULL );
 c028b42:	4633      	mov	r3, r6
 c028b44:	4628      	mov	r0, r5
 c028b46:	f7fe f851 	bl	c026bec <mbedtls_cipher_info_from_psa>
    if( cipher_info == NULL )
 c028b4a:	4601      	mov	r1, r0
 c028b4c:	2800      	cmp	r0, #0
 c028b4e:	d05c      	beq.n	c028c0a <psa_cipher_setup+0x146>
    ret = mbedtls_cipher_setup( &operation->ctx.cipher, cipher_info );
 c028b50:	4648      	mov	r0, r9
 c028b52:	f7f7 faf9 	bl	c020148 <mbedtls_cipher_setup>
    if( ret != 0 )
 c028b56:	4606      	mov	r6, r0
 c028b58:	2800      	cmp	r0, #0
 c028b5a:	d139      	bne.n	c028bd0 <psa_cipher_setup+0x10c>
        ret = mbedtls_cipher_setkey( &operation->ctx.cipher,
 c028b5c:	9901      	ldr	r1, [sp, #4]
 c028b5e:	463b      	mov	r3, r7
 c028b60:	4642      	mov	r2, r8
 c028b62:	69c9      	ldr	r1, [r1, #28]
 c028b64:	4648      	mov	r0, r9
 c028b66:	f7f7 f911 	bl	c01fd8c <mbedtls_cipher_setkey>
    if( ret != 0 )
 c028b6a:	4606      	mov	r6, r0
 c028b6c:	bb80      	cbnz	r0, c028bd0 <psa_cipher_setup+0x10c>
    switch( alg )
 c028b6e:	4b2c      	ldr	r3, [pc, #176]	; (c028c20 <psa_cipher_setup+0x15c>)
 c028b70:	429d      	cmp	r5, r3
 c028b72:	d034      	beq.n	c028bde <psa_cipher_setup+0x11a>
 c028b74:	3301      	adds	r3, #1
 c028b76:	429d      	cmp	r5, r3
 c028b78:	d03b      	beq.n	c028bf2 <psa_cipher_setup+0x12e>
    operation->key_set = 1;
 c028b7a:	7923      	ldrb	r3, [r4, #4]
 c028b7c:	f043 0301 	orr.w	r3, r3, #1
 c028b80:	7123      	strb	r3, [r4, #4]
    operation->block_size = ( PSA_ALG_IS_STREAM_CIPHER( alg ) ? 1 :
 c028b82:	f005 43ff 	and.w	r3, r5, #2139095040	; 0x7f800000
 c028b86:	f1b3 6f90 	cmp.w	r3, #75497472	; 0x4800000
 c028b8a:	d034      	beq.n	c028bf6 <psa_cipher_setup+0x132>
                              PSA_BLOCK_CIPHER_BLOCK_SIZE( slot->type ) );
 c028b8c:	9b01      	ldr	r3, [sp, #4]
    operation->block_size = ( PSA_ALG_IS_STREAM_CIPHER( alg ) ? 1 :
 c028b8e:	4a25      	ldr	r2, [pc, #148]	; (c028c24 <psa_cipher_setup+0x160>)
                              PSA_BLOCK_CIPHER_BLOCK_SIZE( slot->type ) );
 c028b90:	681b      	ldr	r3, [r3, #0]
    operation->block_size = ( PSA_ALG_IS_STREAM_CIPHER( alg ) ? 1 :
 c028b92:	4293      	cmp	r3, r2
 c028b94:	d033      	beq.n	c028bfe <psa_cipher_setup+0x13a>
 c028b96:	3201      	adds	r2, #1
 c028b98:	4293      	cmp	r3, r2
 c028b9a:	d02e      	beq.n	c028bfa <psa_cipher_setup+0x136>
 c028b9c:	3201      	adds	r2, #1
 c028b9e:	4293      	cmp	r3, r2
 c028ba0:	d02d      	beq.n	c028bfe <psa_cipher_setup+0x13a>
 c028ba2:	3201      	adds	r2, #1
 c028ba4:	1a98      	subs	r0, r3, r2
 c028ba6:	4243      	negs	r3, r0
 c028ba8:	4143      	adcs	r3, r0
    if( alg & PSA_ALG_CIPHER_FROM_BLOCK_FLAG )
 c028baa:	0269      	lsls	r1, r5, #9
    operation->block_size = ( PSA_ALG_IS_STREAM_CIPHER( alg ) ? 1 :
 c028bac:	71a3      	strb	r3, [r4, #6]
    if( alg & PSA_ALG_CIPHER_FROM_BLOCK_FLAG )
 c028bae:	d50f      	bpl.n	c028bd0 <psa_cipher_setup+0x10c>
        operation->iv_size = PSA_BLOCK_CIPHER_BLOCK_SIZE( slot->type );
 c028bb0:	9b01      	ldr	r3, [sp, #4]
 c028bb2:	4a1c      	ldr	r2, [pc, #112]	; (c028c24 <psa_cipher_setup+0x160>)
 c028bb4:	681b      	ldr	r3, [r3, #0]
 c028bb6:	4293      	cmp	r3, r2
 c028bb8:	d025      	beq.n	c028c06 <psa_cipher_setup+0x142>
 c028bba:	3201      	adds	r2, #1
 c028bbc:	4293      	cmp	r3, r2
 c028bbe:	d020      	beq.n	c028c02 <psa_cipher_setup+0x13e>
 c028bc0:	3201      	adds	r2, #1
 c028bc2:	4293      	cmp	r3, r2
 c028bc4:	d01f      	beq.n	c028c06 <psa_cipher_setup+0x142>
 c028bc6:	3201      	adds	r2, #1
 c028bc8:	1a9a      	subs	r2, r3, r2
 c028bca:	4253      	negs	r3, r2
 c028bcc:	4153      	adcs	r3, r2
 c028bce:	7163      	strb	r3, [r4, #5]
        status = mbedtls_to_psa_error( ret );
 c028bd0:	4630      	mov	r0, r6
 c028bd2:	f7fd fdb1 	bl	c026738 <mbedtls_to_psa_error>
    if( status != 0 )
 c028bd6:	4606      	mov	r6, r0
 c028bd8:	2800      	cmp	r0, #0
 c028bda:	d08d      	beq.n	c028af8 <psa_cipher_setup+0x34>
 c028bdc:	e017      	b.n	c028c0e <psa_cipher_setup+0x14a>
            ret = mbedtls_cipher_set_padding_mode( &operation->ctx.cipher,
 c028bde:	2104      	movs	r1, #4
            ret = mbedtls_cipher_set_padding_mode( &operation->ctx.cipher,
 c028be0:	4648      	mov	r0, r9
 c028be2:	f7f7 fa73 	bl	c0200cc <mbedtls_cipher_set_padding_mode>
    if( ret != 0 )
 c028be6:	b9c8      	cbnz	r0, c028c1c <psa_cipher_setup+0x158>
    operation->key_set = 1;
 c028be8:	7923      	ldrb	r3, [r4, #4]
 c028bea:	f043 0301 	orr.w	r3, r3, #1
 c028bee:	7123      	strb	r3, [r4, #4]
 c028bf0:	e7cc      	b.n	c028b8c <psa_cipher_setup+0xc8>
            ret = mbedtls_cipher_set_padding_mode( &operation->ctx.cipher,
 c028bf2:	4601      	mov	r1, r0
 c028bf4:	e7f4      	b.n	c028be0 <psa_cipher_setup+0x11c>
    operation->block_size = ( PSA_ALG_IS_STREAM_CIPHER( alg ) ? 1 :
 c028bf6:	2301      	movs	r3, #1
 c028bf8:	e7d7      	b.n	c028baa <psa_cipher_setup+0xe6>
 c028bfa:	2308      	movs	r3, #8
 c028bfc:	e7d5      	b.n	c028baa <psa_cipher_setup+0xe6>
 c028bfe:	2310      	movs	r3, #16
 c028c00:	e7d3      	b.n	c028baa <psa_cipher_setup+0xe6>
        operation->iv_size = PSA_BLOCK_CIPHER_BLOCK_SIZE( slot->type );
 c028c02:	2308      	movs	r3, #8
 c028c04:	e7e3      	b.n	c028bce <psa_cipher_setup+0x10a>
 c028c06:	2310      	movs	r3, #16
 c028c08:	e7e1      	b.n	c028bce <psa_cipher_setup+0x10a>
        status = PSA_ERROR_NOT_SUPPORTED;
 c028c0a:	f06f 0685 	mvn.w	r6, #133	; 0x85
        psa_cipher_abort( operation );
 c028c0e:	4620      	mov	r0, r4
 c028c10:	f7ff ff3c 	bl	c028a8c <mbedcrypto__psa_cipher_abort>
 c028c14:	e770      	b.n	c028af8 <psa_cipher_setup+0x34>
        return( PSA_ERROR_BAD_STATE );
 c028c16:	f06f 0688 	mvn.w	r6, #136	; 0x88
 c028c1a:	e76d      	b.n	c028af8 <psa_cipher_setup+0x34>
    if( ret != 0 )
 c028c1c:	4606      	mov	r6, r0
 c028c1e:	e7d7      	b.n	c028bd0 <psa_cipher_setup+0x10c>
 c028c20:	04600100 	.word	0x04600100
 c028c24:	40000001 	.word	0x40000001

0c028c28 <mbedcrypto__psa_cipher_encrypt_setup>:
    return( psa_cipher_setup( operation, handle, alg, MBEDTLS_ENCRYPT ) );
 c028c28:	2301      	movs	r3, #1
 c028c2a:	f7ff bf4b 	b.w	c028ac4 <psa_cipher_setup>

0c028c2e <mbedcrypto__psa_cipher_decrypt_setup>:
    return( psa_cipher_setup( operation, handle, alg, MBEDTLS_DECRYPT ) );
 c028c2e:	2300      	movs	r3, #0
 c028c30:	f7ff bf48 	b.w	c028ac4 <psa_cipher_setup>

0c028c34 <mbedcrypto__psa_cipher_set_iv>:
{
 c028c34:	b538      	push	{r3, r4, r5, lr}
 c028c36:	4604      	mov	r4, r0
    if( operation->iv_set || ! operation->iv_required )
 c028c38:	7923      	ldrb	r3, [r4, #4]
 c028c3a:	f003 0306 	and.w	r3, r3, #6
 c028c3e:	2b02      	cmp	r3, #2
 c028c40:	d116      	bne.n	c028c70 <mbedcrypto__psa_cipher_set_iv+0x3c>
    if( iv_length != operation->iv_size )
 c028c42:	7963      	ldrb	r3, [r4, #5]
 c028c44:	4293      	cmp	r3, r2
 c028c46:	d10d      	bne.n	c028c64 <mbedcrypto__psa_cipher_set_iv+0x30>
    ret = mbedtls_cipher_set_iv( &operation->ctx.cipher, iv, iv_length );
 c028c48:	f104 0008 	add.w	r0, r4, #8
 c028c4c:	f7f7 f8be 	bl	c01fdcc <mbedtls_cipher_set_iv>
    status = mbedtls_to_psa_error( ret );
 c028c50:	f7fd fd72 	bl	c026738 <mbedtls_to_psa_error>
    if( status == PSA_SUCCESS )
 c028c54:	4605      	mov	r5, r0
 c028c56:	b938      	cbnz	r0, c028c68 <mbedcrypto__psa_cipher_set_iv+0x34>
        operation->iv_set = 1;
 c028c58:	7923      	ldrb	r3, [r4, #4]
 c028c5a:	f043 0304 	orr.w	r3, r3, #4
 c028c5e:	7123      	strb	r3, [r4, #4]
}
 c028c60:	4628      	mov	r0, r5
 c028c62:	bd38      	pop	{r3, r4, r5, pc}
        status = PSA_ERROR_INVALID_ARGUMENT;
 c028c64:	f06f 0586 	mvn.w	r5, #134	; 0x86
        psa_cipher_abort( operation );
 c028c68:	4620      	mov	r0, r4
 c028c6a:	f7ff ff0f 	bl	c028a8c <mbedcrypto__psa_cipher_abort>
 c028c6e:	e7f7      	b.n	c028c60 <mbedcrypto__psa_cipher_set_iv+0x2c>
        return( PSA_ERROR_BAD_STATE );
 c028c70:	f06f 0588 	mvn.w	r5, #136	; 0x88
 c028c74:	e7f4      	b.n	c028c60 <mbedcrypto__psa_cipher_set_iv+0x2c>
	...

0c028c78 <mbedcrypto__psa_cipher_generate_iv>:
{
 c028c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c028c7a:	4605      	mov	r5, r0
    if( operation->iv_set || ! operation->iv_required )
 c028c7c:	7900      	ldrb	r0, [r0, #4]
{
 c028c7e:	460c      	mov	r4, r1
    if( operation->iv_set || ! operation->iv_required )
 c028c80:	f000 0006 	and.w	r0, r0, #6
 c028c84:	2802      	cmp	r0, #2
{
 c028c86:	4617      	mov	r7, r2
 c028c88:	461e      	mov	r6, r3
    if( operation->iv_set || ! operation->iv_required )
 c028c8a:	d119      	bne.n	c028cc0 <mbedcrypto__psa_cipher_generate_iv+0x48>
    if( iv_size < operation->iv_size )
 c028c8c:	796a      	ldrb	r2, [r5, #5]
 c028c8e:	42ba      	cmp	r2, r7
 c028c90:	d810      	bhi.n	c028cb4 <mbedcrypto__psa_cipher_generate_iv+0x3c>
    ret = mbedtls_ctr_drbg_random( &global_data.ctr_drbg,
 c028c92:	480d      	ldr	r0, [pc, #52]	; (c028cc8 <mbedcrypto__psa_cipher_generate_iv+0x50>)
 c028c94:	f7f7 fe26 	bl	c0208e4 <mbedtls_ctr_drbg_random>
    if( ret != 0 )
 c028c98:	b128      	cbz	r0, c028ca6 <mbedcrypto__psa_cipher_generate_iv+0x2e>
        status = mbedtls_to_psa_error( ret );
 c028c9a:	f7fd fd4d 	bl	c026738 <mbedtls_to_psa_error>
    status = psa_cipher_set_iv( operation, iv, *iv_length );
 c028c9e:	4604      	mov	r4, r0
    if( status != PSA_SUCCESS )
 c028ca0:	b950      	cbnz	r0, c028cb8 <mbedcrypto__psa_cipher_generate_iv+0x40>
}
 c028ca2:	4620      	mov	r0, r4
 c028ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *iv_length = operation->iv_size;
 c028ca6:	796a      	ldrb	r2, [r5, #5]
    status = psa_cipher_set_iv( operation, iv, *iv_length );
 c028ca8:	4621      	mov	r1, r4
    *iv_length = operation->iv_size;
 c028caa:	6032      	str	r2, [r6, #0]
    status = psa_cipher_set_iv( operation, iv, *iv_length );
 c028cac:	4628      	mov	r0, r5
 c028cae:	f7ff ffc1 	bl	c028c34 <mbedcrypto__psa_cipher_set_iv>
 c028cb2:	e7f4      	b.n	c028c9e <mbedcrypto__psa_cipher_generate_iv+0x26>
        status = PSA_ERROR_BUFFER_TOO_SMALL;
 c028cb4:	f06f 0489 	mvn.w	r4, #137	; 0x89
        psa_cipher_abort( operation );
 c028cb8:	4628      	mov	r0, r5
 c028cba:	f7ff fee7 	bl	c028a8c <mbedcrypto__psa_cipher_abort>
 c028cbe:	e7f0      	b.n	c028ca2 <mbedcrypto__psa_cipher_generate_iv+0x2a>
        return( PSA_ERROR_BAD_STATE );
 c028cc0:	f06f 0488 	mvn.w	r4, #136	; 0x88
 c028cc4:	e7ed      	b.n	c028ca2 <mbedcrypto__psa_cipher_generate_iv+0x2a>
 c028cc6:	bf00      	nop
 c028cc8:	300382d0 	.word	0x300382d0

0c028ccc <mbedcrypto__psa_cipher_update>:
{
 c028ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 c028cce:	4604      	mov	r4, r0
    if( operation->alg == 0 )
 c028cd0:	6800      	ldr	r0, [r0, #0]
 c028cd2:	b310      	cbz	r0, c028d1a <mbedcrypto__psa_cipher_update+0x4e>
    if( ! PSA_ALG_IS_STREAM_CIPHER( operation->alg ) )
 c028cd4:	f000 40ff 	and.w	r0, r0, #2139095040	; 0x7f800000
 c028cd8:	f1b0 6f90 	cmp.w	r0, #75497472	; 0x4800000
            ( operation->ctx.cipher.unprocessed_len + input_length )
 c028cdc:	bf1f      	itttt	ne
 c028cde:	6ae5      	ldrne	r5, [r4, #44]	; 0x2c
            / operation->block_size * operation->block_size;
 c028ce0:	79a0      	ldrbne	r0, [r4, #6]
            ( operation->ctx.cipher.unprocessed_len + input_length )
 c028ce2:	18ad      	addne	r5, r5, r2
            / operation->block_size * operation->block_size;
 c028ce4:	fbb5 f5f0 	udivne	r5, r5, r0
        expected_output_size = input_length;
 c028ce8:	bf0c      	ite	eq
 c028cea:	4610      	moveq	r0, r2
        expected_output_size =
 c028cec:	4368      	mulne	r0, r5
    if( output_size < expected_output_size )
 c028cee:	9d06      	ldr	r5, [sp, #24]
 c028cf0:	42a8      	cmp	r0, r5
 c028cf2:	d80c      	bhi.n	c028d0e <mbedcrypto__psa_cipher_update+0x42>
    ret = mbedtls_cipher_update( &operation->ctx.cipher, input,
 c028cf4:	9807      	ldr	r0, [sp, #28]
 c028cf6:	9000      	str	r0, [sp, #0]
 c028cf8:	f104 0008 	add.w	r0, r4, #8
 c028cfc:	f7f7 f892 	bl	c01fe24 <mbedtls_cipher_update>
    status = mbedtls_to_psa_error( ret );
 c028d00:	f7fd fd1a 	bl	c026738 <mbedtls_to_psa_error>
    if( status != PSA_SUCCESS )
 c028d04:	4605      	mov	r5, r0
 c028d06:	b920      	cbnz	r0, c028d12 <mbedcrypto__psa_cipher_update+0x46>
}
 c028d08:	4628      	mov	r0, r5
 c028d0a:	b003      	add	sp, #12
 c028d0c:	bd30      	pop	{r4, r5, pc}
        status = PSA_ERROR_BUFFER_TOO_SMALL;
 c028d0e:	f06f 0589 	mvn.w	r5, #137	; 0x89
        psa_cipher_abort( operation );
 c028d12:	4620      	mov	r0, r4
 c028d14:	f7ff feba 	bl	c028a8c <mbedcrypto__psa_cipher_abort>
 c028d18:	e7f6      	b.n	c028d08 <mbedcrypto__psa_cipher_update+0x3c>
        return( PSA_ERROR_BAD_STATE );
 c028d1a:	f06f 0588 	mvn.w	r5, #136	; 0x88
 c028d1e:	e7f3      	b.n	c028d08 <mbedcrypto__psa_cipher_update+0x3c>

0c028d20 <mbedcrypto__psa_cipher_finish>:
{
 c028d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 c028d22:	4617      	mov	r7, r2
    if( ! operation->key_set )
 c028d24:	7902      	ldrb	r2, [r0, #4]
{
 c028d26:	461e      	mov	r6, r3
    if( ! operation->key_set )
 c028d28:	07d3      	lsls	r3, r2, #31
{
 c028d2a:	b085      	sub	sp, #20
 c028d2c:	4604      	mov	r4, r0
 c028d2e:	460d      	mov	r5, r1
    if( ! operation->key_set )
 c028d30:	d53a      	bpl.n	c028da8 <mbedcrypto__psa_cipher_finish+0x88>
    if( operation->iv_required && ! operation->iv_set )
 c028d32:	f002 0206 	and.w	r2, r2, #6
 c028d36:	2a02      	cmp	r2, #2
 c028d38:	d036      	beq.n	c028da8 <mbedcrypto__psa_cipher_finish+0x88>
    if( operation->ctx.cipher.operation == MBEDTLS_ENCRYPT &&
 c028d3a:	f990 3010 	ldrsb.w	r3, [r0, #16]
 c028d3e:	2b01      	cmp	r3, #1
 c028d40:	d105      	bne.n	c028d4e <mbedcrypto__psa_cipher_finish+0x2e>
 c028d42:	6802      	ldr	r2, [r0, #0]
 c028d44:	4b1a      	ldr	r3, [pc, #104]	; (c028db0 <mbedcrypto__psa_cipher_finish+0x90>)
 c028d46:	429a      	cmp	r2, r3
 c028d48:	d101      	bne.n	c028d4e <mbedcrypto__psa_cipher_finish+0x2e>
        operation->alg == PSA_ALG_CBC_NO_PADDING &&
 c028d4a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 c028d4c:	bb33      	cbnz	r3, c028d9c <mbedcrypto__psa_cipher_finish+0x7c>
    cipher_ret = mbedtls_cipher_finish( &operation->ctx.cipher,
 c028d4e:	4632      	mov	r2, r6
 c028d50:	4669      	mov	r1, sp
 c028d52:	f104 0008 	add.w	r0, r4, #8
 c028d56:	f7f7 f957 	bl	c020008 <mbedtls_cipher_finish>
    if( cipher_ret != 0 )
 c028d5a:	b160      	cbz	r0, c028d76 <mbedcrypto__psa_cipher_finish+0x56>
        status = mbedtls_to_psa_error( cipher_ret );
 c028d5c:	f7fd fcec 	bl	c026738 <mbedtls_to_psa_error>
 c028d60:	4605      	mov	r5, r0
    *output_length = 0;
 c028d62:	2300      	movs	r3, #0
    mbedtls_platform_zeroize( temp_output_buffer, sizeof( temp_output_buffer ) );
 c028d64:	4668      	mov	r0, sp
    *output_length = 0;
 c028d66:	6033      	str	r3, [r6, #0]
    mbedtls_platform_zeroize( temp_output_buffer, sizeof( temp_output_buffer ) );
 c028d68:	2110      	movs	r1, #16
 c028d6a:	f7fd fcdd 	bl	c026728 <mbedtls_platform_zeroize>
    (void) psa_cipher_abort( operation );
 c028d6e:	4620      	mov	r0, r4
 c028d70:	f7ff fe8c 	bl	c028a8c <mbedcrypto__psa_cipher_abort>
    return( status );
 c028d74:	e00f      	b.n	c028d96 <mbedcrypto__psa_cipher_finish+0x76>
    if( *output_length == 0 )
 c028d76:	6832      	ldr	r2, [r6, #0]
 c028d78:	b12a      	cbz	r2, c028d86 <mbedcrypto__psa_cipher_finish+0x66>
    else if( output_size >= *output_length )
 c028d7a:	42ba      	cmp	r2, r7
 c028d7c:	d811      	bhi.n	c028da2 <mbedcrypto__psa_cipher_finish+0x82>
        memcpy( output, temp_output_buffer, *output_length );
 c028d7e:	4669      	mov	r1, sp
 c028d80:	4628      	mov	r0, r5
 c028d82:	f7eb fdfc 	bl	c01497e <memcpy>
    mbedtls_platform_zeroize( temp_output_buffer, sizeof( temp_output_buffer ) );
 c028d86:	2110      	movs	r1, #16
 c028d88:	4668      	mov	r0, sp
 c028d8a:	f7fd fccd 	bl	c026728 <mbedtls_platform_zeroize>
    status = psa_cipher_abort( operation );
 c028d8e:	4620      	mov	r0, r4
 c028d90:	f7ff fe7c 	bl	c028a8c <mbedcrypto__psa_cipher_abort>
 c028d94:	4605      	mov	r5, r0
}
 c028d96:	4628      	mov	r0, r5
 c028d98:	b005      	add	sp, #20
 c028d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            status = PSA_ERROR_INVALID_ARGUMENT;
 c028d9c:	f06f 0586 	mvn.w	r5, #134	; 0x86
 c028da0:	e7df      	b.n	c028d62 <mbedcrypto__psa_cipher_finish+0x42>
        status = PSA_ERROR_BUFFER_TOO_SMALL;
 c028da2:	f06f 0589 	mvn.w	r5, #137	; 0x89
 c028da6:	e7dc      	b.n	c028d62 <mbedcrypto__psa_cipher_finish+0x42>
        return( PSA_ERROR_BAD_STATE );
 c028da8:	f06f 0588 	mvn.w	r5, #136	; 0x88
 c028dac:	e7f3      	b.n	c028d96 <mbedcrypto__psa_cipher_finish+0x76>
 c028dae:	bf00      	nop
 c028db0:	04600100 	.word	0x04600100

0c028db4 <mbedcrypto__psa_set_key_policy>:
{
 c028db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( policy == NULL )
 c028db6:	460c      	mov	r4, r1
 c028db8:	b921      	cbnz	r1, c028dc4 <mbedcrypto__psa_set_key_policy+0x10>
        return( PSA_ERROR_INVALID_ARGUMENT );
 c028dba:	f06f 0586 	mvn.w	r5, #134	; 0x86
}
 c028dbe:	4628      	mov	r0, r5
 c028dc0:	b003      	add	sp, #12
 c028dc2:	bd30      	pop	{r4, r5, pc}
    status = psa_get_empty_key_slot( handle, &slot );
 c028dc4:	a901      	add	r1, sp, #4
 c028dc6:	f7fd fec3 	bl	c026b50 <psa_get_empty_key_slot>
    if( status != PSA_SUCCESS )
 c028dca:	4605      	mov	r5, r0
 c028dcc:	2800      	cmp	r0, #0
 c028dce:	d1f6      	bne.n	c028dbe <mbedcrypto__psa_set_key_policy+0xa>
    if( ( policy->usage & ~( PSA_KEY_USAGE_EXPORT |
 c028dd0:	6823      	ldr	r3, [r4, #0]
 c028dd2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 c028dd6:	f023 0301 	bic.w	r3, r3, #1
 c028dda:	2b00      	cmp	r3, #0
 c028ddc:	d1ed      	bne.n	c028dba <mbedcrypto__psa_set_key_policy+0x6>
    slot->policy = *policy;
 c028dde:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 c028de2:	9b01      	ldr	r3, [sp, #4]
 c028de4:	3304      	adds	r3, #4
 c028de6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return( PSA_SUCCESS );
 c028dea:	e7e8      	b.n	c028dbe <mbedcrypto__psa_set_key_policy+0xa>

0c028dec <mbedcrypto__psa_get_key_policy>:
{
 c028dec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( policy == NULL )
 c028dee:	460c      	mov	r4, r1
 c028df0:	b169      	cbz	r1, c028e0e <mbedcrypto__psa_get_key_policy+0x22>
    status = psa_get_key_slot( handle, &slot );
 c028df2:	a901      	add	r1, sp, #4
 c028df4:	f000 fc82 	bl	c0296fc <psa_get_key_slot>
    if( status != PSA_SUCCESS )
 c028df8:	4605      	mov	r5, r0
 c028dfa:	b928      	cbnz	r0, c028e08 <mbedcrypto__psa_get_key_policy+0x1c>
    *policy = slot->policy;
 c028dfc:	9b01      	ldr	r3, [sp, #4]
 c028dfe:	3304      	adds	r3, #4
 c028e00:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 c028e04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 c028e08:	4628      	mov	r0, r5
 c028e0a:	b003      	add	sp, #12
 c028e0c:	bd30      	pop	{r4, r5, pc}
        return( PSA_ERROR_INVALID_ARGUMENT );
 c028e0e:	f06f 0586 	mvn.w	r5, #134	; 0x86
 c028e12:	e7f9      	b.n	c028e08 <mbedcrypto__psa_get_key_policy+0x1c>

0c028e14 <mbedcrypto__psa_get_key_lifetime>:
{
 c028e14:	b513      	push	{r0, r1, r4, lr}
 c028e16:	460c      	mov	r4, r1
    status = psa_get_key_slot( handle, &slot );
 c028e18:	a901      	add	r1, sp, #4
 c028e1a:	f000 fc6f 	bl	c0296fc <psa_get_key_slot>
    if( status != PSA_SUCCESS )
 c028e1e:	b910      	cbnz	r0, c028e26 <mbedcrypto__psa_get_key_lifetime+0x12>
    *lifetime = slot->lifetime;
 c028e20:	9b01      	ldr	r3, [sp, #4]
 c028e22:	691b      	ldr	r3, [r3, #16]
 c028e24:	6023      	str	r3, [r4, #0]
}
 c028e26:	b002      	add	sp, #8
 c028e28:	bd10      	pop	{r4, pc}
	...

0c028e2c <mbedcrypto__psa_aead_encrypt>:
{
 c028e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c028e30:	4698      	mov	r8, r3
    *ciphertext_length = 0;
 c028e32:	2300      	movs	r3, #0
{
 c028e34:	b0f1      	sub	sp, #452	; 0x1c4
 c028e36:	ac7d      	add	r4, sp, #500	; 0x1f4
 c028e38:	e894 0470 	ldmia.w	r4, {r4, r5, r6, sl}
 c028e3c:	468b      	mov	fp, r1
    *ciphertext_length = 0;
 c028e3e:	f8ca 3000 	str.w	r3, [sl]
{
 c028e42:	4617      	mov	r7, r2
    status = psa_get_key_from_slot( handle, &operation->slot, usage, alg );
 c028e44:	460b      	mov	r3, r1
 c028e46:	f44f 7280 	mov.w	r2, #256	; 0x100
 c028e4a:	a908      	add	r1, sp, #32
 c028e4c:	f7fd ffcc 	bl	c026de8 <psa_get_key_from_slot>
    if( status != PSA_SUCCESS )
 c028e50:	4681      	mov	r9, r0
 c028e52:	2800      	cmp	r0, #0
 c028e54:	d134      	bne.n	c028ec0 <mbedcrypto__psa_aead_encrypt+0x94>
 c028e56:	4659      	mov	r1, fp
 c028e58:	a808      	add	r0, sp, #32
 c028e5a:	f7fe f911 	bl	c027080 <psa_aead_setup.part.6>
    if( status != PSA_SUCCESS )
 c028e5e:	4681      	mov	r9, r0
 c028e60:	bb70      	cbnz	r0, c028ec0 <mbedcrypto__psa_aead_encrypt+0x94>
    if( ciphertext_size < ( plaintext_length + operation.tag_length ) )
 c028e62:	f89d 31bd 	ldrb.w	r3, [sp, #445]	; 0x1bd
 c028e66:	191a      	adds	r2, r3, r4
 c028e68:	42b2      	cmp	r2, r6
 c028e6a:	d840      	bhi.n	c028eee <mbedcrypto__psa_aead_encrypt+0xc2>
    if( operation.core_alg == PSA_ALG_GCM )
 c028e6c:	996e      	ldr	r1, [sp, #440]	; 0x1b8
 c028e6e:	4823      	ldr	r0, [pc, #140]	; (c028efc <mbedcrypto__psa_aead_encrypt+0xd0>)
    tag = ciphertext + plaintext_length;
 c028e70:	192a      	adds	r2, r5, r4
    if( operation.core_alg == PSA_ALG_GCM )
 c028e72:	4281      	cmp	r1, r0
 c028e74:	d128      	bne.n	c028ec8 <mbedcrypto__psa_aead_encrypt+0x9c>
        status = mbedtls_to_psa_error(
 c028e76:	e9cd 3205 	strd	r3, r2, [sp, #20]
 c028e7a:	9b7c      	ldr	r3, [sp, #496]	; 0x1f0
 c028e7c:	9504      	str	r5, [sp, #16]
 c028e7e:	9303      	str	r3, [sp, #12]
 c028e80:	9b7b      	ldr	r3, [sp, #492]	; 0x1ec
 c028e82:	4622      	mov	r2, r4
 c028e84:	9302      	str	r3, [sp, #8]
 c028e86:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
 c028e88:	2101      	movs	r1, #1
 c028e8a:	e9cd 8300 	strd	r8, r3, [sp]
 c028e8e:	a80a      	add	r0, sp, #40	; 0x28
 c028e90:	463b      	mov	r3, r7
 c028e92:	f7fb f8c0 	bl	c024016 <mbedtls_gcm_crypt_and_tag>
        status = mbedtls_to_psa_error(
 c028e96:	f7fd fc4f 	bl	c026738 <mbedtls_to_psa_error>
 c028e9a:	4681      	mov	r9, r0
    if( status != PSA_SUCCESS && ciphertext_size != 0 )
 c028e9c:	b128      	cbz	r0, c028eaa <mbedcrypto__psa_aead_encrypt+0x7e>
 c028e9e:	b126      	cbz	r6, c028eaa <mbedcrypto__psa_aead_encrypt+0x7e>
        memset( ciphertext, 0, ciphertext_size );
 c028ea0:	4632      	mov	r2, r6
 c028ea2:	2100      	movs	r1, #0
 c028ea4:	4628      	mov	r0, r5
 c028ea6:	f7eb fd8e 	bl	c0149c6 <memset>
    psa_aead_abort( &operation );
 c028eaa:	a808      	add	r0, sp, #32
 c028eac:	f7fd ff04 	bl	c026cb8 <psa_aead_abort>
    if( status == PSA_SUCCESS )
 c028eb0:	f1b9 0f00 	cmp.w	r9, #0
 c028eb4:	d104      	bne.n	c028ec0 <mbedcrypto__psa_aead_encrypt+0x94>
        *ciphertext_length = plaintext_length + operation.tag_length;
 c028eb6:	f89d 21bd 	ldrb.w	r2, [sp, #445]	; 0x1bd
 c028eba:	4414      	add	r4, r2
 c028ebc:	f8ca 4000 	str.w	r4, [sl]
}
 c028ec0:	4648      	mov	r0, r9
 c028ec2:	b071      	add	sp, #452	; 0x1c4
 c028ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( operation.core_alg == PSA_ALG_CCM )
 c028ec8:	480d      	ldr	r0, [pc, #52]	; (c028f00 <mbedcrypto__psa_aead_encrypt+0xd4>)
 c028eca:	4281      	cmp	r1, r0
 c028ecc:	d112      	bne.n	c028ef4 <mbedcrypto__psa_aead_encrypt+0xc8>
        status = mbedtls_to_psa_error(
 c028ece:	e9cd 2304 	strd	r2, r3, [sp, #16]
 c028ed2:	9b7c      	ldr	r3, [sp, #496]	; 0x1f0
 c028ed4:	9503      	str	r5, [sp, #12]
 c028ed6:	9302      	str	r3, [sp, #8]
 c028ed8:	9b7b      	ldr	r3, [sp, #492]	; 0x1ec
 c028eda:	463a      	mov	r2, r7
 c028edc:	9301      	str	r3, [sp, #4]
 c028ede:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
 c028ee0:	4621      	mov	r1, r4
 c028ee2:	9300      	str	r3, [sp, #0]
 c028ee4:	a80a      	add	r0, sp, #40	; 0x28
 c028ee6:	4643      	mov	r3, r8
 c028ee8:	f7f6 fdf4 	bl	c01fad4 <mbedtls_ccm_encrypt_and_tag>
 c028eec:	e7d3      	b.n	c028e96 <mbedcrypto__psa_aead_encrypt+0x6a>
        status = PSA_ERROR_BUFFER_TOO_SMALL;
 c028eee:	f06f 0989 	mvn.w	r9, #137	; 0x89
 c028ef2:	e7da      	b.n	c028eaa <mbedcrypto__psa_aead_encrypt+0x7e>
        return( PSA_ERROR_NOT_SUPPORTED );
 c028ef4:	f06f 0985 	mvn.w	r9, #133	; 0x85
 c028ef8:	e7e2      	b.n	c028ec0 <mbedcrypto__psa_aead_encrypt+0x94>
 c028efa:	bf00      	nop
 c028efc:	06001002 	.word	0x06001002
 c028f00:	06001001 	.word	0x06001001

0c028f04 <mbedcrypto__psa_aead_decrypt>:
{
 c028f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c028f08:	4699      	mov	r9, r3
    *plaintext_length = 0;
 c028f0a:	2300      	movs	r3, #0
{
 c028f0c:	b0ef      	sub	sp, #444	; 0x1bc
 c028f0e:	4690      	mov	r8, r2
    *plaintext_length = 0;
 c028f10:	9a7e      	ldr	r2, [sp, #504]	; 0x1f8
{
 c028f12:	468b      	mov	fp, r1
    *plaintext_length = 0;
 c028f14:	6013      	str	r3, [r2, #0]
    status = psa_get_key_from_slot( handle, &operation->slot, usage, alg );
 c028f16:	460b      	mov	r3, r1
 c028f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 c028f1c:	a906      	add	r1, sp, #24
{
 c028f1e:	9d7a      	ldr	r5, [sp, #488]	; 0x1e8
 c028f20:	9c7b      	ldr	r4, [sp, #492]	; 0x1ec
 c028f22:	9f7c      	ldr	r7, [sp, #496]	; 0x1f0
 c028f24:	9e7d      	ldr	r6, [sp, #500]	; 0x1f4
    status = psa_get_key_from_slot( handle, &operation->slot, usage, alg );
 c028f26:	f7fd ff5f 	bl	c026de8 <psa_get_key_from_slot>
    if( status != PSA_SUCCESS )
 c028f2a:	4682      	mov	sl, r0
 c028f2c:	2800      	cmp	r0, #0
 c028f2e:	d133      	bne.n	c028f98 <mbedcrypto__psa_aead_decrypt+0x94>
 c028f30:	4659      	mov	r1, fp
 c028f32:	a806      	add	r0, sp, #24
 c028f34:	f7fe f8a4 	bl	c027080 <psa_aead_setup.part.6>
    if( status != PSA_SUCCESS )
 c028f38:	4682      	mov	sl, r0
 c028f3a:	bb68      	cbnz	r0, c028f98 <mbedcrypto__psa_aead_decrypt+0x94>
    if( operation.core_alg == PSA_ALG_GCM )
 c028f3c:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 c028f3e:	4a29      	ldr	r2, [pc, #164]	; (c028fe4 <mbedcrypto__psa_aead_decrypt+0xe0>)
 c028f40:	4293      	cmp	r3, r2
 c028f42:	d12d      	bne.n	c028fa0 <mbedcrypto__psa_aead_decrypt+0x9c>
        status = psa_aead_unpadded_locate_tag( operation.tag_length,
 c028f44:	f89d 31b5 	ldrb.w	r3, [sp, #437]	; 0x1b5
    if( tag_length > ciphertext_length )
 c028f48:	42a3      	cmp	r3, r4
 c028f4a:	d842      	bhi.n	c028fd2 <mbedcrypto__psa_aead_decrypt+0xce>
    payload_length = ciphertext_length - tag_length;
 c028f4c:	1ae1      	subs	r1, r4, r3
    if( payload_length > plaintext_size )
 c028f4e:	428e      	cmp	r6, r1
 c028f50:	d342      	bcc.n	c028fd8 <mbedcrypto__psa_aead_decrypt+0xd4>
        status = mbedtls_to_psa_error(
 c028f52:	9303      	str	r3, [sp, #12]
 c028f54:	9b79      	ldr	r3, [sp, #484]	; 0x1e4
 c028f56:	e9cd 5704 	strd	r5, r7, [sp, #16]
 c028f5a:	9301      	str	r3, [sp, #4]
 c028f5c:	9b78      	ldr	r3, [sp, #480]	; 0x1e0
    *p_tag = ciphertext + payload_length;
 c028f5e:	440d      	add	r5, r1
        status = mbedtls_to_psa_error(
 c028f60:	9300      	str	r3, [sp, #0]
 c028f62:	9502      	str	r5, [sp, #8]
 c028f64:	464b      	mov	r3, r9
 c028f66:	4642      	mov	r2, r8
 c028f68:	a808      	add	r0, sp, #32
 c028f6a:	f7fb f877 	bl	c02405c <mbedtls_gcm_auth_decrypt>
        status = mbedtls_to_psa_error(
 c028f6e:	f7fd fbe3 	bl	c026738 <mbedtls_to_psa_error>
 c028f72:	4682      	mov	sl, r0
    if( status != PSA_SUCCESS && plaintext_size != 0 )
 c028f74:	b128      	cbz	r0, c028f82 <mbedcrypto__psa_aead_decrypt+0x7e>
 c028f76:	b126      	cbz	r6, c028f82 <mbedcrypto__psa_aead_decrypt+0x7e>
        memset( plaintext, 0, plaintext_size );
 c028f78:	4632      	mov	r2, r6
 c028f7a:	2100      	movs	r1, #0
 c028f7c:	4638      	mov	r0, r7
 c028f7e:	f7eb fd22 	bl	c0149c6 <memset>
    psa_aead_abort( &operation );
 c028f82:	a806      	add	r0, sp, #24
 c028f84:	f7fd fe98 	bl	c026cb8 <psa_aead_abort>
    if( status == PSA_SUCCESS )
 c028f88:	f1ba 0f00 	cmp.w	sl, #0
 c028f8c:	d104      	bne.n	c028f98 <mbedcrypto__psa_aead_decrypt+0x94>
        *plaintext_length = ciphertext_length - operation.tag_length;
 c028f8e:	f89d 21b5 	ldrb.w	r2, [sp, #437]	; 0x1b5
 c028f92:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 c028f94:	1aa4      	subs	r4, r4, r2
 c028f96:	601c      	str	r4, [r3, #0]
}
 c028f98:	4650      	mov	r0, sl
 c028f9a:	b06f      	add	sp, #444	; 0x1bc
 c028f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( operation.core_alg == PSA_ALG_CCM )
 c028fa0:	4a11      	ldr	r2, [pc, #68]	; (c028fe8 <mbedcrypto__psa_aead_decrypt+0xe4>)
 c028fa2:	4293      	cmp	r3, r2
 c028fa4:	d11b      	bne.n	c028fde <mbedcrypto__psa_aead_decrypt+0xda>
        status = psa_aead_unpadded_locate_tag( operation.tag_length,
 c028fa6:	f89d 31b5 	ldrb.w	r3, [sp, #437]	; 0x1b5
    if( tag_length > ciphertext_length )
 c028faa:	42a3      	cmp	r3, r4
 c028fac:	d811      	bhi.n	c028fd2 <mbedcrypto__psa_aead_decrypt+0xce>
    payload_length = ciphertext_length - tag_length;
 c028fae:	1ae1      	subs	r1, r4, r3
    if( payload_length > plaintext_size )
 c028fb0:	428e      	cmp	r6, r1
 c028fb2:	d311      	bcc.n	c028fd8 <mbedcrypto__psa_aead_decrypt+0xd4>
        status = mbedtls_to_psa_error(
 c028fb4:	9305      	str	r3, [sp, #20]
    *p_tag = ciphertext + payload_length;
 c028fb6:	186b      	adds	r3, r5, r1
        status = mbedtls_to_psa_error(
 c028fb8:	e9cd 7303 	strd	r7, r3, [sp, #12]
 c028fbc:	9b79      	ldr	r3, [sp, #484]	; 0x1e4
 c028fbe:	9502      	str	r5, [sp, #8]
 c028fc0:	9301      	str	r3, [sp, #4]
 c028fc2:	9b78      	ldr	r3, [sp, #480]	; 0x1e0
 c028fc4:	4642      	mov	r2, r8
 c028fc6:	9300      	str	r3, [sp, #0]
 c028fc8:	a808      	add	r0, sp, #32
 c028fca:	464b      	mov	r3, r9
 c028fcc:	f7f6 fdbc 	bl	c01fb48 <mbedtls_ccm_auth_decrypt>
 c028fd0:	e7cd      	b.n	c028f6e <mbedcrypto__psa_aead_decrypt+0x6a>
        return( PSA_ERROR_INVALID_ARGUMENT );
 c028fd2:	f06f 0a86 	mvn.w	sl, #134	; 0x86
 c028fd6:	e7d4      	b.n	c028f82 <mbedcrypto__psa_aead_decrypt+0x7e>
        return( PSA_ERROR_BUFFER_TOO_SMALL );
 c028fd8:	f06f 0a89 	mvn.w	sl, #137	; 0x89
 c028fdc:	e7d1      	b.n	c028f82 <mbedcrypto__psa_aead_decrypt+0x7e>
        return( PSA_ERROR_NOT_SUPPORTED );
 c028fde:	f06f 0a85 	mvn.w	sl, #133	; 0x85
 c028fe2:	e7d9      	b.n	c028f98 <mbedcrypto__psa_aead_decrypt+0x94>
 c028fe4:	06001002 	.word	0x06001002
 c028fe8:	06001001 	.word	0x06001001

0c028fec <mbedcrypto__psa_generator_abort>:
{
 c028fec:	b538      	push	{r3, r4, r5, lr}
    if( generator->alg == 0 )
 c028fee:	6803      	ldr	r3, [r0, #0]
{
 c028ff0:	4604      	mov	r4, r0
    if( generator->alg == 0 )
 c028ff2:	b943      	cbnz	r3, c029006 <mbedcrypto__psa_generator_abort+0x1a>
    psa_status_t status = PSA_SUCCESS;
 c028ff4:	2500      	movs	r5, #0
    memset( generator, 0, sizeof( *generator ) );
 c028ff6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 c028ffa:	2100      	movs	r1, #0
 c028ffc:	4620      	mov	r0, r4
 c028ffe:	f7eb fce2 	bl	c0149c6 <memset>
}
 c029002:	4628      	mov	r0, r5
 c029004:	bd38      	pop	{r3, r4, r5, pc}
    if( generator->alg == PSA_ALG_SELECT_RAW )
 c029006:	4a1a      	ldr	r2, [pc, #104]	; (c029070 <mbedcrypto__psa_generator_abort+0x84>)
 c029008:	4293      	cmp	r3, r2
 c02900a:	d109      	bne.n	c029020 <mbedcrypto__psa_generator_abort+0x34>
        if( generator->ctx.buffer.data != NULL )
 c02900c:	6880      	ldr	r0, [r0, #8]
 c02900e:	2800      	cmp	r0, #0
 c029010:	d0f0      	beq.n	c028ff4 <mbedcrypto__psa_generator_abort+0x8>
            mbedtls_platform_zeroize( generator->ctx.buffer.data,
 c029012:	68e1      	ldr	r1, [r4, #12]
 c029014:	f7fd fb88 	bl	c026728 <mbedtls_platform_zeroize>
            mbedtls_free( generator->ctx.buffer.data );
 c029018:	68a0      	ldr	r0, [r4, #8]
 c02901a:	f7fd fb75 	bl	c026708 <mbedtls_free>
 c02901e:	e7e9      	b.n	c028ff4 <mbedcrypto__psa_generator_abort+0x8>
    if( PSA_ALG_IS_HKDF( generator->alg ) )
 c029020:	4a14      	ldr	r2, [pc, #80]	; (c029074 <mbedcrypto__psa_generator_abort+0x88>)
 c029022:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 c029026:	4291      	cmp	r1, r2
 c029028:	d108      	bne.n	c02903c <mbedcrypto__psa_generator_abort+0x50>
        mbedtls_free( generator->ctx.hkdf.info );
 c02902a:	6880      	ldr	r0, [r0, #8]
 c02902c:	f7fd fb6c 	bl	c026708 <mbedtls_free>
        status = psa_hmac_abort_internal( &generator->ctx.hkdf.hmac );
 c029030:	f104 0010 	add.w	r0, r4, #16
 c029034:	f7fe fc2e 	bl	c027894 <psa_hmac_abort_internal>
 c029038:	4605      	mov	r5, r0
 c02903a:	e7dc      	b.n	c028ff6 <mbedcrypto__psa_generator_abort+0xa>
    else if( PSA_ALG_IS_TLS12_PRF( generator->alg ) ||
 c02903c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 c029040:	4a0d      	ldr	r2, [pc, #52]	; (c029078 <mbedcrypto__psa_generator_abort+0x8c>)
 c029042:	f023 0301 	bic.w	r3, r3, #1
 c029046:	4293      	cmp	r3, r2
 c029048:	d10f      	bne.n	c02906a <mbedcrypto__psa_generator_abort+0x7e>
        if( generator->ctx.tls12_prf.key != NULL )
 c02904a:	6880      	ldr	r0, [r0, #8]
 c02904c:	b128      	cbz	r0, c02905a <mbedcrypto__psa_generator_abort+0x6e>
            mbedtls_platform_zeroize( generator->ctx.tls12_prf.key,
 c02904e:	68e1      	ldr	r1, [r4, #12]
 c029050:	f7fd fb6a 	bl	c026728 <mbedtls_platform_zeroize>
            mbedtls_free( generator->ctx.tls12_prf.key );
 c029054:	68a0      	ldr	r0, [r4, #8]
 c029056:	f7fd fb57 	bl	c026708 <mbedtls_free>
        if( generator->ctx.tls12_prf.Ai_with_seed != NULL )
 c02905a:	6920      	ldr	r0, [r4, #16]
 c02905c:	2800      	cmp	r0, #0
 c02905e:	d0c9      	beq.n	c028ff4 <mbedcrypto__psa_generator_abort+0x8>
            mbedtls_platform_zeroize( generator->ctx.tls12_prf.Ai_with_seed,
 c029060:	6961      	ldr	r1, [r4, #20]
 c029062:	f7fd fb61 	bl	c026728 <mbedtls_platform_zeroize>
            mbedtls_free( generator->ctx.tls12_prf.Ai_with_seed );
 c029066:	6920      	ldr	r0, [r4, #16]
 c029068:	e7d7      	b.n	c02901a <mbedcrypto__psa_generator_abort+0x2e>
        status = PSA_ERROR_BAD_STATE;
 c02906a:	f06f 0588 	mvn.w	r5, #136	; 0x88
 c02906e:	e7c2      	b.n	c028ff6 <mbedcrypto__psa_generator_abort+0xa>
 c029070:	31000001 	.word	0x31000001
 c029074:	30000100 	.word	0x30000100
 c029078:	30000200 	.word	0x30000200

0c02907c <mbedcrypto__psa_get_generator_capacity>:
    if( generator->alg == 0 )
 c02907c:	6803      	ldr	r3, [r0, #0]
 c02907e:	b11b      	cbz	r3, c029088 <mbedcrypto__psa_get_generator_capacity+0xc>
    *capacity = generator->capacity;
 c029080:	6843      	ldr	r3, [r0, #4]
    return( PSA_SUCCESS );
 c029082:	2000      	movs	r0, #0
    *capacity = generator->capacity;
 c029084:	600b      	str	r3, [r1, #0]
    return( PSA_SUCCESS );
 c029086:	4770      	bx	lr
        return PSA_ERROR_BAD_STATE;
 c029088:	f06f 0088 	mvn.w	r0, #136	; 0x88
}
 c02908c:	4770      	bx	lr
	...

0c029090 <mbedcrypto__psa_generator_read>:
{
 c029090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( generator->alg == 0 )
 c029094:	6805      	ldr	r5, [r0, #0]
{
 c029096:	4604      	mov	r4, r0
 c029098:	468a      	mov	sl, r1
 c02909a:	4617      	mov	r7, r2
    if( generator->alg == 0 )
 c02909c:	b92d      	cbnz	r5, c0290aa <mbedcrypto__psa_generator_read+0x1a>
        return PSA_ERROR_BAD_STATE;
 c02909e:	f06f 0388 	mvn.w	r3, #136	; 0x88
}
 c0290a2:	4618      	mov	r0, r3
 c0290a4:	b003      	add	sp, #12
 c0290a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( output_length > generator->capacity )
 c0290aa:	6841      	ldr	r1, [r0, #4]
 c0290ac:	4291      	cmp	r1, r2
 c0290ae:	d210      	bcs.n	c0290d2 <mbedcrypto__psa_generator_read+0x42>
        generator->capacity = 0;
 c0290b0:	2300      	movs	r3, #0
 c0290b2:	6043      	str	r3, [r0, #4]
        status = PSA_ERROR_INSUFFICIENT_DATA;
 c0290b4:	f06f 038e 	mvn.w	r3, #142	; 0x8e
        psa_algorithm_t alg = generator->alg;
 c0290b8:	6825      	ldr	r5, [r4, #0]
        psa_generator_abort( generator );
 c0290ba:	4620      	mov	r0, r4
 c0290bc:	9300      	str	r3, [sp, #0]
 c0290be:	f7ff ff95 	bl	c028fec <mbedcrypto__psa_generator_abort>
        generator->alg = alg;
 c0290c2:	6025      	str	r5, [r4, #0]
        memset( output, '!', output_length );
 c0290c4:	463a      	mov	r2, r7
 c0290c6:	2121      	movs	r1, #33	; 0x21
 c0290c8:	4650      	mov	r0, sl
 c0290ca:	f7eb fc7c 	bl	c0149c6 <memset>
 c0290ce:	9b00      	ldr	r3, [sp, #0]
 c0290d0:	e7e7      	b.n	c0290a2 <mbedcrypto__psa_generator_read+0x12>
    if( output_length == 0 && generator->capacity == 0 )
 c0290d2:	b912      	cbnz	r2, c0290da <mbedcrypto__psa_generator_read+0x4a>
 c0290d4:	2900      	cmp	r1, #0
 c0290d6:	f000 8124 	beq.w	c029322 <mbedcrypto__psa_generator_read+0x292>
    if( generator->alg == PSA_ALG_SELECT_RAW )
 c0290da:	4b93      	ldr	r3, [pc, #588]	; (c029328 <mbedcrypto__psa_generator_read+0x298>)
    generator->capacity -= output_length;
 c0290dc:	1bc9      	subs	r1, r1, r7
    if( generator->alg == PSA_ALG_SELECT_RAW )
 c0290de:	429d      	cmp	r5, r3
    generator->capacity -= output_length;
 c0290e0:	6061      	str	r1, [r4, #4]
    if( generator->alg == PSA_ALG_SELECT_RAW )
 c0290e2:	d10a      	bne.n	c0290fa <mbedcrypto__psa_generator_read+0x6a>
            generator->ctx.buffer.size - generator->capacity - output_length;
 c0290e4:	68e3      	ldr	r3, [r4, #12]
        memcpy( output, generator->ctx.buffer.data + offset, output_length );
 c0290e6:	463a      	mov	r2, r7
            generator->ctx.buffer.size - generator->capacity - output_length;
 c0290e8:	1a59      	subs	r1, r3, r1
        memcpy( output, generator->ctx.buffer.data + offset, output_length );
 c0290ea:	68a3      	ldr	r3, [r4, #8]
        size_t offset =
 c0290ec:	1bc9      	subs	r1, r1, r7
        memcpy( output, generator->ctx.buffer.data + offset, output_length );
 c0290ee:	4419      	add	r1, r3
 c0290f0:	4650      	mov	r0, sl
 c0290f2:	f7eb fc44 	bl	c01497e <memcpy>
        status = PSA_SUCCESS;
 c0290f6:	2300      	movs	r3, #0
 c0290f8:	e7d3      	b.n	c0290a2 <mbedcrypto__psa_generator_read+0x12>
    if( PSA_ALG_IS_HKDF( generator->alg ) )
 c0290fa:	4b8c      	ldr	r3, [pc, #560]	; (c02932c <mbedcrypto__psa_generator_read+0x29c>)
 c0290fc:	f025 02ff 	bic.w	r2, r5, #255	; 0xff
 c029100:	429a      	cmp	r2, r3
 c029102:	f040 809c 	bne.w	c02923e <mbedcrypto__psa_generator_read+0x1ae>
        psa_algorithm_t hash_alg = PSA_ALG_HKDF_GET_HASH( generator->alg );
 c029106:	b2ed      	uxtb	r5, r5
 c029108:	f045 7580 	orr.w	r5, r5, #16777216	; 0x1000000
    uint8_t hash_length = PSA_HASH_SIZE( hash_alg );
 c02910c:	f105 437f 	add.w	r3, r5, #4278190080	; 0xff000000
 c029110:	3b01      	subs	r3, #1
 c029112:	2b02      	cmp	r3, #2
 c029114:	d97e      	bls.n	c029214 <mbedcrypto__psa_generator_read+0x184>
 c029116:	f105 437f 	add.w	r3, r5, #4278190080	; 0xff000000
 c02911a:	3b04      	subs	r3, #4
 c02911c:	2b01      	cmp	r3, #1
 c02911e:	d97b      	bls.n	c029218 <mbedcrypto__psa_generator_read+0x188>
 c029120:	4b83      	ldr	r3, [pc, #524]	; (c029330 <mbedcrypto__psa_generator_read+0x2a0>)
 c029122:	429d      	cmp	r5, r3
 c029124:	d07c      	beq.n	c029220 <mbedcrypto__psa_generator_read+0x190>
 c029126:	3301      	adds	r3, #1
 c029128:	429d      	cmp	r5, r3
 c02912a:	d07b      	beq.n	c029224 <mbedcrypto__psa_generator_read+0x194>
 c02912c:	3301      	adds	r3, #1
 c02912e:	429d      	cmp	r5, r3
 c029130:	d07a      	beq.n	c029228 <mbedcrypto__psa_generator_read+0x198>
 c029132:	3301      	adds	r3, #1
 c029134:	429d      	cmp	r5, r3
 c029136:	d071      	beq.n	c02921c <mbedcrypto__psa_generator_read+0x18c>
 c029138:	3301      	adds	r3, #1
 c02913a:	429d      	cmp	r5, r3
 c02913c:	d070      	beq.n	c029220 <mbedcrypto__psa_generator_read+0x190>
 c02913e:	3301      	adds	r3, #1
 c029140:	429d      	cmp	r5, r3
 c029142:	d06f      	beq.n	c029224 <mbedcrypto__psa_generator_read+0x194>
 c029144:	3303      	adds	r3, #3
 c029146:	429d      	cmp	r5, r3
 c029148:	d06a      	beq.n	c029220 <mbedcrypto__psa_generator_read+0x190>
 c02914a:	3301      	adds	r3, #1
 c02914c:	429d      	cmp	r5, r3
 c02914e:	d069      	beq.n	c029224 <mbedcrypto__psa_generator_read+0x194>
 c029150:	3301      	adds	r3, #1
 c029152:	429d      	cmp	r5, r3
 c029154:	d068      	beq.n	c029228 <mbedcrypto__psa_generator_read+0x198>
 c029156:	4e77      	ldr	r6, [pc, #476]	; (c029334 <mbedcrypto__psa_generator_read+0x2a4>)
 c029158:	42b5      	cmp	r5, r6
 c02915a:	bf0c      	ite	eq
 c02915c:	2640      	moveq	r6, #64	; 0x40
 c02915e:	2600      	movne	r6, #0
 c029160:	46b8      	mov	r8, r7
 c029162:	f8cd a000 	str.w	sl, [sp]
        memcpy( output, hkdf->output_block + hkdf->offset_in_block, n );
 c029166:	f504 7bd8 	add.w	fp, r4, #432	; 0x1b0
        status = psa_hmac_setup_internal( &hkdf->hmac,
 c02916a:	f104 0910 	add.w	r9, r4, #16
    while( output_length != 0 )
 c02916e:	f1b8 0f00 	cmp.w	r8, #0
 c029172:	d0c0      	beq.n	c0290f6 <mbedcrypto__psa_generator_read+0x66>
        uint8_t n = hash_length - hkdf->offset_in_block;
 c029174:	f894 11f0 	ldrb.w	r1, [r4, #496]	; 0x1f0
        memcpy( output, hkdf->output_block + hkdf->offset_in_block, n );
 c029178:	9800      	ldr	r0, [sp, #0]
        uint8_t n = hash_length - hkdf->offset_in_block;
 c02917a:	1a73      	subs	r3, r6, r1
 c02917c:	b2db      	uxtb	r3, r3
        if( n > output_length )
 c02917e:	4543      	cmp	r3, r8
            n = (uint8_t) output_length;
 c029180:	bf88      	it	hi
 c029182:	fa5f f388 	uxtbhi.w	r3, r8
        memcpy( output, hkdf->output_block + hkdf->offset_in_block, n );
 c029186:	461a      	mov	r2, r3
 c029188:	4459      	add	r1, fp
 c02918a:	9301      	str	r3, [sp, #4]
 c02918c:	f7eb fbf7 	bl	c01497e <memcpy>
        output += n;
 c029190:	e9dd 2300 	ldrd	r2, r3, [sp]
 c029194:	441a      	add	r2, r3
 c029196:	9200      	str	r2, [sp, #0]
        hkdf->offset_in_block += n;
 c029198:	f894 21f0 	ldrb.w	r2, [r4, #496]	; 0x1f0
        if( output_length == 0 )
 c02919c:	ebb8 0803 	subs.w	r8, r8, r3
        hkdf->offset_in_block += n;
 c0291a0:	441a      	add	r2, r3
 c0291a2:	f884 21f0 	strb.w	r2, [r4, #496]	; 0x1f0
        if( output_length == 0 )
 c0291a6:	d0a6      	beq.n	c0290f6 <mbedcrypto__psa_generator_read+0x66>
        if( hkdf->block_number == 0xff )
 c0291a8:	f894 31f1 	ldrb.w	r3, [r4, #497]	; 0x1f1
 c0291ac:	2bff      	cmp	r3, #255	; 0xff
 c0291ae:	f000 80b5 	beq.w	c02931c <mbedcrypto__psa_generator_read+0x28c>
        ++hkdf->block_number;
 c0291b2:	3301      	adds	r3, #1
 c0291b4:	f884 31f1 	strb.w	r3, [r4, #497]	; 0x1f1
        hkdf->offset_in_block = 0;
 c0291b8:	2300      	movs	r3, #0
        status = psa_hmac_setup_internal( &hkdf->hmac,
 c0291ba:	4632      	mov	r2, r6
        hkdf->offset_in_block = 0;
 c0291bc:	f884 31f0 	strb.w	r3, [r4, #496]	; 0x1f0
        status = psa_hmac_setup_internal( &hkdf->hmac,
 c0291c0:	f504 71b8 	add.w	r1, r4, #368	; 0x170
 c0291c4:	462b      	mov	r3, r5
 c0291c6:	4648      	mov	r0, r9
 c0291c8:	f7fe fc54 	bl	c027a74 <psa_hmac_setup_internal>
        if( status != PSA_SUCCESS )
 c0291cc:	4603      	mov	r3, r0
 c0291ce:	2800      	cmp	r0, #0
 c0291d0:	f47f af72 	bne.w	c0290b8 <mbedcrypto__psa_generator_read+0x28>
        if( hkdf->block_number != 1 )
 c0291d4:	f894 31f1 	ldrb.w	r3, [r4, #497]	; 0x1f1
 c0291d8:	2b01      	cmp	r3, #1
 c0291da:	d127      	bne.n	c02922c <mbedcrypto__psa_generator_read+0x19c>
        status = psa_hash_update( &hkdf->hmac.hash_ctx,
 c0291dc:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 c0291e0:	4648      	mov	r0, r9
 c0291e2:	f7fe fbcd 	bl	c027980 <mbedcrypto__psa_hash_update>
        if( status != PSA_SUCCESS )
 c0291e6:	4603      	mov	r3, r0
 c0291e8:	2800      	cmp	r0, #0
 c0291ea:	f47f af65 	bne.w	c0290b8 <mbedcrypto__psa_generator_read+0x28>
 c0291ee:	2201      	movs	r2, #1
 c0291f0:	f204 11f1 	addw	r1, r4, #497	; 0x1f1
 c0291f4:	4648      	mov	r0, r9
 c0291f6:	f7fe fb58 	bl	c0278aa <mbedcrypto__psa_hash_update.part.7>
        if( status != PSA_SUCCESS )
 c0291fa:	4603      	mov	r3, r0
 c0291fc:	2800      	cmp	r0, #0
 c0291fe:	f47f af5b 	bne.w	c0290b8 <mbedcrypto__psa_generator_read+0x28>
        status = psa_hmac_finish_internal( &hkdf->hmac,
 c029202:	2240      	movs	r2, #64	; 0x40
 c029204:	4659      	mov	r1, fp
 c029206:	4648      	mov	r0, r9
 c029208:	f7fe fce2 	bl	c027bd0 <psa_hmac_finish_internal>
        if( status != PSA_SUCCESS )
 c02920c:	4603      	mov	r3, r0
 c02920e:	2800      	cmp	r0, #0
 c029210:	d0ad      	beq.n	c02916e <mbedcrypto__psa_generator_read+0xde>
 c029212:	e751      	b.n	c0290b8 <mbedcrypto__psa_generator_read+0x28>
    uint8_t hash_length = PSA_HASH_SIZE( hash_alg );
 c029214:	2610      	movs	r6, #16
 c029216:	e7a3      	b.n	c029160 <mbedcrypto__psa_generator_read+0xd0>
 c029218:	2614      	movs	r6, #20
 c02921a:	e7a1      	b.n	c029160 <mbedcrypto__psa_generator_read+0xd0>
 c02921c:	2640      	movs	r6, #64	; 0x40
 c02921e:	e79f      	b.n	c029160 <mbedcrypto__psa_generator_read+0xd0>
 c029220:	261c      	movs	r6, #28
 c029222:	e79d      	b.n	c029160 <mbedcrypto__psa_generator_read+0xd0>
 c029224:	2620      	movs	r6, #32
 c029226:	e79b      	b.n	c029160 <mbedcrypto__psa_generator_read+0xd0>
 c029228:	2630      	movs	r6, #48	; 0x30
 c02922a:	e799      	b.n	c029160 <mbedcrypto__psa_generator_read+0xd0>
            status = psa_hash_update( &hkdf->hmac.hash_ctx,
 c02922c:	4632      	mov	r2, r6
 c02922e:	4659      	mov	r1, fp
 c029230:	4648      	mov	r0, r9
 c029232:	f7fe fba5 	bl	c027980 <mbedcrypto__psa_hash_update>
            if( status != PSA_SUCCESS )
 c029236:	4603      	mov	r3, r0
 c029238:	2800      	cmp	r0, #0
 c02923a:	d0cf      	beq.n	c0291dc <mbedcrypto__psa_generator_read+0x14c>
 c02923c:	e73c      	b.n	c0290b8 <mbedcrypto__psa_generator_read+0x28>
    else if( PSA_ALG_IS_TLS12_PRF( generator->alg ) ||
 c02923e:	f425 73ff 	bic.w	r3, r5, #510	; 0x1fe
 c029242:	4a3d      	ldr	r2, [pc, #244]	; (c029338 <mbedcrypto__psa_generator_read+0x2a8>)
 c029244:	f023 0301 	bic.w	r3, r3, #1
 c029248:	4293      	cmp	r3, r2
 c02924a:	f47f af28 	bne.w	c02909e <mbedcrypto__psa_generator_read+0xe>
    psa_algorithm_t hash_alg = PSA_ALG_TLS12_PRF_GET_HASH( alg );
 c02924e:	b2ee      	uxtb	r6, r5
        status = psa_generator_tls12_prf_read( &generator->ctx.tls12_prf,
 c029250:	f104 0308 	add.w	r3, r4, #8
    psa_algorithm_t hash_alg = PSA_ALG_TLS12_PRF_GET_HASH( alg );
 c029254:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
        status = psa_generator_tls12_prf_read( &generator->ctx.tls12_prf,
 c029258:	9300      	str	r3, [sp, #0]
    uint8_t hash_length = PSA_HASH_SIZE( hash_alg );
 c02925a:	f106 437f 	add.w	r3, r6, #4278190080	; 0xff000000
 c02925e:	3b01      	subs	r3, #1
 c029260:	2b02      	cmp	r3, #2
 c029262:	d93b      	bls.n	c0292dc <mbedcrypto__psa_generator_read+0x24c>
 c029264:	f106 437f 	add.w	r3, r6, #4278190080	; 0xff000000
 c029268:	3b04      	subs	r3, #4
 c02926a:	2b01      	cmp	r3, #1
 c02926c:	d938      	bls.n	c0292e0 <mbedcrypto__psa_generator_read+0x250>
 c02926e:	4b30      	ldr	r3, [pc, #192]	; (c029330 <mbedcrypto__psa_generator_read+0x2a0>)
 c029270:	429e      	cmp	r6, r3
 c029272:	d039      	beq.n	c0292e8 <mbedcrypto__psa_generator_read+0x258>
 c029274:	3301      	adds	r3, #1
 c029276:	429e      	cmp	r6, r3
 c029278:	d038      	beq.n	c0292ec <mbedcrypto__psa_generator_read+0x25c>
 c02927a:	3301      	adds	r3, #1
 c02927c:	429e      	cmp	r6, r3
 c02927e:	d037      	beq.n	c0292f0 <mbedcrypto__psa_generator_read+0x260>
 c029280:	3301      	adds	r3, #1
 c029282:	429e      	cmp	r6, r3
 c029284:	d02e      	beq.n	c0292e4 <mbedcrypto__psa_generator_read+0x254>
 c029286:	3301      	adds	r3, #1
 c029288:	429e      	cmp	r6, r3
 c02928a:	d02d      	beq.n	c0292e8 <mbedcrypto__psa_generator_read+0x258>
 c02928c:	3301      	adds	r3, #1
 c02928e:	429e      	cmp	r6, r3
 c029290:	d02c      	beq.n	c0292ec <mbedcrypto__psa_generator_read+0x25c>
 c029292:	3303      	adds	r3, #3
 c029294:	429e      	cmp	r6, r3
 c029296:	d027      	beq.n	c0292e8 <mbedcrypto__psa_generator_read+0x258>
 c029298:	3301      	adds	r3, #1
 c02929a:	429e      	cmp	r6, r3
 c02929c:	d026      	beq.n	c0292ec <mbedcrypto__psa_generator_read+0x25c>
 c02929e:	3301      	adds	r3, #1
 c0292a0:	429e      	cmp	r6, r3
 c0292a2:	d025      	beq.n	c0292f0 <mbedcrypto__psa_generator_read+0x260>
 c0292a4:	3301      	adds	r3, #1
 c0292a6:	429e      	cmp	r6, r3
 c0292a8:	bf0c      	ite	eq
 c0292aa:	2640      	moveq	r6, #64	; 0x40
 c0292ac:	2600      	movne	r6, #0
 c0292ae:	46b8      	mov	r8, r7
 c0292b0:	46d3      	mov	fp, sl
        memcpy( output, tls12_prf->output_block + tls12_prf->offset_in_block,
 c0292b2:	f104 0918 	add.w	r9, r4, #24
    while( output_length != 0 )
 c0292b6:	f1b8 0f00 	cmp.w	r8, #0
 c0292ba:	f43f af1c 	beq.w	c0290f6 <mbedcrypto__psa_generator_read+0x66>
        uint8_t n = hash_length - tls12_prf->offset_in_block;
 c0292be:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 c0292c2:	1a73      	subs	r3, r6, r1
        if( n == 0 )
 c0292c4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 c0292c8:	d114      	bne.n	c0292f4 <mbedcrypto__psa_generator_read+0x264>
            status = psa_generator_tls12_prf_generate_next_block( tls12_prf,
 c0292ca:	4629      	mov	r1, r5
 c0292cc:	9800      	ldr	r0, [sp, #0]
 c0292ce:	f7fe fd01 	bl	c027cd4 <psa_generator_tls12_prf_generate_next_block>
            if( status != PSA_SUCCESS )
 c0292d2:	4603      	mov	r3, r0
 c0292d4:	2800      	cmp	r0, #0
 c0292d6:	f47f aeef 	bne.w	c0290b8 <mbedcrypto__psa_generator_read+0x28>
 c0292da:	e7ec      	b.n	c0292b6 <mbedcrypto__psa_generator_read+0x226>
    uint8_t hash_length = PSA_HASH_SIZE( hash_alg );
 c0292dc:	2610      	movs	r6, #16
 c0292de:	e7e6      	b.n	c0292ae <mbedcrypto__psa_generator_read+0x21e>
 c0292e0:	2614      	movs	r6, #20
 c0292e2:	e7e4      	b.n	c0292ae <mbedcrypto__psa_generator_read+0x21e>
 c0292e4:	2640      	movs	r6, #64	; 0x40
 c0292e6:	e7e2      	b.n	c0292ae <mbedcrypto__psa_generator_read+0x21e>
 c0292e8:	261c      	movs	r6, #28
 c0292ea:	e7e0      	b.n	c0292ae <mbedcrypto__psa_generator_read+0x21e>
 c0292ec:	2620      	movs	r6, #32
 c0292ee:	e7de      	b.n	c0292ae <mbedcrypto__psa_generator_read+0x21e>
 c0292f0:	2630      	movs	r6, #48	; 0x30
 c0292f2:	e7dc      	b.n	c0292ae <mbedcrypto__psa_generator_read+0x21e>
        if( n > output_length )
 c0292f4:	4543      	cmp	r3, r8
            n = (uint8_t) output_length;
 c0292f6:	bf88      	it	hi
 c0292f8:	fa5f f388 	uxtbhi.w	r3, r8
        memcpy( output, tls12_prf->output_block + tls12_prf->offset_in_block,
 c0292fc:	461a      	mov	r2, r3
 c0292fe:	4658      	mov	r0, fp
 c029300:	4449      	add	r1, r9
 c029302:	9301      	str	r3, [sp, #4]
 c029304:	f7eb fb3b 	bl	c01497e <memcpy>
        output += n;
 c029308:	9b01      	ldr	r3, [sp, #4]
        tls12_prf->offset_in_block += n;
 c02930a:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
        output += n;
 c02930e:	449b      	add	fp, r3
        output_length -= n;
 c029310:	eba8 0803 	sub.w	r8, r8, r3
        tls12_prf->offset_in_block += n;
 c029314:	4413      	add	r3, r2
 c029316:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 c02931a:	e7cc      	b.n	c0292b6 <mbedcrypto__psa_generator_read+0x226>
            return( PSA_ERROR_BAD_STATE );
 c02931c:	f06f 0388 	mvn.w	r3, #136	; 0x88
 c029320:	e6ca      	b.n	c0290b8 <mbedcrypto__psa_generator_read+0x28>
        return( PSA_ERROR_INSUFFICIENT_DATA );
 c029322:	f06f 038e 	mvn.w	r3, #142	; 0x8e
 c029326:	e6bc      	b.n	c0290a2 <mbedcrypto__psa_generator_read+0x12>
 c029328:	31000001 	.word	0x31000001
 c02932c:	30000100 	.word	0x30000100
 c029330:	01000008 	.word	0x01000008
 c029334:	01000013 	.word	0x01000013
 c029338:	30000200 	.word	0x30000200

0c02933c <mbedcrypto__psa_generator_import_key>:
{
 c02933c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c029340:	461c      	mov	r4, r3
    return( PSA_KEY_TYPE_IS_UNSTRUCTURED( type ) );
 c029342:	f001 43c0 	and.w	r3, r1, #1610612736	; 0x60000000
    size_t bytes = PSA_BITS_TO_BYTES( bits );
 c029346:	1dd5      	adds	r5, r2, #7
    if( ! key_type_is_raw_bytes( type ) )
 c029348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 c02934c:	4680      	mov	r8, r0
 c02934e:	460f      	mov	r7, r1
    size_t bytes = PSA_BITS_TO_BYTES( bits );
 c029350:	ea4f 05d5 	mov.w	r5, r5, lsr #3
    if( ! key_type_is_raw_bytes( type ) )
 c029354:	d11b      	bne.n	c02938e <mbedcrypto__psa_generator_import_key+0x52>
    if( bits % 8 != 0 )
 c029356:	0753      	lsls	r3, r2, #29
 c029358:	d119      	bne.n	c02938e <mbedcrypto__psa_generator_import_key+0x52>
    data = mbedtls_calloc( 1, bytes );
 c02935a:	4629      	mov	r1, r5
 c02935c:	2001      	movs	r0, #1
 c02935e:	f7fd f9cd 	bl	c0266fc <mbedtls_calloc>
    if( data == NULL )
 c029362:	4606      	mov	r6, r0
 c029364:	b1b0      	cbz	r0, c029394 <mbedcrypto__psa_generator_import_key+0x58>
    status = psa_generator_read( generator, data, bytes );
 c029366:	4601      	mov	r1, r0
 c029368:	462a      	mov	r2, r5
 c02936a:	4620      	mov	r0, r4
 c02936c:	f7ff fe90 	bl	c029090 <mbedcrypto__psa_generator_read>
    if( status != PSA_SUCCESS )
 c029370:	4604      	mov	r4, r0
 c029372:	b930      	cbnz	r0, c029382 <mbedcrypto__psa_generator_import_key+0x46>
    status = psa_import_key( handle, type, data, bytes );
 c029374:	462b      	mov	r3, r5
 c029376:	4632      	mov	r2, r6
 c029378:	4639      	mov	r1, r7
 c02937a:	4640      	mov	r0, r8
 c02937c:	f7fe f94c 	bl	c027618 <mbedcrypto__psa_import_key>
 c029380:	4604      	mov	r4, r0
    mbedtls_free( data );
 c029382:	4630      	mov	r0, r6
 c029384:	f7fd f9c0 	bl	c026708 <mbedtls_free>
}
 c029388:	4620      	mov	r0, r4
 c02938a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( PSA_ERROR_INVALID_ARGUMENT );
 c02938e:	f06f 0486 	mvn.w	r4, #134	; 0x86
 c029392:	e7f9      	b.n	c029388 <mbedcrypto__psa_generator_import_key+0x4c>
        return( PSA_ERROR_INSUFFICIENT_MEMORY );
 c029394:	f06f 048c 	mvn.w	r4, #140	; 0x8c
 c029398:	e7f6      	b.n	c029388 <mbedcrypto__psa_generator_import_key+0x4c>

0c02939a <mbedcrypto__psa_key_derivation>:
{
 c02939a:	b5f0      	push	{r4, r5, r6, r7, lr}
 c02939c:	4605      	mov	r5, r0
 c02939e:	461f      	mov	r7, r3
    if( generator->alg != 0 )
 c0293a0:	682b      	ldr	r3, [r5, #0]
{
 c0293a2:	b089      	sub	sp, #36	; 0x24
 c0293a4:	4608      	mov	r0, r1
 c0293a6:	4616      	mov	r6, r2
    if( generator->alg != 0 )
 c0293a8:	bb6b      	cbnz	r3, c029406 <mbedcrypto__psa_key_derivation+0x6c>
    if( ! PSA_ALG_IS_KEY_DERIVATION( alg ) )
 c0293aa:	f002 43fe 	and.w	r3, r2, #2130706432	; 0x7f000000
 c0293ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c0293b2:	d004      	beq.n	c0293be <mbedcrypto__psa_key_derivation+0x24>
        return( PSA_ERROR_INVALID_ARGUMENT );
 c0293b4:	f06f 0486 	mvn.w	r4, #134	; 0x86
}
 c0293b8:	4620      	mov	r0, r4
 c0293ba:	b009      	add	sp, #36	; 0x24
 c0293bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = psa_get_key_from_slot( handle, &slot, PSA_KEY_USAGE_DERIVE, alg );
 c0293be:	4613      	mov	r3, r2
 c0293c0:	a907      	add	r1, sp, #28
 c0293c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 c0293c6:	f7fd fd0f 	bl	c026de8 <psa_get_key_from_slot>
    if( status != PSA_SUCCESS )
 c0293ca:	4604      	mov	r4, r0
 c0293cc:	2800      	cmp	r0, #0
 c0293ce:	d1f3      	bne.n	c0293b8 <mbedcrypto__psa_key_derivation+0x1e>
    if( slot->type != PSA_KEY_TYPE_DERIVE )
 c0293d0:	9907      	ldr	r1, [sp, #28]
 c0293d2:	680b      	ldr	r3, [r1, #0]
 c0293d4:	f1b3 4fa4 	cmp.w	r3, #1375731712	; 0x52000000
 c0293d8:	d1ec      	bne.n	c0293b4 <mbedcrypto__psa_key_derivation+0x1a>
    status = psa_key_derivation_internal( generator,
 c0293da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 c0293dc:	4628      	mov	r0, r5
 c0293de:	9304      	str	r3, [sp, #16]
 c0293e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 c0293e2:	9303      	str	r3, [sp, #12]
 c0293e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 c0293e6:	9302      	str	r3, [sp, #8]
 c0293e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 c0293ea:	e9cd 7300 	strd	r7, r3, [sp]
 c0293ee:	4633      	mov	r3, r6
 c0293f0:	e9d1 1207 	ldrd	r1, r2, [r1, #28]
 c0293f4:	f7fe fd04 	bl	c027e00 <psa_key_derivation_internal>
    if( status != PSA_SUCCESS )
 c0293f8:	4604      	mov	r4, r0
 c0293fa:	2800      	cmp	r0, #0
 c0293fc:	d0dc      	beq.n	c0293b8 <mbedcrypto__psa_key_derivation+0x1e>
        psa_generator_abort( generator );
 c0293fe:	4628      	mov	r0, r5
 c029400:	f7ff fdf4 	bl	c028fec <mbedcrypto__psa_generator_abort>
 c029404:	e7d8      	b.n	c0293b8 <mbedcrypto__psa_key_derivation+0x1e>
        return( PSA_ERROR_BAD_STATE );
 c029406:	f06f 0488 	mvn.w	r4, #136	; 0x88
 c02940a:	e7d5      	b.n	c0293b8 <mbedcrypto__psa_key_derivation+0x1e>

0c02940c <mbedcrypto__psa_key_agreement>:
psa_status_t psa_key_agreement( psa_crypto_generator_t *generator,
                                psa_key_handle_t private_key,
                                const uint8_t *peer_key,
                                size_t peer_key_length,
                                psa_algorithm_t alg )
{
 c02940c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 c029410:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 c029412:	4698      	mov	r8, r3
    psa_key_slot_t *slot;
    psa_status_t status;
    if( ! PSA_ALG_IS_KEY_AGREEMENT( alg ) )
 c029414:	f005 43fc 	and.w	r3, r5, #2113929216	; 0x7e000000
 c029418:	f1b3 5f08 	cmp.w	r3, #570425344	; 0x22000000
{
 c02941c:	4606      	mov	r6, r0
 c02941e:	4617      	mov	r7, r2
 c029420:	4608      	mov	r0, r1
    if( ! PSA_ALG_IS_KEY_AGREEMENT( alg ) )
 c029422:	d117      	bne.n	c029454 <mbedcrypto__psa_key_agreement+0x48>
        return( PSA_ERROR_INVALID_ARGUMENT );
    status = psa_get_key_from_slot( private_key, &slot,
 c029424:	462b      	mov	r3, r5
 c029426:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 c02942a:	a903      	add	r1, sp, #12
 c02942c:	f7fd fcdc 	bl	c026de8 <psa_get_key_from_slot>
                                    PSA_KEY_USAGE_DERIVE, alg );
    if( status != PSA_SUCCESS )
 c029430:	4604      	mov	r4, r0
 c029432:	b958      	cbnz	r0, c02944c <mbedcrypto__psa_key_agreement+0x40>
        return( status );
    status = psa_key_agreement_internal( generator,
 c029434:	9500      	str	r5, [sp, #0]
 c029436:	4643      	mov	r3, r8
 c029438:	463a      	mov	r2, r7
 c02943a:	9903      	ldr	r1, [sp, #12]
 c02943c:	4630      	mov	r0, r6
 c02943e:	f7fe fe1f 	bl	c028080 <psa_key_agreement_internal>
                                         slot,
                                         peer_key, peer_key_length,
                                         alg );
    if( status != PSA_SUCCESS )
 c029442:	4604      	mov	r4, r0
 c029444:	b110      	cbz	r0, c02944c <mbedcrypto__psa_key_agreement+0x40>
        psa_generator_abort( generator );
 c029446:	4630      	mov	r0, r6
 c029448:	f7ff fdd0 	bl	c028fec <mbedcrypto__psa_generator_abort>
    return( status );
}
 c02944c:	4620      	mov	r0, r4
 c02944e:	b004      	add	sp, #16
 c029450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( PSA_ERROR_INVALID_ARGUMENT );
 c029454:	f06f 0486 	mvn.w	r4, #134	; 0x86
 c029458:	e7f8      	b.n	c02944c <mbedcrypto__psa_key_agreement+0x40>
	...

0c02945c <mbedcrypto__psa_generate_random>:
/* Random generation */
/****************************************************************/

psa_status_t psa_generate_random( uint8_t *output,
                                  size_t output_size )
{
 c02945c:	b508      	push	{r3, lr}
    int ret;
    GUARD_MODULE_INITIALIZED;
 c02945e:	4b09      	ldr	r3, [pc, #36]	; (c029484 <mbedcrypto__psa_generate_random+0x28>)
{
 c029460:	460a      	mov	r2, r1
    GUARD_MODULE_INITIALIZED;
 c029462:	f893 13c0 	ldrb.w	r1, [r3, #960]	; 0x3c0
 c029466:	07c9      	lsls	r1, r1, #31
 c029468:	d508      	bpl.n	c02947c <mbedcrypto__psa_generate_random+0x20>

    ret = mbedtls_ctr_drbg_random( &global_data.ctr_drbg, output, output_size );
 c02946a:	4601      	mov	r1, r0
 c02946c:	f503 7020 	add.w	r0, r3, #640	; 0x280
 c029470:	f7f7 fa38 	bl	c0208e4 <mbedtls_ctr_drbg_random>
    return( mbedtls_to_psa_error( ret ) );
}
 c029474:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return( mbedtls_to_psa_error( ret ) );
 c029478:	f7fd b95e 	b.w	c026738 <mbedtls_to_psa_error>
}
 c02947c:	f06f 0088 	mvn.w	r0, #136	; 0x88
 c029480:	bd08      	pop	{r3, pc}
 c029482:	bf00      	nop
 c029484:	30038050 	.word	0x30038050

0c029488 <mbedcrypto__psa_generate_key>:
psa_status_t psa_generate_key( psa_key_handle_t handle,
                               psa_key_type_t type,
                               size_t bits,
                               const void *extra,
                               size_t extra_size )
{
 c029488:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 c02948c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 c02948e:	460d      	mov	r5, r1
 c029490:	4616      	mov	r6, r2
    psa_key_slot_t *slot;
    psa_status_t status;

    if( extra == NULL && extra_size != 0 )
 c029492:	4698      	mov	r8, r3
 c029494:	b933      	cbnz	r3, c0294a4 <mbedcrypto__psa_generate_key+0x1c>
 c029496:	b12f      	cbz	r7, c0294a4 <mbedcrypto__psa_generate_key+0x1c>
        return( PSA_ERROR_INVALID_ARGUMENT );
 c029498:	f06f 0486 	mvn.w	r4, #134	; 0x86
        return( psa_save_generated_persistent_key( slot, bits ) );
    }
#endif /* defined(MBEDTLS_PSA_CRYPTO_STORAGE_C) */

    return( status );
}
 c02949c:	4620      	mov	r0, r4
 c02949e:	b004      	add	sp, #16
 c0294a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = psa_get_empty_key_slot( handle, &slot );
 c0294a4:	a903      	add	r1, sp, #12
 c0294a6:	f7fd fb53 	bl	c026b50 <psa_get_empty_key_slot>
    if( status != PSA_SUCCESS )
 c0294aa:	4604      	mov	r4, r0
 c0294ac:	2800      	cmp	r0, #0
 c0294ae:	d1f5      	bne.n	c02949c <mbedcrypto__psa_generate_key+0x14>
    return( PSA_KEY_TYPE_IS_UNSTRUCTURED( type ) );
 c0294b0:	f005 43c0 	and.w	r3, r5, #1610612736	; 0x60000000
    if( key_type_is_raw_bytes( type ) )
 c0294b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c0294b8:	d116      	bne.n	c0294e8 <mbedcrypto__psa_generate_key+0x60>
        status = prepare_raw_data_slot( type, bits, &slot->data.raw );
 c0294ba:	9a03      	ldr	r2, [sp, #12]
 c0294bc:	4631      	mov	r1, r6
 c0294be:	321c      	adds	r2, #28
 c0294c0:	4628      	mov	r0, r5
 c0294c2:	f7fd fcc5 	bl	c026e50 <prepare_raw_data_slot>
        if( status != PSA_SUCCESS )
 c0294c6:	2800      	cmp	r0, #0
 c0294c8:	f040 8085 	bne.w	c0295d6 <mbedcrypto__psa_generate_key+0x14e>
        status = psa_generate_random( slot->data.raw.data,
 c0294cc:	9b03      	ldr	r3, [sp, #12]
 c0294ce:	e9d3 0107 	ldrd	r0, r1, [r3, #28]
 c0294d2:	f7ff ffc3 	bl	c02945c <mbedcrypto__psa_generate_random>
        if( status != PSA_SUCCESS )
 c0294d6:	4606      	mov	r6, r0
 c0294d8:	2800      	cmp	r0, #0
 c0294da:	d042      	beq.n	c029562 <mbedcrypto__psa_generate_key+0xda>
            mbedtls_free( slot->data.raw.data );
 c0294dc:	9b03      	ldr	r3, [sp, #12]
            return( status );
 c0294de:	4634      	mov	r4, r6
            mbedtls_free( slot->data.raw.data );
 c0294e0:	69d8      	ldr	r0, [r3, #28]
 c0294e2:	f7fd f911 	bl	c026708 <mbedtls_free>
            return( status );
 c0294e6:	e7d9      	b.n	c02949c <mbedcrypto__psa_generate_key+0x14>
    if ( type == PSA_KEY_TYPE_RSA_KEYPAIR )
 c0294e8:	4b3c      	ldr	r3, [pc, #240]	; (c0295dc <mbedcrypto__psa_generate_key+0x154>)
 c0294ea:	429d      	cmp	r5, r3
 c0294ec:	d13c      	bne.n	c029568 <mbedcrypto__psa_generate_key+0xe0>
        if( bits > PSA_VENDOR_RSA_MAX_KEY_BITS )
 c0294ee:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
 c0294f2:	d902      	bls.n	c0294fa <mbedcrypto__psa_generate_key+0x72>
            return( PSA_ERROR_NOT_SUPPORTED );
 c0294f4:	f06f 0485 	mvn.w	r4, #133	; 0x85
 c0294f8:	e7d0      	b.n	c02949c <mbedcrypto__psa_generate_key+0x14>
        if( bits % 8 != 0 )
 c0294fa:	0773      	lsls	r3, r6, #29
 c0294fc:	d1fa      	bne.n	c0294f4 <mbedcrypto__psa_generate_key+0x6c>
        if( extra != NULL )
 c0294fe:	f1b8 0f00 	cmp.w	r8, #0
 c029502:	d00f      	beq.n	c029524 <mbedcrypto__psa_generate_key+0x9c>
            if( extra_size != sizeof( *p ) )
 c029504:	2f04      	cmp	r7, #4
 c029506:	d1c7      	bne.n	c029498 <mbedcrypto__psa_generate_key+0x10>
            if( p->e > INT_MAX )
 c029508:	f8d8 8000 	ldr.w	r8, [r8]
 c02950c:	f1b8 0f00 	cmp.w	r8, #0
 c029510:	dbf0      	blt.n	c0294f4 <mbedcrypto__psa_generate_key+0x6c>
        rsa = mbedtls_calloc( 1, sizeof( *rsa ) );
 c029512:	21ac      	movs	r1, #172	; 0xac
 c029514:	2001      	movs	r0, #1
 c029516:	f7fd f8f1 	bl	c0266fc <mbedtls_calloc>
        if( rsa == NULL )
 c02951a:	4607      	mov	r7, r0
 c02951c:	b928      	cbnz	r0, c02952a <mbedcrypto__psa_generate_key+0xa2>
            return( PSA_ERROR_INSUFFICIENT_MEMORY );
 c02951e:	f06f 048c 	mvn.w	r4, #140	; 0x8c
 c029522:	e7bb      	b.n	c02949c <mbedcrypto__psa_generate_key+0x14>
        int exponent = 65537;
 c029524:	f04f 1801 	mov.w	r8, #65537	; 0x10001
 c029528:	e7f3      	b.n	c029512 <mbedcrypto__psa_generate_key+0x8a>
        mbedtls_rsa_init( rsa, MBEDTLS_RSA_PKCS_V15, MBEDTLS_MD_NONE );
 c02952a:	2200      	movs	r2, #0
 c02952c:	4611      	mov	r1, r2
 c02952e:	f000 fbf1 	bl	c029d14 <mbedtls_rsa_init>
        ret = mbedtls_rsa_gen_key( rsa,
 c029532:	4633      	mov	r3, r6
 c029534:	f8cd 8000 	str.w	r8, [sp]
 c029538:	4a29      	ldr	r2, [pc, #164]	; (c0295e0 <mbedcrypto__psa_generate_key+0x158>)
 c02953a:	492a      	ldr	r1, [pc, #168]	; (c0295e4 <mbedcrypto__psa_generate_key+0x15c>)
 c02953c:	4638      	mov	r0, r7
 c02953e:	f001 fc43 	bl	c02adc8 <mbedtls_rsa_gen_key>
        if( ret != 0 )
 c029542:	4606      	mov	r6, r0
 c029544:	b158      	cbz	r0, c02955e <mbedcrypto__psa_generate_key+0xd6>
            mbedtls_rsa_free( rsa );
 c029546:	4638      	mov	r0, r7
 c029548:	f001 fc04 	bl	c02ad54 <mbedtls_rsa_free>
            mbedtls_free( rsa );
 c02954c:	4638      	mov	r0, r7
 c02954e:	f7fd f8db 	bl	c026708 <mbedtls_free>
            return( mbedtls_to_psa_error( ret ) );
 c029552:	4630      	mov	r0, r6
}
 c029554:	b004      	add	sp, #16
 c029556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            return( mbedtls_to_psa_error( ret ) );
 c02955a:	f7fd b8ed 	b.w	c026738 <mbedtls_to_psa_error>
        slot->data.rsa = rsa;
 c02955e:	9b03      	ldr	r3, [sp, #12]
 c029560:	61df      	str	r7, [r3, #28]
    slot->type = type;
 c029562:	9b03      	ldr	r3, [sp, #12]
 c029564:	601d      	str	r5, [r3, #0]
    return( status );
 c029566:	e799      	b.n	c02949c <mbedcrypto__psa_generate_key+0x14>
    if ( PSA_KEY_TYPE_IS_ECC( type ) && PSA_KEY_TYPE_IS_KEYPAIR( type ) )
 c029568:	0c2b      	lsrs	r3, r5, #16
 c02956a:	4a1f      	ldr	r2, [pc, #124]	; (c0295e8 <mbedcrypto__psa_generate_key+0x160>)
 c02956c:	041b      	lsls	r3, r3, #16
 c02956e:	4293      	cmp	r3, r2
 c029570:	d1c0      	bne.n	c0294f4 <mbedcrypto__psa_generate_key+0x6c>
 c029572:	f1a5 0312 	sub.w	r3, r5, #18
 c029576:	b29b      	uxth	r3, r3
 c029578:	2b0c      	cmp	r3, #12
        psa_ecc_curve_t curve = PSA_KEY_TYPE_GET_CURVE( type );
 c02957a:	bf8e      	itee	hi
 c02957c:	4607      	movhi	r7, r0
 c02957e:	4a1b      	ldrls	r2, [pc, #108]	; (c0295ec <mbedcrypto__psa_generate_key+0x164>)
 c029580:	5cd7      	ldrbls	r7, [r2, r3]
        const mbedtls_ecp_curve_info *curve_info =
 c029582:	4638      	mov	r0, r7
 c029584:	f7f8 f9d6 	bl	c021934 <mbedtls_ecp_curve_info_from_grp_id>
        if( extra != NULL )
 c029588:	f1b8 0f00 	cmp.w	r8, #0
 c02958c:	d1b2      	bne.n	c0294f4 <mbedcrypto__psa_generate_key+0x6c>
        if( grp_id == MBEDTLS_ECP_DP_NONE || curve_info == NULL )
 c02958e:	2f00      	cmp	r7, #0
 c029590:	d0b0      	beq.n	c0294f4 <mbedcrypto__psa_generate_key+0x6c>
 c029592:	2800      	cmp	r0, #0
 c029594:	d0ae      	beq.n	c0294f4 <mbedcrypto__psa_generate_key+0x6c>
        if( curve_info->bit_size != bits )
 c029596:	8883      	ldrh	r3, [r0, #4]
 c029598:	42b3      	cmp	r3, r6
 c02959a:	f47f af7d 	bne.w	c029498 <mbedcrypto__psa_generate_key+0x10>
        ecp = mbedtls_calloc( 1, sizeof( *ecp ) );
 c02959e:	21ac      	movs	r1, #172	; 0xac
 c0295a0:	2001      	movs	r0, #1
 c0295a2:	f7fd f8ab 	bl	c0266fc <mbedtls_calloc>
        if( ecp == NULL )
 c0295a6:	4606      	mov	r6, r0
 c0295a8:	2800      	cmp	r0, #0
 c0295aa:	d0b8      	beq.n	c02951e <mbedcrypto__psa_generate_key+0x96>
        mbedtls_ecp_keypair_init( ecp );
 c0295ac:	f7f8 fa0b 	bl	c0219c6 <mbedtls_ecp_keypair_init>
        ret = mbedtls_ecp_gen_key( grp_id, ecp,
 c0295b0:	4638      	mov	r0, r7
 c0295b2:	4b0b      	ldr	r3, [pc, #44]	; (c0295e0 <mbedcrypto__psa_generate_key+0x158>)
 c0295b4:	4a0b      	ldr	r2, [pc, #44]	; (c0295e4 <mbedcrypto__psa_generate_key+0x15c>)
 c0295b6:	4631      	mov	r1, r6
 c0295b8:	f7f9 fcac 	bl	c022f14 <mbedtls_ecp_gen_key>
        if( ret != 0 )
 c0295bc:	4607      	mov	r7, r0
 c0295be:	b138      	cbz	r0, c0295d0 <mbedcrypto__psa_generate_key+0x148>
            mbedtls_ecp_keypair_free( ecp );
 c0295c0:	4630      	mov	r0, r6
 c0295c2:	f7f8 fa43 	bl	c021a4c <mbedtls_ecp_keypair_free>
            mbedtls_free( ecp );
 c0295c6:	4630      	mov	r0, r6
 c0295c8:	f7fd f89e 	bl	c026708 <mbedtls_free>
            return( mbedtls_to_psa_error( ret ) );
 c0295cc:	4638      	mov	r0, r7
 c0295ce:	e7c1      	b.n	c029554 <mbedcrypto__psa_generate_key+0xcc>
        slot->data.ecp = ecp;
 c0295d0:	9b03      	ldr	r3, [sp, #12]
 c0295d2:	61de      	str	r6, [r3, #28]
 c0295d4:	e7c5      	b.n	c029562 <mbedcrypto__psa_generate_key+0xda>
 c0295d6:	4604      	mov	r4, r0
 c0295d8:	e760      	b.n	c02949c <mbedcrypto__psa_generate_key+0x14>
 c0295da:	bf00      	nop
 c0295dc:	70010000 	.word	0x70010000
 c0295e0:	300382d0 	.word	0x300382d0
 c0295e4:	0c0208e5 	.word	0x0c0208e5
 c0295e8:	70030000 	.word	0x70030000
 c0295ec:	0c034f21 	.word	0x0c034f21

0c0295f0 <mbedtls_psa_crypto_free>:
    global_data.entropy_free = entropy_free;
    return( PSA_SUCCESS );
}

void mbedtls_psa_crypto_free( void )
{
 c0295f0:	b510      	push	{r4, lr}
    psa_wipe_all_key_slots( );
    if( global_data.rng_state != RNG_NOT_INITIALIZED )
 c0295f2:	4c0b      	ldr	r4, [pc, #44]	; (c029620 <mbedtls_psa_crypto_free+0x30>)
    psa_wipe_all_key_slots( );
 c0295f4:	f000 f8a8 	bl	c029748 <psa_wipe_all_key_slots>
    if( global_data.rng_state != RNG_NOT_INITIALIZED )
 c0295f8:	f894 33c0 	ldrb.w	r3, [r4, #960]	; 0x3c0
 c0295fc:	f013 0f06 	tst.w	r3, #6
 c029600:	d007      	beq.n	c029612 <mbedtls_psa_crypto_free+0x22>
    {
        mbedtls_ctr_drbg_free( &global_data.ctr_drbg );
 c029602:	f504 7020 	add.w	r0, r4, #640	; 0x280
 c029606:	f7f7 f880 	bl	c02070a <mbedtls_ctr_drbg_free>
        global_data.entropy_free( &global_data.entropy );
 c02960a:	6863      	ldr	r3, [r4, #4]
 c02960c:	f104 0008 	add.w	r0, r4, #8
 c029610:	4798      	blx	r3
    }
    /* Wipe all remaining data, including configuration.
     * In particular, this sets all state indicator to the value
     * indicating "uninitialized". */
    mbedtls_platform_zeroize( &global_data, sizeof( global_data ) );
}
 c029612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( &global_data, sizeof( global_data ) );
 c029616:	f44f 7172 	mov.w	r1, #968	; 0x3c8
 c02961a:	4801      	ldr	r0, [pc, #4]	; (c029620 <mbedtls_psa_crypto_free+0x30>)
 c02961c:	f7fd b884 	b.w	c026728 <mbedtls_platform_zeroize>
 c029620:	30038050 	.word	0x30038050

0c029624 <mbedcrypto__psa_crypto_init>:

psa_status_t psa_crypto_init( void )
{
 c029624:	b530      	push	{r4, r5, lr}
    psa_status_t status;
    const unsigned char drbg_seed[] = "PSA";
 c029626:	4b21      	ldr	r3, [pc, #132]	; (c0296ac <mbedcrypto__psa_crypto_init+0x88>)

    /* Double initialization is explicitly allowed. */
    if( global_data.initialized != 0 )
 c029628:	4c21      	ldr	r4, [pc, #132]	; (c0296b0 <mbedcrypto__psa_crypto_init+0x8c>)
{
 c02962a:	b085      	sub	sp, #20
    const unsigned char drbg_seed[] = "PSA";
 c02962c:	9303      	str	r3, [sp, #12]
    if( global_data.initialized != 0 )
 c02962e:	f894 33c0 	ldrb.w	r3, [r4, #960]	; 0x3c0
 c029632:	07db      	lsls	r3, r3, #31
 c029634:	d435      	bmi.n	c0296a2 <mbedcrypto__psa_crypto_init+0x7e>
        return( PSA_SUCCESS );

    /* Set default configuration if
     * mbedtls_psa_crypto_configure_entropy_sources() hasn't been called. */
    if( global_data.entropy_init == NULL )
 c029636:	6823      	ldr	r3, [r4, #0]
 c029638:	b90b      	cbnz	r3, c02963e <mbedcrypto__psa_crypto_init+0x1a>
        global_data.entropy_init = mbedtls_entropy_init;
 c02963a:	4b1e      	ldr	r3, [pc, #120]	; (c0296b4 <mbedcrypto__psa_crypto_init+0x90>)
 c02963c:	6023      	str	r3, [r4, #0]
    if( global_data.entropy_free == NULL )
 c02963e:	6863      	ldr	r3, [r4, #4]
 c029640:	b90b      	cbnz	r3, c029646 <mbedcrypto__psa_crypto_init+0x22>
        global_data.entropy_free = mbedtls_entropy_free;
 c029642:	4b1d      	ldr	r3, [pc, #116]	; (c0296b8 <mbedcrypto__psa_crypto_init+0x94>)
 c029644:	6063      	str	r3, [r4, #4]

    /* Initialize the random generator. */
    global_data.entropy_init( &global_data.entropy );
 c029646:	6823      	ldr	r3, [r4, #0]
 c029648:	481c      	ldr	r0, [pc, #112]	; (c0296bc <mbedcrypto__psa_crypto_init+0x98>)
 c02964a:	4798      	blx	r3
    mbedtls_entropy_add_source( &global_data.entropy,
                                mbedtls_nv_seed_poll, NULL,
                                MBEDTLS_ENTROPY_BLOCK_SIZE,
                                MBEDTLS_ENTROPY_SOURCE_STRONG );
#endif
    mbedtls_ctr_drbg_init( &global_data.ctr_drbg );
 c02964c:	481c      	ldr	r0, [pc, #112]	; (c0296c0 <mbedcrypto__psa_crypto_init+0x9c>)
 c02964e:	f7f7 f857 	bl	c020700 <mbedtls_ctr_drbg_init>
    global_data.rng_state = RNG_INITIALIZED;
 c029652:	2201      	movs	r2, #1
 c029654:	f894 33c0 	ldrb.w	r3, [r4, #960]	; 0x3c0
    status = mbedtls_to_psa_error(
 c029658:	491a      	ldr	r1, [pc, #104]	; (c0296c4 <mbedcrypto__psa_crypto_init+0xa0>)
    global_data.rng_state = RNG_INITIALIZED;
 c02965a:	f362 0342 	bfi	r3, r2, #1, #2
 c02965e:	f884 33c0 	strb.w	r3, [r4, #960]	; 0x3c0
    status = mbedtls_to_psa_error(
 c029662:	2303      	movs	r3, #3
 c029664:	4a15      	ldr	r2, [pc, #84]	; (c0296bc <mbedcrypto__psa_crypto_init+0x98>)
 c029666:	9300      	str	r3, [sp, #0]
 c029668:	f502 701e 	add.w	r0, r2, #632	; 0x278
 c02966c:	ab03      	add	r3, sp, #12
 c02966e:	f7f7 f8c5 	bl	c0207fc <mbedtls_ctr_drbg_seed>
 c029672:	f7fd f861 	bl	c026738 <mbedtls_to_psa_error>
        mbedtls_ctr_drbg_seed( &global_data.ctr_drbg,
                               mbedtls_entropy_func,
                               &global_data.entropy,
                               drbg_seed, sizeof( drbg_seed ) - 1 ) );
    if( status != PSA_SUCCESS )
 c029676:	4605      	mov	r5, r0
 c029678:	b9a8      	cbnz	r0, c0296a6 <mbedcrypto__psa_crypto_init+0x82>
        goto exit;
    global_data.rng_state = RNG_SEEDED;
 c02967a:	2202      	movs	r2, #2
 c02967c:	f894 33c0 	ldrb.w	r3, [r4, #960]	; 0x3c0
 c029680:	f362 0342 	bfi	r3, r2, #1, #2
 c029684:	f884 33c0 	strb.w	r3, [r4, #960]	; 0x3c0

    status = psa_initialize_key_slots( );
 c029688:	f000 f852 	bl	c029730 <psa_initialize_key_slots>
    if( status != PSA_SUCCESS )
 c02968c:	4605      	mov	r5, r0
 c02968e:	b950      	cbnz	r0, c0296a6 <mbedcrypto__psa_crypto_init+0x82>
        goto exit;

    /* All done. */
    global_data.initialized = 1;
 c029690:	f894 33c0 	ldrb.w	r3, [r4, #960]	; 0x3c0
 c029694:	f043 0301 	orr.w	r3, r3, #1
 c029698:	f884 33c0 	strb.w	r3, [r4, #960]	; 0x3c0

exit:
    if( status != PSA_SUCCESS )
        mbedtls_psa_crypto_free( );
    return( status );
}
 c02969c:	4628      	mov	r0, r5
 c02969e:	b005      	add	sp, #20
 c0296a0:	bd30      	pop	{r4, r5, pc}
        return( PSA_SUCCESS );
 c0296a2:	2500      	movs	r5, #0
 c0296a4:	e7fa      	b.n	c02969c <mbedcrypto__psa_crypto_init+0x78>
        mbedtls_psa_crypto_free( );
 c0296a6:	f7ff ffa3 	bl	c0295f0 <mbedtls_psa_crypto_free>
 c0296aa:	e7f7      	b.n	c02969c <mbedcrypto__psa_crypto_init+0x78>
 c0296ac:	00415350 	.word	0x00415350
 c0296b0:	30038050 	.word	0x30038050
 c0296b4:	0c023891 	.word	0x0c023891
 c0296b8:	0c0238d9 	.word	0x0c0238d9
 c0296bc:	30038058 	.word	0x30038058
 c0296c0:	300382d0 	.word	0x300382d0
 c0296c4:	0c0238f9 	.word	0x0c0238f9

0c0296c8 <psa_internal_allocate_key_slot>:
 * \retval #PSA_SUCCESS
 * \retval #PSA_ERROR_INSUFFICIENT_MEMORY
 */
static psa_status_t psa_internal_allocate_key_slot( psa_key_handle_t *handle )
{
    for( *handle = PSA_KEY_SLOT_COUNT; *handle != 0; --( *handle ) )
 c0296c8:	2320      	movs	r3, #32
{
 c0296ca:	b570      	push	{r4, r5, r6, lr}
    {
        psa_key_slot_t *slot = &global_data.key_slots[*handle - 1];
        if( ! slot->allocated )
 c0296cc:	2624      	movs	r6, #36	; 0x24
 c0296ce:	4d0a      	ldr	r5, [pc, #40]	; (c0296f8 <psa_internal_allocate_key_slot+0x30>)
    for( *handle = PSA_KEY_SLOT_COUNT; *handle != 0; --( *handle ) )
 c0296d0:	8003      	strh	r3, [r0, #0]
 c0296d2:	8803      	ldrh	r3, [r0, #0]
 c0296d4:	b913      	cbnz	r3, c0296dc <psa_internal_allocate_key_slot+0x14>
        {
            slot->allocated = 1;
            return( PSA_SUCCESS );
        }
    }
    return( PSA_ERROR_INSUFFICIENT_MEMORY );
 c0296d6:	f06f 008c 	mvn.w	r0, #140	; 0x8c
 c0296da:	e00a      	b.n	c0296f2 <psa_internal_allocate_key_slot+0x2a>
        psa_key_slot_t *slot = &global_data.key_slots[*handle - 1];
 c0296dc:	3b01      	subs	r3, #1
        if( ! slot->allocated )
 c0296de:	fb06 5403 	mla	r4, r6, r3, r5
 c0296e2:	7e22      	ldrb	r2, [r4, #24]
 c0296e4:	f012 0101 	ands.w	r1, r2, #1
 c0296e8:	d104      	bne.n	c0296f4 <psa_internal_allocate_key_slot+0x2c>
            return( PSA_SUCCESS );
 c0296ea:	4608      	mov	r0, r1
            slot->allocated = 1;
 c0296ec:	f042 0201 	orr.w	r2, r2, #1
 c0296f0:	7622      	strb	r2, [r4, #24]
}
 c0296f2:	bd70      	pop	{r4, r5, r6, pc}
    for( *handle = PSA_KEY_SLOT_COUNT; *handle != 0; --( *handle ) )
 c0296f4:	8003      	strh	r3, [r0, #0]
 c0296f6:	e7ec      	b.n	c0296d2 <psa_internal_allocate_key_slot+0xa>
 c0296f8:	30038418 	.word	0x30038418

0c0296fc <psa_get_key_slot>:
    if( ! global_data.key_slots_initialized )
 c0296fc:	4b0b      	ldr	r3, [pc, #44]	; (c02972c <psa_get_key_slot+0x30>)
 c0296fe:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 c029702:	07d2      	lsls	r2, r2, #31
 c029704:	d50c      	bpl.n	c029720 <psa_get_key_slot+0x24>
    if( handle == 0 || handle > ARRAY_LENGTH( global_data.key_slots ) )
 c029706:	3801      	subs	r0, #1
 c029708:	b282      	uxth	r2, r0
 c02970a:	2a1f      	cmp	r2, #31
 c02970c:	d80b      	bhi.n	c029726 <psa_get_key_slot+0x2a>
    slot = &global_data.key_slots[handle - 1];
 c02970e:	2224      	movs	r2, #36	; 0x24
 c029710:	fb02 3000 	mla	r0, r2, r0, r3
    if( ! slot->allocated )
 c029714:	7e03      	ldrb	r3, [r0, #24]
 c029716:	07db      	lsls	r3, r3, #31
 c029718:	d505      	bpl.n	c029726 <psa_get_key_slot+0x2a>
    *p_slot = slot;
 c02971a:	6008      	str	r0, [r1, #0]
    return( PSA_SUCCESS );
 c02971c:	2000      	movs	r0, #0
 c02971e:	4770      	bx	lr
        return( PSA_ERROR_BAD_STATE );
 c029720:	f06f 0088 	mvn.w	r0, #136	; 0x88
 c029724:	4770      	bx	lr
        return( PSA_ERROR_INVALID_HANDLE );
 c029726:	f06f 0087 	mvn.w	r0, #135	; 0x87
}
 c02972a:	4770      	bx	lr
 c02972c:	30038418 	.word	0x30038418

0c029730 <psa_initialize_key_slots>:
    global_data.key_slots_initialized = 1;
 c029730:	4a04      	ldr	r2, [pc, #16]	; (c029744 <psa_initialize_key_slots+0x14>)
}
 c029732:	2000      	movs	r0, #0
    global_data.key_slots_initialized = 1;
 c029734:	f892 3480 	ldrb.w	r3, [r2, #1152]	; 0x480
 c029738:	f043 0301 	orr.w	r3, r3, #1
 c02973c:	f882 3480 	strb.w	r3, [r2, #1152]	; 0x480
}
 c029740:	4770      	bx	lr
 c029742:	bf00      	nop
 c029744:	30038418 	.word	0x30038418

0c029748 <psa_wipe_all_key_slots>:
{
 c029748:	b570      	push	{r4, r5, r6, lr}
 c02974a:	2400      	movs	r4, #0
        (void) psa_wipe_key_slot( slot );
 c02974c:	2624      	movs	r6, #36	; 0x24
 c02974e:	4d07      	ldr	r5, [pc, #28]	; (c02976c <psa_wipe_all_key_slots+0x24>)
 c029750:	fb06 5004 	mla	r0, r6, r4, r5
 c029754:	3401      	adds	r4, #1
 c029756:	f7fd ff2f 	bl	c0275b8 <psa_wipe_key_slot>
    for( key = 1; key <= PSA_KEY_SLOT_COUNT; key++ )
 c02975a:	2c20      	cmp	r4, #32
 c02975c:	d1f8      	bne.n	c029750 <psa_wipe_all_key_slots+0x8>
    global_data.key_slots_initialized = 0;
 c02975e:	f895 3480 	ldrb.w	r3, [r5, #1152]	; 0x480
 c029762:	f36f 0300 	bfc	r3, #0, #1
 c029766:	f885 3480 	strb.w	r3, [r5, #1152]	; 0x480
}
 c02976a:	bd70      	pop	{r4, r5, r6, pc}
 c02976c:	30038418 	.word	0x30038418

0c029770 <mbedcrypto__psa_allocate_key>:
    return( psa_wipe_key_slot( slot ) );
}

psa_status_t psa_allocate_key( psa_key_handle_t *handle )
{
    *handle = 0;
 c029770:	2200      	movs	r2, #0
 c029772:	8002      	strh	r2, [r0, #0]
    return( psa_internal_allocate_key_slot( handle ) );
 c029774:	f7ff bfa8 	b.w	c0296c8 <psa_internal_allocate_key_slot>

0c029778 <mgf_mask>:
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 c029778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02977c:	b095      	sub	sp, #84	; 0x54
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 c02977e:	ae04      	add	r6, sp, #16
{
 c029780:	4607      	mov	r7, r0
 c029782:	460c      	mov	r4, r1
 c029784:	4691      	mov	r9, r2
    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 c029786:	2100      	movs	r1, #0
 c029788:	2240      	movs	r2, #64	; 0x40
 c02978a:	4630      	mov	r0, r6
{
 c02978c:	9301      	str	r3, [sp, #4]
 c02978e:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 c029790:	f7eb f919 	bl	c0149c6 <memset>
    memset( counter, 0, 4 );
 c029794:	2300      	movs	r3, #0
 c029796:	f10d 0850 	add.w	r8, sp, #80	; 0x50

    hlen = mbedtls_md_get_size( md_ctx->md_info );
 c02979a:	6828      	ldr	r0, [r5, #0]
    memset( counter, 0, 4 );
 c02979c:	f848 3d44 	str.w	r3, [r8, #-68]!
    hlen = mbedtls_md_get_size( md_ctx->md_info );
 c0297a0:	f7fa ff08 	bl	c0245b4 <mbedtls_md_get_size>
 c0297a4:	4682      	mov	sl, r0

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
 c0297a6:	b954      	cbnz	r4, c0297be <mgf_mask+0x46>
        counter[3]++;

        dlen -= use_len;
    }

exit:
 c0297a8:	4623      	mov	r3, r4
    mbedtls_platform_zeroize( mask, sizeof( mask ) );
 c0297aa:	4630      	mov	r0, r6
 c0297ac:	2140      	movs	r1, #64	; 0x40
 c0297ae:	9301      	str	r3, [sp, #4]
 c0297b0:	f7fc ffba 	bl	c026728 <mbedtls_platform_zeroize>

    return( ret );
}
 c0297b4:	9b01      	ldr	r3, [sp, #4]
 c0297b6:	4618      	mov	r0, r3
 c0297b8:	b015      	add	sp, #84	; 0x54
 c0297ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c0297be:	4554      	cmp	r4, sl
        if( ( ret = mbedtls_md_starts( md_ctx ) ) != 0 )
 c0297c0:	4628      	mov	r0, r5
 c0297c2:	46a3      	mov	fp, r4
 c0297c4:	bf28      	it	cs
 c0297c6:	46d3      	movcs	fp, sl
 c0297c8:	f7fa fe0a 	bl	c0243e0 <mbedtls_md_starts>
 c0297cc:	4603      	mov	r3, r0
 c0297ce:	2800      	cmp	r0, #0
 c0297d0:	d1eb      	bne.n	c0297aa <mgf_mask+0x32>
        if( ( ret = mbedtls_md_update( md_ctx, src, slen ) ) != 0 )
 c0297d2:	9a01      	ldr	r2, [sp, #4]
 c0297d4:	4649      	mov	r1, r9
 c0297d6:	4628      	mov	r0, r5
 c0297d8:	f7fa fe0c 	bl	c0243f4 <mbedtls_md_update>
 c0297dc:	4603      	mov	r3, r0
 c0297de:	2800      	cmp	r0, #0
 c0297e0:	d1e3      	bne.n	c0297aa <mgf_mask+0x32>
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
 c0297e2:	2204      	movs	r2, #4
 c0297e4:	4641      	mov	r1, r8
 c0297e6:	4628      	mov	r0, r5
 c0297e8:	f7fa fe04 	bl	c0243f4 <mbedtls_md_update>
 c0297ec:	4603      	mov	r3, r0
 c0297ee:	2800      	cmp	r0, #0
 c0297f0:	d1db      	bne.n	c0297aa <mgf_mask+0x32>
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
 c0297f2:	4631      	mov	r1, r6
 c0297f4:	4628      	mov	r0, r5
 c0297f6:	f7fa fe07 	bl	c024408 <mbedtls_md_finish>
 c0297fa:	4603      	mov	r3, r0
 c0297fc:	2800      	cmp	r0, #0
 c0297fe:	d1d4      	bne.n	c0297aa <mgf_mask+0x32>
 c029800:	463a      	mov	r2, r7
        for( i = 0; i < use_len; ++i )
 c029802:	455b      	cmp	r3, fp
 c029804:	d107      	bne.n	c029816 <mgf_mask+0x9e>
        counter[3]++;
 c029806:	f89d 200f 	ldrb.w	r2, [sp, #15]
 c02980a:	441f      	add	r7, r3
 c02980c:	3201      	adds	r2, #1
 c02980e:	f88d 200f 	strb.w	r2, [sp, #15]
        dlen -= use_len;
 c029812:	1ae4      	subs	r4, r4, r3
 c029814:	e7c7      	b.n	c0297a6 <mgf_mask+0x2e>
            *p++ ^= mask[i];
 c029816:	f812 1b01 	ldrb.w	r1, [r2], #1
 c02981a:	5cf0      	ldrb	r0, [r6, r3]
        for( i = 0; i < use_len; ++i )
 c02981c:	3301      	adds	r3, #1
            *p++ ^= mask[i];
 c02981e:	4041      	eors	r1, r0
 c029820:	f802 1c01 	strb.w	r1, [r2, #-1]
 c029824:	e7ed      	b.n	c029802 <mgf_mask+0x8a>
	...

0c029828 <rsa_rsassa_pkcs1_v15_encode>:
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
 c029828:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 c02982c:	461d      	mov	r5, r3
    size_t oid_size  = 0;
 c02982e:	2300      	movs	r3, #0
{
 c029830:	460e      	mov	r6, r1
 c029832:	4690      	mov	r8, r2
 c029834:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    size_t nb_pad    = dst_len;
    unsigned char *p = dst;
    const char *oid  = NULL;
 c029836:	e9cd 3300 	strd	r3, r3, [sp]

    /* Are we signing hashed or raw data? */
    if( md_alg != MBEDTLS_MD_NONE )
 c02983a:	4604      	mov	r4, r0
 c02983c:	2800      	cmp	r0, #0
 c02983e:	d064      	beq.n	c02990a <rsa_rsassa_pkcs1_v15_encode+0xe2>
    {
        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
 c029840:	f7fa fd82 	bl	c024348 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 c029844:	4606      	mov	r6, r0
 c029846:	b920      	cbnz	r0, c029852 <rsa_rsassa_pkcs1_v15_encode+0x2a>
    /* Just a sanity-check, should be automatic
     * after the initial bounds check. */
    if( p != dst + dst_len )
    {
        mbedtls_platform_zeroize( dst, dst_len );
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c029848:	4c3c      	ldr	r4, [pc, #240]	; (c02993c <rsa_rsassa_pkcs1_v15_encode+0x114>)
    }

    return( 0 );
}
 c02984a:	4620      	mov	r0, r4
 c02984c:	b002      	add	sp, #8
 c02984e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
 c029852:	4620      	mov	r0, r4
 c029854:	466a      	mov	r2, sp
 c029856:	a901      	add	r1, sp, #4
 c029858:	f7fb f8c6 	bl	c0249e8 <mbedtls_oid_get_oid_by_md>
 c02985c:	4604      	mov	r4, r0
 c02985e:	2800      	cmp	r0, #0
 c029860:	d1f2      	bne.n	c029848 <rsa_rsassa_pkcs1_v15_encode+0x20>
        hashlen = mbedtls_md_get_size( md_info );
 c029862:	4630      	mov	r0, r6
 c029864:	f7fa fea6 	bl	c0245b4 <mbedtls_md_get_size>
        if( 8 + hashlen + oid_size  >= 0x80         ||
 c029868:	9e00      	ldr	r6, [sp, #0]
        hashlen = mbedtls_md_get_size( md_info );
 c02986a:	4681      	mov	r9, r0
        if( 8 + hashlen + oid_size  >= 0x80         ||
 c02986c:	1983      	adds	r3, r0, r6
 c02986e:	f103 0208 	add.w	r2, r3, #8
 c029872:	2a7f      	cmp	r2, #127	; 0x7f
 c029874:	d8e8      	bhi.n	c029848 <rsa_rsassa_pkcs1_v15_encode+0x20>
            10 + hashlen + oid_size <  10 + hashlen )
 c029876:	f103 020a 	add.w	r2, r3, #10
 c02987a:	f100 010a 	add.w	r1, r0, #10
            10 + hashlen            <  hashlen      ||
 c02987e:	428a      	cmp	r2, r1
 c029880:	d3e2      	bcc.n	c029848 <rsa_rsassa_pkcs1_v15_encode+0x20>
        if( nb_pad < 10 + hashlen + oid_size )
 c029882:	42aa      	cmp	r2, r5
 c029884:	d8e0      	bhi.n	c029848 <rsa_rsassa_pkcs1_v15_encode+0x20>
        nb_pad -= 10 + hashlen + oid_size;
 c029886:	f1a5 060a 	sub.w	r6, r5, #10
 c02988a:	1af6      	subs	r6, r6, r3
    if( nb_pad < 3 + 8 )
 c02988c:	2e0a      	cmp	r6, #10
 c02988e:	d9db      	bls.n	c029848 <rsa_rsassa_pkcs1_v15_encode+0x20>
    *p++ = 0;
 c029890:	46ba      	mov	sl, r7
    *p++ = MBEDTLS_RSA_SIGN;
 c029892:	2301      	movs	r3, #1
    *p++ = 0;
 c029894:	f80a 4b02 	strb.w	r4, [sl], #2
    nb_pad -= 3;
 c029898:	3e03      	subs	r6, #3
    memset( p, 0xFF, nb_pad );
 c02989a:	4632      	mov	r2, r6
    *p++ = MBEDTLS_RSA_SIGN;
 c02989c:	707b      	strb	r3, [r7, #1]
    memset( p, 0xFF, nb_pad );
 c02989e:	21ff      	movs	r1, #255	; 0xff
 c0298a0:	4650      	mov	r0, sl
 c0298a2:	f7eb f890 	bl	c0149c6 <memset>
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 c0298a6:	2130      	movs	r1, #48	; 0x30
    p += nb_pad;
 c0298a8:	eb0a 0306 	add.w	r3, sl, r6
    *p++ = 0;
 c0298ac:	f80a 4006 	strb.w	r4, [sl, r6]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 c0298b0:	7059      	strb	r1, [r3, #1]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 c0298b2:	9e00      	ldr	r6, [sp, #0]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 c0298b4:	70d9      	strb	r1, [r3, #3]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 c0298b6:	f106 0208 	add.w	r2, r6, #8
 c0298ba:	444a      	add	r2, r9
 c0298bc:	709a      	strb	r2, [r3, #2]
    *p++ = (unsigned char)( 0x04 + oid_size );
 c0298be:	b2f2      	uxtb	r2, r6
 c0298c0:	1d11      	adds	r1, r2, #4
 c0298c2:	7119      	strb	r1, [r3, #4]
    *p++ = MBEDTLS_ASN1_OID;
 c0298c4:	2106      	movs	r1, #6
    *p++ = (unsigned char) oid_size;
 c0298c6:	f103 0a07 	add.w	sl, r3, #7
    *p++ = MBEDTLS_ASN1_OID;
 c0298ca:	7159      	strb	r1, [r3, #5]
    *p++ = (unsigned char) oid_size;
 c0298cc:	719a      	strb	r2, [r3, #6]
    memcpy( p, oid, oid_size );
 c0298ce:	9901      	ldr	r1, [sp, #4]
 c0298d0:	4632      	mov	r2, r6
 c0298d2:	4650      	mov	r0, sl
 c0298d4:	f7eb f853 	bl	c01497e <memcpy>
    *p++ = MBEDTLS_ASN1_NULL;
 c0298d8:	2305      	movs	r3, #5
 c0298da:	f80a 3006 	strb.w	r3, [sl, r6]
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 c0298de:	2304      	movs	r3, #4
    p += oid_size;
 c0298e0:	eb0a 0206 	add.w	r2, sl, r6
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 c0298e4:	7093      	strb	r3, [r2, #2]
    *p++ = (unsigned char) hashlen;
 c0298e6:	18d3      	adds	r3, r2, r3
 c0298e8:	f882 9003 	strb.w	r9, [r2, #3]
    *p++ = 0x00;
 c0298ec:	7054      	strb	r4, [r2, #1]
    memcpy( p, hash, hashlen );
 c0298ee:	4641      	mov	r1, r8
 c0298f0:	464a      	mov	r2, r9
 c0298f2:	4618      	mov	r0, r3
 c0298f4:	f7eb f843 	bl	c01497e <memcpy>
    if( p != dst + dst_len )
 c0298f8:	197a      	adds	r2, r7, r5
    p += hashlen;
 c0298fa:	4481      	add	r9, r0
    if( p != dst + dst_len )
 c0298fc:	454a      	cmp	r2, r9
 c0298fe:	d0a4      	beq.n	c02984a <rsa_rsassa_pkcs1_v15_encode+0x22>
        mbedtls_platform_zeroize( dst, dst_len );
 c029900:	4629      	mov	r1, r5
 c029902:	4638      	mov	r0, r7
 c029904:	f7fc ff10 	bl	c026728 <mbedtls_platform_zeroize>
 c029908:	e79e      	b.n	c029848 <rsa_rsassa_pkcs1_v15_encode+0x20>
        if( nb_pad < hashlen )
 c02990a:	428d      	cmp	r5, r1
 c02990c:	d39c      	bcc.n	c029848 <rsa_rsassa_pkcs1_v15_encode+0x20>
        nb_pad -= hashlen;
 c02990e:	1a6d      	subs	r5, r5, r1
    if( nb_pad < 3 + 8 )
 c029910:	2d0a      	cmp	r5, #10
 c029912:	d999      	bls.n	c029848 <rsa_rsassa_pkcs1_v15_encode+0x20>
    *p++ = 0;
 c029914:	463b      	mov	r3, r7
    *p++ = MBEDTLS_RSA_SIGN;
 c029916:	2201      	movs	r2, #1
    nb_pad -= 3;
 c029918:	3d03      	subs	r5, #3
    *p++ = 0;
 c02991a:	f803 0b02 	strb.w	r0, [r3], #2
    memset( p, 0xFF, nb_pad );
 c02991e:	21ff      	movs	r1, #255	; 0xff
    *p++ = MBEDTLS_RSA_SIGN;
 c029920:	707a      	strb	r2, [r7, #1]
    memset( p, 0xFF, nb_pad );
 c029922:	4618      	mov	r0, r3
 c029924:	462a      	mov	r2, r5
 c029926:	f7eb f84e 	bl	c0149c6 <memset>
 c02992a:	4603      	mov	r3, r0
    p += nb_pad;
 c02992c:	4428      	add	r0, r5
    *p++ = 0;
 c02992e:	555c      	strb	r4, [r3, r5]
        memcpy( p, hash, hashlen );
 c029930:	4632      	mov	r2, r6
 c029932:	4641      	mov	r1, r8
 c029934:	3001      	adds	r0, #1
 c029936:	f7eb f822 	bl	c01497e <memcpy>
        return( 0 );
 c02993a:	e786      	b.n	c02984a <rsa_rsassa_pkcs1_v15_encode+0x22>
 c02993c:	ffffbf80 	.word	0xffffbf80

0c029940 <rsa_check_context.isra.0>:
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 c029940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 c029942:	f100 0508 	add.w	r5, r0, #8
 c029946:	6847      	ldr	r7, [r0, #4]
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 c029948:	4604      	mov	r4, r0
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 c02994a:	4628      	mov	r0, r5
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 c02994c:	460e      	mov	r6, r1
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 c02994e:	f7f4 fa3d 	bl	c01ddcc <mbedtls_mpi_size>
 c029952:	4287      	cmp	r7, r0
 c029954:	d001      	beq.n	c02995a <rsa_check_context.isra.0+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c029956:	4827      	ldr	r0, [pc, #156]	; (c0299f4 <rsa_check_context.isra.0+0xb4>)
}
 c029958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 c02995a:	6863      	ldr	r3, [r4, #4]
 c02995c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c029960:	d8f9      	bhi.n	c029956 <rsa_check_context.isra.0+0x16>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 c029962:	2100      	movs	r1, #0
 c029964:	4628      	mov	r0, r5
 c029966:	f7f4 fc65 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c02996a:	2800      	cmp	r0, #0
 c02996c:	ddf3      	ble.n	c029956 <rsa_check_context.isra.0+0x16>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
 c02996e:	2100      	movs	r1, #0
 c029970:	4628      	mov	r0, r5
 c029972:	f7f4 f9b7 	bl	c01dce4 <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 c029976:	2800      	cmp	r0, #0
 c029978:	d0ed      	beq.n	c029956 <rsa_check_context.isra.0+0x16>
    if( is_priv &&
 c02997a:	b9f6      	cbnz	r6, c0299ba <rsa_check_context.isra.0+0x7a>
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
 c02997c:	2100      	movs	r1, #0
 c02997e:	f104 0014 	add.w	r0, r4, #20
 c029982:	f7f4 fc57 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c029986:	2800      	cmp	r0, #0
 c029988:	dde5      	ble.n	c029956 <rsa_check_context.isra.0+0x16>
    if( is_priv &&
 c02998a:	b1a6      	cbz	r6, c0299b6 <rsa_check_context.isra.0+0x76>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 c02998c:	2100      	movs	r1, #0
 c02998e:	f104 0044 	add.w	r0, r4, #68	; 0x44
 c029992:	f7f4 fc4f 	bl	c01e234 <mbedtls_mpi_cmp_int>
    if( is_priv &&
 c029996:	2800      	cmp	r0, #0
 c029998:	dddd      	ble.n	c029956 <rsa_check_context.isra.0+0x16>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
 c02999a:	2100      	movs	r1, #0
 c02999c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 c0299a0:	f7f4 fc48 	bl	c01e234 <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 c0299a4:	2800      	cmp	r0, #0
 c0299a6:	ddd6      	ble.n	c029956 <rsa_check_context.isra.0+0x16>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
 c0299a8:	2100      	movs	r1, #0
 c0299aa:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 c0299ae:	f7f4 fc41 	bl	c01e234 <mbedtls_mpi_cmp_int>
    if( is_priv &&
 c0299b2:	2800      	cmp	r0, #0
 c0299b4:	ddcf      	ble.n	c029956 <rsa_check_context.isra.0+0x16>
    return( 0 );
 c0299b6:	2000      	movs	r0, #0
 c0299b8:	e7ce      	b.n	c029958 <rsa_check_context.isra.0+0x18>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 c0299ba:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 c0299be:	2100      	movs	r1, #0
 c0299c0:	4628      	mov	r0, r5
 c0299c2:	f7f4 fc37 	bl	c01e234 <mbedtls_mpi_cmp_int>
    if( is_priv &&
 c0299c6:	2800      	cmp	r0, #0
 c0299c8:	ddc5      	ble.n	c029956 <rsa_check_context.isra.0+0x16>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 c0299ca:	2100      	movs	r1, #0
 c0299cc:	4628      	mov	r0, r5
 c0299ce:	f7f4 f989 	bl	c01dce4 <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 c0299d2:	2800      	cmp	r0, #0
 c0299d4:	d0bf      	beq.n	c029956 <rsa_check_context.isra.0+0x16>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 c0299d6:	f104 0538 	add.w	r5, r4, #56	; 0x38
 c0299da:	2100      	movs	r1, #0
 c0299dc:	4628      	mov	r0, r5
 c0299de:	f7f4 fc29 	bl	c01e234 <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 c0299e2:	2800      	cmp	r0, #0
 c0299e4:	ddb7      	ble.n	c029956 <rsa_check_context.isra.0+0x16>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
 c0299e6:	2100      	movs	r1, #0
 c0299e8:	4628      	mov	r0, r5
 c0299ea:	f7f4 f97b 	bl	c01dce4 <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 c0299ee:	2800      	cmp	r0, #0
 c0299f0:	d1c4      	bne.n	c02997c <rsa_check_context.isra.0+0x3c>
 c0299f2:	e7b0      	b.n	c029956 <rsa_check_context.isra.0+0x16>
 c0299f4:	ffffbf80 	.word	0xffffbf80

0c0299f8 <mbedtls_rsa_import_raw>:
{
 c0299f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c0299fc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 c0299fe:	4604      	mov	r4, r0
 c029a00:	4698      	mov	r8, r3
 c029a02:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 c029a04:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    if( N != NULL )
 c029a06:	b149      	cbz	r1, c029a1c <mbedtls_rsa_import_raw+0x24>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
 c029a08:	f100 0908 	add.w	r9, r0, #8
 c029a0c:	4648      	mov	r0, r9
 c029a0e:	f7f4 fa17 	bl	c01de40 <mbedtls_mpi_read_binary>
 c029a12:	b9a0      	cbnz	r0, c029a3e <mbedtls_rsa_import_raw+0x46>
        ctx->len = mbedtls_mpi_size( &ctx->N );
 c029a14:	4648      	mov	r0, r9
 c029a16:	f7f4 f9d9 	bl	c01ddcc <mbedtls_mpi_size>
 c029a1a:	6060      	str	r0, [r4, #4]
    if( P != NULL )
 c029a1c:	f1b8 0f00 	cmp.w	r8, #0
 c029a20:	d105      	bne.n	c029a2e <mbedtls_rsa_import_raw+0x36>
    if( Q != NULL )
 c029a22:	b97f      	cbnz	r7, c029a44 <mbedtls_rsa_import_raw+0x4c>
    if( D != NULL )
 c029a24:	b9be      	cbnz	r6, c029a56 <mbedtls_rsa_import_raw+0x5e>
    if( E != NULL )
 c029a26:	b9fd      	cbnz	r5, c029a68 <mbedtls_rsa_import_raw+0x70>
    return( 0 );
 c029a28:	2000      	movs	r0, #0
}
 c029a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );
 c029a2e:	9a08      	ldr	r2, [sp, #32]
 c029a30:	4641      	mov	r1, r8
 c029a32:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 c029a36:	f7f4 fa03 	bl	c01de40 <mbedtls_mpi_read_binary>
 c029a3a:	2800      	cmp	r0, #0
 c029a3c:	d0f1      	beq.n	c029a22 <mbedtls_rsa_import_raw+0x2a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 c029a3e:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
 c029a42:	e7f2      	b.n	c029a2a <mbedtls_rsa_import_raw+0x32>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );
 c029a44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 c029a46:	4639      	mov	r1, r7
 c029a48:	f104 0038 	add.w	r0, r4, #56	; 0x38
 c029a4c:	f7f4 f9f8 	bl	c01de40 <mbedtls_mpi_read_binary>
 c029a50:	2800      	cmp	r0, #0
 c029a52:	d1f4      	bne.n	c029a3e <mbedtls_rsa_import_raw+0x46>
 c029a54:	e7e6      	b.n	c029a24 <mbedtls_rsa_import_raw+0x2c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );
 c029a56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 c029a58:	4631      	mov	r1, r6
 c029a5a:	f104 0020 	add.w	r0, r4, #32
 c029a5e:	f7f4 f9ef 	bl	c01de40 <mbedtls_mpi_read_binary>
 c029a62:	2800      	cmp	r0, #0
 c029a64:	d1eb      	bne.n	c029a3e <mbedtls_rsa_import_raw+0x46>
 c029a66:	e7de      	b.n	c029a26 <mbedtls_rsa_import_raw+0x2e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );
 c029a68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 c029a6a:	4629      	mov	r1, r5
 c029a6c:	f104 0014 	add.w	r0, r4, #20
 c029a70:	f7f4 f9e6 	bl	c01de40 <mbedtls_mpi_read_binary>
    if( ret != 0 )
 c029a74:	2800      	cmp	r0, #0
 c029a76:	d0d7      	beq.n	c029a28 <mbedtls_rsa_import_raw+0x30>
 c029a78:	e7e1      	b.n	c029a3e <mbedtls_rsa_import_raw+0x46>
	...

0c029a7c <mbedtls_rsa_complete>:
{
 c029a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 c029a80:	f100 0908 	add.w	r9, r0, #8
{
 c029a84:	b085      	sub	sp, #20
 c029a86:	4604      	mov	r4, r0
    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 c029a88:	2100      	movs	r1, #0
 c029a8a:	4648      	mov	r0, r9
 c029a8c:	f7f4 fbd2 	bl	c01e234 <mbedtls_mpi_cmp_int>
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 c029a90:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 c029a94:	2100      	movs	r1, #0
    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 c029a96:	4683      	mov	fp, r0
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 c029a98:	4630      	mov	r0, r6
 c029a9a:	f7f4 fbcb 	bl	c01e234 <mbedtls_mpi_cmp_int>
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 c029a9e:	f104 0738 	add.w	r7, r4, #56	; 0x38
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 c029aa2:	9003      	str	r0, [sp, #12]
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 c029aa4:	2100      	movs	r1, #0
 c029aa6:	4638      	mov	r0, r7
 c029aa8:	f7f4 fbc4 	bl	c01e234 <mbedtls_mpi_cmp_int>
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 c029aac:	f104 0820 	add.w	r8, r4, #32
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 c029ab0:	9002      	str	r0, [sp, #8]
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 c029ab2:	2100      	movs	r1, #0
 c029ab4:	4640      	mov	r0, r8
 c029ab6:	f7f4 fbbd 	bl	c01e234 <mbedtls_mpi_cmp_int>
    have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 c029aba:	f104 0a14 	add.w	sl, r4, #20
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 c029abe:	4605      	mov	r5, r0
    have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 c029ac0:	2100      	movs	r1, #0
 c029ac2:	4650      	mov	r0, sl
 c029ac4:	f7f4 fbb6 	bl	c01e234 <mbedtls_mpi_cmp_int>
    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 c029ac8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 c029acc:	b1ba      	cbz	r2, c029afe <mbedtls_rsa_complete+0x82>
 c029ace:	2b00      	cmp	r3, #0
 c029ad0:	d05c      	beq.n	c029b8c <mbedtls_rsa_complete+0x110>
 c029ad2:	2d00      	cmp	r5, #0
 c029ad4:	d055      	beq.n	c029b82 <mbedtls_rsa_complete+0x106>
 c029ad6:	1c01      	adds	r1, r0, #0
 c029ad8:	bf18      	it	ne
 c029ada:	2101      	movne	r1, #1
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 c029adc:	f1bb 0f00 	cmp.w	fp, #0
 c029ae0:	d158      	bne.n	c029b94 <mbedtls_rsa_complete+0x118>
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
 c029ae2:	2b00      	cmp	r3, #0
 c029ae4:	d056      	beq.n	c029b94 <mbedtls_rsa_complete+0x118>
 c029ae6:	2d00      	cmp	r5, #0
 c029ae8:	d154      	bne.n	c029b94 <mbedtls_rsa_complete+0x118>
 c029aea:	1c05      	adds	r5, r0, #0
 c029aec:	bf18      	it	ne
 c029aee:	2501      	movne	r5, #1
    is_priv = n_missing || pq_missing || d_missing;
 c029af0:	b9c9      	cbnz	r1, c029b26 <mbedtls_rsa_complete+0xaa>
 c029af2:	b15d      	cbz	r5, c029b0c <mbedtls_rsa_complete+0x90>
    if( !have_N && have_P && have_Q )
 c029af4:	f1bb 0f00 	cmp.w	fp, #0
 c029af8:	d12a      	bne.n	c029b50 <mbedtls_rsa_complete+0xd4>
 c029afa:	b9c2      	cbnz	r2, c029b2e <mbedtls_rsa_complete+0xb2>
 c029afc:	e028      	b.n	c029b50 <mbedtls_rsa_complete+0xd4>
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 c029afe:	f1bb 0f00 	cmp.w	fp, #0
 c029b02:	d003      	beq.n	c029b0c <mbedtls_rsa_complete+0x90>
 c029b04:	b913      	cbnz	r3, c029b0c <mbedtls_rsa_complete+0x90>
 c029b06:	b12d      	cbz	r5, c029b14 <mbedtls_rsa_complete+0x98>
 c029b08:	2800      	cmp	r0, #0
 c029b0a:	d145      	bne.n	c029b98 <mbedtls_rsa_complete+0x11c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c029b0c:	4826      	ldr	r0, [pc, #152]	; (c029ba8 <mbedtls_rsa_complete+0x12c>)
 c029b0e:	e017      	b.n	c029b40 <mbedtls_rsa_complete+0xc4>
    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 c029b10:	4629      	mov	r1, r5
 c029b12:	e7ea      	b.n	c029aea <mbedtls_rsa_complete+0x6e>
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 c029b14:	2800      	cmp	r0, #0
 c029b16:	d0f9      	beq.n	c029b0c <mbedtls_rsa_complete+0x90>
    return( rsa_check_context( ctx, is_priv, 1 ) );
 c029b18:	4629      	mov	r1, r5
 c029b1a:	4620      	mov	r0, r4
}
 c029b1c:	b005      	add	sp, #20
 c029b1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( rsa_check_context( ctx, is_priv, 1 ) );
 c029b22:	f7ff bf0d 	b.w	c029940 <rsa_check_context.isra.0>
    if( !have_N && have_P && have_Q )
 c029b26:	f1bb 0f00 	cmp.w	fp, #0
 c029b2a:	d110      	bne.n	c029b4e <mbedtls_rsa_complete+0xd2>
 c029b2c:	b17a      	cbz	r2, c029b4e <mbedtls_rsa_complete+0xd2>
 c029b2e:	b173      	cbz	r3, c029b4e <mbedtls_rsa_complete+0xd2>
        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,
 c029b30:	463a      	mov	r2, r7
 c029b32:	4631      	mov	r1, r6
 c029b34:	4648      	mov	r0, r9
 c029b36:	f7f4 fca3 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c029b3a:	b120      	cbz	r0, c029b46 <mbedtls_rsa_complete+0xca>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 c029b3c:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
 c029b40:	b005      	add	sp, #20
 c029b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ctx->len = mbedtls_mpi_size( &ctx->N );
 c029b46:	4648      	mov	r0, r9
 c029b48:	f7f4 f940 	bl	c01ddcc <mbedtls_mpi_size>
 c029b4c:	6060      	str	r0, [r4, #4]
    else if( d_missing )
 c029b4e:	b13d      	cbz	r5, c029b60 <mbedtls_rsa_complete+0xe4>
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
 c029b50:	4643      	mov	r3, r8
 c029b52:	4652      	mov	r2, sl
 c029b54:	4639      	mov	r1, r7
 c029b56:	4630      	mov	r0, r6
 c029b58:	f001 fb26 	bl	c02b1a8 <mbedtls_rsa_deduce_private_exponent>
 c029b5c:	2800      	cmp	r0, #0
 c029b5e:	d1ed      	bne.n	c029b3c <mbedtls_rsa_complete+0xc0>
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
 c029b60:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 c029b64:	9301      	str	r3, [sp, #4]
 c029b66:	f104 0350 	add.w	r3, r4, #80	; 0x50
 c029b6a:	9300      	str	r3, [sp, #0]
 c029b6c:	4642      	mov	r2, r8
 c029b6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c029b72:	4639      	mov	r1, r7
 c029b74:	4630      	mov	r0, r6
 c029b76:	f001 fcd3 	bl	c02b520 <mbedtls_rsa_deduce_crt>
        if( ret != 0 )
 c029b7a:	2800      	cmp	r0, #0
 c029b7c:	d1de      	bne.n	c029b3c <mbedtls_rsa_complete+0xc0>
 c029b7e:	2501      	movs	r5, #1
 c029b80:	e7ca      	b.n	c029b18 <mbedtls_rsa_complete+0x9c>
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 c029b82:	f1bb 0f00 	cmp.w	fp, #0
 c029b86:	d1c3      	bne.n	c029b10 <mbedtls_rsa_complete+0x94>
    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 c029b88:	4659      	mov	r1, fp
 c029b8a:	e7aa      	b.n	c029ae2 <mbedtls_rsa_complete+0x66>
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 c029b8c:	f1bb 0f00 	cmp.w	fp, #0
 c029b90:	d1bc      	bne.n	c029b0c <mbedtls_rsa_complete+0x90>
    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 c029b92:	4659      	mov	r1, fp
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
 c029b94:	2500      	movs	r5, #0
 c029b96:	e7ab      	b.n	c029af0 <mbedtls_rsa_complete+0x74>
        ret = mbedtls_rsa_deduce_primes( &ctx->N, &ctx->E, &ctx->D,
 c029b98:	9700      	str	r7, [sp, #0]
 c029b9a:	4633      	mov	r3, r6
 c029b9c:	4642      	mov	r2, r8
 c029b9e:	4651      	mov	r1, sl
 c029ba0:	4648      	mov	r0, r9
 c029ba2:	f001 fa05 	bl	c02afb0 <mbedtls_rsa_deduce_primes>
 c029ba6:	e7d9      	b.n	c029b5c <mbedtls_rsa_complete+0xe0>
 c029ba8:	ffffbf80 	.word	0xffffbf80

0c029bac <mbedtls_rsa_export>:
{
 c029bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 &&
 c029bb0:	f100 0a08 	add.w	sl, r0, #8
{
 c029bb4:	4604      	mov	r4, r0
 c029bb6:	e9dd 9508 	ldrd	r9, r5, [sp, #32]
 c029bba:	460e      	mov	r6, r1
        mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 &&
 c029bbc:	4650      	mov	r0, sl
 c029bbe:	2100      	movs	r1, #0
{
 c029bc0:	4617      	mov	r7, r2
 c029bc2:	4698      	mov	r8, r3
        mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 &&
 c029bc4:	f7f4 fb36 	bl	c01e234 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 &&
 c029bc8:	b910      	cbnz	r0, c029bd0 <mbedtls_rsa_export+0x24>
        if( P != NULL || Q != NULL || D != NULL )
 c029bca:	b347      	cbz	r7, c029c1e <mbedtls_rsa_export+0x72>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c029bcc:	482b      	ldr	r0, [pc, #172]	; (c029c7c <mbedtls_rsa_export+0xd0>)
 c029bce:	e034      	b.n	c029c3a <mbedtls_rsa_export+0x8e>
        mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 &&
 c029bd0:	2100      	movs	r1, #0
 c029bd2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 c029bd6:	f7f4 fb2d 	bl	c01e234 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 &&
 c029bda:	2800      	cmp	r0, #0
 c029bdc:	d0f5      	beq.n	c029bca <mbedtls_rsa_export+0x1e>
        mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 &&
 c029bde:	2100      	movs	r1, #0
 c029be0:	f104 0038 	add.w	r0, r4, #56	; 0x38
 c029be4:	f7f4 fb26 	bl	c01e234 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 &&
 c029be8:	2800      	cmp	r0, #0
 c029bea:	d0ee      	beq.n	c029bca <mbedtls_rsa_export+0x1e>
        mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 &&
 c029bec:	2100      	movs	r1, #0
 c029bee:	f104 0020 	add.w	r0, r4, #32
 c029bf2:	f7f4 fb1f 	bl	c01e234 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 &&
 c029bf6:	2800      	cmp	r0, #0
 c029bf8:	d0e7      	beq.n	c029bca <mbedtls_rsa_export+0x1e>
        mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0;
 c029bfa:	2100      	movs	r1, #0
 c029bfc:	f104 0014 	add.w	r0, r4, #20
 c029c00:	f7f4 fb18 	bl	c01e234 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 &&
 c029c04:	2800      	cmp	r0, #0
 c029c06:	d0e0      	beq.n	c029bca <mbedtls_rsa_export+0x1e>
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( N, &ctx->N ) ) != 0 ) ||
 c029c08:	b98e      	cbnz	r6, c029c2e <mbedtls_rsa_export+0x82>
 c029c0a:	b9c7      	cbnz	r7, c029c3e <mbedtls_rsa_export+0x92>
        ( P != NULL && ( ret = mbedtls_mpi_copy( P, &ctx->P ) ) != 0 ) ||
 c029c0c:	f1b8 0f00 	cmp.w	r8, #0
 c029c10:	d11d      	bne.n	c029c4e <mbedtls_rsa_export+0xa2>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( Q, &ctx->Q ) ) != 0 ) ||
 c029c12:	f1b9 0f00 	cmp.w	r9, #0
 c029c16:	d122      	bne.n	c029c5e <mbedtls_rsa_export+0xb2>
        ( D != NULL && ( ret = mbedtls_mpi_copy( D, &ctx->D ) ) != 0 ) ||
 c029c18:	bb4d      	cbnz	r5, c029c6e <mbedtls_rsa_export+0xc2>
    return( 0 );
 c029c1a:	4628      	mov	r0, r5
 c029c1c:	e00d      	b.n	c029c3a <mbedtls_rsa_export+0x8e>
        if( P != NULL || Q != NULL || D != NULL )
 c029c1e:	f1b8 0f00 	cmp.w	r8, #0
 c029c22:	d1d3      	bne.n	c029bcc <mbedtls_rsa_export+0x20>
 c029c24:	f1b9 0f00 	cmp.w	r9, #0
 c029c28:	d1d0      	bne.n	c029bcc <mbedtls_rsa_export+0x20>
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( N, &ctx->N ) ) != 0 ) ||
 c029c2a:	2e00      	cmp	r6, #0
 c029c2c:	d0f4      	beq.n	c029c18 <mbedtls_rsa_export+0x6c>
 c029c2e:	4651      	mov	r1, sl
 c029c30:	4630      	mov	r0, r6
 c029c32:	f7f3 ff84 	bl	c01db3e <mbedtls_mpi_copy>
 c029c36:	2800      	cmp	r0, #0
 c029c38:	d0e7      	beq.n	c029c0a <mbedtls_rsa_export+0x5e>
}
 c029c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ( P != NULL && ( ret = mbedtls_mpi_copy( P, &ctx->P ) ) != 0 ) ||
 c029c3e:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 c029c42:	4638      	mov	r0, r7
 c029c44:	f7f3 ff7b 	bl	c01db3e <mbedtls_mpi_copy>
 c029c48:	2800      	cmp	r0, #0
 c029c4a:	d0df      	beq.n	c029c0c <mbedtls_rsa_export+0x60>
 c029c4c:	e7f5      	b.n	c029c3a <mbedtls_rsa_export+0x8e>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( Q, &ctx->Q ) ) != 0 ) ||
 c029c4e:	f104 0138 	add.w	r1, r4, #56	; 0x38
 c029c52:	4640      	mov	r0, r8
 c029c54:	f7f3 ff73 	bl	c01db3e <mbedtls_mpi_copy>
 c029c58:	2800      	cmp	r0, #0
 c029c5a:	d0da      	beq.n	c029c12 <mbedtls_rsa_export+0x66>
 c029c5c:	e7ed      	b.n	c029c3a <mbedtls_rsa_export+0x8e>
        ( D != NULL && ( ret = mbedtls_mpi_copy( D, &ctx->D ) ) != 0 ) ||
 c029c5e:	f104 0120 	add.w	r1, r4, #32
 c029c62:	4648      	mov	r0, r9
 c029c64:	f7f3 ff6b 	bl	c01db3e <mbedtls_mpi_copy>
 c029c68:	2800      	cmp	r0, #0
 c029c6a:	d0d5      	beq.n	c029c18 <mbedtls_rsa_export+0x6c>
 c029c6c:	e7e5      	b.n	c029c3a <mbedtls_rsa_export+0x8e>
        ( E != NULL && ( ret = mbedtls_mpi_copy( E, &ctx->E ) ) != 0 ) )
 c029c6e:	f104 0114 	add.w	r1, r4, #20
 c029c72:	4628      	mov	r0, r5
}
 c029c74:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ( E != NULL && ( ret = mbedtls_mpi_copy( E, &ctx->E ) ) != 0 ) )
 c029c78:	f7f3 bf61 	b.w	c01db3e <mbedtls_mpi_copy>
 c029c7c:	ffffbf80 	.word	0xffffbf80

0c029c80 <mbedtls_rsa_export_crt>:
{
 c029c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c029c82:	4604      	mov	r4, r0
 c029c84:	460f      	mov	r7, r1
        mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 &&
 c029c86:	3008      	adds	r0, #8
 c029c88:	2100      	movs	r1, #0
{
 c029c8a:	4616      	mov	r6, r2
 c029c8c:	461d      	mov	r5, r3
        mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 &&
 c029c8e:	f7f4 fad1 	bl	c01e234 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 &&
 c029c92:	b908      	cbnz	r0, c029c98 <mbedtls_rsa_export_crt+0x18>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c029c94:	481e      	ldr	r0, [pc, #120]	; (c029d10 <mbedtls_rsa_export_crt+0x90>)
}
 c029c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 &&
 c029c98:	2100      	movs	r1, #0
 c029c9a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 c029c9e:	f7f4 fac9 	bl	c01e234 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 &&
 c029ca2:	2800      	cmp	r0, #0
 c029ca4:	d0f6      	beq.n	c029c94 <mbedtls_rsa_export_crt+0x14>
        mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 &&
 c029ca6:	2100      	movs	r1, #0
 c029ca8:	f104 0038 	add.w	r0, r4, #56	; 0x38
 c029cac:	f7f4 fac2 	bl	c01e234 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 &&
 c029cb0:	2800      	cmp	r0, #0
 c029cb2:	d0ef      	beq.n	c029c94 <mbedtls_rsa_export_crt+0x14>
        mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 &&
 c029cb4:	2100      	movs	r1, #0
 c029cb6:	f104 0020 	add.w	r0, r4, #32
 c029cba:	f7f4 fabb 	bl	c01e234 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 &&
 c029cbe:	2800      	cmp	r0, #0
 c029cc0:	d0e8      	beq.n	c029c94 <mbedtls_rsa_export_crt+0x14>
        mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0;
 c029cc2:	2100      	movs	r1, #0
 c029cc4:	f104 0014 	add.w	r0, r4, #20
 c029cc8:	f7f4 fab4 	bl	c01e234 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 &&
 c029ccc:	2800      	cmp	r0, #0
 c029cce:	d0e1      	beq.n	c029c94 <mbedtls_rsa_export_crt+0x14>
    if( ( DP != NULL && ( ret = mbedtls_mpi_copy( DP, &ctx->DP ) ) != 0 ) ||
 c029cd0:	b91f      	cbnz	r7, c029cda <mbedtls_rsa_export_crt+0x5a>
 c029cd2:	b966      	cbnz	r6, c029cee <mbedtls_rsa_export_crt+0x6e>
        ( DQ != NULL && ( ret = mbedtls_mpi_copy( DQ, &ctx->DQ ) ) != 0 ) ||
 c029cd4:	b99d      	cbnz	r5, c029cfe <mbedtls_rsa_export_crt+0x7e>
    return( 0 );
 c029cd6:	2000      	movs	r0, #0
 c029cd8:	e7dd      	b.n	c029c96 <mbedtls_rsa_export_crt+0x16>
    if( ( DP != NULL && ( ret = mbedtls_mpi_copy( DP, &ctx->DP ) ) != 0 ) ||
 c029cda:	f104 0144 	add.w	r1, r4, #68	; 0x44
 c029cde:	4638      	mov	r0, r7
 c029ce0:	f7f3 ff2d 	bl	c01db3e <mbedtls_mpi_copy>
 c029ce4:	2800      	cmp	r0, #0
 c029ce6:	d0f4      	beq.n	c029cd2 <mbedtls_rsa_export_crt+0x52>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 c029ce8:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
 c029cec:	e7d3      	b.n	c029c96 <mbedtls_rsa_export_crt+0x16>
        ( DQ != NULL && ( ret = mbedtls_mpi_copy( DQ, &ctx->DQ ) ) != 0 ) ||
 c029cee:	f104 0150 	add.w	r1, r4, #80	; 0x50
 c029cf2:	4630      	mov	r0, r6
 c029cf4:	f7f3 ff23 	bl	c01db3e <mbedtls_mpi_copy>
 c029cf8:	2800      	cmp	r0, #0
 c029cfa:	d1f5      	bne.n	c029ce8 <mbedtls_rsa_export_crt+0x68>
 c029cfc:	e7ea      	b.n	c029cd4 <mbedtls_rsa_export_crt+0x54>
        ( QP != NULL && ( ret = mbedtls_mpi_copy( QP, &ctx->QP ) ) != 0 ) )
 c029cfe:	f104 015c 	add.w	r1, r4, #92	; 0x5c
 c029d02:	4628      	mov	r0, r5
 c029d04:	f7f3 ff1b 	bl	c01db3e <mbedtls_mpi_copy>
 c029d08:	2800      	cmp	r0, #0
 c029d0a:	d1ed      	bne.n	c029ce8 <mbedtls_rsa_export_crt+0x68>
 c029d0c:	e7e3      	b.n	c029cd6 <mbedtls_rsa_export_crt+0x56>
 c029d0e:	bf00      	nop
 c029d10:	ffffbf80 	.word	0xffffbf80

0c029d14 <mbedtls_rsa_init>:
{
 c029d14:	b538      	push	{r3, r4, r5, lr}
 c029d16:	460d      	mov	r5, r1
 c029d18:	4614      	mov	r4, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
 c029d1a:	2100      	movs	r1, #0
 c029d1c:	22a4      	movs	r2, #164	; 0xa4
 c029d1e:	f7ea fe52 	bl	c0149c6 <memset>
    ctx->hash_id = hash_id;
 c029d22:	e9c0 5429 	strd	r5, r4, [r0, #164]	; 0xa4
}
 c029d26:	bd38      	pop	{r3, r4, r5, pc}

0c029d28 <mbedtls_rsa_set_padding>:
    ctx->hash_id = hash_id;
 c029d28:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
}
 c029d2c:	4770      	bx	lr

0c029d2e <mbedtls_rsa_get_len>:
}
 c029d2e:	6840      	ldr	r0, [r0, #4]
 c029d30:	4770      	bx	lr
	...

0c029d34 <mbedtls_rsa_check_pubkey>:
{
 c029d34:	b570      	push	{r4, r5, r6, lr}
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 c029d36:	2100      	movs	r1, #0
{
 c029d38:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 c029d3a:	f7ff fe01 	bl	c029940 <rsa_check_context.isra.0>
 c029d3e:	4605      	mov	r5, r0
 c029d40:	b9b8      	cbnz	r0, c029d72 <mbedtls_rsa_check_pubkey+0x3e>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
 c029d42:	f104 0608 	add.w	r6, r4, #8
 c029d46:	4630      	mov	r0, r6
 c029d48:	f7f4 f820 	bl	c01dd8c <mbedtls_mpi_bitlen>
 c029d4c:	287f      	cmp	r0, #127	; 0x7f
 c029d4e:	d910      	bls.n	c029d72 <mbedtls_rsa_check_pubkey+0x3e>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 c029d50:	3414      	adds	r4, #20
 c029d52:	4629      	mov	r1, r5
 c029d54:	4620      	mov	r0, r4
 c029d56:	f7f3 ffc5 	bl	c01dce4 <mbedtls_mpi_get_bit>
 c029d5a:	b150      	cbz	r0, c029d72 <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 c029d5c:	4620      	mov	r0, r4
 c029d5e:	f7f4 f815 	bl	c01dd8c <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 c029d62:	2801      	cmp	r0, #1
 c029d64:	d905      	bls.n	c029d72 <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
 c029d66:	4631      	mov	r1, r6
 c029d68:	4620      	mov	r0, r4
 c029d6a:	f7f4 fa23 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 c029d6e:	2800      	cmp	r0, #0
 c029d70:	db00      	blt.n	c029d74 <mbedtls_rsa_check_pubkey+0x40>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 c029d72:	4d01      	ldr	r5, [pc, #4]	; (c029d78 <mbedtls_rsa_check_pubkey+0x44>)
}
 c029d74:	4628      	mov	r0, r5
 c029d76:	bd70      	pop	{r4, r5, r6, pc}
 c029d78:	ffffbe00 	.word	0xffffbe00

0c029d7c <mbedtls_rsa_check_privkey>:
{
 c029d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 c029d7e:	b085      	sub	sp, #20
 c029d80:	4604      	mov	r4, r0
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 c029d82:	f7ff ffd7 	bl	c029d34 <mbedtls_rsa_check_pubkey>
 c029d86:	b110      	cbz	r0, c029d8e <mbedtls_rsa_check_privkey+0x12>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 c029d88:	4816      	ldr	r0, [pc, #88]	; (c029de4 <mbedtls_rsa_check_privkey+0x68>)
}
 c029d8a:	b005      	add	sp, #20
 c029d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
 c029d8e:	2101      	movs	r1, #1
 c029d90:	4620      	mov	r0, r4
 c029d92:	f7ff fdd5 	bl	c029940 <rsa_check_context.isra.0>
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 c029d96:	2800      	cmp	r0, #0
 c029d98:	d1f6      	bne.n	c029d88 <mbedtls_rsa_check_privkey+0xc>
    if( mbedtls_rsa_validate_params( &ctx->N, &ctx->P, &ctx->Q,
 c029d9a:	f104 0314 	add.w	r3, r4, #20
 c029d9e:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 c029da2:	f104 0638 	add.w	r6, r4, #56	; 0x38
 c029da6:	f104 0720 	add.w	r7, r4, #32
 c029daa:	e9cd 0001 	strd	r0, r0, [sp, #4]
 c029dae:	9300      	str	r3, [sp, #0]
 c029db0:	4632      	mov	r2, r6
 c029db2:	463b      	mov	r3, r7
 c029db4:	4629      	mov	r1, r5
 c029db6:	f104 0008 	add.w	r0, r4, #8
 c029dba:	f001 fad9 	bl	c02b370 <mbedtls_rsa_validate_params>
 c029dbe:	2800      	cmp	r0, #0
 c029dc0:	d1e2      	bne.n	c029d88 <mbedtls_rsa_check_privkey+0xc>
    else if( mbedtls_rsa_validate_crt( &ctx->P, &ctx->Q, &ctx->D,
 c029dc2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 c029dc6:	9301      	str	r3, [sp, #4]
 c029dc8:	f104 0350 	add.w	r3, r4, #80	; 0x50
 c029dcc:	9300      	str	r3, [sp, #0]
 c029dce:	463a      	mov	r2, r7
 c029dd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c029dd4:	4631      	mov	r1, r6
 c029dd6:	4628      	mov	r0, r5
 c029dd8:	f001 fa44 	bl	c02b264 <mbedtls_rsa_validate_crt>
 c029ddc:	2800      	cmp	r0, #0
 c029dde:	d0d4      	beq.n	c029d8a <mbedtls_rsa_check_privkey+0xe>
 c029de0:	e7d2      	b.n	c029d88 <mbedtls_rsa_check_privkey+0xc>
 c029de2:	bf00      	nop
 c029de4:	ffffbe00 	.word	0xffffbe00

0c029de8 <mbedtls_rsa_check_pub_priv>:
{
 c029de8:	b538      	push	{r3, r4, r5, lr}
 c029dea:	4605      	mov	r5, r0
 c029dec:	460c      	mov	r4, r1
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 c029dee:	f7ff ffa1 	bl	c029d34 <mbedtls_rsa_check_pubkey>
 c029df2:	b988      	cbnz	r0, c029e18 <mbedtls_rsa_check_pub_priv+0x30>
        mbedtls_rsa_check_privkey( prv ) != 0 )
 c029df4:	4620      	mov	r0, r4
 c029df6:	f7ff ffc1 	bl	c029d7c <mbedtls_rsa_check_privkey>
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 c029dfa:	b968      	cbnz	r0, c029e18 <mbedtls_rsa_check_pub_priv+0x30>
    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 c029dfc:	f104 0108 	add.w	r1, r4, #8
 c029e00:	f105 0008 	add.w	r0, r5, #8
 c029e04:	f7f4 f9d6 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c029e08:	b930      	cbnz	r0, c029e18 <mbedtls_rsa_check_pub_priv+0x30>
        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
 c029e0a:	f104 0114 	add.w	r1, r4, #20
 c029e0e:	f105 0014 	add.w	r0, r5, #20
 c029e12:	f7f4 f9cf 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 c029e16:	b100      	cbz	r0, c029e1a <mbedtls_rsa_check_pub_priv+0x32>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 c029e18:	4800      	ldr	r0, [pc, #0]	; (c029e1c <mbedtls_rsa_check_pub_priv+0x34>)
}
 c029e1a:	bd38      	pop	{r3, r4, r5, pc}
 c029e1c:	ffffbe00 	.word	0xffffbe00

0c029e20 <mbedtls_rsa_public>:
{
 c029e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 c029e22:	460c      	mov	r4, r1
 c029e24:	b087      	sub	sp, #28
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 c029e26:	2100      	movs	r1, #0
{
 c029e28:	4605      	mov	r5, r0
 c029e2a:	4616      	mov	r6, r2
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 c029e2c:	f7ff fd88 	bl	c029940 <rsa_check_context.isra.0>
 c029e30:	bb80      	cbnz	r0, c029e94 <mbedtls_rsa_public+0x74>
    mbedtls_mpi_init( &T );
 c029e32:	a803      	add	r0, sp, #12
 c029e34:	f7f3 fe0c 	bl	c01da50 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 c029e38:	4621      	mov	r1, r4
 c029e3a:	686a      	ldr	r2, [r5, #4]
 c029e3c:	a803      	add	r0, sp, #12
 c029e3e:	f7f3 ffff 	bl	c01de40 <mbedtls_mpi_read_binary>
 c029e42:	4604      	mov	r4, r0
 c029e44:	b9d0      	cbnz	r0, c029e7c <mbedtls_rsa_public+0x5c>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 c029e46:	f105 0408 	add.w	r4, r5, #8
 c029e4a:	4621      	mov	r1, r4
 c029e4c:	a803      	add	r0, sp, #12
 c029e4e:	f7f4 f9b1 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c029e52:	2800      	cmp	r0, #0
 c029e54:	da1b      	bge.n	c029e8e <mbedtls_rsa_public+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 c029e56:	f105 0368 	add.w	r3, r5, #104	; 0x68
 c029e5a:	a903      	add	r1, sp, #12
 c029e5c:	9300      	str	r3, [sp, #0]
 c029e5e:	f105 0214 	add.w	r2, r5, #20
 c029e62:	4623      	mov	r3, r4
 c029e64:	4608      	mov	r0, r1
    olen = ctx->len;
 c029e66:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 c029e68:	f7f4 fe3c 	bl	c01eae4 <mbedtls_mpi_exp_mod>
 c029e6c:	4604      	mov	r4, r0
 c029e6e:	b928      	cbnz	r0, c029e7c <mbedtls_rsa_public+0x5c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 c029e70:	463a      	mov	r2, r7
 c029e72:	4631      	mov	r1, r6
 c029e74:	a803      	add	r0, sp, #12
 c029e76:	f7f4 f850 	bl	c01df1a <mbedtls_mpi_write_binary>
 c029e7a:	4604      	mov	r4, r0
    mbedtls_mpi_free( &T );
 c029e7c:	a803      	add	r0, sp, #12
 c029e7e:	f7f3 fded 	bl	c01da5c <mbedtls_mpi_free>
    if( ret != 0 )
 c029e82:	b10c      	cbz	r4, c029e88 <mbedtls_rsa_public+0x68>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
 c029e84:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280
}
 c029e88:	4620      	mov	r0, r4
 c029e8a:	b007      	add	sp, #28
 c029e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 c029e8e:	f06f 0403 	mvn.w	r4, #3
 c029e92:	e7f3      	b.n	c029e7c <mbedtls_rsa_public+0x5c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c029e94:	4c00      	ldr	r4, [pc, #0]	; (c029e98 <mbedtls_rsa_public+0x78>)
 c029e96:	e7f7      	b.n	c029e88 <mbedtls_rsa_public+0x68>
 c029e98:	ffffbf80 	.word	0xffffbf80

0c029e9c <mbedtls_rsa_private>:
{
 c029e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c029ea0:	460e      	mov	r6, r1
 c029ea2:	b0a3      	sub	sp, #140	; 0x8c
    if( rsa_check_context( ctx, 1             /* private key checks */,
 c029ea4:	2101      	movs	r1, #1
{
 c029ea6:	4604      	mov	r4, r0
 c029ea8:	4692      	mov	sl, r2
 c029eaa:	461d      	mov	r5, r3
    if( rsa_check_context( ctx, 1             /* private key checks */,
 c029eac:	f7ff fd48 	bl	c029940 <rsa_check_context.isra.0>
 c029eb0:	2800      	cmp	r0, #0
 c029eb2:	f040 81a7 	bne.w	c02a204 <mbedtls_rsa_private+0x368>
    mbedtls_mpi_init( &T );
 c029eb6:	a804      	add	r0, sp, #16
 c029eb8:	f7f3 fdca 	bl	c01da50 <mbedtls_mpi_init>
    mbedtls_mpi_init( &P1 );
 c029ebc:	a807      	add	r0, sp, #28
 c029ebe:	f7f3 fdc7 	bl	c01da50 <mbedtls_mpi_init>
    mbedtls_mpi_init( &Q1 );
 c029ec2:	a80a      	add	r0, sp, #40	; 0x28
 c029ec4:	f7f3 fdc4 	bl	c01da50 <mbedtls_mpi_init>
    mbedtls_mpi_init( &R );
 c029ec8:	a80d      	add	r0, sp, #52	; 0x34
 c029eca:	f7f3 fdc1 	bl	c01da50 <mbedtls_mpi_init>
    if( f_rng != NULL )
 c029ece:	b12e      	cbz	r6, c029edc <mbedtls_rsa_private+0x40>
        mbedtls_mpi_init( &DP_blind );
 c029ed0:	a816      	add	r0, sp, #88	; 0x58
 c029ed2:	f7f3 fdbd 	bl	c01da50 <mbedtls_mpi_init>
        mbedtls_mpi_init( &DQ_blind );
 c029ed6:	a819      	add	r0, sp, #100	; 0x64
 c029ed8:	f7f3 fdba 	bl	c01da50 <mbedtls_mpi_init>
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
 c029edc:	a810      	add	r0, sp, #64	; 0x40
 c029ede:	f7f3 fdb7 	bl	c01da50 <mbedtls_mpi_init>
 c029ee2:	a813      	add	r0, sp, #76	; 0x4c
 c029ee4:	f7f3 fdb4 	bl	c01da50 <mbedtls_mpi_init>
    mbedtls_mpi_init( &I );
 c029ee8:	a81c      	add	r0, sp, #112	; 0x70
 c029eea:	f7f3 fdb1 	bl	c01da50 <mbedtls_mpi_init>
    mbedtls_mpi_init( &C );
 c029eee:	a81f      	add	r0, sp, #124	; 0x7c
 c029ef0:	f7f3 fdae 	bl	c01da50 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 c029ef4:	6862      	ldr	r2, [r4, #4]
 c029ef6:	4629      	mov	r1, r5
 c029ef8:	a804      	add	r0, sp, #16
 c029efa:	f7f3 ffa1 	bl	c01de40 <mbedtls_mpi_read_binary>
 c029efe:	4603      	mov	r3, r0
 c029f00:	2800      	cmp	r0, #0
 c029f02:	f040 814d 	bne.w	c02a1a0 <mbedtls_rsa_private+0x304>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 c029f06:	f104 0508 	add.w	r5, r4, #8
 c029f0a:	4629      	mov	r1, r5
 c029f0c:	a804      	add	r0, sp, #16
 c029f0e:	f7f4 f951 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c029f12:	2800      	cmp	r0, #0
 c029f14:	f280 816f 	bge.w	c02a1f6 <mbedtls_rsa_private+0x35a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
 c029f18:	a904      	add	r1, sp, #16
 c029f1a:	a81c      	add	r0, sp, #112	; 0x70
 c029f1c:	f7f3 fe0f 	bl	c01db3e <mbedtls_mpi_copy>
 c029f20:	4603      	mov	r3, r0
 c029f22:	2800      	cmp	r0, #0
 c029f24:	f040 813c 	bne.w	c02a1a0 <mbedtls_rsa_private+0x304>
    mbedtls_mpi *DP = &ctx->DP;
 c029f28:	f104 0944 	add.w	r9, r4, #68	; 0x44
    mbedtls_mpi *DQ = &ctx->DQ;
 c029f2c:	f104 0850 	add.w	r8, r4, #80	; 0x50
    if( f_rng != NULL )
 c029f30:	2e00      	cmp	r6, #0
 c029f32:	f000 8090 	beq.w	c02a056 <mbedtls_rsa_private+0x1ba>
    if( ctx->Vf.p != NULL )
 c029f36:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 c029f3a:	2b00      	cmp	r3, #0
 c029f3c:	f000 80ee 	beq.w	c02a11c <mbedtls_rsa_private+0x280>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
 c029f40:	f104 078c 	add.w	r7, r4, #140	; 0x8c
 c029f44:	463a      	mov	r2, r7
 c029f46:	4639      	mov	r1, r7
 c029f48:	4638      	mov	r0, r7
 c029f4a:	f7f4 fa99 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c029f4e:	4603      	mov	r3, r0
 c029f50:	2800      	cmp	r0, #0
 c029f52:	f040 8125 	bne.w	c02a1a0 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
 c029f56:	462a      	mov	r2, r5
 c029f58:	4639      	mov	r1, r7
 c029f5a:	4638      	mov	r0, r7
 c029f5c:	f7f4 fd4c 	bl	c01e9f8 <mbedtls_mpi_mod_mpi>
 c029f60:	4603      	mov	r3, r0
 c029f62:	2800      	cmp	r0, #0
 c029f64:	f040 811c 	bne.w	c02a1a0 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
 c029f68:	f104 0798 	add.w	r7, r4, #152	; 0x98
 c029f6c:	463a      	mov	r2, r7
 c029f6e:	4639      	mov	r1, r7
 c029f70:	4638      	mov	r0, r7
 c029f72:	f7f4 fa85 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c029f76:	4603      	mov	r3, r0
 c029f78:	2800      	cmp	r0, #0
 c029f7a:	f040 8111 	bne.w	c02a1a0 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
 c029f7e:	462a      	mov	r2, r5
 c029f80:	4639      	mov	r1, r7
 c029f82:	4638      	mov	r0, r7
 c029f84:	f7f4 fd38 	bl	c01e9f8 <mbedtls_mpi_mod_mpi>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
 c029f88:	4603      	mov	r3, r0
        MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );
 c029f8a:	2800      	cmp	r0, #0
 c029f8c:	f040 8108 	bne.w	c02a1a0 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
 c029f90:	a904      	add	r1, sp, #16
 c029f92:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 c029f96:	4608      	mov	r0, r1
 c029f98:	f7f4 fa72 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c029f9c:	4603      	mov	r3, r0
 c029f9e:	2800      	cmp	r0, #0
 c029fa0:	f040 80fe 	bne.w	c02a1a0 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 c029fa4:	a904      	add	r1, sp, #16
 c029fa6:	462a      	mov	r2, r5
 c029fa8:	4608      	mov	r0, r1
 c029faa:	f7f4 fd25 	bl	c01e9f8 <mbedtls_mpi_mod_mpi>
 c029fae:	4603      	mov	r3, r0
 c029fb0:	2800      	cmp	r0, #0
 c029fb2:	f040 80f5 	bne.w	c02a1a0 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
 c029fb6:	2201      	movs	r2, #1
 c029fb8:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 c029fbc:	a807      	add	r0, sp, #28
 c029fbe:	f7f4 fa49 	bl	c01e454 <mbedtls_mpi_sub_int>
 c029fc2:	4603      	mov	r3, r0
 c029fc4:	2800      	cmp	r0, #0
 c029fc6:	f040 80eb 	bne.w	c02a1a0 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
 c029fca:	2201      	movs	r2, #1
 c029fcc:	f104 0138 	add.w	r1, r4, #56	; 0x38
 c029fd0:	a80a      	add	r0, sp, #40	; 0x28
 c029fd2:	f7f4 fa3f 	bl	c01e454 <mbedtls_mpi_sub_int>
 c029fd6:	4603      	mov	r3, r0
 c029fd8:	2800      	cmp	r0, #0
 c029fda:	f040 80e1 	bne.w	c02a1a0 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 c029fde:	4653      	mov	r3, sl
 c029fe0:	4632      	mov	r2, r6
 c029fe2:	211c      	movs	r1, #28
 c029fe4:	a80d      	add	r0, sp, #52	; 0x34
 c029fe6:	f7f5 f838 	bl	c01f05a <mbedtls_mpi_fill_random>
 c029fea:	4603      	mov	r3, r0
 c029fec:	2800      	cmp	r0, #0
 c029fee:	f040 80d7 	bne.w	c02a1a0 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
 c029ff2:	aa0d      	add	r2, sp, #52	; 0x34
 c029ff4:	a907      	add	r1, sp, #28
 c029ff6:	a816      	add	r0, sp, #88	; 0x58
 c029ff8:	f7f4 fa42 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c029ffc:	4603      	mov	r3, r0
 c029ffe:	2800      	cmp	r0, #0
 c02a000:	f040 80ce 	bne.w	c02a1a0 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
 c02a004:	a916      	add	r1, sp, #88	; 0x58
 c02a006:	464a      	mov	r2, r9
 c02a008:	4608      	mov	r0, r1
 c02a00a:	f7f4 f9c8 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c02a00e:	4603      	mov	r3, r0
 c02a010:	2800      	cmp	r0, #0
 c02a012:	f040 80c5 	bne.w	c02a1a0 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 c02a016:	4653      	mov	r3, sl
 c02a018:	4632      	mov	r2, r6
 c02a01a:	211c      	movs	r1, #28
 c02a01c:	a80d      	add	r0, sp, #52	; 0x34
 c02a01e:	f7f5 f81c 	bl	c01f05a <mbedtls_mpi_fill_random>
 c02a022:	4603      	mov	r3, r0
 c02a024:	2800      	cmp	r0, #0
 c02a026:	f040 80bb 	bne.w	c02a1a0 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
 c02a02a:	aa0d      	add	r2, sp, #52	; 0x34
 c02a02c:	a90a      	add	r1, sp, #40	; 0x28
 c02a02e:	a819      	add	r0, sp, #100	; 0x64
 c02a030:	f7f4 fa26 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c02a034:	4603      	mov	r3, r0
 c02a036:	2800      	cmp	r0, #0
 c02a038:	f040 80b2 	bne.w	c02a1a0 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
 c02a03c:	a919      	add	r1, sp, #100	; 0x64
 c02a03e:	4642      	mov	r2, r8
 c02a040:	4608      	mov	r0, r1
 c02a042:	f7f4 f9ac 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c02a046:	4603      	mov	r3, r0
 c02a048:	2800      	cmp	r0, #0
 c02a04a:	f040 80a9 	bne.w	c02a1a0 <mbedtls_rsa_private+0x304>
        DQ = &DQ_blind;
 c02a04e:	f10d 0864 	add.w	r8, sp, #100	; 0x64
        DP = &DP_blind;
 c02a052:	f10d 0958 	add.w	r9, sp, #88	; 0x58
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
 c02a056:	f104 0374 	add.w	r3, r4, #116	; 0x74
 c02a05a:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
 c02a05e:	9300      	str	r3, [sp, #0]
 c02a060:	464a      	mov	r2, r9
 c02a062:	4653      	mov	r3, sl
 c02a064:	a904      	add	r1, sp, #16
 c02a066:	a810      	add	r0, sp, #64	; 0x40
 c02a068:	f7f4 fd3c 	bl	c01eae4 <mbedtls_mpi_exp_mod>
 c02a06c:	4603      	mov	r3, r0
 c02a06e:	2800      	cmp	r0, #0
 c02a070:	f040 8096 	bne.w	c02a1a0 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );
 c02a074:	f104 0380 	add.w	r3, r4, #128	; 0x80
 c02a078:	f104 0738 	add.w	r7, r4, #56	; 0x38
 c02a07c:	9300      	str	r3, [sp, #0]
 c02a07e:	4642      	mov	r2, r8
 c02a080:	463b      	mov	r3, r7
 c02a082:	a904      	add	r1, sp, #16
 c02a084:	a813      	add	r0, sp, #76	; 0x4c
 c02a086:	f7f4 fd2d 	bl	c01eae4 <mbedtls_mpi_exp_mod>
 c02a08a:	4603      	mov	r3, r0
 c02a08c:	2800      	cmp	r0, #0
 c02a08e:	f040 8087 	bne.w	c02a1a0 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &TP, &TQ ) );
 c02a092:	aa13      	add	r2, sp, #76	; 0x4c
 c02a094:	a910      	add	r1, sp, #64	; 0x40
 c02a096:	a804      	add	r0, sp, #16
 c02a098:	f7f4 f9a3 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c02a09c:	4603      	mov	r3, r0
 c02a09e:	2800      	cmp	r0, #0
 c02a0a0:	d17e      	bne.n	c02a1a0 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->QP ) );
 c02a0a2:	f104 025c 	add.w	r2, r4, #92	; 0x5c
 c02a0a6:	a904      	add	r1, sp, #16
 c02a0a8:	a810      	add	r0, sp, #64	; 0x40
 c02a0aa:	f7f4 f9e9 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c02a0ae:	4603      	mov	r3, r0
 c02a0b0:	2800      	cmp	r0, #0
 c02a0b2:	d175      	bne.n	c02a1a0 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &TP, &ctx->P ) );
 c02a0b4:	4652      	mov	r2, sl
 c02a0b6:	a910      	add	r1, sp, #64	; 0x40
 c02a0b8:	a804      	add	r0, sp, #16
 c02a0ba:	f7f4 fc9d 	bl	c01e9f8 <mbedtls_mpi_mod_mpi>
 c02a0be:	4603      	mov	r3, r0
 c02a0c0:	2800      	cmp	r0, #0
 c02a0c2:	d16d      	bne.n	c02a1a0 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->Q ) );
 c02a0c4:	463a      	mov	r2, r7
 c02a0c6:	a904      	add	r1, sp, #16
 c02a0c8:	a810      	add	r0, sp, #64	; 0x40
 c02a0ca:	f7f4 f9d9 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c02a0ce:	4603      	mov	r3, r0
 c02a0d0:	2800      	cmp	r0, #0
 c02a0d2:	d165      	bne.n	c02a1a0 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &TQ, &TP ) );
 c02a0d4:	aa10      	add	r2, sp, #64	; 0x40
 c02a0d6:	a913      	add	r1, sp, #76	; 0x4c
 c02a0d8:	a804      	add	r0, sp, #16
 c02a0da:	f7f4 f960 	bl	c01e39e <mbedtls_mpi_add_mpi>
 c02a0de:	4603      	mov	r3, r0
 c02a0e0:	2800      	cmp	r0, #0
 c02a0e2:	d15d      	bne.n	c02a1a0 <mbedtls_rsa_private+0x304>
    if( f_rng != NULL )
 c02a0e4:	2e00      	cmp	r6, #0
 c02a0e6:	d14b      	bne.n	c02a180 <mbedtls_rsa_private+0x2e4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
 c02a0e8:	f104 0368 	add.w	r3, r4, #104	; 0x68
 c02a0ec:	9300      	str	r3, [sp, #0]
 c02a0ee:	f104 0214 	add.w	r2, r4, #20
 c02a0f2:	462b      	mov	r3, r5
 c02a0f4:	a904      	add	r1, sp, #16
 c02a0f6:	a81f      	add	r0, sp, #124	; 0x7c
 c02a0f8:	f7f4 fcf4 	bl	c01eae4 <mbedtls_mpi_exp_mod>
 c02a0fc:	4603      	mov	r3, r0
 c02a0fe:	2800      	cmp	r0, #0
 c02a100:	d14e      	bne.n	c02a1a0 <mbedtls_rsa_private+0x304>
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
 c02a102:	a91c      	add	r1, sp, #112	; 0x70
 c02a104:	a81f      	add	r0, sp, #124	; 0x7c
 c02a106:	f7f4 f855 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
 c02a10a:	2800      	cmp	r0, #0
 c02a10c:	d178      	bne.n	c02a200 <mbedtls_rsa_private+0x364>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 c02a10e:	6862      	ldr	r2, [r4, #4]
 c02a110:	992c      	ldr	r1, [sp, #176]	; 0xb0
 c02a112:	a804      	add	r0, sp, #16
 c02a114:	f7f3 ff01 	bl	c01df1a <mbedtls_mpi_write_binary>
 c02a118:	4603      	mov	r3, r0
cleanup:
 c02a11a:	e041      	b.n	c02a1a0 <mbedtls_rsa_private+0x304>
    if( ctx->Vf.p != NULL )
 c02a11c:	230c      	movs	r3, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 c02a11e:	f104 0b98 	add.w	fp, r4, #152	; 0x98
    if( ctx->Vf.p != NULL )
 c02a122:	9303      	str	r3, [sp, #12]
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 c02a124:	f104 078c 	add.w	r7, r4, #140	; 0x8c
        if( count++ > 10 )
 c02a128:	9b03      	ldr	r3, [sp, #12]
 c02a12a:	3b01      	subs	r3, #1
 c02a12c:	9303      	str	r3, [sp, #12]
 c02a12e:	d065      	beq.n	c02a1fc <mbedtls_rsa_private+0x360>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 c02a130:	6861      	ldr	r1, [r4, #4]
 c02a132:	4653      	mov	r3, sl
 c02a134:	4632      	mov	r2, r6
 c02a136:	3901      	subs	r1, #1
 c02a138:	4658      	mov	r0, fp
 c02a13a:	f7f4 ff8e 	bl	c01f05a <mbedtls_mpi_fill_random>
 c02a13e:	4603      	mov	r3, r0
 c02a140:	bb70      	cbnz	r0, c02a1a0 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 c02a142:	462a      	mov	r2, r5
 c02a144:	4659      	mov	r1, fp
 c02a146:	4638      	mov	r0, r7
 c02a148:	f7f4 ff03 	bl	c01ef52 <mbedtls_mpi_gcd>
 c02a14c:	4603      	mov	r3, r0
 c02a14e:	bb38      	cbnz	r0, c02a1a0 <mbedtls_rsa_private+0x304>
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );
 c02a150:	2101      	movs	r1, #1
 c02a152:	4638      	mov	r0, r7
 c02a154:	f7f4 f86e 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c02a158:	2800      	cmp	r0, #0
 c02a15a:	d1e5      	bne.n	c02a128 <mbedtls_rsa_private+0x28c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 c02a15c:	462a      	mov	r2, r5
 c02a15e:	4659      	mov	r1, fp
 c02a160:	4638      	mov	r0, r7
 c02a162:	f7f5 f870 	bl	c01f246 <mbedtls_mpi_inv_mod>
 c02a166:	4603      	mov	r3, r0
 c02a168:	b9d0      	cbnz	r0, c02a1a0 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
 c02a16a:	f104 0368 	add.w	r3, r4, #104	; 0x68
 c02a16e:	9300      	str	r3, [sp, #0]
 c02a170:	f104 0214 	add.w	r2, r4, #20
 c02a174:	462b      	mov	r3, r5
 c02a176:	4639      	mov	r1, r7
 c02a178:	4638      	mov	r0, r7
 c02a17a:	f7f4 fcb3 	bl	c01eae4 <mbedtls_mpi_exp_mod>
 c02a17e:	e703      	b.n	c029f88 <mbedtls_rsa_private+0xec>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
 c02a180:	a904      	add	r1, sp, #16
 c02a182:	f104 0298 	add.w	r2, r4, #152	; 0x98
 c02a186:	4608      	mov	r0, r1
 c02a188:	f7f4 f97a 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c02a18c:	4603      	mov	r3, r0
 c02a18e:	b938      	cbnz	r0, c02a1a0 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 c02a190:	a904      	add	r1, sp, #16
 c02a192:	462a      	mov	r2, r5
 c02a194:	4608      	mov	r0, r1
 c02a196:	f7f4 fc2f 	bl	c01e9f8 <mbedtls_mpi_mod_mpi>
 c02a19a:	4603      	mov	r3, r0
 c02a19c:	2800      	cmp	r0, #0
 c02a19e:	d0a3      	beq.n	c02a0e8 <mbedtls_rsa_private+0x24c>
    mbedtls_mpi_free( &P1 );
 c02a1a0:	a807      	add	r0, sp, #28
 c02a1a2:	9303      	str	r3, [sp, #12]
 c02a1a4:	f7f3 fc5a 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 c02a1a8:	a80a      	add	r0, sp, #40	; 0x28
 c02a1aa:	f7f3 fc57 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 c02a1ae:	a80d      	add	r0, sp, #52	; 0x34
 c02a1b0:	f7f3 fc54 	bl	c01da5c <mbedtls_mpi_free>
    if( f_rng != NULL )
 c02a1b4:	9b03      	ldr	r3, [sp, #12]
 c02a1b6:	b136      	cbz	r6, c02a1c6 <mbedtls_rsa_private+0x32a>
        mbedtls_mpi_free( &DP_blind );
 c02a1b8:	a816      	add	r0, sp, #88	; 0x58
 c02a1ba:	f7f3 fc4f 	bl	c01da5c <mbedtls_mpi_free>
        mbedtls_mpi_free( &DQ_blind );
 c02a1be:	a819      	add	r0, sp, #100	; 0x64
 c02a1c0:	f7f3 fc4c 	bl	c01da5c <mbedtls_mpi_free>
 c02a1c4:	9b03      	ldr	r3, [sp, #12]
    mbedtls_mpi_free( &T );
 c02a1c6:	a804      	add	r0, sp, #16
 c02a1c8:	9303      	str	r3, [sp, #12]
 c02a1ca:	f7f3 fc47 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &TP ); mbedtls_mpi_free( &TQ );
 c02a1ce:	a810      	add	r0, sp, #64	; 0x40
 c02a1d0:	f7f3 fc44 	bl	c01da5c <mbedtls_mpi_free>
 c02a1d4:	a813      	add	r0, sp, #76	; 0x4c
 c02a1d6:	f7f3 fc41 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &C );
 c02a1da:	a81f      	add	r0, sp, #124	; 0x7c
 c02a1dc:	f7f3 fc3e 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &I );
 c02a1e0:	a81c      	add	r0, sp, #112	; 0x70
 c02a1e2:	f7f3 fc3b 	bl	c01da5c <mbedtls_mpi_free>
    if( ret != 0 )
 c02a1e6:	9b03      	ldr	r3, [sp, #12]
 c02a1e8:	b10b      	cbz	r3, c02a1ee <mbedtls_rsa_private+0x352>
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
 c02a1ea:	f5a3 4386 	sub.w	r3, r3, #17152	; 0x4300
}
 c02a1ee:	4618      	mov	r0, r3
 c02a1f0:	b023      	add	sp, #140	; 0x8c
 c02a1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 c02a1f6:	f06f 0303 	mvn.w	r3, #3
 c02a1fa:	e7d1      	b.n	c02a1a0 <mbedtls_rsa_private+0x304>
            return( MBEDTLS_ERR_RSA_RNG_FAILED );
 c02a1fc:	4b02      	ldr	r3, [pc, #8]	; (c02a208 <mbedtls_rsa_private+0x36c>)
 c02a1fe:	e7cf      	b.n	c02a1a0 <mbedtls_rsa_private+0x304>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 c02a200:	4b02      	ldr	r3, [pc, #8]	; (c02a20c <mbedtls_rsa_private+0x370>)
 c02a202:	e7cd      	b.n	c02a1a0 <mbedtls_rsa_private+0x304>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c02a204:	4b02      	ldr	r3, [pc, #8]	; (c02a210 <mbedtls_rsa_private+0x374>)
 c02a206:	e7f2      	b.n	c02a1ee <mbedtls_rsa_private+0x352>
 c02a208:	ffffbb80 	.word	0xffffbb80
 c02a20c:	ffffbc80 	.word	0xffffbc80
 c02a210:	ffffbf80 	.word	0xffffbf80

0c02a214 <mbedtls_rsa_rsaes_oaep_encrypt>:
{
 c02a214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 c02a218:	2b01      	cmp	r3, #1
{
 c02a21a:	b08b      	sub	sp, #44	; 0x2c
 c02a21c:	4680      	mov	r8, r0
 c02a21e:	468a      	mov	sl, r1
 c02a220:	e9cd 2304 	strd	r2, r3, [sp, #16]
 c02a224:	9f16      	ldr	r7, [sp, #88]	; 0x58
 c02a226:	9e18      	ldr	r6, [sp, #96]	; 0x60
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 c02a228:	d108      	bne.n	c02a23c <mbedtls_rsa_rsaes_oaep_encrypt+0x28>
 c02a22a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 c02a22e:	2b01      	cmp	r3, #1
 c02a230:	d004      	beq.n	c02a23c <mbedtls_rsa_rsaes_oaep_encrypt+0x28>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c02a232:	4b41      	ldr	r3, [pc, #260]	; (c02a338 <mbedtls_rsa_rsaes_oaep_encrypt+0x124>)
}
 c02a234:	4618      	mov	r0, r3
 c02a236:	b00b      	add	sp, #44	; 0x2c
 c02a238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( f_rng == NULL )
 c02a23c:	f1ba 0f00 	cmp.w	sl, #0
 c02a240:	d0f7      	beq.n	c02a232 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 c02a242:	f898 00a8 	ldrb.w	r0, [r8, #168]	; 0xa8
 c02a246:	f7fa f87f 	bl	c024348 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 c02a24a:	9003      	str	r0, [sp, #12]
 c02a24c:	2800      	cmp	r0, #0
 c02a24e:	d0f0      	beq.n	c02a232 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
    olen = ctx->len;
 c02a250:	f8d8 4004 	ldr.w	r4, [r8, #4]
    hlen = mbedtls_md_get_size( md_info );
 c02a254:	f7fa f9ae 	bl	c0245b4 <mbedtls_md_get_size>
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 c02a258:	b203      	sxth	r3, r0
 c02a25a:	005b      	lsls	r3, r3, #1
 c02a25c:	9302      	str	r3, [sp, #8]
 c02a25e:	9a02      	ldr	r2, [sp, #8]
 c02a260:	1cbb      	adds	r3, r7, #2
 c02a262:	4413      	add	r3, r2
 c02a264:	42bb      	cmp	r3, r7
    hlen = mbedtls_md_get_size( md_info );
 c02a266:	4605      	mov	r5, r0
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 c02a268:	d3e3      	bcc.n	c02a232 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
 c02a26a:	42a3      	cmp	r3, r4
 c02a26c:	d8e1      	bhi.n	c02a232 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
    memset( output, 0, olen );
 c02a26e:	4622      	mov	r2, r4
 c02a270:	2100      	movs	r1, #0
 c02a272:	4630      	mov	r0, r6
 c02a274:	f7ea fba7 	bl	c0149c6 <memset>
    *p++ = 0;
 c02a278:	2300      	movs	r3, #0
 c02a27a:	f106 0901 	add.w	r9, r6, #1
 c02a27e:	7033      	strb	r3, [r6, #0]
    if( ( ret = f_rng( p_rng, p, hlen ) ) != 0 )
 c02a280:	462a      	mov	r2, r5
 c02a282:	4649      	mov	r1, r9
 c02a284:	9804      	ldr	r0, [sp, #16]
 c02a286:	47d0      	blx	sl
 c02a288:	b110      	cbz	r0, c02a290 <mbedtls_rsa_rsaes_oaep_encrypt+0x7c>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 c02a28a:	f5a0 4389 	sub.w	r3, r0, #17536	; 0x4480
 c02a28e:	e7d1      	b.n	c02a234 <mbedtls_rsa_rsaes_oaep_encrypt+0x20>
    p += hlen;
 c02a290:	eb09 0b05 	add.w	fp, r9, r5
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
 c02a294:	465b      	mov	r3, fp
 c02a296:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 c02a29a:	9803      	ldr	r0, [sp, #12]
 c02a29c:	f7fa f8be 	bl	c02441c <mbedtls_md>
 c02a2a0:	4603      	mov	r3, r0
 c02a2a2:	2800      	cmp	r0, #0
 c02a2a4:	d1c6      	bne.n	c02a234 <mbedtls_rsa_rsaes_oaep_encrypt+0x20>
    p += olen - 2 * hlen - 2 - ilen;
 c02a2a6:	1be3      	subs	r3, r4, r7
 c02a2a8:	9a02      	ldr	r2, [sp, #8]
 c02a2aa:	3b02      	subs	r3, #2
 c02a2ac:	442b      	add	r3, r5
 c02a2ae:	1a9b      	subs	r3, r3, r2
    *p++ = 1;
 c02a2b0:	2201      	movs	r2, #1
    p += olen - 2 * hlen - 2 - ilen;
 c02a2b2:	eb0b 0003 	add.w	r0, fp, r3
    *p++ = 1;
 c02a2b6:	f80b 2003 	strb.w	r2, [fp, r3]
    if( ilen != 0 )
 c02a2ba:	b127      	cbz	r7, c02a2c6 <mbedtls_rsa_rsaes_oaep_encrypt+0xb2>
        memcpy( p, input, ilen );
 c02a2bc:	463a      	mov	r2, r7
 c02a2be:	9917      	ldr	r1, [sp, #92]	; 0x5c
 c02a2c0:	3001      	adds	r0, #1
 c02a2c2:	f7ea fb5c 	bl	c01497e <memcpy>
    mbedtls_md_init( &md_ctx );
 c02a2c6:	af07      	add	r7, sp, #28
 c02a2c8:	4638      	mov	r0, r7
 c02a2ca:	f7fa f849 	bl	c024360 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 c02a2ce:	2200      	movs	r2, #0
 c02a2d0:	9903      	ldr	r1, [sp, #12]
 c02a2d2:	4638      	mov	r0, r7
 c02a2d4:	f7fa f864 	bl	c0243a0 <mbedtls_md_setup>
 c02a2d8:	4603      	mov	r3, r0
 c02a2da:	b9a8      	cbnz	r0, c02a308 <mbedtls_rsa_rsaes_oaep_encrypt+0xf4>
    if( ( ret = mgf_mask( output + hlen + 1, olen - hlen - 1, output + 1, hlen,
 c02a2dc:	f105 0b01 	add.w	fp, r5, #1
 c02a2e0:	3c01      	subs	r4, #1
 c02a2e2:	44b3      	add	fp, r6
 c02a2e4:	1b64      	subs	r4, r4, r5
 c02a2e6:	462b      	mov	r3, r5
 c02a2e8:	9700      	str	r7, [sp, #0]
 c02a2ea:	464a      	mov	r2, r9
 c02a2ec:	4621      	mov	r1, r4
 c02a2ee:	4658      	mov	r0, fp
 c02a2f0:	f7ff fa42 	bl	c029778 <mgf_mask>
 c02a2f4:	4603      	mov	r3, r0
 c02a2f6:	b938      	cbnz	r0, c02a308 <mbedtls_rsa_rsaes_oaep_encrypt+0xf4>
    if( ( ret = mgf_mask( output + 1, hlen, output + hlen + 1, olen - hlen - 1,
 c02a2f8:	4623      	mov	r3, r4
 c02a2fa:	9700      	str	r7, [sp, #0]
 c02a2fc:	465a      	mov	r2, fp
 c02a2fe:	4629      	mov	r1, r5
 c02a300:	4648      	mov	r0, r9
 c02a302:	f7ff fa39 	bl	c029778 <mgf_mask>
 c02a306:	4603      	mov	r3, r0
    mbedtls_md_free( &md_ctx );
 c02a308:	a807      	add	r0, sp, #28
 c02a30a:	9302      	str	r3, [sp, #8]
 c02a30c:	f7fa f82d 	bl	c02436a <mbedtls_md_free>
    if( ret != 0 )
 c02a310:	9b02      	ldr	r3, [sp, #8]
 c02a312:	2b00      	cmp	r3, #0
 c02a314:	d18e      	bne.n	c02a234 <mbedtls_rsa_rsaes_oaep_encrypt+0x20>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 c02a316:	9b05      	ldr	r3, [sp, #20]
 c02a318:	b933      	cbnz	r3, c02a328 <mbedtls_rsa_rsaes_oaep_encrypt+0x114>
 c02a31a:	4632      	mov	r2, r6
 c02a31c:	4631      	mov	r1, r6
 c02a31e:	4640      	mov	r0, r8
 c02a320:	f7ff fd7e 	bl	c029e20 <mbedtls_rsa_public>
 c02a324:	4603      	mov	r3, r0
 c02a326:	e785      	b.n	c02a234 <mbedtls_rsa_rsaes_oaep_encrypt+0x20>
 c02a328:	9600      	str	r6, [sp, #0]
 c02a32a:	4633      	mov	r3, r6
 c02a32c:	9a04      	ldr	r2, [sp, #16]
 c02a32e:	4651      	mov	r1, sl
 c02a330:	4640      	mov	r0, r8
 c02a332:	f7ff fdb3 	bl	c029e9c <mbedtls_rsa_private>
 c02a336:	e7f5      	b.n	c02a324 <mbedtls_rsa_rsaes_oaep_encrypt+0x110>
 c02a338:	ffffbf80 	.word	0xffffbf80

0c02a33c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>:
{
 c02a33c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02a340:	4699      	mov	r9, r3
 c02a342:	e9dd 630c 	ldrd	r6, r3, [sp, #48]	; 0x30
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 c02a346:	f1b9 0f01 	cmp.w	r9, #1
{
 c02a34a:	4607      	mov	r7, r0
 c02a34c:	4688      	mov	r8, r1
 c02a34e:	4693      	mov	fp, r2
 c02a350:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 c02a352:	d106      	bne.n	c02a362 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x26>
 c02a354:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 c02a358:	b11a      	cbz	r2, c02a362 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x26>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c02a35a:	482d      	ldr	r0, [pc, #180]	; (c02a410 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd4>)
}
 c02a35c:	b003      	add	sp, #12
 c02a35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ilen + 11 < ilen || olen < ilen + 11 )
 c02a362:	f116 0f0c 	cmn.w	r6, #12
    olen = ctx->len;
 c02a366:	687c      	ldr	r4, [r7, #4]
    if( ilen + 11 < ilen || olen < ilen + 11 )
 c02a368:	d8f7      	bhi.n	c02a35a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x1e>
 c02a36a:	f106 020b 	add.w	r2, r6, #11
 c02a36e:	42a2      	cmp	r2, r4
 c02a370:	d8f3      	bhi.n	c02a35a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x1e>
    *p++ = 0;
 c02a372:	2100      	movs	r1, #0
    nb_pad = olen - 3 - ilen;
 c02a374:	1ba4      	subs	r4, r4, r6
 c02a376:	1ee2      	subs	r2, r4, #3
    *p++ = 0;
 c02a378:	7029      	strb	r1, [r5, #0]
    if( mode == MBEDTLS_RSA_PUBLIC )
 c02a37a:	f1b9 0f00 	cmp.w	r9, #0
 c02a37e:	d12f      	bne.n	c02a3e0 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xa4>
        if( f_rng == NULL )
 c02a380:	f1b8 0f00 	cmp.w	r8, #0
 c02a384:	d0e9      	beq.n	c02a35a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x1e>
        *p++ = MBEDTLS_RSA_CRYPT;
 c02a386:	2102      	movs	r1, #2
 c02a388:	1cac      	adds	r4, r5, #2
 c02a38a:	18a2      	adds	r2, r4, r2
 c02a38c:	7069      	strb	r1, [r5, #1]
 c02a38e:	9200      	str	r2, [sp, #0]
        while( nb_pad-- > 0 )
 c02a390:	9a00      	ldr	r2, [sp, #0]
 c02a392:	4294      	cmp	r4, r2
 c02a394:	d112      	bne.n	c02a3bc <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x80>
    *p++ = 0;
 c02a396:	2200      	movs	r2, #0
 c02a398:	7022      	strb	r2, [r4, #0]
    if( ilen != 0 )
 c02a39a:	b126      	cbz	r6, c02a3a6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x6a>
        memcpy( p, input, ilen );
 c02a39c:	4632      	mov	r2, r6
 c02a39e:	4619      	mov	r1, r3
 c02a3a0:	1c60      	adds	r0, r4, #1
 c02a3a2:	f7ea faec 	bl	c01497e <memcpy>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 c02a3a6:	f1b9 0f00 	cmp.w	r9, #0
 c02a3aa:	d123      	bne.n	c02a3f4 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xb8>
 c02a3ac:	462a      	mov	r2, r5
 c02a3ae:	4629      	mov	r1, r5
 c02a3b0:	4638      	mov	r0, r7
}
 c02a3b2:	b003      	add	sp, #12
 c02a3b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 c02a3b8:	f7ff bd32 	b.w	c029e20 <mbedtls_rsa_public>
 c02a3bc:	f04f 0a64 	mov.w	sl, #100	; 0x64
                ret = f_rng( p_rng, p, 1 );
 c02a3c0:	2201      	movs	r2, #1
 c02a3c2:	4621      	mov	r1, r4
 c02a3c4:	4658      	mov	r0, fp
 c02a3c6:	9301      	str	r3, [sp, #4]
 c02a3c8:	47c0      	blx	r8
            } while( *p == 0 && --rng_dl && ret == 0 );
 c02a3ca:	7822      	ldrb	r2, [r4, #0]
 c02a3cc:	9b01      	ldr	r3, [sp, #4]
 c02a3ce:	b9da      	cbnz	r2, c02a408 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xcc>
 c02a3d0:	f1ba 0a01 	subs.w	sl, sl, #1
 c02a3d4:	d001      	beq.n	c02a3da <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x9e>
 c02a3d6:	2800      	cmp	r0, #0
 c02a3d8:	d0f2      	beq.n	c02a3c0 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x84>
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 c02a3da:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 c02a3de:	e7bd      	b.n	c02a35c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x20>
        *p++ = MBEDTLS_RSA_SIGN;
 c02a3e0:	2101      	movs	r1, #1
 c02a3e2:	7069      	strb	r1, [r5, #1]
 c02a3e4:	1ca9      	adds	r1, r5, #2
 c02a3e6:	188c      	adds	r4, r1, r2
            *p++ = 0xFF;
 c02a3e8:	22ff      	movs	r2, #255	; 0xff
        while( nb_pad-- > 0 )
 c02a3ea:	428c      	cmp	r4, r1
 c02a3ec:	d0d3      	beq.n	c02a396 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x5a>
            *p++ = 0xFF;
 c02a3ee:	f801 2b01 	strb.w	r2, [r1], #1
 c02a3f2:	e7fa      	b.n	c02a3ea <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xae>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 c02a3f4:	462b      	mov	r3, r5
 c02a3f6:	465a      	mov	r2, fp
 c02a3f8:	4641      	mov	r1, r8
 c02a3fa:	4638      	mov	r0, r7
 c02a3fc:	950c      	str	r5, [sp, #48]	; 0x30
}
 c02a3fe:	b003      	add	sp, #12
 c02a400:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 c02a404:	f7ff bd4a 	b.w	c029e9c <mbedtls_rsa_private>
            if( rng_dl == 0 || ret != 0 )
 c02a408:	2800      	cmp	r0, #0
 c02a40a:	d1e6      	bne.n	c02a3da <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x9e>
            p++;
 c02a40c:	3401      	adds	r4, #1
 c02a40e:	e7bf      	b.n	c02a390 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x54>
 c02a410:	ffffbf80 	.word	0xffffbf80

0c02a414 <mbedtls_rsa_pkcs1_encrypt>:
{
 c02a414:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 c02a416:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
{
 c02a41a:	b087      	sub	sp, #28
 c02a41c:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 c02a420:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    switch( ctx->padding )
 c02a422:	b11c      	cbz	r4, c02a42c <mbedtls_rsa_pkcs1_encrypt+0x18>
 c02a424:	2c01      	cmp	r4, #1
 c02a426:	d006      	beq.n	c02a436 <mbedtls_rsa_pkcs1_encrypt+0x22>
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 c02a428:	4808      	ldr	r0, [pc, #32]	; (c02a44c <mbedtls_rsa_pkcs1_encrypt+0x38>)
 c02a42a:	e00c      	b.n	c02a446 <mbedtls_rsa_pkcs1_encrypt+0x32>
}
 c02a42c:	b007      	add	sp, #28
 c02a42e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
 c02a432:	f7ff bf83 	b.w	c02a33c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
 c02a436:	2400      	movs	r4, #0
 c02a438:	e9cd 6703 	strd	r6, r7, [sp, #12]
 c02a43c:	9502      	str	r5, [sp, #8]
 c02a43e:	e9cd 4400 	strd	r4, r4, [sp]
 c02a442:	f7ff fee7 	bl	c02a214 <mbedtls_rsa_rsaes_oaep_encrypt>
}
 c02a446:	b007      	add	sp, #28
 c02a448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 c02a44a:	bf00      	nop
 c02a44c:	ffffbf00 	.word	0xffffbf00

0c02a450 <mbedtls_rsa_rsaes_oaep_decrypt>:
{
 c02a450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 c02a454:	2b01      	cmp	r3, #1
{
 c02a456:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
 c02a45a:	4607      	mov	r7, r0
 c02a45c:	468a      	mov	sl, r1
 c02a45e:	9203      	str	r2, [sp, #12]
 c02a460:	469b      	mov	fp, r3
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 c02a462:	d10a      	bne.n	c02a47a <mbedtls_rsa_rsaes_oaep_decrypt+0x2a>
 c02a464:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 c02a468:	2b01      	cmp	r3, #1
 c02a46a:	d006      	beq.n	c02a47a <mbedtls_rsa_rsaes_oaep_decrypt+0x2a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c02a46c:	f8df a178 	ldr.w	sl, [pc, #376]	; c02a5e8 <mbedtls_rsa_rsaes_oaep_decrypt+0x198>
}
 c02a470:	4650      	mov	r0, sl
 c02a472:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
 c02a476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ilen = ctx->len;
 c02a47a:	687c      	ldr	r4, [r7, #4]
    if( ilen < 16 || ilen > sizeof( buf ) )
 c02a47c:	f1a4 0310 	sub.w	r3, r4, #16
 c02a480:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 c02a484:	d8f2      	bhi.n	c02a46c <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 c02a486:	f897 00a8 	ldrb.w	r0, [r7, #168]	; 0xa8
 c02a48a:	f7f9 ff5d 	bl	c024348 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 c02a48e:	9002      	str	r0, [sp, #8]
 c02a490:	2800      	cmp	r0, #0
 c02a492:	d0eb      	beq.n	c02a46c <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
    hlen = mbedtls_md_get_size( md_info );
 c02a494:	f7fa f88e 	bl	c0245b4 <mbedtls_md_get_size>
    if( 2 * hlen + 2 > ilen )
 c02a498:	f100 0801 	add.w	r8, r0, #1
 c02a49c:	ea4f 0648 	mov.w	r6, r8, lsl #1
 c02a4a0:	42a6      	cmp	r6, r4
    hlen = mbedtls_md_get_size( md_info );
 c02a4a2:	4605      	mov	r5, r0
    if( 2 * hlen + 2 > ilen )
 c02a4a4:	d8e2      	bhi.n	c02a46c <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
 c02a4a6:	f10d 0960 	add.w	r9, sp, #96	; 0x60
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 c02a4aa:	f1bb 0f00 	cmp.w	fp, #0
 c02a4ae:	d11f      	bne.n	c02a4f0 <mbedtls_rsa_rsaes_oaep_decrypt+0xa0>
 c02a4b0:	464a      	mov	r2, r9
 c02a4b2:	f8dd 1494 	ldr.w	r1, [sp, #1172]	; 0x494
 c02a4b6:	4638      	mov	r0, r7
 c02a4b8:	f7ff fcb2 	bl	c029e20 <mbedtls_rsa_public>
 c02a4bc:	4682      	mov	sl, r0
    if( ret != 0 )
 c02a4be:	b968      	cbnz	r0, c02a4dc <mbedtls_rsa_rsaes_oaep_decrypt+0x8c>
    mbedtls_md_init( &md_ctx );
 c02a4c0:	af05      	add	r7, sp, #20
 c02a4c2:	4638      	mov	r0, r7
 c02a4c4:	f7f9 ff4c 	bl	c024360 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 c02a4c8:	4652      	mov	r2, sl
 c02a4ca:	9902      	ldr	r1, [sp, #8]
 c02a4cc:	4638      	mov	r0, r7
 c02a4ce:	f7f9 ff67 	bl	c0243a0 <mbedtls_md_setup>
 c02a4d2:	4682      	mov	sl, r0
 c02a4d4:	b1b0      	cbz	r0, c02a504 <mbedtls_rsa_rsaes_oaep_decrypt+0xb4>
        mbedtls_md_free( &md_ctx );
 c02a4d6:	4638      	mov	r0, r7
        mbedtls_md_free( &md_ctx );
 c02a4d8:	f7f9 ff47 	bl	c02436a <mbedtls_md_free>
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 c02a4dc:	a818      	add	r0, sp, #96	; 0x60
 c02a4de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 c02a4e2:	f7fc f921 	bl	c026728 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( lhash, sizeof( lhash ) );
 c02a4e6:	2140      	movs	r1, #64	; 0x40
 c02a4e8:	a808      	add	r0, sp, #32
 c02a4ea:	f7fc f91d 	bl	c026728 <mbedtls_platform_zeroize>
    return( ret );
 c02a4ee:	e7bf      	b.n	c02a470 <mbedtls_rsa_rsaes_oaep_decrypt+0x20>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 c02a4f0:	f8cd 9000 	str.w	r9, [sp]
 c02a4f4:	f8dd 3494 	ldr.w	r3, [sp, #1172]	; 0x494
 c02a4f8:	9a03      	ldr	r2, [sp, #12]
 c02a4fa:	4651      	mov	r1, sl
 c02a4fc:	4638      	mov	r0, r7
 c02a4fe:	f7ff fccd 	bl	c029e9c <mbedtls_rsa_private>
 c02a502:	e7db      	b.n	c02a4bc <mbedtls_rsa_rsaes_oaep_decrypt+0x6c>
    if( ( ret = mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
 c02a504:	f104 3bff 	add.w	fp, r4, #4294967295
 c02a508:	44c8      	add	r8, r9
 c02a50a:	ebab 0b05 	sub.w	fp, fp, r5
 c02a50e:	9700      	str	r7, [sp, #0]
 c02a510:	465b      	mov	r3, fp
 c02a512:	4642      	mov	r2, r8
 c02a514:	4629      	mov	r1, r5
 c02a516:	f10d 0061 	add.w	r0, sp, #97	; 0x61
 c02a51a:	f7ff f92d 	bl	c029778 <mgf_mask>
 c02a51e:	4682      	mov	sl, r0
 c02a520:	b948      	cbnz	r0, c02a536 <mbedtls_rsa_rsaes_oaep_decrypt+0xe6>
                          &md_ctx ) ) != 0 ||
 c02a522:	9700      	str	r7, [sp, #0]
 c02a524:	462b      	mov	r3, r5
 c02a526:	f10d 0261 	add.w	r2, sp, #97	; 0x61
 c02a52a:	4659      	mov	r1, fp
 c02a52c:	4640      	mov	r0, r8
 c02a52e:	f7ff f923 	bl	c029778 <mgf_mask>
 c02a532:	4682      	mov	sl, r0
 c02a534:	b108      	cbz	r0, c02a53a <mbedtls_rsa_rsaes_oaep_decrypt+0xea>
        mbedtls_md_free( &md_ctx );
 c02a536:	a805      	add	r0, sp, #20
 c02a538:	e7ce      	b.n	c02a4d8 <mbedtls_rsa_rsaes_oaep_decrypt+0x88>
    mbedtls_md_free( &md_ctx );
 c02a53a:	4638      	mov	r0, r7
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
 c02a53c:	af08      	add	r7, sp, #32
    mbedtls_md_free( &md_ctx );
 c02a53e:	f7f9 ff14 	bl	c02436a <mbedtls_md_free>
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
 c02a542:	463b      	mov	r3, r7
 c02a544:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
 c02a548:	f8dd 1488 	ldr.w	r1, [sp, #1160]	; 0x488
 c02a54c:	9802      	ldr	r0, [sp, #8]
 c02a54e:	f7f9 ff65 	bl	c02441c <mbedtls_md>
 c02a552:	4682      	mov	sl, r0
 c02a554:	2800      	cmp	r0, #0
 c02a556:	d1c1      	bne.n	c02a4dc <mbedtls_rsa_rsaes_oaep_decrypt+0x8c>
    p += hlen; /* Skip seed */
 c02a558:	f10d 0361 	add.w	r3, sp, #97	; 0x61
    bad |= *p++; /* First byte must be 0 */
 c02a55c:	f899 2000 	ldrb.w	r2, [r9]
    p += hlen; /* Skip seed */
 c02a560:	1959      	adds	r1, r3, r5
    for( i = 0; i < hlen; i++ )
 c02a562:	42a8      	cmp	r0, r5
 c02a564:	fa4f fc82 	sxtb.w	ip, r2
 c02a568:	d322      	bcc.n	c02a5b0 <mbedtls_rsa_rsaes_oaep_decrypt+0x160>
    pad_done = 0;
 c02a56a:	2200      	movs	r2, #0
 c02a56c:	440d      	add	r5, r1
 c02a56e:	462f      	mov	r7, r5
    pad_len = 0;
 c02a570:	4611      	mov	r1, r2
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 c02a572:	1ba6      	subs	r6, r4, r6
 c02a574:	442e      	add	r6, r5
 c02a576:	42be      	cmp	r6, r7
 c02a578:	d124      	bne.n	c02a5c4 <mbedtls_rsa_rsaes_oaep_decrypt+0x174>
    bad |= *p++ ^ 0x01;
 c02a57a:	5c6a      	ldrb	r2, [r5, r1]
 c02a57c:	f082 0201 	eor.w	r2, r2, #1
 c02a580:	ea4c 0202 	orr.w	r2, ip, r2
    if( bad != 0 )
 c02a584:	f012 0fff 	tst.w	r2, #255	; 0xff
 c02a588:	d127      	bne.n	c02a5da <mbedtls_rsa_rsaes_oaep_decrypt+0x18a>
    bad |= *p++ ^ 0x01;
 c02a58a:	3101      	adds	r1, #1
 c02a58c:	4429      	add	r1, r5
    if( ilen - ( p - buf ) > output_max_len )
 c02a58e:	aa18      	add	r2, sp, #96	; 0x60
 c02a590:	1a8a      	subs	r2, r1, r2
 c02a592:	f8dd 049c 	ldr.w	r0, [sp, #1180]	; 0x49c
 c02a596:	1aa2      	subs	r2, r4, r2
 c02a598:	4282      	cmp	r2, r0
 c02a59a:	d821      	bhi.n	c02a5e0 <mbedtls_rsa_rsaes_oaep_decrypt+0x190>
    *olen = ilen - (p - buf);
 c02a59c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
 c02a5a0:	6002      	str	r2, [r0, #0]
    if( *olen != 0 )
 c02a5a2:	2a00      	cmp	r2, #0
 c02a5a4:	d09a      	beq.n	c02a4dc <mbedtls_rsa_rsaes_oaep_decrypt+0x8c>
        memcpy( output, p, *olen );
 c02a5a6:	f8dd 0498 	ldr.w	r0, [sp, #1176]	; 0x498
 c02a5aa:	f7ea f9e8 	bl	c01497e <memcpy>
 c02a5ae:	e795      	b.n	c02a4dc <mbedtls_rsa_rsaes_oaep_decrypt+0x8c>
        bad |= lhash[i] ^ *p++;
 c02a5b0:	5c3a      	ldrb	r2, [r7, r0]
 c02a5b2:	f811 e000 	ldrb.w	lr, [r1, r0]
    for( i = 0; i < hlen; i++ )
 c02a5b6:	3001      	adds	r0, #1
        bad |= lhash[i] ^ *p++;
 c02a5b8:	ea82 020e 	eor.w	r2, r2, lr
 c02a5bc:	ea4c 0202 	orr.w	r2, ip, r2
 c02a5c0:	b2d2      	uxtb	r2, r2
 c02a5c2:	e7ce      	b.n	c02a562 <mbedtls_rsa_rsaes_oaep_decrypt+0x112>
        pad_done |= p[i];
 c02a5c4:	f817 0b01 	ldrb.w	r0, [r7], #1
 c02a5c8:	4302      	orrs	r2, r0
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 c02a5ca:	4250      	negs	r0, r2
 c02a5cc:	4310      	orrs	r0, r2
 c02a5ce:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 c02a5d2:	f080 0001 	eor.w	r0, r0, #1
 c02a5d6:	4401      	add	r1, r0
 c02a5d8:	e7cd      	b.n	c02a576 <mbedtls_rsa_rsaes_oaep_decrypt+0x126>
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 c02a5da:	f8df a010 	ldr.w	sl, [pc, #16]	; c02a5ec <mbedtls_rsa_rsaes_oaep_decrypt+0x19c>
 c02a5de:	e77d      	b.n	c02a4dc <mbedtls_rsa_rsaes_oaep_decrypt+0x8c>
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 c02a5e0:	f8df a00c 	ldr.w	sl, [pc, #12]	; c02a5f0 <mbedtls_rsa_rsaes_oaep_decrypt+0x1a0>
 c02a5e4:	e77a      	b.n	c02a4dc <mbedtls_rsa_rsaes_oaep_decrypt+0x8c>
 c02a5e6:	bf00      	nop
 c02a5e8:	ffffbf80 	.word	0xffffbf80
 c02a5ec:	ffffbf00 	.word	0xffffbf00
 c02a5f0:	ffffbc00 	.word	0xffffbc00

0c02a5f4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>:
{
 c02a5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 c02a5f8:	2b01      	cmp	r3, #1
{
 c02a5fa:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
 c02a5fe:	4698      	mov	r8, r3
 c02a600:	f8dd 743c 	ldr.w	r7, [sp, #1084]	; 0x43c
    ilen = ctx->len;
 c02a604:	6845      	ldr	r5, [r0, #4]
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 c02a606:	d104      	bne.n	c02a612 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1e>
 c02a608:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 c02a60c:	2b00      	cmp	r3, #0
 c02a60e:	f040 80c7 	bne.w	c02a7a0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1ac>
    if( ilen < 16 || ilen > sizeof( buf ) )
 c02a612:	f1a5 0310 	sub.w	r3, r5, #16
 c02a616:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 c02a61a:	f200 80c1 	bhi.w	c02a7a0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1ac>
 c02a61e:	ae02      	add	r6, sp, #8
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 c02a620:	f1b8 0f00 	cmp.w	r8, #0
 c02a624:	d127      	bne.n	c02a676 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x82>
 c02a626:	4632      	mov	r2, r6
 c02a628:	f8dd 1434 	ldr.w	r1, [sp, #1076]	; 0x434
 c02a62c:	f7ff fbf8 	bl	c029e20 <mbedtls_rsa_public>
    if( ret != 0 )
 c02a630:	4604      	mov	r4, r0
 c02a632:	2800      	cmp	r0, #0
 c02a634:	f040 809d 	bne.w	c02a772 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x17e>
    bad |= buf[0];
 c02a638:	7830      	ldrb	r0, [r6, #0]
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;
 c02a63a:	7873      	ldrb	r3, [r6, #1]
        for( i = 2; i < ilen; i++ )
 c02a63c:	2402      	movs	r4, #2
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;
 c02a63e:	f083 0301 	eor.w	r3, r3, #1
 c02a642:	4303      	orrs	r3, r0
    unsigned char pad_done = 0;
 c02a644:	2000      	movs	r0, #0
    size_t pad_count = 0;
 c02a646:	4601      	mov	r1, r0
            pad_done |= if_int( buf[i], 0, 1 );
 c02a648:	5d32      	ldrb	r2, [r6, r4]
        for( i = 2; i < ilen; i++ )
 c02a64a:	3401      	adds	r4, #1
            pad_done |= if_int( buf[i], 0, 1 );
 c02a64c:	2a00      	cmp	r2, #0
 c02a64e:	bf08      	it	eq
 c02a650:	f040 0001 	orreq.w	r0, r0, #1
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
 c02a654:	43d2      	mvns	r2, r2
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 c02a656:	f1c0 0c00 	rsb	ip, r0, #0
 c02a65a:	ea4c 0c00 	orr.w	ip, ip, r0
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
 c02a65e:	b2d2      	uxtb	r2, r2
    return( ( mask & if1 ) | (~mask & if0 ) );
 c02a660:	ea22 72ec 	bic.w	r2, r2, ip, asr #31
            pad_count += if_int( pad_done, 0, 1 );
 c02a664:	f1bc 0f00 	cmp.w	ip, #0
 c02a668:	bfa8      	it	ge
 c02a66a:	3101      	addge	r1, #1
        for( i = 2; i < ilen; i++ )
 c02a66c:	42a5      	cmp	r5, r4
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
 c02a66e:	ea43 0302 	orr.w	r3, r3, r2
        for( i = 2; i < ilen; i++ )
 c02a672:	d1e9      	bne.n	c02a648 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x54>
 c02a674:	e026      	b.n	c02a6c4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xd0>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 c02a676:	9600      	str	r6, [sp, #0]
 c02a678:	f8dd 3434 	ldr.w	r3, [sp, #1076]	; 0x434
 c02a67c:	f7ff fc0e 	bl	c029e9c <mbedtls_rsa_private>
    if( ret != 0 )
 c02a680:	4604      	mov	r4, r0
 c02a682:	2800      	cmp	r0, #0
 c02a684:	d175      	bne.n	c02a772 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x17e>
    if( mode == MBEDTLS_RSA_PRIVATE )
 c02a686:	f1b8 0f01 	cmp.w	r8, #1
    bad |= buf[0];
 c02a68a:	7830      	ldrb	r0, [r6, #0]
    if( mode == MBEDTLS_RSA_PRIVATE )
 c02a68c:	d1d5      	bne.n	c02a63a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x46>
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;
 c02a68e:	7873      	ldrb	r3, [r6, #1]
    size_t pad_count = 0;
 c02a690:	4621      	mov	r1, r4
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;
 c02a692:	f083 0302 	eor.w	r3, r3, #2
 c02a696:	4303      	orrs	r3, r0
    unsigned char pad_done = 0;
 c02a698:	4620      	mov	r0, r4
        for( i = 2; i < ilen; i++ )
 c02a69a:	2402      	movs	r4, #2
            pad_done  |= ((buf[i] | (unsigned char)-buf[i]) >> 7) ^ 1;
 c02a69c:	5d32      	ldrb	r2, [r6, r4]
        for( i = 2; i < ilen; i++ )
 c02a69e:	3401      	adds	r4, #1
            pad_done  |= ((buf[i] | (unsigned char)-buf[i]) >> 7) ^ 1;
 c02a6a0:	f1c2 0c00 	rsb	ip, r2, #0
 c02a6a4:	ea42 020c 	orr.w	r2, r2, ip
 c02a6a8:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 c02a6ac:	f082 0201 	eor.w	r2, r2, #1
 c02a6b0:	4310      	orrs	r0, r2
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 c02a6b2:	4242      	negs	r2, r0
 c02a6b4:	4302      	orrs	r2, r0
 c02a6b6:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 c02a6ba:	f082 0201 	eor.w	r2, r2, #1
        for( i = 2; i < ilen; i++ )
 c02a6be:	42a5      	cmp	r5, r4
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 c02a6c0:	4411      	add	r1, r2
        for( i = 2; i < ilen; i++ )
 c02a6c2:	d1eb      	bne.n	c02a69c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xa8>
    plaintext_max_size = ( output_max_len > ilen - 11 ?
 c02a6c4:	f1a5 020b 	sub.w	r2, r5, #11
    return( ( max - size ) >> ( sizeof( size_t ) * 8 - 1 ) );
 c02a6c8:	f1a1 0408 	sub.w	r4, r1, #8
    plaintext_max_size = ( output_max_len > ilen - 11 ?
 c02a6cc:	42ba      	cmp	r2, r7
 c02a6ce:	ea43 73d4 	orr.w	r3, r3, r4, lsr #31
 c02a6d2:	bf28      	it	cs
 c02a6d4:	463a      	movcs	r2, r7
    bad |= size_greater_than( 8, pad_count );
 c02a6d6:	2800      	cmp	r0, #0
 c02a6d8:	bf14      	ite	ne
 c02a6da:	4618      	movne	r0, r3
 c02a6dc:	f043 0001 	orreq.w	r0, r3, #1
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 c02a6e0:	4244      	negs	r4, r0
 c02a6e2:	4304      	orrs	r4, r0
                             (unsigned) ( ilen - pad_count - 3 ) );
 c02a6e4:	f1a5 0803 	sub.w	r8, r5, #3
 c02a6e8:	eba8 0801 	sub.w	r8, r8, r1
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 c02a6ec:	17e4      	asrs	r4, r4, #31
    return( ( mask & if1 ) | (~mask & if0 ) );
 c02a6ee:	2c00      	cmp	r4, #0
 c02a6f0:	bf18      	it	ne
 c02a6f2:	4690      	movne	r8, r2
    return( ( max - size ) >> ( sizeof( size_t ) * 8 - 1 ) );
 c02a6f4:	eba2 0308 	sub.w	r3, r2, r8
 c02a6f8:	0fdb      	lsrs	r3, r3, #31
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 c02a6fa:	4259      	negs	r1, r3
    bad = all_or_nothing_int( bad | output_too_large );
 c02a6fc:	4303      	orrs	r3, r0
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 c02a6fe:	4258      	negs	r0, r3
 c02a700:	4318      	orrs	r0, r3
 c02a702:	f401 4c88 	and.w	ip, r1, #17408	; 0x4400
    return( ( mask & if1 ) | (~mask & if0 ) );
 c02a706:	2c00      	cmp	r4, #0
 c02a708:	bf0c      	ite	eq
 c02a70a:	4664      	moveq	r4, ip
 c02a70c:	f44f 4482 	movne.w	r4, #16640	; 0x4100
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 c02a710:	17c0      	asrs	r0, r0, #31
        buf[i] &= ~bad;
 c02a712:	43c0      	mvns	r0, r0
    ret = - (int) if_int( bad, - MBEDTLS_ERR_RSA_INVALID_PADDING,
 c02a714:	4264      	negs	r4, r4
 c02a716:	f10d 0313 	add.w	r3, sp, #19
        buf[i] &= ~bad;
 c02a71a:	f893 c000 	ldrb.w	ip, [r3]
 c02a71e:	ea0c 0c00 	and.w	ip, ip, r0
 c02a722:	f803 cb01 	strb.w	ip, [r3], #1
    for( i = 11; i < ilen; i++ )
 c02a726:	eba3 0c06 	sub.w	ip, r3, r6
 c02a72a:	4565      	cmp	r5, ip
 c02a72c:	d8f5      	bhi.n	c02a71a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x126>
    return( ( mask & if1 ) | (~mask & if0 ) );
 c02a72e:	2900      	cmp	r1, #0
 c02a730:	bf18      	it	ne
 c02a732:	4690      	movne	r8, r2
    mem_move_to_left( buf + ilen - plaintext_max_size,
 c02a734:	1aa9      	subs	r1, r5, r2
 c02a736:	4431      	add	r1, r6
    if( total == 0 )
 c02a738:	b192      	cbz	r2, c02a760 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x16c>
    for( i = 0; i < total; i++ )
 c02a73a:	2000      	movs	r0, #0
        for( n = 0; n < total - 1; n++ )
 c02a73c:	f102 39ff 	add.w	r9, r2, #4294967295
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
 c02a740:	eb01 0e09 	add.w	lr, r1, r9
        for( n = 0; n < total - 1; n++ )
 c02a744:	2300      	movs	r3, #0
    return( ( max - size ) >> ( sizeof( size_t ) * 8 - 1 ) );
 c02a746:	eba0 0508 	sub.w	r5, r0, r8
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 c02a74a:	17ed      	asrs	r5, r5, #31
        for( n = 0; n < total - 1; n++ )
 c02a74c:	454b      	cmp	r3, r9
 c02a74e:	d31a      	bcc.n	c02a786 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x192>
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
 c02a750:	f89e 3000 	ldrb.w	r3, [lr]
    for( i = 0; i < total; i++ )
 c02a754:	3001      	adds	r0, #1
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
 c02a756:	401d      	ands	r5, r3
    for( i = 0; i < total; i++ )
 c02a758:	4282      	cmp	r2, r0
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
 c02a75a:	f88e 5000 	strb.w	r5, [lr]
    for( i = 0; i < total; i++ )
 c02a75e:	d1f1      	bne.n	c02a744 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x150>
    if( output_max_len != 0 )
 c02a760:	b11f      	cbz	r7, c02a76a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x176>
        memcpy( output, buf + ilen - plaintext_max_size, plaintext_max_size );
 c02a762:	f8dd 0438 	ldr.w	r0, [sp, #1080]	; 0x438
 c02a766:	f7ea f90a 	bl	c01497e <memcpy>
    *olen = plaintext_size;
 c02a76a:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
 c02a76e:	f8c3 8000 	str.w	r8, [r3]
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 c02a772:	f44f 6180 	mov.w	r1, #1024	; 0x400
 c02a776:	4630      	mov	r0, r6
 c02a778:	f7fb ffd6 	bl	c026728 <mbedtls_platform_zeroize>
}
 c02a77c:	4620      	mov	r0, r4
 c02a77e:	f20d 4d0c 	addw	sp, sp, #1036	; 0x40c
 c02a782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            unsigned char current = buf[n];
 c02a786:	f813 c001 	ldrb.w	ip, [r3, r1]
 c02a78a:	eb03 0a01 	add.w	sl, r3, r1
            unsigned char next = buf[n+1];
 c02a78e:	3301      	adds	r3, #1
 c02a790:	f813 b001 	ldrb.w	fp, [r3, r1]
            buf[n] = if_int( no_op, current, next );
 c02a794:	2d00      	cmp	r5, #0
 c02a796:	bf08      	it	eq
 c02a798:	46dc      	moveq	ip, fp
 c02a79a:	f88a c000 	strb.w	ip, [sl]
 c02a79e:	e7d5      	b.n	c02a74c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x158>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c02a7a0:	4c00      	ldr	r4, [pc, #0]	; (c02a7a4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1b0>)
 c02a7a2:	e7eb      	b.n	c02a77c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x188>
 c02a7a4:	ffffbf80 	.word	0xffffbf80

0c02a7a8 <mbedtls_rsa_pkcs1_decrypt>:
{
 c02a7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 c02a7aa:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
{
 c02a7ae:	b087      	sub	sp, #28
 c02a7b0:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 c02a7b4:	e9dd 7c0e 	ldrd	r7, ip, [sp, #56]	; 0x38
    switch( ctx->padding )
 c02a7b8:	b11c      	cbz	r4, c02a7c2 <mbedtls_rsa_pkcs1_decrypt+0x1a>
 c02a7ba:	2c01      	cmp	r4, #1
 c02a7bc:	d006      	beq.n	c02a7cc <mbedtls_rsa_pkcs1_decrypt+0x24>
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 c02a7be:	4809      	ldr	r0, [pc, #36]	; (c02a7e4 <mbedtls_rsa_pkcs1_decrypt+0x3c>)
 c02a7c0:	e00d      	b.n	c02a7de <mbedtls_rsa_pkcs1_decrypt+0x36>
}
 c02a7c2:	b007      	add	sp, #28
 c02a7c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
 c02a7c8:	f7ff bf14 	b.w	c02a5f4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>
            return mbedtls_rsa_rsaes_oaep_decrypt( ctx, f_rng, p_rng, mode, NULL, 0,
 c02a7cc:	2400      	movs	r4, #0
 c02a7ce:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 c02a7d2:	e9cd 5602 	strd	r5, r6, [sp, #8]
 c02a7d6:	e9cd 4400 	strd	r4, r4, [sp]
 c02a7da:	f7ff fe39 	bl	c02a450 <mbedtls_rsa_rsaes_oaep_decrypt>
}
 c02a7de:	b007      	add	sp, #28
 c02a7e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 c02a7e2:	bf00      	nop
 c02a7e4:	ffffbf00 	.word	0xffffbf00

0c02a7e8 <mbedtls_rsa_rsassa_pss_sign>:
{
 c02a7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 c02a7ec:	2b01      	cmp	r3, #1
{
 c02a7ee:	b09f      	sub	sp, #124	; 0x7c
 c02a7f0:	4681      	mov	r9, r0
 c02a7f2:	9103      	str	r1, [sp, #12]
 c02a7f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 c02a7f8:	f89d 00a0 	ldrb.w	r0, [sp, #160]	; 0xa0
 c02a7fc:	9d2b      	ldr	r5, [sp, #172]	; 0xac
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 c02a7fe:	d109      	bne.n	c02a814 <mbedtls_rsa_rsassa_pss_sign+0x2c>
 c02a800:	f8d9 30a4 	ldr.w	r3, [r9, #164]	; 0xa4
 c02a804:	2b01      	cmp	r3, #1
 c02a806:	d005      	beq.n	c02a814 <mbedtls_rsa_rsassa_pss_sign+0x2c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c02a808:	f8df b174 	ldr.w	fp, [pc, #372]	; c02a980 <mbedtls_rsa_rsassa_pss_sign+0x198>
}
 c02a80c:	4658      	mov	r0, fp
 c02a80e:	b01f      	add	sp, #124	; 0x7c
 c02a810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( f_rng == NULL )
 c02a814:	9b03      	ldr	r3, [sp, #12]
 c02a816:	2b00      	cmp	r3, #0
 c02a818:	d0f6      	beq.n	c02a808 <mbedtls_rsa_rsassa_pss_sign+0x20>
    olen = ctx->len;
 c02a81a:	f8d9 4004 	ldr.w	r4, [r9, #4]
    if( md_alg != MBEDTLS_MD_NONE )
 c02a81e:	b130      	cbz	r0, c02a82e <mbedtls_rsa_rsassa_pss_sign+0x46>
        md_info = mbedtls_md_info_from_type( md_alg );
 c02a820:	f7f9 fd92 	bl	c024348 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 c02a824:	2800      	cmp	r0, #0
 c02a826:	d0ef      	beq.n	c02a808 <mbedtls_rsa_rsassa_pss_sign+0x20>
        hashlen = mbedtls_md_get_size( md_info );
 c02a828:	f7f9 fec4 	bl	c0245b4 <mbedtls_md_get_size>
 c02a82c:	9029      	str	r0, [sp, #164]	; 0xa4
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 c02a82e:	f899 00a8 	ldrb.w	r0, [r9, #168]	; 0xa8
 c02a832:	f7f9 fd89 	bl	c024348 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 c02a836:	4683      	mov	fp, r0
 c02a838:	2800      	cmp	r0, #0
 c02a83a:	d0e5      	beq.n	c02a808 <mbedtls_rsa_rsassa_pss_sign+0x20>
    hlen = mbedtls_md_get_size( md_info );
 c02a83c:	f7f9 feba 	bl	c0245b4 <mbedtls_md_get_size>
 c02a840:	b203      	sxth	r3, r0
 c02a842:	005b      	lsls	r3, r3, #1
    if( olen < hlen + min_slen + 2 )
 c02a844:	429c      	cmp	r4, r3
    hlen = mbedtls_md_get_size( md_info );
 c02a846:	4682      	mov	sl, r0
    if( olen < hlen + min_slen + 2 )
 c02a848:	d3de      	bcc.n	c02a808 <mbedtls_rsa_rsassa_pss_sign+0x20>
    else if( olen >= hlen + hlen + 2 )
 c02a84a:	3302      	adds	r3, #2
 c02a84c:	42a3      	cmp	r3, r4
        slen = hlen;
 c02a84e:	bf92      	itee	ls
 c02a850:	4680      	movls	r8, r0
        slen = olen - hlen - 2;
 c02a852:	f1a4 0802 	subhi.w	r8, r4, #2
 c02a856:	eba8 0800 	subhi.w	r8, r8, r0
    memset( sig, 0, olen );
 c02a85a:	4622      	mov	r2, r4
 c02a85c:	2100      	movs	r1, #0
 c02a85e:	4628      	mov	r0, r5
 c02a860:	f7ea f8b1 	bl	c0149c6 <memset>
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
 c02a864:	4642      	mov	r2, r8
 c02a866:	a90e      	add	r1, sp, #56	; 0x38
 c02a868:	9806      	ldr	r0, [sp, #24]
 c02a86a:	9b03      	ldr	r3, [sp, #12]
 c02a86c:	4798      	blx	r3
 c02a86e:	b110      	cbz	r0, c02a876 <mbedtls_rsa_rsassa_pss_sign+0x8e>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 c02a870:	f5a0 4b89 	sub.w	fp, r0, #17536	; 0x4480
 c02a874:	e7ca      	b.n	c02a80c <mbedtls_rsa_rsassa_pss_sign+0x24>
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 c02a876:	f109 0308 	add.w	r3, r9, #8
 c02a87a:	9009      	str	r0, [sp, #36]	; 0x24
 c02a87c:	4618      	mov	r0, r3
 c02a87e:	9304      	str	r3, [sp, #16]
 c02a880:	f7f3 fa84 	bl	c01dd8c <mbedtls_mpi_bitlen>
    *p++ = 0x01;
 c02a884:	2101      	movs	r1, #1
    p += olen - hlen - slen - 2;
 c02a886:	eba4 030a 	sub.w	r3, r4, sl
 c02a88a:	1e9a      	subs	r2, r3, #2
 c02a88c:	eba2 0208 	sub.w	r2, r2, r8
 c02a890:	18ae      	adds	r6, r5, r2
    *p++ = 0x01;
 c02a892:	3601      	adds	r6, #1
 c02a894:	54a9      	strb	r1, [r5, r2]
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 c02a896:	9008      	str	r0, [sp, #32]
    memcpy( p, salt, slen );
 c02a898:	4642      	mov	r2, r8
 c02a89a:	a90e      	add	r1, sp, #56	; 0x38
    mbedtls_md_init( &md_ctx );
 c02a89c:	af0b      	add	r7, sp, #44	; 0x2c
    memcpy( p, salt, slen );
 c02a89e:	4630      	mov	r0, r6
    p += olen - hlen - slen - 2;
 c02a8a0:	9305      	str	r3, [sp, #20]
    memcpy( p, salt, slen );
 c02a8a2:	f7ea f86c 	bl	c01497e <memcpy>
    mbedtls_md_init( &md_ctx );
 c02a8a6:	4638      	mov	r0, r7
 c02a8a8:	f7f9 fd5a 	bl	c024360 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 c02a8ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c02a8ae:	4659      	mov	r1, fp
 c02a8b0:	461a      	mov	r2, r3
 c02a8b2:	4638      	mov	r0, r7
 c02a8b4:	f7f9 fd74 	bl	c0243a0 <mbedtls_md_setup>
 c02a8b8:	4683      	mov	fp, r0
 c02a8ba:	2800      	cmp	r0, #0
 c02a8bc:	d147      	bne.n	c02a94e <mbedtls_rsa_rsassa_pss_sign+0x166>
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
 c02a8be:	4638      	mov	r0, r7
 c02a8c0:	f7f9 fd8e 	bl	c0243e0 <mbedtls_md_starts>
 c02a8c4:	4683      	mov	fp, r0
 c02a8c6:	2800      	cmp	r0, #0
 c02a8c8:	d141      	bne.n	c02a94e <mbedtls_rsa_rsassa_pss_sign+0x166>
    p += slen;
 c02a8ca:	4446      	add	r6, r8
    if( ( ret = mbedtls_md_update( &md_ctx, p, 8 ) ) != 0 )
 c02a8cc:	2208      	movs	r2, #8
 c02a8ce:	4631      	mov	r1, r6
 c02a8d0:	4638      	mov	r0, r7
 c02a8d2:	f7f9 fd8f 	bl	c0243f4 <mbedtls_md_update>
 c02a8d6:	4683      	mov	fp, r0
 c02a8d8:	2800      	cmp	r0, #0
 c02a8da:	d138      	bne.n	c02a94e <mbedtls_rsa_rsassa_pss_sign+0x166>
    if( ( ret = mbedtls_md_update( &md_ctx, hash, hashlen ) ) != 0 )
 c02a8dc:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
 c02a8e0:	4638      	mov	r0, r7
 c02a8e2:	f7f9 fd87 	bl	c0243f4 <mbedtls_md_update>
 c02a8e6:	4683      	mov	fp, r0
 c02a8e8:	bb88      	cbnz	r0, c02a94e <mbedtls_rsa_rsassa_pss_sign+0x166>
    if( ( ret = mbedtls_md_update( &md_ctx, salt, slen ) ) != 0 )
 c02a8ea:	4642      	mov	r2, r8
 c02a8ec:	a90e      	add	r1, sp, #56	; 0x38
 c02a8ee:	4638      	mov	r0, r7
 c02a8f0:	f7f9 fd80 	bl	c0243f4 <mbedtls_md_update>
 c02a8f4:	4683      	mov	fp, r0
 c02a8f6:	bb50      	cbnz	r0, c02a94e <mbedtls_rsa_rsassa_pss_sign+0x166>
    if( ( ret = mbedtls_md_finish( &md_ctx, p ) ) != 0 )
 c02a8f8:	4631      	mov	r1, r6
 c02a8fa:	4638      	mov	r0, r7
 c02a8fc:	f7f9 fd84 	bl	c024408 <mbedtls_md_finish>
 c02a900:	4683      	mov	fp, r0
 c02a902:	bb20      	cbnz	r0, c02a94e <mbedtls_rsa_rsassa_pss_sign+0x166>
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 c02a904:	9b08      	ldr	r3, [sp, #32]
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
 c02a906:	9700      	str	r7, [sp, #0]
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 c02a908:	3b01      	subs	r3, #1
    if( msb % 8 == 0 )
 c02a90a:	f013 0f07 	tst.w	r3, #7
 c02a90e:	bf0c      	ite	eq
 c02a910:	2001      	moveq	r0, #1
 c02a912:	2000      	movne	r0, #0
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
 c02a914:	9b05      	ldr	r3, [sp, #20]
 c02a916:	4632      	mov	r2, r6
 c02a918:	1e59      	subs	r1, r3, #1
 c02a91a:	1a09      	subs	r1, r1, r0
 c02a91c:	4653      	mov	r3, sl
 c02a91e:	4428      	add	r0, r5
 c02a920:	f7fe ff2a 	bl	c029778 <mgf_mask>
 c02a924:	4683      	mov	fp, r0
 c02a926:	b990      	cbnz	r0, c02a94e <mbedtls_rsa_rsassa_pss_sign+0x166>
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 c02a928:	9804      	ldr	r0, [sp, #16]
 c02a92a:	f7f3 fa2f 	bl	c01dd8c <mbedtls_mpi_bitlen>
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 c02a92e:	ebc0 00c4 	rsb	r0, r0, r4, lsl #3
 c02a932:	24ff      	movs	r4, #255	; 0xff
    *p++ = 0xBC;
 c02a934:	23bc      	movs	r3, #188	; 0xbc
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 c02a936:	3001      	adds	r0, #1
 c02a938:	fa44 f000 	asr.w	r0, r4, r0
 c02a93c:	782c      	ldrb	r4, [r5, #0]
    mbedtls_platform_zeroize( salt, sizeof( salt ) );
 c02a93e:	2140      	movs	r1, #64	; 0x40
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 c02a940:	4020      	ands	r0, r4
 c02a942:	7028      	strb	r0, [r5, #0]
    *p++ = 0xBC;
 c02a944:	f806 300a 	strb.w	r3, [r6, sl]
    mbedtls_platform_zeroize( salt, sizeof( salt ) );
 c02a948:	a80e      	add	r0, sp, #56	; 0x38
 c02a94a:	f7fb feed 	bl	c026728 <mbedtls_platform_zeroize>
    mbedtls_md_free( &md_ctx );
 c02a94e:	a80b      	add	r0, sp, #44	; 0x2c
 c02a950:	f7f9 fd0b 	bl	c02436a <mbedtls_md_free>
    if( ret != 0 )
 c02a954:	f1bb 0f00 	cmp.w	fp, #0
 c02a958:	f47f af58 	bne.w	c02a80c <mbedtls_rsa_rsassa_pss_sign+0x24>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
 c02a95c:	9b07      	ldr	r3, [sp, #28]
 c02a95e:	b933      	cbnz	r3, c02a96e <mbedtls_rsa_rsassa_pss_sign+0x186>
 c02a960:	462a      	mov	r2, r5
 c02a962:	4629      	mov	r1, r5
 c02a964:	4648      	mov	r0, r9
 c02a966:	f7ff fa5b 	bl	c029e20 <mbedtls_rsa_public>
 c02a96a:	4683      	mov	fp, r0
 c02a96c:	e74e      	b.n	c02a80c <mbedtls_rsa_rsassa_pss_sign+0x24>
 c02a96e:	9500      	str	r5, [sp, #0]
 c02a970:	462b      	mov	r3, r5
 c02a972:	9a06      	ldr	r2, [sp, #24]
 c02a974:	9903      	ldr	r1, [sp, #12]
 c02a976:	4648      	mov	r0, r9
 c02a978:	f7ff fa90 	bl	c029e9c <mbedtls_rsa_private>
 c02a97c:	e7f5      	b.n	c02a96a <mbedtls_rsa_rsassa_pss_sign+0x182>
 c02a97e:	bf00      	nop
 c02a980:	ffffbf80 	.word	0xffffbf80

0c02a984 <mbedtls_rsa_rsassa_pkcs1_v15_sign>:
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 c02a984:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 c02a988:	2b01      	cmp	r3, #1
{
 c02a98a:	4605      	mov	r5, r0
 c02a98c:	4689      	mov	r9, r1
 c02a98e:	4692      	mov	sl, r2
 c02a990:	e9dd 120b 	ldrd	r1, r2, [sp, #44]	; 0x2c
 c02a994:	461e      	mov	r6, r3
 c02a996:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 c02a99a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 c02a99c:	d103      	bne.n	c02a9a6 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x22>
 c02a99e:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 c02a9a2:	2b00      	cmp	r3, #0
 c02a9a4:	d14d      	bne.n	c02aa42 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbe>

    /*
     * Prepare PKCS1-v1.5 encoding (padding and hash identifier)
     */

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash,
 c02a9a6:	9700      	str	r7, [sp, #0]
 c02a9a8:	686b      	ldr	r3, [r5, #4]
 c02a9aa:	f7fe ff3d 	bl	c029828 <rsa_rsassa_pkcs1_v15_encode>
 c02a9ae:	4604      	mov	r4, r0
 c02a9b0:	bbd0      	cbnz	r0, c02aa28 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa4>

    /*
     * Call respective RSA primitive
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
 c02a9b2:	b93e      	cbnz	r6, c02a9c4 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x40>
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 c02a9b4:	463a      	mov	r2, r7
 c02a9b6:	4639      	mov	r1, r7
 c02a9b8:	4628      	mov	r0, r5
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
 c02a9ba:	b002      	add	sp, #8
 c02a9bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 c02a9c0:	f7ff ba2e 	b.w	c029e20 <mbedtls_rsa_public>
    sig_try = mbedtls_calloc( 1, ctx->len );
 c02a9c4:	6869      	ldr	r1, [r5, #4]
 c02a9c6:	2001      	movs	r0, #1
 c02a9c8:	f7fb fe98 	bl	c0266fc <mbedtls_calloc>
    if( sig_try == NULL )
 c02a9cc:	4606      	mov	r6, r0
 c02a9ce:	b140      	cbz	r0, c02a9e2 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x5e>
    verif = mbedtls_calloc( 1, ctx->len );
 c02a9d0:	6869      	ldr	r1, [r5, #4]
 c02a9d2:	2001      	movs	r0, #1
 c02a9d4:	f7fb fe92 	bl	c0266fc <mbedtls_calloc>
    if( verif == NULL )
 c02a9d8:	4680      	mov	r8, r0
 c02a9da:	b928      	cbnz	r0, c02a9e8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x64>
        mbedtls_free( sig_try );
 c02a9dc:	4630      	mov	r0, r6
 c02a9de:	f7fb fe93 	bl	c026708 <mbedtls_free>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 c02a9e2:	f06f 040f 	mvn.w	r4, #15
 c02a9e6:	e01f      	b.n	c02aa28 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa4>
    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
 c02a9e8:	9600      	str	r6, [sp, #0]
 c02a9ea:	463b      	mov	r3, r7
 c02a9ec:	4652      	mov	r2, sl
 c02a9ee:	4649      	mov	r1, r9
 c02a9f0:	4628      	mov	r0, r5
 c02a9f2:	f7ff fa53 	bl	c029e9c <mbedtls_rsa_private>
 c02a9f6:	4604      	mov	r4, r0
 c02a9f8:	b980      	cbnz	r0, c02aa1c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x98>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
 c02a9fa:	4642      	mov	r2, r8
 c02a9fc:	4631      	mov	r1, r6
 c02a9fe:	4628      	mov	r0, r5
 c02aa00:	f7ff fa0e 	bl	c029e20 <mbedtls_rsa_public>
 c02aa04:	4604      	mov	r4, r0
 c02aa06:	b948      	cbnz	r0, c02aa1c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x98>
    unsigned char diff = 0;
 c02aa08:	4601      	mov	r1, r0
    for( i = 0; i < n; i++ )
 c02aa0a:	4603      	mov	r3, r0
    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 c02aa0c:	686a      	ldr	r2, [r5, #4]
    for( i = 0; i < n; i++ )
 c02aa0e:	429a      	cmp	r2, r3
 c02aa10:	d10e      	bne.n	c02aa30 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xac>
    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 c02aa12:	b9a1      	cbnz	r1, c02aa3e <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xba>
    memcpy( sig, sig_try, ctx->len );
 c02aa14:	4631      	mov	r1, r6
 c02aa16:	4638      	mov	r0, r7
 c02aa18:	f7e9 ffb1 	bl	c01497e <memcpy>
    mbedtls_free( sig_try );
 c02aa1c:	4630      	mov	r0, r6
 c02aa1e:	f7fb fe73 	bl	c026708 <mbedtls_free>
    mbedtls_free( verif );
 c02aa22:	4640      	mov	r0, r8
 c02aa24:	f7fb fe70 	bl	c026708 <mbedtls_free>
}
 c02aa28:	4620      	mov	r0, r4
 c02aa2a:	b002      	add	sp, #8
 c02aa2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        diff |= A[i] ^ B[i];
 c02aa30:	f818 0003 	ldrb.w	r0, [r8, r3]
 c02aa34:	5cfd      	ldrb	r5, [r7, r3]
    for( i = 0; i < n; i++ )
 c02aa36:	3301      	adds	r3, #1
        diff |= A[i] ^ B[i];
 c02aa38:	4068      	eors	r0, r5
 c02aa3a:	4301      	orrs	r1, r0
 c02aa3c:	e7e7      	b.n	c02aa0e <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x8a>
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
 c02aa3e:	4c02      	ldr	r4, [pc, #8]	; (c02aa48 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc4>)
 c02aa40:	e7ec      	b.n	c02aa1c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x98>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c02aa42:	4c02      	ldr	r4, [pc, #8]	; (c02aa4c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc8>)
 c02aa44:	e7f0      	b.n	c02aa28 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa4>
 c02aa46:	bf00      	nop
 c02aa48:	ffffbd00 	.word	0xffffbd00
 c02aa4c:	ffffbf80 	.word	0xffffbf80

0c02aa50 <mbedtls_rsa_pkcs1_sign>:
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 c02aa50:	b430      	push	{r4, r5}
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    switch( ctx->padding )
 c02aa52:	f8d0 50a4 	ldr.w	r5, [r0, #164]	; 0xa4
{
 c02aa56:	f89d 4008 	ldrb.w	r4, [sp, #8]
    switch( ctx->padding )
 c02aa5a:	b125      	cbz	r5, c02aa66 <mbedtls_rsa_pkcs1_sign+0x16>
 c02aa5c:	2d01      	cmp	r5, #1
 c02aa5e:	d006      	beq.n	c02aa6e <mbedtls_rsa_pkcs1_sign+0x1e>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 c02aa60:	bc30      	pop	{r4, r5}
 c02aa62:	4805      	ldr	r0, [pc, #20]	; (c02aa78 <mbedtls_rsa_pkcs1_sign+0x28>)
 c02aa64:	4770      	bx	lr
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
 c02aa66:	9402      	str	r4, [sp, #8]
}
 c02aa68:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
 c02aa6a:	f7ff bf8b 	b.w	c02a984 <mbedtls_rsa_rsassa_pkcs1_v15_sign>
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
 c02aa6e:	9402      	str	r4, [sp, #8]
}
 c02aa70:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
 c02aa72:	f7ff beb9 	b.w	c02a7e8 <mbedtls_rsa_rsassa_pss_sign>
 c02aa76:	bf00      	nop
 c02aa78:	ffffbf00 	.word	0xffffbf00

0c02aa7c <mbedtls_rsa_rsassa_pss_verify_ext>:
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
 c02aa7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 c02aa80:	2b01      	cmp	r3, #1
{
 c02aa82:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 c02aa86:	4605      	mov	r5, r0
 c02aa88:	f89d 7490 	ldrb.w	r7, [sp, #1168]	; 0x490
 c02aa8c:	f8dd b4a0 	ldr.w	fp, [sp, #1184]	; 0x4a0
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 c02aa90:	d109      	bne.n	c02aaa6 <mbedtls_rsa_rsassa_pss_verify_ext+0x2a>
 c02aa92:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
 c02aa96:	2801      	cmp	r0, #1
 c02aa98:	d005      	beq.n	c02aaa6 <mbedtls_rsa_rsassa_pss_verify_ext+0x2a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c02aa9a:	4b61      	ldr	r3, [pc, #388]	; (c02ac20 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a4>)

exit:
    mbedtls_md_free( &md_ctx );

    return( ret );
}
 c02aa9c:	4618      	mov	r0, r3
 c02aa9e:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 c02aaa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    siglen = ctx->len;
 c02aaa6:	686c      	ldr	r4, [r5, #4]
    if( siglen < 16 || siglen > sizeof( buf ) )
 c02aaa8:	f1a4 0010 	sub.w	r0, r4, #16
 c02aaac:	f5b0 7f7c 	cmp.w	r0, #1008	; 0x3f0
 c02aab0:	d8f3      	bhi.n	c02aa9a <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
 c02aab2:	ae1a      	add	r6, sp, #104	; 0x68
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 c02aab4:	2b00      	cmp	r3, #0
 c02aab6:	f040 80a7 	bne.w	c02ac08 <mbedtls_rsa_rsassa_pss_verify_ext+0x18c>
 c02aaba:	4632      	mov	r2, r6
 c02aabc:	f8dd 14a4 	ldr.w	r1, [sp, #1188]	; 0x4a4
 c02aac0:	4628      	mov	r0, r5
 c02aac2:	f7ff f9ad 	bl	c029e20 <mbedtls_rsa_public>
 c02aac6:	4603      	mov	r3, r0
    if( ret != 0 )
 c02aac8:	2800      	cmp	r0, #0
 c02aaca:	d1e7      	bne.n	c02aa9c <mbedtls_rsa_rsassa_pss_verify_ext+0x20>
    if( buf[siglen - 1] != 0xBC )
 c02aacc:	f104 38ff 	add.w	r8, r4, #4294967295
 c02aad0:	f816 3008 	ldrb.w	r3, [r6, r8]
 c02aad4:	2bbc      	cmp	r3, #188	; 0xbc
 c02aad6:	f040 80a0 	bne.w	c02ac1a <mbedtls_rsa_rsassa_pss_verify_ext+0x19e>
    if( md_alg != MBEDTLS_MD_NONE )
 c02aada:	b147      	cbz	r7, c02aaee <mbedtls_rsa_rsassa_pss_verify_ext+0x72>
        md_info = mbedtls_md_info_from_type( md_alg );
 c02aadc:	4638      	mov	r0, r7
 c02aade:	f7f9 fc33 	bl	c024348 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 c02aae2:	2800      	cmp	r0, #0
 c02aae4:	d0d9      	beq.n	c02aa9a <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
        hashlen = mbedtls_md_get_size( md_info );
 c02aae6:	f7f9 fd65 	bl	c0245b4 <mbedtls_md_get_size>
 c02aaea:	f8cd 0494 	str.w	r0, [sp, #1172]	; 0x494
    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
 c02aaee:	f89d 049c 	ldrb.w	r0, [sp, #1180]	; 0x49c
 c02aaf2:	f7f9 fc29 	bl	c024348 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 c02aaf6:	4681      	mov	r9, r0
 c02aaf8:	2800      	cmp	r0, #0
 c02aafa:	d0ce      	beq.n	c02aa9a <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
    hlen = mbedtls_md_get_size( md_info );
 c02aafc:	f7f9 fd5a 	bl	c0245b4 <mbedtls_md_get_size>
    memset( zeros, 0, 8 );
 c02ab00:	2300      	movs	r3, #0
    hlen = mbedtls_md_get_size( md_info );
 c02ab02:	4682      	mov	sl, r0
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 c02ab04:	f105 0008 	add.w	r0, r5, #8
    memset( zeros, 0, 8 );
 c02ab08:	e9cd 3305 	strd	r3, r3, [sp, #20]
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 c02ab0c:	f7f3 f93e 	bl	c01dd8c <mbedtls_mpi_bitlen>
    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 c02ab10:	f06f 0307 	mvn.w	r3, #7
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 c02ab14:	1e47      	subs	r7, r0, #1
    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 c02ab16:	fb03 7304 	mla	r3, r3, r4, r7
 c02ab1a:	7832      	ldrb	r2, [r6, #0]
 c02ab1c:	3308      	adds	r3, #8
 c02ab1e:	fa52 f303 	asrs.w	r3, r2, r3
 c02ab22:	d1ba      	bne.n	c02aa9a <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
    if( msb % 8 == 0 )
 c02ab24:	077b      	lsls	r3, r7, #29
 c02ab26:	bf18      	it	ne
 c02ab28:	46a0      	movne	r8, r4
    if( siglen < hlen + 2 )
 c02ab2a:	f10a 0302 	add.w	r3, sl, #2
    p = buf;
 c02ab2e:	bf14      	ite	ne
 c02ab30:	4635      	movne	r5, r6
        p++;
 c02ab32:	f10d 0569 	addeq.w	r5, sp, #105	; 0x69
    if( siglen < hlen + 2 )
 c02ab36:	4543      	cmp	r3, r8
 c02ab38:	d8af      	bhi.n	c02aa9a <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
    mbedtls_md_init( &md_ctx );
 c02ab3a:	ac07      	add	r4, sp, #28
 c02ab3c:	4620      	mov	r0, r4
 c02ab3e:	f7f9 fc0f 	bl	c024360 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 c02ab42:	2200      	movs	r2, #0
 c02ab44:	4649      	mov	r1, r9
 c02ab46:	4620      	mov	r0, r4
 c02ab48:	f7f9 fc2a 	bl	c0243a0 <mbedtls_md_setup>
 c02ab4c:	4603      	mov	r3, r0
 c02ab4e:	2800      	cmp	r0, #0
 c02ab50:	d154      	bne.n	c02abfc <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
    hash_start = p + siglen - hlen - 1;
 c02ab52:	ea6f 010a 	mvn.w	r1, sl
 c02ab56:	4441      	add	r1, r8
 c02ab58:	eb05 0901 	add.w	r9, r5, r1
    ret = mgf_mask( p, siglen - hlen - 1, hash_start, hlen, &md_ctx );
 c02ab5c:	4653      	mov	r3, sl
 c02ab5e:	9400      	str	r4, [sp, #0]
 c02ab60:	464a      	mov	r2, r9
 c02ab62:	4628      	mov	r0, r5
 c02ab64:	f7fe fe08 	bl	c029778 <mgf_mask>
    if( ret != 0 )
 c02ab68:	4603      	mov	r3, r0
 c02ab6a:	2800      	cmp	r0, #0
 c02ab6c:	d146      	bne.n	c02abfc <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
    buf[0] &= 0xFF >> ( siglen * 8 - msb );
 c02ab6e:	ebc7 08c8 	rsb	r8, r7, r8, lsl #3
 c02ab72:	27ff      	movs	r7, #255	; 0xff
 c02ab74:	fa47 f708 	asr.w	r7, r7, r8
 c02ab78:	f896 8000 	ldrb.w	r8, [r6]
    while( p < hash_start - 1 && *p == 0 )
 c02ab7c:	f109 32ff 	add.w	r2, r9, #4294967295
    buf[0] &= 0xFF >> ( siglen * 8 - msb );
 c02ab80:	ea07 0708 	and.w	r7, r7, r8
 c02ab84:	7037      	strb	r7, [r6, #0]
 c02ab86:	f815 3b01 	ldrb.w	r3, [r5], #1
    while( p < hash_start - 1 && *p == 0 )
 c02ab8a:	1e69      	subs	r1, r5, #1
 c02ab8c:	428a      	cmp	r2, r1
 c02ab8e:	d901      	bls.n	c02ab94 <mbedtls_rsa_rsassa_pss_verify_ext+0x118>
 c02ab90:	2b00      	cmp	r3, #0
 c02ab92:	d0f8      	beq.n	c02ab86 <mbedtls_rsa_rsassa_pss_verify_ext+0x10a>
    if( *p++ != 0x01 )
 c02ab94:	2b01      	cmp	r3, #1
 c02ab96:	d13e      	bne.n	c02ac16 <mbedtls_rsa_rsassa_pss_verify_ext+0x19a>
    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 c02ab98:	f1bb 3fff 	cmp.w	fp, #4294967295
    observed_salt_len = hash_start - p;
 c02ab9c:	eba9 0605 	sub.w	r6, r9, r5
    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 c02aba0:	d001      	beq.n	c02aba6 <mbedtls_rsa_rsassa_pss_verify_ext+0x12a>
 c02aba2:	455e      	cmp	r6, fp
 c02aba4:	d137      	bne.n	c02ac16 <mbedtls_rsa_rsassa_pss_verify_ext+0x19a>
    ret = mbedtls_md_starts( &md_ctx );
 c02aba6:	4620      	mov	r0, r4
 c02aba8:	f7f9 fc1a 	bl	c0243e0 <mbedtls_md_starts>
    if ( ret != 0 )
 c02abac:	4603      	mov	r3, r0
 c02abae:	bb28      	cbnz	r0, c02abfc <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
    ret = mbedtls_md_update( &md_ctx, zeros, 8 );
 c02abb0:	2208      	movs	r2, #8
 c02abb2:	a905      	add	r1, sp, #20
 c02abb4:	4620      	mov	r0, r4
 c02abb6:	f7f9 fc1d 	bl	c0243f4 <mbedtls_md_update>
    if ( ret != 0 )
 c02abba:	4603      	mov	r3, r0
 c02abbc:	b9f0      	cbnz	r0, c02abfc <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
    ret = mbedtls_md_update( &md_ctx, hash, hashlen );
 c02abbe:	f8dd 2494 	ldr.w	r2, [sp, #1172]	; 0x494
 c02abc2:	f8dd 1498 	ldr.w	r1, [sp, #1176]	; 0x498
 c02abc6:	4620      	mov	r0, r4
 c02abc8:	f7f9 fc14 	bl	c0243f4 <mbedtls_md_update>
    if ( ret != 0 )
 c02abcc:	4603      	mov	r3, r0
 c02abce:	b9a8      	cbnz	r0, c02abfc <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
    ret = mbedtls_md_update( &md_ctx, p, observed_salt_len );
 c02abd0:	4632      	mov	r2, r6
 c02abd2:	4629      	mov	r1, r5
 c02abd4:	4620      	mov	r0, r4
 c02abd6:	f7f9 fc0d 	bl	c0243f4 <mbedtls_md_update>
    if ( ret != 0 )
 c02abda:	4603      	mov	r3, r0
 c02abdc:	b970      	cbnz	r0, c02abfc <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
    ret = mbedtls_md_finish( &md_ctx, result );
 c02abde:	a90a      	add	r1, sp, #40	; 0x28
 c02abe0:	4620      	mov	r0, r4
 c02abe2:	f7f9 fc11 	bl	c024408 <mbedtls_md_finish>
    if ( ret != 0 )
 c02abe6:	4603      	mov	r3, r0
 c02abe8:	b940      	cbnz	r0, c02abfc <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
    if( memcmp( hash_start, result, hlen ) != 0 )
 c02abea:	4652      	mov	r2, sl
 c02abec:	a90a      	add	r1, sp, #40	; 0x28
 c02abee:	4648      	mov	r0, r9
 c02abf0:	f7e9 feb6 	bl	c014960 <memcmp>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 c02abf4:	4b0b      	ldr	r3, [pc, #44]	; (c02ac24 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>)
 c02abf6:	2800      	cmp	r0, #0
 c02abf8:	bf08      	it	eq
 c02abfa:	2300      	moveq	r3, #0
    mbedtls_md_free( &md_ctx );
 c02abfc:	4620      	mov	r0, r4
 c02abfe:	9303      	str	r3, [sp, #12]
 c02ac00:	f7f9 fbb3 	bl	c02436a <mbedtls_md_free>
    return( ret );
 c02ac04:	9b03      	ldr	r3, [sp, #12]
 c02ac06:	e749      	b.n	c02aa9c <mbedtls_rsa_rsassa_pss_verify_ext+0x20>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 c02ac08:	9600      	str	r6, [sp, #0]
 c02ac0a:	f8dd 34a4 	ldr.w	r3, [sp, #1188]	; 0x4a4
 c02ac0e:	4628      	mov	r0, r5
 c02ac10:	f7ff f944 	bl	c029e9c <mbedtls_rsa_private>
 c02ac14:	e757      	b.n	c02aac6 <mbedtls_rsa_rsassa_pss_verify_ext+0x4a>
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 c02ac16:	4b04      	ldr	r3, [pc, #16]	; (c02ac28 <mbedtls_rsa_rsassa_pss_verify_ext+0x1ac>)
 c02ac18:	e7f0      	b.n	c02abfc <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 c02ac1a:	4b03      	ldr	r3, [pc, #12]	; (c02ac28 <mbedtls_rsa_rsassa_pss_verify_ext+0x1ac>)
 c02ac1c:	e73e      	b.n	c02aa9c <mbedtls_rsa_rsassa_pss_verify_ext+0x20>
 c02ac1e:	bf00      	nop
 c02ac20:	ffffbf80 	.word	0xffffbf80
 c02ac24:	ffffbc80 	.word	0xffffbc80
 c02ac28:	ffffbf00 	.word	0xffffbf00

0c02ac2c <mbedtls_rsa_rsassa_pss_verify>:
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
 c02ac2c:	b570      	push	{r4, r5, r6, lr}
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
 c02ac2e:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
{
 c02ac32:	b086      	sub	sp, #24
 c02ac34:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
                             ? (mbedtls_md_type_t) ctx->hash_id
                             : md_alg;
 c02ac38:	b17c      	cbz	r4, c02ac5a <mbedtls_rsa_rsassa_pss_verify+0x2e>
 c02ac3a:	b2e4      	uxtb	r4, r4

    return( mbedtls_rsa_rsassa_pss_verify_ext( ctx, f_rng, p_rng, mode,
 c02ac3c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 c02ac3e:	9605      	str	r6, [sp, #20]
 c02ac40:	f04f 36ff 	mov.w	r6, #4294967295
 c02ac44:	e9cd 4603 	strd	r4, r6, [sp, #12]
 c02ac48:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 c02ac4a:	9402      	str	r4, [sp, #8]
 c02ac4c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 c02ac4e:	e9cd 5400 	strd	r5, r4, [sp]
 c02ac52:	f7ff ff13 	bl	c02aa7c <mbedtls_rsa_rsassa_pss_verify_ext>
                                       md_alg, hashlen, hash,
                                       mgf1_hash_id, MBEDTLS_RSA_SALT_LEN_ANY,
                                       sig ) );

}
 c02ac56:	b006      	add	sp, #24
 c02ac58:	bd70      	pop	{r4, r5, r6, pc}
                             : md_alg;
 c02ac5a:	462c      	mov	r4, r5
 c02ac5c:	e7ee      	b.n	c02ac3c <mbedtls_rsa_rsassa_pss_verify+0x10>
	...

0c02ac60 <mbedtls_rsa_rsassa_pkcs1_v15_verify>:
                        hashlen == 0 ) ||
                      hash != NULL );

    sig_len = ctx->len;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 c02ac60:	2b01      	cmp	r3, #1
{
 c02ac62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02ac66:	4680      	mov	r8, r0
 c02ac68:	468a      	mov	sl, r1
 c02ac6a:	4693      	mov	fp, r2
 c02ac6c:	4699      	mov	r9, r3
    sig_len = ctx->len;
 c02ac6e:	6847      	ldr	r7, [r0, #4]
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 c02ac70:	d103      	bne.n	c02ac7a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x1a>
 c02ac72:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 c02ac76:	2b00      	cmp	r3, #0
 c02ac78:	d14a      	bne.n	c02ad10 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb0>

    /*
     * Prepare expected PKCS1 v1.5 encoding of hash.
     */

    if( ( encoded          = mbedtls_calloc( 1, sig_len ) ) == NULL ||
 c02ac7a:	4639      	mov	r1, r7
 c02ac7c:	2001      	movs	r0, #1
 c02ac7e:	f7fb fd3d 	bl	c0266fc <mbedtls_calloc>
 c02ac82:	4606      	mov	r6, r0
 c02ac84:	2800      	cmp	r0, #0
 c02ac86:	d045      	beq.n	c02ad14 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb4>
 c02ac88:	4639      	mov	r1, r7
 c02ac8a:	2001      	movs	r0, #1
 c02ac8c:	f7fb fd36 	bl	c0266fc <mbedtls_calloc>
 c02ac90:	4605      	mov	r5, r0
 c02ac92:	2800      	cmp	r0, #0
 c02ac94:	d041      	beq.n	c02ad1a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xba>
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
        goto cleanup;
    }

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash, sig_len,
 c02ac96:	e9dd 120d 	ldrd	r1, r2, [sp, #52]	; 0x34
 c02ac9a:	9000      	str	r0, [sp, #0]
 c02ac9c:	463b      	mov	r3, r7
 c02ac9e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 c02aca2:	f7fe fdc1 	bl	c029828 <rsa_rsassa_pkcs1_v15_encode>
 c02aca6:	4604      	mov	r4, r0
 c02aca8:	b988      	cbnz	r0, c02acce <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x6e>
     * Apply RSA primitive to get what should be PKCS1 encoded hash.
     */

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, encoded )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 c02acaa:	f1b9 0f00 	cmp.w	r9, #0
 c02acae:	d121      	bne.n	c02acf4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
 c02acb0:	4632      	mov	r2, r6
 c02acb2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 c02acb4:	4640      	mov	r0, r8
 c02acb6:	f7ff f8b3 	bl	c029e20 <mbedtls_rsa_public>
 c02acba:	4604      	mov	r4, r0
    if( ret != 0 )
 c02acbc:	b938      	cbnz	r0, c02acce <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x6e>
    unsigned char diff = 0;
 c02acbe:	4602      	mov	r2, r0
    for( i = 0; i < n; i++ )
 c02acc0:	4603      	mov	r3, r0
 c02acc2:	429f      	cmp	r7, r3
 c02acc4:	d11e      	bne.n	c02ad04 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa4>
     */

    if( ( ret = mbedtls_safer_memcmp( encoded, encoded_expected,
                                      sig_len ) ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 c02acc6:	4b16      	ldr	r3, [pc, #88]	; (c02ad20 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc0>)
 c02acc8:	2a00      	cmp	r2, #0
 c02acca:	bf18      	it	ne
 c02accc:	461c      	movne	r4, r3

cleanup:

    if( encoded != NULL )
    {
        mbedtls_platform_zeroize( encoded, sig_len );
 c02acce:	4630      	mov	r0, r6
 c02acd0:	4639      	mov	r1, r7
 c02acd2:	f7fb fd29 	bl	c026728 <mbedtls_platform_zeroize>
        mbedtls_free( encoded );
 c02acd6:	4630      	mov	r0, r6
 c02acd8:	f7fb fd16 	bl	c026708 <mbedtls_free>
    }

    if( encoded_expected != NULL )
 c02acdc:	b135      	cbz	r5, c02acec <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8c>
    {
        mbedtls_platform_zeroize( encoded_expected, sig_len );
 c02acde:	4628      	mov	r0, r5
 c02ace0:	4639      	mov	r1, r7
 c02ace2:	f7fb fd21 	bl	c026728 <mbedtls_platform_zeroize>
        mbedtls_free( encoded_expected );
 c02ace6:	4628      	mov	r0, r5
 c02ace8:	f7fb fd0e 	bl	c026708 <mbedtls_free>
    }

    return( ret );
}
 c02acec:	4620      	mov	r0, r4
 c02acee:	b003      	add	sp, #12
 c02acf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 c02acf4:	9600      	str	r6, [sp, #0]
 c02acf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 c02acf8:	465a      	mov	r2, fp
 c02acfa:	4651      	mov	r1, sl
 c02acfc:	4640      	mov	r0, r8
 c02acfe:	f7ff f8cd 	bl	c029e9c <mbedtls_rsa_private>
 c02ad02:	e7da      	b.n	c02acba <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5a>
        diff |= A[i] ^ B[i];
 c02ad04:	5cf1      	ldrb	r1, [r6, r3]
 c02ad06:	5ce8      	ldrb	r0, [r5, r3]
    for( i = 0; i < n; i++ )
 c02ad08:	3301      	adds	r3, #1
        diff |= A[i] ^ B[i];
 c02ad0a:	4041      	eors	r1, r0
 c02ad0c:	430a      	orrs	r2, r1
 c02ad0e:	e7d8      	b.n	c02acc2 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x62>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c02ad10:	4c04      	ldr	r4, [pc, #16]	; (c02ad24 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc4>)
 c02ad12:	e7eb      	b.n	c02acec <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8c>
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
 c02ad14:	f06f 040f 	mvn.w	r4, #15
 c02ad18:	e7e8      	b.n	c02acec <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8c>
 c02ad1a:	f06f 040f 	mvn.w	r4, #15
 c02ad1e:	e7d6      	b.n	c02acce <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x6e>
 c02ad20:	ffffbc80 	.word	0xffffbc80
 c02ad24:	ffffbf80 	.word	0xffffbf80

0c02ad28 <mbedtls_rsa_pkcs1_verify>:
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 c02ad28:	b430      	push	{r4, r5}
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    switch( ctx->padding )
 c02ad2a:	f8d0 50a4 	ldr.w	r5, [r0, #164]	; 0xa4
{
 c02ad2e:	f89d 4008 	ldrb.w	r4, [sp, #8]
    switch( ctx->padding )
 c02ad32:	b125      	cbz	r5, c02ad3e <mbedtls_rsa_pkcs1_verify+0x16>
 c02ad34:	2d01      	cmp	r5, #1
 c02ad36:	d006      	beq.n	c02ad46 <mbedtls_rsa_pkcs1_verify+0x1e>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 c02ad38:	bc30      	pop	{r4, r5}
 c02ad3a:	4805      	ldr	r0, [pc, #20]	; (c02ad50 <mbedtls_rsa_pkcs1_verify+0x28>)
 c02ad3c:	4770      	bx	lr
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
 c02ad3e:	9402      	str	r4, [sp, #8]
}
 c02ad40:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
 c02ad42:	f7ff bf8d 	b.w	c02ac60 <mbedtls_rsa_rsassa_pkcs1_v15_verify>
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
 c02ad46:	9402      	str	r4, [sp, #8]
}
 c02ad48:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
 c02ad4a:	f7ff bf6f 	b.w	c02ac2c <mbedtls_rsa_rsassa_pss_verify>
 c02ad4e:	bf00      	nop
 c02ad50:	ffffbf00 	.word	0xffffbf00

0c02ad54 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
 c02ad54:	b510      	push	{r4, lr}
    if( ctx == NULL )
 c02ad56:	4604      	mov	r4, r0
 c02ad58:	b3a0      	cbz	r0, c02adc4 <mbedtls_rsa_free+0x70>
        return;

    mbedtls_mpi_free( &ctx->Vi );
 c02ad5a:	308c      	adds	r0, #140	; 0x8c
 c02ad5c:	f7f2 fe7e 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
 c02ad60:	f104 0098 	add.w	r0, r4, #152	; 0x98
 c02ad64:	f7f2 fe7a 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
 c02ad68:	f104 0068 	add.w	r0, r4, #104	; 0x68
 c02ad6c:	f7f2 fe76 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
 c02ad70:	f104 0020 	add.w	r0, r4, #32
 c02ad74:	f7f2 fe72 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
 c02ad78:	f104 0038 	add.w	r0, r4, #56	; 0x38
 c02ad7c:	f7f2 fe6e 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
 c02ad80:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 c02ad84:	f7f2 fe6a 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
 c02ad88:	f104 0014 	add.w	r0, r4, #20
 c02ad8c:	f7f2 fe66 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
 c02ad90:	f104 0008 	add.w	r0, r4, #8
 c02ad94:	f7f2 fe62 	bl	c01da5c <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
 c02ad98:	f104 0080 	add.w	r0, r4, #128	; 0x80
 c02ad9c:	f7f2 fe5e 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
 c02ada0:	f104 0074 	add.w	r0, r4, #116	; 0x74
 c02ada4:	f7f2 fe5a 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
 c02ada8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 c02adac:	f7f2 fe56 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
 c02adb0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 c02adb4:	f7f2 fe52 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
 c02adb8:	f104 0044 	add.w	r0, r4, #68	; 0x44
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
 c02adbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->DP );
 c02adc0:	f7f2 be4c 	b.w	c01da5c <mbedtls_mpi_free>
}
 c02adc4:	bd10      	pop	{r4, pc}
	...

0c02adc8 <mbedtls_rsa_gen_key>:
{
 c02adc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( nbits < 128 || exponent < 3 || nbits % 2 != 0 )
 c02adcc:	2b7f      	cmp	r3, #127	; 0x7f
{
 c02adce:	b091      	sub	sp, #68	; 0x44
 c02add0:	4604      	mov	r4, r0
 c02add2:	468a      	mov	sl, r1
 c02add4:	9203      	str	r2, [sp, #12]
 c02add6:	461d      	mov	r5, r3
 c02add8:	9e1a      	ldr	r6, [sp, #104]	; 0x68
    if( nbits < 128 || exponent < 3 || nbits % 2 != 0 )
 c02adda:	f240 80e5 	bls.w	c02afa8 <mbedtls_rsa_gen_key+0x1e0>
 c02adde:	2e02      	cmp	r6, #2
 c02ade0:	f340 80e2 	ble.w	c02afa8 <mbedtls_rsa_gen_key+0x1e0>
 c02ade4:	07eb      	lsls	r3, r5, #31
 c02ade6:	f100 80df 	bmi.w	c02afa8 <mbedtls_rsa_gen_key+0x1e0>
        prime_quality = MBEDTLS_MPI_GEN_PRIME_FLAG_LOW_ERR;
 c02adea:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    mbedtls_mpi_init( &H );
 c02adee:	a807      	add	r0, sp, #28
        prime_quality = MBEDTLS_MPI_GEN_PRIME_FLAG_LOW_ERR;
 c02adf0:	bf94      	ite	ls
 c02adf2:	f04f 0b00 	movls.w	fp, #0
 c02adf6:	f04f 0b02 	movhi.w	fp, #2
    mbedtls_mpi_init( &H );
 c02adfa:	f7f2 fe29 	bl	c01da50 <mbedtls_mpi_init>
    mbedtls_mpi_init( &G );
 c02adfe:	a80a      	add	r0, sp, #40	; 0x28
 c02ae00:	f7f2 fe26 	bl	c01da50 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &ctx->E, exponent ) );
 c02ae04:	f104 0814 	add.w	r8, r4, #20
    mbedtls_mpi_init( &L );
 c02ae08:	a80d      	add	r0, sp, #52	; 0x34
 c02ae0a:	f7f2 fe21 	bl	c01da50 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &ctx->E, exponent ) );
 c02ae0e:	4631      	mov	r1, r6
 c02ae10:	4640      	mov	r0, r8
 c02ae12:	f7f2 ff4b 	bl	c01dcac <mbedtls_mpi_lset>
 c02ae16:	4601      	mov	r1, r0
 c02ae18:	2800      	cmp	r0, #0
 c02ae1a:	f040 80af 	bne.w	c02af7c <mbedtls_rsa_gen_key+0x1b4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gen_prime( &ctx->P, nbits >> 1,
 c02ae1e:	ea4f 0955 	mov.w	r9, r5, lsr #1
 c02ae22:	2dc7      	cmp	r5, #199	; 0xc7
        if( mbedtls_mpi_bitlen( &H ) <= ( ( nbits >= 200 ) ? ( ( nbits >> 1 ) - 99 ) : 0 ) )
 c02ae24:	f1a9 0363 	sub.w	r3, r9, #99	; 0x63
 c02ae28:	bf98      	it	ls
 c02ae2a:	2300      	movls	r3, #0
        if( mbedtls_mpi_bitlen( &ctx->D ) <= ( ( nbits + 1 ) / 2 ) ) // (FIPS 186-4 §B.3.1 criterion 3(a))
 c02ae2c:	3501      	adds	r5, #1
 c02ae2e:	9305      	str	r3, [sp, #20]
 c02ae30:	086b      	lsrs	r3, r5, #1
 c02ae32:	9304      	str	r3, [sp, #16]
        MBEDTLS_MPI_CHK( mbedtls_mpi_gen_prime( &ctx->P, nbits >> 1,
 c02ae34:	f104 052c 	add.w	r5, r4, #44	; 0x2c
        MBEDTLS_MPI_CHK( mbedtls_mpi_gen_prime( &ctx->Q, nbits >> 1,
 c02ae38:	f104 0638 	add.w	r6, r4, #56	; 0x38
        MBEDTLS_MPI_CHK( mbedtls_mpi_gen_prime( &ctx->P, nbits >> 1,
 c02ae3c:	9b03      	ldr	r3, [sp, #12]
 c02ae3e:	4649      	mov	r1, r9
 c02ae40:	9300      	str	r3, [sp, #0]
 c02ae42:	465a      	mov	r2, fp
 c02ae44:	4653      	mov	r3, sl
 c02ae46:	4628      	mov	r0, r5
 c02ae48:	f7f4 fb7e 	bl	c01f548 <mbedtls_mpi_gen_prime>
 c02ae4c:	4601      	mov	r1, r0
 c02ae4e:	2800      	cmp	r0, #0
 c02ae50:	f040 8094 	bne.w	c02af7c <mbedtls_rsa_gen_key+0x1b4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gen_prime( &ctx->Q, nbits >> 1,
 c02ae54:	9b03      	ldr	r3, [sp, #12]
 c02ae56:	4649      	mov	r1, r9
 c02ae58:	9300      	str	r3, [sp, #0]
 c02ae5a:	465a      	mov	r2, fp
 c02ae5c:	4653      	mov	r3, sl
 c02ae5e:	4630      	mov	r0, r6
 c02ae60:	f7f4 fb72 	bl	c01f548 <mbedtls_mpi_gen_prime>
 c02ae64:	4601      	mov	r1, r0
 c02ae66:	2800      	cmp	r0, #0
 c02ae68:	f040 8088 	bne.w	c02af7c <mbedtls_rsa_gen_key+0x1b4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &H, &ctx->P, &ctx->Q ) );
 c02ae6c:	4629      	mov	r1, r5
 c02ae6e:	4632      	mov	r2, r6
 c02ae70:	a807      	add	r0, sp, #28
 c02ae72:	f7f3 fab6 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c02ae76:	4601      	mov	r1, r0
 c02ae78:	2800      	cmp	r0, #0
 c02ae7a:	d17f      	bne.n	c02af7c <mbedtls_rsa_gen_key+0x1b4>
        if( mbedtls_mpi_bitlen( &H ) <= ( ( nbits >= 200 ) ? ( ( nbits >> 1 ) - 99 ) : 0 ) )
 c02ae7c:	a807      	add	r0, sp, #28
 c02ae7e:	f7f2 ff85 	bl	c01dd8c <mbedtls_mpi_bitlen>
 c02ae82:	9b05      	ldr	r3, [sp, #20]
 c02ae84:	4298      	cmp	r0, r3
 c02ae86:	d9d9      	bls.n	c02ae3c <mbedtls_rsa_gen_key+0x74>
        if( H.s < 0 )
 c02ae88:	9b07      	ldr	r3, [sp, #28]
 c02ae8a:	2b00      	cmp	r3, #0
 c02ae8c:	da03      	bge.n	c02ae96 <mbedtls_rsa_gen_key+0xce>
            mbedtls_mpi_swap( &ctx->P, &ctx->Q );
 c02ae8e:	4631      	mov	r1, r6
 c02ae90:	4628      	mov	r0, r5
 c02ae92:	f7f2 fe80 	bl	c01db96 <mbedtls_mpi_swap>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &ctx->P, &ctx->P, 1 ) );
 c02ae96:	4629      	mov	r1, r5
 c02ae98:	2201      	movs	r2, #1
 c02ae9a:	4628      	mov	r0, r5
 c02ae9c:	f7f3 fada 	bl	c01e454 <mbedtls_mpi_sub_int>
 c02aea0:	4601      	mov	r1, r0
 c02aea2:	2800      	cmp	r0, #0
 c02aea4:	d16a      	bne.n	c02af7c <mbedtls_rsa_gen_key+0x1b4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &ctx->Q, &ctx->Q, 1 ) );
 c02aea6:	4631      	mov	r1, r6
 c02aea8:	2201      	movs	r2, #1
 c02aeaa:	4630      	mov	r0, r6
 c02aeac:	f7f3 fad2 	bl	c01e454 <mbedtls_mpi_sub_int>
 c02aeb0:	4601      	mov	r1, r0
 c02aeb2:	2800      	cmp	r0, #0
 c02aeb4:	d162      	bne.n	c02af7c <mbedtls_rsa_gen_key+0x1b4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &H, &ctx->P, &ctx->Q ) );
 c02aeb6:	4629      	mov	r1, r5
 c02aeb8:	4632      	mov	r2, r6
 c02aeba:	a807      	add	r0, sp, #28
 c02aebc:	f7f3 fae0 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c02aec0:	4601      	mov	r1, r0
 c02aec2:	2800      	cmp	r0, #0
 c02aec4:	d15a      	bne.n	c02af7c <mbedtls_rsa_gen_key+0x1b4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, &ctx->E, &H  ) );
 c02aec6:	4641      	mov	r1, r8
 c02aec8:	aa07      	add	r2, sp, #28
 c02aeca:	a80a      	add	r0, sp, #40	; 0x28
 c02aecc:	f7f4 f841 	bl	c01ef52 <mbedtls_mpi_gcd>
 c02aed0:	4601      	mov	r1, r0
 c02aed2:	2800      	cmp	r0, #0
 c02aed4:	d152      	bne.n	c02af7c <mbedtls_rsa_gen_key+0x1b4>
        if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 c02aed6:	2101      	movs	r1, #1
 c02aed8:	a80a      	add	r0, sp, #40	; 0x28
 c02aeda:	f7f3 f9ab 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c02aede:	2800      	cmp	r0, #0
 c02aee0:	d1ac      	bne.n	c02ae3c <mbedtls_rsa_gen_key+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, &ctx->P, &ctx->Q ) );
 c02aee2:	4629      	mov	r1, r5
 c02aee4:	4632      	mov	r2, r6
 c02aee6:	a80a      	add	r0, sp, #40	; 0x28
 c02aee8:	f7f4 f833 	bl	c01ef52 <mbedtls_mpi_gcd>
 c02aeec:	4601      	mov	r1, r0
 c02aeee:	2800      	cmp	r0, #0
 c02aef0:	d144      	bne.n	c02af7c <mbedtls_rsa_gen_key+0x1b4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &L, NULL, &H, &G ) );
 c02aef2:	ab0a      	add	r3, sp, #40	; 0x28
 c02aef4:	aa07      	add	r2, sp, #28
 c02aef6:	a80d      	add	r0, sp, #52	; 0x34
 c02aef8:	f7f3 fbc8 	bl	c01e68c <mbedtls_mpi_div_mpi>
 c02aefc:	4601      	mov	r1, r0
 c02aefe:	2800      	cmp	r0, #0
 c02af00:	d13c      	bne.n	c02af7c <mbedtls_rsa_gen_key+0x1b4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->D, &ctx->E, &L ) );
 c02af02:	f104 0720 	add.w	r7, r4, #32
 c02af06:	4641      	mov	r1, r8
 c02af08:	aa0d      	add	r2, sp, #52	; 0x34
 c02af0a:	4638      	mov	r0, r7
 c02af0c:	f7f4 f99b 	bl	c01f246 <mbedtls_mpi_inv_mod>
 c02af10:	4601      	mov	r1, r0
 c02af12:	bb98      	cbnz	r0, c02af7c <mbedtls_rsa_gen_key+0x1b4>
        if( mbedtls_mpi_bitlen( &ctx->D ) <= ( ( nbits + 1 ) / 2 ) ) // (FIPS 186-4 §B.3.1 criterion 3(a))
 c02af14:	4638      	mov	r0, r7
 c02af16:	f7f2 ff39 	bl	c01dd8c <mbedtls_mpi_bitlen>
 c02af1a:	9b04      	ldr	r3, [sp, #16]
 c02af1c:	4298      	cmp	r0, r3
 c02af1e:	d98d      	bls.n	c02ae3c <mbedtls_rsa_gen_key+0x74>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &ctx->P,  &ctx->P, 1 ) );
 c02af20:	4629      	mov	r1, r5
 c02af22:	2201      	movs	r2, #1
 c02af24:	4628      	mov	r0, r5
 c02af26:	f7f3 fa7f 	bl	c01e428 <mbedtls_mpi_add_int>
 c02af2a:	4601      	mov	r1, r0
 c02af2c:	bb30      	cbnz	r0, c02af7c <mbedtls_rsa_gen_key+0x1b4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &ctx->Q,  &ctx->Q, 1 ) );
 c02af2e:	4631      	mov	r1, r6
 c02af30:	2201      	movs	r2, #1
 c02af32:	4630      	mov	r0, r6
 c02af34:	f7f3 fa78 	bl	c01e428 <mbedtls_mpi_add_int>
 c02af38:	4601      	mov	r1, r0
 c02af3a:	b9f8      	cbnz	r0, c02af7c <mbedtls_rsa_gen_key+0x1b4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P, &ctx->Q ) );
 c02af3c:	f104 0808 	add.w	r8, r4, #8
 c02af40:	4629      	mov	r1, r5
 c02af42:	4632      	mov	r2, r6
 c02af44:	4640      	mov	r0, r8
 c02af46:	f7f3 fa9b 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c02af4a:	4601      	mov	r1, r0
 c02af4c:	b9b0      	cbnz	r0, c02af7c <mbedtls_rsa_gen_key+0x1b4>
    ctx->len = mbedtls_mpi_size( &ctx->N );
 c02af4e:	4640      	mov	r0, r8
 c02af50:	f7f2 ff3c 	bl	c01ddcc <mbedtls_mpi_size>
    MBEDTLS_MPI_CHK( mbedtls_rsa_deduce_crt( &ctx->P, &ctx->Q, &ctx->D,
 c02af54:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 c02af58:	9301      	str	r3, [sp, #4]
 c02af5a:	f104 0350 	add.w	r3, r4, #80	; 0x50
    ctx->len = mbedtls_mpi_size( &ctx->N );
 c02af5e:	6060      	str	r0, [r4, #4]
    MBEDTLS_MPI_CHK( mbedtls_rsa_deduce_crt( &ctx->P, &ctx->Q, &ctx->D,
 c02af60:	9300      	str	r3, [sp, #0]
 c02af62:	4631      	mov	r1, r6
 c02af64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c02af68:	463a      	mov	r2, r7
 c02af6a:	4628      	mov	r0, r5
 c02af6c:	f000 fad8 	bl	c02b520 <mbedtls_rsa_deduce_crt>
 c02af70:	4601      	mov	r1, r0
 c02af72:	b918      	cbnz	r0, c02af7c <mbedtls_rsa_gen_key+0x1b4>
    MBEDTLS_MPI_CHK( mbedtls_rsa_check_privkey( ctx ) );
 c02af74:	4620      	mov	r0, r4
 c02af76:	f7fe ff01 	bl	c029d7c <mbedtls_rsa_check_privkey>
 c02af7a:	4601      	mov	r1, r0
    mbedtls_mpi_free( &H );
 c02af7c:	a807      	add	r0, sp, #28
 c02af7e:	9103      	str	r1, [sp, #12]
 c02af80:	f7f2 fd6c 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &G );
 c02af84:	a80a      	add	r0, sp, #40	; 0x28
 c02af86:	f7f2 fd69 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 c02af8a:	a80d      	add	r0, sp, #52	; 0x34
 c02af8c:	f7f2 fd66 	bl	c01da5c <mbedtls_mpi_free>
    if( ret != 0 )
 c02af90:	9903      	ldr	r1, [sp, #12]
 c02af92:	b129      	cbz	r1, c02afa0 <mbedtls_rsa_gen_key+0x1d8>
        mbedtls_rsa_free( ctx );
 c02af94:	4620      	mov	r0, r4
 c02af96:	f7ff fedd 	bl	c02ad54 <mbedtls_rsa_free>
        return( MBEDTLS_ERR_RSA_KEY_GEN_FAILED + ret );
 c02af9a:	9903      	ldr	r1, [sp, #12]
 c02af9c:	f5a1 4183 	sub.w	r1, r1, #16768	; 0x4180
}
 c02afa0:	4608      	mov	r0, r1
 c02afa2:	b011      	add	sp, #68	; 0x44
 c02afa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 c02afa8:	4900      	ldr	r1, [pc, #0]	; (c02afac <mbedtls_rsa_gen_key+0x1e4>)
 c02afaa:	e7f9      	b.n	c02afa0 <mbedtls_rsa_gen_key+0x1d8>
 c02afac:	ffffbf80 	.word	0xffffbf80

0c02afb0 <mbedtls_rsa_deduce_primes>:
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
 c02afb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02afb4:	b099      	sub	sp, #100	; 0x64
 c02afb6:	4614      	mov	r4, r2
    uint16_t order;    /* Order of 2 in DE - 1 */

    mbedtls_mpi T;  /* Holds largest odd divisor of DE - 1     */
    mbedtls_mpi K;  /* Temporary holding the current candidate */

    const unsigned char primes[] = { 2,
 c02afb8:	aa0a      	add	r2, sp, #40	; 0x28
{
 c02afba:	4605      	mov	r5, r0
 c02afbc:	4689      	mov	r9, r1
 c02afbe:	4690      	mov	r8, r2
 c02afc0:	461f      	mov	r7, r3
    const unsigned char primes[] = { 2,
 c02afc2:	4b78      	ldr	r3, [pc, #480]	; (c02b1a4 <mbedtls_rsa_deduce_primes+0x1f4>)
{
 c02afc4:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
    const unsigned char primes[] = { 2,
 c02afc8:	f103 0c30 	add.w	ip, r3, #48	; 0x30
 c02afcc:	4616      	mov	r6, r2
 c02afce:	6818      	ldr	r0, [r3, #0]
 c02afd0:	6859      	ldr	r1, [r3, #4]
 c02afd2:	3308      	adds	r3, #8
 c02afd4:	c603      	stmia	r6!, {r0, r1}
 c02afd6:	4563      	cmp	r3, ip
 c02afd8:	4632      	mov	r2, r6
 c02afda:	d1f7      	bne.n	c02afcc <mbedtls_rsa_deduce_primes+0x1c>
 c02afdc:	6818      	ldr	r0, [r3, #0]
 c02afde:	889b      	ldrh	r3, [r3, #4]
 c02afe0:	6030      	str	r0, [r6, #0]
 c02afe2:	80b3      	strh	r3, [r6, #4]
         229,  233,  239,  241,  251
    };

    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
 c02afe4:	b92f      	cbnz	r7, c02aff2 <mbedtls_rsa_deduce_primes+0x42>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 c02afe6:	f06f 0403 	mvn.w	r4, #3
cleanup:

    mbedtls_mpi_free( &K );
    mbedtls_mpi_free( &T );
    return( ret );
}
 c02afea:	4620      	mov	r0, r4
 c02afec:	b019      	add	sp, #100	; 0x64
 c02afee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
 c02aff2:	f1ba 0f00 	cmp.w	sl, #0
 c02aff6:	d0f6      	beq.n	c02afe6 <mbedtls_rsa_deduce_primes+0x36>
 c02aff8:	68bb      	ldr	r3, [r7, #8]
 c02affa:	2b00      	cmp	r3, #0
 c02affc:	d1f3      	bne.n	c02afe6 <mbedtls_rsa_deduce_primes+0x36>
 c02affe:	f8da 1008 	ldr.w	r1, [sl, #8]
 c02b002:	2900      	cmp	r1, #0
 c02b004:	d1ef      	bne.n	c02afe6 <mbedtls_rsa_deduce_primes+0x36>
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 c02b006:	4628      	mov	r0, r5
 c02b008:	f7f3 f914 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c02b00c:	2800      	cmp	r0, #0
 c02b00e:	ddea      	ble.n	c02afe6 <mbedtls_rsa_deduce_primes+0x36>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 c02b010:	2101      	movs	r1, #1
 c02b012:	4620      	mov	r0, r4
 c02b014:	f7f3 f90e 	bl	c01e234 <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 c02b018:	2800      	cmp	r0, #0
 c02b01a:	dde4      	ble.n	c02afe6 <mbedtls_rsa_deduce_primes+0x36>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 c02b01c:	4629      	mov	r1, r5
 c02b01e:	4620      	mov	r0, r4
 c02b020:	f7f3 f8c8 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 c02b024:	2800      	cmp	r0, #0
 c02b026:	dade      	bge.n	c02afe6 <mbedtls_rsa_deduce_primes+0x36>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 c02b028:	2101      	movs	r1, #1
 c02b02a:	4648      	mov	r0, r9
 c02b02c:	f7f3 f902 	bl	c01e234 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 c02b030:	2800      	cmp	r0, #0
 c02b032:	ddd8      	ble.n	c02afe6 <mbedtls_rsa_deduce_primes+0x36>
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 c02b034:	4629      	mov	r1, r5
 c02b036:	4648      	mov	r0, r9
 c02b038:	f7f3 f8bc 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 c02b03c:	2800      	cmp	r0, #0
 c02b03e:	dad2      	bge.n	c02afe6 <mbedtls_rsa_deduce_primes+0x36>
    mbedtls_mpi_init( &K );
 c02b040:	a807      	add	r0, sp, #28
    mbedtls_mpi_init( &T );
 c02b042:	ae04      	add	r6, sp, #16
    mbedtls_mpi_init( &K );
 c02b044:	f7f2 fd04 	bl	c01da50 <mbedtls_mpi_init>
    mbedtls_mpi_init( &T );
 c02b048:	4630      	mov	r0, r6
 c02b04a:	f7f2 fd01 	bl	c01da50 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );
 c02b04e:	4621      	mov	r1, r4
 c02b050:	464a      	mov	r2, r9
 c02b052:	4630      	mov	r0, r6
 c02b054:	f7f3 fa14 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c02b058:	4604      	mov	r4, r0
 c02b05a:	b980      	cbnz	r0, c02b07e <mbedtls_rsa_deduce_primes+0xce>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );
 c02b05c:	2201      	movs	r2, #1
 c02b05e:	4631      	mov	r1, r6
 c02b060:	4630      	mov	r0, r6
 c02b062:	f7f3 f9f7 	bl	c01e454 <mbedtls_mpi_sub_int>
 c02b066:	4604      	mov	r4, r0
 c02b068:	b948      	cbnz	r0, c02b07e <mbedtls_rsa_deduce_primes+0xce>
    if( ( order = (uint16_t) mbedtls_mpi_lsb( &T ) ) == 0 )
 c02b06a:	4630      	mov	r0, r6
 c02b06c:	f7f2 fe73 	bl	c01dd56 <mbedtls_mpi_lsb>
 c02b070:	fa1f fb80 	uxth.w	fp, r0
 c02b074:	f1bb 0f00 	cmp.w	fp, #0
 c02b078:	d108      	bne.n	c02b08c <mbedtls_rsa_deduce_primes+0xdc>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 c02b07a:	f06f 0403 	mvn.w	r4, #3
    mbedtls_mpi_free( &K );
 c02b07e:	a807      	add	r0, sp, #28
 c02b080:	f7f2 fcec 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
 c02b084:	a804      	add	r0, sp, #16
 c02b086:	f7f2 fce9 	bl	c01da5c <mbedtls_mpi_free>
    return( ret );
 c02b08a:	e7ae      	b.n	c02afea <mbedtls_rsa_deduce_primes+0x3a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );
 c02b08c:	b281      	uxth	r1, r0
 c02b08e:	4630      	mov	r0, r6
 c02b090:	f7f2 ffc0 	bl	c01e014 <mbedtls_mpi_shift_r>
 c02b094:	4604      	mov	r4, r0
 c02b096:	2800      	cmp	r0, #0
 c02b098:	d1f1      	bne.n	c02b07e <mbedtls_rsa_deduce_primes+0xce>
 c02b09a:	4681      	mov	r9, r0
    if( N->p[0] % 8 == 1 )
 c02b09c:	68ab      	ldr	r3, [r5, #8]
 c02b09e:	681b      	ldr	r3, [r3, #0]
 c02b0a0:	f003 0307 	and.w	r3, r3, #7
 c02b0a4:	1e5a      	subs	r2, r3, #1
 c02b0a6:	4253      	negs	r3, r2
 c02b0a8:	4153      	adcs	r3, r2
    for( ; attempt < num_primes; ++attempt )
 c02b0aa:	b29a      	uxth	r2, r3
        mbedtls_mpi_lset( &K, primes[attempt] );
 c02b0ac:	4443      	add	r3, r8
    for( ; attempt < num_primes; ++attempt )
 c02b0ae:	9202      	str	r2, [sp, #8]
        mbedtls_mpi_lset( &K, primes[attempt] );
 c02b0b0:	9303      	str	r3, [sp, #12]
 c02b0b2:	9b03      	ldr	r3, [sp, #12]
 c02b0b4:	a807      	add	r0, sp, #28
 c02b0b6:	f813 1009 	ldrb.w	r1, [r3, r9]
 c02b0ba:	f7f2 fdf7 	bl	c01dcac <mbedtls_mpi_lset>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 c02b0be:	462a      	mov	r2, r5
 c02b0c0:	a907      	add	r1, sp, #28
 c02b0c2:	4638      	mov	r0, r7
 c02b0c4:	f7f3 ff45 	bl	c01ef52 <mbedtls_mpi_gcd>
 c02b0c8:	4604      	mov	r4, r0
 c02b0ca:	2800      	cmp	r0, #0
 c02b0cc:	d1d7      	bne.n	c02b07e <mbedtls_rsa_deduce_primes+0xce>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
 c02b0ce:	2101      	movs	r1, #1
 c02b0d0:	4638      	mov	r0, r7
 c02b0d2:	f7f3 f8af 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c02b0d6:	b138      	cbz	r0, c02b0e8 <mbedtls_rsa_deduce_primes+0x138>
    for( ; attempt < num_primes; ++attempt )
 c02b0d8:	9b02      	ldr	r3, [sp, #8]
 c02b0da:	f109 0901 	add.w	r9, r9, #1
 c02b0de:	444b      	add	r3, r9
 c02b0e0:	b29b      	uxth	r3, r3
 c02b0e2:	2b35      	cmp	r3, #53	; 0x35
 c02b0e4:	d9e5      	bls.n	c02b0b2 <mbedtls_rsa_deduce_primes+0x102>
 c02b0e6:	e7c8      	b.n	c02b07a <mbedtls_rsa_deduce_primes+0xca>
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
 c02b0e8:	a907      	add	r1, sp, #28
 c02b0ea:	f8cd a000 	str.w	sl, [sp]
 c02b0ee:	462b      	mov	r3, r5
 c02b0f0:	4632      	mov	r2, r6
 c02b0f2:	4608      	mov	r0, r1
 c02b0f4:	f7f3 fcf6 	bl	c01eae4 <mbedtls_mpi_exp_mod>
 c02b0f8:	4604      	mov	r4, r0
 c02b0fa:	2800      	cmp	r0, #0
 c02b0fc:	d1bf      	bne.n	c02b07e <mbedtls_rsa_deduce_primes+0xce>
        for( iter = 1; iter <= order; ++iter )
 c02b0fe:	f04f 0801 	mov.w	r8, #1
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
 c02b102:	2101      	movs	r1, #1
 c02b104:	a807      	add	r0, sp, #28
 c02b106:	f7f3 f895 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c02b10a:	2800      	cmp	r0, #0
 c02b10c:	d042      	beq.n	c02b194 <mbedtls_rsa_deduce_primes+0x1e4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
 c02b10e:	a907      	add	r1, sp, #28
 c02b110:	2201      	movs	r2, #1
 c02b112:	4608      	mov	r0, r1
 c02b114:	f7f3 f988 	bl	c01e428 <mbedtls_mpi_add_int>
 c02b118:	4604      	mov	r4, r0
 c02b11a:	2800      	cmp	r0, #0
 c02b11c:	d1af      	bne.n	c02b07e <mbedtls_rsa_deduce_primes+0xce>
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 c02b11e:	462a      	mov	r2, r5
 c02b120:	a907      	add	r1, sp, #28
 c02b122:	4638      	mov	r0, r7
 c02b124:	f7f3 ff15 	bl	c01ef52 <mbedtls_mpi_gcd>
 c02b128:	4604      	mov	r4, r0
 c02b12a:	2800      	cmp	r0, #0
 c02b12c:	d1a7      	bne.n	c02b07e <mbedtls_rsa_deduce_primes+0xce>
            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 c02b12e:	2101      	movs	r1, #1
 c02b130:	4638      	mov	r0, r7
 c02b132:	f7f3 f87f 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c02b136:	2801      	cmp	r0, #1
 c02b138:	d10d      	bne.n	c02b156 <mbedtls_rsa_deduce_primes+0x1a6>
                mbedtls_mpi_cmp_mpi( P, N ) == -1 )
 c02b13a:	4629      	mov	r1, r5
 c02b13c:	4638      	mov	r0, r7
 c02b13e:	f7f3 f839 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 c02b142:	3001      	adds	r0, #1
 c02b144:	d107      	bne.n	c02b156 <mbedtls_rsa_deduce_primes+0x1a6>
                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
 c02b146:	4621      	mov	r1, r4
 c02b148:	463b      	mov	r3, r7
 c02b14a:	462a      	mov	r2, r5
 c02b14c:	4650      	mov	r0, sl
 c02b14e:	f7f3 fa9d 	bl	c01e68c <mbedtls_mpi_div_mpi>
 c02b152:	4604      	mov	r4, r0
cleanup:
 c02b154:	e793      	b.n	c02b07e <mbedtls_rsa_deduce_primes+0xce>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 c02b156:	a907      	add	r1, sp, #28
 c02b158:	2201      	movs	r2, #1
 c02b15a:	4608      	mov	r0, r1
 c02b15c:	f7f3 f97a 	bl	c01e454 <mbedtls_mpi_sub_int>
 c02b160:	4604      	mov	r4, r0
 c02b162:	2800      	cmp	r0, #0
 c02b164:	d18b      	bne.n	c02b07e <mbedtls_rsa_deduce_primes+0xce>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );
 c02b166:	aa07      	add	r2, sp, #28
 c02b168:	4611      	mov	r1, r2
 c02b16a:	4610      	mov	r0, r2
 c02b16c:	f7f3 f988 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c02b170:	4604      	mov	r4, r0
 c02b172:	2800      	cmp	r0, #0
 c02b174:	d183      	bne.n	c02b07e <mbedtls_rsa_deduce_primes+0xce>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
 c02b176:	a907      	add	r1, sp, #28
 c02b178:	462a      	mov	r2, r5
 c02b17a:	4608      	mov	r0, r1
 c02b17c:	f7f3 fc3c 	bl	c01e9f8 <mbedtls_mpi_mod_mpi>
 c02b180:	4604      	mov	r4, r0
 c02b182:	2800      	cmp	r0, #0
 c02b184:	f47f af7b 	bne.w	c02b07e <mbedtls_rsa_deduce_primes+0xce>
        for( iter = 1; iter <= order; ++iter )
 c02b188:	f108 0801 	add.w	r8, r8, #1
 c02b18c:	fa1f f888 	uxth.w	r8, r8
 c02b190:	45c3      	cmp	fp, r8
 c02b192:	d2b6      	bcs.n	c02b102 <mbedtls_rsa_deduce_primes+0x152>
        if( mbedtls_mpi_cmp_int( &K, 1 ) != 0 )
 c02b194:	2101      	movs	r1, #1
 c02b196:	a807      	add	r0, sp, #28
 c02b198:	f7f3 f84c 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c02b19c:	2800      	cmp	r0, #0
 c02b19e:	d09b      	beq.n	c02b0d8 <mbedtls_rsa_deduce_primes+0x128>
 c02b1a0:	e76b      	b.n	c02b07a <mbedtls_rsa_deduce_primes+0xca>
 c02b1a2:	bf00      	nop
 c02b1a4:	0c034f4b 	.word	0x0c034f4b

0c02b1a8 <mbedtls_rsa_deduce_private_exponent>:
 */
int mbedtls_rsa_deduce_private_exponent( mbedtls_mpi const *P,
                                         mbedtls_mpi const *Q,
                                         mbedtls_mpi const *E,
                                         mbedtls_mpi *D )
{
 c02b1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c02b1ac:	4604      	mov	r4, r0
 c02b1ae:	b086      	sub	sp, #24
 c02b1b0:	460f      	mov	r7, r1
 c02b1b2:	4616      	mov	r6, r2
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
 c02b1b4:	461d      	mov	r5, r3
 c02b1b6:	b92b      	cbnz	r3, c02b1c4 <mbedtls_rsa_deduce_private_exponent+0x1c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 c02b1b8:	f06f 0403 	mvn.w	r4, #3

    mbedtls_mpi_free( &K );
    mbedtls_mpi_free( &L );

    return( ret );
}
 c02b1bc:	4620      	mov	r0, r4
 c02b1be:	b006      	add	sp, #24
 c02b1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
 c02b1c4:	2100      	movs	r1, #0
 c02b1c6:	4618      	mov	r0, r3
 c02b1c8:	f7f3 f834 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c02b1cc:	4680      	mov	r8, r0
 c02b1ce:	2800      	cmp	r0, #0
 c02b1d0:	d1f2      	bne.n	c02b1b8 <mbedtls_rsa_deduce_private_exponent+0x10>
    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 c02b1d2:	2101      	movs	r1, #1
 c02b1d4:	4620      	mov	r0, r4
 c02b1d6:	f7f3 f82d 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c02b1da:	2800      	cmp	r0, #0
 c02b1dc:	ddec      	ble.n	c02b1b8 <mbedtls_rsa_deduce_private_exponent+0x10>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 c02b1de:	2101      	movs	r1, #1
 c02b1e0:	4638      	mov	r0, r7
 c02b1e2:	f7f3 f827 	bl	c01e234 <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 c02b1e6:	2800      	cmp	r0, #0
 c02b1e8:	dde6      	ble.n	c02b1b8 <mbedtls_rsa_deduce_private_exponent+0x10>
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
 c02b1ea:	4641      	mov	r1, r8
 c02b1ec:	4630      	mov	r0, r6
 c02b1ee:	f7f3 f821 	bl	c01e234 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 c02b1f2:	2800      	cmp	r0, #0
 c02b1f4:	d0e0      	beq.n	c02b1b8 <mbedtls_rsa_deduce_private_exponent+0x10>
    mbedtls_mpi_init( &K );
 c02b1f6:	4668      	mov	r0, sp
 c02b1f8:	f7f2 fc2a 	bl	c01da50 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 c02b1fc:	a803      	add	r0, sp, #12
 c02b1fe:	f7f2 fc27 	bl	c01da50 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 c02b202:	4621      	mov	r1, r4
 c02b204:	2201      	movs	r2, #1
 c02b206:	4668      	mov	r0, sp
 c02b208:	f7f3 f924 	bl	c01e454 <mbedtls_mpi_sub_int>
 c02b20c:	4604      	mov	r4, r0
 c02b20e:	bb10      	cbnz	r0, c02b256 <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 c02b210:	2201      	movs	r2, #1
 c02b212:	4639      	mov	r1, r7
 c02b214:	a803      	add	r0, sp, #12
 c02b216:	f7f3 f91d 	bl	c01e454 <mbedtls_mpi_sub_int>
 c02b21a:	4604      	mov	r4, r0
 c02b21c:	b9d8      	cbnz	r0, c02b256 <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );
 c02b21e:	aa03      	add	r2, sp, #12
 c02b220:	4669      	mov	r1, sp
 c02b222:	4628      	mov	r0, r5
 c02b224:	f7f3 fe95 	bl	c01ef52 <mbedtls_mpi_gcd>
 c02b228:	4604      	mov	r4, r0
 c02b22a:	b9a0      	cbnz	r0, c02b256 <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );
 c02b22c:	aa03      	add	r2, sp, #12
 c02b22e:	4669      	mov	r1, sp
 c02b230:	4668      	mov	r0, sp
 c02b232:	f7f3 f925 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c02b236:	4604      	mov	r4, r0
 c02b238:	b968      	cbnz	r0, c02b256 <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );
 c02b23a:	4601      	mov	r1, r0
 c02b23c:	462b      	mov	r3, r5
 c02b23e:	466a      	mov	r2, sp
 c02b240:	4668      	mov	r0, sp
 c02b242:	f7f3 fa23 	bl	c01e68c <mbedtls_mpi_div_mpi>
 c02b246:	4604      	mov	r4, r0
 c02b248:	b928      	cbnz	r0, c02b256 <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );
 c02b24a:	466a      	mov	r2, sp
 c02b24c:	4631      	mov	r1, r6
 c02b24e:	4628      	mov	r0, r5
 c02b250:	f7f3 fff9 	bl	c01f246 <mbedtls_mpi_inv_mod>
 c02b254:	4604      	mov	r4, r0
    mbedtls_mpi_free( &K );
 c02b256:	4668      	mov	r0, sp
 c02b258:	f7f2 fc00 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 c02b25c:	a803      	add	r0, sp, #12
 c02b25e:	f7f2 fbfd 	bl	c01da5c <mbedtls_mpi_free>
    return( ret );
 c02b262:	e7ab      	b.n	c02b1bc <mbedtls_rsa_deduce_private_exponent+0x14>

0c02b264 <mbedtls_rsa_validate_crt>:
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 c02b264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c02b268:	4699      	mov	r9, r3
 c02b26a:	b087      	sub	sp, #28
 c02b26c:	4604      	mov	r4, r0
 c02b26e:	e9dd 760e 	ldrd	r7, r6, [sp, #56]	; 0x38
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
 c02b272:	4668      	mov	r0, sp
{
 c02b274:	460d      	mov	r5, r1
 c02b276:	4690      	mov	r8, r2
    mbedtls_mpi_init( &K );
 c02b278:	f7f2 fbea 	bl	c01da50 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 c02b27c:	a803      	add	r0, sp, #12
 c02b27e:	f7f2 fbe7 	bl	c01da50 <mbedtls_mpi_init>

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
 c02b282:	f1b9 0f00 	cmp.w	r9, #0
 c02b286:	d104      	bne.n	c02b292 <mbedtls_rsa_validate_crt+0x2e>
            goto cleanup;
        }
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
 c02b288:	bb67      	cbnz	r7, c02b2e4 <mbedtls_rsa_validate_crt+0x80>
            goto cleanup;
        }
    }

    /* Check that QP * Q - 1 == 0 mod P */
    if( QP != NULL )
 c02b28a:	2e00      	cmp	r6, #0
 c02b28c:	d145      	bne.n	c02b31a <mbedtls_rsa_validate_crt+0xb6>
{
 c02b28e:	2400      	movs	r4, #0
 c02b290:	e001      	b.n	c02b296 <mbedtls_rsa_validate_crt+0x32>
        if( P == NULL )
 c02b292:	b954      	cbnz	r4, c02b2aa <mbedtls_rsa_validate_crt+0x46>
{
 c02b294:	4c34      	ldr	r4, [pc, #208]	; (c02b368 <mbedtls_rsa_validate_crt+0x104>)
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    mbedtls_mpi_free( &K );
 c02b296:	4668      	mov	r0, sp
 c02b298:	f7f2 fbe0 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 c02b29c:	a803      	add	r0, sp, #12
 c02b29e:	f7f2 fbdd 	bl	c01da5c <mbedtls_mpi_free>

    return( ret );
}
 c02b2a2:	4620      	mov	r0, r4
 c02b2a4:	b007      	add	sp, #28
 c02b2a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 c02b2aa:	2201      	movs	r2, #1
 c02b2ac:	4621      	mov	r1, r4
 c02b2ae:	4668      	mov	r0, sp
 c02b2b0:	f7f3 f8d0 	bl	c01e454 <mbedtls_mpi_sub_int>
 c02b2b4:	2800      	cmp	r0, #0
 c02b2b6:	d14d      	bne.n	c02b354 <mbedtls_rsa_validate_crt+0xf0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );
 c02b2b8:	4642      	mov	r2, r8
 c02b2ba:	4649      	mov	r1, r9
 c02b2bc:	a803      	add	r0, sp, #12
 c02b2be:	f7f3 f890 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c02b2c2:	2800      	cmp	r0, #0
 c02b2c4:	d146      	bne.n	c02b354 <mbedtls_rsa_validate_crt+0xf0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 c02b2c6:	a903      	add	r1, sp, #12
 c02b2c8:	466a      	mov	r2, sp
 c02b2ca:	4608      	mov	r0, r1
 c02b2cc:	f7f3 fb94 	bl	c01e9f8 <mbedtls_mpi_mod_mpi>
 c02b2d0:	2800      	cmp	r0, #0
 c02b2d2:	d13f      	bne.n	c02b354 <mbedtls_rsa_validate_crt+0xf0>
        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 c02b2d4:	4601      	mov	r1, r0
 c02b2d6:	a803      	add	r0, sp, #12
 c02b2d8:	f7f2 ffac 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c02b2dc:	2800      	cmp	r0, #0
 c02b2de:	d0d3      	beq.n	c02b288 <mbedtls_rsa_validate_crt+0x24>
{
 c02b2e0:	4c22      	ldr	r4, [pc, #136]	; (c02b36c <mbedtls_rsa_validate_crt+0x108>)
 c02b2e2:	e7d8      	b.n	c02b296 <mbedtls_rsa_validate_crt+0x32>
        if( Q == NULL )
 c02b2e4:	2d00      	cmp	r5, #0
 c02b2e6:	d0d5      	beq.n	c02b294 <mbedtls_rsa_validate_crt+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );
 c02b2e8:	2201      	movs	r2, #1
 c02b2ea:	4629      	mov	r1, r5
 c02b2ec:	4668      	mov	r0, sp
 c02b2ee:	f7f3 f8b1 	bl	c01e454 <mbedtls_mpi_sub_int>
 c02b2f2:	bb78      	cbnz	r0, c02b354 <mbedtls_rsa_validate_crt+0xf0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );
 c02b2f4:	4642      	mov	r2, r8
 c02b2f6:	4639      	mov	r1, r7
 c02b2f8:	a803      	add	r0, sp, #12
 c02b2fa:	f7f3 f872 	bl	c01e3e2 <mbedtls_mpi_sub_mpi>
 c02b2fe:	bb48      	cbnz	r0, c02b354 <mbedtls_rsa_validate_crt+0xf0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 c02b300:	a903      	add	r1, sp, #12
 c02b302:	466a      	mov	r2, sp
 c02b304:	4608      	mov	r0, r1
 c02b306:	f7f3 fb77 	bl	c01e9f8 <mbedtls_mpi_mod_mpi>
 c02b30a:	bb18      	cbnz	r0, c02b354 <mbedtls_rsa_validate_crt+0xf0>
        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 c02b30c:	4601      	mov	r1, r0
 c02b30e:	a803      	add	r0, sp, #12
 c02b310:	f7f2 ff90 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c02b314:	2800      	cmp	r0, #0
 c02b316:	d1e3      	bne.n	c02b2e0 <mbedtls_rsa_validate_crt+0x7c>
 c02b318:	e7b7      	b.n	c02b28a <mbedtls_rsa_validate_crt+0x26>
        if( P == NULL || Q == NULL )
 c02b31a:	2c00      	cmp	r4, #0
 c02b31c:	d0ba      	beq.n	c02b294 <mbedtls_rsa_validate_crt+0x30>
 c02b31e:	2d00      	cmp	r5, #0
 c02b320:	d0b8      	beq.n	c02b294 <mbedtls_rsa_validate_crt+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
 c02b322:	462a      	mov	r2, r5
 c02b324:	4631      	mov	r1, r6
 c02b326:	4668      	mov	r0, sp
 c02b328:	f7f3 f8aa 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c02b32c:	b990      	cbnz	r0, c02b354 <mbedtls_rsa_validate_crt+0xf0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 c02b32e:	2201      	movs	r2, #1
 c02b330:	4669      	mov	r1, sp
 c02b332:	4668      	mov	r0, sp
 c02b334:	f7f3 f88e 	bl	c01e454 <mbedtls_mpi_sub_int>
 c02b338:	b960      	cbnz	r0, c02b354 <mbedtls_rsa_validate_crt+0xf0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
 c02b33a:	4622      	mov	r2, r4
 c02b33c:	4669      	mov	r1, sp
 c02b33e:	4668      	mov	r0, sp
 c02b340:	f7f3 fb5a 	bl	c01e9f8 <mbedtls_mpi_mod_mpi>
 c02b344:	b930      	cbnz	r0, c02b354 <mbedtls_rsa_validate_crt+0xf0>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 c02b346:	4601      	mov	r1, r0
 c02b348:	4668      	mov	r0, sp
 c02b34a:	f7f2 ff73 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c02b34e:	2800      	cmp	r0, #0
 c02b350:	d1c6      	bne.n	c02b2e0 <mbedtls_rsa_validate_crt+0x7c>
 c02b352:	e79c      	b.n	c02b28e <mbedtls_rsa_validate_crt+0x2a>
    if( ret != 0 &&
 c02b354:	f510 4f84 	cmn.w	r0, #16896	; 0x4200
 c02b358:	d0c2      	beq.n	c02b2e0 <mbedtls_rsa_validate_crt+0x7c>
        ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED &&
 c02b35a:	f510 4f81 	cmn.w	r0, #16512	; 0x4080
 c02b35e:	d099      	beq.n	c02b294 <mbedtls_rsa_validate_crt+0x30>
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 c02b360:	f5a0 4484 	sub.w	r4, r0, #16896	; 0x4200
 c02b364:	e797      	b.n	c02b296 <mbedtls_rsa_validate_crt+0x32>
 c02b366:	bf00      	nop
 c02b368:	ffffbf80 	.word	0xffffbf80
 c02b36c:	ffffbe00 	.word	0xffffbe00

0c02b370 <mbedtls_rsa_validate_params>:
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 c02b370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c02b374:	b087      	sub	sp, #28
 c02b376:	4605      	mov	r5, r0
 c02b378:	e9dd 940e 	ldrd	r9, r4, [sp, #56]	; 0x38
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
 c02b37c:	4668      	mov	r0, sp
{
 c02b37e:	460e      	mov	r6, r1
 c02b380:	4617      	mov	r7, r2
 c02b382:	4698      	mov	r8, r3
    mbedtls_mpi_init( &K );
 c02b384:	f7f2 fb64 	bl	c01da50 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 c02b388:	a803      	add	r0, sp, #12
 c02b38a:	f7f2 fb61 	bl	c01da50 <mbedtls_mpi_init>
    /*
     * When generating keys, the strongest security we support aims for an error
     * rate of at most 2^-100 and we are aiming for the same certainty here as
     * well.
     */
    if( f_rng != NULL && P != NULL &&
 c02b38e:	2c00      	cmp	r4, #0
 c02b390:	f000 808f 	beq.w	c02b4b2 <mbedtls_rsa_validate_params+0x142>
 c02b394:	b146      	cbz	r6, c02b3a8 <mbedtls_rsa_validate_params+0x38>
 c02b396:	9b10      	ldr	r3, [sp, #64]	; 0x40
 c02b398:	4622      	mov	r2, r4
 c02b39a:	2132      	movs	r1, #50	; 0x32
 c02b39c:	4630      	mov	r0, r6
 c02b39e:	f7f4 f8a5 	bl	c01f4ec <mbedtls_mpi_is_prime_ext>
 c02b3a2:	2800      	cmp	r0, #0
 c02b3a4:	f040 80b7 	bne.w	c02b516 <mbedtls_rsa_validate_params+0x1a6>
    {
        ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
        goto cleanup;
    }

    if( f_rng != NULL && Q != NULL &&
 c02b3a8:	2f00      	cmp	r7, #0
 c02b3aa:	f000 8085 	beq.w	c02b4b8 <mbedtls_rsa_validate_params+0x148>
 c02b3ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 c02b3b0:	4622      	mov	r2, r4
 c02b3b2:	2132      	movs	r1, #50	; 0x32
 c02b3b4:	4638      	mov	r0, r7
 c02b3b6:	f7f4 f899 	bl	c01f4ec <mbedtls_mpi_is_prime_ext>
 c02b3ba:	2800      	cmp	r0, #0
 c02b3bc:	f040 80ab 	bne.w	c02b516 <mbedtls_rsa_validate_params+0x1a6>

    /*
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
 c02b3c0:	2e00      	cmp	r6, #0
 c02b3c2:	d079      	beq.n	c02b4b8 <mbedtls_rsa_validate_params+0x148>
 c02b3c4:	b1d5      	cbz	r5, c02b3fc <mbedtls_rsa_validate_params+0x8c>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
 c02b3c6:	463a      	mov	r2, r7
 c02b3c8:	4631      	mov	r1, r6
 c02b3ca:	4668      	mov	r0, sp
 c02b3cc:	f7f3 f858 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c02b3d0:	4604      	mov	r4, r0
 c02b3d2:	2800      	cmp	r0, #0
 c02b3d4:	d173      	bne.n	c02b4be <mbedtls_rsa_validate_params+0x14e>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 c02b3d6:	2101      	movs	r1, #1
 c02b3d8:	4628      	mov	r0, r5
 c02b3da:	f7f2 ff2b 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c02b3de:	2800      	cmp	r0, #0
 c02b3e0:	f340 8099 	ble.w	c02b516 <mbedtls_rsa_validate_params+0x1a6>
            mbedtls_mpi_cmp_mpi( &K, N ) != 0 )
 c02b3e4:	4629      	mov	r1, r5
 c02b3e6:	4668      	mov	r0, sp
 c02b3e8:	f7f2 fee4 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 c02b3ec:	2800      	cmp	r0, #0
 c02b3ee:	f040 8092 	bne.w	c02b516 <mbedtls_rsa_validate_params+0x1a6>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
 c02b3f2:	f1b8 0f00 	cmp.w	r8, #0
 c02b3f6:	d172      	bne.n	c02b4de <mbedtls_rsa_validate_params+0x16e>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 c02b3f8:	2e00      	cmp	r6, #0
 c02b3fa:	d05f      	beq.n	c02b4bc <mbedtls_rsa_validate_params+0x14c>
 c02b3fc:	2f00      	cmp	r7, #0
 c02b3fe:	d05d      	beq.n	c02b4bc <mbedtls_rsa_validate_params+0x14c>
 c02b400:	f1b8 0f00 	cmp.w	r8, #0
 c02b404:	d05a      	beq.n	c02b4bc <mbedtls_rsa_validate_params+0x14c>
 c02b406:	f1b9 0f00 	cmp.w	r9, #0
 c02b40a:	d057      	beq.n	c02b4bc <mbedtls_rsa_validate_params+0x14c>
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 c02b40c:	2101      	movs	r1, #1
 c02b40e:	4630      	mov	r0, r6
 c02b410:	f7f2 ff10 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c02b414:	2800      	cmp	r0, #0
 c02b416:	dd7e      	ble.n	c02b516 <mbedtls_rsa_validate_params+0x1a6>
            mbedtls_mpi_cmp_int( Q, 1 ) <= 0 )
 c02b418:	2101      	movs	r1, #1
 c02b41a:	4638      	mov	r0, r7
 c02b41c:	f7f2 ff0a 	bl	c01e234 <mbedtls_mpi_cmp_int>
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 c02b420:	2800      	cmp	r0, #0
 c02b422:	dd78      	ble.n	c02b516 <mbedtls_rsa_validate_params+0x1a6>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod P-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 c02b424:	464a      	mov	r2, r9
 c02b426:	4641      	mov	r1, r8
 c02b428:	4668      	mov	r0, sp
 c02b42a:	f7f3 f829 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c02b42e:	4604      	mov	r4, r0
 c02b430:	2800      	cmp	r0, #0
 c02b432:	d144      	bne.n	c02b4be <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 c02b434:	2201      	movs	r2, #1
 c02b436:	4669      	mov	r1, sp
 c02b438:	4668      	mov	r0, sp
 c02b43a:	f7f3 f80b 	bl	c01e454 <mbedtls_mpi_sub_int>
 c02b43e:	4604      	mov	r4, r0
 c02b440:	2800      	cmp	r0, #0
 c02b442:	d13c      	bne.n	c02b4be <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );
 c02b444:	2201      	movs	r2, #1
 c02b446:	4631      	mov	r1, r6
 c02b448:	a803      	add	r0, sp, #12
 c02b44a:	f7f3 f803 	bl	c01e454 <mbedtls_mpi_sub_int>
 c02b44e:	4604      	mov	r4, r0
 c02b450:	bba8      	cbnz	r0, c02b4be <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 c02b452:	aa03      	add	r2, sp, #12
 c02b454:	4669      	mov	r1, sp
 c02b456:	4668      	mov	r0, sp
 c02b458:	f7f3 face 	bl	c01e9f8 <mbedtls_mpi_mod_mpi>
 c02b45c:	4604      	mov	r4, r0
 c02b45e:	bb70      	cbnz	r0, c02b4be <mbedtls_rsa_validate_params+0x14e>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 c02b460:	4601      	mov	r1, r0
 c02b462:	4668      	mov	r0, sp
 c02b464:	f7f2 fee6 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c02b468:	2800      	cmp	r0, #0
 c02b46a:	d154      	bne.n	c02b516 <mbedtls_rsa_validate_params+0x1a6>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod Q-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 c02b46c:	464a      	mov	r2, r9
 c02b46e:	4641      	mov	r1, r8
 c02b470:	4668      	mov	r0, sp
 c02b472:	f7f3 f805 	bl	c01e480 <mbedtls_mpi_mul_mpi>
 c02b476:	4604      	mov	r4, r0
 c02b478:	bb08      	cbnz	r0, c02b4be <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 c02b47a:	2201      	movs	r2, #1
 c02b47c:	4669      	mov	r1, sp
 c02b47e:	4668      	mov	r0, sp
 c02b480:	f7f2 ffe8 	bl	c01e454 <mbedtls_mpi_sub_int>
 c02b484:	4604      	mov	r4, r0
 c02b486:	b9d0      	cbnz	r0, c02b4be <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 c02b488:	2201      	movs	r2, #1
 c02b48a:	4639      	mov	r1, r7
 c02b48c:	a803      	add	r0, sp, #12
 c02b48e:	f7f2 ffe1 	bl	c01e454 <mbedtls_mpi_sub_int>
 c02b492:	4604      	mov	r4, r0
 c02b494:	b998      	cbnz	r0, c02b4be <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 c02b496:	aa03      	add	r2, sp, #12
 c02b498:	4669      	mov	r1, sp
 c02b49a:	4668      	mov	r0, sp
 c02b49c:	f7f3 faac 	bl	c01e9f8 <mbedtls_mpi_mod_mpi>
 c02b4a0:	4604      	mov	r4, r0
 c02b4a2:	b960      	cbnz	r0, c02b4be <mbedtls_rsa_validate_params+0x14e>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 c02b4a4:	4601      	mov	r1, r0
 c02b4a6:	4668      	mov	r0, sp
 c02b4a8:	f7f2 fec4 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c02b4ac:	4604      	mov	r4, r0
 c02b4ae:	b130      	cbz	r0, c02b4be <mbedtls_rsa_validate_params+0x14e>
 c02b4b0:	e031      	b.n	c02b516 <mbedtls_rsa_validate_params+0x1a6>
    if( P != NULL && Q != NULL && N != NULL )
 c02b4b2:	b10e      	cbz	r6, c02b4b8 <mbedtls_rsa_validate_params+0x148>
 c02b4b4:	2f00      	cmp	r7, #0
 c02b4b6:	d185      	bne.n	c02b3c4 <mbedtls_rsa_validate_params+0x54>
    if( N != NULL && D != NULL && E != NULL )
 c02b4b8:	2d00      	cmp	r5, #0
 c02b4ba:	d19a      	bne.n	c02b3f2 <mbedtls_rsa_validate_params+0x82>
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 c02b4bc:	2400      	movs	r4, #0
        }
    }

cleanup:

    mbedtls_mpi_free( &K );
 c02b4be:	4668      	mov	r0, sp
 c02b4c0:	f7f2 facc 	bl	c01da5c <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 c02b4c4:	a803      	add	r0, sp, #12
 c02b4c6:	f7f2 fac9 	bl	c01da5c <mbedtls_mpi_free>

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 && ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
 c02b4ca:	b124      	cbz	r4, c02b4d6 <mbedtls_rsa_validate_params+0x166>
 c02b4cc:	f514 4f84 	cmn.w	r4, #16896	; 0x4200
 c02b4d0:	d001      	beq.n	c02b4d6 <mbedtls_rsa_validate_params+0x166>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 c02b4d2:	f5a4 4484 	sub.w	r4, r4, #16896	; 0x4200
    }

    return( ret );
}
 c02b4d6:	4620      	mov	r0, r4
 c02b4d8:	b007      	add	sp, #28
 c02b4da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( N != NULL && D != NULL && E != NULL )
 c02b4de:	f1b9 0f00 	cmp.w	r9, #0
 c02b4e2:	d089      	beq.n	c02b3f8 <mbedtls_rsa_validate_params+0x88>
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 c02b4e4:	2101      	movs	r1, #1
 c02b4e6:	4640      	mov	r0, r8
 c02b4e8:	f7f2 fea4 	bl	c01e234 <mbedtls_mpi_cmp_int>
 c02b4ec:	2800      	cmp	r0, #0
 c02b4ee:	dd12      	ble.n	c02b516 <mbedtls_rsa_validate_params+0x1a6>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 c02b4f0:	2101      	movs	r1, #1
 c02b4f2:	4648      	mov	r0, r9
 c02b4f4:	f7f2 fe9e 	bl	c01e234 <mbedtls_mpi_cmp_int>
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 c02b4f8:	2800      	cmp	r0, #0
 c02b4fa:	dd0c      	ble.n	c02b516 <mbedtls_rsa_validate_params+0x1a6>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 c02b4fc:	4629      	mov	r1, r5
 c02b4fe:	4640      	mov	r0, r8
 c02b500:	f7f2 fe58 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 c02b504:	2800      	cmp	r0, #0
 c02b506:	da06      	bge.n	c02b516 <mbedtls_rsa_validate_params+0x1a6>
             mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 c02b508:	4629      	mov	r1, r5
 c02b50a:	4648      	mov	r0, r9
 c02b50c:	f7f2 fe52 	bl	c01e1b4 <mbedtls_mpi_cmp_mpi>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 c02b510:	2800      	cmp	r0, #0
 c02b512:	f6ff af71 	blt.w	c02b3f8 <mbedtls_rsa_validate_params+0x88>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 c02b516:	4c01      	ldr	r4, [pc, #4]	; (c02b51c <mbedtls_rsa_validate_params+0x1ac>)
            goto cleanup;
 c02b518:	e7d1      	b.n	c02b4be <mbedtls_rsa_validate_params+0x14e>
 c02b51a:	bf00      	nop
 c02b51c:	ffffbe00 	.word	0xffffbe00

0c02b520 <mbedtls_rsa_deduce_crt>:

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
 c02b520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 c02b524:	469a      	mov	sl, r3
 c02b526:	e9dd 850c 	ldrd	r8, r5, [sp, #48]	; 0x30
 c02b52a:	4607      	mov	r7, r0
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
 c02b52c:	a801      	add	r0, sp, #4
{
 c02b52e:	460e      	mov	r6, r1
 c02b530:	4691      	mov	r9, r2
    mbedtls_mpi_init( &K );
 c02b532:	f7f2 fa8d 	bl	c01da50 <mbedtls_mpi_init>

    /* DP = D mod P-1 */
    if( DP != NULL )
 c02b536:	f1ba 0f00 	cmp.w	sl, #0
 c02b53a:	d105      	bne.n	c02b548 <mbedtls_rsa_deduce_crt+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
 c02b53c:	f1b8 0f00 	cmp.w	r8, #0
 c02b540:	d118      	bne.n	c02b574 <mbedtls_rsa_deduce_crt+0x54>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
    }

    /* QP = Q^{-1} mod P */
    if( QP != NULL )
 c02b542:	bb45      	cbnz	r5, c02b596 <mbedtls_rsa_deduce_crt+0x76>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
    }

cleanup:
 c02b544:	462c      	mov	r4, r5
 c02b546:	e00e      	b.n	c02b566 <mbedtls_rsa_deduce_crt+0x46>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
 c02b548:	2201      	movs	r2, #1
 c02b54a:	4639      	mov	r1, r7
 c02b54c:	a801      	add	r0, sp, #4
 c02b54e:	f7f2 ff81 	bl	c01e454 <mbedtls_mpi_sub_int>
 c02b552:	4604      	mov	r4, r0
 c02b554:	b938      	cbnz	r0, c02b566 <mbedtls_rsa_deduce_crt+0x46>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
 c02b556:	aa01      	add	r2, sp, #4
 c02b558:	4649      	mov	r1, r9
 c02b55a:	4650      	mov	r0, sl
 c02b55c:	f7f3 fa4c 	bl	c01e9f8 <mbedtls_mpi_mod_mpi>
 c02b560:	4604      	mov	r4, r0
 c02b562:	2800      	cmp	r0, #0
 c02b564:	d0ea      	beq.n	c02b53c <mbedtls_rsa_deduce_crt+0x1c>
    mbedtls_mpi_free( &K );
 c02b566:	a801      	add	r0, sp, #4
 c02b568:	f7f2 fa78 	bl	c01da5c <mbedtls_mpi_free>

    return( ret );
}
 c02b56c:	4620      	mov	r0, r4
 c02b56e:	b004      	add	sp, #16
 c02b570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
 c02b574:	2201      	movs	r2, #1
 c02b576:	4631      	mov	r1, r6
 c02b578:	a801      	add	r0, sp, #4
 c02b57a:	f7f2 ff6b 	bl	c01e454 <mbedtls_mpi_sub_int>
 c02b57e:	4604      	mov	r4, r0
 c02b580:	2800      	cmp	r0, #0
 c02b582:	d1f0      	bne.n	c02b566 <mbedtls_rsa_deduce_crt+0x46>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
 c02b584:	aa01      	add	r2, sp, #4
 c02b586:	4649      	mov	r1, r9
 c02b588:	4640      	mov	r0, r8
 c02b58a:	f7f3 fa35 	bl	c01e9f8 <mbedtls_mpi_mod_mpi>
 c02b58e:	4604      	mov	r4, r0
 c02b590:	2800      	cmp	r0, #0
 c02b592:	d0d6      	beq.n	c02b542 <mbedtls_rsa_deduce_crt+0x22>
 c02b594:	e7e7      	b.n	c02b566 <mbedtls_rsa_deduce_crt+0x46>
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
 c02b596:	463a      	mov	r2, r7
 c02b598:	4631      	mov	r1, r6
 c02b59a:	4628      	mov	r0, r5
 c02b59c:	f7f3 fe53 	bl	c01f246 <mbedtls_mpi_inv_mod>
 c02b5a0:	4604      	mov	r4, r0
cleanup:
 c02b5a2:	e7e0      	b.n	c02b566 <mbedtls_rsa_deduce_crt+0x46>

0c02b5a4 <mbedtls_sha256_init>:

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 c02b5a4:	226c      	movs	r2, #108	; 0x6c
 c02b5a6:	2100      	movs	r1, #0
 c02b5a8:	f7e9 ba0d 	b.w	c0149c6 <memset>

0c02b5ac <mbedtls_sha256_free>:
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
 c02b5ac:	b110      	cbz	r0, c02b5b4 <mbedtls_sha256_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
 c02b5ae:	216c      	movs	r1, #108	; 0x6c
 c02b5b0:	f7fb b8ba 	b.w	c026728 <mbedtls_platform_zeroize>
}
 c02b5b4:	4770      	bx	lr

0c02b5b6 <mbedtls_sha256_clone>:

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
 c02b5b6:	b508      	push	{r3, lr}
    SHA256_VALIDATE( dst != NULL );
    SHA256_VALIDATE( src != NULL );

    *dst = *src;
 c02b5b8:	226c      	movs	r2, #108	; 0x6c
 c02b5ba:	f7e9 f9e0 	bl	c01497e <memcpy>
}
 c02b5be:	bd08      	pop	{r3, pc}

0c02b5c0 <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
 c02b5c0:	2300      	movs	r3, #0
    ctx->total[1] = 0;
 c02b5c2:	e9c0 3300 	strd	r3, r3, [r0]

    if( is224 == 0 )
 c02b5c6:	b9c1      	cbnz	r1, c02b5fa <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
 c02b5c8:	4a19      	ldr	r2, [pc, #100]	; (c02b630 <mbedtls_sha256_starts_ret+0x70>)
 c02b5ca:	4b1a      	ldr	r3, [pc, #104]	; (c02b634 <mbedtls_sha256_starts_ret+0x74>)
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
 c02b5cc:	f8df c08c 	ldr.w	ip, [pc, #140]	; c02b65c <mbedtls_sha256_starts_ret+0x9c>
        ctx->state[1] = 0xBB67AE85;
 c02b5d0:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[3] = 0xA54FF53A;
 c02b5d4:	4b18      	ldr	r3, [pc, #96]	; (c02b638 <mbedtls_sha256_starts_ret+0x78>)
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
 c02b5d6:	4a19      	ldr	r2, [pc, #100]	; (c02b63c <mbedtls_sha256_starts_ret+0x7c>)
        ctx->state[3] = 0xA54FF53A;
 c02b5d8:	e9c0 c304 	strd	ip, r3, [r0, #16]
        ctx->state[5] = 0x9B05688C;
 c02b5dc:	4b18      	ldr	r3, [pc, #96]	; (c02b640 <mbedtls_sha256_starts_ret+0x80>)
 c02b5de:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[6] = 0x1F83D9AB;
 c02b5e2:	4b18      	ldr	r3, [pc, #96]	; (c02b644 <mbedtls_sha256_starts_ret+0x84>)
 c02b5e4:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
 c02b5e6:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 c02b5ea:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 c02b5ee:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
        ctx->state[2] = 0x3070DD17;
        ctx->state[3] = 0xF70E5939;
        ctx->state[4] = 0xFFC00B31;
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
 c02b5f2:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
 c02b5f4:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
 c02b5f6:	2000      	movs	r0, #0
 c02b5f8:	4770      	bx	lr
        ctx->state[1] = 0x367CD507;
 c02b5fa:	4b13      	ldr	r3, [pc, #76]	; (c02b648 <mbedtls_sha256_starts_ret+0x88>)
 c02b5fc:	4a13      	ldr	r2, [pc, #76]	; (c02b64c <mbedtls_sha256_starts_ret+0x8c>)
        ctx->state[4] = 0xFFC00B31;
 c02b5fe:	f8df c060 	ldr.w	ip, [pc, #96]	; c02b660 <mbedtls_sha256_starts_ret+0xa0>
        ctx->state[1] = 0x367CD507;
 c02b602:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[2] = 0x3070DD17;
 c02b606:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
 c02b60a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 c02b60e:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 c02b612:	6103      	str	r3, [r0, #16]
        ctx->state[4] = 0xFFC00B31;
 c02b614:	4b0e      	ldr	r3, [pc, #56]	; (c02b650 <mbedtls_sha256_starts_ret+0x90>)
 c02b616:	e9c0 c305 	strd	ip, r3, [r0, #20]
        ctx->state[5] = 0x68581511;
 c02b61a:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
 c02b61e:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
 c02b622:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 c02b626:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
 c02b628:	4b0a      	ldr	r3, [pc, #40]	; (c02b654 <mbedtls_sha256_starts_ret+0x94>)
 c02b62a:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
 c02b62c:	4b0a      	ldr	r3, [pc, #40]	; (c02b658 <mbedtls_sha256_starts_ret+0x98>)
 c02b62e:	e7e0      	b.n	c02b5f2 <mbedtls_sha256_starts_ret+0x32>
 c02b630:	6a09e667 	.word	0x6a09e667
 c02b634:	bb67ae85 	.word	0xbb67ae85
 c02b638:	a54ff53a 	.word	0xa54ff53a
 c02b63c:	510e527f 	.word	0x510e527f
 c02b640:	9b05688c 	.word	0x9b05688c
 c02b644:	1f83d9ab 	.word	0x1f83d9ab
 c02b648:	367cd507 	.word	0x367cd507
 c02b64c:	c1059ed8 	.word	0xc1059ed8
 c02b650:	ffc00b31 	.word	0xffc00b31
 c02b654:	64f98fa7 	.word	0x64f98fa7
 c02b658:	befa4fa4 	.word	0xbefa4fa4
 c02b65c:	3c6ef372 	.word	0x3c6ef372
 c02b660:	f70e5939 	.word	0xf70e5939

0c02b664 <mbedtls_internal_sha256_process>:
        (d) += temp1; (h) = temp1 + temp2;              \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 c02b664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02b668:	f100 0308 	add.w	r3, r0, #8
 c02b66c:	b0cf      	sub	sp, #316	; 0x13c
 c02b66e:	9304      	str	r3, [sp, #16]
 c02b670:	461a      	mov	r2, r3
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
 c02b672:	2300      	movs	r3, #0
        A[i] = ctx->state[i];
 c02b674:	f852 0b04 	ldr.w	r0, [r2], #4
 c02b678:	ac06      	add	r4, sp, #24
 c02b67a:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
    for( i = 0; i < 8; i++ )
 c02b67e:	3301      	adds	r3, #1
 c02b680:	2b08      	cmp	r3, #8
 c02b682:	d1f7      	bne.n	c02b674 <mbedtls_internal_sha256_process+0x10>

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 c02b684:	2200      	movs	r2, #0
        GET_UINT32_BE( W[i], data, 4 * i );
 c02b686:	784b      	ldrb	r3, [r1, #1]
 c02b688:	7808      	ldrb	r0, [r1, #0]
 c02b68a:	041b      	lsls	r3, r3, #16
 c02b68c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 c02b690:	78c8      	ldrb	r0, [r1, #3]
 c02b692:	3104      	adds	r1, #4
 c02b694:	4303      	orrs	r3, r0
 c02b696:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 c02b69a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 c02b69e:	a80e      	add	r0, sp, #56	; 0x38
 c02b6a0:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    for( i = 0; i < 16; i++ )
 c02b6a4:	3201      	adds	r2, #1
 c02b6a6:	2a10      	cmp	r2, #16
 c02b6a8:	d1ed      	bne.n	c02b686 <mbedtls_internal_sha256_process+0x22>
 c02b6aa:	4da2      	ldr	r5, [pc, #648]	; (c02b934 <mbedtls_internal_sha256_process+0x2d0>)
 c02b6ac:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 c02b6b0:	46da      	mov	sl, fp
 c02b6b2:	46a8      	mov	r8, r5
 c02b6b4:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 c02b6b8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 c02b6ba:	980c      	ldr	r0, [sp, #48]	; 0x30
 c02b6bc:	9b08      	ldr	r3, [sp, #32]
 c02b6be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 c02b6c0:	9a07      	ldr	r2, [sp, #28]
 c02b6c2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 c02b6c6:	9f06      	ldr	r7, [sp, #24]
 c02b6c8:	9500      	str	r5, [sp, #0]

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 c02b6ca:	f8d8 5000 	ldr.w	r5, [r8]
 c02b6ce:	f8da 6000 	ldr.w	r6, [sl]
 c02b6d2:	ea4f 2cf9 	mov.w	ip, r9, ror #11
 c02b6d6:	ea8c 1cb9 	eor.w	ip, ip, r9, ror #6
 c02b6da:	4435      	add	r5, r6
 c02b6dc:	ea8c 6c79 	eor.w	ip, ip, r9, ror #25
 c02b6e0:	44ac      	add	ip, r5
 c02b6e2:	ea80 0501 	eor.w	r5, r0, r1
 c02b6e6:	ea05 0509 	and.w	r5, r5, r9
 c02b6ea:	4045      	eors	r5, r0
 c02b6ec:	44ac      	add	ip, r5
 c02b6ee:	ea47 0602 	orr.w	r6, r7, r2
 c02b6f2:	ea4f 3577 	mov.w	r5, r7, ror #13
 c02b6f6:	44e6      	add	lr, ip
 c02b6f8:	ea85 05b7 	eor.w	r5, r5, r7, ror #2
 c02b6fc:	ea07 0c02 	and.w	ip, r7, r2
 c02b700:	401e      	ands	r6, r3
 c02b702:	ea85 55b7 	eor.w	r5, r5, r7, ror #22
 c02b706:	ea46 060c 	orr.w	r6, r6, ip
 c02b70a:	442e      	add	r6, r5
 c02b70c:	4474      	add	r4, lr
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 c02b70e:	f8d8 5004 	ldr.w	r5, [r8, #4]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 c02b712:	44b6      	add	lr, r6
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 c02b714:	f8da 6004 	ldr.w	r6, [sl, #4]
 c02b718:	f108 0820 	add.w	r8, r8, #32
 c02b71c:	4435      	add	r5, r6
 c02b71e:	4405      	add	r5, r0
 c02b720:	ea89 0001 	eor.w	r0, r9, r1
 c02b724:	4020      	ands	r0, r4
 c02b726:	ea80 0c01 	eor.w	ip, r0, r1
 c02b72a:	eb05 000c 	add.w	r0, r5, ip
 c02b72e:	ea4f 25f4 	mov.w	r5, r4, ror #11
 c02b732:	ea85 15b4 	eor.w	r5, r5, r4, ror #6
 c02b736:	ea85 6574 	eor.w	r5, r5, r4, ror #25
 c02b73a:	4405      	add	r5, r0
 c02b73c:	ea4e 0607 	orr.w	r6, lr, r7
 c02b740:	ea4f 307e 	mov.w	r0, lr, ror #13
 c02b744:	ea0e 0c07 	and.w	ip, lr, r7
 c02b748:	ea80 00be 	eor.w	r0, r0, lr, ror #2
 c02b74c:	4016      	ands	r6, r2
 c02b74e:	ea46 060c 	orr.w	r6, r6, ip
 c02b752:	ea80 50be 	eor.w	r0, r0, lr, ror #22
 c02b756:	4430      	add	r0, r6
 c02b758:	4428      	add	r0, r5
 c02b75a:	442b      	add	r3, r5
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 c02b75c:	f8da 6008 	ldr.w	r6, [sl, #8]
 c02b760:	f858 5c18 	ldr.w	r5, [r8, #-24]
 c02b764:	f10a 0a20 	add.w	sl, sl, #32
 c02b768:	4435      	add	r5, r6
 c02b76a:	440d      	add	r5, r1
 c02b76c:	ea84 0109 	eor.w	r1, r4, r9
 c02b770:	4019      	ands	r1, r3
 c02b772:	ea81 0c09 	eor.w	ip, r1, r9
 c02b776:	eb05 010c 	add.w	r1, r5, ip
 c02b77a:	ea4f 25f3 	mov.w	r5, r3, ror #11
 c02b77e:	ea85 15b3 	eor.w	r5, r5, r3, ror #6
 c02b782:	ea85 6573 	eor.w	r5, r5, r3, ror #25
 c02b786:	440d      	add	r5, r1
 c02b788:	ea4e 0600 	orr.w	r6, lr, r0
 c02b78c:	ea4f 3170 	mov.w	r1, r0, ror #13
 c02b790:	ea0e 0c00 	and.w	ip, lr, r0
 c02b794:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
 c02b798:	403e      	ands	r6, r7
 c02b79a:	ea46 060c 	orr.w	r6, r6, ip
 c02b79e:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
 c02b7a2:	4431      	add	r1, r6
 c02b7a4:	4429      	add	r1, r5
 c02b7a6:	442a      	add	r2, r5
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 c02b7a8:	f85a 6c14 	ldr.w	r6, [sl, #-20]
 c02b7ac:	f858 5c14 	ldr.w	r5, [r8, #-20]
 c02b7b0:	4435      	add	r5, r6
 c02b7b2:	44a9      	add	r9, r5
 c02b7b4:	ea84 0503 	eor.w	r5, r4, r3
 c02b7b8:	4015      	ands	r5, r2
 c02b7ba:	ea85 0c04 	eor.w	ip, r5, r4
 c02b7be:	eb09 050c 	add.w	r5, r9, ip
 c02b7c2:	ea4f 29f2 	mov.w	r9, r2, ror #11
 c02b7c6:	ea89 19b2 	eor.w	r9, r9, r2, ror #6
 c02b7ca:	ea89 6972 	eor.w	r9, r9, r2, ror #25
 c02b7ce:	44a9      	add	r9, r5
 c02b7d0:	ea40 0601 	orr.w	r6, r0, r1
 c02b7d4:	ea4f 3571 	mov.w	r5, r1, ror #13
 c02b7d8:	eb07 0c09 	add.w	ip, r7, r9
 c02b7dc:	ea85 05b1 	eor.w	r5, r5, r1, ror #2
 c02b7e0:	ea00 0701 	and.w	r7, r0, r1
 c02b7e4:	ea06 060e 	and.w	r6, r6, lr
 c02b7e8:	433e      	orrs	r6, r7
 c02b7ea:	ea85 55b1 	eor.w	r5, r5, r1, ror #22
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 c02b7ee:	f85a 7c10 	ldr.w	r7, [sl, #-16]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 c02b7f2:	4435      	add	r5, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 c02b7f4:	f858 6c10 	ldr.w	r6, [r8, #-16]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 c02b7f8:	444d      	add	r5, r9
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 c02b7fa:	443e      	add	r6, r7
 c02b7fc:	ea83 0902 	eor.w	r9, r3, r2
 c02b800:	4434      	add	r4, r6
 c02b802:	ea09 090c 	and.w	r9, r9, ip
 c02b806:	ea4f 26fc 	mov.w	r6, ip, ror #11
 c02b80a:	ea89 0903 	eor.w	r9, r9, r3
 c02b80e:	ea86 16bc 	eor.w	r6, r6, ip, ror #6
 c02b812:	444c      	add	r4, r9
 c02b814:	ea86 667c 	eor.w	r6, r6, ip, ror #25
 c02b818:	4426      	add	r6, r4
 c02b81a:	ea41 0705 	orr.w	r7, r1, r5
 c02b81e:	ea4f 3475 	mov.w	r4, r5, ror #13
 c02b822:	ea01 0905 	and.w	r9, r1, r5
 c02b826:	ea84 04b5 	eor.w	r4, r4, r5, ror #2
 c02b82a:	4007      	ands	r7, r0
 c02b82c:	ea47 0709 	orr.w	r7, r7, r9
 c02b830:	ea84 54b5 	eor.w	r4, r4, r5, ror #22
 c02b834:	443c      	add	r4, r7
 c02b836:	4434      	add	r4, r6
 c02b838:	44b6      	add	lr, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 c02b83a:	f858 7c0c 	ldr.w	r7, [r8, #-12]
 c02b83e:	f85a 6c0c 	ldr.w	r6, [sl, #-12]
 c02b842:	ea05 0904 	and.w	r9, r5, r4
 c02b846:	443e      	add	r6, r7
 c02b848:	4433      	add	r3, r6
 c02b84a:	ea82 060c 	eor.w	r6, r2, ip
 c02b84e:	ea06 060e 	and.w	r6, r6, lr
 c02b852:	4056      	eors	r6, r2
 c02b854:	4433      	add	r3, r6
 c02b856:	ea4f 26fe 	mov.w	r6, lr, ror #11
 c02b85a:	ea86 16be 	eor.w	r6, r6, lr, ror #6
 c02b85e:	ea86 667e 	eor.w	r6, r6, lr, ror #25
 c02b862:	441e      	add	r6, r3
 c02b864:	ea45 0704 	orr.w	r7, r5, r4
 c02b868:	ea4f 3374 	mov.w	r3, r4, ror #13
 c02b86c:	400f      	ands	r7, r1
 c02b86e:	ea83 03b4 	eor.w	r3, r3, r4, ror #2
 c02b872:	ea47 0709 	orr.w	r7, r7, r9
 c02b876:	ea83 53b4 	eor.w	r3, r3, r4, ror #22
 c02b87a:	443b      	add	r3, r7
 c02b87c:	4433      	add	r3, r6
 c02b87e:	4430      	add	r0, r6
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 c02b880:	f858 7c08 	ldr.w	r7, [r8, #-8]
 c02b884:	f85a 6c08 	ldr.w	r6, [sl, #-8]
 c02b888:	ea8c 090e 	eor.w	r9, ip, lr
 c02b88c:	443e      	add	r6, r7
 c02b88e:	4432      	add	r2, r6
 c02b890:	ea09 0900 	and.w	r9, r9, r0
 c02b894:	ea4f 26f0 	mov.w	r6, r0, ror #11
 c02b898:	ea89 090c 	eor.w	r9, r9, ip
 c02b89c:	ea86 16b0 	eor.w	r6, r6, r0, ror #6
 c02b8a0:	444a      	add	r2, r9
 c02b8a2:	ea86 6670 	eor.w	r6, r6, r0, ror #25
 c02b8a6:	4416      	add	r6, r2
 c02b8a8:	ea44 0703 	orr.w	r7, r4, r3
 c02b8ac:	ea4f 3273 	mov.w	r2, r3, ror #13
 c02b8b0:	402f      	ands	r7, r5
 c02b8b2:	ea04 0903 	and.w	r9, r4, r3
 c02b8b6:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
 c02b8ba:	ea47 0709 	orr.w	r7, r7, r9
 c02b8be:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
 c02b8c2:	443a      	add	r2, r7
 c02b8c4:	4432      	add	r2, r6
 c02b8c6:	4431      	add	r1, r6
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 c02b8c8:	f85a 7c04 	ldr.w	r7, [sl, #-4]
 c02b8cc:	f858 6c04 	ldr.w	r6, [r8, #-4]
 c02b8d0:	ea8e 0900 	eor.w	r9, lr, r0
 c02b8d4:	443e      	add	r6, r7
 c02b8d6:	ea09 0901 	and.w	r9, r9, r1
 c02b8da:	ea4f 27f1 	mov.w	r7, r1, ror #11
 c02b8de:	44b4      	add	ip, r6
 c02b8e0:	ea89 090e 	eor.w	r9, r9, lr
 c02b8e4:	ea87 17b1 	eor.w	r7, r7, r1, ror #6
 c02b8e8:	44cc      	add	ip, r9
 c02b8ea:	ea87 6771 	eor.w	r7, r7, r1, ror #25
 c02b8ee:	44bc      	add	ip, r7
 c02b8f0:	eb05 090c 	add.w	r9, r5, ip
 c02b8f4:	ea4f 3772 	mov.w	r7, r2, ror #13
 c02b8f8:	ea43 0502 	orr.w	r5, r3, r2
 c02b8fc:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
 c02b900:	4025      	ands	r5, r4
 c02b902:	ea03 0602 	and.w	r6, r3, r2
 c02b906:	4335      	orrs	r5, r6
 c02b908:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
 c02b90c:	442f      	add	r7, r5
    for( i = 0; i < 16; i += 8 )
 c02b90e:	4d0a      	ldr	r5, [pc, #40]	; (c02b938 <mbedtls_internal_sha256_process+0x2d4>)
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 c02b910:	4467      	add	r7, ip
    for( i = 0; i < 16; i += 8 )
 c02b912:	4545      	cmp	r5, r8
 c02b914:	f47f aed9 	bne.w	c02b6ca <mbedtls_internal_sha256_process+0x66>
 c02b918:	e9cd 100b 	strd	r1, r0, [sp, #44]	; 0x2c
 c02b91c:	e9cd 7206 	strd	r7, r2, [sp, #24]
 c02b920:	e9cd 3408 	strd	r3, r4, [sp, #32]
 c02b924:	ad3e      	add	r5, sp, #248	; 0xf8
 c02b926:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 c02b92a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 c02b92e:	9505      	str	r5, [sp, #20]
 c02b930:	e004      	b.n	c02b93c <mbedtls_internal_sha256_process+0x2d8>
 c02b932:	bf00      	nop
 c02b934:	0c034f84 	.word	0x0c034f84
 c02b938:	0c034fc4 	.word	0x0c034fc4
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 c02b93c:	f8db 5038 	ldr.w	r5, [fp, #56]	; 0x38
 c02b940:	f8db c004 	ldr.w	ip, [fp, #4]
 c02b944:	ea4f 48f5 	mov.w	r8, r5, ror #19
 c02b948:	ea88 4875 	eor.w	r8, r8, r5, ror #17
 c02b94c:	f8db 6000 	ldr.w	r6, [fp]
 c02b950:	ea88 2895 	eor.w	r8, r8, r5, lsr #10
 c02b954:	f8db 5024 	ldr.w	r5, [fp, #36]	; 0x24
 c02b958:	ea4f 4abc 	mov.w	sl, ip, ror #18
 c02b95c:	4435      	add	r5, r6
 c02b95e:	ea8a 1afc 	eor.w	sl, sl, ip, ror #7
 c02b962:	ea8a 0adc 	eor.w	sl, sl, ip, lsr #3
 c02b966:	44a8      	add	r8, r5
 c02b968:	ea4f 26f9 	mov.w	r6, r9, ror #11
 c02b96c:	eb08 050a 	add.w	r5, r8, sl
 c02b970:	ea86 16b9 	eor.w	r6, r6, r9, ror #6
 c02b974:	9503      	str	r5, [sp, #12]
 c02b976:	ea86 6579 	eor.w	r5, r6, r9, ror #25
 c02b97a:	ea80 0601 	eor.w	r6, r0, r1
 c02b97e:	ea06 0609 	and.w	r6, r6, r9
 c02b982:	4046      	eors	r6, r0
 c02b984:	442e      	add	r6, r5
 c02b986:	9d00      	ldr	r5, [sp, #0]
 c02b988:	f10b 0b20 	add.w	fp, fp, #32
 c02b98c:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 c02b98e:	4435      	add	r5, r6
 c02b990:	9e03      	ldr	r6, [sp, #12]
 c02b992:	4435      	add	r5, r6
 c02b994:	44ae      	add	lr, r5
 c02b996:	eb04 080e 	add.w	r8, r4, lr
 c02b99a:	ea47 0502 	orr.w	r5, r7, r2
 c02b99e:	ea4f 3477 	mov.w	r4, r7, ror #13
 c02b9a2:	f8cb 6020 	str.w	r6, [fp, #32]
 c02b9a6:	ea84 04b7 	eor.w	r4, r4, r7, ror #2
 c02b9aa:	ea07 0602 	and.w	r6, r7, r2
 c02b9ae:	401d      	ands	r5, r3
 c02b9b0:	ea84 54b7 	eor.w	r4, r4, r7, ror #22
 c02b9b4:	4335      	orrs	r5, r6
 c02b9b6:	4425      	add	r5, r4
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 c02b9b8:	f8db 401c 	ldr.w	r4, [fp, #28]
 c02b9bc:	f85b 6c18 	ldr.w	r6, [fp, #-24]
 c02b9c0:	ea4f 4af4 	mov.w	sl, r4, ror #19
 c02b9c4:	ea8a 4a74 	eor.w	sl, sl, r4, ror #17
 c02b9c8:	ea8a 2a94 	eor.w	sl, sl, r4, lsr #10
 c02b9cc:	f8db 4008 	ldr.w	r4, [fp, #8]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 c02b9d0:	44ae      	add	lr, r5
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 c02b9d2:	4464      	add	r4, ip
 c02b9d4:	44a2      	add	sl, r4
 c02b9d6:	9c00      	ldr	r4, [sp, #0]
 c02b9d8:	ea4f 45b6 	mov.w	r5, r6, ror #18
 c02b9dc:	ea85 15f6 	eor.w	r5, r5, r6, ror #7
 c02b9e0:	6c64      	ldr	r4, [r4, #68]	; 0x44
 c02b9e2:	ea89 0c01 	eor.w	ip, r9, r1
 c02b9e6:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
 c02b9ea:	4455      	add	r5, sl
 c02b9ec:	ea0c 0c08 	and.w	ip, ip, r8
 c02b9f0:	4404      	add	r4, r0
 c02b9f2:	ea4f 20f8 	mov.w	r0, r8, ror #11
 c02b9f6:	442c      	add	r4, r5
 c02b9f8:	ea8c 0c01 	eor.w	ip, ip, r1
 c02b9fc:	ea80 10b8 	eor.w	r0, r0, r8, ror #6
 c02ba00:	ea80 6078 	eor.w	r0, r0, r8, ror #25
 c02ba04:	44a4      	add	ip, r4
 c02ba06:	eb00 040c 	add.w	r4, r0, ip
 c02ba0a:	4423      	add	r3, r4
 c02ba0c:	9301      	str	r3, [sp, #4]
 c02ba0e:	ea4f 307e 	mov.w	r0, lr, ror #13
 c02ba12:	ea47 030e 	orr.w	r3, r7, lr
 c02ba16:	ea07 0c0e 	and.w	ip, r7, lr
 c02ba1a:	ea80 00be 	eor.w	r0, r0, lr, ror #2
 c02ba1e:	4013      	ands	r3, r2
 c02ba20:	ea43 030c 	orr.w	r3, r3, ip
 c02ba24:	ea80 50be 	eor.w	r0, r0, lr, ror #22
 c02ba28:	4418      	add	r0, r3
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 c02ba2a:	9b03      	ldr	r3, [sp, #12]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 c02ba2c:	4420      	add	r0, r4
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 c02ba2e:	ea4f 4cf3 	mov.w	ip, r3, ror #19
 c02ba32:	ea8c 4c73 	eor.w	ip, ip, r3, ror #17
 c02ba36:	f85b 4c14 	ldr.w	r4, [fp, #-20]
 c02ba3a:	ea8c 2c93 	eor.w	ip, ip, r3, lsr #10
 c02ba3e:	f8db 300c 	ldr.w	r3, [fp, #12]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 c02ba42:	f8cb 5024 	str.w	r5, [fp, #36]	; 0x24
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 c02ba46:	441e      	add	r6, r3
 c02ba48:	ea4f 43b4 	mov.w	r3, r4, ror #18
 c02ba4c:	ea83 13f4 	eor.w	r3, r3, r4, ror #7
 c02ba50:	ea83 03d4 	eor.w	r3, r3, r4, lsr #3
 c02ba54:	4466      	add	r6, ip
 c02ba56:	441e      	add	r6, r3
 c02ba58:	9b01      	ldr	r3, [sp, #4]
 c02ba5a:	ea89 0c08 	eor.w	ip, r9, r8
 c02ba5e:	ea0c 0c03 	and.w	ip, ip, r3
 c02ba62:	9b00      	ldr	r3, [sp, #0]
 c02ba64:	ea8c 0c09 	eor.w	ip, ip, r9
 c02ba68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c02ba6a:	f8cb 6028 	str.w	r6, [fp, #40]	; 0x28
 c02ba6e:	440b      	add	r3, r1
 c02ba70:	4433      	add	r3, r6
 c02ba72:	449c      	add	ip, r3
 c02ba74:	9b01      	ldr	r3, [sp, #4]
 c02ba76:	ea4f 21f3 	mov.w	r1, r3, ror #11
 c02ba7a:	ea81 11b3 	eor.w	r1, r1, r3, ror #6
 c02ba7e:	ea81 6173 	eor.w	r1, r1, r3, ror #25
 c02ba82:	eb01 030c 	add.w	r3, r1, ip
 c02ba86:	441a      	add	r2, r3
 c02ba88:	9202      	str	r2, [sp, #8]
 c02ba8a:	ea4f 3170 	mov.w	r1, r0, ror #13
 c02ba8e:	ea4e 0200 	orr.w	r2, lr, r0
 c02ba92:	ea0e 0c00 	and.w	ip, lr, r0
 c02ba96:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
 c02ba9a:	403a      	ands	r2, r7
 c02ba9c:	ea42 020c 	orr.w	r2, r2, ip
 c02baa0:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
 c02baa4:	4411      	add	r1, r2
 c02baa6:	4419      	add	r1, r3
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 c02baa8:	f8db 3010 	ldr.w	r3, [fp, #16]
 c02baac:	ea4f 4cf5 	mov.w	ip, r5, ror #19
 c02bab0:	441c      	add	r4, r3
 c02bab2:	ea8c 4c75 	eor.w	ip, ip, r5, ror #17
 c02bab6:	9b01      	ldr	r3, [sp, #4]
 c02bab8:	ea8c 2595 	eor.w	r5, ip, r5, lsr #10
 c02babc:	4425      	add	r5, r4
 c02babe:	ea88 0403 	eor.w	r4, r8, r3
 c02bac2:	9b02      	ldr	r3, [sp, #8]
 c02bac4:	f85b 2c10 	ldr.w	r2, [fp, #-16]
 c02bac8:	401c      	ands	r4, r3
 c02baca:	9b00      	ldr	r3, [sp, #0]
 c02bacc:	ea4f 4cb2 	mov.w	ip, r2, ror #18
 c02bad0:	ea8c 1cf2 	eor.w	ip, ip, r2, ror #7
 c02bad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c02bad6:	ea8c 0cd2 	eor.w	ip, ip, r2, lsr #3
 c02bada:	44ac      	add	ip, r5
 c02badc:	444b      	add	r3, r9
 c02bade:	4463      	add	r3, ip
 c02bae0:	ea84 0408 	eor.w	r4, r4, r8
 c02bae4:	f8cb c02c 	str.w	ip, [fp, #44]	; 0x2c
 c02bae8:	441c      	add	r4, r3
 c02baea:	9b02      	ldr	r3, [sp, #8]
 c02baec:	ea4f 3971 	mov.w	r9, r1, ror #13
 c02baf0:	ea4f 25f3 	mov.w	r5, r3, ror #11
 c02baf4:	ea85 15b3 	eor.w	r5, r5, r3, ror #6
 c02baf8:	ea85 6573 	eor.w	r5, r5, r3, ror #25
 c02bafc:	192b      	adds	r3, r5, r4
 c02bafe:	ea40 0501 	orr.w	r5, r0, r1
 c02bb02:	ea00 0401 	and.w	r4, r0, r1
 c02bb06:	ea05 050e 	and.w	r5, r5, lr
 c02bb0a:	4325      	orrs	r5, r4
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 c02bb0c:	ea4f 44f6 	mov.w	r4, r6, ror #19
 c02bb10:	ea84 4476 	eor.w	r4, r4, r6, ror #17
 c02bb14:	ea84 2696 	eor.w	r6, r4, r6, lsr #10
 c02bb18:	f8db 4014 	ldr.w	r4, [fp, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 c02bb1c:	eb07 0a03 	add.w	sl, r7, r3
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 c02bb20:	f85b 7c0c 	ldr.w	r7, [fp, #-12]
 c02bb24:	4422      	add	r2, r4
 c02bb26:	4416      	add	r6, r2
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 c02bb28:	ea89 09b1 	eor.w	r9, r9, r1, ror #2
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 c02bb2c:	ea4f 42b7 	mov.w	r2, r7, ror #18
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 c02bb30:	ea89 59b1 	eor.w	r9, r9, r1, ror #22
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 c02bb34:	ea82 12f7 	eor.w	r2, r2, r7, ror #7
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 c02bb38:	444d      	add	r5, r9
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 c02bb3a:	ea82 02d7 	eor.w	r2, r2, r7, lsr #3
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 c02bb3e:	441d      	add	r5, r3
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 c02bb40:	4432      	add	r2, r6
 c02bb42:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
 c02bb46:	ea83 0604 	eor.w	r6, r3, r4
 c02bb4a:	ea06 060a 	and.w	r6, r6, sl
 c02bb4e:	405e      	eors	r6, r3
 c02bb50:	9b00      	ldr	r3, [sp, #0]
 c02bb52:	ea4f 24fa 	mov.w	r4, sl, ror #11
 c02bb56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c02bb58:	ea84 14ba 	eor.w	r4, r4, sl, ror #6
 c02bb5c:	4413      	add	r3, r2
 c02bb5e:	4443      	add	r3, r8
 c02bb60:	441e      	add	r6, r3
 c02bb62:	ea84 647a 	eor.w	r4, r4, sl, ror #25
 c02bb66:	19a3      	adds	r3, r4, r6
 c02bb68:	ea41 0605 	orr.w	r6, r1, r5
 c02bb6c:	ea4f 3475 	mov.w	r4, r5, ror #13
 c02bb70:	ea01 0805 	and.w	r8, r1, r5
 c02bb74:	ea84 04b5 	eor.w	r4, r4, r5, ror #2
 c02bb78:	4006      	ands	r6, r0
 c02bb7a:	ea46 0608 	orr.w	r6, r6, r8
 c02bb7e:	ea84 54b5 	eor.w	r4, r4, r5, ror #22
 c02bb82:	4434      	add	r4, r6
 c02bb84:	441c      	add	r4, r3
 c02bb86:	449e      	add	lr, r3
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 c02bb88:	f85b 8c08 	ldr.w	r8, [fp, #-8]
 c02bb8c:	f8db 3018 	ldr.w	r3, [fp, #24]
 c02bb90:	ea4f 46fc 	mov.w	r6, ip, ror #19
 c02bb94:	ea86 467c 	eor.w	r6, r6, ip, ror #17
 c02bb98:	ea86 2c9c 	eor.w	ip, r6, ip, lsr #10
 c02bb9c:	19de      	adds	r6, r3, r7
 c02bb9e:	ea4f 43b8 	mov.w	r3, r8, ror #18
 c02bba2:	ea83 13f8 	eor.w	r3, r3, r8, ror #7
 c02bba6:	ea83 03d8 	eor.w	r3, r3, r8, lsr #3
 c02bbaa:	4466      	add	r6, ip
 c02bbac:	441e      	add	r6, r3
 c02bbae:	9b02      	ldr	r3, [sp, #8]
 c02bbb0:	9f01      	ldr	r7, [sp, #4]
 c02bbb2:	ea83 0c0a 	eor.w	ip, r3, sl
 c02bbb6:	ea0c 0c0e 	and.w	ip, ip, lr
 c02bbba:	ea8c 0c03 	eor.w	ip, ip, r3
 c02bbbe:	9b00      	ldr	r3, [sp, #0]
 c02bbc0:	ea05 0904 	and.w	r9, r5, r4
 c02bbc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 c02bbc6:	f8cb 2030 	str.w	r2, [fp, #48]	; 0x30
 c02bbca:	4433      	add	r3, r6
 c02bbcc:	443b      	add	r3, r7
 c02bbce:	449c      	add	ip, r3
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 c02bbd0:	ea4f 23fe 	mov.w	r3, lr, ror #11
 c02bbd4:	ea83 13be 	eor.w	r3, r3, lr, ror #6
 c02bbd8:	ea83 637e 	eor.w	r3, r3, lr, ror #25
 c02bbdc:	eb03 070c 	add.w	r7, r3, ip
 c02bbe0:	ea45 0c04 	orr.w	ip, r5, r4
 c02bbe4:	ea4f 3374 	mov.w	r3, r4, ror #13
 c02bbe8:	ea0c 0c01 	and.w	ip, ip, r1
 c02bbec:	ea83 03b4 	eor.w	r3, r3, r4, ror #2
 c02bbf0:	ea4c 0c09 	orr.w	ip, ip, r9
 c02bbf4:	ea83 53b4 	eor.w	r3, r3, r4, ror #22
 c02bbf8:	4463      	add	r3, ip
 c02bbfa:	443b      	add	r3, r7
 c02bbfc:	4438      	add	r0, r7
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 c02bbfe:	f85b 7c04 	ldr.w	r7, [fp, #-4]
 c02bc02:	ea4f 4cf2 	mov.w	ip, r2, ror #19
 c02bc06:	9701      	str	r7, [sp, #4]
 c02bc08:	f8db 701c 	ldr.w	r7, [fp, #28]
 c02bc0c:	ea8c 4c72 	eor.w	ip, ip, r2, ror #17
 c02bc10:	ea8c 2292 	eor.w	r2, ip, r2, lsr #10
 c02bc14:	44b8      	add	r8, r7
 c02bc16:	4490      	add	r8, r2
 c02bc18:	9a01      	ldr	r2, [sp, #4]
 c02bc1a:	9f01      	ldr	r7, [sp, #4]
 c02bc1c:	ea4f 42b2 	mov.w	r2, r2, ror #18
 c02bc20:	ea82 12f7 	eor.w	r2, r2, r7, ror #7
 c02bc24:	ea82 02d7 	eor.w	r2, r2, r7, lsr #3
 c02bc28:	4490      	add	r8, r2
 c02bc2a:	9a00      	ldr	r2, [sp, #0]
 c02bc2c:	9f02      	ldr	r7, [sp, #8]
 c02bc2e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 c02bc30:	ea8a 090e 	eor.w	r9, sl, lr
 c02bc34:	4442      	add	r2, r8
 c02bc36:	ea09 0900 	and.w	r9, r9, r0
 c02bc3a:	ea4f 2cf0 	mov.w	ip, r0, ror #11
 c02bc3e:	ea89 090a 	eor.w	r9, r9, sl
 c02bc42:	443a      	add	r2, r7
 c02bc44:	ea8c 1cb0 	eor.w	ip, ip, r0, ror #6
 c02bc48:	444a      	add	r2, r9
 c02bc4a:	ea8c 6c70 	eor.w	ip, ip, r0, ror #25
 c02bc4e:	f8cb 8038 	str.w	r8, [fp, #56]	; 0x38
 c02bc52:	4494      	add	ip, r2
 c02bc54:	ea44 0803 	orr.w	r8, r4, r3
 c02bc58:	ea4f 3273 	mov.w	r2, r3, ror #13
 c02bc5c:	ea08 0805 	and.w	r8, r8, r5
 c02bc60:	ea04 0903 	and.w	r9, r4, r3
 c02bc64:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
 c02bc68:	ea48 0809 	orr.w	r8, r8, r9
 c02bc6c:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
 c02bc70:	4442      	add	r2, r8
 c02bc72:	4462      	add	r2, ip
 c02bc74:	4461      	add	r1, ip
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 c02bc76:	ea4f 4cf6 	mov.w	ip, r6, ror #19
 c02bc7a:	ea8c 4c76 	eor.w	ip, ip, r6, ror #17
 c02bc7e:	f8db 8000 	ldr.w	r8, [fp]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 c02bc82:	f8cb 6034 	str.w	r6, [fp, #52]	; 0x34
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 c02bc86:	ea8c 2c96 	eor.w	ip, ip, r6, lsr #10
 c02bc8a:	9f03      	ldr	r7, [sp, #12]
 c02bc8c:	9e01      	ldr	r6, [sp, #4]
 c02bc8e:	443e      	add	r6, r7
 c02bc90:	ea4f 47b8 	mov.w	r7, r8, ror #18
 c02bc94:	ea87 17f8 	eor.w	r7, r7, r8, ror #7
 c02bc98:	ea87 08d8 	eor.w	r8, r7, r8, lsr #3
 c02bc9c:	9f00      	ldr	r7, [sp, #0]
 c02bc9e:	4466      	add	r6, ip
 c02bca0:	6dff      	ldr	r7, [r7, #92]	; 0x5c
 c02bca2:	4446      	add	r6, r8
 c02bca4:	ea8e 0800 	eor.w	r8, lr, r0
 c02bca8:	4437      	add	r7, r6
 c02bcaa:	ea08 0801 	and.w	r8, r8, r1
 c02bcae:	ea4f 2cf1 	mov.w	ip, r1, ror #11
 c02bcb2:	4457      	add	r7, sl
 c02bcb4:	ea88 080e 	eor.w	r8, r8, lr
 c02bcb8:	ea8c 1cb1 	eor.w	ip, ip, r1, ror #6
 c02bcbc:	44b8      	add	r8, r7
 c02bcbe:	ea8c 6c71 	eor.w	ip, ip, r1, ror #25
 c02bcc2:	44c4      	add	ip, r8
 c02bcc4:	eb05 090c 	add.w	r9, r5, ip
 c02bcc8:	ea4f 3772 	mov.w	r7, r2, ror #13
 c02bccc:	ea43 0502 	orr.w	r5, r3, r2
 c02bcd0:	f8cb 603c 	str.w	r6, [fp, #60]	; 0x3c
 c02bcd4:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
 c02bcd8:	4025      	ands	r5, r4
 c02bcda:	ea03 0602 	and.w	r6, r3, r2
 c02bcde:	4335      	orrs	r5, r6
 c02bce0:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
 c02bce4:	442f      	add	r7, r5
 c02bce6:	9d00      	ldr	r5, [sp, #0]
 c02bce8:	4467      	add	r7, ip
 c02bcea:	3520      	adds	r5, #32
 c02bcec:	9500      	str	r5, [sp, #0]
    for( i = 16; i < 64; i += 8 )
 c02bcee:	9d05      	ldr	r5, [sp, #20]
 c02bcf0:	455d      	cmp	r5, fp
 c02bcf2:	f47f ae23 	bne.w	c02b93c <mbedtls_internal_sha256_process+0x2d8>
 c02bcf6:	e9cd 3408 	strd	r3, r4, [sp, #32]
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 c02bcfa:	2300      	movs	r3, #0
 c02bcfc:	e9cd 100b 	strd	r1, r0, [sp, #44]	; 0x2c
 c02bd00:	e9cd 7206 	strd	r7, r2, [sp, #24]
 c02bd04:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 c02bd08:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        ctx->state[i] += A[i];
 c02bd0c:	9a04      	ldr	r2, [sp, #16]
 c02bd0e:	6811      	ldr	r1, [r2, #0]
 c02bd10:	aa06      	add	r2, sp, #24
 c02bd12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    for( i = 0; i < 8; i++ )
 c02bd16:	3301      	adds	r3, #1
        ctx->state[i] += A[i];
 c02bd18:	440a      	add	r2, r1
 c02bd1a:	9904      	ldr	r1, [sp, #16]
    for( i = 0; i < 8; i++ )
 c02bd1c:	2b08      	cmp	r3, #8
        ctx->state[i] += A[i];
 c02bd1e:	f841 2b04 	str.w	r2, [r1], #4
 c02bd22:	9104      	str	r1, [sp, #16]
    for( i = 0; i < 8; i++ )
 c02bd24:	d1f2      	bne.n	c02bd0c <mbedtls_internal_sha256_process+0x6a8>

    return( 0 );
}
 c02bd26:	2000      	movs	r0, #0
 c02bd28:	b04f      	add	sp, #316	; 0x13c
 c02bd2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c02bd2e:	bf00      	nop

0c02bd30 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 c02bd30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c02bd34:	4605      	mov	r5, r0
 c02bd36:	460e      	mov	r6, r1
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 c02bd38:	4614      	mov	r4, r2
 c02bd3a:	b912      	cbnz	r2, c02bd42 <mbedtls_sha256_update_ret+0x12>
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
 c02bd3c:	2000      	movs	r0, #0
}
 c02bd3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    left = ctx->total[0] & 0x3F;
 c02bd42:	6803      	ldr	r3, [r0, #0]
 c02bd44:	f003 073f 	and.w	r7, r3, #63	; 0x3f
 c02bd48:	18d3      	adds	r3, r2, r3
    ctx->total[0] += (uint32_t) ilen;
 c02bd4a:	6003      	str	r3, [r0, #0]
        ctx->total[1]++;
 c02bd4c:	bf22      	ittt	cs
 c02bd4e:	6843      	ldrcs	r3, [r0, #4]
 c02bd50:	3301      	addcs	r3, #1
 c02bd52:	6043      	strcs	r3, [r0, #4]
    if( left && ilen >= fill )
 c02bd54:	b1a7      	cbz	r7, c02bd80 <mbedtls_sha256_update_ret+0x50>
    fill = 64 - left;
 c02bd56:	f1c7 0840 	rsb	r8, r7, #64	; 0x40
    if( left && ilen >= fill )
 c02bd5a:	4542      	cmp	r2, r8
 c02bd5c:	d310      	bcc.n	c02bd80 <mbedtls_sha256_update_ret+0x50>
        memcpy( (void *) (ctx->buffer + left), input, fill );
 c02bd5e:	f100 0928 	add.w	r9, r0, #40	; 0x28
 c02bd62:	4642      	mov	r2, r8
 c02bd64:	eb09 0007 	add.w	r0, r9, r7
 c02bd68:	f7e8 fe09 	bl	c01497e <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 c02bd6c:	4649      	mov	r1, r9
 c02bd6e:	4628      	mov	r0, r5
 c02bd70:	f7ff fc78 	bl	c02b664 <mbedtls_internal_sha256_process>
 c02bd74:	2800      	cmp	r0, #0
 c02bd76:	d1e2      	bne.n	c02bd3e <mbedtls_sha256_update_ret+0xe>
        left = 0;
 c02bd78:	4607      	mov	r7, r0
        input += fill;
 c02bd7a:	4446      	add	r6, r8
        ilen  -= fill;
 c02bd7c:	eba4 0408 	sub.w	r4, r4, r8
 c02bd80:	4426      	add	r6, r4
 c02bd82:	e005      	b.n	c02bd90 <mbedtls_sha256_update_ret+0x60>
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 c02bd84:	4628      	mov	r0, r5
 c02bd86:	f7ff fc6d 	bl	c02b664 <mbedtls_internal_sha256_process>
 c02bd8a:	2800      	cmp	r0, #0
 c02bd8c:	d1d7      	bne.n	c02bd3e <mbedtls_sha256_update_ret+0xe>
        ilen  -= 64;
 c02bd8e:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
 c02bd90:	2c3f      	cmp	r4, #63	; 0x3f
 c02bd92:	eba6 0104 	sub.w	r1, r6, r4
 c02bd96:	d8f5      	bhi.n	c02bd84 <mbedtls_sha256_update_ret+0x54>
    if( ilen > 0 )
 c02bd98:	2c00      	cmp	r4, #0
 c02bd9a:	d0cf      	beq.n	c02bd3c <mbedtls_sha256_update_ret+0xc>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 c02bd9c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 c02bda0:	4622      	mov	r2, r4
 c02bda2:	4438      	add	r0, r7
 c02bda4:	f7e8 fdeb 	bl	c01497e <memcpy>
 c02bda8:	e7c8      	b.n	c02bd3c <mbedtls_sha256_update_ret+0xc>

0c02bdaa <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 c02bdaa:	b570      	push	{r4, r5, r6, lr}
 c02bdac:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 c02bdae:	2180      	movs	r1, #128	; 0x80
    used = ctx->total[0] & 0x3F;
 c02bdb0:	6803      	ldr	r3, [r0, #0]
 c02bdb2:	f100 0628 	add.w	r6, r0, #40	; 0x28
 c02bdb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ctx->buffer[used++] = 0x80;
 c02bdba:	1c5a      	adds	r2, r3, #1

    if( used <= 56 )
 c02bdbc:	2a38      	cmp	r2, #56	; 0x38
    ctx->buffer[used++] = 0x80;
 c02bdbe:	4403      	add	r3, r0
{
 c02bdc0:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
 c02bdc2:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
 c02bdc6:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 56 )
 c02bdca:	d873      	bhi.n	c02beb4 <mbedtls_sha256_finish_ret+0x10a>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 c02bdcc:	2100      	movs	r1, #0
 c02bdce:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
 c02bdd2:	f7e8 fdf8 	bl	c0149c6 <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
 c02bdd6:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
 c02bdda:	0f5a      	lsrs	r2, r3, #29
 c02bddc:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 c02bde0:	0e11      	lsrs	r1, r2, #24
    low  = ( ctx->total[0] <<  3 );
 c02bde2:	00db      	lsls	r3, r3, #3
    PUT_UINT32_BE( high, ctx->buffer, 56 );
 c02bde4:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
 c02bde8:	0c11      	lsrs	r1, r2, #16
 c02bdea:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
 c02bdee:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
 c02bdf2:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 c02bdf4:	0e1a      	lsrs	r2, r3, #24
 c02bdf6:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 c02bdfa:	0c1a      	lsrs	r2, r3, #16
 c02bdfc:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 c02be00:	0a1a      	lsrs	r2, r3, #8
    PUT_UINT32_BE( high, ctx->buffer, 56 );
 c02be02:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 c02be06:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
 c02be0a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 c02be0e:	4631      	mov	r1, r6
 c02be10:	4620      	mov	r0, r4
 c02be12:	f7ff fc27 	bl	c02b664 <mbedtls_internal_sha256_process>
 c02be16:	2800      	cmp	r0, #0
 c02be18:	d14b      	bne.n	c02beb2 <mbedtls_sha256_finish_ret+0x108>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 c02be1a:	7ae3      	ldrb	r3, [r4, #11]
 c02be1c:	702b      	strb	r3, [r5, #0]
 c02be1e:	8963      	ldrh	r3, [r4, #10]
 c02be20:	706b      	strb	r3, [r5, #1]
 c02be22:	68a3      	ldr	r3, [r4, #8]
 c02be24:	0a1b      	lsrs	r3, r3, #8
 c02be26:	70ab      	strb	r3, [r5, #2]
 c02be28:	68a3      	ldr	r3, [r4, #8]
 c02be2a:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 c02be2c:	7be3      	ldrb	r3, [r4, #15]
 c02be2e:	712b      	strb	r3, [r5, #4]
 c02be30:	89e3      	ldrh	r3, [r4, #14]
 c02be32:	716b      	strb	r3, [r5, #5]
 c02be34:	68e3      	ldr	r3, [r4, #12]
 c02be36:	0a1b      	lsrs	r3, r3, #8
 c02be38:	71ab      	strb	r3, [r5, #6]
 c02be3a:	68e3      	ldr	r3, [r4, #12]
 c02be3c:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 c02be3e:	7ce3      	ldrb	r3, [r4, #19]
 c02be40:	722b      	strb	r3, [r5, #8]
 c02be42:	8a63      	ldrh	r3, [r4, #18]
 c02be44:	726b      	strb	r3, [r5, #9]
 c02be46:	6923      	ldr	r3, [r4, #16]
 c02be48:	0a1b      	lsrs	r3, r3, #8
 c02be4a:	72ab      	strb	r3, [r5, #10]
 c02be4c:	6923      	ldr	r3, [r4, #16]
 c02be4e:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 c02be50:	7de3      	ldrb	r3, [r4, #23]
 c02be52:	732b      	strb	r3, [r5, #12]
 c02be54:	8ae3      	ldrh	r3, [r4, #22]
 c02be56:	736b      	strb	r3, [r5, #13]
 c02be58:	6963      	ldr	r3, [r4, #20]
 c02be5a:	0a1b      	lsrs	r3, r3, #8
 c02be5c:	73ab      	strb	r3, [r5, #14]
 c02be5e:	6963      	ldr	r3, [r4, #20]
 c02be60:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 c02be62:	7ee3      	ldrb	r3, [r4, #27]
 c02be64:	742b      	strb	r3, [r5, #16]
 c02be66:	8b63      	ldrh	r3, [r4, #26]
 c02be68:	746b      	strb	r3, [r5, #17]
 c02be6a:	69a3      	ldr	r3, [r4, #24]
 c02be6c:	0a1b      	lsrs	r3, r3, #8
 c02be6e:	74ab      	strb	r3, [r5, #18]
 c02be70:	69a3      	ldr	r3, [r4, #24]
 c02be72:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 c02be74:	7fe3      	ldrb	r3, [r4, #31]
 c02be76:	752b      	strb	r3, [r5, #20]
 c02be78:	8be3      	ldrh	r3, [r4, #30]
 c02be7a:	756b      	strb	r3, [r5, #21]
 c02be7c:	69e3      	ldr	r3, [r4, #28]
 c02be7e:	0a1b      	lsrs	r3, r3, #8
 c02be80:	75ab      	strb	r3, [r5, #22]
 c02be82:	69e3      	ldr	r3, [r4, #28]
 c02be84:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 c02be86:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 c02be8a:	762b      	strb	r3, [r5, #24]
 c02be8c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 c02be8e:	766b      	strb	r3, [r5, #25]
 c02be90:	6a23      	ldr	r3, [r4, #32]
 c02be92:	0a1b      	lsrs	r3, r3, #8
 c02be94:	76ab      	strb	r3, [r5, #26]
 c02be96:	6a23      	ldr	r3, [r4, #32]
 c02be98:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
 c02be9a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 c02be9c:	b94b      	cbnz	r3, c02beb2 <mbedtls_sha256_finish_ret+0x108>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 c02be9e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 c02bea2:	772b      	strb	r3, [r5, #28]
 c02bea4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 c02bea6:	776b      	strb	r3, [r5, #29]
 c02bea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c02beaa:	0a1b      	lsrs	r3, r3, #8
 c02beac:	77ab      	strb	r3, [r5, #30]
 c02beae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c02beb0:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
 c02beb2:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
 c02beb4:	2100      	movs	r1, #0
 c02beb6:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 c02beba:	f7e8 fd84 	bl	c0149c6 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 c02bebe:	4631      	mov	r1, r6
 c02bec0:	4620      	mov	r0, r4
 c02bec2:	f7ff fbcf 	bl	c02b664 <mbedtls_internal_sha256_process>
 c02bec6:	2800      	cmp	r0, #0
 c02bec8:	d1f3      	bne.n	c02beb2 <mbedtls_sha256_finish_ret+0x108>
        memset( ctx->buffer, 0, 56 );
 c02beca:	4601      	mov	r1, r0
 c02becc:	2238      	movs	r2, #56	; 0x38
 c02bece:	4630      	mov	r0, r6
 c02bed0:	e77f      	b.n	c02bdd2 <mbedtls_sha256_finish_ret+0x28>

0c02bed2 <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 c02bed2:	b5f0      	push	{r4, r5, r6, r7, lr}
 c02bed4:	461c      	mov	r4, r3
 c02bed6:	b09d      	sub	sp, #116	; 0x74
 c02bed8:	4606      	mov	r6, r0

    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha256_init( &ctx );
 c02beda:	a801      	add	r0, sp, #4
{
 c02bedc:	460f      	mov	r7, r1
 c02bede:	4615      	mov	r5, r2
    mbedtls_sha256_init( &ctx );
 c02bee0:	f7ff fb60 	bl	c02b5a4 <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
 c02bee4:	4621      	mov	r1, r4
 c02bee6:	a801      	add	r0, sp, #4
 c02bee8:	f7ff fb6a 	bl	c02b5c0 <mbedtls_sha256_starts_ret>
 c02beec:	4604      	mov	r4, r0
 c02beee:	b958      	cbnz	r0, c02bf08 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
 c02bef0:	463a      	mov	r2, r7
 c02bef2:	4631      	mov	r1, r6
 c02bef4:	a801      	add	r0, sp, #4
 c02bef6:	f7ff ff1b 	bl	c02bd30 <mbedtls_sha256_update_ret>
 c02befa:	4604      	mov	r4, r0
 c02befc:	b920      	cbnz	r0, c02bf08 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
 c02befe:	4629      	mov	r1, r5
 c02bf00:	a801      	add	r0, sp, #4
 c02bf02:	f7ff ff52 	bl	c02bdaa <mbedtls_sha256_finish_ret>
 c02bf06:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha256_free( &ctx );
 c02bf08:	a801      	add	r0, sp, #4
 c02bf0a:	f7ff fb4f 	bl	c02b5ac <mbedtls_sha256_free>

    return( ret );
}
 c02bf0e:	4620      	mov	r0, r4
 c02bf10:	b01d      	add	sp, #116	; 0x74
 c02bf12:	bdf0      	pop	{r4, r5, r6, r7, pc}

0c02bf14 <mbedtls_sha512_init>:

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
    SHA512_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
 c02bf14:	22d8      	movs	r2, #216	; 0xd8
 c02bf16:	2100      	movs	r1, #0
 c02bf18:	f7e8 bd55 	b.w	c0149c6 <memset>

0c02bf1c <mbedtls_sha512_free>:
}

void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
{
    if( ctx == NULL )
 c02bf1c:	b110      	cbz	r0, c02bf24 <mbedtls_sha512_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
 c02bf1e:	21d8      	movs	r1, #216	; 0xd8
 c02bf20:	f7fa bc02 	b.w	c026728 <mbedtls_platform_zeroize>
}
 c02bf24:	4770      	bx	lr

0c02bf26 <mbedtls_sha512_clone>:

void mbedtls_sha512_clone( mbedtls_sha512_context *dst,
                           const mbedtls_sha512_context *src )
{
 c02bf26:	b508      	push	{r3, lr}
    SHA512_VALIDATE( dst != NULL );
    SHA512_VALIDATE( src != NULL );

    *dst = *src;
 c02bf28:	22d8      	movs	r2, #216	; 0xd8
 c02bf2a:	f7e8 fd28 	bl	c01497e <memcpy>
}
 c02bf2e:	bd08      	pop	{r3, pc}

0c02bf30 <mbedtls_sha512_starts_ret>:
int mbedtls_sha512_starts_ret( mbedtls_sha512_context *ctx, int is384 )
{
    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );

    ctx->total[0] = 0;
 c02bf30:	2200      	movs	r2, #0
 c02bf32:	2300      	movs	r3, #0
 c02bf34:	e9c0 2300 	strd	r2, r3, [r0]
    ctx->total[1] = 0;
 c02bf38:	e9c0 2302 	strd	r2, r3, [r0, #8]

    if( is384 == 0 )
 c02bf3c:	2900      	cmp	r1, #0
 c02bf3e:	d12b      	bne.n	c02bf98 <mbedtls_sha512_starts_ret+0x68>
    {
        /* SHA-512 */
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
 c02bf40:	a329      	add	r3, pc, #164	; (adr r3, c02bfe8 <mbedtls_sha512_starts_ret+0xb8>)
 c02bf42:	e9d3 2300 	ldrd	r2, r3, [r3]
 c02bf46:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
 c02bf4a:	a329      	add	r3, pc, #164	; (adr r3, c02bff0 <mbedtls_sha512_starts_ret+0xc0>)
 c02bf4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 c02bf50:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
 c02bf54:	a328      	add	r3, pc, #160	; (adr r3, c02bff8 <mbedtls_sha512_starts_ret+0xc8>)
 c02bf56:	e9d3 2300 	ldrd	r2, r3, [r3]
 c02bf5a:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
 c02bf5e:	a328      	add	r3, pc, #160	; (adr r3, c02c000 <mbedtls_sha512_starts_ret+0xd0>)
 c02bf60:	e9d3 2300 	ldrd	r2, r3, [r3]
 c02bf64:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
 c02bf68:	a327      	add	r3, pc, #156	; (adr r3, c02c008 <mbedtls_sha512_starts_ret+0xd8>)
 c02bf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 c02bf6e:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
 c02bf72:	a327      	add	r3, pc, #156	; (adr r3, c02c010 <mbedtls_sha512_starts_ret+0xe0>)
 c02bf74:	e9d3 2300 	ldrd	r2, r3, [r3]
 c02bf78:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
 c02bf7c:	a326      	add	r3, pc, #152	; (adr r3, c02c018 <mbedtls_sha512_starts_ret+0xe8>)
 c02bf7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 c02bf82:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
 c02bf86:	a326      	add	r3, pc, #152	; (adr r3, c02c020 <mbedtls_sha512_starts_ret+0xf0>)
 c02bf88:	e9d3 2300 	ldrd	r2, r3, [r3]
        ctx->state[2] = UL64(0x9159015A3070DD17);
        ctx->state[3] = UL64(0x152FECD8F70E5939);
        ctx->state[4] = UL64(0x67332667FFC00B31);
        ctx->state[5] = UL64(0x8EB44A8768581511);
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 c02bf8c:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
    }

    ctx->is384 = is384;
 c02bf90:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0

    return( 0 );
}
 c02bf94:	2000      	movs	r0, #0
 c02bf96:	4770      	bx	lr
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
 c02bf98:	a323      	add	r3, pc, #140	; (adr r3, c02c028 <mbedtls_sha512_starts_ret+0xf8>)
 c02bf9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 c02bf9e:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
 c02bfa2:	a323      	add	r3, pc, #140	; (adr r3, c02c030 <mbedtls_sha512_starts_ret+0x100>)
 c02bfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 c02bfa8:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
 c02bfac:	a322      	add	r3, pc, #136	; (adr r3, c02c038 <mbedtls_sha512_starts_ret+0x108>)
 c02bfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 c02bfb2:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
 c02bfb6:	a322      	add	r3, pc, #136	; (adr r3, c02c040 <mbedtls_sha512_starts_ret+0x110>)
 c02bfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 c02bfbc:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
 c02bfc0:	a321      	add	r3, pc, #132	; (adr r3, c02c048 <mbedtls_sha512_starts_ret+0x118>)
 c02bfc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 c02bfc6:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
 c02bfca:	a321      	add	r3, pc, #132	; (adr r3, c02c050 <mbedtls_sha512_starts_ret+0x120>)
 c02bfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 c02bfd0:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
 c02bfd4:	a320      	add	r3, pc, #128	; (adr r3, c02c058 <mbedtls_sha512_starts_ret+0x128>)
 c02bfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 c02bfda:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 c02bfde:	a320      	add	r3, pc, #128	; (adr r3, c02c060 <mbedtls_sha512_starts_ret+0x130>)
 c02bfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 c02bfe4:	e7d2      	b.n	c02bf8c <mbedtls_sha512_starts_ret+0x5c>
 c02bfe6:	bf00      	nop
 c02bfe8:	f3bcc908 	.word	0xf3bcc908
 c02bfec:	6a09e667 	.word	0x6a09e667
 c02bff0:	84caa73b 	.word	0x84caa73b
 c02bff4:	bb67ae85 	.word	0xbb67ae85
 c02bff8:	fe94f82b 	.word	0xfe94f82b
 c02bffc:	3c6ef372 	.word	0x3c6ef372
 c02c000:	5f1d36f1 	.word	0x5f1d36f1
 c02c004:	a54ff53a 	.word	0xa54ff53a
 c02c008:	ade682d1 	.word	0xade682d1
 c02c00c:	510e527f 	.word	0x510e527f
 c02c010:	2b3e6c1f 	.word	0x2b3e6c1f
 c02c014:	9b05688c 	.word	0x9b05688c
 c02c018:	fb41bd6b 	.word	0xfb41bd6b
 c02c01c:	1f83d9ab 	.word	0x1f83d9ab
 c02c020:	137e2179 	.word	0x137e2179
 c02c024:	5be0cd19 	.word	0x5be0cd19
 c02c028:	c1059ed8 	.word	0xc1059ed8
 c02c02c:	cbbb9d5d 	.word	0xcbbb9d5d
 c02c030:	367cd507 	.word	0x367cd507
 c02c034:	629a292a 	.word	0x629a292a
 c02c038:	3070dd17 	.word	0x3070dd17
 c02c03c:	9159015a 	.word	0x9159015a
 c02c040:	f70e5939 	.word	0xf70e5939
 c02c044:	152fecd8 	.word	0x152fecd8
 c02c048:	ffc00b31 	.word	0xffc00b31
 c02c04c:	67332667 	.word	0x67332667
 c02c050:	68581511 	.word	0x68581511
 c02c054:	8eb44a87 	.word	0x8eb44a87
 c02c058:	64f98fa7 	.word	0x64f98fa7
 c02c05c:	db0c2e0d 	.word	0xdb0c2e0d
 c02c060:	befa4fa4 	.word	0xbefa4fa4
 c02c064:	47b5481d 	.word	0x47b5481d

0c02c068 <mbedtls_internal_sha512_process>:
    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
};

int mbedtls_internal_sha512_process( mbedtls_sha512_context *ctx,
                                     const unsigned char data[128] )
{
 c02c068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02c06c:	f2ad 4d84 	subw	sp, sp, #1156	; 0x484
 c02c070:	4686      	mov	lr, r0
 c02c072:	f101 0680 	add.w	r6, r1, #128	; 0x80
 c02c076:	a87e      	add	r0, sp, #504	; 0x1f8
        (d) += temp1; (h) = temp1 + temp2;                      \
    } while( 0 )

    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 c02c078:	f04f 0a00 	mov.w	sl, #0
 c02c07c:	2500      	movs	r5, #0
 c02c07e:	780a      	ldrb	r2, [r1, #0]
 c02c080:	784c      	ldrb	r4, [r1, #1]
 c02c082:	ea4f 6b02 	mov.w	fp, r2, lsl #24
 c02c086:	ea4f 4804 	mov.w	r8, r4, lsl #16
 c02c08a:	79cc      	ldrb	r4, [r1, #7]
 c02c08c:	ea4a 020a 	orr.w	r2, sl, sl
 c02c090:	ea48 030b 	orr.w	r3, r8, fp
 c02c094:	ea42 0704 	orr.w	r7, r2, r4
 c02c098:	ea43 0805 	orr.w	r8, r3, r5
 c02c09c:	463a      	mov	r2, r7
 c02c09e:	4643      	mov	r3, r8
 c02c0a0:	4654      	mov	r4, sl
 c02c0a2:	f891 8002 	ldrb.w	r8, [r1, #2]
 c02c0a6:	f891 9003 	ldrb.w	r9, [r1, #3]
 c02c0aa:	ea4f 2508 	mov.w	r5, r8, lsl #8
 c02c0ae:	4322      	orrs	r2, r4
 c02c0b0:	432b      	orrs	r3, r5
 c02c0b2:	ea42 040a 	orr.w	r4, r2, sl
 c02c0b6:	ea43 0509 	orr.w	r5, r3, r9
 c02c0ba:	4622      	mov	r2, r4
 c02c0bc:	462b      	mov	r3, r5
 c02c0be:	f891 8004 	ldrb.w	r8, [r1, #4]
 c02c0c2:	3108      	adds	r1, #8
 c02c0c4:	ea4f 2518 	mov.w	r5, r8, lsr #8
 c02c0c8:	ea4f 6408 	mov.w	r4, r8, lsl #24
 c02c0cc:	f811 8c03 	ldrb.w	r8, [r1, #-3]
 c02c0d0:	4322      	orrs	r2, r4
 c02c0d2:	432b      	orrs	r3, r5
 c02c0d4:	ea4f 4408 	mov.w	r4, r8, lsl #16
 c02c0d8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 c02c0dc:	ea43 0805 	orr.w	r8, r3, r5
 c02c0e0:	ea42 0704 	orr.w	r7, r2, r4
 c02c0e4:	4643      	mov	r3, r8
 c02c0e6:	463a      	mov	r2, r7
 c02c0e8:	f811 8c02 	ldrb.w	r8, [r1, #-2]
    for( i = 0; i < 16; i++ )
 c02c0ec:	428e      	cmp	r6, r1
        GET_UINT64_BE( W[i], data, i << 3 );
 c02c0ee:	ea4f 6518 	mov.w	r5, r8, lsr #24
 c02c0f2:	ea4f 2408 	mov.w	r4, r8, lsl #8
 c02c0f6:	ea42 0204 	orr.w	r2, r2, r4
 c02c0fa:	ea43 0305 	orr.w	r3, r3, r5
 c02c0fe:	e9e0 2302 	strd	r2, r3, [r0, #8]!
    for( i = 0; i < 16; i++ )
 c02c102:	d1b9      	bne.n	c02c078 <mbedtls_internal_sha512_process+0x10>
 c02c104:	ab80      	add	r3, sp, #512	; 0x200
 c02c106:	461a      	mov	r2, r3
 c02c108:	f50d 6880 	add.w	r8, sp, #1024	; 0x400
 c02c10c:	4616      	mov	r6, r2
    }

    for( ; i < 80; i++ )
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
 c02c10e:	e9d2 971c 	ldrd	r9, r7, [r2, #112]	; 0x70
               S0(W[i - 15]) + W[i - 16];
 c02c112:	e9d2 ac02 	ldrd	sl, ip, [r2, #8]
        W[i] = S1(W[i -  2]) + W[i -  7] +
 c02c116:	ea4f 41d9 	mov.w	r1, r9, lsr #19
 c02c11a:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
 c02c11e:	9100      	str	r1, [sp, #0]
 c02c120:	0cf9      	lsrs	r1, r7, #19
 c02c122:	ea41 3149 	orr.w	r1, r1, r9, lsl #13
 c02c126:	9101      	str	r1, [sp, #4]
 c02c128:	00f9      	lsls	r1, r7, #3
 c02c12a:	ea41 7159 	orr.w	r1, r1, r9, lsr #29
 c02c12e:	9103      	str	r1, [sp, #12]
 c02c130:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 c02c134:	ea41 7157 	orr.w	r1, r1, r7, lsr #29
 c02c138:	9102      	str	r1, [sp, #8]
 c02c13a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c02c13e:	e9dd 4500 	ldrd	r4, r5, [sp]
 c02c142:	4044      	eors	r4, r0
 c02c144:	ea4f 1099 	mov.w	r0, r9, lsr #6
 c02c148:	ea40 6087 	orr.w	r0, r0, r7, lsl #26
 c02c14c:	404d      	eors	r5, r1
 c02c14e:	09b9      	lsrs	r1, r7, #6
 c02c150:	4044      	eors	r4, r0
 c02c152:	404d      	eors	r5, r1
 c02c154:	e9cd 4508 	strd	r4, r5, [sp, #32]
               S0(W[i - 15]) + W[i - 16];
 c02c158:	e9d6 0112 	ldrd	r0, r1, [r6, #72]	; 0x48
 c02c15c:	e9d6 6700 	ldrd	r6, r7, [r6]
 c02c160:	1834      	adds	r4, r6, r0
 c02c162:	eb47 0501 	adc.w	r5, r7, r1
 c02c166:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 c02c16a:	1900      	adds	r0, r0, r4
 c02c16c:	4169      	adcs	r1, r5
 c02c16e:	4606      	mov	r6, r0
 c02c170:	460f      	mov	r7, r1
 c02c172:	ea4f 015a 	mov.w	r1, sl, lsr #1
 c02c176:	ea41 71cc 	orr.w	r1, r1, ip, lsl #31
 c02c17a:	9104      	str	r1, [sp, #16]
 c02c17c:	ea4f 015c 	mov.w	r1, ip, lsr #1
 c02c180:	ea41 71ca 	orr.w	r1, r1, sl, lsl #31
 c02c184:	9105      	str	r1, [sp, #20]
 c02c186:	ea4f 211a 	mov.w	r1, sl, lsr #8
 c02c18a:	ea41 610c 	orr.w	r1, r1, ip, lsl #24
 c02c18e:	9106      	str	r1, [sp, #24]
 c02c190:	ea4f 211c 	mov.w	r1, ip, lsr #8
 c02c194:	ea41 610a 	orr.w	r1, r1, sl, lsl #24
 c02c198:	9107      	str	r1, [sp, #28]
 c02c19a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 c02c19e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 c02c1a2:	4044      	eors	r4, r0
 c02c1a4:	ea4f 10da 	mov.w	r0, sl, lsr #7
 c02c1a8:	ea40 604c 	orr.w	r0, r0, ip, lsl #25
 c02c1ac:	404d      	eors	r5, r1
 c02c1ae:	ea80 0904 	eor.w	r9, r0, r4
 c02c1b2:	ea4f 11dc 	mov.w	r1, ip, lsr #7
 c02c1b6:	eb19 0006 	adds.w	r0, r9, r6
 c02c1ba:	f102 0208 	add.w	r2, r2, #8
 c02c1be:	ea81 0a05 	eor.w	sl, r1, r5
 c02c1c2:	eb4a 0107 	adc.w	r1, sl, r7
    for( ; i < 80; i++ )
 c02c1c6:	4590      	cmp	r8, r2
        W[i] = S1(W[i -  2]) + W[i -  7] +
 c02c1c8:	e9c2 011e 	strd	r0, r1, [r2, #120]	; 0x78
    for( ; i < 80; i++ )
 c02c1cc:	d19e      	bne.n	c02c10c <mbedtls_internal_sha512_process+0xa4>
    }

    A = ctx->state[0];
 c02c1ce:	e9de 1204 	ldrd	r1, r2, [lr, #16]
 c02c1d2:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
    B = ctx->state[1];
 c02c1d6:	e9de 1206 	ldrd	r1, r2, [lr, #24]
 c02c1da:	e9cd 1212 	strd	r1, r2, [sp, #72]	; 0x48
    C = ctx->state[2];
 c02c1de:	e9de 1208 	ldrd	r1, r2, [lr, #32]
 c02c1e2:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
    D = ctx->state[3];
 c02c1e6:	e9de 120a 	ldrd	r1, r2, [lr, #40]	; 0x28
 c02c1ea:	e9cd 1216 	strd	r1, r2, [sp, #88]	; 0x58
    E = ctx->state[4];
 c02c1ee:	e9de 120c 	ldrd	r1, r2, [lr, #48]	; 0x30
 c02c1f2:	e9cd 1218 	strd	r1, r2, [sp, #96]	; 0x60
    F = ctx->state[5];
 c02c1f6:	e9de 120e 	ldrd	r1, r2, [lr, #56]	; 0x38
 c02c1fa:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
    G = ctx->state[6];
 c02c1fe:	e9de 1210 	ldrd	r1, r2, [lr, #64]	; 0x40
 c02c202:	e9cd 121c 	strd	r1, r2, [sp, #112]	; 0x70
    H = ctx->state[7];
 c02c206:	e9de 1212 	ldrd	r1, r2, [lr, #72]	; 0x48
 c02c20a:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78
 c02c20e:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 c02c212:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    G = ctx->state[6];
 c02c216:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 c02c21a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    F = ctx->state[5];
 c02c21e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 c02c222:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    E = ctx->state[4];
 c02c226:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 c02c22a:	e9cd 0108 	strd	r0, r1, [sp, #32]
    D = ctx->state[3];
 c02c22e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 c02c232:	e9cd 0106 	strd	r0, r1, [sp, #24]
    C = ctx->state[2];
 c02c236:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 c02c23a:	e9cd 0104 	strd	r0, r1, [sp, #16]
    B = ctx->state[1];
 c02c23e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 c02c242:	e9cd 0102 	strd	r0, r1, [sp, #8]
    A = ctx->state[0];
 c02c246:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 c02c24a:	e9cd 0100 	strd	r0, r1, [sp]
 c02c24e:	4a02      	ldr	r2, [pc, #8]	; (c02c258 <mbedtls_internal_sha512_process+0x1f0>)
 c02c250:	f503 7c20 	add.w	ip, r3, #640	; 0x280
 c02c254:	e002      	b.n	c02c25c <mbedtls_internal_sha512_process+0x1f4>
 c02c256:	bf00      	nop
 c02c258:	0c035088 	.word	0x0c035088
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 c02c25c:	9908      	ldr	r1, [sp, #32]
 c02c25e:	9809      	ldr	r0, [sp, #36]	; 0x24
 c02c260:	0b89      	lsrs	r1, r1, #14
 c02c262:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 c02c266:	9120      	str	r1, [sp, #128]	; 0x80
 c02c268:	0b81      	lsrs	r1, r0, #14
 c02c26a:	9808      	ldr	r0, [sp, #32]
 c02c26c:	e9d3 4500 	ldrd	r4, r5, [r3]
 c02c270:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 c02c274:	9121      	str	r1, [sp, #132]	; 0x84
 c02c276:	0c81      	lsrs	r1, r0, #18
 c02c278:	9809      	ldr	r0, [sp, #36]	; 0x24
 c02c27a:	e9dd 6720 	ldrd	r6, r7, [sp, #128]	; 0x80
 c02c27e:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 c02c282:	9122      	str	r1, [sp, #136]	; 0x88
 c02c284:	0c81      	lsrs	r1, r0, #18
 c02c286:	9808      	ldr	r0, [sp, #32]
 c02c288:	3340      	adds	r3, #64	; 0x40
 c02c28a:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 c02c28e:	9123      	str	r1, [sp, #140]	; 0x8c
 c02c290:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 c02c294:	404f      	eors	r7, r1
 c02c296:	9909      	ldr	r1, [sp, #36]	; 0x24
 c02c298:	4046      	eors	r6, r0
 c02c29a:	9808      	ldr	r0, [sp, #32]
 c02c29c:	05c9      	lsls	r1, r1, #23
 c02c29e:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 c02c2a2:	9125      	str	r1, [sp, #148]	; 0x94
 c02c2a4:	05c1      	lsls	r1, r0, #23
 c02c2a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 c02c2a8:	3240      	adds	r2, #64	; 0x40
 c02c2aa:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 c02c2ae:	9124      	str	r1, [sp, #144]	; 0x90
 c02c2b0:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 c02c2b4:	4070      	eors	r0, r6
 c02c2b6:	4079      	eors	r1, r7
 c02c2b8:	4606      	mov	r6, r0
 c02c2ba:	460f      	mov	r7, r1
 c02c2bc:	e952 0110 	ldrd	r0, r1, [r2, #-64]	; 0x40
 c02c2c0:	eb10 0804 	adds.w	r8, r0, r4
 c02c2c4:	eb41 0905 	adc.w	r9, r1, r5
 c02c2c8:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 c02c2cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 c02c2d0:	4060      	eors	r0, r4
 c02c2d2:	4069      	eors	r1, r5
 c02c2d4:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 c02c2d8:	4004      	ands	r4, r0
 c02c2da:	4620      	mov	r0, r4
 c02c2dc:	400d      	ands	r5, r1
 c02c2de:	4629      	mov	r1, r5
 c02c2e0:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 c02c2e4:	eb16 0a08 	adds.w	sl, r6, r8
 c02c2e8:	ea84 0400 	eor.w	r4, r4, r0
 c02c2ec:	eb47 0b09 	adc.w	fp, r7, r9
 c02c2f0:	404d      	eors	r5, r1
 c02c2f2:	eb1a 0604 	adds.w	r6, sl, r4
 c02c2f6:	eb4b 0705 	adc.w	r7, fp, r5
 c02c2fa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 c02c2fe:	1980      	adds	r0, r0, r6
 c02c300:	4606      	mov	r6, r0
 c02c302:	4179      	adcs	r1, r7
 c02c304:	460f      	mov	r7, r1
 c02c306:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 c02c30a:	1980      	adds	r0, r0, r6
 c02c30c:	4179      	adcs	r1, r7
 c02c30e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 c02c312:	9900      	ldr	r1, [sp, #0]
 c02c314:	9801      	ldr	r0, [sp, #4]
 c02c316:	0f09      	lsrs	r1, r1, #28
 c02c318:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02c31c:	9126      	str	r1, [sp, #152]	; 0x98
 c02c31e:	0f01      	lsrs	r1, r0, #28
 c02c320:	9800      	ldr	r0, [sp, #0]
 c02c322:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02c326:	9127      	str	r1, [sp, #156]	; 0x9c
 c02c328:	9901      	ldr	r1, [sp, #4]
 c02c32a:	0789      	lsls	r1, r1, #30
 c02c32c:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02c330:	9129      	str	r1, [sp, #164]	; 0xa4
 c02c332:	0781      	lsls	r1, r0, #30
 c02c334:	9801      	ldr	r0, [sp, #4]
 c02c336:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 c02c33a:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02c33e:	9128      	str	r1, [sp, #160]	; 0xa0
 c02c340:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
 c02c344:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 c02c348:	4060      	eors	r0, r4
 c02c34a:	9c01      	ldr	r4, [sp, #4]
 c02c34c:	4069      	eors	r1, r5
 c02c34e:	9d00      	ldr	r5, [sp, #0]
 c02c350:	0664      	lsls	r4, r4, #25
 c02c352:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02c356:	942b      	str	r4, [sp, #172]	; 0xac
 c02c358:	066c      	lsls	r4, r5, #25
 c02c35a:	9d01      	ldr	r5, [sp, #4]
 c02c35c:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 c02c360:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02c364:	942a      	str	r4, [sp, #168]	; 0xa8
 c02c366:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 c02c36a:	4044      	eors	r4, r0
 c02c36c:	4620      	mov	r0, r4
 c02c36e:	404d      	eors	r5, r1
 c02c370:	4629      	mov	r1, r5
 c02c372:	e9dd 4500 	ldrd	r4, r5, [sp]
 c02c376:	ea48 0804 	orr.w	r8, r8, r4
 c02c37a:	ea49 0905 	orr.w	r9, r9, r5
 c02c37e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 c02c382:	ea04 0408 	and.w	r4, r4, r8
 c02c386:	ea05 0509 	and.w	r5, r5, r9
 c02c38a:	e9dd 8900 	ldrd	r8, r9, [sp]
 c02c38e:	ea0a 0a08 	and.w	sl, sl, r8
 c02c392:	ea4a 0804 	orr.w	r8, sl, r4
 c02c396:	ea0b 0b09 	and.w	fp, fp, r9
 c02c39a:	eb18 0400 	adds.w	r4, r8, r0
 c02c39e:	ea4b 0905 	orr.w	r9, fp, r5
 c02c3a2:	eb49 0501 	adc.w	r5, r9, r1
 c02c3a6:	19a0      	adds	r0, r4, r6
 c02c3a8:	eb45 0107 	adc.w	r1, r5, r7
 c02c3ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 c02c3b0:	e953 450e 	ldrd	r4, r5, [r3, #-56]	; 0x38
 c02c3b4:	e952 010e 	ldrd	r0, r1, [r2, #-56]	; 0x38
 c02c3b8:	1826      	adds	r6, r4, r0
 c02c3ba:	eb45 0701 	adc.w	r7, r5, r1
 c02c3be:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 c02c3c2:	19a4      	adds	r4, r4, r6
 c02c3c4:	417d      	adcs	r5, r7
 c02c3c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 c02c3ca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 c02c3ce:	4070      	eors	r0, r6
 c02c3d0:	4079      	eors	r1, r7
 c02c3d2:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 c02c3d6:	4006      	ands	r6, r0
 c02c3d8:	4630      	mov	r0, r6
 c02c3da:	400f      	ands	r7, r1
 c02c3dc:	4639      	mov	r1, r7
 c02c3de:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 c02c3e2:	4046      	eors	r6, r0
 c02c3e4:	1930      	adds	r0, r6, r4
 c02c3e6:	ea87 0701 	eor.w	r7, r7, r1
 c02c3ea:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 c02c3ec:	eb47 0105 	adc.w	r1, r7, r5
 c02c3f0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 c02c3f2:	0ba4      	lsrs	r4, r4, #14
 c02c3f4:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 c02c3f8:	942c      	str	r4, [sp, #176]	; 0xb0
 c02c3fa:	0bac      	lsrs	r4, r5, #14
 c02c3fc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 c02c3fe:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 c02c402:	942d      	str	r4, [sp, #180]	; 0xb4
 c02c404:	0cac      	lsrs	r4, r5, #18
 c02c406:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 c02c408:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 c02c40c:	942e      	str	r4, [sp, #184]	; 0xb8
 c02c40e:	0cac      	lsrs	r4, r5, #18
 c02c410:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 c02c412:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 c02c416:	942f      	str	r4, [sp, #188]	; 0xbc
 c02c418:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
 c02c41c:	e9dd 672e 	ldrd	r6, r7, [sp, #184]	; 0xb8
 c02c420:	4074      	eors	r4, r6
 c02c422:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 c02c424:	407d      	eors	r5, r7
 c02c426:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 c02c428:	05f6      	lsls	r6, r6, #23
 c02c42a:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 c02c42e:	9631      	str	r6, [sp, #196]	; 0xc4
 c02c430:	05fe      	lsls	r6, r7, #23
 c02c432:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 c02c434:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 c02c438:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 c02c43c:	9630      	str	r6, [sp, #192]	; 0xc0
 c02c43e:	e9dd 6730 	ldrd	r6, r7, [sp, #192]	; 0xc0
 c02c442:	4066      	eors	r6, r4
 c02c444:	1986      	adds	r6, r0, r6
 c02c446:	ea87 0705 	eor.w	r7, r7, r5
 c02c44a:	eb41 0707 	adc.w	r7, r1, r7
 c02c44e:	9906      	ldr	r1, [sp, #24]
 c02c450:	9807      	ldr	r0, [sp, #28]
 c02c452:	0f09      	lsrs	r1, r1, #28
 c02c454:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02c458:	9132      	str	r1, [sp, #200]	; 0xc8
 c02c45a:	0f01      	lsrs	r1, r0, #28
 c02c45c:	9806      	ldr	r0, [sp, #24]
 c02c45e:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 c02c462:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02c466:	9133      	str	r1, [sp, #204]	; 0xcc
 c02c468:	9907      	ldr	r1, [sp, #28]
 c02c46a:	eb18 0806 	adds.w	r8, r8, r6
 c02c46e:	ea4f 7181 	mov.w	r1, r1, lsl #30
 c02c472:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02c476:	9135      	str	r1, [sp, #212]	; 0xd4
 c02c478:	ea4f 7180 	mov.w	r1, r0, lsl #30
 c02c47c:	9807      	ldr	r0, [sp, #28]
 c02c47e:	eb49 0907 	adc.w	r9, r9, r7
 c02c482:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02c486:	9134      	str	r1, [sp, #208]	; 0xd0
 c02c488:	e9dd 4534 	ldrd	r4, r5, [sp, #208]	; 0xd0
 c02c48c:	e9dd 0132 	ldrd	r0, r1, [sp, #200]	; 0xc8
 c02c490:	4060      	eors	r0, r4
 c02c492:	9c07      	ldr	r4, [sp, #28]
 c02c494:	4069      	eors	r1, r5
 c02c496:	9d06      	ldr	r5, [sp, #24]
 c02c498:	0664      	lsls	r4, r4, #25
 c02c49a:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02c49e:	9437      	str	r4, [sp, #220]	; 0xdc
 c02c4a0:	066c      	lsls	r4, r5, #25
 c02c4a2:	9d07      	ldr	r5, [sp, #28]
 c02c4a4:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02c4a8:	9436      	str	r4, [sp, #216]	; 0xd8
 c02c4aa:	e9dd 4536 	ldrd	r4, r5, [sp, #216]	; 0xd8
 c02c4ae:	4044      	eors	r4, r0
 c02c4b0:	404d      	eors	r5, r1
 c02c4b2:	e9cd 4504 	strd	r4, r5, [sp, #16]
 c02c4b6:	e9dd 4500 	ldrd	r4, r5, [sp]
 c02c4ba:	ea44 040a 	orr.w	r4, r4, sl
 c02c4be:	ea45 050b 	orr.w	r5, r5, fp
 c02c4c2:	4620      	mov	r0, r4
 c02c4c4:	e9dd ab00 	ldrd	sl, fp, [sp]
 c02c4c8:	4629      	mov	r1, r5
 c02c4ca:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 c02c4ce:	4004      	ands	r4, r0
 c02c4d0:	400d      	ands	r5, r1
 c02c4d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 c02c4d6:	ea0a 0a00 	and.w	sl, sl, r0
 c02c4da:	ea4a 0a04 	orr.w	sl, sl, r4
 c02c4de:	ea0b 0b01 	and.w	fp, fp, r1
 c02c4e2:	ea4b 0b05 	orr.w	fp, fp, r5
 c02c4e6:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 c02c4ea:	eb14 040a 	adds.w	r4, r4, sl
 c02c4ee:	eb45 050b 	adc.w	r5, r5, fp
 c02c4f2:	19a0      	adds	r0, r4, r6
 c02c4f4:	eb45 0107 	adc.w	r1, r5, r7
 c02c4f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 c02c4fc:	e953 450c 	ldrd	r4, r5, [r3, #-48]	; 0x30
 c02c500:	e952 010c 	ldrd	r0, r1, [r2, #-48]	; 0x30
 c02c504:	1826      	adds	r6, r4, r0
 c02c506:	eb45 0701 	adc.w	r7, r5, r1
 c02c50a:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 c02c50e:	19a4      	adds	r4, r4, r6
 c02c510:	417d      	adcs	r5, r7
 c02c512:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 c02c516:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 c02c51a:	4070      	eors	r0, r6
 c02c51c:	ea00 0008 	and.w	r0, r0, r8
 c02c520:	4079      	eors	r1, r7
 c02c522:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 c02c526:	4046      	eors	r6, r0
 c02c528:	1930      	adds	r0, r6, r4
 c02c52a:	ea4f 3498 	mov.w	r4, r8, lsr #14
 c02c52e:	ea44 4489 	orr.w	r4, r4, r9, lsl #18
 c02c532:	9438      	str	r4, [sp, #224]	; 0xe0
 c02c534:	ea4f 3499 	mov.w	r4, r9, lsr #14
 c02c538:	ea44 4488 	orr.w	r4, r4, r8, lsl #18
 c02c53c:	9439      	str	r4, [sp, #228]	; 0xe4
 c02c53e:	ea4f 4498 	mov.w	r4, r8, lsr #18
 c02c542:	ea44 3489 	orr.w	r4, r4, r9, lsl #14
 c02c546:	943a      	str	r4, [sp, #232]	; 0xe8
 c02c548:	ea4f 4499 	mov.w	r4, r9, lsr #18
 c02c54c:	ea01 0109 	and.w	r1, r1, r9
 c02c550:	ea44 3488 	orr.w	r4, r4, r8, lsl #14
 c02c554:	943b      	str	r4, [sp, #236]	; 0xec
 c02c556:	ea87 0701 	eor.w	r7, r7, r1
 c02c55a:	eb47 0105 	adc.w	r1, r7, r5
 c02c55e:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 c02c562:	e9dd 4538 	ldrd	r4, r5, [sp, #224]	; 0xe0
 c02c566:	4074      	eors	r4, r6
 c02c568:	ea4f 56c9 	mov.w	r6, r9, lsl #23
 c02c56c:	ea46 2658 	orr.w	r6, r6, r8, lsr #9
 c02c570:	963d      	str	r6, [sp, #244]	; 0xf4
 c02c572:	ea4f 56c8 	mov.w	r6, r8, lsl #23
 c02c576:	ea46 2659 	orr.w	r6, r6, r9, lsr #9
 c02c57a:	963c      	str	r6, [sp, #240]	; 0xf0
 c02c57c:	407d      	eors	r5, r7
 c02c57e:	e9dd 673c 	ldrd	r6, r7, [sp, #240]	; 0xf0
 c02c582:	4066      	eors	r6, r4
 c02c584:	1986      	adds	r6, r0, r6
 c02c586:	ea87 0705 	eor.w	r7, r7, r5
 c02c58a:	eb41 0707 	adc.w	r7, r1, r7
 c02c58e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c02c592:	1980      	adds	r0, r0, r6
 c02c594:	4179      	adcs	r1, r7
 c02c596:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 c02c59a:	9904      	ldr	r1, [sp, #16]
 c02c59c:	9805      	ldr	r0, [sp, #20]
 c02c59e:	0f09      	lsrs	r1, r1, #28
 c02c5a0:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02c5a4:	913e      	str	r1, [sp, #248]	; 0xf8
 c02c5a6:	0f01      	lsrs	r1, r0, #28
 c02c5a8:	9804      	ldr	r0, [sp, #16]
 c02c5aa:	ac40      	add	r4, sp, #256	; 0x100
 c02c5ac:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02c5b0:	913f      	str	r1, [sp, #252]	; 0xfc
 c02c5b2:	9905      	ldr	r1, [sp, #20]
 c02c5b4:	0789      	lsls	r1, r1, #30
 c02c5b6:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02c5ba:	9141      	str	r1, [sp, #260]	; 0x104
 c02c5bc:	0781      	lsls	r1, r0, #30
 c02c5be:	9805      	ldr	r0, [sp, #20]
 c02c5c0:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02c5c4:	9140      	str	r1, [sp, #256]	; 0x100
 c02c5c6:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02c5ca:	e9dd 013e 	ldrd	r0, r1, [sp, #248]	; 0xf8
 c02c5ce:	4060      	eors	r0, r4
 c02c5d0:	9c05      	ldr	r4, [sp, #20]
 c02c5d2:	4069      	eors	r1, r5
 c02c5d4:	9d04      	ldr	r5, [sp, #16]
 c02c5d6:	0664      	lsls	r4, r4, #25
 c02c5d8:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02c5dc:	9443      	str	r4, [sp, #268]	; 0x10c
 c02c5de:	066c      	lsls	r4, r5, #25
 c02c5e0:	9d05      	ldr	r5, [sp, #20]
 c02c5e2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 c02c5e6:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02c5ea:	9442      	str	r4, [sp, #264]	; 0x108
 c02c5ec:	ac42      	add	r4, sp, #264	; 0x108
 c02c5ee:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02c5f2:	4044      	eors	r4, r0
 c02c5f4:	404d      	eors	r5, r1
 c02c5f6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 c02c5fa:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 c02c5fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 c02c602:	ea44 040a 	orr.w	r4, r4, sl
 c02c606:	ea45 050b 	orr.w	r5, r5, fp
 c02c60a:	e9dd ab00 	ldrd	sl, fp, [sp]
 c02c60e:	ea0a 0a04 	and.w	sl, sl, r4
 c02c612:	4654      	mov	r4, sl
 c02c614:	ea0b 0b05 	and.w	fp, fp, r5
 c02c618:	465d      	mov	r5, fp
 c02c61a:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 c02c61e:	ea0a 0a00 	and.w	sl, sl, r0
 c02c622:	ea4a 0a04 	orr.w	sl, sl, r4
 c02c626:	ea0b 0b01 	and.w	fp, fp, r1
 c02c62a:	ea4b 0b05 	orr.w	fp, fp, r5
 c02c62e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 c02c632:	eb14 040a 	adds.w	r4, r4, sl
 c02c636:	eb45 050b 	adc.w	r5, r5, fp
 c02c63a:	19a0      	adds	r0, r4, r6
 c02c63c:	eb45 0107 	adc.w	r1, r5, r7
 c02c640:	e9cd 0102 	strd	r0, r1, [sp, #8]
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 c02c644:	e953 450a 	ldrd	r4, r5, [r3, #-40]	; 0x28
 c02c648:	e952 010a 	ldrd	r0, r1, [r2, #-40]	; 0x28
 c02c64c:	1826      	adds	r6, r4, r0
 c02c64e:	eb45 0701 	adc.w	r7, r5, r1
 c02c652:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 c02c656:	ea80 0008 	eor.w	r0, r0, r8
 c02c65a:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 c02c65e:	ea81 0109 	eor.w	r1, r1, r9
 c02c662:	19a4      	adds	r4, r4, r6
 c02c664:	4606      	mov	r6, r0
 c02c666:	417d      	adcs	r5, r7
 c02c668:	460f      	mov	r7, r1
 c02c66a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 c02c66e:	4030      	ands	r0, r6
 c02c670:	4039      	ands	r1, r7
 c02c672:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 c02c676:	4046      	eors	r6, r0
 c02c678:	1930      	adds	r0, r6, r4
 c02c67a:	ea87 0701 	eor.w	r7, r7, r1
 c02c67e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 c02c680:	eb47 0105 	adc.w	r1, r7, r5
 c02c684:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 c02c686:	0ba4      	lsrs	r4, r4, #14
 c02c688:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 c02c68c:	9444      	str	r4, [sp, #272]	; 0x110
 c02c68e:	0bac      	lsrs	r4, r5, #14
 c02c690:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 c02c692:	ae46      	add	r6, sp, #280	; 0x118
 c02c694:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 c02c698:	9445      	str	r4, [sp, #276]	; 0x114
 c02c69a:	0cac      	lsrs	r4, r5, #18
 c02c69c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 c02c69e:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 c02c6a2:	9446      	str	r4, [sp, #280]	; 0x118
 c02c6a4:	0cac      	lsrs	r4, r5, #18
 c02c6a6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 c02c6a8:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 c02c6ac:	9447      	str	r4, [sp, #284]	; 0x11c
 c02c6ae:	ac44      	add	r4, sp, #272	; 0x110
 c02c6b0:	e9d6 6700 	ldrd	r6, r7, [r6]
 c02c6b4:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02c6b8:	4074      	eors	r4, r6
 c02c6ba:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 c02c6bc:	407d      	eors	r5, r7
 c02c6be:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 c02c6c0:	05f6      	lsls	r6, r6, #23
 c02c6c2:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 c02c6c6:	9649      	str	r6, [sp, #292]	; 0x124
 c02c6c8:	05fe      	lsls	r6, r7, #23
 c02c6ca:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 c02c6cc:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 c02c6d0:	9648      	str	r6, [sp, #288]	; 0x120
 c02c6d2:	ae48      	add	r6, sp, #288	; 0x120
 c02c6d4:	e9d6 6700 	ldrd	r6, r7, [r6]
 c02c6d8:	4066      	eors	r6, r4
 c02c6da:	1986      	adds	r6, r0, r6
 c02c6dc:	ea87 0705 	eor.w	r7, r7, r5
 c02c6e0:	eb41 0707 	adc.w	r7, r1, r7
 c02c6e4:	e9cd 6708 	strd	r6, r7, [sp, #32]
 c02c6e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 c02c6ec:	e9dd 6700 	ldrd	r6, r7, [sp]
 c02c6f0:	1836      	adds	r6, r6, r0
 c02c6f2:	414f      	adcs	r7, r1
 c02c6f4:	9902      	ldr	r1, [sp, #8]
 c02c6f6:	9803      	ldr	r0, [sp, #12]
 c02c6f8:	0f09      	lsrs	r1, r1, #28
 c02c6fa:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02c6fe:	914a      	str	r1, [sp, #296]	; 0x128
 c02c700:	0f01      	lsrs	r1, r0, #28
 c02c702:	9802      	ldr	r0, [sp, #8]
 c02c704:	ac4c      	add	r4, sp, #304	; 0x130
 c02c706:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02c70a:	914b      	str	r1, [sp, #300]	; 0x12c
 c02c70c:	9903      	ldr	r1, [sp, #12]
 c02c70e:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 c02c712:	0789      	lsls	r1, r1, #30
 c02c714:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02c718:	914d      	str	r1, [sp, #308]	; 0x134
 c02c71a:	0781      	lsls	r1, r0, #30
 c02c71c:	9803      	ldr	r0, [sp, #12]
 c02c71e:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02c722:	914c      	str	r1, [sp, #304]	; 0x130
 c02c724:	a94a      	add	r1, sp, #296	; 0x128
 c02c726:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02c72a:	e9d1 0100 	ldrd	r0, r1, [r1]
 c02c72e:	4060      	eors	r0, r4
 c02c730:	9c03      	ldr	r4, [sp, #12]
 c02c732:	4069      	eors	r1, r5
 c02c734:	9d02      	ldr	r5, [sp, #8]
 c02c736:	0664      	lsls	r4, r4, #25
 c02c738:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02c73c:	944f      	str	r4, [sp, #316]	; 0x13c
 c02c73e:	066c      	lsls	r4, r5, #25
 c02c740:	9d03      	ldr	r5, [sp, #12]
 c02c742:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02c746:	944e      	str	r4, [sp, #312]	; 0x138
 c02c748:	ac4e      	add	r4, sp, #312	; 0x138
 c02c74a:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02c74e:	4044      	eors	r4, r0
 c02c750:	404d      	eors	r5, r1
 c02c752:	e9cd 4500 	strd	r4, r5, [sp]
 c02c756:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 c02c75a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c02c75e:	ea44 040a 	orr.w	r4, r4, sl
 c02c762:	ea45 050b 	orr.w	r5, r5, fp
 c02c766:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 c02c76a:	ea0a 0a04 	and.w	sl, sl, r4
 c02c76e:	4654      	mov	r4, sl
 c02c770:	ea0b 0b05 	and.w	fp, fp, r5
 c02c774:	465d      	mov	r5, fp
 c02c776:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 c02c77a:	ea0a 0a00 	and.w	sl, sl, r0
 c02c77e:	ea4a 0a04 	orr.w	sl, sl, r4
 c02c782:	ea0b 0b01 	and.w	fp, fp, r1
 c02c786:	ea4b 0b05 	orr.w	fp, fp, r5
 c02c78a:	e9dd 4500 	ldrd	r4, r5, [sp]
 c02c78e:	eb14 040a 	adds.w	r4, r4, sl
 c02c792:	eb45 050b 	adc.w	r5, r5, fp
 c02c796:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 c02c79a:	1900      	adds	r0, r0, r4
 c02c79c:	4169      	adcs	r1, r5
 c02c79e:	e9cd 0100 	strd	r0, r1, [sp]
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
 c02c7a2:	e953 4508 	ldrd	r4, r5, [r3, #-32]
 c02c7a6:	e952 0108 	ldrd	r0, r1, [r2, #-32]
 c02c7aa:	eb10 0a04 	adds.w	sl, r0, r4
 c02c7ae:	eb41 0b05 	adc.w	fp, r1, r5
 c02c7b2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 c02c7b6:	eb10 000a 	adds.w	r0, r0, sl
 c02c7ba:	eb41 010b 	adc.w	r1, r1, fp
 c02c7be:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 c02c7c2:	ea8a 0a08 	eor.w	sl, sl, r8
 c02c7c6:	ea8b 0b09 	eor.w	fp, fp, r9
 c02c7ca:	ea0a 0406 	and.w	r4, sl, r6
 c02c7ce:	ea0b 0507 	and.w	r5, fp, r7
 c02c7d2:	ea84 0a08 	eor.w	sl, r4, r8
 c02c7d6:	eb1a 0400 	adds.w	r4, sl, r0
 c02c7da:	ea85 0b09 	eor.w	fp, r5, r9
 c02c7de:	eb4b 0501 	adc.w	r5, fp, r1
 c02c7e2:	0bb1      	lsrs	r1, r6, #14
 c02c7e4:	ea41 4187 	orr.w	r1, r1, r7, lsl #18
 c02c7e8:	9150      	str	r1, [sp, #320]	; 0x140
 c02c7ea:	0bb9      	lsrs	r1, r7, #14
 c02c7ec:	ea41 4186 	orr.w	r1, r1, r6, lsl #18
 c02c7f0:	9151      	str	r1, [sp, #324]	; 0x144
 c02c7f2:	0cb1      	lsrs	r1, r6, #18
 c02c7f4:	ea41 3187 	orr.w	r1, r1, r7, lsl #14
 c02c7f8:	9152      	str	r1, [sp, #328]	; 0x148
 c02c7fa:	0cb9      	lsrs	r1, r7, #18
 c02c7fc:	ea41 3186 	orr.w	r1, r1, r6, lsl #14
 c02c800:	9153      	str	r1, [sp, #332]	; 0x14c
 c02c802:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 c02c806:	a950      	add	r1, sp, #320	; 0x140
 c02c808:	e9da ab00 	ldrd	sl, fp, [sl]
 c02c80c:	e9d1 0100 	ldrd	r0, r1, [r1]
 c02c810:	ea80 000a 	eor.w	r0, r0, sl
 c02c814:	4682      	mov	sl, r0
 c02c816:	ea81 010b 	eor.w	r1, r1, fp
 c02c81a:	468b      	mov	fp, r1
 c02c81c:	05f9      	lsls	r1, r7, #23
 c02c81e:	ea41 2156 	orr.w	r1, r1, r6, lsr #9
 c02c822:	9155      	str	r1, [sp, #340]	; 0x154
 c02c824:	05f1      	lsls	r1, r6, #23
 c02c826:	ea41 2157 	orr.w	r1, r1, r7, lsr #9
 c02c82a:	9154      	str	r1, [sp, #336]	; 0x150
 c02c82c:	a954      	add	r1, sp, #336	; 0x150
 c02c82e:	e9d1 0100 	ldrd	r0, r1, [r1]
 c02c832:	ea80 000a 	eor.w	r0, r0, sl
 c02c836:	eb14 0a00 	adds.w	sl, r4, r0
 c02c83a:	ea81 010b 	eor.w	r1, r1, fp
 c02c83e:	eb45 0b01 	adc.w	fp, r5, r1
 c02c842:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 c02c846:	eb10 000a 	adds.w	r0, r0, sl
 c02c84a:	eb41 010b 	adc.w	r1, r1, fp
 c02c84e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 c02c852:	9900      	ldr	r1, [sp, #0]
 c02c854:	9801      	ldr	r0, [sp, #4]
 c02c856:	0f09      	lsrs	r1, r1, #28
 c02c858:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02c85c:	9156      	str	r1, [sp, #344]	; 0x158
 c02c85e:	0f01      	lsrs	r1, r0, #28
 c02c860:	9800      	ldr	r0, [sp, #0]
 c02c862:	ac58      	add	r4, sp, #352	; 0x160
 c02c864:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02c868:	9157      	str	r1, [sp, #348]	; 0x15c
 c02c86a:	9901      	ldr	r1, [sp, #4]
 c02c86c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 c02c870:	0789      	lsls	r1, r1, #30
 c02c872:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02c876:	9159      	str	r1, [sp, #356]	; 0x164
 c02c878:	0781      	lsls	r1, r0, #30
 c02c87a:	9801      	ldr	r0, [sp, #4]
 c02c87c:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02c880:	9158      	str	r1, [sp, #352]	; 0x160
 c02c882:	a956      	add	r1, sp, #344	; 0x158
 c02c884:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02c888:	e9d1 0100 	ldrd	r0, r1, [r1]
 c02c88c:	4060      	eors	r0, r4
 c02c88e:	9c01      	ldr	r4, [sp, #4]
 c02c890:	4069      	eors	r1, r5
 c02c892:	9d00      	ldr	r5, [sp, #0]
 c02c894:	0664      	lsls	r4, r4, #25
 c02c896:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02c89a:	945b      	str	r4, [sp, #364]	; 0x16c
 c02c89c:	066c      	lsls	r4, r5, #25
 c02c89e:	9d01      	ldr	r5, [sp, #4]
 c02c8a0:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02c8a4:	945a      	str	r4, [sp, #360]	; 0x168
 c02c8a6:	ac5a      	add	r4, sp, #360	; 0x168
 c02c8a8:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02c8ac:	4044      	eors	r4, r0
 c02c8ae:	404d      	eors	r5, r1
 c02c8b0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 c02c8b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 c02c8b8:	e9dd ab00 	ldrd	sl, fp, [sp]
 c02c8bc:	ea44 040a 	orr.w	r4, r4, sl
 c02c8c0:	ea45 050b 	orr.w	r5, r5, fp
 c02c8c4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 c02c8c8:	ea0a 0a04 	and.w	sl, sl, r4
 c02c8cc:	4654      	mov	r4, sl
 c02c8ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 c02c8d2:	ea0b 0b05 	and.w	fp, fp, r5
 c02c8d6:	465d      	mov	r5, fp
 c02c8d8:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 c02c8dc:	ea0a 0a00 	and.w	sl, sl, r0
 c02c8e0:	ea4a 0a04 	orr.w	sl, sl, r4
 c02c8e4:	ea0b 0b01 	and.w	fp, fp, r1
 c02c8e8:	ea4b 0b05 	orr.w	fp, fp, r5
 c02c8ec:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 c02c8f0:	eb14 040a 	adds.w	r4, r4, sl
 c02c8f4:	eb45 050b 	adc.w	r5, r5, fp
 c02c8f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 c02c8fc:	1900      	adds	r0, r0, r4
 c02c8fe:	4169      	adcs	r1, r5
 c02c900:	e9cd 0106 	strd	r0, r1, [sp, #24]
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
 c02c904:	e953 4506 	ldrd	r4, r5, [r3, #-24]
 c02c908:	e952 0106 	ldrd	r0, r1, [r2, #-24]
 c02c90c:	eb10 0a04 	adds.w	sl, r0, r4
 c02c910:	eb41 0b05 	adc.w	fp, r1, r5
 c02c914:	eb1a 0008 	adds.w	r0, sl, r8
 c02c918:	eb4b 0109 	adc.w	r1, fp, r9
 c02c91c:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 c02c920:	ea88 0806 	eor.w	r8, r8, r6
 c02c924:	ea89 0907 	eor.w	r9, r9, r7
 c02c928:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 c02c92c:	ea04 0408 	and.w	r4, r4, r8
 c02c930:	46a0      	mov	r8, r4
 c02c932:	ea05 0509 	and.w	r5, r5, r9
 c02c936:	46a9      	mov	r9, r5
 c02c938:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 c02c93c:	ea84 0408 	eor.w	r4, r4, r8
 c02c940:	eb14 0800 	adds.w	r8, r4, r0
 c02c944:	ea85 0509 	eor.w	r5, r5, r9
 c02c948:	eb45 0901 	adc.w	r9, r5, r1
 c02c94c:	990e      	ldr	r1, [sp, #56]	; 0x38
 c02c94e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 c02c950:	0b89      	lsrs	r1, r1, #14
 c02c952:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 c02c956:	915c      	str	r1, [sp, #368]	; 0x170
 c02c958:	0b81      	lsrs	r1, r0, #14
 c02c95a:	980e      	ldr	r0, [sp, #56]	; 0x38
 c02c95c:	ac5e      	add	r4, sp, #376	; 0x178
 c02c95e:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 c02c962:	915d      	str	r1, [sp, #372]	; 0x174
 c02c964:	0c81      	lsrs	r1, r0, #18
 c02c966:	980f      	ldr	r0, [sp, #60]	; 0x3c
 c02c968:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 c02c96c:	915e      	str	r1, [sp, #376]	; 0x178
 c02c96e:	0c81      	lsrs	r1, r0, #18
 c02c970:	980e      	ldr	r0, [sp, #56]	; 0x38
 c02c972:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 c02c976:	915f      	str	r1, [sp, #380]	; 0x17c
 c02c978:	a95c      	add	r1, sp, #368	; 0x170
 c02c97a:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02c97e:	e9d1 0100 	ldrd	r0, r1, [r1]
 c02c982:	4060      	eors	r0, r4
 c02c984:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 c02c986:	4069      	eors	r1, r5
 c02c988:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 c02c98a:	05e4      	lsls	r4, r4, #23
 c02c98c:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 c02c990:	9461      	str	r4, [sp, #388]	; 0x184
 c02c992:	05ec      	lsls	r4, r5, #23
 c02c994:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 c02c996:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 c02c99a:	9460      	str	r4, [sp, #384]	; 0x180
 c02c99c:	ac60      	add	r4, sp, #384	; 0x180
 c02c99e:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02c9a2:	4044      	eors	r4, r0
 c02c9a4:	eb18 0404 	adds.w	r4, r8, r4
 c02c9a8:	ea85 0501 	eor.w	r5, r5, r1
 c02c9ac:	eb49 0505 	adc.w	r5, r9, r5
 c02c9b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 c02c9b4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 c02c9b8:	1824      	adds	r4, r4, r0
 c02c9ba:	414d      	adcs	r5, r1
 c02c9bc:	4620      	mov	r0, r4
 c02c9be:	4629      	mov	r1, r5
 c02c9c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 c02c9c4:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 c02c9c8:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 c02c9cc:	9906      	ldr	r1, [sp, #24]
 c02c9ce:	9807      	ldr	r0, [sp, #28]
 c02c9d0:	0f09      	lsrs	r1, r1, #28
 c02c9d2:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02c9d6:	9162      	str	r1, [sp, #392]	; 0x188
 c02c9d8:	0f01      	lsrs	r1, r0, #28
 c02c9da:	9806      	ldr	r0, [sp, #24]
 c02c9dc:	ac64      	add	r4, sp, #400	; 0x190
 c02c9de:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02c9e2:	9163      	str	r1, [sp, #396]	; 0x18c
 c02c9e4:	9907      	ldr	r1, [sp, #28]
 c02c9e6:	0789      	lsls	r1, r1, #30
 c02c9e8:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02c9ec:	9165      	str	r1, [sp, #404]	; 0x194
 c02c9ee:	0781      	lsls	r1, r0, #30
 c02c9f0:	9807      	ldr	r0, [sp, #28]
 c02c9f2:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02c9f6:	9164      	str	r1, [sp, #400]	; 0x190
 c02c9f8:	a962      	add	r1, sp, #392	; 0x188
 c02c9fa:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02c9fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 c02ca02:	4060      	eors	r0, r4
 c02ca04:	9c07      	ldr	r4, [sp, #28]
 c02ca06:	4069      	eors	r1, r5
 c02ca08:	9d06      	ldr	r5, [sp, #24]
 c02ca0a:	0664      	lsls	r4, r4, #25
 c02ca0c:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02ca10:	9467      	str	r4, [sp, #412]	; 0x19c
 c02ca12:	066c      	lsls	r4, r5, #25
 c02ca14:	9d07      	ldr	r5, [sp, #28]
 c02ca16:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02ca1a:	9466      	str	r4, [sp, #408]	; 0x198
 c02ca1c:	ac66      	add	r4, sp, #408	; 0x198
 c02ca1e:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02ca22:	4044      	eors	r4, r0
 c02ca24:	404d      	eors	r5, r1
 c02ca26:	4620      	mov	r0, r4
 c02ca28:	4629      	mov	r1, r5
 c02ca2a:	e9dd 4500 	ldrd	r4, r5, [sp]
 c02ca2e:	ea44 0408 	orr.w	r4, r4, r8
 c02ca32:	ea45 0509 	orr.w	r5, r5, r9
 c02ca36:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 c02ca3a:	ea08 0804 	and.w	r8, r8, r4
 c02ca3e:	4644      	mov	r4, r8
 c02ca40:	ea09 0905 	and.w	r9, r9, r5
 c02ca44:	464d      	mov	r5, r9
 c02ca46:	e9dd 8900 	ldrd	r8, r9, [sp]
 c02ca4a:	ea08 080a 	and.w	r8, r8, sl
 c02ca4e:	ea09 090b 	and.w	r9, r9, fp
 c02ca52:	ea48 0804 	orr.w	r8, r8, r4
 c02ca56:	eb18 0400 	adds.w	r4, r8, r0
 c02ca5a:	ea49 0905 	orr.w	r9, r9, r5
 c02ca5e:	eb49 0501 	adc.w	r5, r9, r1
 c02ca62:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 c02ca66:	1900      	adds	r0, r0, r4
 c02ca68:	4169      	adcs	r1, r5
 c02ca6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
 c02ca6e:	e953 4504 	ldrd	r4, r5, [r3, #-16]
 c02ca72:	e952 0104 	ldrd	r0, r1, [r2, #-16]
 c02ca76:	eb10 0804 	adds.w	r8, r0, r4
 c02ca7a:	eb41 0905 	adc.w	r9, r1, r5
 c02ca7e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 c02ca82:	4070      	eors	r0, r6
 c02ca84:	4079      	eors	r1, r7
 c02ca86:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 c02ca8a:	4004      	ands	r4, r0
 c02ca8c:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 c02ca90:	4074      	eors	r4, r6
 c02ca92:	eb1a 0a08 	adds.w	sl, sl, r8
 c02ca96:	ea05 0501 	and.w	r5, r5, r1
 c02ca9a:	eb4b 0b09 	adc.w	fp, fp, r9
 c02ca9e:	407d      	eors	r5, r7
 c02caa0:	eb14 080a 	adds.w	r8, r4, sl
 c02caa4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 c02caa6:	eb45 090b 	adc.w	r9, r5, fp
 c02caaa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 c02caac:	0ba4      	lsrs	r4, r4, #14
 c02caae:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 c02cab2:	9468      	str	r4, [sp, #416]	; 0x1a0
 c02cab4:	0bac      	lsrs	r4, r5, #14
 c02cab6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 c02cab8:	a968      	add	r1, sp, #416	; 0x1a0
 c02caba:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 c02cabe:	9469      	str	r4, [sp, #420]	; 0x1a4
 c02cac0:	0cac      	lsrs	r4, r5, #18
 c02cac2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 c02cac4:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 c02cac8:	946a      	str	r4, [sp, #424]	; 0x1a8
 c02caca:	0cac      	lsrs	r4, r5, #18
 c02cacc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 c02cace:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 c02cad2:	946b      	str	r4, [sp, #428]	; 0x1ac
 c02cad4:	e9d1 4500 	ldrd	r4, r5, [r1]
 c02cad8:	a96a      	add	r1, sp, #424	; 0x1a8
 c02cada:	e9d1 0100 	ldrd	r0, r1, [r1]
 c02cade:	404d      	eors	r5, r1
 c02cae0:	990d      	ldr	r1, [sp, #52]	; 0x34
 c02cae2:	4044      	eors	r4, r0
 c02cae4:	ea4f 5ac1 	mov.w	sl, r1, lsl #23
 c02cae8:	990c      	ldr	r1, [sp, #48]	; 0x30
 c02caea:	ea4a 2151 	orr.w	r1, sl, r1, lsr #9
 c02caee:	916d      	str	r1, [sp, #436]	; 0x1b4
 c02caf0:	990c      	ldr	r1, [sp, #48]	; 0x30
 c02caf2:	ea4f 5ac1 	mov.w	sl, r1, lsl #23
 c02caf6:	990d      	ldr	r1, [sp, #52]	; 0x34
 c02caf8:	ea4a 2151 	orr.w	r1, sl, r1, lsr #9
 c02cafc:	916c      	str	r1, [sp, #432]	; 0x1b0
 c02cafe:	a96c      	add	r1, sp, #432	; 0x1b0
 c02cb00:	e9d1 0100 	ldrd	r0, r1, [r1]
 c02cb04:	4060      	eors	r0, r4
 c02cb06:	eb18 0a00 	adds.w	sl, r8, r0
 c02cb0a:	ea81 0105 	eor.w	r1, r1, r5
 c02cb0e:	eb49 0b01 	adc.w	fp, r9, r1
 c02cb12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c02cb16:	eb10 000a 	adds.w	r0, r0, sl
 c02cb1a:	eb41 010b 	adc.w	r1, r1, fp
 c02cb1e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 c02cb22:	9904      	ldr	r1, [sp, #16]
 c02cb24:	9805      	ldr	r0, [sp, #20]
 c02cb26:	0f09      	lsrs	r1, r1, #28
 c02cb28:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02cb2c:	916e      	str	r1, [sp, #440]	; 0x1b8
 c02cb2e:	0f01      	lsrs	r1, r0, #28
 c02cb30:	9804      	ldr	r0, [sp, #16]
 c02cb32:	ac70      	add	r4, sp, #448	; 0x1c0
 c02cb34:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02cb38:	916f      	str	r1, [sp, #444]	; 0x1bc
 c02cb3a:	9905      	ldr	r1, [sp, #20]
 c02cb3c:	0789      	lsls	r1, r1, #30
 c02cb3e:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02cb42:	9171      	str	r1, [sp, #452]	; 0x1c4
 c02cb44:	0781      	lsls	r1, r0, #30
 c02cb46:	9805      	ldr	r0, [sp, #20]
 c02cb48:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02cb4c:	9170      	str	r1, [sp, #448]	; 0x1c0
 c02cb4e:	a96e      	add	r1, sp, #440	; 0x1b8
 c02cb50:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02cb54:	e9d1 0100 	ldrd	r0, r1, [r1]
 c02cb58:	4060      	eors	r0, r4
 c02cb5a:	9c05      	ldr	r4, [sp, #20]
 c02cb5c:	4069      	eors	r1, r5
 c02cb5e:	9d04      	ldr	r5, [sp, #16]
 c02cb60:	0664      	lsls	r4, r4, #25
 c02cb62:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02cb66:	9473      	str	r4, [sp, #460]	; 0x1cc
 c02cb68:	066c      	lsls	r4, r5, #25
 c02cb6a:	9d05      	ldr	r5, [sp, #20]
 c02cb6c:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02cb70:	9472      	str	r4, [sp, #456]	; 0x1c8
 c02cb72:	ac72      	add	r4, sp, #456	; 0x1c8
 c02cb74:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02cb78:	4044      	eors	r4, r0
 c02cb7a:	404d      	eors	r5, r1
 c02cb7c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 c02cb80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 c02cb84:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 c02cb88:	4320      	orrs	r0, r4
 c02cb8a:	4329      	orrs	r1, r5
 c02cb8c:	e9dd 8900 	ldrd	r8, r9, [sp]
 c02cb90:	ea08 0800 	and.w	r8, r8, r0
 c02cb94:	ea09 0901 	and.w	r9, r9, r1
 c02cb98:	4644      	mov	r4, r8
 c02cb9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 c02cb9e:	464d      	mov	r5, r9
 c02cba0:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 c02cba4:	ea00 0008 	and.w	r0, r0, r8
 c02cba8:	ea40 0804 	orr.w	r8, r0, r4
 c02cbac:	ea01 0109 	and.w	r1, r1, r9
 c02cbb0:	ea41 0905 	orr.w	r9, r1, r5
 c02cbb4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 c02cbb8:	eb14 0408 	adds.w	r4, r4, r8
 c02cbbc:	eb45 0509 	adc.w	r5, r5, r9
 c02cbc0:	eb1a 0004 	adds.w	r0, sl, r4
 c02cbc4:	eb4b 0105 	adc.w	r1, fp, r5
 c02cbc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 c02cbcc:	e953 4502 	ldrd	r4, r5, [r3, #-8]
 c02cbd0:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 c02cbd4:	eb14 0800 	adds.w	r8, r4, r0
 c02cbd8:	eb45 0901 	adc.w	r9, r5, r1
 c02cbdc:	eb18 0406 	adds.w	r4, r8, r6
 c02cbe0:	eb49 0507 	adc.w	r5, r9, r7
 c02cbe4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 c02cbe8:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 c02cbec:	4070      	eors	r0, r6
 c02cbee:	4079      	eors	r1, r7
 c02cbf0:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 c02cbf4:	4006      	ands	r6, r0
 c02cbf6:	4630      	mov	r0, r6
 c02cbf8:	400f      	ands	r7, r1
 c02cbfa:	4639      	mov	r1, r7
 c02cbfc:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 c02cc00:	4046      	eors	r6, r0
 c02cc02:	1930      	adds	r0, r6, r4
 c02cc04:	ea87 0701 	eor.w	r7, r7, r1
 c02cc08:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 c02cc0a:	eb47 0105 	adc.w	r1, r7, r5
 c02cc0e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 c02cc10:	0ba4      	lsrs	r4, r4, #14
 c02cc12:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 c02cc16:	9474      	str	r4, [sp, #464]	; 0x1d0
 c02cc18:	0bac      	lsrs	r4, r5, #14
 c02cc1a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 c02cc1c:	ae76      	add	r6, sp, #472	; 0x1d8
 c02cc1e:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 c02cc22:	9475      	str	r4, [sp, #468]	; 0x1d4
 c02cc24:	0cac      	lsrs	r4, r5, #18
 c02cc26:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 c02cc28:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 c02cc2c:	9476      	str	r4, [sp, #472]	; 0x1d8
 c02cc2e:	0cac      	lsrs	r4, r5, #18
 c02cc30:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 c02cc32:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 c02cc36:	9477      	str	r4, [sp, #476]	; 0x1dc
 c02cc38:	ac74      	add	r4, sp, #464	; 0x1d0
 c02cc3a:	e9d6 6700 	ldrd	r6, r7, [r6]
 c02cc3e:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02cc42:	4074      	eors	r4, r6
 c02cc44:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 c02cc46:	407d      	eors	r5, r7
 c02cc48:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 c02cc4a:	05f6      	lsls	r6, r6, #23
 c02cc4c:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 c02cc50:	9679      	str	r6, [sp, #484]	; 0x1e4
 c02cc52:	05fe      	lsls	r6, r7, #23
 c02cc54:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 c02cc56:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 c02cc5a:	9678      	str	r6, [sp, #480]	; 0x1e0
 c02cc5c:	ae78      	add	r6, sp, #480	; 0x1e0
 c02cc5e:	e9d6 6700 	ldrd	r6, r7, [r6]
 c02cc62:	4066      	eors	r6, r4
 c02cc64:	1986      	adds	r6, r0, r6
 c02cc66:	ea87 0705 	eor.w	r7, r7, r5
 c02cc6a:	eb41 0707 	adc.w	r7, r1, r7
 c02cc6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 c02cc72:	1980      	adds	r0, r0, r6
 c02cc74:	4179      	adcs	r1, r7
 c02cc76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 c02cc7a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 c02cc7e:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 c02cc82:	9902      	ldr	r1, [sp, #8]
 c02cc84:	9803      	ldr	r0, [sp, #12]
 c02cc86:	0f09      	lsrs	r1, r1, #28
 c02cc88:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02cc8c:	917a      	str	r1, [sp, #488]	; 0x1e8
 c02cc8e:	0f01      	lsrs	r1, r0, #28
 c02cc90:	9802      	ldr	r0, [sp, #8]
 c02cc92:	ac7c      	add	r4, sp, #496	; 0x1f0
 c02cc94:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 c02cc98:	917b      	str	r1, [sp, #492]	; 0x1ec
 c02cc9a:	9903      	ldr	r1, [sp, #12]
 c02cc9c:	0789      	lsls	r1, r1, #30
 c02cc9e:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02cca2:	917d      	str	r1, [sp, #500]	; 0x1f4
 c02cca4:	0781      	lsls	r1, r0, #30
 c02cca6:	9803      	ldr	r0, [sp, #12]
 c02cca8:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 c02ccac:	917c      	str	r1, [sp, #496]	; 0x1f0
 c02ccae:	a97a      	add	r1, sp, #488	; 0x1e8
 c02ccb0:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02ccb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 c02ccb8:	4060      	eors	r0, r4
 c02ccba:	9c03      	ldr	r4, [sp, #12]
 c02ccbc:	4069      	eors	r1, r5
 c02ccbe:	9d02      	ldr	r5, [sp, #8]
 c02ccc0:	0664      	lsls	r4, r4, #25
 c02ccc2:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02ccc6:	947f      	str	r4, [sp, #508]	; 0x1fc
 c02ccc8:	066c      	lsls	r4, r5, #25
 c02ccca:	9d03      	ldr	r5, [sp, #12]
 c02cccc:	ea44 14d5 	orr.w	r4, r4, r5, lsr #7
 c02ccd0:	947e      	str	r4, [sp, #504]	; 0x1f8
 c02ccd2:	ac7e      	add	r4, sp, #504	; 0x1f8
 c02ccd4:	e9d4 4500 	ldrd	r4, r5, [r4]
 c02ccd8:	4044      	eors	r4, r0
 c02ccda:	404d      	eors	r5, r1
 c02ccdc:	4620      	mov	r0, r4
 c02ccde:	4629      	mov	r1, r5
 c02cce0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 c02cce4:	ea44 0408 	orr.w	r4, r4, r8
 c02cce8:	ea45 0509 	orr.w	r5, r5, r9
 c02ccec:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 c02ccf0:	ea08 0804 	and.w	r8, r8, r4
 c02ccf4:	4644      	mov	r4, r8
 c02ccf6:	ea09 0905 	and.w	r9, r9, r5
 c02ccfa:	464d      	mov	r5, r9
 c02ccfc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 c02cd00:	ea08 080a 	and.w	r8, r8, sl
 c02cd04:	ea09 090b 	and.w	r9, r9, fp
 c02cd08:	ea48 0804 	orr.w	r8, r8, r4
 c02cd0c:	eb18 0400 	adds.w	r4, r8, r0
 c02cd10:	ea49 0905 	orr.w	r9, r9, r5
 c02cd14:	eb49 0501 	adc.w	r5, r9, r1
 c02cd18:	19a0      	adds	r0, r4, r6
 c02cd1a:	eb45 0107 	adc.w	r1, r5, r7
    }
    while( i < 80 );
 c02cd1e:	459c      	cmp	ip, r3
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 c02cd20:	e9cd 0100 	strd	r0, r1, [sp]
    while( i < 80 );
 c02cd24:	f47f aa9a 	bne.w	c02c25c <mbedtls_internal_sha512_process+0x1f4>

    ctx->state[0] += A;
 c02cd28:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
    ctx->state[1] += B;
 c02cd2c:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
    ctx->state[2] += C;
 c02cd30:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
    ctx->state[0] += A;
 c02cd34:	1824      	adds	r4, r4, r0
 c02cd36:	414d      	adcs	r5, r1
 c02cd38:	e9ce 4504 	strd	r4, r5, [lr, #16]
    ctx->state[1] += B;
 c02cd3c:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 c02cd40:	eb13 030a 	adds.w	r3, r3, sl
 c02cd44:	eb44 040b 	adc.w	r4, r4, fp
 c02cd48:	469a      	mov	sl, r3
 c02cd4a:	46a3      	mov	fp, r4
    ctx->state[2] += C;
 c02cd4c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 c02cd50:	eb13 0308 	adds.w	r3, r3, r8
 c02cd54:	eb44 0409 	adc.w	r4, r4, r9
 c02cd58:	4698      	mov	r8, r3
    ctx->state[3] += D;
 c02cd5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    ctx->state[2] += C;
 c02cd5e:	46a1      	mov	r9, r4
    ctx->state[3] += D;
 c02cd60:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;

    return( 0 );
}
 c02cd64:	2000      	movs	r0, #0
    ctx->state[3] += D;
 c02cd66:	18a4      	adds	r4, r4, r2
 c02cd68:	415d      	adcs	r5, r3
 c02cd6a:	e9ce 450a 	strd	r4, r5, [lr, #40]	; 0x28
    ctx->state[4] += E;
 c02cd6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 c02cd72:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
 c02cd76:	18a4      	adds	r4, r4, r2
 c02cd78:	415d      	adcs	r5, r3
 c02cd7a:	e9ce 450c 	strd	r4, r5, [lr, #48]	; 0x30
    ctx->state[5] += F;
 c02cd7e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 c02cd82:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 c02cd86:	18a4      	adds	r4, r4, r2
 c02cd88:	415d      	adcs	r5, r3
 c02cd8a:	e9ce 450e 	strd	r4, r5, [lr, #56]	; 0x38
    ctx->state[6] += G;
 c02cd8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 c02cd92:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 c02cd96:	18a4      	adds	r4, r4, r2
 c02cd98:	415d      	adcs	r5, r3
 c02cd9a:	e9ce 4510 	strd	r4, r5, [lr, #64]	; 0x40
    ctx->state[7] += H;
 c02cd9e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 c02cda2:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
 c02cda6:	18a4      	adds	r4, r4, r2
 c02cda8:	415d      	adcs	r5, r3
    ctx->state[1] += B;
 c02cdaa:	e9ce ab06 	strd	sl, fp, [lr, #24]
    ctx->state[2] += C;
 c02cdae:	e9ce 8908 	strd	r8, r9, [lr, #32]
    ctx->state[7] += H;
 c02cdb2:	e9ce 4512 	strd	r4, r5, [lr, #72]	; 0x48
}
 c02cdb6:	f20d 4d84 	addw	sp, sp, #1156	; 0x484
 c02cdba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c02cdbe:	bf00      	nop

0c02cdc0 <mbedtls_sha512_update_ret>:
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 c02cdc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02cdc4:	4605      	mov	r5, r0
 c02cdc6:	460e      	mov	r6, r1
    unsigned int left;

    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 c02cdc8:	4614      	mov	r4, r2
 c02cdca:	b912      	cbnz	r2, c02cdd2 <mbedtls_sha512_update_ret+0x12>
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
 c02cdcc:	2000      	movs	r0, #0
}
 c02cdce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c02cdd2:	2300      	movs	r3, #0
    left = (unsigned int) (ctx->total[0] & 0x7F);
 c02cdd4:	e9d0 ab00 	ldrd	sl, fp, [r0]
 c02cdd8:	eb1a 0002 	adds.w	r0, sl, r2
 c02cddc:	eb5b 0103 	adcs.w	r1, fp, r3
 c02cde0:	f04f 0800 	mov.w	r8, #0
 c02cde4:	f04f 0900 	mov.w	r9, #0
 c02cde8:	bf24      	itt	cs
 c02cdea:	f04f 0801 	movcs.w	r8, #1
 c02cdee:	f04f 0900 	movcs.w	r9, #0
    if( ctx->total[0] < (uint64_t) ilen )
 c02cdf2:	ea58 0309 	orrs.w	r3, r8, r9
    left = (unsigned int) (ctx->total[0] & 0x7F);
 c02cdf6:	f00a 077f 	and.w	r7, sl, #127	; 0x7f
    ctx->total[0] += (uint64_t) ilen;
 c02cdfa:	e9c5 0100 	strd	r0, r1, [r5]
    if( ctx->total[0] < (uint64_t) ilen )
 c02cdfe:	d006      	beq.n	c02ce0e <mbedtls_sha512_update_ret+0x4e>
        ctx->total[1]++;
 c02ce00:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 c02ce04:	1c50      	adds	r0, r2, #1
 c02ce06:	f143 0100 	adc.w	r1, r3, #0
 c02ce0a:	e9c5 0102 	strd	r0, r1, [r5, #8]
    if( left && ilen >= fill )
 c02ce0e:	b1af      	cbz	r7, c02ce3c <mbedtls_sha512_update_ret+0x7c>
    fill = 128 - left;
 c02ce10:	f1c7 0880 	rsb	r8, r7, #128	; 0x80
    if( left && ilen >= fill )
 c02ce14:	4544      	cmp	r4, r8
 c02ce16:	d311      	bcc.n	c02ce3c <mbedtls_sha512_update_ret+0x7c>
        memcpy( (void *) (ctx->buffer + left), input, fill );
 c02ce18:	f105 0950 	add.w	r9, r5, #80	; 0x50
 c02ce1c:	4631      	mov	r1, r6
 c02ce1e:	4642      	mov	r2, r8
 c02ce20:	eb09 0007 	add.w	r0, r9, r7
 c02ce24:	f7e7 fdab 	bl	c01497e <memcpy>
        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 c02ce28:	4649      	mov	r1, r9
 c02ce2a:	4628      	mov	r0, r5
 c02ce2c:	f7ff f91c 	bl	c02c068 <mbedtls_internal_sha512_process>
 c02ce30:	2800      	cmp	r0, #0
 c02ce32:	d1cc      	bne.n	c02cdce <mbedtls_sha512_update_ret+0xe>
        left = 0;
 c02ce34:	4607      	mov	r7, r0
        input += fill;
 c02ce36:	4446      	add	r6, r8
        ilen  -= fill;
 c02ce38:	eba4 0408 	sub.w	r4, r4, r8
 c02ce3c:	4426      	add	r6, r4
 c02ce3e:	e005      	b.n	c02ce4c <mbedtls_sha512_update_ret+0x8c>
        if( ( ret = mbedtls_internal_sha512_process( ctx, input ) ) != 0 )
 c02ce40:	4628      	mov	r0, r5
 c02ce42:	f7ff f911 	bl	c02c068 <mbedtls_internal_sha512_process>
 c02ce46:	2800      	cmp	r0, #0
 c02ce48:	d1c1      	bne.n	c02cdce <mbedtls_sha512_update_ret+0xe>
        ilen  -= 128;
 c02ce4a:	3c80      	subs	r4, #128	; 0x80
    while( ilen >= 128 )
 c02ce4c:	2c7f      	cmp	r4, #127	; 0x7f
 c02ce4e:	eba6 0104 	sub.w	r1, r6, r4
 c02ce52:	d8f5      	bhi.n	c02ce40 <mbedtls_sha512_update_ret+0x80>
    if( ilen > 0 )
 c02ce54:	2c00      	cmp	r4, #0
 c02ce56:	d0b9      	beq.n	c02cdcc <mbedtls_sha512_update_ret+0xc>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 c02ce58:	f105 0050 	add.w	r0, r5, #80	; 0x50
 c02ce5c:	4622      	mov	r2, r4
 c02ce5e:	4438      	add	r0, r7
 c02ce60:	f7e7 fd8d 	bl	c01497e <memcpy>
 c02ce64:	e7b2      	b.n	c02cdcc <mbedtls_sha512_update_ret+0xc>

0c02ce66 <mbedtls_sha512_finish_ret>:
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
 c02ce66:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 c02ce6a:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;

    ctx->buffer[used++] = 0x80;
 c02ce6c:	2180      	movs	r1, #128	; 0x80
    used = ctx->total[0] & 0x7F;
 c02ce6e:	6803      	ldr	r3, [r0, #0]
 c02ce70:	f100 0650 	add.w	r6, r0, #80	; 0x50
 c02ce74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ctx->buffer[used++] = 0x80;
 c02ce78:	1c5a      	adds	r2, r3, #1

    if( used <= 112 )
 c02ce7a:	2a70      	cmp	r2, #112	; 0x70
    ctx->buffer[used++] = 0x80;
 c02ce7c:	4403      	add	r3, r0
{
 c02ce7e:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
 c02ce80:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
 c02ce84:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 112 )
 c02ce88:	f200 8118 	bhi.w	c02d0bc <mbedtls_sha512_finish_ret+0x256>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 112 - used );
 c02ce8c:	2100      	movs	r1, #0
 c02ce8e:	f1c2 0270 	rsb	r2, r2, #112	; 0x70
        memset( ctx->buffer + used, 0, 128 - used );

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 112 );
 c02ce92:	f7e7 fd98 	bl	c0149c6 <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
 c02ce96:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    high = ( ctx->total[0] >> 61 )
 c02ce9a:	e9d4 2300 	ldrd	r2, r3, [r4]
         | ( ctx->total[1] <<  3 );
 c02ce9e:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    high = ( ctx->total[0] >> 61 )
 c02cea2:	2100      	movs	r1, #0
         | ( ctx->total[1] <<  3 );
 c02cea4:	ea49 7950 	orr.w	r9, r9, r0, lsr #29
 c02cea8:	ea4f 08c0 	mov.w	r8, r0, lsl #3
    high = ( ctx->total[0] >> 61 )
 c02ceac:	0f58      	lsrs	r0, r3, #29
 c02ceae:	ea40 0b08 	orr.w	fp, r0, r8
 c02ceb2:	ea41 0c09 	orr.w	ip, r1, r9
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 c02ceb6:	ea4f 611b 	mov.w	r1, fp, lsr #24
    low  = ( ctx->total[0] <<  3 );
 c02ceba:	00db      	lsls	r3, r3, #3
    PUT_UINT64_BE( high, ctx->buffer, 112 );
 c02cebc:	f884 10c4 	strb.w	r1, [r4, #196]	; 0xc4
 c02cec0:	ea4f 411b 	mov.w	r1, fp, lsr #16
    low  = ( ctx->total[0] <<  3 );
 c02cec4:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    PUT_UINT64_BE( high, ctx->buffer, 112 );
 c02cec8:	f884 10c5 	strb.w	r1, [r4, #197]	; 0xc5
 c02cecc:	ea4f 211b 	mov.w	r1, fp, lsr #8
 c02ced0:	f884 10c6 	strb.w	r1, [r4, #198]	; 0xc6
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 c02ced4:	0e19      	lsrs	r1, r3, #24
    low  = ( ctx->total[0] <<  3 );
 c02ced6:	00d2      	lsls	r2, r2, #3
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 c02ced8:	f884 10c8 	strb.w	r1, [r4, #200]	; 0xc8
 c02cedc:	0c19      	lsrs	r1, r3, #16
    PUT_UINT64_BE( high, ctx->buffer, 112 );
 c02cede:	ea4f 671c 	mov.w	r7, ip, lsr #24
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 c02cee2:	f884 10c9 	strb.w	r1, [r4, #201]	; 0xc9
 c02cee6:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
 c02ceea:	0a19      	lsrs	r1, r3, #8
 c02ceec:	0e13      	lsrs	r3, r2, #24
    PUT_UINT64_BE( high, ctx->buffer, 112 );
 c02ceee:	f884 70c0 	strb.w	r7, [r4, #192]	; 0xc0
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 c02cef2:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
    PUT_UINT64_BE( high, ctx->buffer, 112 );
 c02cef6:	ea4f 471c 	mov.w	r7, ip, lsr #16
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 c02cefa:	0c13      	lsrs	r3, r2, #16
    PUT_UINT64_BE( high, ctx->buffer, 112 );
 c02cefc:	f884 70c1 	strb.w	r7, [r4, #193]	; 0xc1
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 c02cf00:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
    PUT_UINT64_BE( high, ctx->buffer, 112 );
 c02cf04:	ea4f 271c 	mov.w	r7, ip, lsr #8
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 c02cf08:	0a13      	lsrs	r3, r2, #8
 c02cf0a:	f884 10ca 	strb.w	r1, [r4, #202]	; 0xca
    PUT_UINT64_BE( high, ctx->buffer, 112 );
 c02cf0e:	f884 70c2 	strb.w	r7, [r4, #194]	; 0xc2
 c02cf12:	f884 c0c3 	strb.w	ip, [r4, #195]	; 0xc3
 c02cf16:	f884 b0c7 	strb.w	fp, [r4, #199]	; 0xc7
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 c02cf1a:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
 c02cf1e:	f884 20cf 	strb.w	r2, [r4, #207]	; 0xcf

    if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 c02cf22:	4631      	mov	r1, r6
 c02cf24:	4620      	mov	r0, r4
 c02cf26:	f7ff f89f 	bl	c02c068 <mbedtls_internal_sha512_process>
 c02cf2a:	2800      	cmp	r0, #0
 c02cf2c:	f040 80c4 	bne.w	c02d0b8 <mbedtls_sha512_finish_ret+0x252>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT64_BE( ctx->state[0], output,  0 );
 c02cf30:	7de3      	ldrb	r3, [r4, #23]
 c02cf32:	702b      	strb	r3, [r5, #0]
 c02cf34:	8ae3      	ldrh	r3, [r4, #22]
 c02cf36:	706b      	strb	r3, [r5, #1]
 c02cf38:	6963      	ldr	r3, [r4, #20]
 c02cf3a:	0a1b      	lsrs	r3, r3, #8
 c02cf3c:	70ab      	strb	r3, [r5, #2]
 c02cf3e:	6963      	ldr	r3, [r4, #20]
 c02cf40:	70eb      	strb	r3, [r5, #3]
 c02cf42:	7ce3      	ldrb	r3, [r4, #19]
 c02cf44:	712b      	strb	r3, [r5, #4]
 c02cf46:	8a63      	ldrh	r3, [r4, #18]
 c02cf48:	716b      	strb	r3, [r5, #5]
 c02cf4a:	6923      	ldr	r3, [r4, #16]
 c02cf4c:	0a1b      	lsrs	r3, r3, #8
 c02cf4e:	71ab      	strb	r3, [r5, #6]
 c02cf50:	6923      	ldr	r3, [r4, #16]
 c02cf52:	71eb      	strb	r3, [r5, #7]
    PUT_UINT64_BE( ctx->state[1], output,  8 );
 c02cf54:	7fe3      	ldrb	r3, [r4, #31]
 c02cf56:	722b      	strb	r3, [r5, #8]
 c02cf58:	8be3      	ldrh	r3, [r4, #30]
 c02cf5a:	726b      	strb	r3, [r5, #9]
 c02cf5c:	69e3      	ldr	r3, [r4, #28]
 c02cf5e:	0a1b      	lsrs	r3, r3, #8
 c02cf60:	72ab      	strb	r3, [r5, #10]
 c02cf62:	69e3      	ldr	r3, [r4, #28]
 c02cf64:	72eb      	strb	r3, [r5, #11]
 c02cf66:	7ee3      	ldrb	r3, [r4, #27]
 c02cf68:	732b      	strb	r3, [r5, #12]
 c02cf6a:	8b63      	ldrh	r3, [r4, #26]
 c02cf6c:	736b      	strb	r3, [r5, #13]
 c02cf6e:	69a3      	ldr	r3, [r4, #24]
 c02cf70:	0a1b      	lsrs	r3, r3, #8
 c02cf72:	73ab      	strb	r3, [r5, #14]
 c02cf74:	69a3      	ldr	r3, [r4, #24]
 c02cf76:	73eb      	strb	r3, [r5, #15]
    PUT_UINT64_BE( ctx->state[2], output, 16 );
 c02cf78:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 c02cf7c:	742b      	strb	r3, [r5, #16]
 c02cf7e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 c02cf80:	746b      	strb	r3, [r5, #17]
 c02cf82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c02cf84:	0a1b      	lsrs	r3, r3, #8
 c02cf86:	74ab      	strb	r3, [r5, #18]
 c02cf88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c02cf8a:	74eb      	strb	r3, [r5, #19]
 c02cf8c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 c02cf90:	752b      	strb	r3, [r5, #20]
 c02cf92:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 c02cf94:	756b      	strb	r3, [r5, #21]
 c02cf96:	6a23      	ldr	r3, [r4, #32]
 c02cf98:	0a1b      	lsrs	r3, r3, #8
 c02cf9a:	75ab      	strb	r3, [r5, #22]
 c02cf9c:	6a23      	ldr	r3, [r4, #32]
 c02cf9e:	75eb      	strb	r3, [r5, #23]
    PUT_UINT64_BE( ctx->state[3], output, 24 );
 c02cfa0:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 c02cfa4:	762b      	strb	r3, [r5, #24]
 c02cfa6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 c02cfa8:	766b      	strb	r3, [r5, #25]
 c02cfaa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 c02cfac:	0a1b      	lsrs	r3, r3, #8
 c02cfae:	76ab      	strb	r3, [r5, #26]
 c02cfb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 c02cfb2:	76eb      	strb	r3, [r5, #27]
 c02cfb4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 c02cfb8:	772b      	strb	r3, [r5, #28]
 c02cfba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 c02cfbc:	776b      	strb	r3, [r5, #29]
 c02cfbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 c02cfc0:	0a1b      	lsrs	r3, r3, #8
 c02cfc2:	77ab      	strb	r3, [r5, #30]
 c02cfc4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 c02cfc6:	77eb      	strb	r3, [r5, #31]
    PUT_UINT64_BE( ctx->state[4], output, 32 );
 c02cfc8:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 c02cfcc:	f885 3020 	strb.w	r3, [r5, #32]
 c02cfd0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 c02cfd2:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
 c02cfd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 c02cfd8:	0a1b      	lsrs	r3, r3, #8
 c02cfda:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 c02cfde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 c02cfe0:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
 c02cfe4:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 c02cfe8:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 c02cfec:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 c02cfee:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 c02cff2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 c02cff4:	0a1b      	lsrs	r3, r3, #8
 c02cff6:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
 c02cffa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 c02cffc:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
    PUT_UINT64_BE( ctx->state[5], output, 40 );
 c02d000:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 c02d004:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 c02d008:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 c02d00a:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
 c02d00e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 c02d010:	0a1b      	lsrs	r3, r3, #8
 c02d012:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
 c02d016:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 c02d018:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
 c02d01c:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 c02d020:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 c02d024:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 c02d026:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
 c02d02a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 c02d02c:	0a1b      	lsrs	r3, r3, #8
 c02d02e:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
 c02d032:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 c02d034:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f

    if( ctx->is384 == 0 )
 c02d038:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 c02d03c:	2b00      	cmp	r3, #0
 c02d03e:	d13b      	bne.n	c02d0b8 <mbedtls_sha512_finish_ret+0x252>
    {
        PUT_UINT64_BE( ctx->state[6], output, 48 );
 c02d040:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 c02d044:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 c02d048:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 c02d04c:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
 c02d050:	6c63      	ldr	r3, [r4, #68]	; 0x44
 c02d052:	0a1b      	lsrs	r3, r3, #8
 c02d054:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
 c02d058:	6c63      	ldr	r3, [r4, #68]	; 0x44
 c02d05a:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
 c02d05e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 c02d062:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 c02d066:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 c02d06a:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 c02d06e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 c02d070:	0a1b      	lsrs	r3, r3, #8
 c02d072:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 c02d076:	6c23      	ldr	r3, [r4, #64]	; 0x40
 c02d078:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
        PUT_UINT64_BE( ctx->state[7], output, 56 );
 c02d07c:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 c02d080:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 c02d084:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 c02d088:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
 c02d08c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 c02d08e:	0a1b      	lsrs	r3, r3, #8
 c02d090:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
 c02d094:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 c02d096:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
 c02d09a:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 c02d09e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
 c02d0a2:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 c02d0a6:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
 c02d0aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 c02d0ac:	0a1b      	lsrs	r3, r3, #8
 c02d0ae:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 c02d0b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 c02d0b4:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
    }

    return( 0 );
}
 c02d0b8:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        memset( ctx->buffer + used, 0, 128 - used );
 c02d0bc:	2100      	movs	r1, #0
 c02d0be:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 c02d0c2:	f7e7 fc80 	bl	c0149c6 <memset>
        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 c02d0c6:	4631      	mov	r1, r6
 c02d0c8:	4620      	mov	r0, r4
 c02d0ca:	f7fe ffcd 	bl	c02c068 <mbedtls_internal_sha512_process>
 c02d0ce:	2800      	cmp	r0, #0
 c02d0d0:	d1f2      	bne.n	c02d0b8 <mbedtls_sha512_finish_ret+0x252>
        memset( ctx->buffer, 0, 112 );
 c02d0d2:	4601      	mov	r1, r0
 c02d0d4:	2270      	movs	r2, #112	; 0x70
 c02d0d6:	4630      	mov	r0, r6
 c02d0d8:	e6db      	b.n	c02ce92 <mbedtls_sha512_finish_ret+0x2c>

0c02d0da <mbedtls_sha512_ret>:
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
 c02d0da:	b5f0      	push	{r4, r5, r6, r7, lr}
 c02d0dc:	461c      	mov	r4, r3
 c02d0de:	b0b7      	sub	sp, #220	; 0xdc
 c02d0e0:	4606      	mov	r6, r0

    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha512_init( &ctx );
 c02d0e2:	4668      	mov	r0, sp
{
 c02d0e4:	460f      	mov	r7, r1
 c02d0e6:	4615      	mov	r5, r2
    mbedtls_sha512_init( &ctx );
 c02d0e8:	f7fe ff14 	bl	c02bf14 <mbedtls_sha512_init>

    if( ( ret = mbedtls_sha512_starts_ret( &ctx, is384 ) ) != 0 )
 c02d0ec:	4621      	mov	r1, r4
 c02d0ee:	4668      	mov	r0, sp
 c02d0f0:	f7fe ff1e 	bl	c02bf30 <mbedtls_sha512_starts_ret>
 c02d0f4:	4604      	mov	r4, r0
 c02d0f6:	b958      	cbnz	r0, c02d110 <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_update_ret( &ctx, input, ilen ) ) != 0 )
 c02d0f8:	463a      	mov	r2, r7
 c02d0fa:	4631      	mov	r1, r6
 c02d0fc:	4668      	mov	r0, sp
 c02d0fe:	f7ff fe5f 	bl	c02cdc0 <mbedtls_sha512_update_ret>
 c02d102:	4604      	mov	r4, r0
 c02d104:	b920      	cbnz	r0, c02d110 <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_finish_ret( &ctx, output ) ) != 0 )
 c02d106:	4629      	mov	r1, r5
 c02d108:	4668      	mov	r0, sp
 c02d10a:	f7ff feac 	bl	c02ce66 <mbedtls_sha512_finish_ret>
 c02d10e:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha512_free( &ctx );
 c02d110:	4668      	mov	r0, sp
 c02d112:	f7fe ff03 	bl	c02bf1c <mbedtls_sha512_free>

    return( ret );
}
 c02d116:	4620      	mov	r0, r4
 c02d118:	b037      	add	sp, #220	; 0xdc
 c02d11a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0c02d11c <UsefulOutBuf_Init>:
 Public function -- see UsefulBuf.h

 Code Reviewers: THIS FUNCTION DOES POINTER MATH
 */
void UsefulOutBuf_Init(UsefulOutBuf *pMe, UsefulBuf Storage)
{
 c02d11c:	b082      	sub	sp, #8
 c02d11e:	4603      	mov	r3, r0
 c02d120:	4668      	mov	r0, sp
 c02d122:	e880 0006 	stmia.w	r0, {r1, r2}
    pMe->magic  = USEFUL_OUT_BUF_MAGIC;
 c02d126:	f640 310f 	movw	r1, #2831	; 0xb0f
 c02d12a:	8199      	strh	r1, [r3, #12]



static inline void UsefulOutBuf_Reset(UsefulOutBuf *pMe)
{
   pMe->data_len = 0;
 c02d12c:	2100      	movs	r1, #0
 c02d12e:	6099      	str	r1, [r3, #8]
   pMe->err      = 0;
 c02d130:	7399      	strb	r1, [r3, #14]
    UsefulOutBuf_Reset(pMe);
    pMe->UB     = Storage;
 c02d132:	c803      	ldmia	r0, {r0, r1}
 c02d134:	e883 0005 	stmia.w	r3, {r0, r2}
    // based off of pStorage in the rest of this code.
    const uintptr_t ptrM = UINTPTR_MAX - Storage.len;
    if(Storage.ptr && (uintptr_t)Storage.ptr > ptrM) // Check #0
        me->err = 1;
#endif
}
 c02d138:	b002      	add	sp, #8
 c02d13a:	4770      	bx	lr

0c02d13c <UsefulOutBuf_InsertUsefulBuf>:

 4. Put the new data in at the insertion position.

 */
void UsefulOutBuf_InsertUsefulBuf(UsefulOutBuf *pMe, UsefulBufC NewData, size_t uInsertionPos)
{
 c02d13c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c02d13e:	4604      	mov	r4, r0
 c02d140:	461d      	mov	r5, r3
   if(pMe->err) {
 c02d142:	7ba3      	ldrb	r3, [r4, #14]
{
 c02d144:	a802      	add	r0, sp, #8
 c02d146:	e900 0006 	stmdb	r0, {r1, r2}
   if(pMe->err) {
 c02d14a:	b933      	cbnz	r3, c02d15a <UsefulOutBuf_InsertUsefulBuf+0x1e>
   /* 0. Sanity check the UsefulOutBuf structure */
   // A "counter measure". If magic number is not the right number it
   // probably means me was not initialized or it was corrupted. Attackers
   // can defeat this, but it is a hurdle and does good with very
   // little code.
   if(pMe->magic != USEFUL_OUT_BUF_MAGIC) {
 c02d14c:	f640 330f 	movw	r3, #2831	; 0xb0f
 c02d150:	89a2      	ldrh	r2, [r4, #12]
 c02d152:	429a      	cmp	r2, r3
 c02d154:	d003      	beq.n	c02d15e <UsefulOutBuf_InsertUsefulBuf+0x22>
      pMe->err = 1;
 c02d156:	2301      	movs	r3, #1
 c02d158:	73a3      	strb	r3, [r4, #14]
   if(pMe->UB.ptr) {
      // To know memmove won't go off end of destination, see PtrMath #6
      memmove(pInsertionPoint, NewData.ptr, NewData.len);
   }
   pMe->data_len += NewData.len ;
}
 c02d15a:	b002      	add	sp, #8
 c02d15c:	bd70      	pop	{r4, r5, r6, pc}
   if(pMe->data_len > pMe->UB.len) {  // Check #1
 c02d15e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 c02d162:	429a      	cmp	r2, r3
 c02d164:	d8f7      	bhi.n	c02d156 <UsefulOutBuf_InsertUsefulBuf+0x1a>
 c02d166:	9e01      	ldr	r6, [sp, #4]
}


static inline size_t UsefulOutBuf_RoomLeft(UsefulOutBuf *pMe)
{
   return pMe->UB.len - pMe->data_len;
 c02d168:	1a9b      	subs	r3, r3, r2
   if(! UsefulOutBuf_WillItFit(pMe, NewData.len)) { // Check #2
 c02d16a:	42b3      	cmp	r3, r6
 c02d16c:	d3f3      	bcc.n	c02d156 <UsefulOutBuf_InsertUsefulBuf+0x1a>
   if(uInsertionPos > pMe->data_len) { // Check #3
 c02d16e:	42aa      	cmp	r2, r5
 c02d170:	d3f1      	bcc.n	c02d156 <UsefulOutBuf_InsertUsefulBuf+0x1a>
   if(uNumBytesToMove && pMe->UB.ptr) {
 c02d172:	1b52      	subs	r2, r2, r5
 c02d174:	d005      	beq.n	c02d182 <UsefulOutBuf_InsertUsefulBuf+0x46>
   uint8_t *pSourceOfMove       = ((uint8_t *)pMe->UB.ptr) + uInsertionPos; // PtrMath #1
 c02d176:	6821      	ldr	r1, [r4, #0]
   if(uNumBytesToMove && pMe->UB.ptr) {
 c02d178:	b119      	cbz	r1, c02d182 <UsefulOutBuf_InsertUsefulBuf+0x46>
   uint8_t *pSourceOfMove       = ((uint8_t *)pMe->UB.ptr) + uInsertionPos; // PtrMath #1
 c02d17a:	4429      	add	r1, r5
      memmove(pDestinationOfMove, pSourceOfMove, uNumBytesToMove);
 c02d17c:	1988      	adds	r0, r1, r6
 c02d17e:	f7e7 fc09 	bl	c014994 <memmove>
   uint8_t *pInsertionPoint = ((uint8_t *)pMe->UB.ptr) + uInsertionPos; // PtrMath #5
 c02d182:	6820      	ldr	r0, [r4, #0]
   if(pMe->UB.ptr) {
 c02d184:	b120      	cbz	r0, c02d190 <UsefulOutBuf_InsertUsefulBuf+0x54>
      memmove(pInsertionPoint, NewData.ptr, NewData.len);
 c02d186:	4632      	mov	r2, r6
 c02d188:	9900      	ldr	r1, [sp, #0]
 c02d18a:	4428      	add	r0, r5
 c02d18c:	f7e7 fc02 	bl	c014994 <memmove>
   pMe->data_len += NewData.len ;
 c02d190:	68a3      	ldr	r3, [r4, #8]
 c02d192:	441e      	add	r6, r3
 c02d194:	60a6      	str	r6, [r4, #8]
 c02d196:	e7e0      	b.n	c02d15a <UsefulOutBuf_InsertUsefulBuf+0x1e>

0c02d198 <UsefulOutBuf_OutUBuf>:
/*
 Public function -- see UsefulBuf.h
 */
UsefulBufC UsefulOutBuf_OutUBuf(UsefulOutBuf *pMe)
{
   if(pMe->err) {
 c02d198:	7b8b      	ldrb	r3, [r1, #14]
{
 c02d19a:	b510      	push	{r4, lr}
   if(pMe->err) {
 c02d19c:	b11b      	cbz	r3, c02d1a6 <UsefulOutBuf_OutUBuf+0xe>
      return NULLUsefulBufC;
 c02d19e:	2300      	movs	r3, #0
   }

   if(pMe->magic != USEFUL_OUT_BUF_MAGIC) {
      pMe->err = 1;
      return NULLUsefulBufC;
 c02d1a0:	6003      	str	r3, [r0, #0]
   }

   return (UsefulBufC){pMe->UB.ptr, pMe->data_len};
 c02d1a2:	6043      	str	r3, [r0, #4]
}
 c02d1a4:	bd10      	pop	{r4, pc}
   if(pMe->magic != USEFUL_OUT_BUF_MAGIC) {
 c02d1a6:	f640 320f 	movw	r2, #2831	; 0xb0f
 c02d1aa:	898c      	ldrh	r4, [r1, #12]
 c02d1ac:	4294      	cmp	r4, r2
 c02d1ae:	d002      	beq.n	c02d1b6 <UsefulOutBuf_OutUBuf+0x1e>
      pMe->err = 1;
 c02d1b0:	2201      	movs	r2, #1
 c02d1b2:	738a      	strb	r2, [r1, #14]
 c02d1b4:	e7f4      	b.n	c02d1a0 <UsefulOutBuf_OutUBuf+0x8>
   return (UsefulBufC){pMe->UB.ptr, pMe->data_len};
 c02d1b6:	680a      	ldr	r2, [r1, #0]
 c02d1b8:	688b      	ldr	r3, [r1, #8]
 c02d1ba:	6002      	str	r2, [r0, #0]
 c02d1bc:	e7f1      	b.n	c02d1a2 <UsefulOutBuf_OutUBuf+0xa>

0c02d1be <attest_token_start>:
enum attest_token_err_t attest_token_start(struct attest_token_ctx *me,
                                           uint32_t opt_flags,
                                           int32_t key_select,
                                           int32_t cose_alg_id,
                                           const struct q_useful_buf *out_buf)
{
 c02d1be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 c02d1c0:	4605      	mov	r5, r0
 c02d1c2:	460c      	mov	r4, r1
 c02d1c4:	4616      	mov	r6, r2
 c02d1c6:	461f      	mov	r7, r3
 c02d1c8:	9b08      	ldr	r3, [sp, #32]
    enum t_cose_err_t cose_return_value;
    enum attest_token_err_t return_value;

    /* Remember some of the configuration values */
    me->opt_flags  = opt_flags;
    me->key_select = key_select;
 c02d1ca:	e9c0 1226 	strd	r1, r2, [r0, #152]	; 0x98

    /* Spin up the CBOR encoder */
    QCBOREncode_Init(&(me->cbor_enc_ctx), *out_buf);
 c02d1ce:	e893 0006 	ldmia.w	r3, {r1, r2}
 c02d1d2:	f002 f85c 	bl	c02f28e <QCBOREncode_Init>


    /* Initialize COSE signer. This will cause the cose headers to be
     * encoded and written into out_buf using me->cbor_enc_ctx
     */
    cose_return_value = t_cose_sign1_init(&(me->signer_ctx),
 c02d1d6:	0fe1      	lsrs	r1, r4, #31
 c02d1d8:	9500      	str	r5, [sp, #0]
 c02d1da:	4633      	mov	r3, r6
 c02d1dc:	463a      	mov	r2, r7
 c02d1de:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 c02d1e2:	f003 fdcd 	bl	c030d80 <t_cose_sign1_init>
                                          opt_flags &
                                            TOKEN_OPT_SHORT_CIRCUIT_SIGN,
                                          cose_alg_id,
                                          key_select,
                                          &(me->cbor_enc_ctx));
    if(cose_return_value) {
 c02d1e6:	4604      	mov	r4, r0
 c02d1e8:	b128      	cbz	r0, c02d1f6 <attest_token_start+0x38>
    switch(err) {
 c02d1ea:	2803      	cmp	r0, #3
        return ATTEST_TOKEN_ERR_GENERAL;
 c02d1ec:	bf0c      	ite	eq
 c02d1ee:	2004      	moveq	r0, #4
 c02d1f0:	2003      	movne	r0, #3

    return_value = ATTEST_TOKEN_ERR_SUCCESS;

Done:
    return return_value;
}
 c02d1f2:	b003      	add	sp, #12
 c02d1f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
}


static inline void QCBOREncode_BstrWrap(QCBOREncodeContext *pCtx)
{
   QCBOREncode_OpenMapOrArray(pCtx, CBOR_MAJOR_TYPE_BYTE_STRING);
 c02d1f6:	2102      	movs	r1, #2
 c02d1f8:	4628      	mov	r0, r5
 c02d1fa:	f002 f8a0 	bl	c02f33e <QCBOREncode_OpenMapOrArray>
   QCBOREncode_OpenMapOrArray(pCtx, CBOR_MAJOR_TYPE_MAP);
 c02d1fe:	4628      	mov	r0, r5
 c02d200:	2105      	movs	r1, #5
 c02d202:	f002 f89c 	bl	c02f33e <QCBOREncode_OpenMapOrArray>
    return_value = ATTEST_TOKEN_ERR_SUCCESS;
 c02d206:	4620      	mov	r0, r4
 c02d208:	e7f3      	b.n	c02d1f2 <attest_token_start+0x34>

0c02d20a <attest_token_borrow_cbor_cntxt>:
 Public function. See attest_token.h
 */
QCBOREncodeContext *attest_token_borrow_cbor_cntxt(struct attest_token_ctx *me)
{
    return &(me->cbor_enc_ctx);
}
 c02d20a:	4770      	bx	lr

0c02d20c <attest_token_add_integer>:
 Public function. See attest_token.h
 */
void attest_token_add_integer(struct attest_token_ctx *me,
                              int32_t label,
                              int64_t Value)
{
 c02d20c:	b5d0      	push	{r4, r6, r7, lr}
 c02d20e:	4604      	mov	r4, r0
 c02d210:	4616      	mov	r6, r2
 c02d212:	461f      	mov	r7, r3
   QCBOREncode_AddInt64(pCtx, nLabel);
 c02d214:	460a      	mov	r2, r1
 c02d216:	17cb      	asrs	r3, r1, #31
 c02d218:	f002 f84f 	bl	c02f2ba <QCBOREncode_AddInt64>
   QCBOREncode_AddInt64(pCtx, uNum);
 c02d21c:	4632      	mov	r2, r6
 c02d21e:	463b      	mov	r3, r7
 c02d220:	4620      	mov	r0, r4
    QCBOREncode_AddInt64ToMapN(&(me->cbor_enc_ctx), label, Value);
}
 c02d222:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 c02d226:	f002 b848 	b.w	c02f2ba <QCBOREncode_AddInt64>

0c02d22a <attest_token_add_bstr>:
 Public function. See attest_token.h
 */
void attest_token_add_bstr(struct attest_token_ctx *me,
                           int32_t label,
                           const struct q_useful_buf_c *bstr)
{
 c02d22a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c02d22c:	e9d2 6500 	ldrd	r6, r5, [r2]
 c02d230:	4604      	mov	r4, r0
   QCBOREncode_AddInt64(pCtx, nLabel);
 c02d232:	460a      	mov	r2, r1
 c02d234:	17cb      	asrs	r3, r1, #31
 c02d236:	f002 f840 	bl	c02f2ba <QCBOREncode_AddInt64>
   QCBOREncode_AddBuffer(pCtx, CBOR_MAJOR_TYPE_BYTE_STRING, Bytes);
 c02d23a:	2102      	movs	r1, #2
 c02d23c:	4620      	mov	r0, r4
 c02d23e:	e9cd 6500 	strd	r6, r5, [sp]
 c02d242:	ab02      	add	r3, sp, #8
 c02d244:	e913 000c 	ldmdb	r3, {r2, r3}
    QCBOREncode_AddBytesToMapN(&(me->cbor_enc_ctx),
                               label,
                               *bstr);
}
 c02d248:	b002      	add	sp, #8
 c02d24a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 c02d24e:	f002 b84f 	b.w	c02f2f0 <QCBOREncode_AddBuffer>

0c02d252 <attest_token_add_tstr>:
 Public function. See attest_token.h
 */
void attest_token_add_tstr(struct attest_token_ctx *me,
                           int32_t label,
                           const struct q_useful_buf_c *tstr)
{
 c02d252:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c02d254:	e9d2 6500 	ldrd	r6, r5, [r2]
 c02d258:	4604      	mov	r4, r0
   QCBOREncode_AddInt64(pCtx, nLabel);
 c02d25a:	460a      	mov	r2, r1
 c02d25c:	17cb      	asrs	r3, r1, #31
 c02d25e:	f002 f82c 	bl	c02f2ba <QCBOREncode_AddInt64>
   QCBOREncode_AddBuffer(pCtx, CBOR_MAJOR_TYPE_TEXT_STRING, Text);
 c02d262:	2103      	movs	r1, #3
 c02d264:	4620      	mov	r0, r4
 c02d266:	e9cd 6500 	strd	r6, r5, [sp]
 c02d26a:	ab02      	add	r3, sp, #8
 c02d26c:	e913 000c 	ldmdb	r3, {r2, r3}
    QCBOREncode_AddTextToMapN(&(me->cbor_enc_ctx), label, *tstr);
}
 c02d270:	b002      	add	sp, #8
 c02d272:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 c02d276:	f002 b83b 	b.w	c02f2f0 <QCBOREncode_AddBuffer>

0c02d27a <attest_token_finish>:
 Public function. See attest_token.h
 */
enum attest_token_err_t
attest_token_finish(struct attest_token_ctx *me,
                    struct q_useful_buf_c *completed_token)
{
 c02d27a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 c02d27c:	4605      	mov	r5, r0
   QCBOREncode_BstrWrap(pCtx);
}

static inline void QCBOREncode_CloseBstrWrap(QCBOREncodeContext *pCtx, UsefulBufC *pWrappedCBOR)
{
   QCBOREncode_CloseMapOrArray(pCtx, CBOR_MAJOR_TYPE_BYTE_STRING, pWrappedCBOR);
 c02d27e:	466c      	mov	r4, sp
   QCBOREncode_CloseMapOrArray(pCtx, CBOR_MAJOR_TYPE_MAP, NULL);
 c02d280:	2200      	movs	r2, #0
 c02d282:	460e      	mov	r6, r1
 c02d284:	2105      	movs	r1, #5
 c02d286:	f002 f87a 	bl	c02f37e <QCBOREncode_CloseMapOrArray>
   QCBOREncode_CloseMapOrArray(pCtx, CBOR_MAJOR_TYPE_BYTE_STRING, pWrappedCBOR);
 c02d28a:	4622      	mov	r2, r4
 c02d28c:	2102      	movs	r1, #2
 c02d28e:	4628      	mov	r0, r5
 c02d290:	f002 f875 	bl	c02f37e <QCBOREncode_CloseMapOrArray>
     */
    QCBOREncode_CloseBstrWrap(&(me->cbor_enc_ctx), &token_payload_ub);

    /* Finish off the cose signature. This does all the interesting work of
     hashing and signing */
    cose_return_value =
 c02d294:	e894 0006 	ldmia.w	r4, {r1, r2}
 c02d298:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 c02d29c:	f003 fdd2 	bl	c030e44 <t_cose_sign1_finish>
        t_cose_sign1_finish(&(me->signer_ctx), token_payload_ub);
    if(cose_return_value) {
 c02d2a0:	b128      	cbz	r0, c02d2ae <attest_token_finish+0x34>
    switch(err) {
 c02d2a2:	2803      	cmp	r0, #3
        return ATTEST_TOKEN_ERR_GENERAL;
 c02d2a4:	bf0c      	ite	eq
 c02d2a6:	2004      	moveq	r0, #4
 c02d2a8:	2003      	movne	r0, #3
        *completed_token = completed_token_ub;
    }

Done:
    return return_value;
}
 c02d2aa:	b004      	add	sp, #16
 c02d2ac:	bd70      	pop	{r4, r5, r6, pc}
    qcbor_result = QCBOREncode_Finish(&(me->cbor_enc_ctx),
 c02d2ae:	ac02      	add	r4, sp, #8
 c02d2b0:	4621      	mov	r1, r4
 c02d2b2:	4628      	mov	r0, r5
 c02d2b4:	f002 f8a1 	bl	c02f3fa <QCBOREncode_Finish>
    if(qcbor_result == QCBOR_ERR_BUFFER_TOO_SMALL) {
 c02d2b8:	2801      	cmp	r0, #1
    qcbor_result = QCBOREncode_Finish(&(me->cbor_enc_ctx),
 c02d2ba:	4603      	mov	r3, r0
    if(qcbor_result == QCBOR_ERR_BUFFER_TOO_SMALL) {
 c02d2bc:	d004      	beq.n	c02d2c8 <attest_token_finish+0x4e>
    } else if (qcbor_result != QCBOR_SUCCESS) {
 c02d2be:	b928      	cbnz	r0, c02d2cc <attest_token_finish+0x52>
        *completed_token = completed_token_ub;
 c02d2c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 c02d2c4:	e886 0003 	stmia.w	r6, {r0, r1}
        return_value = ATTEST_TOKEN_ERR_TOO_SMALL;
 c02d2c8:	4618      	mov	r0, r3
 c02d2ca:	e7ee      	b.n	c02d2aa <attest_token_finish+0x30>
        return_value = ATTEST_TOKEN_ERR_CBOR_FORMATTING;
 c02d2cc:	2002      	movs	r0, #2
 c02d2ce:	e7ec      	b.n	c02d2aa <attest_token_finish+0x30>

0c02d2d0 <attest_get_tlv_by_module>:
 */
static int32_t attest_get_tlv_by_module(uint8_t    module,
                                        uint8_t   *claim,
                                        uint16_t  *tlv_len,
                                        uint8_t  **tlv_ptr)
{
 c02d2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    struct shared_data_tlv_entry tlv_entry;
    uint8_t *tlv_end;
    uint8_t *tlv_curr;

    if (boot_data.header.tlv_magic != SHARED_DATA_TLV_INFO_MAGIC) {
 c02d2d2:	f242 0516 	movw	r5, #8214	; 0x2016
 c02d2d6:	4c11      	ldr	r4, [pc, #68]	; (c02d31c <attest_get_tlv_by_module+0x4c>)
 c02d2d8:	8826      	ldrh	r6, [r4, #0]
 c02d2da:	42ae      	cmp	r6, r5
 c02d2dc:	d11b      	bne.n	c02d316 <attest_get_tlv_by_module+0x46>
        return -1;
    }

    /* Get the boundaries of TLV section where to lookup*/
    tlv_end = (uint8_t *)&boot_data + boot_data.header.tlv_tot_len;
 c02d2de:	8866      	ldrh	r6, [r4, #2]
    if (*tlv_ptr == NULL) {
 c02d2e0:	681d      	ldr	r5, [r3, #0]
    tlv_end = (uint8_t *)&boot_data + boot_data.header.tlv_tot_len;
 c02d2e2:	4426      	add	r6, r4
    if (*tlv_ptr == NULL) {
 c02d2e4:	b12d      	cbz	r5, c02d2f2 <attest_get_tlv_by_module+0x22>
        /* At first call set to the beginning of the TLV section */
        tlv_curr = boot_data.data;
    } else {
        /* Any subsequent call set to the next TLV entry */
        (void)tfm_memcpy(&tlv_entry, *tlv_ptr, SHARED_DATA_ENTRY_HEADER_SIZE);
        tlv_curr  = (*tlv_ptr) + tlv_entry.tlv_len;
 c02d2e6:	886c      	ldrh	r4, [r5, #2]
 c02d2e8:	442c      	add	r4, r5
    }

    /* Iterates over the TLV section and returns the address and size of TLVs
     * with requested module identifier
     */
    for (; tlv_curr < tlv_end; tlv_curr += tlv_entry.tlv_len) {
 c02d2ea:	42b4      	cmp	r4, r6
 c02d2ec:	d303      	bcc.n	c02d2f6 <attest_get_tlv_by_module+0x26>
            *tlv_len = tlv_entry.tlv_len;
            return 1;
        }
    }

    return 0;
 c02d2ee:	2000      	movs	r0, #0
 c02d2f0:	e00e      	b.n	c02d310 <attest_get_tlv_by_module+0x40>
        tlv_curr = boot_data.data;
 c02d2f2:	3404      	adds	r4, #4
 c02d2f4:	e7f9      	b.n	c02d2ea <attest_get_tlv_by_module+0x1a>
 c02d2f6:	6825      	ldr	r5, [r4, #0]
        if (GET_IAS_MODULE(tlv_entry.tlv_type) == module) {
 c02d2f8:	f3c5 1c85 	ubfx	ip, r5, #6, #6
 c02d2fc:	4584      	cmp	ip, r0
 c02d2fe:	ea4f 4715 	mov.w	r7, r5, lsr #16
 c02d302:	d106      	bne.n	c02d312 <attest_get_tlv_by_module+0x42>
            return 1;
 c02d304:	2001      	movs	r0, #1
            *claim   = GET_IAS_CLAIM(tlv_entry.tlv_type);
 c02d306:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 c02d30a:	700d      	strb	r5, [r1, #0]
            *tlv_ptr = tlv_curr;
 c02d30c:	601c      	str	r4, [r3, #0]
            *tlv_len = tlv_entry.tlv_len;
 c02d30e:	8017      	strh	r7, [r2, #0]
}
 c02d310:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (; tlv_curr < tlv_end; tlv_curr += tlv_entry.tlv_len) {
 c02d312:	443c      	add	r4, r7
 c02d314:	e7e9      	b.n	c02d2ea <attest_get_tlv_by_module+0x1a>
        return -1;
 c02d316:	f04f 30ff 	mov.w	r0, #4294967295
 c02d31a:	e7f9      	b.n	c02d310 <attest_get_tlv_by_module+0x40>
 c02d31c:	3003889c 	.word	0x3003889c

0c02d320 <attest_add_sw_component_claim>:
 */
static enum psa_attest_err_t
attest_add_sw_component_claim(struct attest_token_ctx *token_ctx,
                              uint8_t tlv_id,
                              const struct q_useful_buf_c *claim_value)
{
 c02d320:	b508      	push	{r3, lr}
    switch (tlv_id) {
 c02d322:	2909      	cmp	r1, #9
 c02d324:	d815      	bhi.n	c02d352 <attest_add_sw_component_claim+0x32>
 c02d326:	e8df f001 	tbb	[pc, r1]
 c02d32a:	100e      	.short	0x100e
 c02d32c:	14141214 	.word	0x14141214
 c02d330:	0a051414 	.word	0x0a051414
    case SW_MEASURE_VALUE:
        attest_token_add_bstr(token_ctx,
 c02d334:	2102      	movs	r1, #2
        attest_token_add_tstr(token_ctx,
                              EAT_CBOR_SW_COMPONENT_VERSION,
                              claim_value);
        break;
    case SW_SIGNER_ID:
        attest_token_add_bstr(token_ctx,
 c02d336:	f7ff ff78 	bl	c02d22a <attest_token_add_bstr>
        break;
    default:
        return PSA_ATTEST_ERR_GENERAL;
    }

    return PSA_ATTEST_ERR_SUCCESS;
 c02d33a:	2000      	movs	r0, #0
}
 c02d33c:	bd08      	pop	{r3, pc}
        attest_token_add_tstr(token_ctx,
 c02d33e:	2106      	movs	r1, #6
        attest_token_add_tstr(token_ctx,
 c02d340:	f7ff ff87 	bl	c02d252 <attest_token_add_tstr>
 c02d344:	e7f9      	b.n	c02d33a <attest_add_sw_component_claim+0x1a>
        attest_token_add_tstr(token_ctx,
 c02d346:	2104      	movs	r1, #4
 c02d348:	e7fa      	b.n	c02d340 <attest_add_sw_component_claim+0x20>
        attest_token_add_bstr(token_ctx,
 c02d34a:	2105      	movs	r1, #5
 c02d34c:	e7f3      	b.n	c02d336 <attest_add_sw_component_claim+0x16>
        attest_token_add_tstr(token_ctx,
 c02d34e:	2101      	movs	r1, #1
 c02d350:	e7f6      	b.n	c02d340 <attest_add_sw_component_claim+0x20>
        return PSA_ATTEST_ERR_GENERAL;
 c02d352:	2005      	movs	r0, #5
 c02d354:	e7f2      	b.n	c02d33c <attest_add_sw_component_claim+0x1c>

0c02d356 <attest_get_tlv_by_id.constprop.1>:
    *tlv_ptr = NULL;
 c02d356:	2300      	movs	r3, #0
static int32_t attest_get_tlv_by_id(uint8_t    claim,
 c02d358:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c02d35a:	4605      	mov	r5, r0
 c02d35c:	460e      	mov	r6, r1
 c02d35e:	4614      	mov	r4, r2
    *tlv_ptr = NULL;
 c02d360:	6013      	str	r3, [r2, #0]
        found = attest_get_tlv_by_module(module, &tlv_id,
 c02d362:	4623      	mov	r3, r4
 c02d364:	4632      	mov	r2, r6
 c02d366:	f10d 0107 	add.w	r1, sp, #7
 c02d36a:	2000      	movs	r0, #0
 c02d36c:	f7ff ffb0 	bl	c02d2d0 <attest_get_tlv_by_module>
        if (found != 1) {
 c02d370:	2801      	cmp	r0, #1
 c02d372:	d103      	bne.n	c02d37c <attest_get_tlv_by_id.constprop.1+0x26>
        if (claim == tlv_id) {
 c02d374:	f89d 3007 	ldrb.w	r3, [sp, #7]
 c02d378:	42ab      	cmp	r3, r5
 c02d37a:	d1f2      	bne.n	c02d362 <attest_get_tlv_by_id.constprop.1+0xc>
}
 c02d37c:	b002      	add	sp, #8
 c02d37e:	bd70      	pop	{r4, r5, r6, pc}

0c02d380 <attest_create_token>:
 */
static enum psa_attest_err_t
attest_create_token(struct q_useful_buf_c *challenge,
                    struct q_useful_buf   *token,
                    struct q_useful_buf_c *completed_token)
{
 c02d380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02d384:	b0c9      	sub	sp, #292	; 0x124
 c02d386:	9203      	str	r2, [sp, #12]
#endif

    /* Get started creating the token. This sets up the CBOR and COSE contexts
     * which causes the COSE headers to be constructed.
     */
    token_err = attest_token_start(&attest_token_ctx,
 c02d388:	2200      	movs	r2, #0
 c02d38a:	9100      	str	r1, [sp, #0]
{
 c02d38c:	4605      	mov	r5, r0
    token_err = attest_token_start(&attest_token_ctx,
 c02d38e:	f06f 0306 	mvn.w	r3, #6
 c02d392:	4611      	mov	r1, r2
 c02d394:	a816      	add	r0, sp, #88	; 0x58
 c02d396:	f7ff ff12 	bl	c02d1be <attest_token_start>
                                   option_flags,         /* option_flags */
                                   key_select,           /* key_select   */
                                   COSE_ALGORITHM_ES256, /* alg_select   */
                                   token);

    if (token_err != ATTEST_TOKEN_ERR_SUCCESS) {
 c02d39a:	4604      	mov	r4, r0
 c02d39c:	b138      	cbz	r0, c02d3ae <attest_create_token+0x2e>
    switch (token_err) {
 c02d39e:	2801      	cmp	r0, #1
 c02d3a0:	f040 80dc 	bne.w	c02d55c <attest_create_token+0x1dc>
        return PSA_ATTEST_ERR_TOKEN_BUFFER_OVERFLOW;
 c02d3a4:	2402      	movs	r4, #2
        goto error;
    }

error:
    return attest_err;
}
 c02d3a6:	4620      	mov	r0, r4
 c02d3a8:	b049      	add	sp, #292	; 0x124
 c02d3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    attest_token_add_bstr(token_ctx, EAT_CBOR_ARM_LABEL_CHALLENGE, challenge);
 c02d3ae:	462a      	mov	r2, r5
 c02d3b0:	49a3      	ldr	r1, [pc, #652]	; (c02d640 <attest_create_token+0x2c0>)
 c02d3b2:	a816      	add	r0, sp, #88	; 0x58
    uint8_t *tlv_ptr = NULL;
 c02d3b4:	ad48      	add	r5, sp, #288	; 0x120
    attest_token_add_bstr(token_ctx, EAT_CBOR_ARM_LABEL_CHALLENGE, challenge);
 c02d3b6:	f7ff ff38 	bl	c02d22a <attest_token_add_bstr>
    uint8_t *tlv_ptr = NULL;
 c02d3ba:	f845 4df8 	str.w	r4, [r5, #-248]!
    found = attest_get_tlv_by_id(BOOT_SEED, &tlv_len, &tlv_ptr);
 c02d3be:	462a      	mov	r2, r5
 c02d3c0:	a909      	add	r1, sp, #36	; 0x24
 c02d3c2:	4620      	mov	r0, r4
    struct q_useful_buf_c claim_value = {0};
 c02d3c4:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
    found = attest_get_tlv_by_id(BOOT_SEED, &tlv_len, &tlv_ptr);
 c02d3c8:	f7ff ffc5 	bl	c02d356 <attest_get_tlv_by_id.constprop.1>
    if (found == 1) {
 c02d3cc:	2801      	cmp	r0, #1
 c02d3ce:	ae0d      	add	r6, sp, #52	; 0x34
 c02d3d0:	f040 80b3 	bne.w	c02d53a <attest_create_token+0x1ba>
        claim_value.ptr = tlv_ptr + SHARED_DATA_ENTRY_HEADER_SIZE;
 c02d3d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c02d3d6:	3304      	adds	r3, #4
 c02d3d8:	930b      	str	r3, [sp, #44]	; 0x2c
        claim_value.len = tlv_len - SHARED_DATA_ENTRY_HEADER_SIZE;
 c02d3da:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 c02d3de:	3b04      	subs	r3, #4
    attest_token_add_bstr(token_ctx,
 c02d3e0:	4998      	ldr	r1, [pc, #608]	; (c02d644 <attest_create_token+0x2c4>)
 c02d3e2:	a816      	add	r0, sp, #88	; 0x58
 c02d3e4:	aa0b      	add	r2, sp, #44	; 0x2c
        claim_value.len = BOOT_SEED_SIZE;
 c02d3e6:	930c      	str	r3, [sp, #48]	; 0x30
    attest_token_add_bstr(token_ctx,
 c02d3e8:	f7ff ff1f 	bl	c02d22a <attest_token_add_bstr>
    uint32_t size = sizeof(instance_id);
 c02d3ec:	2321      	movs	r3, #33	; 0x21
    res_plat = tfm_plat_get_instance_id(&size, instance_id);
 c02d3ee:	4631      	mov	r1, r6
 c02d3f0:	4628      	mov	r0, r5
    uint32_t size = sizeof(instance_id);
 c02d3f2:	930a      	str	r3, [sp, #40]	; 0x28
    res_plat = tfm_plat_get_instance_id(&size, instance_id);
 c02d3f4:	f7ea f80c 	bl	c017410 <tfm_plat_get_instance_id>
    if (res_plat != TFM_PLAT_ERR_SUCCESS) {
 c02d3f8:	2800      	cmp	r0, #0
 c02d3fa:	f040 80a3 	bne.w	c02d544 <attest_create_token+0x1c4>
    claim_value.len  = size;
 c02d3fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    attest_token_add_bstr(token_ctx,
 c02d400:	4991      	ldr	r1, [pc, #580]	; (c02d648 <attest_create_token+0x2c8>)
 c02d402:	a816      	add	r0, sp, #88	; 0x58
 c02d404:	aa0b      	add	r2, sp, #44	; 0x2c
    claim_value.len  = size;
 c02d406:	930c      	str	r3, [sp, #48]	; 0x30
    claim_value.ptr = instance_id;
 c02d408:	960b      	str	r6, [sp, #44]	; 0x2c
    attest_token_add_bstr(token_ctx,
 c02d40a:	f7ff ff0e 	bl	c02d22a <attest_token_add_bstr>
    uint32_t size = sizeof(implementation_id);
 c02d40e:	2320      	movs	r3, #32
    res_plat = tfm_plat_get_implementation_id(&size, implementation_id);
 c02d410:	4631      	mov	r1, r6
 c02d412:	4628      	mov	r0, r5
    uint32_t size = sizeof(implementation_id);
 c02d414:	930a      	str	r3, [sp, #40]	; 0x28
    res_plat = tfm_plat_get_implementation_id(&size, implementation_id);
 c02d416:	f7ea f811 	bl	c01743c <tfm_plat_get_implementation_id>
    if (res_plat != TFM_PLAT_ERR_SUCCESS) {
 c02d41a:	2800      	cmp	r0, #0
 c02d41c:	f040 8092 	bne.w	c02d544 <attest_create_token+0x1c4>
    claim_value.len  = size;
 c02d420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    attest_token_add_bstr(token_ctx,
 c02d422:	aa0b      	add	r2, sp, #44	; 0x2c
 c02d424:	4989      	ldr	r1, [pc, #548]	; (c02d64c <attest_create_token+0x2cc>)
 c02d426:	a816      	add	r0, sp, #88	; 0x58
    claim_value.len  = size;
 c02d428:	930c      	str	r3, [sp, #48]	; 0x30
    claim_value.ptr = implementation_id;
 c02d42a:	960b      	str	r6, [sp, #44]	; 0x2c
    attest_token_add_bstr(token_ctx,
 c02d42c:	f7ff fefd 	bl	c02d22a <attest_token_add_bstr>
    res = attest_get_caller_client_id(&caller_id);
 c02d430:	4630      	mov	r0, r6
 c02d432:	f003 fe63 	bl	c0310fc <attest_get_caller_client_id>
    if (res != PSA_ATTEST_ERR_SUCCESS) {
 c02d436:	4604      	mov	r4, r0
 c02d438:	2800      	cmp	r0, #0
 c02d43a:	d1b4      	bne.n	c02d3a6 <attest_create_token+0x26>
    attest_token_add_integer(token_ctx,
 c02d43c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 c02d43e:	4984      	ldr	r1, [pc, #528]	; (c02d650 <attest_create_token+0x2d0>)
 c02d440:	17d3      	asrs	r3, r2, #31
 c02d442:	a816      	add	r0, sp, #88	; 0x58
 c02d444:	f7ff fee2 	bl	c02d20c <attest_token_add_integer>
    found = attest_get_tlv_by_id(SECURITY_LIFECYCLE, &tlv_len, &tlv_ptr);
 c02d448:	4632      	mov	r2, r6
 c02d44a:	a90b      	add	r1, sp, #44	; 0x2c
 c02d44c:	2002      	movs	r0, #2
    uint8_t *tlv_ptr = NULL;
 c02d44e:	940d      	str	r4, [sp, #52]	; 0x34
    found = attest_get_tlv_by_id(SECURITY_LIFECYCLE, &tlv_len, &tlv_ptr);
 c02d450:	f7ff ff81 	bl	c02d356 <attest_get_tlv_by_id.constprop.1>
    if (found == 1) {
 c02d454:	2801      	cmp	r0, #1
 c02d456:	d17e      	bne.n	c02d556 <attest_create_token+0x1d6>
        claim_value.len = tlv_len - SHARED_DATA_ENTRY_HEADER_SIZE;
 c02d458:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
        claim_value.ptr = tlv_ptr + SHARED_DATA_ENTRY_HEADER_SIZE;
 c02d45c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        claim_value.len = tlv_len - SHARED_DATA_ENTRY_HEADER_SIZE;
 c02d45e:	3b04      	subs	r3, #4
    switch (len) {
 c02d460:	2b02      	cmp	r3, #2
 c02d462:	d074      	beq.n	c02d54e <attest_create_token+0x1ce>
 c02d464:	2b04      	cmp	r3, #4
 c02d466:	d074      	beq.n	c02d552 <attest_create_token+0x1d2>
 c02d468:	2b01      	cmp	r3, #1
 c02d46a:	d177      	bne.n	c02d55c <attest_create_token+0x1dc>
        *value = (uint32_t)(*(uint8_t  *)(int_ptr));
 c02d46c:	7910      	ldrb	r0, [r2, #4]
        security_lifecycle = (enum tfm_security_lifecycle_t)slc_value;
 c02d46e:	b280      	uxth	r0, r0
    if (security_lifecycle < TFM_SLC_UNKNOWN ||
 c02d470:	f5b0 4fc0 	cmp.w	r0, #24576	; 0x6000
 c02d474:	d872      	bhi.n	c02d55c <attest_create_token+0x1dc>
    attest_token_add_integer(token_ctx,
 c02d476:	b282      	uxth	r2, r0
 c02d478:	2300      	movs	r3, #0
 c02d47a:	4976      	ldr	r1, [pc, #472]	; (c02d654 <attest_create_token+0x2d4>)
 c02d47c:	a816      	add	r0, sp, #88	; 0x58
 c02d47e:	f7ff fec5 	bl	c02d20c <attest_token_add_integer>
    uint32_t cnt = 0;
 c02d482:	f04f 0900 	mov.w	r9, #0
    for (module = 1; module < SW_MAX; ++module) {
 c02d486:	f04f 0801 	mov.w	r8, #1
        tlv_ptr = NULL;
 c02d48a:	2300      	movs	r3, #0
        found = attest_get_tlv_by_module(module, &tlv_id,
 c02d48c:	fa5f fa88 	uxtb.w	sl, r8
        tlv_ptr = NULL;
 c02d490:	9308      	str	r3, [sp, #32]
        found = attest_get_tlv_by_module(module, &tlv_id,
 c02d492:	f10d 021a 	add.w	r2, sp, #26
 c02d496:	ab08      	add	r3, sp, #32
 c02d498:	f10d 0117 	add.w	r1, sp, #23
 c02d49c:	4650      	mov	r0, sl
 c02d49e:	f7ff ff17 	bl	c02d2d0 <attest_get_tlv_by_module>
        if (found == -1) {
 c02d4a2:	1c42      	adds	r2, r0, #1
 c02d4a4:	d047      	beq.n	c02d536 <attest_create_token+0x1b6>
        if (found == 1) {
 c02d4a6:	2801      	cmp	r0, #1
 c02d4a8:	f040 8089 	bne.w	c02d5be <attest_create_token+0x23e>
            cnt++;
 c02d4ac:	f109 0901 	add.w	r9, r9, #1
            if (cnt == 1) {
 c02d4b0:	f1b9 0f01 	cmp.w	r9, #1
 c02d4b4:	d10c      	bne.n	c02d4d0 <attest_create_token+0x150>
                cbor_encode_ctx = attest_token_borrow_cbor_cntxt(token_ctx);
 c02d4b6:	a816      	add	r0, sp, #88	; 0x58
 c02d4b8:	f7ff fea7 	bl	c02d20a <attest_token_borrow_cbor_cntxt>
 c02d4bc:	4683      	mov	fp, r0
   QCBOREncode_AddInt64(pCtx, nLabel);
 c02d4be:	4a66      	ldr	r2, [pc, #408]	; (c02d658 <attest_create_token+0x2d8>)
 c02d4c0:	f04f 33ff 	mov.w	r3, #4294967295
 c02d4c4:	f001 fef9 	bl	c02f2ba <QCBOREncode_AddInt64>
   QCBOREncode_OpenMapOrArray(pCtx, CBOR_MAJOR_TYPE_ARRAY);
 c02d4c8:	2104      	movs	r1, #4
 c02d4ca:	4658      	mov	r0, fp
 c02d4cc:	f001 ff37 	bl	c02f33e <QCBOREncode_OpenMapOrArray>
            res = attest_add_single_sw_component(token_ctx, module, tlv_ptr);
 c02d4d0:	9b08      	ldr	r3, [sp, #32]
    tlv_id = GET_IAS_CLAIM(tlv_entry.tlv_type);
 c02d4d2:	ae06      	add	r6, sp, #24
    uint8_t *tlv_ptr = tlv_address;
 c02d4d4:	9309      	str	r3, [sp, #36]	; 0x24
 c02d4d6:	681b      	ldr	r3, [r3, #0]
    cbor_encode_ctx = attest_token_borrow_cbor_cntxt(token_ctx);
 c02d4d8:	a816      	add	r0, sp, #88	; 0x58
    tlv_len = tlv_entry.tlv_len;
 c02d4da:	f3c3 420f 	ubfx	r2, r3, #16, #16
    tlv_id = GET_IAS_CLAIM(tlv_entry.tlv_type);
 c02d4de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    tlv_len = tlv_entry.tlv_len;
 c02d4e2:	f8ad 201c 	strh.w	r2, [sp, #28]
    tlv_id = GET_IAS_CLAIM(tlv_entry.tlv_type);
 c02d4e6:	7033      	strb	r3, [r6, #0]
    cbor_encode_ctx = attest_token_borrow_cbor_cntxt(token_ctx);
 c02d4e8:	f7ff fe8f 	bl	c02d20a <attest_token_borrow_cbor_cntxt>
   QCBOREncode_OpenMapOrArray(pCtx, CBOR_MAJOR_TYPE_MAP);
 c02d4ec:	2105      	movs	r1, #5
 c02d4ee:	9002      	str	r0, [sp, #8]
    uint32_t measurement_claim_cnt = 0;
 c02d4f0:	2700      	movs	r7, #0
 c02d4f2:	f001 ff24 	bl	c02f33e <QCBOREncode_OpenMapOrArray>
        if (GET_IAS_MEASUREMENT_CLAIM(tlv_id)) {
 c02d4f6:	7831      	ldrb	r1, [r6, #0]
 c02d4f8:	08cb      	lsrs	r3, r1, #3
 c02d4fa:	d044      	beq.n	c02d586 <attest_create_token+0x206>
            if (measurement_claim_cnt == 0) {
 c02d4fc:	2f00      	cmp	r7, #0
 c02d4fe:	d14f      	bne.n	c02d5a0 <attest_create_token+0x220>
                res = attest_add_single_sw_measurment(
 c02d500:	9b09      	ldr	r3, [sp, #36]	; 0x24
    tlv_id = GET_IAS_CLAIM(tlv_entry.tlv_type);
 c02d502:	f10d 0719 	add.w	r7, sp, #25
    uint8_t *tlv_ptr = tlv_address;
 c02d506:	930a      	str	r3, [sp, #40]	; 0x28
 c02d508:	681b      	ldr	r3, [r3, #0]
    cbor_encode_ctx = attest_token_borrow_cbor_cntxt(token_ctx);
 c02d50a:	a816      	add	r0, sp, #88	; 0x58
    tlv_len = tlv_entry.tlv_len;
 c02d50c:	f3c3 420f 	ubfx	r2, r3, #16, #16
    tlv_id = GET_IAS_CLAIM(tlv_entry.tlv_type);
 c02d510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    tlv_len = tlv_entry.tlv_len;
 c02d514:	f8ad 201e 	strh.w	r2, [sp, #30]
    tlv_id = GET_IAS_CLAIM(tlv_entry.tlv_type);
 c02d518:	703b      	strb	r3, [r7, #0]
    cbor_encode_ctx = attest_token_borrow_cbor_cntxt(token_ctx);
 c02d51a:	f7ff fe76 	bl	c02d20a <attest_token_borrow_cbor_cntxt>
        if (GET_IAS_MEASUREMENT_CLAIM(tlv_id)) {
 c02d51e:	7839      	ldrb	r1, [r7, #0]
 c02d520:	08cb      	lsrs	r3, r1, #3
 c02d522:	d11d      	bne.n	c02d560 <attest_create_token+0x1e0>
        found = attest_get_tlv_by_module(module, &tlv_id,
 c02d524:	462b      	mov	r3, r5
 c02d526:	f10d 021e 	add.w	r2, sp, #30
 c02d52a:	4639      	mov	r1, r7
 c02d52c:	4650      	mov	r0, sl
 c02d52e:	f7ff fecf 	bl	c02d2d0 <attest_get_tlv_by_module>
        if (found == -1) {
 c02d532:	1c43      	adds	r3, r0, #1
 c02d534:	d123      	bne.n	c02d57e <attest_create_token+0x1fe>
            return PSA_ATTEST_ERR_CLAIM_UNAVAILABLE;
 c02d536:	2003      	movs	r0, #3
 c02d538:	e01f      	b.n	c02d57a <attest_create_token+0x1fa>
        res = tfm_plat_get_boot_seed(sizeof(boot_seed), boot_seed);
 c02d53a:	4631      	mov	r1, r6
 c02d53c:	2020      	movs	r0, #32
 c02d53e:	f7e9 ff65 	bl	c01740c <tfm_plat_get_boot_seed>
        if (res != TFM_PLAT_ERR_SUCCESS) {
 c02d542:	b108      	cbz	r0, c02d548 <attest_create_token+0x1c8>
            return PSA_ATTEST_ERR_CLAIM_UNAVAILABLE;
 c02d544:	2403      	movs	r4, #3
 c02d546:	e72e      	b.n	c02d3a6 <attest_create_token+0x26>
        claim_value.ptr = boot_seed;
 c02d548:	960b      	str	r6, [sp, #44]	; 0x2c
        claim_value.len = BOOT_SEED_SIZE;
 c02d54a:	2320      	movs	r3, #32
 c02d54c:	e748      	b.n	c02d3e0 <attest_create_token+0x60>
        *value = (uint32_t)uint16;
 c02d54e:	8890      	ldrh	r0, [r2, #4]
 c02d550:	e78d      	b.n	c02d46e <attest_create_token+0xee>
 c02d552:	6850      	ldr	r0, [r2, #4]
 c02d554:	e78b      	b.n	c02d46e <attest_create_token+0xee>
        security_lifecycle = tfm_attest_hal_get_security_lifecycle();
 c02d556:	f7ec f951 	bl	c0197fc <tfm_attest_hal_get_security_lifecycle>
 c02d55a:	e789      	b.n	c02d470 <attest_create_token+0xf0>
        return PSA_ATTEST_ERR_GENERAL;
 c02d55c:	2405      	movs	r4, #5
 c02d55e:	e722      	b.n	c02d3a6 <attest_create_token+0x26>
            claim_value.ptr = tlv_ptr + SHARED_DATA_ENTRY_HEADER_SIZE;
 c02d560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            res = attest_add_sw_component_claim(token_ctx,
 c02d562:	aa0d      	add	r2, sp, #52	; 0x34
            claim_value.ptr = tlv_ptr + SHARED_DATA_ENTRY_HEADER_SIZE;
 c02d564:	3304      	adds	r3, #4
 c02d566:	930d      	str	r3, [sp, #52]	; 0x34
            claim_value.len = tlv_len - SHARED_DATA_ENTRY_HEADER_SIZE;
 c02d568:	f8bd 301e 	ldrh.w	r3, [sp, #30]
            res = attest_add_sw_component_claim(token_ctx,
 c02d56c:	a816      	add	r0, sp, #88	; 0x58
            claim_value.len = tlv_len - SHARED_DATA_ENTRY_HEADER_SIZE;
 c02d56e:	3b04      	subs	r3, #4
 c02d570:	930e      	str	r3, [sp, #56]	; 0x38
            res = attest_add_sw_component_claim(token_ctx,
 c02d572:	f7ff fed5 	bl	c02d320 <attest_add_sw_component_claim>
            if (res != PSA_ATTEST_ERR_SUCCESS) {
 c02d576:	2800      	cmp	r0, #0
 c02d578:	d0d4      	beq.n	c02d524 <attest_create_token+0x1a4>
 c02d57a:	4604      	mov	r4, r0
 c02d57c:	e713      	b.n	c02d3a6 <attest_create_token+0x26>
    while (found) {
 c02d57e:	2800      	cmp	r0, #0
 c02d580:	d1cd      	bne.n	c02d51e <attest_create_token+0x19e>
                measurement_claim_cnt++;
 c02d582:	2701      	movs	r7, #1
 c02d584:	e00c      	b.n	c02d5a0 <attest_create_token+0x220>
            claim_value.ptr = tlv_ptr + SHARED_DATA_ENTRY_HEADER_SIZE;
 c02d586:	9b09      	ldr	r3, [sp, #36]	; 0x24
            res = attest_add_sw_component_claim(token_ctx,
 c02d588:	aa0b      	add	r2, sp, #44	; 0x2c
            claim_value.ptr = tlv_ptr + SHARED_DATA_ENTRY_HEADER_SIZE;
 c02d58a:	3304      	adds	r3, #4
 c02d58c:	930b      	str	r3, [sp, #44]	; 0x2c
            claim_value.len = tlv_len - SHARED_DATA_ENTRY_HEADER_SIZE;
 c02d58e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            res = attest_add_sw_component_claim(token_ctx,
 c02d592:	a816      	add	r0, sp, #88	; 0x58
            claim_value.len = tlv_len - SHARED_DATA_ENTRY_HEADER_SIZE;
 c02d594:	3b04      	subs	r3, #4
 c02d596:	930c      	str	r3, [sp, #48]	; 0x30
            res = attest_add_sw_component_claim(token_ctx,
 c02d598:	f7ff fec2 	bl	c02d320 <attest_add_sw_component_claim>
            if (res != PSA_ATTEST_ERR_SUCCESS) {
 c02d59c:	2800      	cmp	r0, #0
 c02d59e:	d1ec      	bne.n	c02d57a <attest_create_token+0x1fa>
        found = attest_get_tlv_by_module(module, &tlv_id,
 c02d5a0:	aa07      	add	r2, sp, #28
 c02d5a2:	4631      	mov	r1, r6
 c02d5a4:	ab09      	add	r3, sp, #36	; 0x24
 c02d5a6:	4650      	mov	r0, sl
 c02d5a8:	f7ff fe92 	bl	c02d2d0 <attest_get_tlv_by_module>
        if (found == -1) {
 c02d5ac:	1c41      	adds	r1, r0, #1
        found = attest_get_tlv_by_module(module, &tlv_id,
 c02d5ae:	4602      	mov	r2, r0
        if (found == -1) {
 c02d5b0:	d0c1      	beq.n	c02d536 <attest_create_token+0x1b6>
    while (found) {
 c02d5b2:	2800      	cmp	r0, #0
 c02d5b4:	d19f      	bne.n	c02d4f6 <attest_create_token+0x176>
   QCBOREncode_CloseMapOrArray(pCtx, CBOR_MAJOR_TYPE_MAP, NULL);
 c02d5b6:	2105      	movs	r1, #5
 c02d5b8:	9802      	ldr	r0, [sp, #8]
 c02d5ba:	f001 fee0 	bl	c02f37e <QCBOREncode_CloseMapOrArray>
    for (module = 1; module < SW_MAX; ++module) {
 c02d5be:	f108 0801 	add.w	r8, r8, #1
 c02d5c2:	f1b8 0f07 	cmp.w	r8, #7
 c02d5c6:	f47f af60 	bne.w	c02d48a <attest_create_token+0x10a>
    if (cnt != 0) {
 c02d5ca:	f1b9 0f00 	cmp.w	r9, #0
 c02d5ce:	d026      	beq.n	c02d61e <attest_create_token+0x29e>
   QCBOREncode_CloseMapOrArray(pCtx, CBOR_MAJOR_TYPE_ARRAY, NULL);
 c02d5d0:	2200      	movs	r2, #0
 c02d5d2:	2104      	movs	r1, #4
 c02d5d4:	4658      	mov	r0, fp
 c02d5d6:	f001 fed2 	bl	c02f37e <QCBOREncode_CloseMapOrArray>
    uint32_t size = sizeof(hw_version);
 c02d5da:	2312      	movs	r3, #18
 c02d5dc:	9309      	str	r3, [sp, #36]	; 0x24
    struct q_useful_buf_c claim_value = {0};
 c02d5de:	2300      	movs	r3, #0
    found = attest_get_tlv_by_id(HW_VERSION, &tlv_len, &tlv_ptr);
 c02d5e0:	462a      	mov	r2, r5
 c02d5e2:	a908      	add	r1, sp, #32
 c02d5e4:	2001      	movs	r0, #1
    struct q_useful_buf_c claim_value = {0};
 c02d5e6:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
    uint8_t *tlv_ptr = NULL;
 c02d5ea:	930a      	str	r3, [sp, #40]	; 0x28
    found = attest_get_tlv_by_id(HW_VERSION, &tlv_len, &tlv_ptr);
 c02d5ec:	f7ff feb3 	bl	c02d356 <attest_get_tlv_by_id.constprop.1>
    if (found == 1) {
 c02d5f0:	2801      	cmp	r0, #1
 c02d5f2:	d11b      	bne.n	c02d62c <attest_create_token+0x2ac>
        claim_value.ptr = tlv_ptr + SHARED_DATA_ENTRY_HEADER_SIZE;
 c02d5f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 c02d5f6:	3304      	adds	r3, #4
 c02d5f8:	930b      	str	r3, [sp, #44]	; 0x2c
        claim_value.len = tlv_len - SHARED_DATA_ENTRY_HEADER_SIZE;
 c02d5fa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 c02d5fe:	3b04      	subs	r3, #4
    attest_token_add_tstr(token_ctx,
 c02d600:	4916      	ldr	r1, [pc, #88]	; (c02d65c <attest_create_token+0x2dc>)
 c02d602:	a816      	add	r0, sp, #88	; 0x58
 c02d604:	aa0b      	add	r2, sp, #44	; 0x2c
        claim_value.len = size;
 c02d606:	930c      	str	r3, [sp, #48]	; 0x30
    attest_token_add_tstr(token_ctx,
 c02d608:	f7ff fe23 	bl	c02d252 <attest_token_add_tstr>
    token_err = attest_token_finish(&attest_token_ctx, completed_token);
 c02d60c:	9903      	ldr	r1, [sp, #12]
 c02d60e:	a816      	add	r0, sp, #88	; 0x58
 c02d610:	f7ff fe33 	bl	c02d27a <attest_token_finish>
    if (token_err) {
 c02d614:	2800      	cmp	r0, #0
 c02d616:	f43f aec6 	beq.w	c02d3a6 <attest_create_token+0x26>
    switch (token_err) {
 c02d61a:	2801      	cmp	r0, #1
 c02d61c:	e6c0      	b.n	c02d3a0 <attest_create_token+0x20>
        attest_token_add_integer(token_ctx,
 c02d61e:	2201      	movs	r2, #1
 c02d620:	2300      	movs	r3, #0
 c02d622:	490f      	ldr	r1, [pc, #60]	; (c02d660 <attest_create_token+0x2e0>)
 c02d624:	a816      	add	r0, sp, #88	; 0x58
 c02d626:	f7ff fdf1 	bl	c02d20c <attest_token_add_integer>
 c02d62a:	e7d6      	b.n	c02d5da <attest_create_token+0x25a>
        res_plat = tfm_plat_get_hw_version(&size, hw_version);
 c02d62c:	ad0d      	add	r5, sp, #52	; 0x34
 c02d62e:	4629      	mov	r1, r5
 c02d630:	a809      	add	r0, sp, #36	; 0x24
 c02d632:	f7e9 ff13 	bl	c01745c <tfm_plat_get_hw_version>
        if (res_plat != TFM_PLAT_ERR_SUCCESS) {
 c02d636:	2800      	cmp	r0, #0
 c02d638:	d184      	bne.n	c02d544 <attest_create_token+0x1c4>
        claim_value.ptr = hw_version;
 c02d63a:	950b      	str	r5, [sp, #44]	; 0x2c
        claim_value.len = size;
 c02d63c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c02d63e:	e7df      	b.n	c02d600 <attest_create_token+0x280>
 c02d640:	fffedb00 	.word	0xfffedb00
 c02d644:	fffedb04 	.word	0xfffedb04
 c02d648:	fffedaff 	.word	0xfffedaff
 c02d64c:	fffedb05 	.word	0xfffedb05
 c02d650:	fffedb07 	.word	0xfffedb07
 c02d654:	fffedb06 	.word	0xfffedb06
 c02d658:	fffedb02 	.word	0xfffedb02
 c02d65c:	fffedb03 	.word	0xfffedb03
 c02d660:	fffedb01 	.word	0xfffedb01

0c02d664 <attest_init>:
    res = attest_get_boot_data(TLV_MAJOR_IAS,
 c02d664:	f44f 7200 	mov.w	r2, #512	; 0x200
 c02d668:	4901      	ldr	r1, [pc, #4]	; (c02d670 <attest_init+0xc>)
 c02d66a:	2001      	movs	r0, #1
 c02d66c:	f003 bd4e 	b.w	c03110c <attest_get_boot_data>
 c02d670:	3003889c 	.word	0x3003889c

0c02d674 <initial_attest_get_token>:
 *    service.
 */
enum psa_attest_err_t
initial_attest_get_token(const psa_invec  *in_vec,  uint32_t num_invec,
                               psa_outvec *out_vec, uint32_t num_outvec)
{
 c02d674:	b510      	push	{r4, lr}
 c02d676:	4614      	mov	r4, r2
    struct q_useful_buf token;
    struct q_useful_buf_c completed_token;

    challenge.ptr = in_vec[0].base;
    challenge.len = in_vec[0].len;
    token.ptr = out_vec[0].base;
 c02d678:	6812      	ldr	r2, [r2, #0]
{
 c02d67a:	b086      	sub	sp, #24
    challenge.len = in_vec[0].len;
 c02d67c:	6841      	ldr	r1, [r0, #4]
    challenge.ptr = in_vec[0].base;
 c02d67e:	6803      	ldr	r3, [r0, #0]
    token.ptr = out_vec[0].base;
 c02d680:	9202      	str	r2, [sp, #8]
    token.len = out_vec[0].len;
 c02d682:	6862      	ldr	r2, [r4, #4]
    switch (challenge_size) {
 c02d684:	2930      	cmp	r1, #48	; 0x30
    challenge.ptr = in_vec[0].base;
 c02d686:	9300      	str	r3, [sp, #0]
    challenge.len = in_vec[0].len;
 c02d688:	9101      	str	r1, [sp, #4]
    token.len = out_vec[0].len;
 c02d68a:	9203      	str	r2, [sp, #12]
    switch (challenge_size) {
 c02d68c:	d003      	beq.n	c02d696 <initial_attest_get_token+0x22>
 c02d68e:	2940      	cmp	r1, #64	; 0x40
 c02d690:	d001      	beq.n	c02d696 <initial_attest_get_token+0x22>
 c02d692:	2920      	cmp	r1, #32
 c02d694:	d117      	bne.n	c02d6c6 <initial_attest_get_token+0x52>
    attest_err = attest_verify_challenge_size(challenge.len);
    if (attest_err != PSA_ATTEST_ERR_SUCCESS) {
        goto error;
    }

    attest_err = attest_check_memory_access((void *)challenge.ptr,
 c02d696:	2201      	movs	r2, #1
 c02d698:	4618      	mov	r0, r3
 c02d69a:	f003 fd2d 	bl	c0310f8 <attest_check_memory_access>
                                            challenge.len,
                                            TFM_ATTEST_ACCESS_RO);
    if (attest_err != PSA_ATTEST_ERR_SUCCESS) {
 c02d69e:	b980      	cbnz	r0, c02d6c2 <initial_attest_get_token+0x4e>
        goto error;
    }

    if (token.len == 0) {
 c02d6a0:	9903      	ldr	r1, [sp, #12]
 c02d6a2:	b181      	cbz	r1, c02d6c6 <initial_attest_get_token+0x52>
        attest_err = PSA_ATTEST_ERR_INVALID_INPUT;
        goto error;
    }

    attest_err = attest_check_memory_access(token.ptr,
 c02d6a4:	2202      	movs	r2, #2
 c02d6a6:	9802      	ldr	r0, [sp, #8]
 c02d6a8:	f003 fd26 	bl	c0310f8 <attest_check_memory_access>
                                            token.len,
                                            TFM_ATTEST_ACCESS_RW);
    if (attest_err != PSA_ATTEST_ERR_SUCCESS) {
 c02d6ac:	b948      	cbnz	r0, c02d6c2 <initial_attest_get_token+0x4e>
        goto error;
    }

    attest_err = attest_create_token(&challenge, &token, &completed_token);
 c02d6ae:	aa04      	add	r2, sp, #16
 c02d6b0:	a902      	add	r1, sp, #8
 c02d6b2:	4668      	mov	r0, sp
 c02d6b4:	f7ff fe64 	bl	c02d380 <attest_create_token>
    if (attest_err != PSA_ATTEST_ERR_SUCCESS) {
 c02d6b8:	b918      	cbnz	r0, c02d6c2 <initial_attest_get_token+0x4e>
        goto error;
    }

    out_vec[0].base = (void *)completed_token.ptr;
 c02d6ba:	9b04      	ldr	r3, [sp, #16]
 c02d6bc:	6023      	str	r3, [r4, #0]
    out_vec[0].len  = completed_token.len;
 c02d6be:	9b05      	ldr	r3, [sp, #20]
 c02d6c0:	6063      	str	r3, [r4, #4]

error:
    return attest_err;
}
 c02d6c2:	b006      	add	sp, #24
 c02d6c4:	bd10      	pop	{r4, pc}
        attest_err = PSA_ATTEST_ERR_INVALID_INPUT;
 c02d6c6:	2004      	movs	r0, #4
    return attest_err;
 c02d6c8:	e7fb      	b.n	c02d6c2 <initial_attest_get_token+0x4e>

0c02d6ca <initial_attest_get_token_size>:
    struct q_useful_buf_c challenge;
    struct q_useful_buf token;
    struct q_useful_buf_c completed_token;

    /* Only the size of the challenge is needed */
    challenge.ptr = NULL;
 c02d6ca:	2100      	movs	r1, #0
{
 c02d6cc:	b510      	push	{r4, lr}
    uint32_t  challenge_size = *(uint32_t *)in_vec[0].base;
 c02d6ce:	6803      	ldr	r3, [r0, #0]
{
 c02d6d0:	b086      	sub	sp, #24
    uint32_t  challenge_size = *(uint32_t *)in_vec[0].base;
 c02d6d2:	681b      	ldr	r3, [r3, #0]
    challenge.len = challenge_size;

    /* Special value to get the size of the token, but token is not created */
    token.ptr = NULL;
 c02d6d4:	9102      	str	r1, [sp, #8]
    challenge.len = challenge_size;
 c02d6d6:	e9cd 1300 	strd	r1, r3, [sp]
    token.len = INT32_MAX;
 c02d6da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    uint32_t *token_buf_size = (uint32_t *)out_vec[0].base;
 c02d6de:	6814      	ldr	r4, [r2, #0]

    if (out_vec[0].len < sizeof(uint32_t)) {
 c02d6e0:	6852      	ldr	r2, [r2, #4]
    token.len = INT32_MAX;
 c02d6e2:	9103      	str	r1, [sp, #12]
    if (out_vec[0].len < sizeof(uint32_t)) {
 c02d6e4:	2a03      	cmp	r2, #3
 c02d6e6:	d90f      	bls.n	c02d708 <initial_attest_get_token_size+0x3e>
    switch (challenge_size) {
 c02d6e8:	2b30      	cmp	r3, #48	; 0x30
 c02d6ea:	d003      	beq.n	c02d6f4 <initial_attest_get_token_size+0x2a>
 c02d6ec:	2b40      	cmp	r3, #64	; 0x40
 c02d6ee:	d001      	beq.n	c02d6f4 <initial_attest_get_token_size+0x2a>
 c02d6f0:	2b20      	cmp	r3, #32
 c02d6f2:	d109      	bne.n	c02d708 <initial_attest_get_token_size+0x3e>
    attest_err = attest_verify_challenge_size(challenge_size);
    if (attest_err != PSA_ATTEST_ERR_SUCCESS) {
        goto error;
    }

    attest_err = attest_create_token(&challenge, &token, &completed_token);
 c02d6f4:	aa04      	add	r2, sp, #16
 c02d6f6:	a902      	add	r1, sp, #8
 c02d6f8:	4668      	mov	r0, sp
 c02d6fa:	f7ff fe41 	bl	c02d380 <attest_create_token>
    if (attest_err != PSA_ATTEST_ERR_SUCCESS) {
 c02d6fe:	b908      	cbnz	r0, c02d704 <initial_attest_get_token_size+0x3a>
        goto error;
    }

    *token_buf_size = completed_token.len;
 c02d700:	9b05      	ldr	r3, [sp, #20]
 c02d702:	6023      	str	r3, [r4, #0]

error:
    return attest_err;
}
 c02d704:	b006      	add	sp, #24
 c02d706:	bd10      	pop	{r4, pc}
    return PSA_ATTEST_ERR_INVALID_INPUT;
 c02d708:	2004      	movs	r0, #4
    return attest_err;
 c02d70a:	e7fb      	b.n	c02d704 <initial_attest_get_token_size+0x3a>

0c02d70c <attest_register_initial_attestation_private_key>:
    return psa_curve;
}

enum psa_attest_err_t
attest_register_initial_attestation_private_key(psa_key_handle_t *private_key)
{
 c02d70c:	b570      	push	{r4, r5, r6, lr}
 c02d70e:	b0a2      	sub	sp, #136	; 0x88
 c02d710:	4604      	mov	r4, r0
    enum tfm_plat_err_t plat_res;
    psa_ecc_curve_t psa_curve;
    enum ecc_curve_t cose_curve;
    struct ecc_key_t attest_key = {0};
 c02d712:	2218      	movs	r2, #24
 c02d714:	2100      	movs	r1, #0
 c02d716:	a804      	add	r0, sp, #16
 c02d718:	f7e7 f955 	bl	c0149c6 <memset>

#define PSA_KEY_POLICY_INIT {0, 0, 0}
static inline struct psa_key_policy_s psa_key_policy_init( void )
{
    const struct psa_key_policy_s v = PSA_KEY_POLICY_INIT;
    return( v );
 c02d71c:	2300      	movs	r3, #0
    psa_key_type_t attest_key_type;
    psa_status_t crypto_res;
    psa_key_policy_t policy = psa_key_policy_init();

    /* Private key should be unregistered at this point */
    if (private_key_registered != 0) {
 c02d71e:	4d1e      	ldr	r5, [pc, #120]	; (c02d798 <attest_register_initial_attestation_private_key+0x8c>)
 c02d720:	e9cd 3301 	strd	r3, r3, [sp, #4]
 c02d724:	9303      	str	r3, [sp, #12]
 c02d726:	682b      	ldr	r3, [r5, #0]
 c02d728:	b113      	cbz	r3, c02d730 <attest_register_initial_attestation_private_key+0x24>
        return PSA_ATTEST_ERR_GENERAL;
 c02d72a:	2005      	movs	r0, #5
        return PSA_ATTEST_ERR_GENERAL;
    }
    private_key_registered = 1;

    return PSA_ATTEST_ERR_SUCCESS;
}
 c02d72c:	b022      	add	sp, #136	; 0x88
 c02d72e:	bd70      	pop	{r4, r5, r6, pc}
    crypto_res = psa_allocate_key(private_key);
 c02d730:	4620      	mov	r0, r4
 c02d732:	f7e9 fedc 	bl	c0174ee <psa_allocate_key>
    if (crypto_res != PSA_SUCCESS) {
 c02d736:	2800      	cmp	r0, #0
 c02d738:	d1f7      	bne.n	c02d72a <attest_register_initial_attestation_private_key+0x1e>
    plat_res = tfm_plat_get_initial_attest_key(key_buf, sizeof(key_buf),
 c02d73a:	f10d 0303 	add.w	r3, sp, #3
 c02d73e:	aa04      	add	r2, sp, #16
 c02d740:	2160      	movs	r1, #96	; 0x60
 c02d742:	a80a      	add	r0, sp, #40	; 0x28
 c02d744:	f7e9 fe28 	bl	c017398 <tfm_plat_get_initial_attest_key>
    if (plat_res != TFM_PLAT_ERR_SUCCESS || attest_key.priv_key == NULL) {
 c02d748:	2800      	cmp	r0, #0
 c02d74a:	d1ee      	bne.n	c02d72a <attest_register_initial_attestation_private_key+0x1e>
 c02d74c:	9b04      	ldr	r3, [sp, #16]
 c02d74e:	2b00      	cmp	r3, #0
 c02d750:	d0eb      	beq.n	c02d72a <attest_register_initial_attestation_private_key+0x1e>
 c02d752:	f89d 3003 	ldrb.w	r3, [sp, #3]
 c02d756:	3b01      	subs	r3, #1
 c02d758:	b2db      	uxtb	r3, r3
 c02d75a:	2b04      	cmp	r3, #4
 c02d75c:	d8e5      	bhi.n	c02d72a <attest_register_initial_attestation_private_key+0x1e>
 c02d75e:	4a0f      	ldr	r2, [pc, #60]	; (c02d79c <attest_register_initial_attestation_private_key+0x90>)
    psa_key_policy_set_usage(&policy,
 c02d760:	f44f 6180 	mov.w	r1, #1024	; 0x400
 c02d764:	5cd6      	ldrb	r6, [r2, r3]
 c02d766:	a801      	add	r0, sp, #4
 c02d768:	4a0d      	ldr	r2, [pc, #52]	; (c02d7a0 <attest_register_initial_attestation_private_key+0x94>)
 c02d76a:	f7ea f809 	bl	c017780 <psa_key_policy_set_usage>
    crypto_res = psa_set_key_policy(*private_key, &policy);
 c02d76e:	a901      	add	r1, sp, #4
 c02d770:	8820      	ldrh	r0, [r4, #0]
 c02d772:	f7ea f80c 	bl	c01778e <psa_set_key_policy>
    if (crypto_res != PSA_SUCCESS) {
 c02d776:	2800      	cmp	r0, #0
 c02d778:	d1d7      	bne.n	c02d72a <attest_register_initial_attestation_private_key+0x1e>
    crypto_res = psa_import_key(*private_key,
 c02d77a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 c02d77e:	f046 41e0 	orr.w	r1, r6, #1879048192	; 0x70000000
 c02d782:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
 c02d786:	8820      	ldrh	r0, [r4, #0]
 c02d788:	f7e9 fee1 	bl	c01754e <psa_import_key>
    if (crypto_res != PSA_SUCCESS) {
 c02d78c:	2800      	cmp	r0, #0
 c02d78e:	d1cc      	bne.n	c02d72a <attest_register_initial_attestation_private_key+0x1e>
    private_key_registered = 1;
 c02d790:	2301      	movs	r3, #1
 c02d792:	602b      	str	r3, [r5, #0]
    return PSA_ATTEST_ERR_SUCCESS;
 c02d794:	e7ca      	b.n	c02d72c <attest_register_initial_attestation_private_key+0x20>
 c02d796:	bf00      	nop
 c02d798:	30038aa0 	.word	0x30038aa0
 c02d79c:	0c035308 	.word	0x0c035308
 c02d7a0:	10060009 	.word	0x10060009

0c02d7a4 <attest_unregister_initial_attestation_private_key>:

enum psa_attest_err_t
attest_unregister_initial_attestation_private_key(psa_key_handle_t private_key)
{
 c02d7a4:	b510      	push	{r4, lr}
    psa_status_t crypto_res;

    /* Private key must be registered at this point */
    if (private_key_registered != 1) {
 c02d7a6:	4c06      	ldr	r4, [pc, #24]	; (c02d7c0 <attest_unregister_initial_attestation_private_key+0x1c>)
 c02d7a8:	6823      	ldr	r3, [r4, #0]
 c02d7aa:	2b01      	cmp	r3, #1
 c02d7ac:	d001      	beq.n	c02d7b2 <attest_unregister_initial_attestation_private_key+0xe>
        return PSA_ATTEST_ERR_GENERAL;
 c02d7ae:	2005      	movs	r0, #5
        return PSA_ATTEST_ERR_GENERAL;
    }
    private_key_registered = 0;

    return PSA_ATTEST_ERR_SUCCESS;
}
 c02d7b0:	bd10      	pop	{r4, pc}
    crypto_res = psa_destroy_key(private_key);
 c02d7b2:	f7e9 fef9 	bl	c0175a8 <psa_destroy_key>
    if (crypto_res != PSA_SUCCESS) {
 c02d7b6:	2800      	cmp	r0, #0
 c02d7b8:	d1f9      	bne.n	c02d7ae <attest_unregister_initial_attestation_private_key+0xa>
    private_key_registered = 0;
 c02d7ba:	6020      	str	r0, [r4, #0]
    return PSA_ATTEST_ERR_SUCCESS;
 c02d7bc:	e7f8      	b.n	c02d7b0 <attest_unregister_initial_attestation_private_key+0xc>
 c02d7be:	bf00      	nop
 c02d7c0:	30038aa0 	.word	0x30038aa0

0c02d7c4 <tfm_crypto_aead_encrypt>:
/*!@{*/
psa_status_t tfm_crypto_aead_encrypt(psa_invec in_vec[],
                                     size_t in_len,
                                     psa_outvec out_vec[],
                                     size_t out_len)
{
 c02d7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02d7c8:	4614      	mov	r4, r2
#if (TFM_CRYPTO_AEAD_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;

    if ( !((in_len == 2) || (in_len == 3)) || (out_len != 1)) {
 c02d7ca:	1e8a      	subs	r2, r1, #2
 c02d7cc:	2a01      	cmp	r2, #1
{
 c02d7ce:	b08d      	sub	sp, #52	; 0x34
    if ( !((in_len == 2) || (in_len == 3)) || (out_len != 1)) {
 c02d7d0:	d833      	bhi.n	c02d83a <tfm_crypto_aead_encrypt+0x76>
 c02d7d2:	2b01      	cmp	r3, #1
 c02d7d4:	d131      	bne.n	c02d83a <tfm_crypto_aead_encrypt+0x76>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec))) {
 c02d7d6:	6843      	ldr	r3, [r0, #4]
 c02d7d8:	2b34      	cmp	r3, #52	; 0x34
 c02d7da:	d12e      	bne.n	c02d83a <tfm_crypto_aead_encrypt+0x76>
    psa_key_handle_t key_handle = iov->key_handle;
    psa_algorithm_t alg = iov->alg;
    const uint8_t *nonce = aead_pack_input->nonce;
    size_t nonce_length = aead_pack_input->nonce_length;
    const uint8_t *plaintext = in_vec[1].base;
    size_t plaintext_length = in_vec[1].len;
 c02d7dc:	e9d0 ab02 	ldrd	sl, fp, [r0, #8]
    uint8_t *ciphertext = out_vec[0].base;
 c02d7e0:	6822      	ldr	r2, [r4, #0]
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c02d7e2:	6805      	ldr	r5, [r0, #0]
    uint8_t *ciphertext = out_vec[0].base;
 c02d7e4:	9209      	str	r2, [sp, #36]	; 0x24
    size_t ciphertext_size = out_vec[0].len;
 c02d7e6:	6862      	ldr	r2, [r4, #4]
    psa_key_handle_t key_handle = iov->key_handle;
 c02d7e8:	88ae      	ldrh	r6, [r5, #4]
    size_t ciphertext_size = out_vec[0].len;
 c02d7ea:	920a      	str	r2, [sp, #40]	; 0x28
 c02d7ec:	2200      	movs	r2, #0
    const uint8_t *additional_data = NULL;
    size_t additional_data_length = 0;

    /* Check if additional data has been passed and initialise it */
    if (in_len == 3) {
 c02d7ee:	2903      	cmp	r1, #3
    size_t nonce_length = aead_pack_input->nonce_length;
 c02d7f0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        additional_data = in_vec[2].base;
        additional_data_length = in_vec[2].len;
 c02d7f2:	bf08      	it	eq
 c02d7f4:	e9d0 7804 	ldrdeq	r7, r8, [r0, #16]
    psa_algorithm_t alg = iov->alg;
 c02d7f8:	f8d5 9010 	ldr.w	r9, [r5, #16]
    }

    /* Initialise ciphertext_length to zero */
    out_vec[0].len = 0;

    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02d7fc:	f04f 0100 	mov.w	r1, #0
    out_vec[0].len = 0;
 c02d800:	6062      	str	r2, [r4, #4]
    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02d802:	4630      	mov	r0, r6
 c02d804:	930b      	str	r3, [sp, #44]	; 0x2c
    size_t additional_data_length = 0;
 c02d806:	bf1c      	itt	ne
 c02d808:	4690      	movne	r8, r2
    const uint8_t *additional_data = NULL;
 c02d80a:	4617      	movne	r7, r2
    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02d80c:	f000 fe7c 	bl	c02e508 <tfm_crypto_check_handle_owner>
    if (status == PSA_SUCCESS) {
 c02d810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 c02d812:	b978      	cbnz	r0, c02d834 <tfm_crypto_aead_encrypt+0x70>

        status = psa_aead_encrypt(key_handle, alg, nonce, nonce_length,
 c02d814:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 c02d816:	3404      	adds	r4, #4
 c02d818:	9205      	str	r2, [sp, #20]
 c02d81a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 c02d81c:	9406      	str	r4, [sp, #24]
 c02d81e:	e9cd b203 	strd	fp, r2, [sp, #12]
 c02d822:	e9cd 8a01 	strd	r8, sl, [sp, #4]
 c02d826:	9700      	str	r7, [sp, #0]
 c02d828:	f105 0220 	add.w	r2, r5, #32
 c02d82c:	4649      	mov	r1, r9
 c02d82e:	4630      	mov	r0, r6
 c02d830:	f7fb fafc 	bl	c028e2c <mbedcrypto__psa_aead_encrypt>
                                  ciphertext, ciphertext_size, &out_vec[0].len);
    }

    return status;
#endif /* TFM_CRYPTO_AEAD_MODULE_DISABLED */
}
 c02d834:	b00d      	add	sp, #52	; 0x34
 c02d836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02d83a:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c02d83e:	e7f9      	b.n	c02d834 <tfm_crypto_aead_encrypt+0x70>

0c02d840 <tfm_crypto_aead_decrypt>:

psa_status_t tfm_crypto_aead_decrypt(psa_invec in_vec[],
                                     size_t in_len,
                                     psa_outvec out_vec[],
                                     size_t out_len)
{
 c02d840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02d844:	4614      	mov	r4, r2
#if (TFM_CRYPTO_AEAD_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;

    if ( !((in_len == 2) || (in_len == 3)) || (out_len > 1)) {
 c02d846:	1e8a      	subs	r2, r1, #2
 c02d848:	2a01      	cmp	r2, #1
{
 c02d84a:	b08d      	sub	sp, #52	; 0x34
    if ( !((in_len == 2) || (in_len == 3)) || (out_len > 1)) {
 c02d84c:	d833      	bhi.n	c02d8b6 <tfm_crypto_aead_decrypt+0x76>
 c02d84e:	2b01      	cmp	r3, #1
 c02d850:	d831      	bhi.n	c02d8b6 <tfm_crypto_aead_decrypt+0x76>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec))) {
 c02d852:	6843      	ldr	r3, [r0, #4]
 c02d854:	2b34      	cmp	r3, #52	; 0x34
 c02d856:	d12e      	bne.n	c02d8b6 <tfm_crypto_aead_decrypt+0x76>
    psa_key_handle_t key_handle = iov->key_handle;
    psa_algorithm_t alg = iov->alg;
    const uint8_t *nonce = aead_pack_input->nonce;
    size_t nonce_length = aead_pack_input->nonce_length;
    const uint8_t *ciphertext = in_vec[1].base;
    size_t ciphertext_length = in_vec[1].len;
 c02d858:	e9d0 ab02 	ldrd	sl, fp, [r0, #8]
    uint8_t *plaintext = out_vec[0].base;
 c02d85c:	6822      	ldr	r2, [r4, #0]
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c02d85e:	6805      	ldr	r5, [r0, #0]
    uint8_t *plaintext = out_vec[0].base;
 c02d860:	9209      	str	r2, [sp, #36]	; 0x24
    size_t plaintext_size = out_vec[0].len;
 c02d862:	6862      	ldr	r2, [r4, #4]
    psa_key_handle_t key_handle = iov->key_handle;
 c02d864:	88ae      	ldrh	r6, [r5, #4]
    size_t plaintext_size = out_vec[0].len;
 c02d866:	920a      	str	r2, [sp, #40]	; 0x28
 c02d868:	2200      	movs	r2, #0
    const uint8_t *additional_data = NULL;
    size_t additional_data_length = 0;

    /* Check if additional data has been passed and initialise it */
    if (in_len == 3) {
 c02d86a:	2903      	cmp	r1, #3
    size_t nonce_length = aead_pack_input->nonce_length;
 c02d86c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        additional_data = in_vec[2].base;
        additional_data_length = in_vec[2].len;
 c02d86e:	bf08      	it	eq
 c02d870:	e9d0 7804 	ldrdeq	r7, r8, [r0, #16]
    psa_algorithm_t alg = iov->alg;
 c02d874:	f8d5 9010 	ldr.w	r9, [r5, #16]
    }

    /* Initialise plaintext_length to zero */
    out_vec[0].len = 0;

    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02d878:	f04f 0100 	mov.w	r1, #0
    out_vec[0].len = 0;
 c02d87c:	6062      	str	r2, [r4, #4]
    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02d87e:	4630      	mov	r0, r6
 c02d880:	930b      	str	r3, [sp, #44]	; 0x2c
    size_t additional_data_length = 0;
 c02d882:	bf1c      	itt	ne
 c02d884:	4690      	movne	r8, r2
    const uint8_t *additional_data = NULL;
 c02d886:	4617      	movne	r7, r2
    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02d888:	f000 fe3e 	bl	c02e508 <tfm_crypto_check_handle_owner>
    if (status == PSA_SUCCESS) {
 c02d88c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 c02d88e:	b978      	cbnz	r0, c02d8b0 <tfm_crypto_aead_decrypt+0x70>

        status = psa_aead_decrypt(key_handle, alg, nonce, nonce_length,
 c02d890:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 c02d892:	3404      	adds	r4, #4
 c02d894:	9205      	str	r2, [sp, #20]
 c02d896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 c02d898:	9406      	str	r4, [sp, #24]
 c02d89a:	e9cd b203 	strd	fp, r2, [sp, #12]
 c02d89e:	e9cd 8a01 	strd	r8, sl, [sp, #4]
 c02d8a2:	9700      	str	r7, [sp, #0]
 c02d8a4:	f105 0220 	add.w	r2, r5, #32
 c02d8a8:	4649      	mov	r1, r9
 c02d8aa:	4630      	mov	r0, r6
 c02d8ac:	f7fb fb2a 	bl	c028f04 <mbedcrypto__psa_aead_decrypt>
                                  plaintext, plaintext_size, &out_vec[0].len);
    }

    return status;
#endif /* TFM_CRYPTO_AEAD_MODULE_DISABLED */
}
 c02d8b0:	b00d      	add	sp, #52	; 0x34
 c02d8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02d8b6:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c02d8ba:	e7f9      	b.n	c02d8b0 <tfm_crypto_aead_decrypt+0x70>

0c02d8bc <tfm_crypto_init_alloc>:
 *
 */

/*!@{*/
psa_status_t tfm_crypto_init_alloc(void)
{
 c02d8bc:	b508      	push	{r3, lr}
}

__attribute__ ((always_inline)) __STATIC_INLINE
void *tfm_memset(void *ptr, int value, size_t num)
{
    return (memset(ptr, value, num));
 c02d8be:	f44f 5282 	mov.w	r2, #4160	; 0x1040
 c02d8c2:	2100      	movs	r1, #0
 c02d8c4:	4802      	ldr	r0, [pc, #8]	; (c02d8d0 <tfm_crypto_init_alloc+0x14>)
 c02d8c6:	f7e7 f87e 	bl	c0149c6 <memset>
    /* Clear the contents of the local contexts */
    (void)tfm_memset(operation, 0, sizeof(operation));
    return PSA_SUCCESS;
}
 c02d8ca:	2000      	movs	r0, #0
 c02d8cc:	bd08      	pop	{r3, pc}
 c02d8ce:	bf00      	nop
 c02d8d0:	30038aa8 	.word	0x30038aa8

0c02d8d4 <tfm_crypto_operation_alloc>:
psa_status_t tfm_crypto_operation_alloc(enum tfm_crypto_operation_type type,
                                        uint32_t *handle,
                                        void **ctx)
{
    uint32_t i = 0;
    int32_t partition_id = 0;
 c02d8d4:	2300      	movs	r3, #0
{
 c02d8d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 c02d8d8:	4607      	mov	r7, r0
    int32_t partition_id = 0;
 c02d8da:	a802      	add	r0, sp, #8
 c02d8dc:	f840 3d04 	str.w	r3, [r0, #-4]!
{
 c02d8e0:	460e      	mov	r6, r1
 c02d8e2:	4615      	mov	r5, r2
    psa_status_t status;

    status = tfm_crypto_get_caller_id(&partition_id);
 c02d8e4:	f000 fd18 	bl	c02e318 <tfm_crypto_get_caller_id>
    if (status != PSA_SUCCESS) {
 c02d8e8:	b9b8      	cbnz	r0, c02d91a <tfm_crypto_operation_alloc+0x46>
        return status;
    }

    /* Handle must be initialised before calling a setup function */
    if (*handle != TFM_CRYPTO_INVALID_HANDLE) {
 c02d8ea:	6833      	ldr	r3, [r6, #0]
 c02d8ec:	b9e3      	cbnz	r3, c02d928 <tfm_crypto_operation_alloc+0x54>
        return PSA_ERROR_BAD_STATE;
    }

    /* Init to invalid values */
    if (ctx == NULL) {
 c02d8ee:	b1f5      	cbz	r5, c02d92e <tfm_crypto_operation_alloc+0x5a>
 c02d8f0:	f44f 7e02 	mov.w	lr, #520	; 0x208
        return PSA_ERROR_INVALID_ARGUMENT;
    }
    *ctx = NULL;

    for (i=0; i<TFM_CRYPTO_CONC_OPER_NUM; i++) {
        if (operation[i].in_use == TFM_CRYPTO_NOT_IN_USE) {
 c02d8f4:	4a0f      	ldr	r2, [pc, #60]	; (c02d934 <tfm_crypto_operation_alloc+0x60>)
    *ctx = NULL;
 c02d8f6:	602b      	str	r3, [r5, #0]
 c02d8f8:	fb0e f403 	mul.w	r4, lr, r3
        if (operation[i].in_use == TFM_CRYPTO_NOT_IN_USE) {
 c02d8fc:	58a1      	ldr	r1, [r4, r2]
 c02d8fe:	3301      	adds	r3, #1
 c02d900:	eb04 0c02 	add.w	ip, r4, r2
 c02d904:	b959      	cbnz	r1, c02d91e <tfm_crypto_operation_alloc+0x4a>
            operation[i].in_use = TFM_CRYPTO_IN_USE;
 c02d906:	2101      	movs	r1, #1
            operation[i].owner = partition_id;
            operation[i].type = type;
            *handle = i + 1;
            *ctx = (void *) &(operation[i].operation);
 c02d908:	3410      	adds	r4, #16
            operation[i].in_use = TFM_CRYPTO_IN_USE;
 c02d90a:	f8cc 1000 	str.w	r1, [ip]
            operation[i].owner = partition_id;
 c02d90e:	9901      	ldr	r1, [sp, #4]
            *ctx = (void *) &(operation[i].operation);
 c02d910:	4414      	add	r4, r2
            operation[i].type = type;
 c02d912:	e9cc 1701 	strd	r1, r7, [ip, #4]
            *handle = i + 1;
 c02d916:	6033      	str	r3, [r6, #0]
            *ctx = (void *) &(operation[i].operation);
 c02d918:	602c      	str	r4, [r5, #0]
            return PSA_SUCCESS;
        }
    }

    return PSA_ERROR_NOT_PERMITTED;
}
 c02d91a:	b003      	add	sp, #12
 c02d91c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (i=0; i<TFM_CRYPTO_CONC_OPER_NUM; i++) {
 c02d91e:	2b08      	cmp	r3, #8
 c02d920:	d1ea      	bne.n	c02d8f8 <tfm_crypto_operation_alloc+0x24>
    return PSA_ERROR_NOT_PERMITTED;
 c02d922:	f06f 0084 	mvn.w	r0, #132	; 0x84
 c02d926:	e7f8      	b.n	c02d91a <tfm_crypto_operation_alloc+0x46>
        return PSA_ERROR_BAD_STATE;
 c02d928:	f06f 0088 	mvn.w	r0, #136	; 0x88
 c02d92c:	e7f5      	b.n	c02d91a <tfm_crypto_operation_alloc+0x46>
        return PSA_ERROR_INVALID_ARGUMENT;
 c02d92e:	f06f 0086 	mvn.w	r0, #134	; 0x86
 c02d932:	e7f2      	b.n	c02d91a <tfm_crypto_operation_alloc+0x46>
 c02d934:	30038aa8 	.word	0x30038aa8

0c02d938 <tfm_crypto_operation_release>:

psa_status_t tfm_crypto_operation_release(uint32_t *handle)
{
    uint32_t h_val = *handle;
    int32_t partition_id = 0;
 c02d938:	2300      	movs	r3, #0
{
 c02d93a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t h_val = *handle;
 c02d93c:	6806      	ldr	r6, [r0, #0]
{
 c02d93e:	4607      	mov	r7, r0
    int32_t partition_id = 0;
 c02d940:	a802      	add	r0, sp, #8
 c02d942:	f840 3d04 	str.w	r3, [r0, #-4]!
    psa_status_t status;

    status = tfm_crypto_get_caller_id(&partition_id);
 c02d946:	f000 fce7 	bl	c02e318 <tfm_crypto_get_caller_id>
    if (status != PSA_SUCCESS) {
 c02d94a:	4605      	mov	r5, r0
 c02d94c:	bb20      	cbnz	r0, c02d998 <tfm_crypto_operation_release+0x60>
        return status;
    }

    if ( (h_val != TFM_CRYPTO_INVALID_HANDLE) &&
 c02d94e:	3e01      	subs	r6, #1
 c02d950:	2e07      	cmp	r6, #7
 c02d952:	d824      	bhi.n	c02d99e <tfm_crypto_operation_release+0x66>
         (h_val <= TFM_CRYPTO_CONC_OPER_NUM) &&
         (operation[h_val - 1].in_use == TFM_CRYPTO_IN_USE) &&
 c02d954:	f44f 7002 	mov.w	r0, #520	; 0x208
 c02d958:	4370      	muls	r0, r6
 c02d95a:	4c12      	ldr	r4, [pc, #72]	; (c02d9a4 <tfm_crypto_operation_release+0x6c>)
         (h_val <= TFM_CRYPTO_CONC_OPER_NUM) &&
 c02d95c:	5822      	ldr	r2, [r4, r0]
         (operation[h_val - 1].in_use == TFM_CRYPTO_IN_USE) &&
 c02d95e:	1823      	adds	r3, r4, r0
         (h_val <= TFM_CRYPTO_CONC_OPER_NUM) &&
 c02d960:	2a01      	cmp	r2, #1
 c02d962:	d11c      	bne.n	c02d99e <tfm_crypto_operation_release+0x66>
         (operation[h_val - 1].in_use == TFM_CRYPTO_IN_USE) &&
 c02d964:	6859      	ldr	r1, [r3, #4]
 c02d966:	9a01      	ldr	r2, [sp, #4]
 c02d968:	4291      	cmp	r1, r2
 c02d96a:	d118      	bne.n	c02d99e <tfm_crypto_operation_release+0x66>
 c02d96c:	689b      	ldr	r3, [r3, #8]
    uint8_t *mem_ptr = (uint8_t *) &(operation[index].operation);
 c02d96e:	3010      	adds	r0, #16
 c02d970:	3b01      	subs	r3, #1
 c02d972:	2b03      	cmp	r3, #3
 c02d974:	bf96      	itet	ls
 c02d976:	4a0c      	ldrls	r2, [pc, #48]	; (c02d9a8 <tfm_crypto_operation_release+0x70>)
    switch(operation[index].type) {
 c02d978:	462a      	movhi	r2, r5
 c02d97a:	f832 2013 	ldrhls.w	r2, [r2, r3, lsl #1]
    uint8_t *mem_ptr = (uint8_t *) &(operation[index].operation);
 c02d97e:	4420      	add	r0, r4
 c02d980:	2100      	movs	r1, #0
 c02d982:	f7e7 f820 	bl	c0149c6 <memset>
         (operation[h_val - 1].owner == partition_id)) {

        memset_operation_context(h_val - 1);
        operation[h_val - 1].in_use = TFM_CRYPTO_NOT_IN_USE;
 c02d986:	f44f 7302 	mov.w	r3, #520	; 0x208
 c02d98a:	435e      	muls	r6, r3
 c02d98c:	2300      	movs	r3, #0
 c02d98e:	19a2      	adds	r2, r4, r6
 c02d990:	51a3      	str	r3, [r4, r6]
        operation[h_val - 1].type = TFM_CRYPTO_OPERATION_NONE;
        operation[h_val - 1].owner = 0;
 c02d992:	e9c2 3301 	strd	r3, r3, [r2, #4]
        *handle = TFM_CRYPTO_INVALID_HANDLE;
 c02d996:	603b      	str	r3, [r7, #0]
        return PSA_SUCCESS;
    }

    return PSA_ERROR_INVALID_ARGUMENT;
}
 c02d998:	4628      	mov	r0, r5
 c02d99a:	b003      	add	sp, #12
 c02d99c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PSA_ERROR_INVALID_ARGUMENT;
 c02d99e:	f06f 0586 	mvn.w	r5, #134	; 0x86
 c02d9a2:	e7f9      	b.n	c02d998 <tfm_crypto_operation_release+0x60>
 c02d9a4:	30038aa8 	.word	0x30038aa8
 c02d9a8:	0c03530e 	.word	0x0c03530e

0c02d9ac <tfm_crypto_operation_lookup>:

psa_status_t tfm_crypto_operation_lookup(enum tfm_crypto_operation_type type,
                                         uint32_t handle,
                                         void **ctx)
{
    int32_t partition_id = 0;
 c02d9ac:	2300      	movs	r3, #0
{
 c02d9ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c02d9b0:	4606      	mov	r6, r0
    int32_t partition_id = 0;
 c02d9b2:	a802      	add	r0, sp, #8
 c02d9b4:	f840 3d04 	str.w	r3, [r0, #-4]!
{
 c02d9b8:	460c      	mov	r4, r1
 c02d9ba:	4615      	mov	r5, r2
    psa_status_t status;

    status = tfm_crypto_get_caller_id(&partition_id);
 c02d9bc:	f000 fcac 	bl	c02e318 <tfm_crypto_get_caller_id>
    if (status != PSA_SUCCESS) {
 c02d9c0:	b9a0      	cbnz	r0, c02d9ec <tfm_crypto_operation_lookup+0x40>
        return status;
    }

    if ( (handle != TFM_CRYPTO_INVALID_HANDLE) &&
 c02d9c2:	1e63      	subs	r3, r4, #1
 c02d9c4:	2b07      	cmp	r3, #7
 c02d9c6:	d813      	bhi.n	c02d9f0 <tfm_crypto_operation_lookup+0x44>
         (handle <= TFM_CRYPTO_CONC_OPER_NUM) &&
         (operation[handle - 1].in_use == TFM_CRYPTO_IN_USE) &&
 c02d9c8:	f44f 7102 	mov.w	r1, #520	; 0x208
 c02d9cc:	4359      	muls	r1, r3
 c02d9ce:	4c0a      	ldr	r4, [pc, #40]	; (c02d9f8 <tfm_crypto_operation_lookup+0x4c>)
         (handle <= TFM_CRYPTO_CONC_OPER_NUM) &&
 c02d9d0:	5862      	ldr	r2, [r4, r1]
         (operation[handle - 1].in_use == TFM_CRYPTO_IN_USE) &&
 c02d9d2:	1863      	adds	r3, r4, r1
         (handle <= TFM_CRYPTO_CONC_OPER_NUM) &&
 c02d9d4:	2a01      	cmp	r2, #1
 c02d9d6:	d10b      	bne.n	c02d9f0 <tfm_crypto_operation_lookup+0x44>
         (operation[handle - 1].in_use == TFM_CRYPTO_IN_USE) &&
 c02d9d8:	689a      	ldr	r2, [r3, #8]
 c02d9da:	42b2      	cmp	r2, r6
 c02d9dc:	d108      	bne.n	c02d9f0 <tfm_crypto_operation_lookup+0x44>
         (operation[handle - 1].type == type) &&
 c02d9de:	685a      	ldr	r2, [r3, #4]
 c02d9e0:	9b01      	ldr	r3, [sp, #4]
 c02d9e2:	429a      	cmp	r2, r3
 c02d9e4:	d104      	bne.n	c02d9f0 <tfm_crypto_operation_lookup+0x44>
         (operation[handle - 1].owner == partition_id)) {

        *ctx = (void *) &(operation[handle - 1].operation);
 c02d9e6:	3110      	adds	r1, #16
 c02d9e8:	4421      	add	r1, r4
 c02d9ea:	6029      	str	r1, [r5, #0]
        return PSA_SUCCESS;
    }

    return PSA_ERROR_BAD_STATE;
}
 c02d9ec:	b002      	add	sp, #8
 c02d9ee:	bd70      	pop	{r4, r5, r6, pc}
    return PSA_ERROR_BAD_STATE;
 c02d9f0:	f06f 0088 	mvn.w	r0, #136	; 0x88
 c02d9f4:	e7fa      	b.n	c02d9ec <tfm_crypto_operation_lookup+0x40>
 c02d9f6:	bf00      	nop
 c02d9f8:	30038aa8 	.word	0x30038aa8

0c02d9fc <tfm_crypto_asymmetric_sign>:
                                        size_t out_len)
{
#if (TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    if ((in_len != 2) || (out_len != 1)) {
 c02d9fc:	2902      	cmp	r1, #2
{
 c02d9fe:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 c02da02:	4614      	mov	r4, r2
    if ((in_len != 2) || (out_len != 1)) {
 c02da04:	d11e      	bne.n	c02da44 <tfm_crypto_asymmetric_sign+0x48>
 c02da06:	2b01      	cmp	r3, #1
 c02da08:	d11c      	bne.n	c02da44 <tfm_crypto_asymmetric_sign+0x48>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec))) {
 c02da0a:	6843      	ldr	r3, [r0, #4]
 c02da0c:	2b34      	cmp	r3, #52	; 0x34
 c02da0e:	d119      	bne.n	c02da44 <tfm_crypto_asymmetric_sign+0x48>
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    psa_key_handle_t handle = iov->key_handle;
    psa_algorithm_t alg = iov->alg;
    const uint8_t *hash = in_vec[1].base;
    size_t hash_length = in_vec[1].len;
 c02da10:	e9d0 7802 	ldrd	r7, r8, [r0, #8]
    uint8_t *signature = out_vec[0].base;
    size_t signature_size = out_vec[0].len;
 c02da14:	e9d2 9a00 	ldrd	r9, sl, [r2]
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c02da18:	6803      	ldr	r3, [r0, #0]
    psa_status_t status = tfm_crypto_check_handle_owner(handle, NULL);
 c02da1a:	2100      	movs	r1, #0
    psa_key_handle_t handle = iov->key_handle;
 c02da1c:	889d      	ldrh	r5, [r3, #4]
    psa_algorithm_t alg = iov->alg;
 c02da1e:	691e      	ldr	r6, [r3, #16]
    psa_status_t status = tfm_crypto_check_handle_owner(handle, NULL);
 c02da20:	4628      	mov	r0, r5
 c02da22:	f000 fd71 	bl	c02e508 <tfm_crypto_check_handle_owner>

    if (status != PSA_SUCCESS) {
 c02da26:	b950      	cbnz	r0, c02da3e <tfm_crypto_asymmetric_sign+0x42>
        return status;
    }

    return psa_asymmetric_sign(handle, alg, hash, hash_length,
 c02da28:	3404      	adds	r4, #4
 c02da2a:	e9cd a401 	strd	sl, r4, [sp, #4]
 c02da2e:	f8cd 9000 	str.w	r9, [sp]
 c02da32:	4643      	mov	r3, r8
 c02da34:	463a      	mov	r2, r7
 c02da36:	4631      	mov	r1, r6
 c02da38:	4628      	mov	r0, r5
 c02da3a:	f7fa fda5 	bl	c028588 <mbedcrypto__psa_asymmetric_sign>
                               signature, signature_size, &(out_vec[0].len));
#endif /* TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED */
}
 c02da3e:	b004      	add	sp, #16
 c02da40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02da44:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c02da48:	e7f9      	b.n	c02da3e <tfm_crypto_asymmetric_sign+0x42>

0c02da4a <tfm_crypto_asymmetric_verify>:
                                          size_t out_len)
{
#if (TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    if ((in_len != 3) || (out_len != 0)) {
 c02da4a:	2903      	cmp	r1, #3
{
 c02da4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if ((in_len != 3) || (out_len != 0)) {
 c02da50:	d11a      	bne.n	c02da88 <tfm_crypto_asymmetric_verify+0x3e>
 c02da52:	b9cb      	cbnz	r3, c02da88 <tfm_crypto_asymmetric_verify+0x3e>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec))) {
 c02da54:	6842      	ldr	r2, [r0, #4]
 c02da56:	2a34      	cmp	r2, #52	; 0x34
 c02da58:	d116      	bne.n	c02da88 <tfm_crypto_asymmetric_verify+0x3e>
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    psa_key_handle_t handle = iov->key_handle;
    psa_algorithm_t alg = iov->alg;
    const uint8_t *hash = in_vec[1].base;
    size_t hash_length = in_vec[1].len;
 c02da5a:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
    const uint8_t *signature = in_vec[2].base;
    size_t signature_length = in_vec[2].len;
 c02da5e:	e9d0 8904 	ldrd	r8, r9, [r0, #16]
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c02da62:	6802      	ldr	r2, [r0, #0]
    psa_status_t status = tfm_crypto_check_handle_owner(handle, NULL);
 c02da64:	4619      	mov	r1, r3
    psa_key_handle_t handle = iov->key_handle;
 c02da66:	8894      	ldrh	r4, [r2, #4]
    psa_algorithm_t alg = iov->alg;
 c02da68:	6915      	ldr	r5, [r2, #16]
    psa_status_t status = tfm_crypto_check_handle_owner(handle, NULL);
 c02da6a:	4620      	mov	r0, r4
 c02da6c:	f000 fd4c 	bl	c02e508 <tfm_crypto_check_handle_owner>

    if (status != PSA_SUCCESS) {
 c02da70:	b938      	cbnz	r0, c02da82 <tfm_crypto_asymmetric_verify+0x38>
        return status;
    }

    return psa_asymmetric_verify(handle, alg, hash, hash_length,
 c02da72:	e9cd 8900 	strd	r8, r9, [sp]
 c02da76:	463b      	mov	r3, r7
 c02da78:	4632      	mov	r2, r6
 c02da7a:	4629      	mov	r1, r5
 c02da7c:	4620      	mov	r0, r4
 c02da7e:	f7fa fe75 	bl	c02876c <mbedcrypto__psa_asymmetric_verify>
                                 signature, signature_length);
#endif /* TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED */
}
 c02da82:	b003      	add	sp, #12
 c02da84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02da88:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c02da8c:	e7f9      	b.n	c02da82 <tfm_crypto_asymmetric_verify+0x38>
	...

0c02da90 <tfm_crypto_asymmetric_encrypt>:

psa_status_t tfm_crypto_asymmetric_encrypt(psa_invec in_vec[],
                                           size_t in_len,
                                           psa_outvec out_vec[],
                                           size_t out_len)
{
 c02da90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02da94:	4614      	mov	r4, r2
#if (TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;

    if (!((in_len == 2) || (in_len == 3)) || (out_len != 1)) {
 c02da96:	1e8a      	subs	r2, r1, #2
 c02da98:	2a01      	cmp	r2, #1
{
 c02da9a:	b08b      	sub	sp, #44	; 0x2c
    if (!((in_len == 2) || (in_len == 3)) || (out_len != 1)) {
 c02da9c:	d83c      	bhi.n	c02db18 <tfm_crypto_asymmetric_encrypt+0x88>
 c02da9e:	2b01      	cmp	r3, #1
 c02daa0:	d13a      	bne.n	c02db18 <tfm_crypto_asymmetric_encrypt+0x88>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec))) {
 c02daa2:	6843      	ldr	r3, [r0, #4]
 c02daa4:	2b34      	cmp	r3, #52	; 0x34
 c02daa6:	d137      	bne.n	c02db18 <tfm_crypto_asymmetric_encrypt+0x88>
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    psa_key_handle_t handle = iov->key_handle;
    psa_algorithm_t alg = iov->alg;
    const uint8_t *input = in_vec[1].base;
    size_t input_length = in_vec[1].len;
 c02daa8:	e9d0 9a02 	ldrd	r9, sl, [r0, #8]
    uint8_t *output = out_vec[0].base;
    size_t output_size = out_vec[0].len;
    psa_key_type_t type;
    size_t key_bits;

    if (in_len == 3) {
 c02daac:	2903      	cmp	r1, #3
    size_t salt_length = 0;
 c02daae:	bf14      	ite	ne
 c02dab0:	f04f 0b00 	movne.w	fp, #0
        salt = in_vec[2].base;
        salt_length = in_vec[2].len;
 c02dab4:	e9d0 6b04 	ldrdeq	r6, fp, [r0, #16]
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c02dab8:	6803      	ldr	r3, [r0, #0]
    }

    status = tfm_crypto_check_handle_owner(handle, NULL);
 c02daba:	f04f 0100 	mov.w	r1, #0
    psa_key_handle_t handle = iov->key_handle;
 c02dabe:	889d      	ldrh	r5, [r3, #4]
    psa_algorithm_t alg = iov->alg;
 c02dac0:	f8d3 8010 	ldr.w	r8, [r3, #16]
    uint8_t *output = out_vec[0].base;
 c02dac4:	6823      	ldr	r3, [r4, #0]
    status = tfm_crypto_check_handle_owner(handle, NULL);
 c02dac6:	4628      	mov	r0, r5
    const uint8_t *salt = NULL;
 c02dac8:	bf18      	it	ne
 c02daca:	465e      	movne	r6, fp
    uint8_t *output = out_vec[0].base;
 c02dacc:	9307      	str	r3, [sp, #28]
    size_t output_size = out_vec[0].len;
 c02dace:	6867      	ldr	r7, [r4, #4]
    status = tfm_crypto_check_handle_owner(handle, NULL);
 c02dad0:	f000 fd1a 	bl	c02e508 <tfm_crypto_check_handle_owner>
    if (status != PSA_SUCCESS) {
 c02dad4:	b9e8      	cbnz	r0, c02db12 <tfm_crypto_asymmetric_encrypt+0x82>
        return status;
    }

    status = psa_get_key_information(handle, &type, &key_bits);
 c02dad6:	aa09      	add	r2, sp, #36	; 0x24
 c02dad8:	a908      	add	r1, sp, #32
 c02dada:	4628      	mov	r0, r5
 c02dadc:	f7f9 fdbb 	bl	c027656 <mbedcrypto__psa_get_key_information>
    if (status != PSA_SUCCESS) {
 c02dae0:	b9b8      	cbnz	r0, c02db12 <tfm_crypto_asymmetric_encrypt+0x82>
        return status;
    }

    /* Check that the output buffer is large enough */
    if (output_size < PSA_ASYMMETRIC_ENCRYPT_OUTPUT_SIZE(type, key_bits, alg)) {
 c02dae2:	9a08      	ldr	r2, [sp, #32]
 c02dae4:	490f      	ldr	r1, [pc, #60]	; (c02db24 <tfm_crypto_asymmetric_encrypt+0x94>)
 c02dae6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 c02daea:	428a      	cmp	r2, r1
 c02daec:	d104      	bne.n	c02daf8 <tfm_crypto_asymmetric_encrypt+0x68>
 c02daee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 c02daf0:	3207      	adds	r2, #7
 c02daf2:	ebb7 0fd2 	cmp.w	r7, r2, lsr #3
 c02daf6:	d312      	bcc.n	c02db1e <tfm_crypto_asymmetric_encrypt+0x8e>
        return PSA_ERROR_BUFFER_TOO_SMALL;
    }

    return psa_asymmetric_encrypt(handle, alg, input, input_length,
 c02daf8:	9b07      	ldr	r3, [sp, #28]
 c02dafa:	3404      	adds	r4, #4
 c02dafc:	e9cd b301 	strd	fp, r3, [sp, #4]
 c02db00:	e9cd 7403 	strd	r7, r4, [sp, #12]
 c02db04:	9600      	str	r6, [sp, #0]
 c02db06:	4653      	mov	r3, sl
 c02db08:	464a      	mov	r2, r9
 c02db0a:	4641      	mov	r1, r8
 c02db0c:	4628      	mov	r0, r5
 c02db0e:	f7fa fee3 	bl	c0288d8 <mbedcrypto__psa_asymmetric_encrypt>
                                  salt, salt_length,
                                  output, output_size, &(out_vec[0].len));
#endif /* TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED */
}
 c02db12:	b00b      	add	sp, #44	; 0x2c
 c02db14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02db18:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c02db1c:	e7f9      	b.n	c02db12 <tfm_crypto_asymmetric_encrypt+0x82>
        return PSA_ERROR_BUFFER_TOO_SMALL;
 c02db1e:	f06f 0089 	mvn.w	r0, #137	; 0x89
 c02db22:	e7f6      	b.n	c02db12 <tfm_crypto_asymmetric_encrypt+0x82>
 c02db24:	60010000 	.word	0x60010000

0c02db28 <tfm_crypto_asymmetric_decrypt>:

psa_status_t tfm_crypto_asymmetric_decrypt(psa_invec in_vec[],
                                           size_t in_len,
                                           psa_outvec out_vec[],
                                           size_t out_len)
{
 c02db28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02db2c:	4614      	mov	r4, r2
#if (TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    if (!((in_len == 2) || (in_len == 3)) || (out_len != 1)) {
 c02db2e:	1e8a      	subs	r2, r1, #2
 c02db30:	2a01      	cmp	r2, #1
{
 c02db32:	b089      	sub	sp, #36	; 0x24
    if (!((in_len == 2) || (in_len == 3)) || (out_len != 1)) {
 c02db34:	d829      	bhi.n	c02db8a <tfm_crypto_asymmetric_decrypt+0x62>
 c02db36:	2b01      	cmp	r3, #1
 c02db38:	d127      	bne.n	c02db8a <tfm_crypto_asymmetric_decrypt+0x62>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec))) {
 c02db3a:	6843      	ldr	r3, [r0, #4]
 c02db3c:	2b34      	cmp	r3, #52	; 0x34
 c02db3e:	d124      	bne.n	c02db8a <tfm_crypto_asymmetric_decrypt+0x62>
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    psa_key_handle_t handle = iov->key_handle;
    psa_algorithm_t alg = iov->alg;
    const uint8_t *input = in_vec[1].base;
    size_t input_length = in_vec[1].len;
 c02db40:	e9d0 8902 	ldrd	r8, r9, [r0, #8]
    const uint8_t *salt = NULL;
    size_t salt_length = 0;
    uint8_t *output = out_vec[0].base;
    size_t output_size = out_vec[0].len;
 c02db44:	e9d4 ab00 	ldrd	sl, fp, [r4]
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c02db48:	6803      	ldr	r3, [r0, #0]
    psa_status_t status;

    if (in_len == 3) {
 c02db4a:	2903      	cmp	r1, #3
    psa_key_handle_t handle = iov->key_handle;
 c02db4c:	889d      	ldrh	r5, [r3, #4]
    psa_algorithm_t alg = iov->alg;
 c02db4e:	691f      	ldr	r7, [r3, #16]
    size_t salt_length = 0;
 c02db50:	bf14      	ite	ne
 c02db52:	2300      	movne	r3, #0
        salt = in_vec[2].base;
        salt_length = in_vec[2].len;
 c02db54:	e9d0 6304 	ldrdeq	r6, r3, [r0, #16]
    }

    status = tfm_crypto_check_handle_owner(handle, NULL);
 c02db58:	f04f 0100 	mov.w	r1, #0
 c02db5c:	4628      	mov	r0, r5
    const uint8_t *salt = NULL;
 c02db5e:	bf18      	it	ne
 c02db60:	461e      	movne	r6, r3
 c02db62:	9307      	str	r3, [sp, #28]
    status = tfm_crypto_check_handle_owner(handle, NULL);
 c02db64:	f000 fcd0 	bl	c02e508 <tfm_crypto_check_handle_owner>
    if (status != PSA_SUCCESS) {
 c02db68:	9b07      	ldr	r3, [sp, #28]
 c02db6a:	b958      	cbnz	r0, c02db84 <tfm_crypto_asymmetric_decrypt+0x5c>
        return status;
    }

    return psa_asymmetric_decrypt(handle, alg, input, input_length,
 c02db6c:	3404      	adds	r4, #4
 c02db6e:	e9cd 3a01 	strd	r3, sl, [sp, #4]
 c02db72:	e9cd b403 	strd	fp, r4, [sp, #12]
 c02db76:	9600      	str	r6, [sp, #0]
 c02db78:	464b      	mov	r3, r9
 c02db7a:	4642      	mov	r2, r8
 c02db7c:	4639      	mov	r1, r7
 c02db7e:	4628      	mov	r0, r5
 c02db80:	f7fa ff1e 	bl	c0289c0 <mbedcrypto__psa_asymmetric_decrypt>
                                  salt, salt_length,
                                  output, output_size, &(out_vec[0].len));
#endif /* TFM_CRYPTO_ASYMMETRIC_MODULE_DISABLED */
}
 c02db84:	b009      	add	sp, #36	; 0x24
 c02db86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02db8a:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c02db8e:	e7f9      	b.n	c02db84 <tfm_crypto_asymmetric_decrypt+0x5c>

0c02db90 <tfm_crypto_cipher_generate_iv>:
/*!@{*/
psa_status_t tfm_crypto_cipher_generate_iv(psa_invec in_vec[],
                                           size_t in_len,
                                           psa_outvec out_vec[],
                                           size_t out_len)
{
 c02db90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 c02db94:	4615      	mov	r5, r2
#if (TFM_CRYPTO_CIPHER_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_cipher_operation_t *operation = NULL;
 c02db96:	2200      	movs	r2, #0

    if ((in_len != 1) || (out_len != 2)) {
 c02db98:	2901      	cmp	r1, #1
{
 c02db9a:	4604      	mov	r4, r0
    psa_cipher_operation_t *operation = NULL;
 c02db9c:	9201      	str	r2, [sp, #4]
{
 c02db9e:	4608      	mov	r0, r1
    if ((in_len != 1) || (out_len != 2)) {
 c02dba0:	d124      	bne.n	c02dbec <tfm_crypto_cipher_generate_iv+0x5c>
 c02dba2:	2b02      	cmp	r3, #2
 c02dba4:	d122      	bne.n	c02dbec <tfm_crypto_cipher_generate_iv+0x5c>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02dba6:	6863      	ldr	r3, [r4, #4]
 c02dba8:	2b34      	cmp	r3, #52	; 0x34
 c02dbaa:	d11f      	bne.n	c02dbec <tfm_crypto_cipher_generate_iv+0x5c>
 c02dbac:	686b      	ldr	r3, [r5, #4]
 c02dbae:	2b04      	cmp	r3, #4
 c02dbb0:	d11c      	bne.n	c02dbec <tfm_crypto_cipher_generate_iv+0x5c>

    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
    unsigned char *iv = out_vec[1].base;
    size_t iv_size = out_vec[1].len;
 c02dbb2:	e9d5 8902 	ldrd	r8, r9, [r5, #8]
    uint32_t handle = iov->op_handle;
 c02dbb6:	6823      	ldr	r3, [r4, #0]
    uint32_t *handle_out = out_vec[0].base;
 c02dbb8:	682e      	ldr	r6, [r5, #0]
    uint32_t handle = iov->op_handle;
 c02dbba:	699f      	ldr	r7, [r3, #24]

    /* Init the handle in the operation with the one passed from the iov */
    *handle_out = iov->op_handle;

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_CIPHER_OPERATION,
 c02dbbc:	aa01      	add	r2, sp, #4
    *handle_out = iov->op_handle;
 c02dbbe:	6037      	str	r7, [r6, #0]
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_CIPHER_OPERATION,
 c02dbc0:	4639      	mov	r1, r7
 c02dbc2:	f7ff fef3 	bl	c02d9ac <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&operation);
    if (status != PSA_SUCCESS) {
 c02dbc6:	4604      	mov	r4, r0
 c02dbc8:	b960      	cbnz	r0, c02dbe4 <tfm_crypto_cipher_generate_iv+0x54>
        return status;
    }

    *handle_out = handle;
 c02dbca:	6037      	str	r7, [r6, #0]

    status = psa_cipher_generate_iv(operation, iv, iv_size, &out_vec[1].len);
 c02dbcc:	f105 030c 	add.w	r3, r5, #12
 c02dbd0:	464a      	mov	r2, r9
 c02dbd2:	4641      	mov	r1, r8
 c02dbd4:	9801      	ldr	r0, [sp, #4]
 c02dbd6:	f7fb f84f 	bl	c028c78 <mbedcrypto__psa_cipher_generate_iv>
    if (status != PSA_SUCCESS) {
 c02dbda:	4604      	mov	r4, r0
 c02dbdc:	b110      	cbz	r0, c02dbe4 <tfm_crypto_cipher_generate_iv+0x54>
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02dbde:	4630      	mov	r0, r6
 c02dbe0:	f7ff feaa 	bl	c02d938 <tfm_crypto_operation_release>
        return status;
    }

    return status;
#endif /* TFM_CRYPTO_CIPHER_MODULE_DISABLED */
}
 c02dbe4:	4620      	mov	r0, r4
 c02dbe6:	b003      	add	sp, #12
 c02dbe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02dbec:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02dbf0:	e7f8      	b.n	c02dbe4 <tfm_crypto_cipher_generate_iv+0x54>

0c02dbf2 <tfm_crypto_cipher_set_iv>:

psa_status_t tfm_crypto_cipher_set_iv(psa_invec in_vec[],
                                      size_t in_len,
                                      psa_outvec out_vec[],
                                      size_t out_len)
{
 c02dbf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if (TFM_CRYPTO_CIPHER_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_cipher_operation_t *operation = NULL;
 c02dbf4:	2400      	movs	r4, #0

    if ((in_len != 2) || (out_len != 1)) {
 c02dbf6:	2902      	cmp	r1, #2
    psa_cipher_operation_t *operation = NULL;
 c02dbf8:	9401      	str	r4, [sp, #4]
    if ((in_len != 2) || (out_len != 1)) {
 c02dbfa:	d120      	bne.n	c02dc3e <tfm_crypto_cipher_set_iv+0x4c>
 c02dbfc:	2b01      	cmp	r3, #1
 c02dbfe:	d11e      	bne.n	c02dc3e <tfm_crypto_cipher_set_iv+0x4c>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02dc00:	6841      	ldr	r1, [r0, #4]
 c02dc02:	2934      	cmp	r1, #52	; 0x34
 c02dc04:	d11b      	bne.n	c02dc3e <tfm_crypto_cipher_set_iv+0x4c>
 c02dc06:	6851      	ldr	r1, [r2, #4]
 c02dc08:	2904      	cmp	r1, #4
 c02dc0a:	d118      	bne.n	c02dc3e <tfm_crypto_cipher_set_iv+0x4c>
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
    const unsigned char *iv = in_vec[1].base;
    size_t iv_length = in_vec[1].len;
 c02dc0c:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
    uint32_t handle = iov->op_handle;
 c02dc10:	6801      	ldr	r1, [r0, #0]
    uint32_t *handle_out = out_vec[0].base;
 c02dc12:	6815      	ldr	r5, [r2, #0]
    uint32_t handle = iov->op_handle;
 c02dc14:	6989      	ldr	r1, [r1, #24]

    /* Init the handle in the operation with the one passed from the iov */
    *handle_out = iov->op_handle;

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_CIPHER_OPERATION,
 c02dc16:	aa01      	add	r2, sp, #4
    *handle_out = iov->op_handle;
 c02dc18:	6029      	str	r1, [r5, #0]
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_CIPHER_OPERATION,
 c02dc1a:	4618      	mov	r0, r3
 c02dc1c:	f7ff fec6 	bl	c02d9ac <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&operation);
    if (status != PSA_SUCCESS) {
 c02dc20:	4604      	mov	r4, r0
 c02dc22:	b948      	cbnz	r0, c02dc38 <tfm_crypto_cipher_set_iv+0x46>
        return status;
    }

    status = psa_cipher_set_iv(operation, iv, iv_length);
 c02dc24:	463a      	mov	r2, r7
 c02dc26:	4631      	mov	r1, r6
 c02dc28:	9801      	ldr	r0, [sp, #4]
 c02dc2a:	f7fb f803 	bl	c028c34 <mbedcrypto__psa_cipher_set_iv>
    if (status != PSA_SUCCESS) {
 c02dc2e:	4604      	mov	r4, r0
 c02dc30:	b110      	cbz	r0, c02dc38 <tfm_crypto_cipher_set_iv+0x46>
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02dc32:	4628      	mov	r0, r5
 c02dc34:	f7ff fe80 	bl	c02d938 <tfm_crypto_operation_release>
        return status;
    }

    return status;
#endif /* TFM_CRYPTO_CIPHER_MODULE_DISABLED */
}
 c02dc38:	4620      	mov	r0, r4
 c02dc3a:	b003      	add	sp, #12
 c02dc3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02dc3e:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02dc42:	e7f9      	b.n	c02dc38 <tfm_crypto_cipher_set_iv+0x46>

0c02dc44 <tfm_crypto_cipher_encrypt_setup>:

psa_status_t tfm_crypto_cipher_encrypt_setup(psa_invec in_vec[],
                                             size_t in_len,
                                             psa_outvec out_vec[],
                                             size_t out_len)
{
 c02dc44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 c02dc48:	461f      	mov	r7, r3
#if (TFM_CRYPTO_CIPHER_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_cipher_operation_t *operation = NULL;
 c02dc4a:	2300      	movs	r3, #0

    if ((in_len != 1) || (out_len != 1)) {
 c02dc4c:	2901      	cmp	r1, #1
    psa_cipher_operation_t *operation = NULL;
 c02dc4e:	9300      	str	r3, [sp, #0]
    if ((in_len != 1) || (out_len != 1)) {
 c02dc50:	d12b      	bne.n	c02dcaa <tfm_crypto_cipher_encrypt_setup+0x66>
 c02dc52:	2f01      	cmp	r7, #1
 c02dc54:	d129      	bne.n	c02dcaa <tfm_crypto_cipher_encrypt_setup+0x66>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((out_vec[0].len != sizeof(uint32_t)) ||
 c02dc56:	6851      	ldr	r1, [r2, #4]
 c02dc58:	2904      	cmp	r1, #4
 c02dc5a:	d126      	bne.n	c02dcaa <tfm_crypto_cipher_encrypt_setup+0x66>
 c02dc5c:	6841      	ldr	r1, [r0, #4]
 c02dc5e:	2934      	cmp	r1, #52	; 0x34
 c02dc60:	d123      	bne.n	c02dcaa <tfm_crypto_cipher_encrypt_setup+0x66>
        (in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec))) {
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c02dc62:	6801      	ldr	r1, [r0, #0]
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
 c02dc64:	6815      	ldr	r5, [r2, #0]
    uint32_t handle = iov->op_handle;
 c02dc66:	6988      	ldr	r0, [r1, #24]
    psa_key_handle_t key_handle = iov->key_handle;
 c02dc68:	888e      	ldrh	r6, [r1, #4]
    uint32_t handle = iov->op_handle;
 c02dc6a:	9001      	str	r0, [sp, #4]
    psa_algorithm_t alg = iov->alg;
 c02dc6c:	f8d1 8010 	ldr.w	r8, [r1, #16]

    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02dc70:	4630      	mov	r0, r6
 c02dc72:	4619      	mov	r1, r3
 c02dc74:	f000 fc48 	bl	c02e508 <tfm_crypto_check_handle_owner>
    if (status != PSA_SUCCESS) {
 c02dc78:	4604      	mov	r4, r0
 c02dc7a:	b990      	cbnz	r0, c02dca2 <tfm_crypto_cipher_encrypt_setup+0x5e>
        return status;
    }

    /* Allocate the operation context in the secure world */
    status = tfm_crypto_operation_alloc(TFM_CRYPTO_CIPHER_OPERATION,
 c02dc7c:	466a      	mov	r2, sp
 c02dc7e:	a901      	add	r1, sp, #4
 c02dc80:	4638      	mov	r0, r7
 c02dc82:	f7ff fe27 	bl	c02d8d4 <tfm_crypto_operation_alloc>
                                        &handle,
                                        (void **)&operation);
    if (status != PSA_SUCCESS) {
 c02dc86:	4604      	mov	r4, r0
 c02dc88:	b958      	cbnz	r0, c02dca2 <tfm_crypto_cipher_encrypt_setup+0x5e>
        return status;
    }

    *handle_out = handle;
 c02dc8a:	9b01      	ldr	r3, [sp, #4]

    status = psa_cipher_encrypt_setup(operation, key_handle, alg);
 c02dc8c:	4642      	mov	r2, r8
    *handle_out = handle;
 c02dc8e:	602b      	str	r3, [r5, #0]
    status = psa_cipher_encrypt_setup(operation, key_handle, alg);
 c02dc90:	4631      	mov	r1, r6
 c02dc92:	9800      	ldr	r0, [sp, #0]
 c02dc94:	f7fa ffc8 	bl	c028c28 <mbedcrypto__psa_cipher_encrypt_setup>
    if (status != PSA_SUCCESS) {
 c02dc98:	4604      	mov	r4, r0
 c02dc9a:	b110      	cbz	r0, c02dca2 <tfm_crypto_cipher_encrypt_setup+0x5e>
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02dc9c:	4628      	mov	r0, r5
 c02dc9e:	f7ff fe4b 	bl	c02d938 <tfm_crypto_operation_release>
        return status;
    }

    return status;
#endif /* TFM_CRYPTO_CIPHER_MODULE_DISABLED */
}
 c02dca2:	4620      	mov	r0, r4
 c02dca4:	b002      	add	sp, #8
 c02dca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02dcaa:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02dcae:	e7f8      	b.n	c02dca2 <tfm_crypto_cipher_encrypt_setup+0x5e>

0c02dcb0 <tfm_crypto_cipher_decrypt_setup>:

psa_status_t tfm_crypto_cipher_decrypt_setup(psa_invec in_vec[],
                                             size_t in_len,
                                             psa_outvec out_vec[],
                                             size_t out_len)
{
 c02dcb0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 c02dcb4:	461f      	mov	r7, r3
#if (TFM_CRYPTO_CIPHER_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_cipher_operation_t *operation = NULL;
 c02dcb6:	2300      	movs	r3, #0

    if ((in_len != 1) || (out_len != 1)) {
 c02dcb8:	2901      	cmp	r1, #1
    psa_cipher_operation_t *operation = NULL;
 c02dcba:	9300      	str	r3, [sp, #0]
    if ((in_len != 1) || (out_len != 1)) {
 c02dcbc:	d12b      	bne.n	c02dd16 <tfm_crypto_cipher_decrypt_setup+0x66>
 c02dcbe:	2f01      	cmp	r7, #1
 c02dcc0:	d129      	bne.n	c02dd16 <tfm_crypto_cipher_decrypt_setup+0x66>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((out_vec[0].len != sizeof(uint32_t)) ||
 c02dcc2:	6851      	ldr	r1, [r2, #4]
 c02dcc4:	2904      	cmp	r1, #4
 c02dcc6:	d126      	bne.n	c02dd16 <tfm_crypto_cipher_decrypt_setup+0x66>
 c02dcc8:	6841      	ldr	r1, [r0, #4]
 c02dcca:	2934      	cmp	r1, #52	; 0x34
 c02dccc:	d123      	bne.n	c02dd16 <tfm_crypto_cipher_decrypt_setup+0x66>
        (in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec))) {
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c02dcce:	6801      	ldr	r1, [r0, #0]
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
 c02dcd0:	6815      	ldr	r5, [r2, #0]
    uint32_t handle = iov->op_handle;
 c02dcd2:	6988      	ldr	r0, [r1, #24]
    psa_key_handle_t key_handle = iov->key_handle;
 c02dcd4:	888e      	ldrh	r6, [r1, #4]
    uint32_t handle = iov->op_handle;
 c02dcd6:	9001      	str	r0, [sp, #4]
    psa_algorithm_t alg = iov->alg;
 c02dcd8:	f8d1 8010 	ldr.w	r8, [r1, #16]

    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02dcdc:	4630      	mov	r0, r6
 c02dcde:	4619      	mov	r1, r3
 c02dce0:	f000 fc12 	bl	c02e508 <tfm_crypto_check_handle_owner>
    if (status != PSA_SUCCESS) {
 c02dce4:	4604      	mov	r4, r0
 c02dce6:	b990      	cbnz	r0, c02dd0e <tfm_crypto_cipher_decrypt_setup+0x5e>
        return status;
    }

    /* Allocate the operation context in the secure world */
    status = tfm_crypto_operation_alloc(TFM_CRYPTO_CIPHER_OPERATION,
 c02dce8:	466a      	mov	r2, sp
 c02dcea:	a901      	add	r1, sp, #4
 c02dcec:	4638      	mov	r0, r7
 c02dcee:	f7ff fdf1 	bl	c02d8d4 <tfm_crypto_operation_alloc>
                                        &handle,
                                        (void **)&operation);
    if (status != PSA_SUCCESS) {
 c02dcf2:	4604      	mov	r4, r0
 c02dcf4:	b958      	cbnz	r0, c02dd0e <tfm_crypto_cipher_decrypt_setup+0x5e>
        return status;
    }

    *handle_out = handle;
 c02dcf6:	9b01      	ldr	r3, [sp, #4]

    status = psa_cipher_decrypt_setup(operation, key_handle, alg);
 c02dcf8:	4642      	mov	r2, r8
    *handle_out = handle;
 c02dcfa:	602b      	str	r3, [r5, #0]
    status = psa_cipher_decrypt_setup(operation, key_handle, alg);
 c02dcfc:	4631      	mov	r1, r6
 c02dcfe:	9800      	ldr	r0, [sp, #0]
 c02dd00:	f7fa ff95 	bl	c028c2e <mbedcrypto__psa_cipher_decrypt_setup>
    if (status != PSA_SUCCESS) {
 c02dd04:	4604      	mov	r4, r0
 c02dd06:	b110      	cbz	r0, c02dd0e <tfm_crypto_cipher_decrypt_setup+0x5e>
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02dd08:	4628      	mov	r0, r5
 c02dd0a:	f7ff fe15 	bl	c02d938 <tfm_crypto_operation_release>
        return status;
    }

    return status;
#endif /* TFM_CRYPTO_CIPHER_MODULE_DISABLED */
}
 c02dd0e:	4620      	mov	r0, r4
 c02dd10:	b002      	add	sp, #8
 c02dd12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02dd16:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02dd1a:	e7f8      	b.n	c02dd0e <tfm_crypto_cipher_decrypt_setup+0x5e>

0c02dd1c <tfm_crypto_cipher_update>:

psa_status_t tfm_crypto_cipher_update(psa_invec in_vec[],
                                      size_t in_len,
                                      psa_outvec out_vec[],
                                      size_t out_len)
{
 c02dd1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 c02dd20:	4615      	mov	r5, r2
#if (TFM_CRYPTO_CIPHER_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_cipher_operation_t *operation = NULL;
 c02dd22:	2200      	movs	r2, #0

    if ((in_len != 2) || (out_len != 2)) {
 c02dd24:	2902      	cmp	r1, #2
    psa_cipher_operation_t *operation = NULL;
 c02dd26:	9203      	str	r2, [sp, #12]
    if ((in_len != 2) || (out_len != 2)) {
 c02dd28:	d128      	bne.n	c02dd7c <tfm_crypto_cipher_update+0x60>
 c02dd2a:	2b02      	cmp	r3, #2
 c02dd2c:	d126      	bne.n	c02dd7c <tfm_crypto_cipher_update+0x60>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02dd2e:	6843      	ldr	r3, [r0, #4]
 c02dd30:	2b34      	cmp	r3, #52	; 0x34
 c02dd32:	d123      	bne.n	c02dd7c <tfm_crypto_cipher_update+0x60>
 c02dd34:	686b      	ldr	r3, [r5, #4]
 c02dd36:	2b04      	cmp	r3, #4
 c02dd38:	d120      	bne.n	c02dd7c <tfm_crypto_cipher_update+0x60>
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
    const uint8_t *input = in_vec[1].base;
    size_t input_length = in_vec[1].len;
 c02dd3a:	e9d0 7802 	ldrd	r7, r8, [r0, #8]
    unsigned char *output = out_vec[1].base;
    size_t output_size = out_vec[1].len;
 c02dd3e:	e9d5 9a02 	ldrd	r9, sl, [r5, #8]
    uint32_t handle = iov->op_handle;
 c02dd42:	6803      	ldr	r3, [r0, #0]
    uint32_t *handle_out = out_vec[0].base;
 c02dd44:	682e      	ldr	r6, [r5, #0]
    uint32_t handle = iov->op_handle;
 c02dd46:	6999      	ldr	r1, [r3, #24]

    /* Initialise the output_length to zero */
    out_vec[1].len = 0;

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_CIPHER_OPERATION,
 c02dd48:	2001      	movs	r0, #1
    *handle_out = iov->op_handle;
 c02dd4a:	6031      	str	r1, [r6, #0]
    out_vec[1].len = 0;
 c02dd4c:	60ea      	str	r2, [r5, #12]
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_CIPHER_OPERATION,
 c02dd4e:	aa03      	add	r2, sp, #12
 c02dd50:	f7ff fe2c 	bl	c02d9ac <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&operation);
    if (status != PSA_SUCCESS) {
 c02dd54:	4604      	mov	r4, r0
 c02dd56:	b968      	cbnz	r0, c02dd74 <tfm_crypto_cipher_update+0x58>
        return status;
    }

    status = psa_cipher_update(operation, input, input_length,
 c02dd58:	350c      	adds	r5, #12
 c02dd5a:	e9cd a500 	strd	sl, r5, [sp]
 c02dd5e:	464b      	mov	r3, r9
 c02dd60:	4642      	mov	r2, r8
 c02dd62:	4639      	mov	r1, r7
 c02dd64:	9803      	ldr	r0, [sp, #12]
 c02dd66:	f7fa ffb1 	bl	c028ccc <mbedcrypto__psa_cipher_update>
                               output, output_size, &out_vec[1].len);
    if (status != PSA_SUCCESS) {
 c02dd6a:	4604      	mov	r4, r0
 c02dd6c:	b110      	cbz	r0, c02dd74 <tfm_crypto_cipher_update+0x58>
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02dd6e:	4630      	mov	r0, r6
 c02dd70:	f7ff fde2 	bl	c02d938 <tfm_crypto_operation_release>
        return status;
    }

    return status;
#endif /* TFM_CRYPTO_CIPHER_MODULE_DISABLED */
}
 c02dd74:	4620      	mov	r0, r4
 c02dd76:	b004      	add	sp, #16
 c02dd78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02dd7c:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02dd80:	e7f8      	b.n	c02dd74 <tfm_crypto_cipher_update+0x58>

0c02dd82 <tfm_crypto_cipher_finish>:

psa_status_t tfm_crypto_cipher_finish(psa_invec in_vec[],
                                      size_t in_len,
                                      psa_outvec out_vec[],
                                      size_t out_len)
{
 c02dd82:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 c02dd86:	4615      	mov	r5, r2
#if (TFM_CRYPTO_CIPHER_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_cipher_operation_t *operation = NULL;
 c02dd88:	2200      	movs	r2, #0

    if ((in_len != 1) || (out_len != 2)) {
 c02dd8a:	2901      	cmp	r1, #1
{
 c02dd8c:	4604      	mov	r4, r0
    psa_cipher_operation_t *operation = NULL;
 c02dd8e:	9201      	str	r2, [sp, #4]
{
 c02dd90:	4608      	mov	r0, r1
    if ((in_len != 1) || (out_len != 2)) {
 c02dd92:	d127      	bne.n	c02dde4 <tfm_crypto_cipher_finish+0x62>
 c02dd94:	2b02      	cmp	r3, #2
 c02dd96:	d125      	bne.n	c02dde4 <tfm_crypto_cipher_finish+0x62>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02dd98:	6863      	ldr	r3, [r4, #4]
 c02dd9a:	2b34      	cmp	r3, #52	; 0x34
 c02dd9c:	d122      	bne.n	c02dde4 <tfm_crypto_cipher_finish+0x62>
 c02dd9e:	686b      	ldr	r3, [r5, #4]
 c02dda0:	2b04      	cmp	r3, #4
 c02dda2:	d11f      	bne.n	c02dde4 <tfm_crypto_cipher_finish+0x62>
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
    unsigned char *output = out_vec[1].base;
    size_t output_size = out_vec[1].len;
 c02dda4:	e9d5 7802 	ldrd	r7, r8, [r5, #8]
    uint32_t handle = iov->op_handle;
 c02dda8:	6823      	ldr	r3, [r4, #0]
    uint32_t *handle_out = out_vec[0].base;
 c02ddaa:	682e      	ldr	r6, [r5, #0]
    uint32_t handle = iov->op_handle;
 c02ddac:	6999      	ldr	r1, [r3, #24]

    /* Init the handle in the operation with the one passed from the iov */
    *handle_out = iov->op_handle;
 c02ddae:	6031      	str	r1, [r6, #0]

    /* Initialise the output_length to zero */
    out_vec[1].len = 0;
 c02ddb0:	60ea      	str	r2, [r5, #12]

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_CIPHER_OPERATION,
 c02ddb2:	aa01      	add	r2, sp, #4
 c02ddb4:	f7ff fdfa 	bl	c02d9ac <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&operation);
    if (status != PSA_SUCCESS) {
 c02ddb8:	4604      	mov	r4, r0
 c02ddba:	b958      	cbnz	r0, c02ddd4 <tfm_crypto_cipher_finish+0x52>
        return status;
    }

    status = psa_cipher_finish(operation, output, output_size, &out_vec[1].len);
 c02ddbc:	f105 030c 	add.w	r3, r5, #12
 c02ddc0:	4642      	mov	r2, r8
 c02ddc2:	4639      	mov	r1, r7
 c02ddc4:	9801      	ldr	r0, [sp, #4]
 c02ddc6:	f7fa ffab 	bl	c028d20 <mbedcrypto__psa_cipher_finish>
    if (status != PSA_SUCCESS) {
 c02ddca:	4604      	mov	r4, r0
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02ddcc:	4630      	mov	r0, r6
    if (status != PSA_SUCCESS) {
 c02ddce:	b12c      	cbz	r4, c02dddc <tfm_crypto_cipher_finish+0x5a>
        (void)tfm_crypto_operation_release(handle_out);
 c02ddd0:	f7ff fdb2 	bl	c02d938 <tfm_crypto_operation_release>

    status = tfm_crypto_operation_release(handle_out);

    return status;
#endif /* TFM_CRYPTO_CIPHER_MODULE_DISABLED */
}
 c02ddd4:	4620      	mov	r0, r4
 c02ddd6:	b002      	add	sp, #8
 c02ddd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = tfm_crypto_operation_release(handle_out);
 c02dddc:	f7ff fdac 	bl	c02d938 <tfm_crypto_operation_release>
 c02dde0:	4604      	mov	r4, r0
    return status;
 c02dde2:	e7f7      	b.n	c02ddd4 <tfm_crypto_cipher_finish+0x52>
        return PSA_ERROR_CONNECTION_REFUSED;
 c02dde4:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02dde8:	e7f4      	b.n	c02ddd4 <tfm_crypto_cipher_finish+0x52>

0c02ddea <tfm_crypto_cipher_abort>:

psa_status_t tfm_crypto_cipher_abort(psa_invec in_vec[],
                                     size_t in_len,
                                     psa_outvec out_vec[],
                                     size_t out_len)
{
 c02ddea:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if (TFM_CRYPTO_CIPHER_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_cipher_operation_t *operation = NULL;
 c02ddec:	2400      	movs	r4, #0

    if ((in_len != 1) || (out_len != 1)) {
 c02ddee:	2901      	cmp	r1, #1
    psa_cipher_operation_t *operation = NULL;
 c02ddf0:	9401      	str	r4, [sp, #4]
    if ((in_len != 1) || (out_len != 1)) {
 c02ddf2:	d11f      	bne.n	c02de34 <tfm_crypto_cipher_abort+0x4a>
 c02ddf4:	2b01      	cmp	r3, #1
 c02ddf6:	d11d      	bne.n	c02de34 <tfm_crypto_cipher_abort+0x4a>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02ddf8:	6841      	ldr	r1, [r0, #4]
 c02ddfa:	2934      	cmp	r1, #52	; 0x34
 c02ddfc:	d11a      	bne.n	c02de34 <tfm_crypto_cipher_abort+0x4a>
 c02ddfe:	6851      	ldr	r1, [r2, #4]
 c02de00:	2904      	cmp	r1, #4
 c02de02:	d117      	bne.n	c02de34 <tfm_crypto_cipher_abort+0x4a>
        (out_vec[0].len != sizeof(uint32_t))) {
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
    uint32_t handle = iov->op_handle;
 c02de04:	6801      	ldr	r1, [r0, #0]
    uint32_t *handle_out = out_vec[0].base;
 c02de06:	6815      	ldr	r5, [r2, #0]
    uint32_t handle = iov->op_handle;
 c02de08:	6989      	ldr	r1, [r1, #24]

    /* Init the handle in the operation with the one passed from the iov */
    *handle_out = iov->op_handle;

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_CIPHER_OPERATION,
 c02de0a:	aa01      	add	r2, sp, #4
    *handle_out = iov->op_handle;
 c02de0c:	6029      	str	r1, [r5, #0]
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_CIPHER_OPERATION,
 c02de0e:	4618      	mov	r0, r3
 c02de10:	f7ff fdcc 	bl	c02d9ac <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&operation);
    if (status != PSA_SUCCESS) {
 c02de14:	b938      	cbnz	r0, c02de26 <tfm_crypto_cipher_abort+0x3c>
        /* Operation does not exist, so abort has no effect */
        return PSA_SUCCESS;
    }

    status = psa_cipher_abort(operation);
 c02de16:	9801      	ldr	r0, [sp, #4]
 c02de18:	f7fa fe38 	bl	c028a8c <mbedcrypto__psa_cipher_abort>

    if (status != PSA_SUCCESS) {
 c02de1c:	4604      	mov	r4, r0
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02de1e:	4628      	mov	r0, r5
    if (status != PSA_SUCCESS) {
 c02de20:	b124      	cbz	r4, c02de2c <tfm_crypto_cipher_abort+0x42>
        (void)tfm_crypto_operation_release(handle_out);
 c02de22:	f7ff fd89 	bl	c02d938 <tfm_crypto_operation_release>

    status = tfm_crypto_operation_release(handle_out);

    return status;
#endif /* TFM_CRYPTO_CIPHER_MODULE_DISABLED */
}
 c02de26:	4620      	mov	r0, r4
 c02de28:	b003      	add	sp, #12
 c02de2a:	bd30      	pop	{r4, r5, pc}
    status = tfm_crypto_operation_release(handle_out);
 c02de2c:	f7ff fd84 	bl	c02d938 <tfm_crypto_operation_release>
 c02de30:	4604      	mov	r4, r0
    return status;
 c02de32:	e7f8      	b.n	c02de26 <tfm_crypto_cipher_abort+0x3c>
        return PSA_ERROR_CONNECTION_REFUSED;
 c02de34:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02de38:	e7f5      	b.n	c02de26 <tfm_crypto_cipher_abort+0x3c>

0c02de3a <tfm_crypto_get_generator_capacity>:
{
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    if ((in_len != 1) || (out_len != 1)) {
 c02de3a:	2901      	cmp	r1, #1
{
 c02de3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if ((in_len != 1) || (out_len != 1)) {
 c02de3e:	d11a      	bne.n	c02de76 <tfm_crypto_get_generator_capacity+0x3c>
 c02de40:	2b01      	cmp	r3, #1
 c02de42:	d118      	bne.n	c02de76 <tfm_crypto_get_generator_capacity+0x3c>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02de44:	6843      	ldr	r3, [r0, #4]
 c02de46:	2b34      	cmp	r3, #52	; 0x34
 c02de48:	d115      	bne.n	c02de76 <tfm_crypto_get_generator_capacity+0x3c>
 c02de4a:	6853      	ldr	r3, [r2, #4]
 c02de4c:	2b04      	cmp	r3, #4
 c02de4e:	d112      	bne.n	c02de76 <tfm_crypto_get_generator_capacity+0x3c>
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    uint32_t handle = iov->op_handle;
    size_t *capacity = out_vec[0].base;
    psa_crypto_generator_t *generator = NULL;
 c02de50:	2500      	movs	r5, #0
    uint32_t handle = iov->op_handle;
 c02de52:	6801      	ldr	r1, [r0, #0]
    size_t *capacity = out_vec[0].base;
 c02de54:	6814      	ldr	r4, [r2, #0]
    psa_crypto_generator_t *generator = NULL;
 c02de56:	aa02      	add	r2, sp, #8
    uint32_t handle = iov->op_handle;
 c02de58:	6989      	ldr	r1, [r1, #24]
    psa_crypto_generator_t *generator = NULL;
 c02de5a:	f842 5d04 	str.w	r5, [r2, #-4]!

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_GENERATOR_OPERATION,
 c02de5e:	4618      	mov	r0, r3
 c02de60:	f7ff fda4 	bl	c02d9ac <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&generator);
    if (status != PSA_SUCCESS) {
 c02de64:	b110      	cbz	r0, c02de6c <tfm_crypto_get_generator_capacity+0x32>
        *capacity = 0;
 c02de66:	6025      	str	r5, [r4, #0]
        return status;
    }

    return psa_get_generator_capacity(generator, capacity);
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c02de68:	b003      	add	sp, #12
 c02de6a:	bd30      	pop	{r4, r5, pc}
    return psa_get_generator_capacity(generator, capacity);
 c02de6c:	4621      	mov	r1, r4
 c02de6e:	9801      	ldr	r0, [sp, #4]
 c02de70:	f7fb f904 	bl	c02907c <mbedcrypto__psa_get_generator_capacity>
 c02de74:	e7f8      	b.n	c02de68 <tfm_crypto_get_generator_capacity+0x2e>
        return PSA_ERROR_CONNECTION_REFUSED;
 c02de76:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c02de7a:	e7f5      	b.n	c02de68 <tfm_crypto_get_generator_capacity+0x2e>

0c02de7c <tfm_crypto_generator_read>:
{
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    if ((in_len != 1) || (out_len != 1)) {
 c02de7c:	2901      	cmp	r1, #1
{
 c02de7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if ((in_len != 1) || (out_len != 1)) {
 c02de80:	d117      	bne.n	c02deb2 <tfm_crypto_generator_read+0x36>
 c02de82:	2b01      	cmp	r3, #1
 c02de84:	d115      	bne.n	c02deb2 <tfm_crypto_generator_read+0x36>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec))) {
 c02de86:	6843      	ldr	r3, [r0, #4]
 c02de88:	2b34      	cmp	r3, #52	; 0x34
 c02de8a:	d112      	bne.n	c02deb2 <tfm_crypto_generator_read+0x36>
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    uint32_t handle = iov->op_handle;
    uint8_t *output = out_vec[0].base;
    size_t output_length = out_vec[0].len;
 c02de8c:	e9d2 4500 	ldrd	r4, r5, [r2]
    uint32_t handle = iov->op_handle;
 c02de90:	6803      	ldr	r3, [r0, #0]
    psa_crypto_generator_t *generator = NULL;
 c02de92:	aa02      	add	r2, sp, #8
    uint32_t handle = iov->op_handle;
 c02de94:	6999      	ldr	r1, [r3, #24]
    psa_crypto_generator_t *generator = NULL;
 c02de96:	2300      	movs	r3, #0

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_GENERATOR_OPERATION,
 c02de98:	2004      	movs	r0, #4
    psa_crypto_generator_t *generator = NULL;
 c02de9a:	f842 3d04 	str.w	r3, [r2, #-4]!
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_GENERATOR_OPERATION,
 c02de9e:	f7ff fd85 	bl	c02d9ac <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&generator);
    if (status != PSA_SUCCESS) {
 c02dea2:	b920      	cbnz	r0, c02deae <tfm_crypto_generator_read+0x32>
        return status;
    }

    return psa_generator_read(generator, output, output_length);
 c02dea4:	462a      	mov	r2, r5
 c02dea6:	4621      	mov	r1, r4
 c02dea8:	9801      	ldr	r0, [sp, #4]
 c02deaa:	f7fb f8f1 	bl	c029090 <mbedcrypto__psa_generator_read>
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c02deae:	b003      	add	sp, #12
 c02deb0:	bd30      	pop	{r4, r5, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02deb2:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c02deb6:	e7fa      	b.n	c02deae <tfm_crypto_generator_read+0x32>

0c02deb8 <tfm_crypto_generator_import_key>:
{
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    if ((in_len != 2) || (out_len != 0)) {
 c02deb8:	2902      	cmp	r1, #2
{
 c02deba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if ((in_len != 2) || (out_len != 0)) {
 c02debe:	d122      	bne.n	c02df06 <tfm_crypto_generator_import_key+0x4e>
 c02dec0:	bb0b      	cbnz	r3, c02df06 <tfm_crypto_generator_import_key+0x4e>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02dec2:	6842      	ldr	r2, [r0, #4]
 c02dec4:	2a34      	cmp	r2, #52	; 0x34
 c02dec6:	d11e      	bne.n	c02df06 <tfm_crypto_generator_import_key+0x4e>
 c02dec8:	68c5      	ldr	r5, [r0, #12]
 c02deca:	2d04      	cmp	r5, #4
 c02decc:	d11b      	bne.n	c02df06 <tfm_crypto_generator_import_key+0x4e>
        (in_vec[1].len != sizeof(size_t))) {
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c02dece:	6802      	ldr	r2, [r0, #0]
    psa_key_handle_t key_handle = iov->key_handle;
    psa_key_type_t type = iov->type;
    size_t bits = *(size_t *)(in_vec[1].base);
    psa_crypto_generator_t *generator = NULL;

    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02ded0:	4619      	mov	r1, r3
    psa_key_handle_t key_handle = iov->key_handle;
 c02ded2:	8894      	ldrh	r4, [r2, #4]
    uint32_t handle = iov->op_handle;
 c02ded4:	f8d2 8018 	ldr.w	r8, [r2, #24]
    psa_key_type_t type = iov->type;
 c02ded8:	6896      	ldr	r6, [r2, #8]
    size_t bits = *(size_t *)(in_vec[1].base);
 c02deda:	6882      	ldr	r2, [r0, #8]
    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02dedc:	4620      	mov	r0, r4
    size_t bits = *(size_t *)(in_vec[1].base);
 c02dede:	6817      	ldr	r7, [r2, #0]
    psa_crypto_generator_t *generator = NULL;
 c02dee0:	9301      	str	r3, [sp, #4]
    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02dee2:	f000 fb11 	bl	c02e508 <tfm_crypto_check_handle_owner>
    if (status != PSA_SUCCESS) {
 c02dee6:	b958      	cbnz	r0, c02df00 <tfm_crypto_generator_import_key+0x48>
        return status;
    }

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_GENERATOR_OPERATION,
 c02dee8:	aa01      	add	r2, sp, #4
 c02deea:	4641      	mov	r1, r8
 c02deec:	4628      	mov	r0, r5
 c02deee:	f7ff fd5d 	bl	c02d9ac <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&generator);
    if (status != PSA_SUCCESS) {
 c02def2:	b928      	cbnz	r0, c02df00 <tfm_crypto_generator_import_key+0x48>
        return status;
    }

    return psa_generator_import_key(key_handle, type, bits, generator);
 c02def4:	9b01      	ldr	r3, [sp, #4]
 c02def6:	463a      	mov	r2, r7
 c02def8:	4631      	mov	r1, r6
 c02defa:	4620      	mov	r0, r4
 c02defc:	f7fb fa1e 	bl	c02933c <mbedcrypto__psa_generator_import_key>
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c02df00:	b002      	add	sp, #8
 c02df02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02df06:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c02df0a:	e7f9      	b.n	c02df00 <tfm_crypto_generator_import_key+0x48>

0c02df0c <tfm_crypto_generator_abort>:
{
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    if ((in_len != 1) || (out_len != 1)) {
 c02df0c:	2901      	cmp	r1, #1
{
 c02df0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if ((in_len != 1) || (out_len != 1)) {
 c02df10:	d124      	bne.n	c02df5c <tfm_crypto_generator_abort+0x50>
 c02df12:	2b01      	cmp	r3, #1
 c02df14:	d122      	bne.n	c02df5c <tfm_crypto_generator_abort+0x50>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02df16:	6843      	ldr	r3, [r0, #4]
 c02df18:	2b34      	cmp	r3, #52	; 0x34
 c02df1a:	d11f      	bne.n	c02df5c <tfm_crypto_generator_abort+0x50>
 c02df1c:	6853      	ldr	r3, [r2, #4]
 c02df1e:	2b04      	cmp	r3, #4
 c02df20:	d11c      	bne.n	c02df5c <tfm_crypto_generator_abort+0x50>
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
    psa_crypto_generator_t *generator = NULL;
 c02df22:	2400      	movs	r4, #0
    uint32_t handle = iov->op_handle;
 c02df24:	6801      	ldr	r1, [r0, #0]
    uint32_t *handle_out = out_vec[0].base;
 c02df26:	6815      	ldr	r5, [r2, #0]
    uint32_t handle = iov->op_handle;
 c02df28:	698e      	ldr	r6, [r1, #24]
    psa_crypto_generator_t *generator = NULL;
 c02df2a:	aa02      	add	r2, sp, #8
 c02df2c:	f842 4d04 	str.w	r4, [r2, #-4]!

    /* Init the handle in the operation with the one passed from the iov */
    *handle_out = iov->op_handle;

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_GENERATOR_OPERATION,
 c02df30:	4631      	mov	r1, r6
    *handle_out = iov->op_handle;
 c02df32:	602e      	str	r6, [r5, #0]
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_GENERATOR_OPERATION,
 c02df34:	4618      	mov	r0, r3
 c02df36:	f7ff fd39 	bl	c02d9ac <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&generator);
    if (status != PSA_SUCCESS) {
 c02df3a:	b940      	cbnz	r0, c02df4e <tfm_crypto_generator_abort+0x42>
        /* Operation does not exist, so abort has no effect */
        return PSA_SUCCESS;
    }

    *handle_out = handle;
 c02df3c:	602e      	str	r6, [r5, #0]

    status = psa_generator_abort(generator);
 c02df3e:	9801      	ldr	r0, [sp, #4]
 c02df40:	f7fb f854 	bl	c028fec <mbedcrypto__psa_generator_abort>
    if (status != PSA_SUCCESS) {
 c02df44:	4604      	mov	r4, r0
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02df46:	4628      	mov	r0, r5
    if (status != PSA_SUCCESS) {
 c02df48:	b124      	cbz	r4, c02df54 <tfm_crypto_generator_abort+0x48>
        (void)tfm_crypto_operation_release(handle_out);
 c02df4a:	f7ff fcf5 	bl	c02d938 <tfm_crypto_operation_release>

    status = tfm_crypto_operation_release(handle_out);

    return status;
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c02df4e:	4620      	mov	r0, r4
 c02df50:	b002      	add	sp, #8
 c02df52:	bd70      	pop	{r4, r5, r6, pc}
    status = tfm_crypto_operation_release(handle_out);
 c02df54:	f7ff fcf0 	bl	c02d938 <tfm_crypto_operation_release>
 c02df58:	4604      	mov	r4, r0
    return status;
 c02df5a:	e7f8      	b.n	c02df4e <tfm_crypto_generator_abort+0x42>
        return PSA_ERROR_CONNECTION_REFUSED;
 c02df5c:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02df60:	e7f5      	b.n	c02df4e <tfm_crypto_generator_abort+0x42>

0c02df62 <tfm_crypto_key_derivation>:

psa_status_t tfm_crypto_key_derivation(psa_invec in_vec[],
                                       size_t in_len,
                                       psa_outvec out_vec[],
                                       size_t out_len)
{
 c02df62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    if (!((in_len == 1) || (in_len == 2) || (in_len == 3)) || (out_len != 1)) {
 c02df66:	1e4c      	subs	r4, r1, #1
 c02df68:	2c02      	cmp	r4, #2
{
 c02df6a:	b089      	sub	sp, #36	; 0x24
    if (!((in_len == 1) || (in_len == 2) || (in_len == 3)) || (out_len != 1)) {
 c02df6c:	d843      	bhi.n	c02dff6 <tfm_crypto_key_derivation+0x94>
 c02df6e:	2b01      	cmp	r3, #1
 c02df70:	d141      	bne.n	c02dff6 <tfm_crypto_key_derivation+0x94>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02df72:	6843      	ldr	r3, [r0, #4]
 c02df74:	2b34      	cmp	r3, #52	; 0x34
 c02df76:	d13e      	bne.n	c02dff6 <tfm_crypto_key_derivation+0x94>
 c02df78:	6853      	ldr	r3, [r2, #4]
 c02df7a:	2b04      	cmp	r3, #4
 c02df7c:	d13b      	bne.n	c02dff6 <tfm_crypto_key_derivation+0x94>
    const uint8_t *salt = NULL;
    size_t salt_length = 0;
    const uint8_t *label = NULL;
    size_t label_length = 0;
    size_t capacity = iov->capacity;
    psa_crypto_generator_t *generator = NULL;
 c02df7e:	2500      	movs	r5, #0
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c02df80:	6803      	ldr	r3, [r0, #0]

    if (in_len > 1) {
 c02df82:	2901      	cmp	r1, #1
    uint32_t handle = iov->op_handle;
 c02df84:	699c      	ldr	r4, [r3, #24]
    psa_key_handle_t key_handle = iov->key_handle;
 c02df86:	889f      	ldrh	r7, [r3, #4]
    psa_algorithm_t alg = iov->alg;
 c02df88:	f8d3 9010 	ldr.w	r9, [r3, #16]
    size_t capacity = iov->capacity;
 c02df8c:	69db      	ldr	r3, [r3, #28]
    uint32_t handle = iov->op_handle;
 c02df8e:	9406      	str	r4, [sp, #24]
    uint32_t *handle_out = out_vec[0].base;
 c02df90:	6816      	ldr	r6, [r2, #0]
    size_t capacity = iov->capacity;
 c02df92:	9305      	str	r3, [sp, #20]
    psa_crypto_generator_t *generator = NULL;
 c02df94:	9507      	str	r5, [sp, #28]
    if (in_len > 1) {
 c02df96:	d028      	beq.n	c02dfea <tfm_crypto_key_derivation+0x88>
        salt = in_vec[1].base;
        salt_length = in_vec[1].len;
 c02df98:	e9d0 8b02 	ldrd	r8, fp, [r0, #8]
    }

    if (in_len > 2) {
 c02df9c:	2903      	cmp	r1, #3
 c02df9e:	d128      	bne.n	c02dff2 <tfm_crypto_key_derivation+0x90>
        label = in_vec[2].base;
        label_length = in_vec[2].len;
 c02dfa0:	e9d0 a504 	ldrd	sl, r5, [r0, #16]
    }

    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02dfa4:	2100      	movs	r1, #0
 c02dfa6:	4638      	mov	r0, r7
 c02dfa8:	f000 faae 	bl	c02e508 <tfm_crypto_check_handle_owner>
    if (status != PSA_SUCCESS) {
 c02dfac:	4604      	mov	r4, r0
 c02dfae:	b9c0      	cbnz	r0, c02dfe2 <tfm_crypto_key_derivation+0x80>
        return status;
    }

    /* Allocate the generator context in the secure world */
    status = tfm_crypto_operation_alloc(TFM_CRYPTO_GENERATOR_OPERATION,
 c02dfb0:	aa07      	add	r2, sp, #28
 c02dfb2:	a906      	add	r1, sp, #24
 c02dfb4:	2004      	movs	r0, #4
 c02dfb6:	f7ff fc8d 	bl	c02d8d4 <tfm_crypto_operation_alloc>
                                        &handle,
                                        (void **)&generator);
    if (status != PSA_SUCCESS) {
 c02dfba:	4604      	mov	r4, r0
 c02dfbc:	b988      	cbnz	r0, c02dfe2 <tfm_crypto_key_derivation+0x80>
        return status;
    }

    *handle_out = handle;
 c02dfbe:	9a06      	ldr	r2, [sp, #24]

    status = psa_key_derivation(generator, key_handle, alg, salt, salt_length,
 c02dfc0:	9b05      	ldr	r3, [sp, #20]
    *handle_out = handle;
 c02dfc2:	6032      	str	r2, [r6, #0]
    status = psa_key_derivation(generator, key_handle, alg, salt, salt_length,
 c02dfc4:	4639      	mov	r1, r7
 c02dfc6:	e9cd 5302 	strd	r5, r3, [sp, #8]
 c02dfca:	e9cd ba00 	strd	fp, sl, [sp]
 c02dfce:	4643      	mov	r3, r8
 c02dfd0:	464a      	mov	r2, r9
 c02dfd2:	9807      	ldr	r0, [sp, #28]
 c02dfd4:	f7fb f9e1 	bl	c02939a <mbedcrypto__psa_key_derivation>
                                label, label_length, capacity);
    if (status != PSA_SUCCESS) {
 c02dfd8:	4604      	mov	r4, r0
 c02dfda:	b110      	cbz	r0, c02dfe2 <tfm_crypto_key_derivation+0x80>
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02dfdc:	4630      	mov	r0, r6
 c02dfde:	f7ff fcab 	bl	c02d938 <tfm_crypto_operation_release>
    }

    return status;
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c02dfe2:	4620      	mov	r0, r4
 c02dfe4:	b009      	add	sp, #36	; 0x24
 c02dfe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    size_t salt_length = 0;
 c02dfea:	46ab      	mov	fp, r5
    const uint8_t *salt = NULL;
 c02dfec:	46a8      	mov	r8, r5
    const uint8_t *label = NULL;
 c02dfee:	46aa      	mov	sl, r5
 c02dff0:	e7d8      	b.n	c02dfa4 <tfm_crypto_key_derivation+0x42>
 c02dff2:	46aa      	mov	sl, r5
 c02dff4:	e7d6      	b.n	c02dfa4 <tfm_crypto_key_derivation+0x42>
        return PSA_ERROR_CONNECTION_REFUSED;
 c02dff6:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02dffa:	e7f2      	b.n	c02dfe2 <tfm_crypto_key_derivation+0x80>

0c02dffc <tfm_crypto_key_agreement>:
{
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status;
    if ((in_len != 2) || (out_len != 1)) {
 c02dffc:	2902      	cmp	r1, #2
{
 c02dffe:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    if ((in_len != 2) || (out_len != 1)) {
 c02e002:	d131      	bne.n	c02e068 <tfm_crypto_key_agreement+0x6c>
 c02e004:	2b01      	cmp	r3, #1
 c02e006:	d12f      	bne.n	c02e068 <tfm_crypto_key_agreement+0x6c>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02e008:	6843      	ldr	r3, [r0, #4]
 c02e00a:	2b34      	cmp	r3, #52	; 0x34
 c02e00c:	d12c      	bne.n	c02e068 <tfm_crypto_key_agreement+0x6c>
 c02e00e:	6857      	ldr	r7, [r2, #4]
 c02e010:	2f04      	cmp	r7, #4
 c02e012:	d129      	bne.n	c02e068 <tfm_crypto_key_agreement+0x6c>
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
    psa_key_handle_t private_key = iov->key_handle;
    psa_algorithm_t alg = iov->alg;
    const uint8_t *peer_key = in_vec[1].base;
    size_t peer_key_length = in_vec[1].len;
 c02e014:	e9d0 8a02 	ldrd	r8, sl, [r0, #8]
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c02e018:	6803      	ldr	r3, [r0, #0]
    uint32_t *handle_out = out_vec[0].base;
 c02e01a:	6815      	ldr	r5, [r2, #0]
    uint32_t handle = iov->op_handle;
 c02e01c:	6999      	ldr	r1, [r3, #24]
    psa_key_handle_t private_key = iov->key_handle;
 c02e01e:	889e      	ldrh	r6, [r3, #4]
    uint32_t handle = iov->op_handle;
 c02e020:	9102      	str	r1, [sp, #8]
    psa_crypto_generator_t *generator = NULL;
 c02e022:	2100      	movs	r1, #0

    status = tfm_crypto_check_handle_owner(private_key, NULL);
 c02e024:	4630      	mov	r0, r6
    psa_algorithm_t alg = iov->alg;
 c02e026:	f8d3 9010 	ldr.w	r9, [r3, #16]
    psa_crypto_generator_t *generator = NULL;
 c02e02a:	9103      	str	r1, [sp, #12]
    status = tfm_crypto_check_handle_owner(private_key, NULL);
 c02e02c:	f000 fa6c 	bl	c02e508 <tfm_crypto_check_handle_owner>
    if (status != PSA_SUCCESS) {
 c02e030:	4604      	mov	r4, r0
 c02e032:	b9a8      	cbnz	r0, c02e060 <tfm_crypto_key_agreement+0x64>
        return status;
    }

    /* Allocate the generator context in the secure world */
    status = tfm_crypto_operation_alloc(TFM_CRYPTO_GENERATOR_OPERATION,
 c02e034:	aa03      	add	r2, sp, #12
 c02e036:	a902      	add	r1, sp, #8
 c02e038:	4638      	mov	r0, r7
 c02e03a:	f7ff fc4b 	bl	c02d8d4 <tfm_crypto_operation_alloc>
                                        &handle,
                                        (void **)&generator);
    if (status != PSA_SUCCESS) {
 c02e03e:	4604      	mov	r4, r0
 c02e040:	b970      	cbnz	r0, c02e060 <tfm_crypto_key_agreement+0x64>
        return status;
    }

    *handle_out = handle;
 c02e042:	9b02      	ldr	r3, [sp, #8]

    status = psa_key_agreement(generator, private_key,
 c02e044:	4642      	mov	r2, r8
    *handle_out = handle;
 c02e046:	602b      	str	r3, [r5, #0]
    status = psa_key_agreement(generator, private_key,
 c02e048:	4631      	mov	r1, r6
 c02e04a:	f8cd 9000 	str.w	r9, [sp]
 c02e04e:	4653      	mov	r3, sl
 c02e050:	9803      	ldr	r0, [sp, #12]
 c02e052:	f7fb f9db 	bl	c02940c <mbedcrypto__psa_key_agreement>
                               peer_key, peer_key_length, alg);
    if (status != PSA_SUCCESS) {
 c02e056:	4604      	mov	r4, r0
 c02e058:	b110      	cbz	r0, c02e060 <tfm_crypto_key_agreement+0x64>
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02e05a:	4628      	mov	r0, r5
 c02e05c:	f7ff fc6c 	bl	c02d938 <tfm_crypto_operation_release>
    }

    return status;
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c02e060:	4620      	mov	r0, r4
 c02e062:	b004      	add	sp, #16
 c02e064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02e068:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02e06c:	e7f8      	b.n	c02e060 <tfm_crypto_key_agreement+0x64>

0c02e06e <tfm_crypto_generate_random>:
                                        size_t out_len)
{
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    if ((in_len != 1) || (out_len != 1)) {
 c02e06e:	2901      	cmp	r1, #1
 c02e070:	d108      	bne.n	c02e084 <tfm_crypto_generate_random+0x16>
 c02e072:	2b01      	cmp	r3, #1
 c02e074:	d106      	bne.n	c02e084 <tfm_crypto_generate_random+0x16>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if (in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) {
 c02e076:	6843      	ldr	r3, [r0, #4]
 c02e078:	2b34      	cmp	r3, #52	; 0x34
 c02e07a:	d103      	bne.n	c02e084 <tfm_crypto_generate_random+0x16>
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    uint8_t *output = out_vec[0].base;
    size_t output_size = out_vec[0].len;

    return psa_generate_random(output, output_size);
 c02e07c:	e9d2 0100 	ldrd	r0, r1, [r2]
 c02e080:	f7fb b9ec 	b.w	c02945c <mbedcrypto__psa_generate_random>
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c02e084:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c02e088:	4770      	bx	lr

0c02e08a <tfm_crypto_generate_key>:

psa_status_t tfm_crypto_generate_key(psa_invec in_vec[],
                                     size_t in_len,
                                     psa_outvec out_vec[],
                                     size_t out_len)
{
 c02e08a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 c02e08e:	461d      	mov	r5, r3
#if (TFM_CRYPTO_GENERATOR_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    if (!((in_len == 2) || (in_len == 3)) || (out_len != 0)) {
 c02e090:	1e8b      	subs	r3, r1, #2
 c02e092:	2b01      	cmp	r3, #1
{
 c02e094:	4604      	mov	r4, r0
 c02e096:	460f      	mov	r7, r1
    if (!((in_len == 2) || (in_len == 3)) || (out_len != 0)) {
 c02e098:	d820      	bhi.n	c02e0dc <tfm_crypto_generate_key+0x52>
 c02e09a:	b9fd      	cbnz	r5, c02e0dc <tfm_crypto_generate_key+0x52>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02e09c:	6843      	ldr	r3, [r0, #4]
 c02e09e:	2b34      	cmp	r3, #52	; 0x34
 c02e0a0:	d11c      	bne.n	c02e0dc <tfm_crypto_generate_key+0x52>
 c02e0a2:	68c3      	ldr	r3, [r0, #12]
 c02e0a4:	2b04      	cmp	r3, #4
 c02e0a6:	d119      	bne.n	c02e0dc <tfm_crypto_generate_key+0x52>
        (in_vec[1].len != sizeof(size_t))) {
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c02e0a8:	6803      	ldr	r3, [r0, #0]
    size_t bits = *((size_t *)(in_vec[1].base));
    const void *extra = NULL;
    size_t extra_size = 0;
    psa_status_t status;

    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02e0aa:	4629      	mov	r1, r5
    psa_key_handle_t key_handle = iov->key_handle;
 c02e0ac:	889e      	ldrh	r6, [r3, #4]
    psa_key_type_t type = iov->type;
 c02e0ae:	f8d3 8008 	ldr.w	r8, [r3, #8]
    size_t bits = *((size_t *)(in_vec[1].base));
 c02e0b2:	6883      	ldr	r3, [r0, #8]
    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02e0b4:	4630      	mov	r0, r6
    size_t bits = *((size_t *)(in_vec[1].base));
 c02e0b6:	f8d3 9000 	ldr.w	r9, [r3]
    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02e0ba:	f000 fa25 	bl	c02e508 <tfm_crypto_check_handle_owner>
    if (status != PSA_SUCCESS) {
 c02e0be:	b950      	cbnz	r0, c02e0d6 <tfm_crypto_generate_key+0x4c>
        return status;
    }

    if (in_len == 3) {
 c02e0c0:	2f03      	cmp	r7, #3
        extra = in_vec[2].base;
        extra_size = in_vec[2].len;
 c02e0c2:	bf0c      	ite	eq
 c02e0c4:	e9d4 3504 	ldrdeq	r3, r5, [r4, #16]
    const void *extra = NULL;
 c02e0c8:	462b      	movne	r3, r5
    }

    return psa_generate_key(key_handle, type, bits, extra, extra_size);
 c02e0ca:	9500      	str	r5, [sp, #0]
 c02e0cc:	464a      	mov	r2, r9
 c02e0ce:	4641      	mov	r1, r8
 c02e0d0:	4630      	mov	r0, r6
 c02e0d2:	f7fb f9d9 	bl	c029488 <mbedcrypto__psa_generate_key>
#endif /* TFM_CRYPTO_GENERATOR_MODULE_DISABLED */
}
 c02e0d6:	b003      	add	sp, #12
 c02e0d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02e0dc:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c02e0e0:	e7f9      	b.n	c02e0d6 <tfm_crypto_generate_key+0x4c>

0c02e0e2 <tfm_crypto_hash_setup>:
/*!@{*/
psa_status_t tfm_crypto_hash_setup(psa_invec in_vec[],
                                   size_t in_len,
                                   psa_outvec out_vec[],
                                   size_t out_len)
{
 c02e0e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
#if (TFM_CRYPTO_HASH_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_hash_operation_t *operation = NULL;
 c02e0e4:	2400      	movs	r4, #0

    if ((in_len != 1) || (out_len != 1)) {
 c02e0e6:	2901      	cmp	r1, #1
    psa_hash_operation_t *operation = NULL;
 c02e0e8:	9400      	str	r4, [sp, #0]
    if ((in_len != 1) || (out_len != 1)) {
 c02e0ea:	d122      	bne.n	c02e132 <tfm_crypto_hash_setup+0x50>
 c02e0ec:	2b01      	cmp	r3, #1
 c02e0ee:	d120      	bne.n	c02e132 <tfm_crypto_hash_setup+0x50>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((out_vec[0].len != sizeof(uint32_t)) ||
 c02e0f0:	6853      	ldr	r3, [r2, #4]
 c02e0f2:	2b04      	cmp	r3, #4
 c02e0f4:	d11d      	bne.n	c02e132 <tfm_crypto_hash_setup+0x50>
 c02e0f6:	6843      	ldr	r3, [r0, #4]
 c02e0f8:	2b34      	cmp	r3, #52	; 0x34
 c02e0fa:	d11a      	bne.n	c02e132 <tfm_crypto_hash_setup+0x50>
        (in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec))) {
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c02e0fc:	6801      	ldr	r1, [r0, #0]
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
 c02e0fe:	6815      	ldr	r5, [r2, #0]
    uint32_t handle = iov->op_handle;
 c02e100:	698b      	ldr	r3, [r1, #24]
    psa_algorithm_t alg = iov->alg;
 c02e102:	690e      	ldr	r6, [r1, #16]
    uint32_t handle = iov->op_handle;
 c02e104:	9301      	str	r3, [sp, #4]

    /* Init the handle in the operation with the one passed from the iov */
    *handle_out = iov->op_handle;

    /* Allocate the operation context in the secure world */
    status = tfm_crypto_operation_alloc(TFM_CRYPTO_HASH_OPERATION,
 c02e106:	466a      	mov	r2, sp
    *handle_out = iov->op_handle;
 c02e108:	602b      	str	r3, [r5, #0]
    status = tfm_crypto_operation_alloc(TFM_CRYPTO_HASH_OPERATION,
 c02e10a:	a901      	add	r1, sp, #4
 c02e10c:	2003      	movs	r0, #3
 c02e10e:	f7ff fbe1 	bl	c02d8d4 <tfm_crypto_operation_alloc>
                                        &handle,
                                        (void **)&operation);
    if (status != PSA_SUCCESS) {
 c02e112:	4604      	mov	r4, r0
 c02e114:	b950      	cbnz	r0, c02e12c <tfm_crypto_hash_setup+0x4a>
        return status;
    }

    *handle_out = handle;
 c02e116:	9b01      	ldr	r3, [sp, #4]

    status = psa_hash_setup(operation, alg);
 c02e118:	4631      	mov	r1, r6
    *handle_out = handle;
 c02e11a:	602b      	str	r3, [r5, #0]
    status = psa_hash_setup(operation, alg);
 c02e11c:	9800      	ldr	r0, [sp, #0]
 c02e11e:	f7f9 fbe6 	bl	c0278ee <mbedcrypto__psa_hash_setup>
    if (status != PSA_SUCCESS) {
 c02e122:	4604      	mov	r4, r0
 c02e124:	b110      	cbz	r0, c02e12c <tfm_crypto_hash_setup+0x4a>
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02e126:	4628      	mov	r0, r5
 c02e128:	f7ff fc06 	bl	c02d938 <tfm_crypto_operation_release>
        return status;
    }

    return PSA_SUCCESS;
#endif /* TFM_CRYPTO_HASH_MODULE_DISABLED */
}
 c02e12c:	4620      	mov	r0, r4
 c02e12e:	b002      	add	sp, #8
 c02e130:	bd70      	pop	{r4, r5, r6, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02e132:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02e136:	e7f9      	b.n	c02e12c <tfm_crypto_hash_setup+0x4a>

0c02e138 <tfm_crypto_hash_update>:

psa_status_t tfm_crypto_hash_update(psa_invec in_vec[],
                                    size_t in_len,
                                    psa_outvec out_vec[],
                                    size_t out_len)
{
 c02e138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if (TFM_CRYPTO_HASH_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_hash_operation_t *operation = NULL;
 c02e13a:	2400      	movs	r4, #0

    if ((in_len != 2) || (out_len != 1)) {
 c02e13c:	2902      	cmp	r1, #2
    psa_hash_operation_t *operation = NULL;
 c02e13e:	9401      	str	r4, [sp, #4]
    if ((in_len != 2) || (out_len != 1)) {
 c02e140:	d120      	bne.n	c02e184 <tfm_crypto_hash_update+0x4c>
 c02e142:	2b01      	cmp	r3, #1
 c02e144:	d11e      	bne.n	c02e184 <tfm_crypto_hash_update+0x4c>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02e146:	6843      	ldr	r3, [r0, #4]
 c02e148:	2b34      	cmp	r3, #52	; 0x34
 c02e14a:	d11b      	bne.n	c02e184 <tfm_crypto_hash_update+0x4c>
 c02e14c:	6853      	ldr	r3, [r2, #4]
 c02e14e:	2b04      	cmp	r3, #4
 c02e150:	d118      	bne.n	c02e184 <tfm_crypto_hash_update+0x4c>
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
    const uint8_t *input = in_vec[1].base;
    size_t input_length = in_vec[1].len;
 c02e152:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
    uint32_t handle = iov->op_handle;
 c02e156:	6803      	ldr	r3, [r0, #0]
    uint32_t *handle_out = out_vec[0].base;
 c02e158:	6815      	ldr	r5, [r2, #0]
    uint32_t handle = iov->op_handle;
 c02e15a:	6999      	ldr	r1, [r3, #24]

    /* Init the handle in the operation with the one passed from the iov */
    *handle_out = iov->op_handle;

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_HASH_OPERATION,
 c02e15c:	aa01      	add	r2, sp, #4
    *handle_out = iov->op_handle;
 c02e15e:	6029      	str	r1, [r5, #0]
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_HASH_OPERATION,
 c02e160:	2003      	movs	r0, #3
 c02e162:	f7ff fc23 	bl	c02d9ac <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&operation);
    if (status != PSA_SUCCESS) {
 c02e166:	4604      	mov	r4, r0
 c02e168:	b948      	cbnz	r0, c02e17e <tfm_crypto_hash_update+0x46>
        return status;
    }

    status = psa_hash_update(operation, input, input_length);
 c02e16a:	463a      	mov	r2, r7
 c02e16c:	4631      	mov	r1, r6
 c02e16e:	9801      	ldr	r0, [sp, #4]
 c02e170:	f7f9 fc06 	bl	c027980 <mbedcrypto__psa_hash_update>
    if (status != PSA_SUCCESS) {
 c02e174:	4604      	mov	r4, r0
 c02e176:	b110      	cbz	r0, c02e17e <tfm_crypto_hash_update+0x46>
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02e178:	4628      	mov	r0, r5
 c02e17a:	f7ff fbdd 	bl	c02d938 <tfm_crypto_operation_release>
        return status;
    }

    return PSA_SUCCESS;
#endif /* TFM_CRYPTO_HASH_MODULE_DISABLED */
}
 c02e17e:	4620      	mov	r0, r4
 c02e180:	b003      	add	sp, #12
 c02e182:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02e184:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02e188:	e7f9      	b.n	c02e17e <tfm_crypto_hash_update+0x46>

0c02e18a <tfm_crypto_hash_finish>:

psa_status_t tfm_crypto_hash_finish(psa_invec in_vec[],
                                    size_t in_len,
                                    psa_outvec out_vec[],
                                    size_t out_len)
{
 c02e18a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 c02e18e:	4615      	mov	r5, r2
#if (TFM_CRYPTO_HASH_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_hash_operation_t *operation = NULL;
 c02e190:	2200      	movs	r2, #0

    if ((in_len != 1) || (out_len != 2)) {
 c02e192:	2901      	cmp	r1, #1
    psa_hash_operation_t *operation = NULL;
 c02e194:	9201      	str	r2, [sp, #4]
    if ((in_len != 1) || (out_len != 2)) {
 c02e196:	d128      	bne.n	c02e1ea <tfm_crypto_hash_finish+0x60>
 c02e198:	2b02      	cmp	r3, #2
 c02e19a:	d126      	bne.n	c02e1ea <tfm_crypto_hash_finish+0x60>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02e19c:	6843      	ldr	r3, [r0, #4]
 c02e19e:	2b34      	cmp	r3, #52	; 0x34
 c02e1a0:	d123      	bne.n	c02e1ea <tfm_crypto_hash_finish+0x60>
 c02e1a2:	686b      	ldr	r3, [r5, #4]
 c02e1a4:	2b04      	cmp	r3, #4
 c02e1a6:	d120      	bne.n	c02e1ea <tfm_crypto_hash_finish+0x60>
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
    uint8_t *hash = out_vec[1].base;
    size_t hash_size = out_vec[1].len;
 c02e1a8:	e9d5 7802 	ldrd	r7, r8, [r5, #8]
    uint32_t handle = iov->op_handle;
 c02e1ac:	6803      	ldr	r3, [r0, #0]
    uint32_t *handle_out = out_vec[0].base;
 c02e1ae:	682e      	ldr	r6, [r5, #0]
    uint32_t handle = iov->op_handle;
 c02e1b0:	6999      	ldr	r1, [r3, #24]

    /* Initialise hash_length to zero */
    out_vec[1].len = 0;

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_HASH_OPERATION,
 c02e1b2:	2003      	movs	r0, #3
    *handle_out = iov->op_handle;
 c02e1b4:	6031      	str	r1, [r6, #0]
    out_vec[1].len = 0;
 c02e1b6:	60ea      	str	r2, [r5, #12]
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_HASH_OPERATION,
 c02e1b8:	aa01      	add	r2, sp, #4
 c02e1ba:	f7ff fbf7 	bl	c02d9ac <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&operation);
    if (status != PSA_SUCCESS) {
 c02e1be:	4604      	mov	r4, r0
 c02e1c0:	b958      	cbnz	r0, c02e1da <tfm_crypto_hash_finish+0x50>
        return status;
    }

    status = psa_hash_finish(operation, hash, hash_size, &out_vec[1].len);
 c02e1c2:	f105 030c 	add.w	r3, r5, #12
 c02e1c6:	4642      	mov	r2, r8
 c02e1c8:	4639      	mov	r1, r7
 c02e1ca:	9801      	ldr	r0, [sp, #4]
 c02e1cc:	f7f9 fbde 	bl	c02798c <mbedcrypto__psa_hash_finish>
    if (status != PSA_SUCCESS) {
 c02e1d0:	4604      	mov	r4, r0
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02e1d2:	4630      	mov	r0, r6
    if (status != PSA_SUCCESS) {
 c02e1d4:	b12c      	cbz	r4, c02e1e2 <tfm_crypto_hash_finish+0x58>
        (void)tfm_crypto_operation_release(handle_out);
 c02e1d6:	f7ff fbaf 	bl	c02d938 <tfm_crypto_operation_release>

    status = tfm_crypto_operation_release(handle_out);

    return status;
#endif /* TFM_CRYPTO_HASH_MODULE_DISABLED */
}
 c02e1da:	4620      	mov	r0, r4
 c02e1dc:	b002      	add	sp, #8
 c02e1de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = tfm_crypto_operation_release(handle_out);
 c02e1e2:	f7ff fba9 	bl	c02d938 <tfm_crypto_operation_release>
 c02e1e6:	4604      	mov	r4, r0
    return status;
 c02e1e8:	e7f7      	b.n	c02e1da <tfm_crypto_hash_finish+0x50>
        return PSA_ERROR_CONNECTION_REFUSED;
 c02e1ea:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02e1ee:	e7f4      	b.n	c02e1da <tfm_crypto_hash_finish+0x50>

0c02e1f0 <tfm_crypto_hash_verify>:

psa_status_t tfm_crypto_hash_verify(psa_invec in_vec[],
                                    size_t in_len,
                                    psa_outvec out_vec[],
                                    size_t out_len)
{
 c02e1f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if (TFM_CRYPTO_HASH_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_hash_operation_t *operation = NULL;
 c02e1f2:	2400      	movs	r4, #0

    if ((in_len != 2) || (out_len != 1)) {
 c02e1f4:	2902      	cmp	r1, #2
    psa_hash_operation_t *operation = NULL;
 c02e1f6:	9401      	str	r4, [sp, #4]
    if ((in_len != 2) || (out_len != 1)) {
 c02e1f8:	d124      	bne.n	c02e244 <tfm_crypto_hash_verify+0x54>
 c02e1fa:	2b01      	cmp	r3, #1
 c02e1fc:	d122      	bne.n	c02e244 <tfm_crypto_hash_verify+0x54>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02e1fe:	6843      	ldr	r3, [r0, #4]
 c02e200:	2b34      	cmp	r3, #52	; 0x34
 c02e202:	d11f      	bne.n	c02e244 <tfm_crypto_hash_verify+0x54>
 c02e204:	6853      	ldr	r3, [r2, #4]
 c02e206:	2b04      	cmp	r3, #4
 c02e208:	d11c      	bne.n	c02e244 <tfm_crypto_hash_verify+0x54>
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
    const uint8_t *hash = in_vec[1].base;
    size_t hash_length = in_vec[1].len;
 c02e20a:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
    uint32_t handle = iov->op_handle;
 c02e20e:	6803      	ldr	r3, [r0, #0]
    uint32_t *handle_out = out_vec[0].base;
 c02e210:	6815      	ldr	r5, [r2, #0]
    uint32_t handle = iov->op_handle;
 c02e212:	6999      	ldr	r1, [r3, #24]

    /* Init the handle in the operation with the one passed from the iov */
    *handle_out = iov->op_handle;

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_HASH_OPERATION,
 c02e214:	aa01      	add	r2, sp, #4
    *handle_out = iov->op_handle;
 c02e216:	6029      	str	r1, [r5, #0]
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_HASH_OPERATION,
 c02e218:	2003      	movs	r0, #3
 c02e21a:	f7ff fbc7 	bl	c02d9ac <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&operation);
    if (status != PSA_SUCCESS) {
 c02e21e:	4604      	mov	r4, r0
 c02e220:	b948      	cbnz	r0, c02e236 <tfm_crypto_hash_verify+0x46>
        return status;
    }

    status = psa_hash_verify(operation, hash, hash_length);
 c02e222:	463a      	mov	r2, r7
 c02e224:	4631      	mov	r1, r6
 c02e226:	9801      	ldr	r0, [sp, #4]
 c02e228:	f7f9 ffa8 	bl	c02817c <mbedcrypto__psa_hash_verify>
    if (status != PSA_SUCCESS) {
 c02e22c:	4604      	mov	r4, r0
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02e22e:	4628      	mov	r0, r5
    if (status != PSA_SUCCESS) {
 c02e230:	b124      	cbz	r4, c02e23c <tfm_crypto_hash_verify+0x4c>
        (void)tfm_crypto_operation_release(handle_out);
 c02e232:	f7ff fb81 	bl	c02d938 <tfm_crypto_operation_release>

    status = tfm_crypto_operation_release(handle_out);

    return status;
#endif /* TFM_CRYPTO_HASH_MODULE_DISABLED */
}
 c02e236:	4620      	mov	r0, r4
 c02e238:	b003      	add	sp, #12
 c02e23a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = tfm_crypto_operation_release(handle_out);
 c02e23c:	f7ff fb7c 	bl	c02d938 <tfm_crypto_operation_release>
 c02e240:	4604      	mov	r4, r0
    return status;
 c02e242:	e7f8      	b.n	c02e236 <tfm_crypto_hash_verify+0x46>
        return PSA_ERROR_CONNECTION_REFUSED;
 c02e244:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02e248:	e7f5      	b.n	c02e236 <tfm_crypto_hash_verify+0x46>

0c02e24a <tfm_crypto_hash_abort>:

psa_status_t tfm_crypto_hash_abort(psa_invec in_vec[],
                                   size_t in_len,
                                   psa_outvec out_vec[],
                                   size_t out_len)
{
 c02e24a:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if (TFM_CRYPTO_HASH_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_hash_operation_t *operation = NULL;
 c02e24c:	2400      	movs	r4, #0

    if ((in_len != 1) || (out_len != 1)) {
 c02e24e:	2901      	cmp	r1, #1
    psa_hash_operation_t *operation = NULL;
 c02e250:	9401      	str	r4, [sp, #4]
    if ((in_len != 1) || (out_len != 1)) {
 c02e252:	d11f      	bne.n	c02e294 <tfm_crypto_hash_abort+0x4a>
 c02e254:	2b01      	cmp	r3, #1
 c02e256:	d11d      	bne.n	c02e294 <tfm_crypto_hash_abort+0x4a>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02e258:	6843      	ldr	r3, [r0, #4]
 c02e25a:	2b34      	cmp	r3, #52	; 0x34
 c02e25c:	d11a      	bne.n	c02e294 <tfm_crypto_hash_abort+0x4a>
 c02e25e:	6853      	ldr	r3, [r2, #4]
 c02e260:	2b04      	cmp	r3, #4
 c02e262:	d117      	bne.n	c02e294 <tfm_crypto_hash_abort+0x4a>
        (out_vec[0].len != sizeof(uint32_t))) {
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
    uint32_t handle = iov->op_handle;
 c02e264:	6803      	ldr	r3, [r0, #0]
    uint32_t *handle_out = out_vec[0].base;
 c02e266:	6815      	ldr	r5, [r2, #0]
    uint32_t handle = iov->op_handle;
 c02e268:	6999      	ldr	r1, [r3, #24]

    /* Init the handle in the operation with the one passed from the iov */
    *handle_out = iov->op_handle;

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_HASH_OPERATION,
 c02e26a:	aa01      	add	r2, sp, #4
    *handle_out = iov->op_handle;
 c02e26c:	6029      	str	r1, [r5, #0]
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_HASH_OPERATION,
 c02e26e:	2003      	movs	r0, #3
 c02e270:	f7ff fb9c 	bl	c02d9ac <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&operation);
    if (status != PSA_SUCCESS) {
 c02e274:	b938      	cbnz	r0, c02e286 <tfm_crypto_hash_abort+0x3c>
        /* Operation does not exist, so abort has no effect */
        return PSA_SUCCESS;
    }

    status = psa_hash_abort(operation);
 c02e276:	9801      	ldr	r0, [sp, #4]
 c02e278:	f7f9 faee 	bl	c027858 <mbedcrypto__psa_hash_abort>
    if (status != PSA_SUCCESS) {
 c02e27c:	4604      	mov	r4, r0
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02e27e:	4628      	mov	r0, r5
    if (status != PSA_SUCCESS) {
 c02e280:	b124      	cbz	r4, c02e28c <tfm_crypto_hash_abort+0x42>
        (void)tfm_crypto_operation_release(handle_out);
 c02e282:	f7ff fb59 	bl	c02d938 <tfm_crypto_operation_release>

    status = tfm_crypto_operation_release(handle_out);

    return status;
#endif /* TFM_CRYPTO_HASH_MODULE_DISABLED */
}
 c02e286:	4620      	mov	r0, r4
 c02e288:	b003      	add	sp, #12
 c02e28a:	bd30      	pop	{r4, r5, pc}
    status = tfm_crypto_operation_release(handle_out);
 c02e28c:	f7ff fb54 	bl	c02d938 <tfm_crypto_operation_release>
 c02e290:	4604      	mov	r4, r0
    return status;
 c02e292:	e7f8      	b.n	c02e286 <tfm_crypto_hash_abort+0x3c>
        return PSA_ERROR_CONNECTION_REFUSED;
 c02e294:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02e298:	e7f5      	b.n	c02e286 <tfm_crypto_hash_abort+0x3c>

0c02e29a <tfm_crypto_hash_clone>:

psa_status_t tfm_crypto_hash_clone(psa_invec in_vec[],
                                   size_t in_len,
                                   psa_outvec out_vec[],
                                   size_t out_len)
{
 c02e29a:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if (TFM_CRYPTO_HASH_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_hash_operation_t *source_operation = NULL;
 c02e29c:	2400      	movs	r4, #0
    psa_hash_operation_t *target_operation = NULL;

    if ((in_len != 1) || (out_len != 1)) {
 c02e29e:	2901      	cmp	r1, #1
    psa_hash_operation_t *target_operation = NULL;
 c02e2a0:	e9cd 4400 	strd	r4, r4, [sp]
    if ((in_len != 1) || (out_len != 1)) {
 c02e2a4:	d123      	bne.n	c02e2ee <tfm_crypto_hash_clone+0x54>
 c02e2a6:	2b01      	cmp	r3, #1
 c02e2a8:	d121      	bne.n	c02e2ee <tfm_crypto_hash_clone+0x54>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02e2aa:	6843      	ldr	r3, [r0, #4]
 c02e2ac:	2b34      	cmp	r3, #52	; 0x34
 c02e2ae:	d11e      	bne.n	c02e2ee <tfm_crypto_hash_clone+0x54>
 c02e2b0:	6853      	ldr	r3, [r2, #4]
 c02e2b2:	2b04      	cmp	r3, #4
 c02e2b4:	d11b      	bne.n	c02e2ee <tfm_crypto_hash_clone+0x54>
        (out_vec[0].len != sizeof(uint32_t))) {
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
    uint32_t source_handle = iov->op_handle;
 c02e2b6:	6803      	ldr	r3, [r0, #0]
    uint32_t *target_handle = out_vec[0].base;
 c02e2b8:	6815      	ldr	r5, [r2, #0]

    /* Look up the corresponding source operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_HASH_OPERATION,
 c02e2ba:	6999      	ldr	r1, [r3, #24]
 c02e2bc:	466a      	mov	r2, sp
 c02e2be:	2003      	movs	r0, #3
 c02e2c0:	f7ff fb74 	bl	c02d9ac <tfm_crypto_operation_lookup>
                                         source_handle,
                                         (void **)&source_operation);
    if (status != PSA_SUCCESS) {
 c02e2c4:	4604      	mov	r4, r0
 c02e2c6:	b978      	cbnz	r0, c02e2e8 <tfm_crypto_hash_clone+0x4e>
        return status;
    }

    /* Allocate the target operation context in the secure world */
    status = tfm_crypto_operation_alloc(TFM_CRYPTO_HASH_OPERATION,
 c02e2c8:	aa01      	add	r2, sp, #4
 c02e2ca:	4629      	mov	r1, r5
 c02e2cc:	2003      	movs	r0, #3
 c02e2ce:	f7ff fb01 	bl	c02d8d4 <tfm_crypto_operation_alloc>
                                        target_handle,
                                        (void **)&target_operation);
    if (status != PSA_SUCCESS) {
 c02e2d2:	4604      	mov	r4, r0
 c02e2d4:	b940      	cbnz	r0, c02e2e8 <tfm_crypto_hash_clone+0x4e>
        return status;
    }

    status = psa_hash_clone(source_operation, target_operation);
 c02e2d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 c02e2da:	f7f9 ff71 	bl	c0281c0 <mbedcrypto__psa_hash_clone>
    if (status != PSA_SUCCESS) {
 c02e2de:	4604      	mov	r4, r0
 c02e2e0:	b110      	cbz	r0, c02e2e8 <tfm_crypto_hash_clone+0x4e>
        /* Release the target operation context, ignore if it fails. */
        (void)tfm_crypto_operation_release(target_handle);
 c02e2e2:	4628      	mov	r0, r5
 c02e2e4:	f7ff fb28 	bl	c02d938 <tfm_crypto_operation_release>
        return status;
    }

    return status;
#endif /* TFM_CRYPTO_HASH_MODULE_DISABLED */
}
 c02e2e8:	4620      	mov	r0, r4
 c02e2ea:	b003      	add	sp, #12
 c02e2ec:	bd30      	pop	{r4, r5, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02e2ee:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02e2f2:	e7f9      	b.n	c02e2e8 <tfm_crypto_hash_clone+0x4e>

0c02e2f4 <tfm_crypto_clear_scratch>:

    return PSA_SUCCESS;
}

static psa_status_t tfm_crypto_clear_scratch(void)
{
 c02e2f4:	b510      	push	{r4, lr}
    scratch.alloc_index = 0;
 c02e2f6:	2400      	movs	r4, #0
 c02e2f8:	4806      	ldr	r0, [pc, #24]	; (c02e314 <tfm_crypto_clear_scratch+0x20>)
 c02e2fa:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 c02e2fe:	f500 53a0 	add.w	r3, r0, #5120	; 0x1400
 c02e302:	601c      	str	r4, [r3, #0]
    scratch.owner = 0;
 c02e304:	f241 4304 	movw	r3, #5124	; 0x1404
 c02e308:	4621      	mov	r1, r4
 c02e30a:	50c4      	str	r4, [r0, r3]
 c02e30c:	f7e6 fb5b 	bl	c0149c6 <memset>
    (void)tfm_memset(scratch.buf, 0, sizeof(scratch.buf));

    return PSA_SUCCESS;
}
 c02e310:	4620      	mov	r0, r4
 c02e312:	bd10      	pop	{r4, pc}
 c02e314:	3003bae8 	.word	0x3003bae8

0c02e318 <tfm_crypto_get_caller_id>:
    *id = scratch.owner;
 c02e318:	f241 4304 	movw	r3, #5124	; 0x1404
 c02e31c:	4a02      	ldr	r2, [pc, #8]	; (c02e328 <tfm_crypto_get_caller_id+0x10>)
 c02e31e:	58d3      	ldr	r3, [r2, r3]
 c02e320:	6003      	str	r3, [r0, #0]
        return PSA_ERROR_NOT_PERMITTED;
    } else {
        return PSA_SUCCESS;
    }
#endif
}
 c02e322:	2000      	movs	r0, #0
 c02e324:	4770      	bx	lr
 c02e326:	bf00      	nop
 c02e328:	3003bae8 	.word	0x3003bae8

0c02e32c <tfm_crypto_init>:

psa_status_t tfm_crypto_init(void)
{
 c02e32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02e330:	b0ad      	sub	sp, #180	; 0xb4
    return tfm_crypto_init_alloc();
 c02e332:	f7ff fac3 	bl	c02d8bc <tfm_crypto_init_alloc>
    psa_status_t status;

    /* Initialise other modules of the service */
    status = tfm_crypto_module_init();
    if (status != PSA_SUCCESS) {
 c02e336:	2800      	cmp	r0, #0
 c02e338:	f040 80d9 	bne.w	c02e4ee <tfm_crypto_init+0x1c2>
    mbedtls_memory_buffer_alloc_init(mbedtls_mem_buf,
 c02e33c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 c02e340:	486c      	ldr	r0, [pc, #432]	; (c02e4f4 <tfm_crypto_init+0x1c8>)
 c02e342:	f7f6 fabd 	bl	c0248c0 <mbedtls_memory_buffer_alloc_init>
    return psa_crypto_init();
 c02e346:	f7fb f96d 	bl	c029624 <mbedcrypto__psa_crypto_init>
        return status;
    }

    /* Initialise the engine layer */
    status = tfm_crypto_engine_init();
    if (status != PSA_SUCCESS) {
 c02e34a:	2800      	cmp	r0, #0
 c02e34c:	f040 80cf 	bne.w	c02e4ee <tfm_crypto_init+0x1c2>
    struct tfm_crypto_pack_iovec iov = {0};
 c02e350:	f10d 0b7c 	add.w	fp, sp, #124	; 0x7c
 c02e354:	4601      	mov	r1, r0
 c02e356:	2234      	movs	r2, #52	; 0x34
 c02e358:	4658      	mov	r0, fp
 c02e35a:	f7e6 fb34 	bl	c0149c6 <memset>
    uint32_t sfn_id = TFM_CRYPTO_SID_INVALID;
 c02e35e:	f04f 36ff 	mov.w	r6, #4294967295
        signals = psa_wait(PSA_WAIT_ANY, PSA_BLOCK);
 c02e362:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 c02e366:	f04f 30ff 	mov.w	r0, #4294967295
 c02e36a:	f7e9 f89f 	bl	c0174ac <psa_wait>
        if (signals & TFM_CRYPTO_SIG) {
 c02e36e:	06c5      	lsls	r5, r0, #27
 c02e370:	f140 80bc 	bpl.w	c02e4ec <tfm_crypto_init+0x1c0>
            if (psa_get(TFM_CRYPTO_SIG, &msg) != PSA_SUCCESS) {
 c02e374:	a913      	add	r1, sp, #76	; 0x4c
 c02e376:	2010      	movs	r0, #16
 c02e378:	f7e9 f89a 	bl	c0174b0 <psa_get>
 c02e37c:	b100      	cbz	r0, c02e380 <tfm_crypto_init+0x54>
 c02e37e:	e7fe      	b.n	c02e37e <tfm_crypto_init+0x52>
            switch (msg.type) {
 c02e380:	9913      	ldr	r1, [sp, #76]	; 0x4c
 c02e382:	1c8c      	adds	r4, r1, #2
 c02e384:	db02      	blt.n	c02e38c <tfm_crypto_init+0x60>
 c02e386:	1c4a      	adds	r2, r1, #1
 c02e388:	dd01      	ble.n	c02e38e <tfm_crypto_init+0x62>
 c02e38a:	b129      	cbz	r1, c02e398 <tfm_crypto_init+0x6c>
 c02e38c:	e7fe      	b.n	c02e38c <tfm_crypto_init+0x60>
                psa_reply(msg.handle, PSA_SUCCESS);
 c02e38e:	4601      	mov	r1, r0
                psa_reply(msg.handle, status);
 c02e390:	9814      	ldr	r0, [sp, #80]	; 0x50
 c02e392:	f7e9 f897 	bl	c0174c4 <psa_reply>
 c02e396:	e7e4      	b.n	c02e362 <tfm_crypto_init+0x36>
    read_size = psa_read(msg->handle,
 c02e398:	2334      	movs	r3, #52	; 0x34
 c02e39a:	465a      	mov	r2, fp
 c02e39c:	9814      	ldr	r0, [sp, #80]	; 0x50
 c02e39e:	f7e9 f88b 	bl	c0174b8 <psa_read>
    if (read_size != sizeof(struct tfm_crypto_pack_iovec)) {
 c02e3a2:	2834      	cmp	r0, #52	; 0x34
 c02e3a4:	d105      	bne.n	c02e3b2 <tfm_crypto_init+0x86>
    if (iov->sfn_id >= TFM_CRYPTO_SID_MAX) {
 c02e3a6:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 c02e3a8:	2e2a      	cmp	r6, #42	; 0x2a
 c02e3aa:	d904      	bls.n	c02e3b6 <tfm_crypto_init+0x8a>
        *sfn_id_p = TFM_CRYPTO_SID_INVALID;
 c02e3ac:	f04f 36ff 	mov.w	r6, #4294967295
 c02e3b0:	e01f      	b.n	c02e3f2 <tfm_crypto_init+0xc6>
                if (sfn_id != TFM_CRYPTO_SID_INVALID) {
 c02e3b2:	1c73      	adds	r3, r6, #1
 c02e3b4:	d01d      	beq.n	c02e3f2 <tfm_crypto_init+0xc6>
    size_t in_len = PSA_MAX_IOVEC, out_len = PSA_MAX_IOVEC, i;
 c02e3b6:	2704      	movs	r7, #4
    psa_invec in_vec[PSA_MAX_IOVEC] = { {0} };
 c02e3b8:	f10d 090c 	add.w	r9, sp, #12
 c02e3bc:	2220      	movs	r2, #32
 c02e3be:	2100      	movs	r1, #0
 c02e3c0:	4648      	mov	r0, r9
    psa_outvec out_vec[PSA_MAX_IOVEC] = { {0} };
 c02e3c2:	ad0b      	add	r5, sp, #44	; 0x2c
    psa_invec in_vec[PSA_MAX_IOVEC] = { {0} };
 c02e3c4:	f7e6 faff 	bl	c0149c6 <memset>
    psa_outvec out_vec[PSA_MAX_IOVEC] = { {0} };
 c02e3c8:	2220      	movs	r2, #32
 c02e3ca:	2100      	movs	r1, #0
 c02e3cc:	4628      	mov	r0, r5
 c02e3ce:	f7e6 fafa 	bl	c0149c6 <memset>
 c02e3d2:	ab1b      	add	r3, sp, #108	; 0x6c
    while ((in_len > 0) && (msg->in_size[in_len - 1] == 0)) {
 c02e3d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 c02e3d8:	1e79      	subs	r1, r7, #1
 c02e3da:	b13a      	cbz	r2, c02e3ec <tfm_crypto_init+0xc0>
    in_vec[0].len = sizeof(struct tfm_crypto_pack_iovec);
 c02e3dc:	2334      	movs	r3, #52	; 0x34
    in_vec[0].base = iov;
 c02e3de:	f8cd b00c 	str.w	fp, [sp, #12]
    in_vec[0].len = sizeof(struct tfm_crypto_pack_iovec);
 c02e3e2:	9304      	str	r3, [sp, #16]
 c02e3e4:	f10d 0860 	add.w	r8, sp, #96	; 0x60
    for (i = 1; i < in_len; i++) {
 c02e3e8:	2401      	movs	r4, #1
 c02e3ea:	e027      	b.n	c02e43c <tfm_crypto_init+0x110>
    while ((in_len > 0) && (msg->in_size[in_len - 1] == 0)) {
 c02e3ec:	460f      	mov	r7, r1
 c02e3ee:	2900      	cmp	r1, #0
 c02e3f0:	d1f0      	bne.n	c02e3d4 <tfm_crypto_init+0xa8>
                    status = PSA_ERROR_GENERIC_ERROR;
 c02e3f2:	f06f 0883 	mvn.w	r8, #131	; 0x83
 c02e3f6:	e06c      	b.n	c02e4d2 <tfm_crypto_init+0x1a6>
    if (requested_size > (sizeof(scratch.buf) - scratch.alloc_index)) {
 c02e3f8:	493f      	ldr	r1, [pc, #252]	; (c02e4f8 <tfm_crypto_init+0x1cc>)
        status = tfm_crypto_alloc_scratch(msg->in_size[i], &alloc_buf_ptr);
 c02e3fa:	f8d8 3000 	ldr.w	r3, [r8]
    if (requested_size > (sizeof(scratch.buf) - scratch.alloc_index)) {
 c02e3fe:	6809      	ldr	r1, [r1, #0]
    requested_size = ALIGN(requested_size, TFM_CRYPTO_IOVEC_ALIGNMENT);
 c02e400:	1cda      	adds	r2, r3, #3
 c02e402:	f022 0203 	bic.w	r2, r2, #3
    if (requested_size > (sizeof(scratch.buf) - scratch.alloc_index)) {
 c02e406:	f5c1 50a0 	rsb	r0, r1, #5120	; 0x1400
 c02e40a:	4282      	cmp	r2, r0
 c02e40c:	46c2      	mov	sl, r8
 c02e40e:	d85c      	bhi.n	c02e4ca <tfm_crypto_init+0x19e>
    *buf = (void *)&scratch.buf[scratch.alloc_index];
 c02e410:	483a      	ldr	r0, [pc, #232]	; (c02e4fc <tfm_crypto_init+0x1d0>)
    scratch.alloc_index += requested_size;
 c02e412:	440a      	add	r2, r1
    *buf = (void *)&scratch.buf[scratch.alloc_index];
 c02e414:	1808      	adds	r0, r1, r0
    scratch.alloc_index += requested_size;
 c02e416:	4938      	ldr	r1, [pc, #224]	; (c02e4f8 <tfm_crypto_init+0x1cc>)
    *buf = (void *)&scratch.buf[scratch.alloc_index];
 c02e418:	9001      	str	r0, [sp, #4]
    scratch.alloc_index += requested_size;
 c02e41a:	600a      	str	r2, [r1, #0]
        (void) psa_read(msg->handle, i, alloc_buf_ptr, msg->in_size[i]);
 c02e41c:	4602      	mov	r2, r0
 c02e41e:	4621      	mov	r1, r4
 c02e420:	9814      	ldr	r0, [sp, #80]	; 0x50
 c02e422:	f7e9 f849 	bl	c0174b8 <psa_read>
        in_vec[i].base = alloc_buf_ptr;
 c02e426:	9b01      	ldr	r3, [sp, #4]
        in_vec[i].len = msg->in_size[i];
 c02e428:	f8da 2000 	ldr.w	r2, [sl]
        in_vec[i].base = alloc_buf_ptr;
 c02e42c:	f849 3034 	str.w	r3, [r9, r4, lsl #3]
        in_vec[i].len = msg->in_size[i];
 c02e430:	eb09 03c4 	add.w	r3, r9, r4, lsl #3
 c02e434:	f108 0804 	add.w	r8, r8, #4
 c02e438:	605a      	str	r2, [r3, #4]
    for (i = 1; i < in_len; i++) {
 c02e43a:	3401      	adds	r4, #1
 c02e43c:	42bc      	cmp	r4, r7
 c02e43e:	d3db      	bcc.n	c02e3f8 <tfm_crypto_init+0xcc>
 c02e440:	465b      	mov	r3, fp
    size_t in_len = PSA_MAX_IOVEC, out_len = PSA_MAX_IOVEC, i;
 c02e442:	2104      	movs	r1, #4
    while ((out_len > 0) && (msg->out_size[out_len - 1] == 0)) {
 c02e444:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 c02e448:	1e4a      	subs	r2, r1, #1
 c02e44a:	b324      	cbz	r4, c02e496 <tfm_crypto_init+0x16a>
 c02e44c:	f04f 0c00 	mov.w	ip, #0
 c02e450:	4663      	mov	r3, ip
 c02e452:	4c29      	ldr	r4, [pc, #164]	; (c02e4f8 <tfm_crypto_init+0x1cc>)
 c02e454:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 c02e458:	6822      	ldr	r2, [r4, #0]
        status = tfm_crypto_alloc_scratch(msg->out_size[i], &alloc_buf_ptr);
 c02e45a:	f85e af04 	ldr.w	sl, [lr, #4]!
    if (requested_size > (sizeof(scratch.buf) - scratch.alloc_index)) {
 c02e45e:	f5c2 58a0 	rsb	r8, r2, #5120	; 0x1400
    requested_size = ALIGN(requested_size, TFM_CRYPTO_IOVEC_ALIGNMENT);
 c02e462:	f10a 0003 	add.w	r0, sl, #3
 c02e466:	f020 0003 	bic.w	r0, r0, #3
    if (requested_size > (sizeof(scratch.buf) - scratch.alloc_index)) {
 c02e46a:	4540      	cmp	r0, r8
    requested_size = ALIGN(requested_size, TFM_CRYPTO_IOVEC_ALIGNMENT);
 c02e46c:	9001      	str	r0, [sp, #4]
    if (requested_size > (sizeof(scratch.buf) - scratch.alloc_index)) {
 c02e46e:	d828      	bhi.n	c02e4c2 <tfm_crypto_init+0x196>
    *buf = (void *)&scratch.buf[scratch.alloc_index];
 c02e470:	4822      	ldr	r0, [pc, #136]	; (c02e4fc <tfm_crypto_init+0x1d0>)
 c02e472:	eb02 0c00 	add.w	ip, r2, r0
    scratch.alloc_index += requested_size;
 c02e476:	9801      	ldr	r0, [sp, #4]
        out_vec[i].base = alloc_buf_ptr;
 c02e478:	f845 c033 	str.w	ip, [r5, r3, lsl #3]
    scratch.alloc_index += requested_size;
 c02e47c:	4402      	add	r2, r0
        out_vec[i].len = msg->out_size[i];
 c02e47e:	eb05 00c3 	add.w	r0, r5, r3, lsl #3
    for (i = 0; i < out_len; i++) {
 c02e482:	3301      	adds	r3, #1
 c02e484:	428b      	cmp	r3, r1
        out_vec[i].len = msg->out_size[i];
 c02e486:	f8c0 a004 	str.w	sl, [r0, #4]
 c02e48a:	f04f 0c01 	mov.w	ip, #1
    for (i = 0; i < out_len; i++) {
 c02e48e:	d1e4      	bne.n	c02e45a <tfm_crypto_init+0x12e>
 c02e490:	6022      	str	r2, [r4, #0]
 c02e492:	461c      	mov	r4, r3
 c02e494:	e002      	b.n	c02e49c <tfm_crypto_init+0x170>
    while ((out_len > 0) && (msg->out_size[out_len - 1] == 0)) {
 c02e496:	4611      	mov	r1, r2
 c02e498:	2a00      	cmp	r2, #0
 c02e49a:	d1d3      	bne.n	c02e444 <tfm_crypto_init+0x118>
    scratch.owner = id;
 c02e49c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 c02e49e:	4b18      	ldr	r3, [pc, #96]	; (c02e500 <tfm_crypto_init+0x1d4>)
    status = sfid_func_table[sfn_id](in_vec, in_len, out_vec, out_len);
 c02e4a0:	4639      	mov	r1, r7
    scratch.owner = id;
 c02e4a2:	601a      	str	r2, [r3, #0]
    status = sfid_func_table[sfn_id](in_vec, in_len, out_vec, out_len);
 c02e4a4:	4b17      	ldr	r3, [pc, #92]	; (c02e504 <tfm_crypto_init+0x1d8>)
 c02e4a6:	462a      	mov	r2, r5
 c02e4a8:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
 c02e4ac:	4648      	mov	r0, r9
 c02e4ae:	4623      	mov	r3, r4
 c02e4b0:	47c0      	blx	r8
    for (i = 0; i < out_len; i++) {
 c02e4b2:	2700      	movs	r7, #0
    status = sfid_func_table[sfn_id](in_vec, in_len, out_vec, out_len);
 c02e4b4:	4680      	mov	r8, r0
    for (i = 0; i < out_len; i++) {
 c02e4b6:	42a7      	cmp	r7, r4
 c02e4b8:	d10d      	bne.n	c02e4d6 <tfm_crypto_init+0x1aa>
    if (tfm_crypto_clear_scratch() != PSA_SUCCESS) {
 c02e4ba:	f7ff ff1b 	bl	c02e2f4 <tfm_crypto_clear_scratch>
 c02e4be:	b140      	cbz	r0, c02e4d2 <tfm_crypto_init+0x1a6>
 c02e4c0:	e797      	b.n	c02e3f2 <tfm_crypto_init+0xc6>
 c02e4c2:	f1bc 0f00 	cmp.w	ip, #0
 c02e4c6:	d000      	beq.n	c02e4ca <tfm_crypto_init+0x19e>
 c02e4c8:	6022      	str	r2, [r4, #0]
            (void)tfm_crypto_clear_scratch();
 c02e4ca:	f7ff ff13 	bl	c02e2f4 <tfm_crypto_clear_scratch>
        return PSA_ERROR_INSUFFICIENT_MEMORY;
 c02e4ce:	f06f 088c 	mvn.w	r8, #140	; 0x8c
                psa_reply(msg.handle, status);
 c02e4d2:	4641      	mov	r1, r8
 c02e4d4:	e75c      	b.n	c02e390 <tfm_crypto_init+0x64>
        psa_write(msg->handle, i, out_vec[i].base, out_vec[i].len);
 c02e4d6:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
 c02e4da:	f855 2037 	ldr.w	r2, [r5, r7, lsl #3]
 c02e4de:	4639      	mov	r1, r7
 c02e4e0:	685b      	ldr	r3, [r3, #4]
 c02e4e2:	9814      	ldr	r0, [sp, #80]	; 0x50
 c02e4e4:	f7e8 ffec 	bl	c0174c0 <psa_write>
    for (i = 0; i < out_len; i++) {
 c02e4e8:	3701      	adds	r7, #1
 c02e4ea:	e7e4      	b.n	c02e4b6 <tfm_crypto_init+0x18a>
 c02e4ec:	e7fe      	b.n	c02e4ec <tfm_crypto_init+0x1c0>
    /* Should not return in normal operations */
    tfm_crypto_ipc_handler();
#endif

    return status;
}
 c02e4ee:	b02d      	add	sp, #180	; 0xb4
 c02e4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c02e4f4:	30039ae8 	.word	0x30039ae8
 c02e4f8:	3003cee8 	.word	0x3003cee8
 c02e4fc:	3003bae8 	.word	0x3003bae8
 c02e500:	3003ceec 	.word	0x3003ceec
 c02e504:	0c035318 	.word	0x0c035318

0c02e508 <tfm_crypto_check_handle_owner>:
                                           uint32_t *index)
{
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    int32_t partition_id = 0;
 c02e508:	2300      	movs	r3, #0
{
 c02e50a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c02e50c:	4605      	mov	r5, r0
    int32_t partition_id = 0;
 c02e50e:	a802      	add	r0, sp, #8
 c02e510:	f840 3d04 	str.w	r3, [r0, #-4]!
{
 c02e514:	460c      	mov	r4, r1
    uint32_t i = 0;
    psa_status_t status;

    status = tfm_crypto_get_caller_id(&partition_id);
 c02e516:	f7ff feff 	bl	c02e318 <tfm_crypto_get_caller_id>
    if (status != PSA_SUCCESS) {
 c02e51a:	b978      	cbnz	r0, c02e53c <tfm_crypto_check_handle_owner+0x34>
        return status;
    }

    for (i = 0; i < TFM_CRYPTO_MAX_KEY_HANDLES; i++) {
 c02e51c:	4603      	mov	r3, r0
 c02e51e:	4a0d      	ldr	r2, [pc, #52]	; (c02e554 <tfm_crypto_check_handle_owner+0x4c>)
 c02e520:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
        if (handle_owner[i].in_use && handle_owner[i].handle == handle) {
 c02e524:	798e      	ldrb	r6, [r1, #6]
 c02e526:	b15e      	cbz	r6, c02e540 <tfm_crypto_check_handle_owner+0x38>
 c02e528:	8889      	ldrh	r1, [r1, #4]
 c02e52a:	42a9      	cmp	r1, r5
 c02e52c:	d108      	bne.n	c02e540 <tfm_crypto_check_handle_owner+0x38>
            if (handle_owner[i].owner == partition_id) {
 c02e52e:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 c02e532:	9a01      	ldr	r2, [sp, #4]
 c02e534:	4291      	cmp	r1, r2
 c02e536:	d109      	bne.n	c02e54c <tfm_crypto_check_handle_owner+0x44>
                if (index != NULL) {
 c02e538:	b104      	cbz	r4, c02e53c <tfm_crypto_check_handle_owner+0x34>
                    *index = i;
 c02e53a:	6023      	str	r3, [r4, #0]
        }
    }

    return PSA_ERROR_INVALID_HANDLE;
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c02e53c:	b002      	add	sp, #8
 c02e53e:	bd70      	pop	{r4, r5, r6, pc}
    for (i = 0; i < TFM_CRYPTO_MAX_KEY_HANDLES; i++) {
 c02e540:	3301      	adds	r3, #1
 c02e542:	2b10      	cmp	r3, #16
 c02e544:	d1ec      	bne.n	c02e520 <tfm_crypto_check_handle_owner+0x18>
    return PSA_ERROR_INVALID_HANDLE;
 c02e546:	f06f 0087 	mvn.w	r0, #135	; 0x87
 c02e54a:	e7f7      	b.n	c02e53c <tfm_crypto_check_handle_owner+0x34>
                return PSA_ERROR_NOT_PERMITTED;
 c02e54c:	f06f 0084 	mvn.w	r0, #132	; 0x84
 c02e550:	e7f4      	b.n	c02e53c <tfm_crypto_check_handle_owner+0x34>
 c02e552:	bf00      	nop
 c02e554:	3003cef0 	.word	0x3003cef0

0c02e558 <tfm_crypto_allocate_key>:
                                     size_t out_len)
{
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    if ((in_len != 1) || (out_len != 1)) {
 c02e558:	2901      	cmp	r1, #1
{
 c02e55a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if ((in_len != 1) || (out_len != 1)) {
 c02e55c:	d116      	bne.n	c02e58c <tfm_crypto_allocate_key+0x34>
 c02e55e:	2b01      	cmp	r3, #1
 c02e560:	d114      	bne.n	c02e58c <tfm_crypto_allocate_key+0x34>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02e562:	6843      	ldr	r3, [r0, #4]
 c02e564:	2b34      	cmp	r3, #52	; 0x34
 c02e566:	d111      	bne.n	c02e58c <tfm_crypto_allocate_key+0x34>
 c02e568:	6853      	ldr	r3, [r2, #4]
 c02e56a:	2b02      	cmp	r3, #2
 c02e56c:	d10e      	bne.n	c02e58c <tfm_crypto_allocate_key+0x34>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    psa_key_handle_t *key_handle = out_vec[0].base;
    uint32_t i = 0;
    int32_t partition_id = 0;
 c02e56e:	2400      	movs	r4, #0
    psa_key_handle_t *key_handle = out_vec[0].base;
 c02e570:	6816      	ldr	r6, [r2, #0]
    bool empty_found = false;
    psa_status_t status;

    for (i = 0; i < TFM_CRYPTO_MAX_KEY_HANDLES; i++) {
        if (handle_owner[i].in_use == TFM_CRYPTO_NOT_IN_USE) {
 c02e572:	4f11      	ldr	r7, [pc, #68]	; (c02e5b8 <tfm_crypto_allocate_key+0x60>)
    int32_t partition_id = 0;
 c02e574:	9401      	str	r4, [sp, #4]
        if (handle_owner[i].in_use == TFM_CRYPTO_NOT_IN_USE) {
 c02e576:	eb07 05c4 	add.w	r5, r7, r4, lsl #3
 c02e57a:	79ab      	ldrb	r3, [r5, #6]
 c02e57c:	b14b      	cbz	r3, c02e592 <tfm_crypto_allocate_key+0x3a>
    for (i = 0; i < TFM_CRYPTO_MAX_KEY_HANDLES; i++) {
 c02e57e:	3401      	adds	r4, #1
 c02e580:	2c10      	cmp	r4, #16
 c02e582:	d1f8      	bne.n	c02e576 <tfm_crypto_allocate_key+0x1e>
            break;
        }
    }

    if (!empty_found) {
        return PSA_ERROR_INSUFFICIENT_MEMORY;
 c02e584:	f06f 008c 	mvn.w	r0, #140	; 0x8c
        handle_owner[i].in_use = TFM_CRYPTO_IN_USE;
    }

    return status;
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c02e588:	b003      	add	sp, #12
 c02e58a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02e58c:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c02e590:	e7fa      	b.n	c02e588 <tfm_crypto_allocate_key+0x30>
    status = tfm_crypto_get_caller_id(&partition_id);
 c02e592:	a801      	add	r0, sp, #4
 c02e594:	f7ff fec0 	bl	c02e318 <tfm_crypto_get_caller_id>
    if (status != PSA_SUCCESS) {
 c02e598:	2800      	cmp	r0, #0
 c02e59a:	d1f5      	bne.n	c02e588 <tfm_crypto_allocate_key+0x30>
    status = psa_allocate_key(key_handle);
 c02e59c:	4630      	mov	r0, r6
 c02e59e:	f7fb f8e7 	bl	c029770 <mbedcrypto__psa_allocate_key>
    if (status == PSA_SUCCESS) {
 c02e5a2:	2800      	cmp	r0, #0
 c02e5a4:	d1f0      	bne.n	c02e588 <tfm_crypto_allocate_key+0x30>
        handle_owner[i].owner = partition_id;
 c02e5a6:	9b01      	ldr	r3, [sp, #4]
 c02e5a8:	f847 3034 	str.w	r3, [r7, r4, lsl #3]
        handle_owner[i].handle = *key_handle;
 c02e5ac:	8833      	ldrh	r3, [r6, #0]
 c02e5ae:	80ab      	strh	r3, [r5, #4]
        handle_owner[i].in_use = TFM_CRYPTO_IN_USE;
 c02e5b0:	2301      	movs	r3, #1
 c02e5b2:	71ab      	strb	r3, [r5, #6]
 c02e5b4:	e7e8      	b.n	c02e588 <tfm_crypto_allocate_key+0x30>
 c02e5b6:	bf00      	nop
 c02e5b8:	3003cef0 	.word	0x3003cef0

0c02e5bc <tfm_crypto_import_key>:
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    (void)out_vec;

    if ((in_len != 2) || (out_len != 0)) {
 c02e5bc:	2902      	cmp	r1, #2
{
 c02e5be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if ((in_len != 2) || (out_len != 0)) {
 c02e5c2:	d115      	bne.n	c02e5f0 <tfm_crypto_import_key+0x34>
 c02e5c4:	b9a3      	cbnz	r3, c02e5f0 <tfm_crypto_import_key+0x34>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if (in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) {
 c02e5c6:	6842      	ldr	r2, [r0, #4]
 c02e5c8:	2a34      	cmp	r2, #52	; 0x34
 c02e5ca:	d111      	bne.n	c02e5f0 <tfm_crypto_import_key+0x34>
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    psa_key_handle_t key = iov->key_handle;
    psa_key_type_t type = iov->type;
    const uint8_t *data = in_vec[1].base;
    size_t data_length = in_vec[1].len;
 c02e5cc:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c02e5d0:	6802      	ldr	r2, [r0, #0]
    psa_status_t status = tfm_crypto_check_handle_owner(key, NULL);
 c02e5d2:	4619      	mov	r1, r3
    psa_key_handle_t key = iov->key_handle;
 c02e5d4:	8894      	ldrh	r4, [r2, #4]
    psa_key_type_t type = iov->type;
 c02e5d6:	6895      	ldr	r5, [r2, #8]
    psa_status_t status = tfm_crypto_check_handle_owner(key, NULL);
 c02e5d8:	4620      	mov	r0, r4
 c02e5da:	f7ff ff95 	bl	c02e508 <tfm_crypto_check_handle_owner>

    if (status != PSA_SUCCESS) {
 c02e5de:	b948      	cbnz	r0, c02e5f4 <tfm_crypto_import_key+0x38>
        return status;
    }

    return psa_import_key(key, type, data, data_length);
 c02e5e0:	463b      	mov	r3, r7
 c02e5e2:	4632      	mov	r2, r6
 c02e5e4:	4629      	mov	r1, r5
 c02e5e6:	4620      	mov	r0, r4
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c02e5e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return psa_import_key(key, type, data, data_length);
 c02e5ec:	f7f9 b814 	b.w	c027618 <mbedcrypto__psa_import_key>
        return PSA_ERROR_CONNECTION_REFUSED;
 c02e5f0:	f06f 0081 	mvn.w	r0, #129	; 0x81
}
 c02e5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0c02e5f8 <tfm_crypto_destroy_key>:
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    (void)out_vec;

    if ((in_len != 1) || (out_len != 0)) {
 c02e5f8:	2901      	cmp	r1, #1
{
 c02e5fa:	b513      	push	{r0, r1, r4, lr}
    if ((in_len != 1) || (out_len != 0)) {
 c02e5fc:	d118      	bne.n	c02e630 <tfm_crypto_destroy_key+0x38>
 c02e5fe:	b9bb      	cbnz	r3, c02e630 <tfm_crypto_destroy_key+0x38>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if (in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) {
 c02e600:	6843      	ldr	r3, [r0, #4]
 c02e602:	2b34      	cmp	r3, #52	; 0x34
 c02e604:	d114      	bne.n	c02e630 <tfm_crypto_destroy_key+0x38>
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    psa_key_handle_t key = iov->key_handle;
 c02e606:	6803      	ldr	r3, [r0, #0]
    uint32_t index;
    psa_status_t status = tfm_crypto_check_handle_owner(key, &index);
 c02e608:	a901      	add	r1, sp, #4
    psa_key_handle_t key = iov->key_handle;
 c02e60a:	889c      	ldrh	r4, [r3, #4]
    psa_status_t status = tfm_crypto_check_handle_owner(key, &index);
 c02e60c:	4620      	mov	r0, r4
 c02e60e:	f7ff ff7b 	bl	c02e508 <tfm_crypto_check_handle_owner>

    if (status != PSA_SUCCESS) {
 c02e612:	b958      	cbnz	r0, c02e62c <tfm_crypto_destroy_key+0x34>
        return status;
    }

    status = psa_destroy_key(key);
 c02e614:	4620      	mov	r0, r4
 c02e616:	f7f9 f813 	bl	c027640 <mbedcrypto__psa_destroy_key>

    if (status == PSA_SUCCESS) {
 c02e61a:	b938      	cbnz	r0, c02e62c <tfm_crypto_destroy_key+0x34>
        handle_owner[index].owner = 0;
 c02e61c:	9a01      	ldr	r2, [sp, #4]
 c02e61e:	4b06      	ldr	r3, [pc, #24]	; (c02e638 <tfm_crypto_destroy_key+0x40>)
 c02e620:	f843 0032 	str.w	r0, [r3, r2, lsl #3]
        handle_owner[index].handle = 0;
 c02e624:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 c02e628:	8098      	strh	r0, [r3, #4]
        handle_owner[index].in_use = TFM_CRYPTO_NOT_IN_USE;
 c02e62a:	7198      	strb	r0, [r3, #6]
    }

    return status;
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c02e62c:	b002      	add	sp, #8
 c02e62e:	bd10      	pop	{r4, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02e630:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c02e634:	e7fa      	b.n	c02e62c <tfm_crypto_destroy_key+0x34>
 c02e636:	bf00      	nop
 c02e638:	3003cef0 	.word	0x3003cef0

0c02e63c <tfm_crypto_get_key_information>:
                                            size_t out_len)
{
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    if ((in_len != 1) || (out_len != 2)) {
 c02e63c:	2901      	cmp	r1, #1
{
 c02e63e:	b410      	push	{r4}
 c02e640:	4614      	mov	r4, r2
    if ((in_len != 1) || (out_len != 2)) {
 c02e642:	d112      	bne.n	c02e66a <tfm_crypto_get_key_information+0x2e>
 c02e644:	2b02      	cmp	r3, #2
 c02e646:	d110      	bne.n	c02e66a <tfm_crypto_get_key_information+0x2e>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02e648:	6843      	ldr	r3, [r0, #4]
 c02e64a:	2b34      	cmp	r3, #52	; 0x34
 c02e64c:	d10d      	bne.n	c02e66a <tfm_crypto_get_key_information+0x2e>
 c02e64e:	6853      	ldr	r3, [r2, #4]
 c02e650:	2b04      	cmp	r3, #4
 c02e652:	d10a      	bne.n	c02e66a <tfm_crypto_get_key_information+0x2e>
        (out_vec[0].len != sizeof(psa_key_type_t)) ||
 c02e654:	68d3      	ldr	r3, [r2, #12]
 c02e656:	2b04      	cmp	r3, #4
 c02e658:	d107      	bne.n	c02e66a <tfm_crypto_get_key_information+0x2e>
        (out_vec[1].len != sizeof(size_t))) {
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    psa_key_handle_t key = iov->key_handle;
 c02e65a:	6803      	ldr	r3, [r0, #0]
    psa_key_type_t *type = out_vec[0].base;
    size_t *bits = out_vec[1].base;

    return psa_get_key_information(key, type, bits);
 c02e65c:	6821      	ldr	r1, [r4, #0]
 c02e65e:	6892      	ldr	r2, [r2, #8]
 c02e660:	8898      	ldrh	r0, [r3, #4]
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c02e662:	f85d 4b04 	ldr.w	r4, [sp], #4
    return psa_get_key_information(key, type, bits);
 c02e666:	f7f8 bff6 	b.w	c027656 <mbedcrypto__psa_get_key_information>
}
 c02e66a:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c02e66e:	f85d 4b04 	ldr.w	r4, [sp], #4
 c02e672:	4770      	bx	lr

0c02e674 <tfm_crypto_export_key>:
                                   size_t out_len)
{
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    if ((in_len != 1) || (out_len != 1)) {
 c02e674:	2901      	cmp	r1, #1
{
 c02e676:	b410      	push	{r4}
    if ((in_len != 1) || (out_len != 1)) {
 c02e678:	d10d      	bne.n	c02e696 <tfm_crypto_export_key+0x22>
 c02e67a:	2b01      	cmp	r3, #1
 c02e67c:	d10b      	bne.n	c02e696 <tfm_crypto_export_key+0x22>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if (in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) {
 c02e67e:	6843      	ldr	r3, [r0, #4]
 c02e680:	2b34      	cmp	r3, #52	; 0x34
 c02e682:	d108      	bne.n	c02e696 <tfm_crypto_export_key+0x22>
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    psa_key_handle_t key = iov->key_handle;
 c02e684:	6800      	ldr	r0, [r0, #0]
    uint8_t *data = out_vec[0].base;
    size_t data_size = out_vec[0].len;

    return psa_export_key(key, data, data_size, &(out_vec[0].len));
 c02e686:	1d13      	adds	r3, r2, #4
 c02e688:	8880      	ldrh	r0, [r0, #4]
 c02e68a:	e9d2 1200 	ldrd	r1, r2, [r2]
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c02e68e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return psa_export_key(key, data, data_size, &(out_vec[0].len));
 c02e692:	f7f8 bffd 	b.w	c027690 <mbedcrypto__psa_export_key>
}
 c02e696:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c02e69a:	f85d 4b04 	ldr.w	r4, [sp], #4
 c02e69e:	4770      	bx	lr

0c02e6a0 <tfm_crypto_export_public_key>:
                                          size_t out_len)
{
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    if ((in_len != 1) || (out_len != 1)) {
 c02e6a0:	2901      	cmp	r1, #1
{
 c02e6a2:	b410      	push	{r4}
    if ((in_len != 1) || (out_len != 1)) {
 c02e6a4:	d10d      	bne.n	c02e6c2 <tfm_crypto_export_public_key+0x22>
 c02e6a6:	2b01      	cmp	r3, #1
 c02e6a8:	d10b      	bne.n	c02e6c2 <tfm_crypto_export_public_key+0x22>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if (in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) {
 c02e6aa:	6843      	ldr	r3, [r0, #4]
 c02e6ac:	2b34      	cmp	r3, #52	; 0x34
 c02e6ae:	d108      	bne.n	c02e6c2 <tfm_crypto_export_public_key+0x22>
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    psa_key_handle_t key = iov->key_handle;
 c02e6b0:	6800      	ldr	r0, [r0, #0]
    uint8_t *data = out_vec[0].base;
    size_t data_size = out_vec[0].len;

    return psa_export_public_key(key, data, data_size, &(out_vec[0].len));
 c02e6b2:	1d13      	adds	r3, r2, #4
 c02e6b4:	8880      	ldrh	r0, [r0, #4]
 c02e6b6:	e9d2 1200 	ldrd	r1, r2, [r2]
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c02e6ba:	f85d 4b04 	ldr.w	r4, [sp], #4
    return psa_export_public_key(key, data, data_size, &(out_vec[0].len));
 c02e6be:	f7f8 bffb 	b.w	c0276b8 <mbedcrypto__psa_export_public_key>
}
 c02e6c2:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c02e6c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 c02e6ca:	4770      	bx	lr

0c02e6cc <tfm_crypto_copy_key>:
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    (void)out_vec;

    if ((in_len != 3) || (out_len != 0)) {
 c02e6cc:	2903      	cmp	r1, #3
 c02e6ce:	d110      	bne.n	c02e6f2 <tfm_crypto_copy_key+0x26>
 c02e6d0:	b97b      	cbnz	r3, c02e6f2 <tfm_crypto_copy_key+0x26>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02e6d2:	6843      	ldr	r3, [r0, #4]
 c02e6d4:	2b34      	cmp	r3, #52	; 0x34
 c02e6d6:	d10c      	bne.n	c02e6f2 <tfm_crypto_copy_key+0x26>
 c02e6d8:	68c3      	ldr	r3, [r0, #12]
 c02e6da:	2b02      	cmp	r3, #2
 c02e6dc:	d109      	bne.n	c02e6f2 <tfm_crypto_copy_key+0x26>
        (in_vec[1].len != sizeof(psa_key_handle_t)) ||
 c02e6de:	6943      	ldr	r3, [r0, #20]
 c02e6e0:	2b0c      	cmp	r3, #12
 c02e6e2:	d106      	bne.n	c02e6f2 <tfm_crypto_copy_key+0x26>
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    psa_key_handle_t source_handle = iov->key_handle;
    psa_key_handle_t target_handle = *((psa_key_handle_t *)in_vec[1].base);
 c02e6e4:	6881      	ldr	r1, [r0, #8]
    psa_key_handle_t source_handle = iov->key_handle;
 c02e6e6:	6803      	ldr	r3, [r0, #0]
    const psa_key_policy_t *policy = in_vec[2].base;

    return psa_copy_key(source_handle, target_handle, policy);
 c02e6e8:	6902      	ldr	r2, [r0, #16]
 c02e6ea:	8809      	ldrh	r1, [r1, #0]
 c02e6ec:	8898      	ldrh	r0, [r3, #4]
 c02e6ee:	f7f8 bff9 	b.w	c0276e4 <mbedcrypto__psa_copy_key>
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c02e6f2:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c02e6f6:	4770      	bx	lr

0c02e6f8 <tfm_crypto_set_key_policy>:
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    (void)out_vec;

    if ((in_len != 2) || (out_len != 0)) {
 c02e6f8:	2902      	cmp	r1, #2
{
 c02e6fa:	b538      	push	{r3, r4, r5, lr}
    if ((in_len != 2) || (out_len != 0)) {
 c02e6fc:	d114      	bne.n	c02e728 <tfm_crypto_set_key_policy+0x30>
 c02e6fe:	b99b      	cbnz	r3, c02e728 <tfm_crypto_set_key_policy+0x30>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02e700:	6842      	ldr	r2, [r0, #4]
 c02e702:	2a34      	cmp	r2, #52	; 0x34
 c02e704:	d110      	bne.n	c02e728 <tfm_crypto_set_key_policy+0x30>
 c02e706:	68c2      	ldr	r2, [r0, #12]
 c02e708:	2a0c      	cmp	r2, #12
 c02e70a:	d10d      	bne.n	c02e728 <tfm_crypto_set_key_policy+0x30>
        (in_vec[1].len != sizeof(psa_key_policy_t))) {
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    psa_key_handle_t key = iov->key_handle;
 c02e70c:	6802      	ldr	r2, [r0, #0]
    const psa_key_policy_t *policy = in_vec[1].base;
 c02e70e:	6885      	ldr	r5, [r0, #8]
    psa_key_handle_t key = iov->key_handle;
 c02e710:	8894      	ldrh	r4, [r2, #4]
    psa_status_t status = tfm_crypto_check_handle_owner(key, NULL);
 c02e712:	4619      	mov	r1, r3
 c02e714:	4620      	mov	r0, r4
 c02e716:	f7ff fef7 	bl	c02e508 <tfm_crypto_check_handle_owner>

    if (status == PSA_SUCCESS) {
 c02e71a:	b938      	cbnz	r0, c02e72c <tfm_crypto_set_key_policy+0x34>
        return psa_set_key_policy(key, policy);
 c02e71c:	4629      	mov	r1, r5
 c02e71e:	4620      	mov	r0, r4
    } else {
        return status;
    }
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c02e720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return psa_set_key_policy(key, policy);
 c02e724:	f7fa bb46 	b.w	c028db4 <mbedcrypto__psa_set_key_policy>
        return PSA_ERROR_CONNECTION_REFUSED;
 c02e728:	f06f 0081 	mvn.w	r0, #129	; 0x81
}
 c02e72c:	bd38      	pop	{r3, r4, r5, pc}

0c02e72e <tfm_crypto_get_key_policy>:
                                       size_t out_len)
{
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    if ((in_len != 1) || (out_len != 1)) {
 c02e72e:	2901      	cmp	r1, #1
 c02e730:	d10c      	bne.n	c02e74c <tfm_crypto_get_key_policy+0x1e>
 c02e732:	2b01      	cmp	r3, #1
 c02e734:	d10a      	bne.n	c02e74c <tfm_crypto_get_key_policy+0x1e>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02e736:	6843      	ldr	r3, [r0, #4]
 c02e738:	2b34      	cmp	r3, #52	; 0x34
 c02e73a:	d107      	bne.n	c02e74c <tfm_crypto_get_key_policy+0x1e>
 c02e73c:	6853      	ldr	r3, [r2, #4]
 c02e73e:	2b0c      	cmp	r3, #12
 c02e740:	d104      	bne.n	c02e74c <tfm_crypto_get_key_policy+0x1e>
        (out_vec[0].len != sizeof(psa_key_policy_t))) {
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    psa_key_handle_t key = iov->key_handle;
 c02e742:	6803      	ldr	r3, [r0, #0]
    psa_key_policy_t *policy = out_vec[0].base;

    return psa_get_key_policy(key, policy);
 c02e744:	6811      	ldr	r1, [r2, #0]
 c02e746:	8898      	ldrh	r0, [r3, #4]
 c02e748:	f7fa bb50 	b.w	c028dec <mbedcrypto__psa_get_key_policy>
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c02e74c:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c02e750:	4770      	bx	lr

0c02e752 <tfm_crypto_get_key_lifetime>:
                                         size_t out_len)
{
#if (TFM_CRYPTO_KEY_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    if ((in_len != 1) || (out_len != 1)) {
 c02e752:	2901      	cmp	r1, #1
 c02e754:	d10c      	bne.n	c02e770 <tfm_crypto_get_key_lifetime+0x1e>
 c02e756:	2b01      	cmp	r3, #1
 c02e758:	d10a      	bne.n	c02e770 <tfm_crypto_get_key_lifetime+0x1e>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02e75a:	6843      	ldr	r3, [r0, #4]
 c02e75c:	2b34      	cmp	r3, #52	; 0x34
 c02e75e:	d107      	bne.n	c02e770 <tfm_crypto_get_key_lifetime+0x1e>
 c02e760:	6853      	ldr	r3, [r2, #4]
 c02e762:	2b04      	cmp	r3, #4
 c02e764:	d104      	bne.n	c02e770 <tfm_crypto_get_key_lifetime+0x1e>
        (out_vec[0].len != sizeof(psa_key_lifetime_t))) {
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;

    psa_key_handle_t key = iov->key_handle;
 c02e766:	6803      	ldr	r3, [r0, #0]
    psa_key_lifetime_t *lifetime = out_vec[0].base;

    return psa_get_key_lifetime(key, lifetime);
 c02e768:	6811      	ldr	r1, [r2, #0]
 c02e76a:	8898      	ldrh	r0, [r3, #4]
 c02e76c:	f7fa bb52 	b.w	c028e14 <mbedcrypto__psa_get_key_lifetime>
#endif /* TFM_CRYPTO_KEY_MODULE_DISABLED */
}
 c02e770:	f06f 0081 	mvn.w	r0, #129	; 0x81
 c02e774:	4770      	bx	lr

0c02e776 <tfm_crypto_mac_sign_setup>:
/*!@{*/
psa_status_t tfm_crypto_mac_sign_setup(psa_invec in_vec[],
                                       size_t in_len,
                                       psa_outvec out_vec[],
                                       size_t out_len)
{
 c02e776:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
#if (TFM_CRYPTO_MAC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_mac_operation_t *operation = NULL;
 c02e77a:	2400      	movs	r4, #0

    if ((in_len != 1) || (out_len != 1)) {
 c02e77c:	2901      	cmp	r1, #1
    psa_mac_operation_t *operation = NULL;
 c02e77e:	9400      	str	r4, [sp, #0]
    if ((in_len != 1) || (out_len != 1)) {
 c02e780:	d12d      	bne.n	c02e7de <tfm_crypto_mac_sign_setup+0x68>
 c02e782:	2b01      	cmp	r3, #1
 c02e784:	d12b      	bne.n	c02e7de <tfm_crypto_mac_sign_setup+0x68>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((out_vec[0].len != sizeof(uint32_t)) ||
 c02e786:	6853      	ldr	r3, [r2, #4]
 c02e788:	2b04      	cmp	r3, #4
 c02e78a:	d128      	bne.n	c02e7de <tfm_crypto_mac_sign_setup+0x68>
 c02e78c:	6843      	ldr	r3, [r0, #4]
 c02e78e:	2b34      	cmp	r3, #52	; 0x34
 c02e790:	d125      	bne.n	c02e7de <tfm_crypto_mac_sign_setup+0x68>
        (in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec))) {
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c02e792:	6805      	ldr	r5, [r0, #0]
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
    psa_key_handle_t key_handle = iov->key_handle;
    psa_algorithm_t alg = iov->alg;

    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02e794:	4621      	mov	r1, r4
    psa_key_handle_t key_handle = iov->key_handle;
 c02e796:	88af      	ldrh	r7, [r5, #4]
    uint32_t handle = iov->op_handle;
 c02e798:	69ab      	ldr	r3, [r5, #24]
    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02e79a:	4638      	mov	r0, r7
    uint32_t handle = iov->op_handle;
 c02e79c:	9301      	str	r3, [sp, #4]
    uint32_t *handle_out = out_vec[0].base;
 c02e79e:	6816      	ldr	r6, [r2, #0]
    psa_algorithm_t alg = iov->alg;
 c02e7a0:	f8d5 8010 	ldr.w	r8, [r5, #16]
    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02e7a4:	f7ff feb0 	bl	c02e508 <tfm_crypto_check_handle_owner>
    if (status != PSA_SUCCESS) {
 c02e7a8:	4604      	mov	r4, r0
 c02e7aa:	b9a0      	cbnz	r0, c02e7d6 <tfm_crypto_mac_sign_setup+0x60>
        return status;
    }

    /* Init the handle in the operation with the one passed from the iov */
    *handle_out = iov->op_handle;
 c02e7ac:	69ab      	ldr	r3, [r5, #24]

    /* Allocate the operation context in the secure world */
    status = tfm_crypto_operation_alloc(TFM_CRYPTO_MAC_OPERATION,
 c02e7ae:	466a      	mov	r2, sp
    *handle_out = iov->op_handle;
 c02e7b0:	6033      	str	r3, [r6, #0]
    status = tfm_crypto_operation_alloc(TFM_CRYPTO_MAC_OPERATION,
 c02e7b2:	a901      	add	r1, sp, #4
 c02e7b4:	2002      	movs	r0, #2
 c02e7b6:	f7ff f88d 	bl	c02d8d4 <tfm_crypto_operation_alloc>
                                        &handle,
                                        (void **)&operation);
    if (status != PSA_SUCCESS) {
 c02e7ba:	4604      	mov	r4, r0
 c02e7bc:	b958      	cbnz	r0, c02e7d6 <tfm_crypto_mac_sign_setup+0x60>
        return status;
    }

    *handle_out = handle;
 c02e7be:	9b01      	ldr	r3, [sp, #4]

    status = psa_mac_sign_setup(operation, key_handle, alg);
 c02e7c0:	4642      	mov	r2, r8
    *handle_out = handle;
 c02e7c2:	6033      	str	r3, [r6, #0]
    status = psa_mac_sign_setup(operation, key_handle, alg);
 c02e7c4:	4639      	mov	r1, r7
 c02e7c6:	9800      	ldr	r0, [sp, #0]
 c02e7c8:	f7f9 fe42 	bl	c028450 <mbedcrypto__psa_mac_sign_setup>
    if (status != PSA_SUCCESS) {
 c02e7cc:	4604      	mov	r4, r0
 c02e7ce:	b110      	cbz	r0, c02e7d6 <tfm_crypto_mac_sign_setup+0x60>
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02e7d0:	4630      	mov	r0, r6
 c02e7d2:	f7ff f8b1 	bl	c02d938 <tfm_crypto_operation_release>
        return status;
    }

    return PSA_SUCCESS;
#endif /* TFM_CRYPTO_MAC_MODULE_DISABLED */
}
 c02e7d6:	4620      	mov	r0, r4
 c02e7d8:	b002      	add	sp, #8
 c02e7da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02e7de:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02e7e2:	e7f8      	b.n	c02e7d6 <tfm_crypto_mac_sign_setup+0x60>

0c02e7e4 <tfm_crypto_mac_verify_setup>:

psa_status_t tfm_crypto_mac_verify_setup(psa_invec in_vec[],
                                         size_t in_len,
                                         psa_outvec out_vec[],
                                         size_t out_len)
{
 c02e7e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
#if (TFM_CRYPTO_MAC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_mac_operation_t *operation = NULL;
 c02e7e8:	2400      	movs	r4, #0

    if ((in_len != 1) || (out_len != 1)) {
 c02e7ea:	2901      	cmp	r1, #1
    psa_mac_operation_t *operation = NULL;
 c02e7ec:	9400      	str	r4, [sp, #0]
    if ((in_len != 1) || (out_len != 1)) {
 c02e7ee:	d12d      	bne.n	c02e84c <tfm_crypto_mac_verify_setup+0x68>
 c02e7f0:	2b01      	cmp	r3, #1
 c02e7f2:	d12b      	bne.n	c02e84c <tfm_crypto_mac_verify_setup+0x68>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((out_vec[0].len != sizeof(uint32_t)) ||
 c02e7f4:	6853      	ldr	r3, [r2, #4]
 c02e7f6:	2b04      	cmp	r3, #4
 c02e7f8:	d128      	bne.n	c02e84c <tfm_crypto_mac_verify_setup+0x68>
 c02e7fa:	6843      	ldr	r3, [r0, #4]
 c02e7fc:	2b34      	cmp	r3, #52	; 0x34
 c02e7fe:	d125      	bne.n	c02e84c <tfm_crypto_mac_verify_setup+0x68>
        (in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec))) {
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
 c02e800:	6805      	ldr	r5, [r0, #0]
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
    psa_key_handle_t key_handle = iov->key_handle;
    psa_algorithm_t alg = iov->alg;

    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02e802:	4621      	mov	r1, r4
    psa_key_handle_t key_handle = iov->key_handle;
 c02e804:	88af      	ldrh	r7, [r5, #4]
    uint32_t handle = iov->op_handle;
 c02e806:	69ab      	ldr	r3, [r5, #24]
    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02e808:	4638      	mov	r0, r7
    uint32_t handle = iov->op_handle;
 c02e80a:	9301      	str	r3, [sp, #4]
    uint32_t *handle_out = out_vec[0].base;
 c02e80c:	6816      	ldr	r6, [r2, #0]
    psa_algorithm_t alg = iov->alg;
 c02e80e:	f8d5 8010 	ldr.w	r8, [r5, #16]
    status = tfm_crypto_check_handle_owner(key_handle, NULL);
 c02e812:	f7ff fe79 	bl	c02e508 <tfm_crypto_check_handle_owner>
    if (status != PSA_SUCCESS) {
 c02e816:	4604      	mov	r4, r0
 c02e818:	b9a0      	cbnz	r0, c02e844 <tfm_crypto_mac_verify_setup+0x60>
        return status;
    }

    /* Init the handle in the operation with the one passed from the iov */
    *handle_out = iov->op_handle;
 c02e81a:	69ab      	ldr	r3, [r5, #24]

    /* Allocate the operation context in the secure world */
    status = tfm_crypto_operation_alloc(TFM_CRYPTO_MAC_OPERATION,
 c02e81c:	466a      	mov	r2, sp
    *handle_out = iov->op_handle;
 c02e81e:	6033      	str	r3, [r6, #0]
    status = tfm_crypto_operation_alloc(TFM_CRYPTO_MAC_OPERATION,
 c02e820:	a901      	add	r1, sp, #4
 c02e822:	2002      	movs	r0, #2
 c02e824:	f7ff f856 	bl	c02d8d4 <tfm_crypto_operation_alloc>
                                        &handle,
                                        (void **)&operation);
    if (status != PSA_SUCCESS) {
 c02e828:	4604      	mov	r4, r0
 c02e82a:	b958      	cbnz	r0, c02e844 <tfm_crypto_mac_verify_setup+0x60>
        return status;
    }

    *handle_out = handle;
 c02e82c:	9b01      	ldr	r3, [sp, #4]

    status = psa_mac_verify_setup(operation, key_handle, alg);
 c02e82e:	4642      	mov	r2, r8
    *handle_out = handle;
 c02e830:	6033      	str	r3, [r6, #0]
    status = psa_mac_verify_setup(operation, key_handle, alg);
 c02e832:	4639      	mov	r1, r7
 c02e834:	9800      	ldr	r0, [sp, #0]
 c02e836:	f7f9 fe0e 	bl	c028456 <mbedcrypto__psa_mac_verify_setup>
    if (status != PSA_SUCCESS) {
 c02e83a:	4604      	mov	r4, r0
 c02e83c:	b110      	cbz	r0, c02e844 <tfm_crypto_mac_verify_setup+0x60>
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02e83e:	4630      	mov	r0, r6
 c02e840:	f7ff f87a 	bl	c02d938 <tfm_crypto_operation_release>
        return status;
    }

    return PSA_SUCCESS;
#endif /* TFM_CRYPTO_MAC_MODULE_DISABLED */
}
 c02e844:	4620      	mov	r0, r4
 c02e846:	b002      	add	sp, #8
 c02e848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02e84c:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02e850:	e7f8      	b.n	c02e844 <tfm_crypto_mac_verify_setup+0x60>

0c02e852 <tfm_crypto_mac_update>:

psa_status_t tfm_crypto_mac_update(psa_invec in_vec[],
                                   size_t in_len,
                                   psa_outvec out_vec[],
                                   size_t out_len)
{
 c02e852:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 c02e854:	460c      	mov	r4, r1
#if (TFM_CRYPTO_MAC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_mac_operation_t *operation = NULL;
 c02e856:	2100      	movs	r1, #0

    if ((in_len != 2) || (out_len != 1)) {
 c02e858:	2c02      	cmp	r4, #2
    psa_mac_operation_t *operation = NULL;
 c02e85a:	9101      	str	r1, [sp, #4]
    if ((in_len != 2) || (out_len != 1)) {
 c02e85c:	d120      	bne.n	c02e8a0 <tfm_crypto_mac_update+0x4e>
 c02e85e:	2b01      	cmp	r3, #1
 c02e860:	d11e      	bne.n	c02e8a0 <tfm_crypto_mac_update+0x4e>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02e862:	6843      	ldr	r3, [r0, #4]
 c02e864:	2b34      	cmp	r3, #52	; 0x34
 c02e866:	d11b      	bne.n	c02e8a0 <tfm_crypto_mac_update+0x4e>
 c02e868:	6853      	ldr	r3, [r2, #4]
 c02e86a:	2b04      	cmp	r3, #4
 c02e86c:	d118      	bne.n	c02e8a0 <tfm_crypto_mac_update+0x4e>
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
    const uint8_t *input = in_vec[1].base;
    size_t input_length = in_vec[1].len;
 c02e86e:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
    uint32_t handle = iov->op_handle;
 c02e872:	6803      	ldr	r3, [r0, #0]
    uint32_t *handle_out = out_vec[0].base;
 c02e874:	6815      	ldr	r5, [r2, #0]
    uint32_t handle = iov->op_handle;
 c02e876:	6999      	ldr	r1, [r3, #24]

    /* Init the handle in the operation with the one passed from the iov */
    *handle_out = iov->op_handle;

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_MAC_OPERATION,
 c02e878:	4620      	mov	r0, r4
    *handle_out = iov->op_handle;
 c02e87a:	6029      	str	r1, [r5, #0]
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_MAC_OPERATION,
 c02e87c:	aa01      	add	r2, sp, #4
 c02e87e:	f7ff f895 	bl	c02d9ac <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&operation);
    if (status != PSA_SUCCESS) {
 c02e882:	4604      	mov	r4, r0
 c02e884:	b948      	cbnz	r0, c02e89a <tfm_crypto_mac_update+0x48>
        return status;
    }

    status = psa_mac_update(operation, input, input_length);
 c02e886:	463a      	mov	r2, r7
 c02e888:	4631      	mov	r1, r6
 c02e88a:	9801      	ldr	r0, [sp, #4]
 c02e88c:	f7f9 fde6 	bl	c02845c <mbedcrypto__psa_mac_update>
    if (status != PSA_SUCCESS) {
 c02e890:	4604      	mov	r4, r0
 c02e892:	b110      	cbz	r0, c02e89a <tfm_crypto_mac_update+0x48>
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02e894:	4628      	mov	r0, r5
 c02e896:	f7ff f84f 	bl	c02d938 <tfm_crypto_operation_release>
        return status;
    }

    return PSA_SUCCESS;
#endif /* TFM_CRYPTO_MAC_MODULE_DISABLED */
}
 c02e89a:	4620      	mov	r0, r4
 c02e89c:	b003      	add	sp, #12
 c02e89e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return PSA_ERROR_CONNECTION_REFUSED;
 c02e8a0:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02e8a4:	e7f9      	b.n	c02e89a <tfm_crypto_mac_update+0x48>

0c02e8a6 <tfm_crypto_mac_sign_finish>:

psa_status_t tfm_crypto_mac_sign_finish(psa_invec in_vec[],
                                        size_t in_len,
                                        psa_outvec out_vec[],
                                        size_t out_len)
{
 c02e8a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 c02e8aa:	4615      	mov	r5, r2
#if (TFM_CRYPTO_MAC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_mac_operation_t *operation = NULL;
 c02e8ac:	2200      	movs	r2, #0

    if ((in_len != 1) || (out_len != 2)) {
 c02e8ae:	2901      	cmp	r1, #1
    psa_mac_operation_t *operation = NULL;
 c02e8b0:	9201      	str	r2, [sp, #4]
    if ((in_len != 1) || (out_len != 2)) {
 c02e8b2:	d128      	bne.n	c02e906 <tfm_crypto_mac_sign_finish+0x60>
 c02e8b4:	2b02      	cmp	r3, #2
 c02e8b6:	d126      	bne.n	c02e906 <tfm_crypto_mac_sign_finish+0x60>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02e8b8:	6841      	ldr	r1, [r0, #4]
 c02e8ba:	2934      	cmp	r1, #52	; 0x34
 c02e8bc:	d123      	bne.n	c02e906 <tfm_crypto_mac_sign_finish+0x60>
 c02e8be:	6869      	ldr	r1, [r5, #4]
 c02e8c0:	2904      	cmp	r1, #4
 c02e8c2:	d120      	bne.n	c02e906 <tfm_crypto_mac_sign_finish+0x60>
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
    uint8_t *mac = out_vec[1].base;
    size_t mac_size = out_vec[1].len;
 c02e8c4:	e9d5 7802 	ldrd	r7, r8, [r5, #8]
    uint32_t handle = iov->op_handle;
 c02e8c8:	6801      	ldr	r1, [r0, #0]
    uint32_t *handle_out = out_vec[0].base;
 c02e8ca:	682e      	ldr	r6, [r5, #0]
    uint32_t handle = iov->op_handle;
 c02e8cc:	6989      	ldr	r1, [r1, #24]

    /* Initialise mac_length to zero */
    out_vec[1].len = 0;

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_MAC_OPERATION,
 c02e8ce:	4618      	mov	r0, r3
    *handle_out = iov->op_handle;
 c02e8d0:	6031      	str	r1, [r6, #0]
    out_vec[1].len = 0;
 c02e8d2:	60ea      	str	r2, [r5, #12]
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_MAC_OPERATION,
 c02e8d4:	aa01      	add	r2, sp, #4
 c02e8d6:	f7ff f869 	bl	c02d9ac <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&operation);
    if (status != PSA_SUCCESS) {
 c02e8da:	4604      	mov	r4, r0
 c02e8dc:	b958      	cbnz	r0, c02e8f6 <tfm_crypto_mac_sign_finish+0x50>
        return status;
    }

    status = psa_mac_sign_finish(operation, mac, mac_size, &out_vec[1].len);
 c02e8de:	f105 030c 	add.w	r3, r5, #12
 c02e8e2:	4642      	mov	r2, r8
 c02e8e4:	4639      	mov	r1, r7
 c02e8e6:	9801      	ldr	r0, [sp, #4]
 c02e8e8:	f7f9 fde8 	bl	c0284bc <mbedcrypto__psa_mac_sign_finish>
    if (status != PSA_SUCCESS) {
 c02e8ec:	4604      	mov	r4, r0
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02e8ee:	4630      	mov	r0, r6
    if (status != PSA_SUCCESS) {
 c02e8f0:	b12c      	cbz	r4, c02e8fe <tfm_crypto_mac_sign_finish+0x58>
        (void)tfm_crypto_operation_release(handle_out);
 c02e8f2:	f7ff f821 	bl	c02d938 <tfm_crypto_operation_release>

    status = tfm_crypto_operation_release(handle_out);

    return status;
#endif /* TFM_CRYPTO_MAC_MODULE_DISABLED */
}
 c02e8f6:	4620      	mov	r0, r4
 c02e8f8:	b002      	add	sp, #8
 c02e8fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = tfm_crypto_operation_release(handle_out);
 c02e8fe:	f7ff f81b 	bl	c02d938 <tfm_crypto_operation_release>
 c02e902:	4604      	mov	r4, r0
    return status;
 c02e904:	e7f7      	b.n	c02e8f6 <tfm_crypto_mac_sign_finish+0x50>
        return PSA_ERROR_CONNECTION_REFUSED;
 c02e906:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02e90a:	e7f4      	b.n	c02e8f6 <tfm_crypto_mac_sign_finish+0x50>

0c02e90c <tfm_crypto_mac_verify_finish>:

psa_status_t tfm_crypto_mac_verify_finish(psa_invec in_vec[],
                                          size_t in_len,
                                          psa_outvec out_vec[],
                                          size_t out_len)
{
 c02e90c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 c02e90e:	460c      	mov	r4, r1
#if (TFM_CRYPTO_MAC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_mac_operation_t *operation = NULL;
 c02e910:	2100      	movs	r1, #0

    if ((in_len != 2) || (out_len != 1)) {
 c02e912:	2c02      	cmp	r4, #2
    psa_mac_operation_t *operation = NULL;
 c02e914:	9101      	str	r1, [sp, #4]
    if ((in_len != 2) || (out_len != 1)) {
 c02e916:	d124      	bne.n	c02e962 <tfm_crypto_mac_verify_finish+0x56>
 c02e918:	2b01      	cmp	r3, #1
 c02e91a:	d122      	bne.n	c02e962 <tfm_crypto_mac_verify_finish+0x56>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02e91c:	6843      	ldr	r3, [r0, #4]
 c02e91e:	2b34      	cmp	r3, #52	; 0x34
 c02e920:	d11f      	bne.n	c02e962 <tfm_crypto_mac_verify_finish+0x56>
 c02e922:	6853      	ldr	r3, [r2, #4]
 c02e924:	2b04      	cmp	r3, #4
 c02e926:	d11c      	bne.n	c02e962 <tfm_crypto_mac_verify_finish+0x56>
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
    uint32_t handle = iov->op_handle;
    uint32_t *handle_out = out_vec[0].base;
    const uint8_t *mac = in_vec[1].base;
    size_t mac_length = in_vec[1].len;
 c02e928:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
    uint32_t handle = iov->op_handle;
 c02e92c:	6803      	ldr	r3, [r0, #0]
    uint32_t *handle_out = out_vec[0].base;
 c02e92e:	6815      	ldr	r5, [r2, #0]
    uint32_t handle = iov->op_handle;
 c02e930:	6999      	ldr	r1, [r3, #24]

    /* Init the handle in the operation with the one passed from the iov */
    *handle_out = iov->op_handle;

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_MAC_OPERATION,
 c02e932:	4620      	mov	r0, r4
    *handle_out = iov->op_handle;
 c02e934:	6029      	str	r1, [r5, #0]
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_MAC_OPERATION,
 c02e936:	aa01      	add	r2, sp, #4
 c02e938:	f7ff f838 	bl	c02d9ac <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&operation);
    if (status != PSA_SUCCESS) {
 c02e93c:	4604      	mov	r4, r0
 c02e93e:	b948      	cbnz	r0, c02e954 <tfm_crypto_mac_verify_finish+0x48>
        return status;
    }

    status = psa_mac_verify_finish(operation, mac, mac_length);
 c02e940:	463a      	mov	r2, r7
 c02e942:	4631      	mov	r1, r6
 c02e944:	9801      	ldr	r0, [sp, #4]
 c02e946:	f7f9 fde9 	bl	c02851c <mbedcrypto__psa_mac_verify_finish>
    if (status != PSA_SUCCESS) {
 c02e94a:	4604      	mov	r4, r0
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02e94c:	4628      	mov	r0, r5
    if (status != PSA_SUCCESS) {
 c02e94e:	b124      	cbz	r4, c02e95a <tfm_crypto_mac_verify_finish+0x4e>
        (void)tfm_crypto_operation_release(handle_out);
 c02e950:	f7fe fff2 	bl	c02d938 <tfm_crypto_operation_release>

    status = tfm_crypto_operation_release(handle_out);

    return status;
#endif /* TFM_CRYPTO_MAC_MODULE_DISABLED */
}
 c02e954:	4620      	mov	r0, r4
 c02e956:	b003      	add	sp, #12
 c02e958:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = tfm_crypto_operation_release(handle_out);
 c02e95a:	f7fe ffed 	bl	c02d938 <tfm_crypto_operation_release>
 c02e95e:	4604      	mov	r4, r0
    return status;
 c02e960:	e7f8      	b.n	c02e954 <tfm_crypto_mac_verify_finish+0x48>
        return PSA_ERROR_CONNECTION_REFUSED;
 c02e962:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02e966:	e7f5      	b.n	c02e954 <tfm_crypto_mac_verify_finish+0x48>

0c02e968 <tfm_crypto_mac_abort>:

psa_status_t tfm_crypto_mac_abort(psa_invec in_vec[],
                                  size_t in_len,
                                  psa_outvec out_vec[],
                                  size_t out_len)
{
 c02e968:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if (TFM_CRYPTO_MAC_MODULE_DISABLED != 0)
    return PSA_ERROR_NOT_SUPPORTED;
#else
    psa_status_t status = PSA_SUCCESS;
    psa_mac_operation_t *operation = NULL;
 c02e96a:	2400      	movs	r4, #0

    if ((in_len != 1) || (out_len != 1)) {
 c02e96c:	2901      	cmp	r1, #1
    psa_mac_operation_t *operation = NULL;
 c02e96e:	9401      	str	r4, [sp, #4]
    if ((in_len != 1) || (out_len != 1)) {
 c02e970:	d11f      	bne.n	c02e9b2 <tfm_crypto_mac_abort+0x4a>
 c02e972:	2b01      	cmp	r3, #1
 c02e974:	d11d      	bne.n	c02e9b2 <tfm_crypto_mac_abort+0x4a>
        return PSA_ERROR_CONNECTION_REFUSED;
    }

    if ((in_vec[0].len != sizeof(struct tfm_crypto_pack_iovec)) ||
 c02e976:	6843      	ldr	r3, [r0, #4]
 c02e978:	2b34      	cmp	r3, #52	; 0x34
 c02e97a:	d11a      	bne.n	c02e9b2 <tfm_crypto_mac_abort+0x4a>
 c02e97c:	6853      	ldr	r3, [r2, #4]
 c02e97e:	2b04      	cmp	r3, #4
 c02e980:	d117      	bne.n	c02e9b2 <tfm_crypto_mac_abort+0x4a>
        (out_vec[0].len != sizeof(uint32_t))) {
        return PSA_ERROR_CONNECTION_REFUSED;
    }
    const struct tfm_crypto_pack_iovec *iov = in_vec[0].base;
    uint32_t handle = iov->op_handle;
 c02e982:	6803      	ldr	r3, [r0, #0]
    uint32_t *handle_out = out_vec[0].base;
 c02e984:	6815      	ldr	r5, [r2, #0]
    uint32_t handle = iov->op_handle;
 c02e986:	6999      	ldr	r1, [r3, #24]

    /* Init the handle in the operation with the one passed from the iov */
    *handle_out = iov->op_handle;

    /* Look up the corresponding operation context */
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_MAC_OPERATION,
 c02e988:	aa01      	add	r2, sp, #4
    *handle_out = iov->op_handle;
 c02e98a:	6029      	str	r1, [r5, #0]
    status = tfm_crypto_operation_lookup(TFM_CRYPTO_MAC_OPERATION,
 c02e98c:	2002      	movs	r0, #2
 c02e98e:	f7ff f80d 	bl	c02d9ac <tfm_crypto_operation_lookup>
                                         handle,
                                         (void **)&operation);
    if (status != PSA_SUCCESS) {
 c02e992:	b938      	cbnz	r0, c02e9a4 <tfm_crypto_mac_abort+0x3c>
        /* Operation does not exist, so abort has no effect */
        return PSA_SUCCESS;
    }

    status = psa_mac_abort(operation);
 c02e994:	9801      	ldr	r0, [sp, #4]
 c02e996:	f7f9 fc3f 	bl	c028218 <mbedcrypto__psa_mac_abort>

    if (status != PSA_SUCCESS) {
 c02e99a:	4604      	mov	r4, r0
        /* Release the operation context, ignore if the operation fails. */
        (void)tfm_crypto_operation_release(handle_out);
 c02e99c:	4628      	mov	r0, r5
    if (status != PSA_SUCCESS) {
 c02e99e:	b124      	cbz	r4, c02e9aa <tfm_crypto_mac_abort+0x42>
        (void)tfm_crypto_operation_release(handle_out);
 c02e9a0:	f7fe ffca 	bl	c02d938 <tfm_crypto_operation_release>

    status = tfm_crypto_operation_release(handle_out);

    return status;
#endif /* TFM_CRYPTO_MAC_MODULE_DISABLED */
}
 c02e9a4:	4620      	mov	r0, r4
 c02e9a6:	b003      	add	sp, #12
 c02e9a8:	bd30      	pop	{r4, r5, pc}
    status = tfm_crypto_operation_release(handle_out);
 c02e9aa:	f7fe ffc5 	bl	c02d938 <tfm_crypto_operation_release>
 c02e9ae:	4604      	mov	r4, r0
    return status;
 c02e9b0:	e7f8      	b.n	c02e9a4 <tfm_crypto_mac_abort+0x3c>
        return PSA_ERROR_CONNECTION_REFUSED;
 c02e9b2:	f06f 0481 	mvn.w	r4, #129	; 0x81
 c02e9b6:	e7f5      	b.n	c02e9a4 <tfm_crypto_mac_abort+0x3c>

0c02e9b8 <its_flash_init>:
    return PSA_SUCCESS;
}
#endif /* ITS_RAM_FS */

psa_status_t its_flash_init(void)
{
 c02e9b8:	b508      	push	{r3, lr}
    err = ITS_FLASH_DEV_NAME.Initialize(NULL);
 c02e9ba:	4b05      	ldr	r3, [pc, #20]	; (c02e9d0 <its_flash_init+0x18>)
 c02e9bc:	2000      	movs	r0, #0
 c02e9be:	689b      	ldr	r3, [r3, #8]
 c02e9c0:	4798      	blx	r3
    if (err != ARM_DRIVER_OK) {
 c02e9c2:	2800      	cmp	r0, #0
    return flash_init();
}
 c02e9c4:	bf14      	ite	ne
 c02e9c6:	f06f 0091 	mvnne.w	r0, #145	; 0x91
 c02e9ca:	2000      	moveq	r0, #0
 c02e9cc:	bd08      	pop	{r3, pc}
 c02e9ce:	bf00      	nop
 c02e9d0:	0c032ca4 	.word	0x0c032ca4

0c02e9d4 <its_flash_read>:

psa_status_t its_flash_read(uint32_t block_id, uint8_t *buff,
                            size_t offset, size_t size)
{
 c02e9d4:	b510      	push	{r4, lr}
    err = ITS_FLASH_DEV_NAME.ReadData(flash_addr, buff, size);
 c02e9d6:	4c06      	ldr	r4, [pc, #24]	; (c02e9f0 <its_flash_read+0x1c>)
    return (ITS_FLASH_AREA_ADDR + (block_id * ITS_BLOCK_SIZE) + offset);
 c02e9d8:	3012      	adds	r0, #18
 c02e9da:	eb02 3000 	add.w	r0, r2, r0, lsl #12
    err = ITS_FLASH_DEV_NAME.ReadData(flash_addr, buff, size);
 c02e9de:	461a      	mov	r2, r3
 c02e9e0:	6963      	ldr	r3, [r4, #20]
 c02e9e2:	4798      	blx	r3
    if (err != ARM_DRIVER_OK) {
 c02e9e4:	2800      	cmp	r0, #0
     * parameters.
     */
    flash_addr = get_phys_address(block_id, offset);

    return flash_read(flash_addr, size, buff);
}
 c02e9e6:	bf14      	ite	ne
 c02e9e8:	f06f 0091 	mvnne.w	r0, #145	; 0x91
 c02e9ec:	2000      	moveq	r0, #0
 c02e9ee:	bd10      	pop	{r4, pc}
 c02e9f0:	0c032ca4 	.word	0x0c032ca4

0c02e9f4 <its_flash_write>:

psa_status_t its_flash_write(uint32_t block_id, const uint8_t *buff,
                             size_t offset, size_t size)
{
 c02e9f4:	b510      	push	{r4, lr}
    err = ITS_FLASH_DEV_NAME.ProgramData(flash_addr, buff, size);
 c02e9f6:	4c06      	ldr	r4, [pc, #24]	; (c02ea10 <its_flash_write+0x1c>)
    return (ITS_FLASH_AREA_ADDR + (block_id * ITS_BLOCK_SIZE) + offset);
 c02e9f8:	3012      	adds	r0, #18
 c02e9fa:	eb02 3000 	add.w	r0, r2, r0, lsl #12
    err = ITS_FLASH_DEV_NAME.ProgramData(flash_addr, buff, size);
 c02e9fe:	461a      	mov	r2, r3
 c02ea00:	69a3      	ldr	r3, [r4, #24]
 c02ea02:	4798      	blx	r3
    if (err != ARM_DRIVER_OK) {
 c02ea04:	2800      	cmp	r0, #0
     * parameters.
     */
    flash_addr = get_phys_address(block_id, offset);

    return flash_write(flash_addr, size, buff);
}
 c02ea06:	bf14      	ite	ne
 c02ea08:	f06f 0091 	mvnne.w	r0, #145	; 0x91
 c02ea0c:	2000      	moveq	r0, #0
 c02ea0e:	bd10      	pop	{r4, pc}
 c02ea10:	0c032ca4 	.word	0x0c032ca4

0c02ea14 <its_flash_block_to_block_move>:
psa_status_t its_flash_block_to_block_move(uint32_t dst_block,
                                           size_t dst_offset,
                                           uint32_t src_block,
                                           size_t src_offset,
                                           size_t size)
{
 c02ea14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c02ea18:	b0c0      	sub	sp, #256	; 0x100
    return (ITS_FLASH_AREA_ADDR + (block_id * ITS_BLOCK_SIZE) + offset);
 c02ea1a:	3212      	adds	r2, #18
 c02ea1c:	3012      	adds	r0, #18
{
 c02ea1e:	9c46      	ldr	r4, [sp, #280]	; 0x118
    err = ITS_FLASH_DEV_NAME.ReadData(flash_addr, buff, size);
 c02ea20:	f8df 804c 	ldr.w	r8, [pc, #76]	; c02ea70 <its_flash_block_to_block_move+0x5c>
    return (ITS_FLASH_AREA_ADDR + (block_id * ITS_BLOCK_SIZE) + offset);
 c02ea24:	eb03 3602 	add.w	r6, r3, r2, lsl #12
 c02ea28:	eb01 3500 	add.w	r5, r1, r0, lsl #12

    /* Gets flash addresses defined by block ID and offset parameters */
    src_flash_addr = get_phys_address(src_block, src_offset);
    dst_flash_addr = get_phys_address(dst_block, dst_offset);

    while (size > 0) {
 c02ea2c:	b90c      	cbnz	r4, c02ea32 <its_flash_block_to_block_move+0x1e>

        /* Decrement remaining size to move */
        size -= bytes_to_move;
    };

    return PSA_SUCCESS;
 c02ea2e:	4620      	mov	r0, r4
 c02ea30:	e00e      	b.n	c02ea50 <its_flash_block_to_block_move+0x3c>
        bytes_to_move = ITS_UTILS_MIN(size, MAX_BLOCK_DATA_COPY);
 c02ea32:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 c02ea36:	4627      	mov	r7, r4
 c02ea38:	bf28      	it	cs
 c02ea3a:	f44f 7780 	movcs.w	r7, #256	; 0x100
    err = ITS_FLASH_DEV_NAME.ReadData(flash_addr, buff, size);
 c02ea3e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 c02ea42:	463a      	mov	r2, r7
 c02ea44:	4669      	mov	r1, sp
 c02ea46:	4630      	mov	r0, r6
 c02ea48:	4798      	blx	r3
    if (err != ARM_DRIVER_OK) {
 c02ea4a:	b120      	cbz	r0, c02ea56 <its_flash_block_to_block_move+0x42>
        return PSA_ERROR_STORAGE_FAILURE;
 c02ea4c:	f06f 0091 	mvn.w	r0, #145	; 0x91
}
 c02ea50:	b040      	add	sp, #256	; 0x100
 c02ea52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    err = ITS_FLASH_DEV_NAME.ProgramData(flash_addr, buff, size);
 c02ea56:	f8d8 3018 	ldr.w	r3, [r8, #24]
 c02ea5a:	463a      	mov	r2, r7
 c02ea5c:	4669      	mov	r1, sp
 c02ea5e:	4628      	mov	r0, r5
 c02ea60:	4798      	blx	r3
    if (err != ARM_DRIVER_OK) {
 c02ea62:	2800      	cmp	r0, #0
 c02ea64:	d1f2      	bne.n	c02ea4c <its_flash_block_to_block_move+0x38>
        src_flash_addr += bytes_to_move;
 c02ea66:	443e      	add	r6, r7
        dst_flash_addr += bytes_to_move;
 c02ea68:	443d      	add	r5, r7
        size -= bytes_to_move;
 c02ea6a:	1be4      	subs	r4, r4, r7
 c02ea6c:	e7de      	b.n	c02ea2c <its_flash_block_to_block_move+0x18>
 c02ea6e:	bf00      	nop
 c02ea70:	0c032ca4 	.word	0x0c032ca4

0c02ea74 <its_flash_erase_block>:

psa_status_t its_flash_erase_block(uint32_t block_id)
{
 c02ea74:	b508      	push	{r3, lr}
    err = ITS_FLASH_DEV_NAME.EraseSector(flash_addr);
 c02ea76:	4b05      	ldr	r3, [pc, #20]	; (c02ea8c <its_flash_erase_block+0x18>)
    return (ITS_FLASH_AREA_ADDR + (block_id * ITS_BLOCK_SIZE) + offset);
 c02ea78:	3012      	adds	r0, #18
    err = ITS_FLASH_DEV_NAME.EraseSector(flash_addr);
 c02ea7a:	69db      	ldr	r3, [r3, #28]
 c02ea7c:	0300      	lsls	r0, r0, #12
 c02ea7e:	4798      	blx	r3
    if (err != ARM_DRIVER_OK) {
 c02ea80:	2800      	cmp	r0, #0
     * BLOCK_START_OFFSET parameters.
     */
    flash_addr = get_phys_address(block_id, BLOCK_START_OFFSET);

    return flash_erase(flash_addr);
}
 c02ea82:	bf14      	ite	ne
 c02ea84:	f06f 0091 	mvnne.w	r0, #145	; 0x91
 c02ea88:	2000      	moveq	r0, #0
 c02ea8a:	bd08      	pop	{r3, pc}
 c02ea8c:	0c032ca4 	.word	0x0c032ca4

0c02ea90 <its_flash_fs_prepare>:
}

psa_status_t its_flash_fs_prepare(void)
{
    /* Initialize metadata block with the valid/active metablock */
    return its_flash_fs_mblock_init();
 c02ea90:	f000 ba22 	b.w	c02eed8 <its_flash_fs_mblock_init>

0c02ea94 <its_flash_fs_wipe_all>:
}

psa_status_t its_flash_fs_wipe_all(void)
{
    /* Clean and initialize the metadata block */
    return its_flash_fs_mblock_reset_metablock();
 c02ea94:	f000 bb38 	b.w	c02f108 <its_flash_fs_mblock_reset_metablock>

0c02ea98 <its_flash_fs_file_create>:
psa_status_t its_flash_fs_file_create(const uint8_t *fid,
                                      size_t max_size,
                                      size_t data_size,
                                      uint32_t flags,
                                      const uint8_t *data)
{
 c02ea98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c02ea9c:	b090      	sub	sp, #64	; 0x40
 c02ea9e:	460c      	mov	r4, r1
    psa_status_t err;
    uint32_t idx;
    struct its_file_meta_t file_meta;

    /* Check if file already exists */
    err = its_flash_fs_mblock_get_file_idx(fid, &idx);
 c02eaa0:	a903      	add	r1, sp, #12
{
 c02eaa2:	4681      	mov	r9, r0
 c02eaa4:	4615      	mov	r5, r2
 c02eaa6:	469a      	mov	sl, r3
 c02eaa8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
    err = its_flash_fs_mblock_get_file_idx(fid, &idx);
 c02eaac:	f000 fa4e 	bl	c02ef4c <its_flash_fs_mblock_get_file_idx>
    if (err == PSA_SUCCESS) {
 c02eab0:	b920      	cbnz	r0, c02eabc <its_flash_fs_file_create+0x24>
        /* If it exits return an error as needs to be removed first */
        return PSA_ERROR_INVALID_ARGUMENT;
 c02eab2:	f06f 0086 	mvn.w	r0, #134	; 0x86
        }
    }

    /* Write metadata header, swap metadata blocks and erase scratch blocks */
    return its_flash_fs_mblock_meta_update_finalize();
}
 c02eab6:	b010      	add	sp, #64	; 0x40
 c02eab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    max_size = GET_ALIGNED_FLASH_BYTES(max_size);
 c02eabc:	3407      	adds	r4, #7
 c02eabe:	f024 0407 	bic.w	r4, r4, #7
    err = its_flash_fs_mblock_reserve_file(fid, max_size, flags, &idx,
 c02eac2:	af04      	add	r7, sp, #16
 c02eac4:	ae08      	add	r6, sp, #32
 c02eac6:	9701      	str	r7, [sp, #4]
 c02eac8:	9600      	str	r6, [sp, #0]
 c02eaca:	ab03      	add	r3, sp, #12
 c02eacc:	4652      	mov	r2, sl
 c02eace:	4621      	mov	r1, r4
 c02ead0:	4648      	mov	r0, r9
 c02ead2:	f000 fa7d 	bl	c02efd0 <its_flash_fs_mblock_reserve_file>
    if (err != PSA_SUCCESS) {
 c02ead6:	2800      	cmp	r0, #0
 c02ead8:	d1ed      	bne.n	c02eab6 <its_flash_fs_file_create+0x1e>
    if (data_size != 0) {
 c02eada:	b305      	cbz	r5, c02eb1e <its_flash_fs_file_create+0x86>
        if ((data_size > max_size) || (data == NULL)) {
 c02eadc:	42ac      	cmp	r4, r5
 c02eade:	d3e8      	bcc.n	c02eab2 <its_flash_fs_file_create+0x1a>
 c02eae0:	f1b8 0f00 	cmp.w	r8, #0
 c02eae4:	d0e5      	beq.n	c02eab2 <its_flash_fs_file_create+0x1a>
    return its_flash_fs_dblock_write_file(file_meta->lblock, f_offset,
 c02eae6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    size = GET_ALIGNED_FLASH_BYTES(size);
 c02eaea:	1dea      	adds	r2, r5, #7
    return its_flash_fs_dblock_write_file(file_meta->lblock, f_offset,
 c02eaec:	4643      	mov	r3, r8
 c02eaee:	f022 0207 	bic.w	r2, r2, #7
 c02eaf2:	f000 f93e 	bl	c02ed72 <its_flash_fs_dblock_write_file>
        if (err != PSA_SUCCESS) {
 c02eaf6:	b110      	cbz	r0, c02eafe <its_flash_fs_file_create+0x66>
            return PSA_ERROR_GENERIC_ERROR;
 c02eaf8:	f06f 0083 	mvn.w	r0, #131	; 0x83
 c02eafc:	e7db      	b.n	c02eab6 <its_flash_fs_file_create+0x1e>
        err = its_flash_fs_dblock_cp_remaining_data(&block_meta, &file_meta);
 c02eafe:	4631      	mov	r1, r6
 c02eb00:	4638      	mov	r0, r7
        file_meta.cur_size = data_size;
 c02eb02:	950a      	str	r5, [sp, #40]	; 0x28
        err = its_flash_fs_dblock_cp_remaining_data(&block_meta, &file_meta);
 c02eb04:	f000 f942 	bl	c02ed8c <its_flash_fs_dblock_cp_remaining_data>
        if (err != PSA_SUCCESS) {
 c02eb08:	2800      	cmp	r0, #0
 c02eb0a:	d1f5      	bne.n	c02eaf8 <its_flash_fs_file_create+0x60>
        block_meta.phy_id = its_flash_fs_mblock_cur_data_scratch_id(
 c02eb0c:	9808      	ldr	r0, [sp, #32]
        cur_phys_block = block_meta.phy_id;
 c02eb0e:	9c04      	ldr	r4, [sp, #16]
        block_meta.phy_id = its_flash_fs_mblock_cur_data_scratch_id(
 c02eb10:	f000 f9da 	bl	c02eec8 <its_flash_fs_mblock_cur_data_scratch_id>
        its_flash_fs_mblock_set_data_scratch(cur_phys_block, file_meta.lblock);
 c02eb14:	9908      	ldr	r1, [sp, #32]
        block_meta.phy_id = its_flash_fs_mblock_cur_data_scratch_id(
 c02eb16:	9004      	str	r0, [sp, #16]
        its_flash_fs_mblock_set_data_scratch(cur_phys_block, file_meta.lblock);
 c02eb18:	4620      	mov	r0, r4
 c02eb1a:	f000 faa5 	bl	c02f068 <its_flash_fs_mblock_set_data_scratch>
    err = its_flash_fs_mblock_update_scratch_block_meta(file_meta.lblock,
 c02eb1e:	4639      	mov	r1, r7
 c02eb20:	9808      	ldr	r0, [sp, #32]
 c02eb22:	f000 faa7 	bl	c02f074 <its_flash_fs_mblock_update_scratch_block_meta>
    if (err != PSA_SUCCESS) {
 c02eb26:	2800      	cmp	r0, #0
 c02eb28:	d1e6      	bne.n	c02eaf8 <its_flash_fs_file_create+0x60>
    err = its_flash_fs_mblock_update_scratch_file_meta(idx, &file_meta);
 c02eb2a:	4631      	mov	r1, r6
 c02eb2c:	9803      	ldr	r0, [sp, #12]
 c02eb2e:	f000 fae1 	bl	c02f0f4 <its_flash_fs_mblock_update_scratch_file_meta>
    if (err != PSA_SUCCESS) {
 c02eb32:	2800      	cmp	r0, #0
 c02eb34:	d1e0      	bne.n	c02eaf8 <its_flash_fs_file_create+0x60>
    err = its_flash_fs_mblock_cp_remaining_file_meta(idx);
 c02eb36:	9803      	ldr	r0, [sp, #12]
 c02eb38:	f000 f9a8 	bl	c02ee8c <its_flash_fs_mblock_cp_remaining_file_meta>
    if (err != PSA_SUCCESS) {
 c02eb3c:	2800      	cmp	r0, #0
 c02eb3e:	d1db      	bne.n	c02eaf8 <its_flash_fs_file_create+0x60>
    if ((file_meta.lblock != ITS_LOGICAL_DBLOCK0) || (data_size == 0)) {
 c02eb40:	9b08      	ldr	r3, [sp, #32]
 c02eb42:	b91b      	cbnz	r3, c02eb4c <its_flash_fs_file_create+0xb4>
 c02eb44:	b115      	cbz	r5, c02eb4c <its_flash_fs_file_create+0xb4>
    return its_flash_fs_mblock_meta_update_finalize();
 c02eb46:	f000 f9e7 	bl	c02ef18 <its_flash_fs_mblock_meta_update_finalize>
 c02eb4a:	e7b4      	b.n	c02eab6 <its_flash_fs_file_create+0x1e>
        err = its_flash_fs_mblock_migrate_lb0_data_to_scratch();
 c02eb4c:	f000 fa26 	bl	c02ef9c <its_flash_fs_mblock_migrate_lb0_data_to_scratch>
        if (err != PSA_SUCCESS) {
 c02eb50:	2800      	cmp	r0, #0
 c02eb52:	d0f8      	beq.n	c02eb46 <its_flash_fs_file_create+0xae>
 c02eb54:	e7d0      	b.n	c02eaf8 <its_flash_fs_file_create+0x60>

0c02eb56 <its_flash_fs_file_get_info>:

psa_status_t its_flash_fs_file_get_info(const uint8_t *fid,
                                        struct its_file_info_t *info)
{
 c02eb56:	b570      	push	{r4, r5, r6, lr}
 c02eb58:	b08a      	sub	sp, #40	; 0x28
 c02eb5a:	460d      	mov	r5, r1
    psa_status_t err;
    uint32_t idx;
    struct its_file_meta_t tmp_metadata;

    /* Get the meta data index */
    err = its_flash_fs_mblock_get_file_idx(fid, &idx);
 c02eb5c:	a901      	add	r1, sp, #4
{
 c02eb5e:	4606      	mov	r6, r0
    err = its_flash_fs_mblock_get_file_idx(fid, &idx);
 c02eb60:	f000 f9f4 	bl	c02ef4c <its_flash_fs_mblock_get_file_idx>
    if (err != PSA_SUCCESS) {
 c02eb64:	b120      	cbz	r0, c02eb70 <its_flash_fs_file_get_info+0x1a>
        return PSA_ERROR_DOES_NOT_EXIST;
 c02eb66:	f06f 048b 	mvn.w	r4, #139	; 0x8b
    info->size_max = tmp_metadata.max_size;
    info->size_current = tmp_metadata.cur_size;
    info->flags = tmp_metadata.flags;

    return PSA_SUCCESS;
}
 c02eb6a:	4620      	mov	r0, r4
 c02eb6c:	b00a      	add	sp, #40	; 0x28
 c02eb6e:	bd70      	pop	{r4, r5, r6, pc}
    err = its_flash_fs_mblock_read_file_meta(idx, &tmp_metadata);
 c02eb70:	a902      	add	r1, sp, #8
 c02eb72:	9801      	ldr	r0, [sp, #4]
 c02eb74:	f000 f9e0 	bl	c02ef38 <its_flash_fs_mblock_read_file_meta>
    if (err != PSA_SUCCESS) {
 c02eb78:	4604      	mov	r4, r0
 c02eb7a:	2800      	cmp	r0, #0
 c02eb7c:	d1f5      	bne.n	c02eb6a <its_flash_fs_file_get_info+0x14>
    return (memcmp(ptr1, ptr2, num));
 c02eb7e:	220c      	movs	r2, #12
 c02eb80:	a907      	add	r1, sp, #28
 c02eb82:	4630      	mov	r0, r6
 c02eb84:	f7e5 feec 	bl	c014960 <memcmp>
    if (tfm_memcmp(fid, tmp_metadata.id, ITS_FILE_ID_SIZE)) {
 c02eb88:	2800      	cmp	r0, #0
 c02eb8a:	d1ec      	bne.n	c02eb66 <its_flash_fs_file_get_info+0x10>
    info->size_max = tmp_metadata.max_size;
 c02eb8c:	9b05      	ldr	r3, [sp, #20]
 c02eb8e:	606b      	str	r3, [r5, #4]
    info->size_current = tmp_metadata.cur_size;
 c02eb90:	9b04      	ldr	r3, [sp, #16]
 c02eb92:	602b      	str	r3, [r5, #0]
    info->flags = tmp_metadata.flags;
 c02eb94:	9b06      	ldr	r3, [sp, #24]
 c02eb96:	60ab      	str	r3, [r5, #8]
    return PSA_SUCCESS;
 c02eb98:	e7e7      	b.n	c02eb6a <its_flash_fs_file_get_info+0x14>

0c02eb9a <its_flash_fs_file_delete>:
     */
    return its_flash_fs_mblock_meta_update_finalize();
}

psa_status_t its_flash_fs_file_delete(const uint8_t *fid)
{
 c02eb9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c02eb9e:	b08d      	sub	sp, #52	; 0x34
    size_t nbr_bytes_to_move = 0;
    uint32_t idx;
    struct its_file_meta_t file_meta;

    /* Get the file index */
    err = its_flash_fs_mblock_get_file_idx(fid, &del_file_idx);
 c02eba0:	a903      	add	r1, sp, #12
 c02eba2:	f000 f9d3 	bl	c02ef4c <its_flash_fs_mblock_get_file_idx>
    if (err != PSA_SUCCESS) {
 c02eba6:	b120      	cbz	r0, c02ebb2 <its_flash_fs_file_delete+0x18>
        return PSA_ERROR_DOES_NOT_EXIST;
 c02eba8:	f06f 008b 	mvn.w	r0, #139	; 0x8b

    /* Update the metablock header, swap scratch and active blocks,
     * erase scratch blocks.
     */
    return its_flash_fs_mblock_meta_update_finalize();
}
 c02ebac:	b00d      	add	sp, #52	; 0x34
 c02ebae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    err = its_flash_fs_mblock_read_file_meta(del_file_idx, &file_meta);
 c02ebb2:	a904      	add	r1, sp, #16
 c02ebb4:	9803      	ldr	r0, [sp, #12]
 c02ebb6:	f000 f9bf 	bl	c02ef38 <its_flash_fs_mblock_read_file_meta>
    if (err != PSA_SUCCESS) {
 c02ebba:	2800      	cmp	r0, #0
 c02ebbc:	d1f6      	bne.n	c02ebac <its_flash_fs_file_delete+0x12>
    if (its_utils_validate_fid(file_meta.id) != PSA_SUCCESS) {
 c02ebbe:	a809      	add	r0, sp, #36	; 0x24
 c02ebc0:	f000 fafc 	bl	c02f1bc <its_utils_validate_fid>
 c02ebc4:	4601      	mov	r1, r0
 c02ebc6:	2800      	cmp	r0, #0
 c02ebc8:	d1ee      	bne.n	c02eba8 <its_flash_fs_file_delete+0xe>
    del_file_data_idx = file_meta.data_idx;
 c02ebca:	e9dd 5904 	ldrd	r5, r9, [sp, #16]
    file_meta = (struct its_file_meta_t){0};
 c02ebce:	2220      	movs	r2, #32
 c02ebd0:	a804      	add	r0, sp, #16
    del_file_max_size = file_meta.max_size;
 c02ebd2:	f8dd 801c 	ldr.w	r8, [sp, #28]
    file_meta = (struct its_file_meta_t){0};
 c02ebd6:	f7e5 fef6 	bl	c0149c6 <memset>
    err = its_flash_fs_mblock_update_scratch_file_meta(del_file_idx,
 c02ebda:	a904      	add	r1, sp, #16
 c02ebdc:	9803      	ldr	r0, [sp, #12]
 c02ebde:	f000 fa89 	bl	c02f0f4 <its_flash_fs_mblock_update_scratch_file_meta>
    if (err != PSA_SUCCESS) {
 c02ebe2:	2800      	cmp	r0, #0
 c02ebe4:	d1e2      	bne.n	c02ebac <its_flash_fs_file_delete+0x12>
    for (idx = 0; idx < ITS_MAX_NUM_FILES; idx++) {
 c02ebe6:	4604      	mov	r4, r0
    size_t nbr_bytes_to_move = 0;
 c02ebe8:	4607      	mov	r7, r0
    size_t src_offset = ITS_BLOCK_SIZE;
 c02ebea:	f44f 5680 	mov.w	r6, #4096	; 0x1000
        if (idx == del_file_idx) {
 c02ebee:	9b03      	ldr	r3, [sp, #12]
 c02ebf0:	42a3      	cmp	r3, r4
 c02ebf2:	d01d      	beq.n	c02ec30 <its_flash_fs_file_delete+0x96>
        err = its_flash_fs_mblock_read_file_meta(idx, &file_meta);
 c02ebf4:	a904      	add	r1, sp, #16
 c02ebf6:	4620      	mov	r0, r4
 c02ebf8:	f000 f99e 	bl	c02ef38 <its_flash_fs_mblock_read_file_meta>
        if (err != PSA_SUCCESS) {
 c02ebfc:	2800      	cmp	r0, #0
 c02ebfe:	d1d5      	bne.n	c02ebac <its_flash_fs_file_delete+0x12>
        if ((file_meta.lblock == del_file_lblock) &&
 c02ec00:	9b04      	ldr	r3, [sp, #16]
 c02ec02:	42ab      	cmp	r3, r5
 c02ec04:	d10e      	bne.n	c02ec24 <its_flash_fs_file_delete+0x8a>
            (its_utils_validate_fid(file_meta.id) == PSA_SUCCESS)) {
 c02ec06:	a809      	add	r0, sp, #36	; 0x24
 c02ec08:	f000 fad8 	bl	c02f1bc <its_utils_validate_fid>
        if ((file_meta.lblock == del_file_lblock) &&
 c02ec0c:	b950      	cbnz	r0, c02ec24 <its_flash_fs_file_delete+0x8a>
            if (file_meta.data_idx > del_file_data_idx) {
 c02ec0e:	9b05      	ldr	r3, [sp, #20]
 c02ec10:	454b      	cmp	r3, r9
 c02ec12:	d907      	bls.n	c02ec24 <its_flash_fs_file_delete+0x8a>
 c02ec14:	429e      	cmp	r6, r3
 c02ec16:	bf28      	it	cs
 c02ec18:	461e      	movcs	r6, r3
                file_meta.data_idx -= del_file_max_size;
 c02ec1a:	eba3 0308 	sub.w	r3, r3, r8
 c02ec1e:	9305      	str	r3, [sp, #20]
                nbr_bytes_to_move += file_meta.max_size;
 c02ec20:	9b07      	ldr	r3, [sp, #28]
 c02ec22:	441f      	add	r7, r3
        err = its_flash_fs_mblock_update_scratch_file_meta(idx, &file_meta);
 c02ec24:	a904      	add	r1, sp, #16
 c02ec26:	4620      	mov	r0, r4
 c02ec28:	f000 fa64 	bl	c02f0f4 <its_flash_fs_mblock_update_scratch_file_meta>
        if (err != PSA_SUCCESS) {
 c02ec2c:	2800      	cmp	r0, #0
 c02ec2e:	d1bd      	bne.n	c02ebac <its_flash_fs_file_delete+0x12>
    for (idx = 0; idx < ITS_MAX_NUM_FILES; idx++) {
 c02ec30:	3401      	adds	r4, #1
 c02ec32:	2c0a      	cmp	r4, #10
 c02ec34:	d1db      	bne.n	c02ebee <its_flash_fs_file_delete+0x54>
    err = its_flash_fs_dblock_compact_block(del_file_lblock, del_file_max_size,
 c02ec36:	9700      	str	r7, [sp, #0]
 c02ec38:	464b      	mov	r3, r9
 c02ec3a:	4632      	mov	r2, r6
 c02ec3c:	4641      	mov	r1, r8
 c02ec3e:	4628      	mov	r0, r5
 c02ec40:	f000 f83a 	bl	c02ecb8 <its_flash_fs_dblock_compact_block>
    if (err != PSA_SUCCESS) {
 c02ec44:	2800      	cmp	r0, #0
 c02ec46:	d1b1      	bne.n	c02ebac <its_flash_fs_file_delete+0x12>
    if (del_file_lblock != ITS_LOGICAL_DBLOCK0) {
 c02ec48:	b915      	cbnz	r5, c02ec50 <its_flash_fs_file_delete+0xb6>
    return its_flash_fs_mblock_meta_update_finalize();
 c02ec4a:	f000 f965 	bl	c02ef18 <its_flash_fs_mblock_meta_update_finalize>
 c02ec4e:	e7ad      	b.n	c02ebac <its_flash_fs_file_delete+0x12>
        err = its_flash_fs_mblock_migrate_lb0_data_to_scratch();
 c02ec50:	f000 f9a4 	bl	c02ef9c <its_flash_fs_mblock_migrate_lb0_data_to_scratch>
        if (err != PSA_SUCCESS) {
 c02ec54:	2800      	cmp	r0, #0
 c02ec56:	d0f8      	beq.n	c02ec4a <its_flash_fs_file_delete+0xb0>
            return PSA_ERROR_GENERIC_ERROR;
 c02ec58:	f06f 0083 	mvn.w	r0, #131	; 0x83
 c02ec5c:	e7a6      	b.n	c02ebac <its_flash_fs_file_delete+0x12>

0c02ec5e <its_flash_fs_file_read>:

psa_status_t its_flash_fs_file_read(const uint8_t *fid,
                                    size_t size,
                                    size_t offset,
                                    uint8_t *data)
{
 c02ec5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 c02ec60:	b08b      	sub	sp, #44	; 0x2c
 c02ec62:	460d      	mov	r5, r1
    psa_status_t err;
    uint32_t idx;
    struct its_file_meta_t tmp_metadata;

    /* Get the file index */
    err = its_flash_fs_mblock_get_file_idx(fid, &idx);
 c02ec64:	a901      	add	r1, sp, #4
{
 c02ec66:	4607      	mov	r7, r0
 c02ec68:	4614      	mov	r4, r2
 c02ec6a:	461e      	mov	r6, r3
    err = its_flash_fs_mblock_get_file_idx(fid, &idx);
 c02ec6c:	f000 f96e 	bl	c02ef4c <its_flash_fs_mblock_get_file_idx>
    if (err != PSA_SUCCESS) {
 c02ec70:	b118      	cbz	r0, c02ec7a <its_flash_fs_file_read+0x1c>
        return PSA_ERROR_DOES_NOT_EXIST;
 c02ec72:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    if (err != PSA_SUCCESS) {
        return PSA_ERROR_GENERIC_ERROR;
    }

    return PSA_SUCCESS;
}
 c02ec76:	b00b      	add	sp, #44	; 0x2c
 c02ec78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = its_flash_fs_mblock_read_file_meta(idx, &tmp_metadata);
 c02ec7a:	a902      	add	r1, sp, #8
 c02ec7c:	9801      	ldr	r0, [sp, #4]
 c02ec7e:	f000 f95b 	bl	c02ef38 <its_flash_fs_mblock_read_file_meta>
    if (err != PSA_SUCCESS) {
 c02ec82:	b110      	cbz	r0, c02ec8a <its_flash_fs_file_read+0x2c>
        return PSA_ERROR_GENERIC_ERROR;
 c02ec84:	f06f 0083 	mvn.w	r0, #131	; 0x83
 c02ec88:	e7f5      	b.n	c02ec76 <its_flash_fs_file_read+0x18>
 c02ec8a:	220c      	movs	r2, #12
 c02ec8c:	a907      	add	r1, sp, #28
 c02ec8e:	4638      	mov	r0, r7
 c02ec90:	f7e5 fe66 	bl	c014960 <memcmp>
    if (tfm_memcmp(fid, tmp_metadata.id, ITS_FILE_ID_SIZE)) {
 c02ec94:	2800      	cmp	r0, #0
 c02ec96:	d1ec      	bne.n	c02ec72 <its_flash_fs_file_read+0x14>
    err = its_utils_check_contained_in(tmp_metadata.cur_size, offset, size);
 c02ec98:	462a      	mov	r2, r5
 c02ec9a:	4621      	mov	r1, r4
 c02ec9c:	9804      	ldr	r0, [sp, #16]
 c02ec9e:	f000 fa81 	bl	c02f1a4 <its_utils_check_contained_in>
    if (err != PSA_SUCCESS) {
 c02eca2:	2800      	cmp	r0, #0
 c02eca4:	d1e7      	bne.n	c02ec76 <its_flash_fs_file_read+0x18>
    err = its_flash_fs_dblock_read_file(&tmp_metadata, offset, size, data);
 c02eca6:	4633      	mov	r3, r6
 c02eca8:	462a      	mov	r2, r5
 c02ecaa:	4621      	mov	r1, r4
 c02ecac:	a802      	add	r0, sp, #8
 c02ecae:	f000 f847 	bl	c02ed40 <its_flash_fs_dblock_read_file>
    if (err != PSA_SUCCESS) {
 c02ecb2:	2800      	cmp	r0, #0
 c02ecb4:	d0df      	beq.n	c02ec76 <its_flash_fs_file_read+0x18>
 c02ecb6:	e7e5      	b.n	c02ec84 <its_flash_fs_file_read+0x26>

0c02ecb8 <its_flash_fs_dblock_compact_block>:
psa_status_t its_flash_fs_dblock_compact_block(uint32_t lblock,
                                               size_t free_size,
                                               size_t src_offset,
                                               size_t dst_offset,
                                               size_t size)
{
 c02ecb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c02ecbc:	b087      	sub	sp, #28
 c02ecbe:	460f      	mov	r7, r1
    struct its_block_meta_t block_meta;
    psa_status_t err;
    uint32_t scratch_id = 0;

    /* Read current block meta */
    err = its_flash_fs_mblock_read_block_metadata(lblock, &block_meta);
 c02ecc0:	a902      	add	r1, sp, #8
{
 c02ecc2:	4606      	mov	r6, r0
 c02ecc4:	4691      	mov	r9, r2
 c02ecc6:	461d      	mov	r5, r3
 c02ecc8:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    err = its_flash_fs_mblock_read_block_metadata(lblock, &block_meta);
 c02eccc:	f000 f95c 	bl	c02ef88 <its_flash_fs_mblock_read_block_metadata>
    if (err != PSA_SUCCESS) {
 c02ecd0:	4604      	mov	r4, r0
 c02ecd2:	bb38      	cbnz	r0, c02ed24 <its_flash_fs_dblock_compact_block+0x6c>
        return err;
    }

    /* Release data from block meta */
    block_meta.free_size += free_size;
 c02ecd4:	9904      	ldr	r1, [sp, #16]

    /* Save scratch data block physical IDs */
    scratch_id = its_flash_fs_mblock_cur_data_scratch_id(lblock);
 c02ecd6:	4630      	mov	r0, r6
    block_meta.free_size += free_size;
 c02ecd8:	4439      	add	r1, r7
 c02ecda:	9104      	str	r1, [sp, #16]
    scratch_id = its_flash_fs_mblock_cur_data_scratch_id(lblock);
 c02ecdc:	f000 f8f4 	bl	c02eec8 <its_flash_fs_mblock_cur_data_scratch_id>
 c02ece0:	4607      	mov	r7, r0

    /* Check if there are bytes to be compacted */
    if (size > 0) {
 c02ece2:	f1b8 0f00 	cmp.w	r8, #0
 c02ece6:	d112      	bne.n	c02ed0e <its_flash_fs_dblock_compact_block+0x56>
        if (err != PSA_SUCCESS) {
            return PSA_ERROR_GENERIC_ERROR;
        }
    }

    if (dst_offset > block_meta.data_start) {
 c02ece8:	9b03      	ldr	r3, [sp, #12]
 c02ecea:	42ab      	cmp	r3, r5
 c02ecec:	d31e      	bcc.n	c02ed2c <its_flash_fs_dblock_compact_block+0x74>

    /* Swap the scratch and current data blocks. Must swap even with nothing
     * to compact so that deleted file is left in scratch and erased as part
     * of finalization.
     */
    its_flash_fs_mblock_set_data_scratch(block_meta.phy_id, lblock);
 c02ecee:	4631      	mov	r1, r6
 c02ecf0:	9802      	ldr	r0, [sp, #8]
 c02ecf2:	f000 f9b9 	bl	c02f068 <its_flash_fs_mblock_set_data_scratch>

    /* Set scratch block ID as the one which contains the new data block */
    block_meta.phy_id = scratch_id;

    /* Update block metadata in scratch metadata block */
    err = its_flash_fs_mblock_update_scratch_block_meta(lblock, &block_meta);
 c02ecf6:	a902      	add	r1, sp, #8
 c02ecf8:	4630      	mov	r0, r6
    block_meta.phy_id = scratch_id;
 c02ecfa:	9702      	str	r7, [sp, #8]
    err = its_flash_fs_mblock_update_scratch_block_meta(lblock, &block_meta);
 c02ecfc:	f000 f9ba 	bl	c02f074 <its_flash_fs_mblock_update_scratch_block_meta>
    if (err != PSA_SUCCESS) {
 c02ed00:	4604      	mov	r4, r0
 c02ed02:	b178      	cbz	r0, c02ed24 <its_flash_fs_dblock_compact_block+0x6c>
        /* Swap back the data block as there was an issue in the process */
        its_flash_fs_mblock_set_data_scratch(scratch_id, lblock);
 c02ed04:	4631      	mov	r1, r6
 c02ed06:	4638      	mov	r0, r7
 c02ed08:	f000 f9ae 	bl	c02f068 <its_flash_fs_mblock_set_data_scratch>
        return err;
 c02ed0c:	e00a      	b.n	c02ed24 <its_flash_fs_dblock_compact_block+0x6c>
        err = its_flash_block_to_block_move(scratch_id, dst_offset,
 c02ed0e:	f8cd 8000 	str.w	r8, [sp]
 c02ed12:	464b      	mov	r3, r9
 c02ed14:	9a02      	ldr	r2, [sp, #8]
 c02ed16:	4629      	mov	r1, r5
 c02ed18:	f7ff fe7c 	bl	c02ea14 <its_flash_block_to_block_move>
        if (err != PSA_SUCCESS) {
 c02ed1c:	2800      	cmp	r0, #0
 c02ed1e:	d0e3      	beq.n	c02ece8 <its_flash_fs_dblock_compact_block+0x30>
            return PSA_ERROR_GENERIC_ERROR;
 c02ed20:	f06f 0483 	mvn.w	r4, #131	; 0x83
    }

    return err;
}
 c02ed24:	4620      	mov	r0, r4
 c02ed26:	b007      	add	sp, #28
 c02ed28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        err = its_flash_block_to_block_move(scratch_id,
 c02ed2c:	1aed      	subs	r5, r5, r3
 c02ed2e:	9500      	str	r5, [sp, #0]
 c02ed30:	9a02      	ldr	r2, [sp, #8]
 c02ed32:	4619      	mov	r1, r3
 c02ed34:	4638      	mov	r0, r7
 c02ed36:	f7ff fe6d 	bl	c02ea14 <its_flash_block_to_block_move>
        if (err != PSA_SUCCESS) {
 c02ed3a:	2800      	cmp	r0, #0
 c02ed3c:	d0d7      	beq.n	c02ecee <its_flash_fs_dblock_compact_block+0x36>
 c02ed3e:	e7ef      	b.n	c02ed20 <its_flash_fs_dblock_compact_block+0x68>

0c02ed40 <its_flash_fs_dblock_read_file>:

psa_status_t its_flash_fs_dblock_read_file(struct its_file_meta_t *file_meta,
                                           size_t offset,
                                           size_t size,
                                           uint8_t *buf)
{
 c02ed40:	b5f0      	push	{r4, r5, r6, r7, lr}
 c02ed42:	b085      	sub	sp, #20
 c02ed44:	4604      	mov	r4, r0
 c02ed46:	460e      	mov	r6, r1
    err = its_flash_fs_mblock_read_block_metadata(lblock, &block_meta);
 c02ed48:	6800      	ldr	r0, [r0, #0]
 c02ed4a:	4669      	mov	r1, sp
{
 c02ed4c:	4617      	mov	r7, r2
 c02ed4e:	461d      	mov	r5, r3
    err = its_flash_fs_mblock_read_block_metadata(lblock, &block_meta);
 c02ed50:	f000 f91a 	bl	c02ef88 <its_flash_fs_mblock_read_block_metadata>
    if (err != PSA_SUCCESS) {
 c02ed54:	b110      	cbz	r0, c02ed5c <its_flash_fs_dblock_read_file+0x1c>
    uint32_t phys_block;
    size_t pos;

    phys_block = its_dblock_lo_to_phy(file_meta->lblock);
    if (phys_block == ITS_BLOCK_INVALID_ID) {
        return PSA_ERROR_GENERIC_ERROR;
 c02ed56:	f06f 0083 	mvn.w	r0, #131	; 0x83
 c02ed5a:	e008      	b.n	c02ed6e <its_flash_fs_dblock_read_file+0x2e>
    return block_meta.phy_id;
 c02ed5c:	9800      	ldr	r0, [sp, #0]
    if (phys_block == ITS_BLOCK_INVALID_ID) {
 c02ed5e:	1c43      	adds	r3, r0, #1
 c02ed60:	d0f9      	beq.n	c02ed56 <its_flash_fs_dblock_read_file+0x16>
    }

    pos = (file_meta->data_idx + offset);
 c02ed62:	6862      	ldr	r2, [r4, #4]

    return its_flash_read(phys_block, buf, pos, size);
 c02ed64:	463b      	mov	r3, r7
 c02ed66:	4432      	add	r2, r6
 c02ed68:	4629      	mov	r1, r5
 c02ed6a:	f7ff fe33 	bl	c02e9d4 <its_flash_read>
}
 c02ed6e:	b005      	add	sp, #20
 c02ed70:	bdf0      	pop	{r4, r5, r6, r7, pc}

0c02ed72 <its_flash_fs_dblock_write_file>:

psa_status_t its_flash_fs_dblock_write_file(uint32_t lblock,
                                            size_t offset,
                                            size_t size,
                                            const uint8_t *data)
{
 c02ed72:	b570      	push	{r4, r5, r6, lr}
 c02ed74:	460d      	mov	r5, r1
 c02ed76:	4616      	mov	r6, r2
 c02ed78:	461c      	mov	r4, r3
    uint32_t scratch_id;

    scratch_id = its_flash_fs_mblock_cur_data_scratch_id(lblock);
 c02ed7a:	f000 f8a5 	bl	c02eec8 <its_flash_fs_mblock_cur_data_scratch_id>

    return its_flash_write(scratch_id, data, offset, size);
 c02ed7e:	4633      	mov	r3, r6
 c02ed80:	462a      	mov	r2, r5
 c02ed82:	4621      	mov	r1, r4
}
 c02ed84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return its_flash_write(scratch_id, data, offset, size);
 c02ed88:	f7ff be34 	b.w	c02e9f4 <its_flash_write>

0c02ed8c <its_flash_fs_dblock_cp_remaining_data>:

psa_status_t its_flash_fs_dblock_cp_remaining_data(
                                      const struct its_block_meta_t *block_meta,
                                      const struct its_file_meta_t *file_meta)
{
 c02ed8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c02ed8e:	4604      	mov	r4, r0
 c02ed90:	460d      	mov	r5, r1
    size_t after_file_offset;
    psa_status_t err;
    uint32_t scratch_id;
    size_t wrt_bytes;

    scratch_id = its_flash_fs_mblock_cur_data_scratch_id(file_meta->lblock);
 c02ed92:	6808      	ldr	r0, [r1, #0]
 c02ed94:	f000 f898 	bl	c02eec8 <its_flash_fs_mblock_cur_data_scratch_id>

    if (file_meta->data_idx > block_meta->data_start) {
 c02ed98:	686a      	ldr	r2, [r5, #4]
 c02ed9a:	6863      	ldr	r3, [r4, #4]
    scratch_id = its_flash_fs_mblock_cur_data_scratch_id(file_meta->lblock);
 c02ed9c:	4606      	mov	r6, r0
    if (file_meta->data_idx > block_meta->data_start) {
 c02ed9e:	429a      	cmp	r2, r3
 c02eda0:	d80e      	bhi.n	c02edc0 <its_flash_fs_dblock_cp_remaining_data+0x34>
    }

    /* The referenced file data is already in the scratch block, as it is
     * processed before calling of this function.
     */
    after_file_offset = file_meta->data_idx + file_meta->max_size;
 c02eda2:	68ea      	ldr	r2, [r5, #12]
 c02eda4:	686b      	ldr	r3, [r5, #4]

    /* Calculate amount of bytes after the manipulated file */
    wrt_bytes = (ITS_BLOCK_SIZE - (after_file_offset + block_meta->free_size));

    /* Data after updated content */
    return its_flash_block_to_block_move(scratch_id, after_file_offset,
 c02eda6:	4630      	mov	r0, r6
    after_file_offset = file_meta->data_idx + file_meta->max_size;
 c02eda8:	4413      	add	r3, r2
    wrt_bytes = (ITS_BLOCK_SIZE - (after_file_offset + block_meta->free_size));
 c02edaa:	68a2      	ldr	r2, [r4, #8]
    return its_flash_block_to_block_move(scratch_id, after_file_offset,
 c02edac:	4619      	mov	r1, r3
    wrt_bytes = (ITS_BLOCK_SIZE - (after_file_offset + block_meta->free_size));
 c02edae:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 c02edb2:	1ad2      	subs	r2, r2, r3
    return its_flash_block_to_block_move(scratch_id, after_file_offset,
 c02edb4:	9200      	str	r2, [sp, #0]
 c02edb6:	6822      	ldr	r2, [r4, #0]
 c02edb8:	f7ff fe2c 	bl	c02ea14 <its_flash_block_to_block_move>
                                         block_meta->phy_id, after_file_offset,
                                         wrt_bytes);
}
 c02edbc:	b002      	add	sp, #8
 c02edbe:	bd70      	pop	{r4, r5, r6, pc}
        wrt_bytes = (file_meta->data_idx - block_meta->data_start);
 c02edc0:	1ad2      	subs	r2, r2, r3
        err = its_flash_block_to_block_move(scratch_id,
 c02edc2:	9200      	str	r2, [sp, #0]
 c02edc4:	4619      	mov	r1, r3
 c02edc6:	6822      	ldr	r2, [r4, #0]
 c02edc8:	f7ff fe24 	bl	c02ea14 <its_flash_block_to_block_move>
        if (err != PSA_SUCCESS) {
 c02edcc:	2800      	cmp	r0, #0
 c02edce:	d0e8      	beq.n	c02eda2 <its_flash_fs_dblock_cp_remaining_data+0x16>
 c02edd0:	e7f4      	b.n	c02edbc <its_flash_fs_dblock_cp_remaining_data+0x30>
	...

0c02edd4 <its_mblock_write_scratch_meta_header>:
 * \return scratch metablock's id
 */
__attribute__((always_inline))
static inline uint32_t its_cur_meta_scratch_id(void)
{
    return its_flash_fs_ctx.scratch_metablock;
 c02edd4:	4a06      	ldr	r2, [pc, #24]	; (c02edf0 <its_mblock_write_scratch_meta_header+0x1c>)
        /* Reset the swap count to 0 */
        its_flash_fs_ctx.meta_block_header.active_swap_count = 0;
    }

    /* Write the metadata block header */
    return its_flash_write(scratch_metablock,
 c02edd6:	4906      	ldr	r1, [pc, #24]	; (c02edf0 <its_mblock_write_scratch_meta_header+0x1c>)
    its_flash_fs_ctx.meta_block_header.active_swap_count += 1;
 c02edd8:	7953      	ldrb	r3, [r2, #5]
    return its_flash_fs_ctx.scratch_metablock;
 c02edda:	68d0      	ldr	r0, [r2, #12]
    its_flash_fs_ctx.meta_block_header.active_swap_count += 1;
 c02eddc:	3301      	adds	r3, #1
 c02edde:	b2db      	uxtb	r3, r3
                                                 : PSA_SUCCESS;
 c02ede0:	2bff      	cmp	r3, #255	; 0xff
        its_flash_fs_ctx.meta_block_header.active_swap_count = 0;
 c02ede2:	bf08      	it	eq
 c02ede4:	2300      	moveq	r3, #0
 c02ede6:	7153      	strb	r3, [r2, #5]
    return its_flash_write(scratch_metablock,
 c02ede8:	2308      	movs	r3, #8
 c02edea:	2200      	movs	r2, #0
 c02edec:	f7ff be02 	b.w	c02e9f4 <its_flash_write>
 c02edf0:	3003cf70 	.word	0x3003cf70

0c02edf4 <its_init_get_active_metablock>:
 * \brief Validates and find the valid-active metablock
 *
 * \return Returns value as specified in \ref psa_status_t
 */
static psa_status_t its_init_get_active_metablock(void)
{
 c02edf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t num_valid_meta_blocks = 0;

    /* First two blocks are reserved for metadata */

    /* Read the header of both the metdata blocks */
    err = its_flash_read(ITS_METADATA_BLOCK0, (uint8_t *)&h_meta0,
 c02edf6:	2200      	movs	r2, #0
 c02edf8:	2308      	movs	r3, #8
 c02edfa:	4669      	mov	r1, sp
 c02edfc:	4610      	mov	r0, r2
 c02edfe:	f7ff fde9 	bl	c02e9d4 <its_flash_read>
                         0, ITS_BLOCK_META_HEADER_SIZE);
    if (err != PSA_SUCCESS) {
 c02ee02:	2800      	cmp	r0, #0
 c02ee04:	d137      	bne.n	c02ee76 <its_init_get_active_metablock+0x82>
        return err;
    }

    err = its_flash_read(ITS_METADATA_BLOCK1, (uint8_t *)&h_meta1,
 c02ee06:	2308      	movs	r3, #8
 c02ee08:	4602      	mov	r2, r0
 c02ee0a:	eb0d 0103 	add.w	r1, sp, r3
 c02ee0e:	2001      	movs	r0, #1
 c02ee10:	f7ff fde0 	bl	c02e9d4 <its_flash_read>
                         0, ITS_BLOCK_META_HEADER_SIZE);
    if (err != PSA_SUCCESS) {
 c02ee14:	bb78      	cbnz	r0, c02ee76 <its_init_get_active_metablock+0x82>
    err = its_mblock_validate_fs_version(h_meta->fs_version);
 c02ee16:	f89d 3004 	ldrb.w	r3, [sp, #4]
                                                 : PSA_SUCCESS;
 c02ee1a:	2b01      	cmp	r3, #1
 c02ee1c:	d11b      	bne.n	c02ee56 <its_init_get_active_metablock+0x62>
                                                 : PSA_SUCCESS;
 c02ee1e:	f89d 2005 	ldrb.w	r2, [sp, #5]
     * update operation to complete. Need to find out the valid
     * metadata block now.
     */
    if (its_mblock_validate_header_meta(&h_meta0) == PSA_SUCCESS) {
        num_valid_meta_blocks++;
        cur_meta_block = ITS_METADATA_BLOCK0;
 c02ee22:	2aff      	cmp	r2, #255	; 0xff
 c02ee24:	bf0a      	itet	eq
 c02ee26:	f04f 31ff 	moveq.w	r1, #4294967295
 c02ee2a:	2100      	movne	r1, #0
 c02ee2c:	2300      	moveq	r3, #0
                                                 : PSA_SUCCESS;
 c02ee2e:	f89d 400c 	ldrb.w	r4, [sp, #12]
 c02ee32:	2c01      	cmp	r4, #1
 c02ee34:	d123      	bne.n	c02ee7e <its_init_get_active_metablock+0x8a>
        err = its_mblock_validate_swap_count(h_meta->active_swap_count);
 c02ee36:	f89d 200d 	ldrb.w	r2, [sp, #13]
                                                 : PSA_SUCCESS;
 c02ee3a:	2aff      	cmp	r2, #255	; 0xff
 c02ee3c:	d01f      	beq.n	c02ee7e <its_init_get_active_metablock+0x8a>

    /* If there are more than 1 potential metablocks, the previous
     * update operation was interrupted by power failure. In which case,
     * need to find out which one is potentially latest metablock.
     */
    if (num_valid_meta_blocks > 1) {
 c02ee3e:	2b01      	cmp	r3, #1
 c02ee40:	d11b      	bne.n	c02ee7a <its_init_get_active_metablock+0x86>
        cur_meta_block = its_mblock_latest_meta_block(&h_meta0, &h_meta1);
 c02ee42:	f89d 1005 	ldrb.w	r1, [sp, #5]
    if ((meta1_swap_count == 0) && (meta0_swap_count != 1)) {
 c02ee46:	b952      	cbnz	r2, c02ee5e <its_init_get_active_metablock+0x6a>
 c02ee48:	2901      	cmp	r1, #1
 c02ee4a:	d10d      	bne.n	c02ee68 <its_init_get_active_metablock+0x74>
        cur_meta = ITS_METADATA_BLOCK1;
 c02ee4c:	4291      	cmp	r1, r2
 c02ee4e:	bf2c      	ite	cs
 c02ee50:	2300      	movcs	r3, #0
 c02ee52:	2301      	movcc	r3, #1
 c02ee54:	e008      	b.n	c02ee68 <its_init_get_active_metablock+0x74>
    uint8_t num_valid_meta_blocks = 0;
 c02ee56:	4603      	mov	r3, r0
    uint32_t cur_meta_block = ITS_BLOCK_INVALID_ID;
 c02ee58:	f04f 31ff 	mov.w	r1, #4294967295
 c02ee5c:	e7e7      	b.n	c02ee2e <its_init_get_active_metablock+0x3a>
    } else if ((meta0_swap_count == 0) && (meta1_swap_count != 1)) {
 c02ee5e:	2900      	cmp	r1, #0
 c02ee60:	d1f4      	bne.n	c02ee4c <its_init_get_active_metablock+0x58>
        cur_meta = ITS_METADATA_BLOCK1;
 c02ee62:	3a01      	subs	r2, #1
 c02ee64:	4253      	negs	r3, r2
 c02ee66:	4153      	adcs	r3, r2
        cur_meta_block = its_mblock_latest_meta_block(&h_meta0, &h_meta1);
 c02ee68:	4619      	mov	r1, r3
    } else if (num_valid_meta_blocks == 0) {
        return PSA_ERROR_GENERIC_ERROR;
    }

    its_flash_fs_ctx.active_metablock = cur_meta_block;
 c02ee6a:	4b07      	ldr	r3, [pc, #28]	; (c02ee88 <its_init_get_active_metablock+0x94>)
 c02ee6c:	6099      	str	r1, [r3, #8]
    its_flash_fs_ctx.scratch_metablock = ITS_OTHER_META_BLOCK(cur_meta_block);
 c02ee6e:	fab1 f181 	clz	r1, r1
 c02ee72:	0949      	lsrs	r1, r1, #5
 c02ee74:	60d9      	str	r1, [r3, #12]

    return PSA_SUCCESS;
}
 c02ee76:	b004      	add	sp, #16
 c02ee78:	bd10      	pop	{r4, pc}
        cur_meta_block = ITS_METADATA_BLOCK1;
 c02ee7a:	4621      	mov	r1, r4
 c02ee7c:	e7f5      	b.n	c02ee6a <its_init_get_active_metablock+0x76>
    } else if (num_valid_meta_blocks == 0) {
 c02ee7e:	2b00      	cmp	r3, #0
 c02ee80:	d1f3      	bne.n	c02ee6a <its_init_get_active_metablock+0x76>
        return PSA_ERROR_GENERIC_ERROR;
 c02ee82:	f06f 0083 	mvn.w	r0, #131	; 0x83
 c02ee86:	e7f6      	b.n	c02ee76 <its_init_get_active_metablock+0x82>
 c02ee88:	3003cf70 	.word	0x3003cf70

0c02ee8c <its_flash_fs_mblock_cp_remaining_file_meta>:
    return its_flash_fs_ctx.scratch_metablock;
 c02ee8c:	4b0d      	ldr	r3, [pc, #52]	; (c02eec4 <its_flash_fs_mblock_cp_remaining_file_meta+0x38>)

psa_status_t its_flash_fs_mblock_cp_remaining_file_meta(uint32_t idx)
{
 c02ee8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return its_flash_fs_ctx.active_metablock;
 c02ee90:	e9d3 6502 	ldrd	r6, r5, [r3, #8]
    meta_block = its_mblock_cur_meta_active();
    /* Calculate the position */
    pos = its_mblock_file_meta_offset(0);
    /* Copy rest of the block data from previous block */
    /* Data before updated content */
    err = its_flash_block_to_block_move(scratch_block, pos, meta_block, pos,
 c02ee94:	2318      	movs	r3, #24
                                        (idx * ITS_FILE_METADATA_SIZE));
 c02ee96:	0144      	lsls	r4, r0, #5
    err = its_flash_block_to_block_move(scratch_block, pos, meta_block, pos,
 c02ee98:	9400      	str	r4, [sp, #0]
 c02ee9a:	4632      	mov	r2, r6
 c02ee9c:	4619      	mov	r1, r3
 c02ee9e:	4628      	mov	r0, r5
 c02eea0:	f7ff fdb8 	bl	c02ea14 <its_flash_block_to_block_move>
    if (err != PSA_SUCCESS) {
 c02eea4:	b960      	cbnz	r0, c02eec0 <its_flash_fs_mblock_cp_remaining_file_meta+0x34>
           + (idx * ITS_FILE_METADATA_SIZE);
 c02eea6:	f104 0338 	add.w	r3, r4, #56	; 0x38

    /* Get end of file meta position which is the position after the last
     * byte of file meta.
     */
    end = its_mblock_file_meta_offset(ITS_MAX_NUM_FILES);
    if (end > pos) {
 c02eeaa:	f5b3 7fac 	cmp.w	r3, #344	; 0x158
 c02eeae:	d207      	bcs.n	c02eec0 <its_flash_fs_mblock_cp_remaining_file_meta+0x34>
        err = its_flash_block_to_block_move(scratch_block, pos, meta_block,
 c02eeb0:	f5c3 72ac 	rsb	r2, r3, #344	; 0x158
 c02eeb4:	9200      	str	r2, [sp, #0]
 c02eeb6:	4619      	mov	r1, r3
 c02eeb8:	4632      	mov	r2, r6
 c02eeba:	4628      	mov	r0, r5
 c02eebc:	f7ff fdaa 	bl	c02ea14 <its_flash_block_to_block_move>
                                            pos, (end - pos));
    }

    return err;
}
 c02eec0:	b002      	add	sp, #8
 c02eec2:	bd70      	pop	{r4, r5, r6, pc}
 c02eec4:	3003cf70 	.word	0x3003cf70

0c02eec8 <its_flash_fs_mblock_cur_data_scratch_id>:

uint32_t its_flash_fs_mblock_cur_data_scratch_id(uint32_t lblock)
{
 c02eec8:	4b02      	ldr	r3, [pc, #8]	; (c02eed4 <its_flash_fs_mblock_cur_data_scratch_id+0xc>)
    if (lblock == ITS_LOGICAL_DBLOCK0) {
 c02eeca:	b908      	cbnz	r0, c02eed0 <its_flash_fs_mblock_cur_data_scratch_id+0x8>
    return its_flash_fs_ctx.scratch_metablock;
 c02eecc:	68d8      	ldr	r0, [r3, #12]
        /* Scratch logical data block 0 physical IDs */
        return its_cur_meta_scratch_id();
 c02eece:	4770      	bx	lr
    }

    return its_flash_fs_ctx.meta_block_header.scratch_dblock;
 c02eed0:	6818      	ldr	r0, [r3, #0]
}
 c02eed2:	4770      	bx	lr
 c02eed4:	3003cf70 	.word	0x3003cf70

0c02eed8 <its_flash_fs_mblock_init>:

    return PSA_ERROR_DOES_NOT_EXIST;
}

psa_status_t its_flash_fs_mblock_init(void)
{
 c02eed8:	b510      	push	{r4, lr}
    psa_status_t err;

    /* Initialize Flash Interface */
    err = its_flash_init();
 c02eeda:	f7ff fd6d 	bl	c02e9b8 <its_flash_init>
    if (err != PSA_SUCCESS) {
 c02eede:	b928      	cbnz	r0, c02eeec <its_flash_fs_mblock_init+0x14>
        return err;
    }

    err = its_init_get_active_metablock();
 c02eee0:	f7ff ff88 	bl	c02edf4 <its_init_get_active_metablock>
    if (err != PSA_SUCCESS) {
 c02eee4:	4602      	mov	r2, r0
 c02eee6:	b110      	cbz	r0, c02eeee <its_flash_fs_mblock_init+0x16>
        return PSA_ERROR_GENERIC_ERROR;
 c02eee8:	f06f 0083 	mvn.w	r0, #131	; 0x83
        return PSA_ERROR_GENERIC_ERROR;
    }

    /* Erase the other scratch metadata block */
    return its_mblock_erase_scratch_blocks();
}
 c02eeec:	bd10      	pop	{r4, pc}
    err = its_flash_read(its_flash_fs_ctx.active_metablock,
 c02eeee:	4c09      	ldr	r4, [pc, #36]	; (c02ef14 <its_flash_fs_mblock_init+0x3c>)
 c02eef0:	2308      	movs	r3, #8
 c02eef2:	4621      	mov	r1, r4
 c02eef4:	68a0      	ldr	r0, [r4, #8]
 c02eef6:	f7ff fd6d 	bl	c02e9d4 <its_flash_read>
    if (err != PSA_SUCCESS) {
 c02eefa:	2800      	cmp	r0, #0
 c02eefc:	d1f4      	bne.n	c02eee8 <its_flash_fs_mblock_init+0x10>
                                                 : PSA_SUCCESS;
 c02eefe:	7923      	ldrb	r3, [r4, #4]
 c02ef00:	2b01      	cmp	r3, #1
 c02ef02:	d1f1      	bne.n	c02eee8 <its_flash_fs_mblock_init+0x10>
                                                 : PSA_SUCCESS;
 c02ef04:	7963      	ldrb	r3, [r4, #5]
 c02ef06:	2bff      	cmp	r3, #255	; 0xff
 c02ef08:	d0ee      	beq.n	c02eee8 <its_flash_fs_mblock_init+0x10>
    err = its_flash_erase_block(scratch_metablock);
 c02ef0a:	68e0      	ldr	r0, [r4, #12]
}
 c02ef0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    err = its_flash_erase_block(scratch_metablock);
 c02ef10:	f7ff bdb0 	b.w	c02ea74 <its_flash_erase_block>
 c02ef14:	3003cf70 	.word	0x3003cf70

0c02ef18 <its_flash_fs_mblock_meta_update_finalize>:

psa_status_t its_flash_fs_mblock_meta_update_finalize(void)
{
 c02ef18:	b508      	push	{r3, lr}
    psa_status_t err;

    /* Write the metadata block header to flash */
    err = its_mblock_write_scratch_meta_header();
 c02ef1a:	f7ff ff5b 	bl	c02edd4 <its_mblock_write_scratch_meta_header>
    if (err != PSA_SUCCESS) {
 c02ef1e:	b940      	cbnz	r0, c02ef32 <its_flash_fs_mblock_meta_update_finalize+0x1a>
    tmp_block = its_flash_fs_ctx.scratch_metablock;
 c02ef20:	4b04      	ldr	r3, [pc, #16]	; (c02ef34 <its_flash_fs_mblock_meta_update_finalize+0x1c>)
    its_flash_fs_ctx.scratch_metablock = its_flash_fs_ctx.active_metablock;
 c02ef22:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
    its_flash_fs_ctx.active_metablock = tmp_block;
 c02ef26:	e9c3 2002 	strd	r2, r0, [r3, #8]
    /* Update the running context */
    its_mblock_swap_metablocks();

    /* Erase meta block and current scratch block */
    return its_mblock_erase_scratch_blocks();
}
 c02ef2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    err = its_flash_erase_block(scratch_metablock);
 c02ef2e:	f7ff bda1 	b.w	c02ea74 <its_flash_erase_block>
}
 c02ef32:	bd08      	pop	{r3, pc}
 c02ef34:	3003cf70 	.word	0x3003cf70

0c02ef38 <its_flash_fs_mblock_read_file_meta>:
           + (idx * ITS_FILE_METADATA_SIZE);
 c02ef38:	0142      	lsls	r2, r0, #5
{
    psa_status_t err;
    size_t offset;

    offset = its_mblock_file_meta_offset(idx);
    err = its_flash_read(its_flash_fs_ctx.active_metablock,
 c02ef3a:	4803      	ldr	r0, [pc, #12]	; (c02ef48 <its_flash_fs_mblock_read_file_meta+0x10>)
 c02ef3c:	2320      	movs	r3, #32
 c02ef3e:	3218      	adds	r2, #24
 c02ef40:	6880      	ldr	r0, [r0, #8]
 c02ef42:	f7ff bd47 	b.w	c02e9d4 <its_flash_read>
 c02ef46:	bf00      	nop
 c02ef48:	3003cf70 	.word	0x3003cf70

0c02ef4c <its_flash_fs_mblock_get_file_idx>:
{
 c02ef4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 c02ef4e:	4606      	mov	r6, r0
 c02ef50:	460f      	mov	r7, r1
    for (i = 0; i < ITS_MAX_NUM_FILES; i++) {
 c02ef52:	2400      	movs	r4, #0
{
 c02ef54:	b089      	sub	sp, #36	; 0x24
        err = its_flash_fs_mblock_read_file_meta(i, &tmp_metadata);
 c02ef56:	4669      	mov	r1, sp
 c02ef58:	4620      	mov	r0, r4
 c02ef5a:	f7ff ffed 	bl	c02ef38 <its_flash_fs_mblock_read_file_meta>
        if (err != PSA_SUCCESS) {
 c02ef5e:	4605      	mov	r5, r0
 c02ef60:	b978      	cbnz	r0, c02ef82 <its_flash_fs_mblock_get_file_idx+0x36>
 c02ef62:	220c      	movs	r2, #12
 c02ef64:	4631      	mov	r1, r6
 c02ef66:	a805      	add	r0, sp, #20
 c02ef68:	f7e5 fcfa 	bl	c014960 <memcmp>
        if (!tfm_memcmp(tmp_metadata.id, fid, ITS_FILE_ID_SIZE)) {
 c02ef6c:	b918      	cbnz	r0, c02ef76 <its_flash_fs_mblock_get_file_idx+0x2a>
            *idx = i;
 c02ef6e:	603c      	str	r4, [r7, #0]
}
 c02ef70:	4628      	mov	r0, r5
 c02ef72:	b009      	add	sp, #36	; 0x24
 c02ef74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (i = 0; i < ITS_MAX_NUM_FILES; i++) {
 c02ef76:	3401      	adds	r4, #1
 c02ef78:	2c0a      	cmp	r4, #10
 c02ef7a:	d1ec      	bne.n	c02ef56 <its_flash_fs_mblock_get_file_idx+0xa>
    return PSA_ERROR_DOES_NOT_EXIST;
 c02ef7c:	f06f 058b 	mvn.w	r5, #139	; 0x8b
 c02ef80:	e7f6      	b.n	c02ef70 <its_flash_fs_mblock_get_file_idx+0x24>
            return PSA_ERROR_GENERIC_ERROR;
 c02ef82:	f06f 0583 	mvn.w	r5, #131	; 0x83
 c02ef86:	e7f3      	b.n	c02ef70 <its_flash_fs_mblock_get_file_idx+0x24>

0c02ef88 <its_flash_fs_mblock_read_block_metadata>:
    return ITS_BLOCK_META_HEADER_SIZE + (lblock * ITS_BLOCK_METADATA_SIZE);
 c02ef88:	0102      	lsls	r2, r0, #4
    uint32_t metablock;
    size_t pos;

    metablock = its_mblock_cur_meta_active();
    pos = its_mblock_block_meta_offset(lblock);
    err = its_flash_read(metablock, (uint8_t *)block_meta,
 c02ef8a:	4803      	ldr	r0, [pc, #12]	; (c02ef98 <its_flash_fs_mblock_read_block_metadata+0x10>)
 c02ef8c:	2310      	movs	r3, #16
 c02ef8e:	3208      	adds	r2, #8
 c02ef90:	6880      	ldr	r0, [r0, #8]
 c02ef92:	f7ff bd1f 	b.w	c02e9d4 <its_flash_read>
 c02ef96:	bf00      	nop
 c02ef98:	3003cf70 	.word	0x3003cf70

0c02ef9c <its_flash_fs_mblock_migrate_lb0_data_to_scratch>:
{
 c02ef9c:	b530      	push	{r4, r5, lr}
    return its_flash_fs_ctx.scratch_metablock;
 c02ef9e:	4b0b      	ldr	r3, [pc, #44]	; (c02efcc <its_flash_fs_mblock_migrate_lb0_data_to_scratch+0x30>)
{
 c02efa0:	b087      	sub	sp, #28
    err = its_flash_fs_mblock_read_block_metadata(ITS_LOGICAL_DBLOCK0,
 c02efa2:	a902      	add	r1, sp, #8
 c02efa4:	2000      	movs	r0, #0
    return its_flash_fs_ctx.active_metablock;
 c02efa6:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
    err = its_flash_fs_mblock_read_block_metadata(ITS_LOGICAL_DBLOCK0,
 c02efaa:	f7ff ffed 	bl	c02ef88 <its_flash_fs_mblock_read_block_metadata>
    if (err != PSA_SUCCESS) {
 c02efae:	b950      	cbnz	r0, c02efc6 <its_flash_fs_mblock_migrate_lb0_data_to_scratch+0x2a>
    data_size = ((ITS_BLOCK_SIZE - block_meta.data_start)
 c02efb0:	e9dd 3103 	ldrd	r3, r1, [sp, #12]
 c02efb4:	4419      	add	r1, r3
 c02efb6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    return its_flash_block_to_block_move(scratch_metablock,
 c02efba:	9100      	str	r1, [sp, #0]
 c02efbc:	462a      	mov	r2, r5
 c02efbe:	4619      	mov	r1, r3
 c02efc0:	4620      	mov	r0, r4
 c02efc2:	f7ff fd27 	bl	c02ea14 <its_flash_block_to_block_move>
}
 c02efc6:	b007      	add	sp, #28
 c02efc8:	bd30      	pop	{r4, r5, pc}
 c02efca:	bf00      	nop
 c02efcc:	3003cf70 	.word	0x3003cf70

0c02efd0 <its_flash_fs_mblock_reserve_file>:
                                            size_t size,
                                            uint32_t flags,
                                            uint32_t *idx,
                                            struct its_file_meta_t *file_meta,
                                            struct its_block_meta_t *block_meta)
{
 c02efd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c02efd4:	b088      	sub	sp, #32
 c02efd6:	e9dd 5610 	ldrd	r5, r6, [sp, #64]	; 0x40
 c02efda:	4681      	mov	r9, r0
 c02efdc:	460f      	mov	r7, r1
        err = its_flash_fs_mblock_read_block_metadata(i, block_meta);
 c02efde:	2000      	movs	r0, #0
 c02efe0:	4631      	mov	r1, r6
{
 c02efe2:	4692      	mov	sl, r2
 c02efe4:	4698      	mov	r8, r3
        err = its_flash_fs_mblock_read_block_metadata(i, block_meta);
 c02efe6:	f7ff ffcf 	bl	c02ef88 <its_flash_fs_mblock_read_block_metadata>
        if (err != PSA_SUCCESS) {
 c02efea:	4604      	mov	r4, r0
 c02efec:	bb90      	cbnz	r0, c02f054 <its_flash_fs_mblock_reserve_file+0x84>
        if (block_meta->free_size >= size) {
 c02efee:	68b3      	ldr	r3, [r6, #8]
 c02eff0:	429f      	cmp	r7, r3
 c02eff2:	d832      	bhi.n	c02f05a <its_flash_fs_mblock_reserve_file+0x8a>
            file_meta->data_idx = ITS_BLOCK_SIZE - block_meta->free_size;
 c02eff4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
            file_meta->max_size = size;
 c02eff8:	60ef      	str	r7, [r5, #12]
            file_meta->lblock = i;
 c02effa:	6028      	str	r0, [r5, #0]
            file_meta->data_idx = ITS_BLOCK_SIZE - block_meta->free_size;
 c02effc:	606b      	str	r3, [r5, #4]
    return (memcpy(dest, src, num));
 c02effe:	f8d9 3000 	ldr.w	r3, [r9]
 c02f002:	616b      	str	r3, [r5, #20]
 c02f004:	f8d9 3004 	ldr.w	r3, [r9, #4]
 c02f008:	61ab      	str	r3, [r5, #24]
 c02f00a:	f8d9 3008 	ldr.w	r3, [r9, #8]
            file_meta->cur_size = 0;
 c02f00e:	60a8      	str	r0, [r5, #8]
 c02f010:	61eb      	str	r3, [r5, #28]
            block_meta->free_size -= size;
 c02f012:	68b3      	ldr	r3, [r6, #8]
            file_meta->flags = flags;
 c02f014:	f8c5 a010 	str.w	sl, [r5, #16]
            block_meta->free_size -= size;
 c02f018:	1bdf      	subs	r7, r3, r7
 c02f01a:	60b7      	str	r7, [r6, #8]
    for (i = 0; i < ITS_MAX_NUM_FILES; i++) {
 c02f01c:	2500      	movs	r5, #0
        err = its_flash_fs_mblock_read_file_meta(i, &tmp_metadata);
 c02f01e:	4669      	mov	r1, sp
 c02f020:	4628      	mov	r0, r5
 c02f022:	f7ff ff89 	bl	c02ef38 <its_flash_fs_mblock_read_file_meta>
        if (err != PSA_SUCCESS) {
 c02f026:	b930      	cbnz	r0, c02f036 <its_flash_fs_mblock_reserve_file+0x66>
        if (its_utils_validate_fid(tmp_metadata.id) != PSA_SUCCESS) {
 c02f028:	a805      	add	r0, sp, #20
 c02f02a:	f000 f8c7 	bl	c02f1bc <its_utils_validate_fid>
 c02f02e:	b920      	cbnz	r0, c02f03a <its_flash_fs_mblock_reserve_file+0x6a>
    for (i = 0; i < ITS_MAX_NUM_FILES; i++) {
 c02f030:	3501      	adds	r5, #1
 c02f032:	2d0a      	cmp	r5, #10
 c02f034:	d1f3      	bne.n	c02f01e <its_flash_fs_mblock_reserve_file+0x4e>
            return ITS_METADATA_INVALID_INDEX;
 c02f036:	f64f 75ff 	movw	r5, #65535	; 0xffff
    psa_status_t err;

    err = its_mblock_reserve_file(fid, size, flags, file_meta, block_meta);

    *idx = its_get_free_file_index();
 c02f03a:	f8c8 5000 	str.w	r5, [r8]
    if ((err != PSA_SUCCESS) ||
 c02f03e:	b97c      	cbnz	r4, c02f060 <its_flash_fs_mblock_reserve_file+0x90>
 c02f040:	f64f 73ff 	movw	r3, #65535	; 0xffff
        (*idx == ITS_METADATA_INVALID_INDEX)) {
        return PSA_ERROR_INSUFFICIENT_STORAGE;
 c02f044:	429d      	cmp	r5, r3
 c02f046:	bf08      	it	eq
 c02f048:	f06f 048d 	mvneq.w	r4, #141	; 0x8d
    }

    return PSA_SUCCESS;
}
 c02f04c:	4620      	mov	r0, r4
 c02f04e:	b008      	add	sp, #32
 c02f050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return PSA_ERROR_GENERIC_ERROR;
 c02f054:	f06f 0483 	mvn.w	r4, #131	; 0x83
 c02f058:	e7e0      	b.n	c02f01c <its_flash_fs_mblock_reserve_file+0x4c>
    return PSA_ERROR_INSUFFICIENT_STORAGE;
 c02f05a:	f06f 048d 	mvn.w	r4, #141	; 0x8d
 c02f05e:	e7dd      	b.n	c02f01c <its_flash_fs_mblock_reserve_file+0x4c>
        return PSA_ERROR_INSUFFICIENT_STORAGE;
 c02f060:	f06f 048d 	mvn.w	r4, #141	; 0x8d
 c02f064:	e7f2      	b.n	c02f04c <its_flash_fs_mblock_reserve_file+0x7c>
	...

0c02f068 <its_flash_fs_mblock_set_data_scratch>:
    return PSA_SUCCESS;
}

void its_flash_fs_mblock_set_data_scratch(uint32_t phy_id, uint32_t lblock)
{
    if (lblock != ITS_LOGICAL_DBLOCK0) {
 c02f068:	b109      	cbz	r1, c02f06e <its_flash_fs_mblock_set_data_scratch+0x6>
        its_flash_fs_ctx.meta_block_header.scratch_dblock = phy_id;
 c02f06a:	4b01      	ldr	r3, [pc, #4]	; (c02f070 <its_flash_fs_mblock_set_data_scratch+0x8>)
 c02f06c:	6018      	str	r0, [r3, #0]
    }
}
 c02f06e:	4770      	bx	lr
 c02f070:	3003cf70 	.word	0x3003cf70

0c02f074 <its_flash_fs_mblock_update_scratch_block_meta>:

psa_status_t its_flash_fs_mblock_update_scratch_block_meta(
                                            uint32_t lblock,
                                            struct its_block_meta_t *block_meta)
{
 c02f074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c02f078:	4d1d      	ldr	r5, [pc, #116]	; (c02f0f0 <its_flash_fs_mblock_update_scratch_block_meta+0x7c>)
 c02f07a:	b086      	sub	sp, #24
 c02f07c:	68ef      	ldr	r7, [r5, #12]

    /* If the file is the logical block 0, then update the physical ID to the
     * current scratch metadata block so that it is correct after the metadata
     * blocks are swapped.
     */
    if (lblock == ITS_LOGICAL_DBLOCK0) {
 c02f07e:	4606      	mov	r6, r0
 c02f080:	b900      	cbnz	r0, c02f084 <its_flash_fs_mblock_update_scratch_block_meta+0x10>
        block_meta->phy_id = its_cur_meta_scratch_id();
 c02f082:	600f      	str	r7, [r1, #0]
    return ITS_BLOCK_META_HEADER_SIZE + (lblock * ITS_BLOCK_METADATA_SIZE);
 c02f084:	0134      	lsls	r4, r6, #4
    return its_flash_write(meta_block, (const uint8_t *)block_meta, pos,
 c02f086:	2310      	movs	r3, #16
 c02f088:	f104 0208 	add.w	r2, r4, #8
 c02f08c:	4638      	mov	r0, r7
 c02f08e:	f7ff fcb1 	bl	c02e9f4 <its_flash_write>
    }

    err = its_mblock_update_scratch_block_meta(lblock, block_meta);
    if (err != PSA_SUCCESS) {
 c02f092:	b990      	cbnz	r0, c02f0ba <its_flash_fs_mblock_update_scratch_block_meta+0x46>
    return its_flash_fs_ctx.active_metablock;
 c02f094:	e9d5 8702 	ldrd	r8, r7, [r5, #8]
    if (lblock != ITS_LOGICAL_DBLOCK0) {
 c02f098:	b95e      	cbnz	r6, c02f0b2 <its_flash_fs_mblock_update_scratch_block_meta+0x3e>
    return ITS_BLOCK_META_HEADER_SIZE + (lblock * ITS_BLOCK_METADATA_SIZE);
 c02f09a:	f104 0318 	add.w	r3, r4, #24
    size = its_mblock_file_meta_offset(0) - pos;
 c02f09e:	4264      	negs	r4, r4
    return its_flash_block_to_block_move(scratch_block, pos, meta_block, pos,
 c02f0a0:	9400      	str	r4, [sp, #0]
 c02f0a2:	4642      	mov	r2, r8
 c02f0a4:	4619      	mov	r1, r3
 c02f0a6:	4638      	mov	r0, r7
 c02f0a8:	f7ff fcb4 	bl	c02ea14 <its_flash_block_to_block_move>
        return PSA_ERROR_GENERIC_ERROR;
    }

    return its_mblock_copy_remaining_block_meta(lblock);
}
 c02f0ac:	b006      	add	sp, #24
 c02f0ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        err = its_flash_fs_mblock_read_block_metadata(ITS_LOGICAL_DBLOCK0,
 c02f0b2:	a902      	add	r1, sp, #8
 c02f0b4:	f7ff ff68 	bl	c02ef88 <its_flash_fs_mblock_read_block_metadata>
        if (err != PSA_SUCCESS) {
 c02f0b8:	b110      	cbz	r0, c02f0c0 <its_flash_fs_mblock_update_scratch_block_meta+0x4c>
        return PSA_ERROR_GENERIC_ERROR;
 c02f0ba:	f06f 0083 	mvn.w	r0, #131	; 0x83
 c02f0be:	e7f5      	b.n	c02f0ac <its_flash_fs_mblock_update_scratch_block_meta+0x38>
    return its_flash_write(meta_block, (const uint8_t *)block_meta, pos,
 c02f0c0:	2208      	movs	r2, #8
 c02f0c2:	2310      	movs	r3, #16
 c02f0c4:	eb0d 0102 	add.w	r1, sp, r2
 c02f0c8:	68e8      	ldr	r0, [r5, #12]
        block_meta.phy_id = scratch_block;
 c02f0ca:	9702      	str	r7, [sp, #8]
    return its_flash_write(meta_block, (const uint8_t *)block_meta, pos,
 c02f0cc:	f7ff fc92 	bl	c02e9f4 <its_flash_write>
        if (err != PSA_SUCCESS) {
 c02f0d0:	2800      	cmp	r0, #0
 c02f0d2:	d1f2      	bne.n	c02f0ba <its_flash_fs_mblock_update_scratch_block_meta+0x46>
        if (lblock > 1) {
 c02f0d4:	2e01      	cmp	r6, #1
 c02f0d6:	d9e0      	bls.n	c02f09a <its_flash_fs_mblock_update_scratch_block_meta+0x26>
            size = its_mblock_block_meta_offset(lblock) - pos;
 c02f0d8:	f1a4 0310 	sub.w	r3, r4, #16
            err = its_flash_block_to_block_move(scratch_block, pos, meta_block,
 c02f0dc:	9300      	str	r3, [sp, #0]
 c02f0de:	2318      	movs	r3, #24
 c02f0e0:	4642      	mov	r2, r8
 c02f0e2:	4619      	mov	r1, r3
 c02f0e4:	4638      	mov	r0, r7
 c02f0e6:	f7ff fc95 	bl	c02ea14 <its_flash_block_to_block_move>
            if (err != PSA_SUCCESS) {
 c02f0ea:	2800      	cmp	r0, #0
 c02f0ec:	d0d5      	beq.n	c02f09a <its_flash_fs_mblock_update_scratch_block_meta+0x26>
 c02f0ee:	e7dd      	b.n	c02f0ac <its_flash_fs_mblock_update_scratch_block_meta+0x38>
 c02f0f0:	3003cf70 	.word	0x3003cf70

0c02f0f4 <its_flash_fs_mblock_update_scratch_file_meta>:
           + (idx * ITS_FILE_METADATA_SIZE);
 c02f0f4:	0142      	lsls	r2, r0, #5

    scratch_block = its_cur_meta_scratch_id();

    /* Calculate the position */
    pos = its_mblock_file_meta_offset(idx);
    return its_flash_write(scratch_block, (const uint8_t *)file_meta, pos,
 c02f0f6:	4803      	ldr	r0, [pc, #12]	; (c02f104 <its_flash_fs_mblock_update_scratch_file_meta+0x10>)
 c02f0f8:	2320      	movs	r3, #32
 c02f0fa:	3218      	adds	r2, #24
 c02f0fc:	68c0      	ldr	r0, [r0, #12]
 c02f0fe:	f7ff bc79 	b.w	c02e9f4 <its_flash_write>
 c02f102:	bf00      	nop
 c02f104:	3003cf70 	.word	0x3003cf70

0c02f108 <its_flash_fs_mblock_reset_metablock>:
{
 c02f108:	b530      	push	{r4, r5, lr}
 c02f10a:	b08d      	sub	sp, #52	; 0x34
    if (its_init_get_active_metablock() == PSA_SUCCESS) {
 c02f10c:	f7ff fe72 	bl	c02edf4 <its_init_get_active_metablock>
 c02f110:	2800      	cmp	r0, #0
 c02f112:	d135      	bne.n	c02f180 <its_flash_fs_mblock_reset_metablock+0x78>
        metablock_to_erase_first = its_flash_fs_ctx.scratch_metablock;
 c02f114:	4b22      	ldr	r3, [pc, #136]	; (c02f1a0 <its_flash_fs_mblock_reset_metablock+0x98>)
 c02f116:	68dd      	ldr	r5, [r3, #12]
    err = its_flash_erase_block(metablock_to_erase_first);
 c02f118:	4628      	mov	r0, r5
 c02f11a:	f7ff fcab 	bl	c02ea74 <its_flash_erase_block>
    if (err != PSA_SUCCESS) {
 c02f11e:	4604      	mov	r4, r0
 c02f120:	bb58      	cbnz	r0, c02f17a <its_flash_fs_mblock_reset_metablock+0x72>
    err = its_flash_erase_block(ITS_OTHER_META_BLOCK(metablock_to_erase_first));
 c02f122:	fab5 f085 	clz	r0, r5
 c02f126:	0940      	lsrs	r0, r0, #5
 c02f128:	f7ff fca4 	bl	c02ea74 <its_flash_erase_block>
    if (err != PSA_SUCCESS) {
 c02f12c:	4604      	mov	r4, r0
 c02f12e:	bb20      	cbnz	r0, c02f17a <its_flash_fs_mblock_reset_metablock+0x72>
    its_flash_fs_ctx.meta_block_header.scratch_dblock = ITS_INIT_SCRATCH_DBLOCK;
 c02f130:	2001      	movs	r0, #1
    block_meta.free_size = (ITS_BLOCK_SIZE - block_meta.data_start);
 c02f132:	f44f 72ac 	mov.w	r2, #344	; 0x158
 c02f136:	f640 63a8 	movw	r3, #3752	; 0xea8
    its_flash_fs_ctx.meta_block_header.scratch_dblock = ITS_INIT_SCRATCH_DBLOCK;
 c02f13a:	4d19      	ldr	r5, [pc, #100]	; (c02f1a0 <its_flash_fs_mblock_reset_metablock+0x98>)
    block_meta.phy_id = ITS_METADATA_BLOCK0;
 c02f13c:	a90c      	add	r1, sp, #48	; 0x30
    block_meta.free_size = (ITS_BLOCK_SIZE - block_meta.data_start);
 c02f13e:	e9cd 2301 	strd	r2, r3, [sp, #4]
    block_meta.phy_id = ITS_METADATA_BLOCK0;
 c02f142:	f841 4d30 	str.w	r4, [r1, #-48]!
    its_flash_fs_ctx.meta_block_header.scratch_dblock = ITS_INIT_SCRATCH_DBLOCK;
 c02f146:	6028      	str	r0, [r5, #0]
 c02f148:	80a8      	strh	r0, [r5, #4]
    return its_flash_write(meta_block, (const uint8_t *)block_meta, pos,
 c02f14a:	2310      	movs	r3, #16
 c02f14c:	2208      	movs	r2, #8
    its_flash_fs_ctx.active_metablock = ITS_METADATA_BLOCK0;
 c02f14e:	e9c5 4002 	strd	r4, r0, [r5, #8]
    return its_flash_write(meta_block, (const uint8_t *)block_meta, pos,
 c02f152:	f7ff fc4f 	bl	c02e9f4 <its_flash_write>
    if (err != PSA_SUCCESS) {
 c02f156:	4604      	mov	r4, r0
 c02f158:	b978      	cbnz	r0, c02f17a <its_flash_fs_mblock_reset_metablock+0x72>
    block_meta.free_size = ITS_BLOCK_SIZE;
 c02f15a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    block_meta.data_start = 0;
 c02f15e:	9001      	str	r0, [sp, #4]
    return (memset(ptr, value, num));
 c02f160:	4601      	mov	r1, r0
 c02f162:	2220      	movs	r2, #32
 c02f164:	a804      	add	r0, sp, #16
    block_meta.free_size = ITS_BLOCK_SIZE;
 c02f166:	9302      	str	r3, [sp, #8]
 c02f168:	f7e5 fc2d 	bl	c0149c6 <memset>
        err = its_flash_fs_mblock_update_scratch_file_meta(i, &file_metadata);
 c02f16c:	a904      	add	r1, sp, #16
 c02f16e:	4620      	mov	r0, r4
 c02f170:	f7ff ffc0 	bl	c02f0f4 <its_flash_fs_mblock_update_scratch_file_meta>
        if (err != PSA_SUCCESS) {
 c02f174:	b130      	cbz	r0, c02f184 <its_flash_fs_mblock_reset_metablock+0x7c>
            return PSA_ERROR_GENERIC_ERROR;
 c02f176:	f06f 0483 	mvn.w	r4, #131	; 0x83
}
 c02f17a:	4620      	mov	r0, r4
 c02f17c:	b00d      	add	sp, #52	; 0x34
 c02f17e:	bd30      	pop	{r4, r5, pc}
    uint32_t metablock_to_erase_first = ITS_METADATA_BLOCK0;
 c02f180:	2500      	movs	r5, #0
 c02f182:	e7c9      	b.n	c02f118 <its_flash_fs_mblock_reset_metablock+0x10>
    for (i = 0; i < ITS_MAX_NUM_FILES; i++) {
 c02f184:	3401      	adds	r4, #1
 c02f186:	2c0a      	cmp	r4, #10
 c02f188:	d1f0      	bne.n	c02f16c <its_flash_fs_mblock_reset_metablock+0x64>
    err = its_mblock_write_scratch_meta_header();
 c02f18a:	f7ff fe23 	bl	c02edd4 <its_mblock_write_scratch_meta_header>
    if (err != PSA_SUCCESS) {
 c02f18e:	4604      	mov	r4, r0
 c02f190:	2800      	cmp	r0, #0
 c02f192:	d1f0      	bne.n	c02f176 <its_flash_fs_mblock_reset_metablock+0x6e>
    its_flash_fs_ctx.scratch_metablock = its_flash_fs_ctx.active_metablock;
 c02f194:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    its_flash_fs_ctx.active_metablock = tmp_block;
 c02f198:	e9c5 3202 	strd	r3, r2, [r5, #8]
 c02f19c:	e7ed      	b.n	c02f17a <its_flash_fs_mblock_reset_metablock+0x72>
 c02f19e:	bf00      	nop
 c02f1a0:	3003cf70 	.word	0x3003cf70

0c02f1a4 <its_utils_check_contained_in>:
psa_status_t its_utils_check_contained_in(size_t superset_size,
                                          size_t subset_offset,
                                          size_t subset_size)
{
    /* Check that subset_offset is valid */
    if (subset_offset > superset_size) {
 c02f1a4:	4281      	cmp	r1, r0
 c02f1a6:	d806      	bhi.n	c02f1b6 <its_utils_check_contained_in+0x12>

    /* Check that subset_offset + subset_size fits in superset_size.
     * The previous check passed, so we know that subset_offset <= superset_size
     * and so the right hand side of the inequality cannot underflow.
     */
    if (subset_size > (superset_size - subset_offset)) {
 c02f1a8:	1a40      	subs	r0, r0, r1
 c02f1aa:	4290      	cmp	r0, r2
        return PSA_ERROR_INVALID_ARGUMENT;
    }

    return PSA_SUCCESS;
 c02f1ac:	bf34      	ite	cc
 c02f1ae:	f06f 0086 	mvncc.w	r0, #134	; 0x86
 c02f1b2:	2000      	movcs	r0, #0
 c02f1b4:	4770      	bx	lr
        return PSA_ERROR_INVALID_ARGUMENT;
 c02f1b6:	f06f 0086 	mvn.w	r0, #134	; 0x86
}
 c02f1ba:	4770      	bx	lr

0c02f1bc <its_utils_validate_fid>:

psa_status_t its_utils_validate_fid(const uint8_t *fid)
{
 c02f1bc:	f100 030c 	add.w	r3, r0, #12
    uint32_t fid_size = ITS_FILE_ID_SIZE;

    /* A file ID is valid if it is non-zero */
    while (fid_size--) {
 c02f1c0:	4298      	cmp	r0, r3
 c02f1c2:	d102      	bne.n	c02f1ca <its_utils_validate_fid+0xe>
        if (*fid++) {
            return PSA_SUCCESS;
        }
    }

    return PSA_ERROR_DOES_NOT_EXIST;
 c02f1c4:	f06f 008b 	mvn.w	r0, #139	; 0x8b
 c02f1c8:	4770      	bx	lr
        if (*fid++) {
 c02f1ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 c02f1ce:	2a00      	cmp	r2, #0
 c02f1d0:	d0f6      	beq.n	c02f1c0 <its_utils_validate_fid+0x4>
            return PSA_SUCCESS;
 c02f1d2:	2000      	movs	r0, #0
}
 c02f1d4:	4770      	bx	lr
	...

0c02f1d8 <InsertEncodedTypeAndNumber>:
static void InsertEncodedTypeAndNumber(QCBOREncodeContext *me,
                                       uint8_t uMajorType,
                                       int nMinLen,
                                       uint64_t uNumber,
                                       size_t uPos)
{
 c02f1d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c02f1dc:	b086      	sub	sp, #24
 c02f1de:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
   // Point to the last bytes and work backwards
   uint8_t *pByte = &bytes[sizeof(bytes)-1];
   // This is the 5 bits in the initial byte that is not the major type
   uint8_t uAdditionalInfo;

   if(uNumber < CBOR_TWENTY_FOUR && nMinLen == 0) {
 c02f1e2:	2d00      	cmp	r5, #0
 c02f1e4:	bf08      	it	eq
 c02f1e6:	2c18      	cmpeq	r4, #24
 c02f1e8:	f10d 0715 	add.w	r7, sp, #21
 c02f1ec:	d232      	bcs.n	c02f254 <InsertEncodedTypeAndNumber+0x7c>
 c02f1ee:	bb8a      	cbnz	r2, c02f254 <InsertEncodedTypeAndNumber+0x7c>
   uint8_t *pByte = &bytes[sizeof(bytes)-1];
 c02f1f0:	463b      	mov	r3, r7
      // Simple case where argument is < 24
      uAdditionalInfo = uNumber;
 c02f1f2:	b2e4      	uxtb	r4, r4
      // Additional info is the encoding of the
      // number of additional bytes to encode
      // argument.
      uAdditionalInfo = LEN_IS_ONE_BYTE-1 + i;
   }
   *--pByte = (uMajorType << 5) + uAdditionalInfo;
 c02f1f4:	1e5a      	subs	r2, r3, #1

   UsefulOutBuf_InsertData(&(me->OutBuf), pByte, &bytes[sizeof(bytes)-1] - pByte, uPos);
 c02f1f6:	1abf      	subs	r7, r7, r2
   UsefulBufC Data = {pBytes, uLen};
 c02f1f8:	9201      	str	r2, [sp, #4]
   *--pByte = (uMajorType << 5) + uAdditionalInfo;
 c02f1fa:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 c02f1fe:	9702      	str	r7, [sp, #8]
   UsefulOutBuf_InsertUsefulBuf(pMe, Data, uPos);
 c02f200:	aa01      	add	r2, sp, #4
 c02f202:	f803 4c01 	strb.w	r4, [r3, #-1]
 c02f206:	ca06      	ldmia	r2, {r1, r2}
 c02f208:	9b10      	ldr	r3, [sp, #64]	; 0x40
 c02f20a:	f7fd ff97 	bl	c02d13c <UsefulOutBuf_InsertUsefulBuf>
}
 c02f20e:	b006      	add	sp, #24
 c02f210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
         const uint8_t uIterations = aIterate[i];
 c02f214:	f819 e006 	ldrb.w	lr, [r9, r6]
 c02f218:	eba3 080e 	sub.w	r8, r3, lr
         for(int j = 0; j < uIterations; j++) {
 c02f21c:	4598      	cmp	r8, r3
 c02f21e:	d10f      	bne.n	c02f240 <InsertEncodedTypeAndNumber+0x68>
 c02f220:	4643      	mov	r3, r8
         nMinLen -= uIterations;
 c02f222:	eba2 020e 	sub.w	r2, r2, lr
 c02f226:	f10c 0c01 	add.w	ip, ip, #1
      for(i = 0; uNumber || nMinLen > 0; i++) {
 c02f22a:	ea54 0e05 	orrs.w	lr, r4, r5
 c02f22e:	fa5f f68c 	uxtb.w	r6, ip
 c02f232:	d1ef      	bne.n	c02f214 <InsertEncodedTypeAndNumber+0x3c>
 c02f234:	2a00      	cmp	r2, #0
 c02f236:	dced      	bgt.n	c02f214 <InsertEncodedTypeAndNumber+0x3c>
      uAdditionalInfo = LEN_IS_ONE_BYTE-1 + i;
 c02f238:	f106 0417 	add.w	r4, r6, #23
 c02f23c:	b2e4      	uxtb	r4, r4
 c02f23e:	e7d9      	b.n	c02f1f4 <InsertEncodedTypeAndNumber+0x1c>
            uNumber = uNumber >> 8;
 c02f240:	0a26      	lsrs	r6, r4, #8
 c02f242:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
 c02f246:	ea4f 2a15 	mov.w	sl, r5, lsr #8
            *--pByte = uNumber & 0xff;
 c02f24a:	f803 4d01 	strb.w	r4, [r3, #-1]!
            uNumber = uNumber >> 8;
 c02f24e:	4655      	mov	r5, sl
 c02f250:	4634      	mov	r4, r6
 c02f252:	e7e3      	b.n	c02f21c <InsertEncodedTypeAndNumber+0x44>
 c02f254:	f04f 0c00 	mov.w	ip, #0
 c02f258:	463b      	mov	r3, r7
         const uint8_t uIterations = aIterate[i];
 c02f25a:	f8df 9004 	ldr.w	r9, [pc, #4]	; c02f260 <InsertEncodedTypeAndNumber+0x88>
 c02f25e:	e7e4      	b.n	c02f22a <InsertEncodedTypeAndNumber+0x52>
 c02f260:	0c0353c4 	.word	0x0c0353c4

0c02f264 <AppendEncodedTypeAndNumber>:
 See InsertEncodedTypeAndNumber() function above for details
*/
inline static void AppendEncodedTypeAndNumber(QCBOREncodeContext *me,
                                              uint8_t uMajorType,
                                              uint64_t uNumber)
{
 c02f264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   // An append is an insert at the end.
   InsertEncodedTypeAndNumber(me,
 c02f266:	6884      	ldr	r4, [r0, #8]
 c02f268:	e9cd 2300 	strd	r2, r3, [sp]
 c02f26c:	9402      	str	r4, [sp, #8]
 c02f26e:	2200      	movs	r2, #0
 c02f270:	f7ff ffb2 	bl	c02f1d8 <InsertEncodedTypeAndNumber>
                              uMajorType,
                              0,
                              uNumber,
                              UsefulOutBuf_GetEndPosition(&(me->OutBuf)));
}
 c02f274:	b004      	add	sp, #16
 c02f276:	bd10      	pop	{r4, pc}

0c02f278 <Nesting_Increment.isra.3>:
   if(1 >= QCBOR_MAX_ITEMS_IN_ARRAY - pNesting->pCurrentNesting->uCount) {
 c02f278:	8883      	ldrh	r3, [r0, #4]
 c02f27a:	f5c3 427f 	rsb	r2, r3, #65280	; 0xff00
 c02f27e:	32fe      	adds	r2, #254	; 0xfe
 c02f280:	2a01      	cmp	r2, #1
   pNesting->pCurrentNesting->uCount += 1;
 c02f282:	bfc3      	ittte	gt
 c02f284:	3301      	addgt	r3, #1
 c02f286:	8083      	strhgt	r3, [r0, #4]
   return QCBOR_SUCCESS;
 c02f288:	2000      	movgt	r0, #0
      return QCBOR_ERR_ARRAY_TOO_LONG;
 c02f28a:	2003      	movle	r0, #3
}
 c02f28c:	4770      	bx	lr

0c02f28e <QCBOREncode_Init>:
{
 c02f28e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 c02f290:	466d      	mov	r5, sp
 c02f292:	4604      	mov	r4, r0
 c02f294:	e885 0006 	stmia.w	r5, {r1, r2}
   memset(me, 0, sizeof(QCBOREncodeContext));
 c02f298:	2298      	movs	r2, #152	; 0x98
 c02f29a:	2100      	movs	r1, #0
 c02f29c:	f7e5 fb93 	bl	c0149c6 <memset>
   UsefulOutBuf_Init(&(me->OutBuf), Storage);
 c02f2a0:	e895 0006 	ldmia.w	r5, {r1, r2}
 c02f2a4:	4620      	mov	r0, r4
 c02f2a6:	f7fd ff39 	bl	c02d11c <UsefulOutBuf_Init>
   pNesting->pCurrentNesting = &pNesting->pArrays[0];
 c02f2aa:	f104 0314 	add.w	r3, r4, #20
 c02f2ae:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
   pNesting->pCurrentNesting->uMajorType = CBOR_MAJOR_TYPE_ARRAY;
 c02f2b2:	2304      	movs	r3, #4
 c02f2b4:	76a3      	strb	r3, [r4, #26]
}
 c02f2b6:	b003      	add	sp, #12
 c02f2b8:	bd30      	pop	{r4, r5, pc}

0c02f2ba <QCBOREncode_AddInt64>:

/*
 Public functions for closing arrays and maps. See header qcbor.h
 */
void QCBOREncode_AddInt64(QCBOREncodeContext *me, int64_t nNum)
{
 c02f2ba:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
   if(me->uError == QCBOR_SUCCESS) {
 c02f2be:	7c01      	ldrb	r1, [r0, #16]
{
 c02f2c0:	4604      	mov	r4, r0
 c02f2c2:	4693      	mov	fp, r2
 c02f2c4:	469c      	mov	ip, r3
   if(me->uError == QCBOR_SUCCESS) {
 c02f2c6:	b989      	cbnz	r1, c02f2ec <QCBOREncode_AddInt64+0x32>
      uint8_t      uMajorType;
      uint64_t     uValue;

      if(nNum < 0) {
 c02f2c8:	2a00      	cmp	r2, #0
 c02f2ca:	f17c 0300 	sbcs.w	r3, ip, #0
         // In CBOR -1 encodes as 0x00 with major type negative int.
         uValue = (uint64_t)(-nNum - 1);
 c02f2ce:	bfbd      	ittte	lt
 c02f2d0:	43d2      	mvnlt	r2, r2
 c02f2d2:	ea6f 030c 	mvnlt.w	r3, ip
         uMajorType = CBOR_MAJOR_TYPE_NEGATIVE_INT;
 c02f2d6:	2101      	movlt	r1, #1
      } else {
         uValue = (uint64_t)nNum;
 c02f2d8:	465a      	movge	r2, fp
 c02f2da:	bfa8      	it	ge
 c02f2dc:	4663      	movge	r3, ip
         uMajorType = CBOR_MAJOR_TYPE_POSITIVE_INT;
      }

      AppendEncodedTypeAndNumber(me, uMajorType, uValue);
 c02f2de:	f7ff ffc1 	bl	c02f264 <AppendEncodedTypeAndNumber>
      me->uError = Nesting_Increment(&(me->nesting));
 c02f2e2:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 c02f2e6:	f7ff ffc7 	bl	c02f278 <Nesting_Increment.isra.3>
 c02f2ea:	7420      	strb	r0, [r4, #16]
   }
}
 c02f2ec:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}

0c02f2f0 <QCBOREncode_AddBuffer>:
 third just adds the bytes as the type and length are presumed to be
 in the bytes. The fourth just adds the type and length for the very
 special case of QCBOREncode_AddBytesLenOnly().
 */
void QCBOREncode_AddBuffer(QCBOREncodeContext *me, uint8_t uMajorType, UsefulBufC Bytes)
{
 c02f2f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 c02f2f2:	466e      	mov	r6, sp
 c02f2f4:	e886 000c 	stmia.w	r6, {r2, r3}
   if(me->uError == QCBOR_SUCCESS) {
 c02f2f8:	7c03      	ldrb	r3, [r0, #16]
{
 c02f2fa:	4604      	mov	r4, r0
 c02f2fc:	460d      	mov	r5, r1
   if(me->uError == QCBOR_SUCCESS) {
 c02f2fe:	b983      	cbnz	r3, c02f322 <QCBOREncode_AddBuffer+0x32>
      // If it is not Raw CBOR, add the type and the length
      if(uMajorType != CBOR_MAJOR_NONE_TYPE_RAW) {
 c02f300:	2909      	cmp	r1, #9
 c02f302:	d110      	bne.n	c02f326 <QCBOREncode_AddBuffer+0x36>
 c02f304:	e896 0003 	ldmia.w	r6, {r0, r1}
 c02f308:	aa02      	add	r2, sp, #8
 c02f30a:	e882 0003 	stmia.w	r2, {r0, r1}
   UsefulOutBuf_InsertUsefulBuf(pMe, NewData, UsefulOutBuf_GetEndPosition(pMe));
 c02f30e:	68a3      	ldr	r3, [r4, #8]
 c02f310:	ca06      	ldmia	r2, {r1, r2}
 c02f312:	4620      	mov	r0, r4
 c02f314:	f7fd ff12 	bl	c02d13c <UsefulOutBuf_InsertUsefulBuf>
         // Actually add the bytes
         UsefulOutBuf_AppendUsefulBuf(&(me->OutBuf), Bytes);
      }

      // Update the array counting if there is any nesting at all
      me->uError = Nesting_Increment(&(me->nesting));
 c02f318:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 c02f31c:	f7ff ffac 	bl	c02f278 <Nesting_Increment.isra.3>
 c02f320:	7420      	strb	r0, [r4, #16]
   }
}
 c02f322:	b004      	add	sp, #16
 c02f324:	bd70      	pop	{r4, r5, r6, pc}
            uRealMajorType = CBOR_MAJOR_TYPE_BYTE_STRING;
 c02f326:	290b      	cmp	r1, #11
         AppendEncodedTypeAndNumber(me, uRealMajorType, Bytes.len);
 c02f328:	bf08      	it	eq
 c02f32a:	2102      	moveq	r1, #2
 c02f32c:	9a01      	ldr	r2, [sp, #4]
 c02f32e:	f7ff ff99 	bl	c02f264 <AppendEncodedTypeAndNumber>
      if(uMajorType != CBOR_MAJOR_NONE_TYPE_BSTR_LEN_ONLY) {
 c02f332:	2d0b      	cmp	r5, #11
 c02f334:	d0f0      	beq.n	c02f318 <QCBOREncode_AddBuffer+0x28>
 c02f336:	e7e5      	b.n	c02f304 <QCBOREncode_AddBuffer+0x14>

0c02f338 <QCBOREncode_AddTag>:
/*
 Public functions for closing arrays and maps. See header qcbor.h
 */
void QCBOREncode_AddTag(QCBOREncodeContext *me, uint64_t uTag)
{
   AppendEncodedTypeAndNumber(me, CBOR_MAJOR_TYPE_OPTIONAL, uTag);
 c02f338:	2106      	movs	r1, #6
 c02f33a:	f7ff bf93 	b.w	c02f264 <AppendEncodedTypeAndNumber>

0c02f33e <QCBOREncode_OpenMapOrArray>:
 but they will usually call one of the inline wrappers rather than this.

 See header qcbor.h
*/
void QCBOREncode_OpenMapOrArray(QCBOREncodeContext *me, uint8_t uMajorType)
{
 c02f33e:	b538      	push	{r3, r4, r5, lr}
 c02f340:	4604      	mov	r4, r0
   // Add one item to the nesting level we are in for the new map or array
   me->uError = Nesting_Increment(&(me->nesting));
 c02f342:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 c02f346:	f7ff ff97 	bl	c02f278 <Nesting_Increment.isra.3>
 c02f34a:	7420      	strb	r0, [r4, #16]
   if(me->uError == QCBOR_SUCCESS) {
 c02f34c:	b928      	cbnz	r0, c02f35a <QCBOREncode_OpenMapOrArray+0x1c>
      // is stored in a uint32_t, not a size_t to keep stack usage smaller. This
      // checks to be sure there is no wrap around when recording the offset.
      // Note that on 64-bit machines CBOR larger than 4GB can be encoded as long as no
      // array / map offsets occur past the 4GB mark, but the public interface
      // says that the maximum is 4GB to keep the discussion simpler.
      size_t uEndPosition = UsefulOutBuf_GetEndPosition(&(me->OutBuf));
 c02f34e:	68a2      	ldr	r2, [r4, #8]
      // QCBOR_MAX_ARRAY_OFFSET is slightly less than UINT32_MAX so this
      // code can run on a 32-bit machine and tests can pass on a 32-bit
      // machine. If it was exactly UINT32_MAX, then this code would
      // not compile or run on a 32-bit machine and an #ifdef or some
      // machine size detection would be needed reducing portability.
      if(uEndPosition >= QCBOR_MAX_ARRAY_OFFSET) {
 c02f350:	f112 0f66 	cmn.w	r2, #102	; 0x66
 c02f354:	d902      	bls.n	c02f35c <QCBOREncode_OpenMapOrArray+0x1e>
         me->uError = QCBOR_ERR_BUFFER_TOO_LARGE;
 c02f356:	2307      	movs	r3, #7
 c02f358:	7423      	strb	r3, [r4, #16]
         // Increase nesting level because this is a map or array.
         // Cast from size_t to uin32_t is safe because of check above
         me->uError = Nesting_Increase(&(me->nesting), uMajorType, (uint32_t)uEndPosition);
      }
   }
}
 c02f35a:	bd38      	pop	{r3, r4, r5, pc}
   if(pNesting->pCurrentNesting == &pNesting->pArrays[QCBOR_MAX_ARRAY_NESTING]) {
 c02f35c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 c02f360:	f104 058c 	add.w	r5, r4, #140	; 0x8c
 c02f364:	42ab      	cmp	r3, r5
      nReturn = QCBOR_ERR_ARRAY_NESTING_TOO_DEEP;
 c02f366:	bf0f      	iteee	eq
 c02f368:	2002      	moveq	r0, #2
      pNesting->pCurrentNesting++;
 c02f36a:	f103 0508 	addne.w	r5, r3, #8
 c02f36e:	f8c4 5094 	strne.w	r5, [r4, #148]	; 0x94
      pNesting->pCurrentNesting->uCount     = 0;
 c02f372:	8198      	strhne	r0, [r3, #12]
      pNesting->pCurrentNesting->uStart     = uPos;
 c02f374:	bf1c      	itt	ne
 c02f376:	609a      	strne	r2, [r3, #8]
      pNesting->pCurrentNesting->uMajorType = uMajorType;
 c02f378:	7399      	strbne	r1, [r3, #14]
         me->uError = Nesting_Increase(&(me->nesting), uMajorType, (uint32_t)uEndPosition);
 c02f37a:	7420      	strb	r0, [r4, #16]
}
 c02f37c:	e7ed      	b.n	c02f35a <QCBOREncode_OpenMapOrArray+0x1c>

0c02f37e <QCBOREncode_CloseMapOrArray>:
 Public functions for closing arrays and maps. See header qcbor.h
 */
void QCBOREncode_CloseMapOrArray(QCBOREncodeContext *me,
                                 uint8_t uMajorType,
                                 UsefulBufC *pWrappedCBOR)
{
 c02f37e:	b5f0      	push	{r4, r5, r6, r7, lr}
   if(me->uError == QCBOR_SUCCESS) {
 c02f380:	7c03      	ldrb	r3, [r0, #16]
{
 c02f382:	b087      	sub	sp, #28
 c02f384:	4604      	mov	r4, r0
 c02f386:	4617      	mov	r7, r2
   if(me->uError == QCBOR_SUCCESS) {
 c02f388:	b93b      	cbnz	r3, c02f39a <QCBOREncode_CloseMapOrArray+0x1c>
   return pNesting->pCurrentNesting == &pNesting->pArrays[0] ? 0 : 1;
 c02f38a:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 c02f38e:	f100 0314 	add.w	r3, r0, #20
      if(!Nesting_IsInNest(&(me->nesting))) {
 c02f392:	429a      	cmp	r2, r3
 c02f394:	d103      	bne.n	c02f39e <QCBOREncode_CloseMapOrArray+0x20>
         me->uError = QCBOR_ERR_TOO_MANY_CLOSES;
 c02f396:	2304      	movs	r3, #4
      } else if(Nesting_GetMajorType(&(me->nesting)) != uMajorType) {
         me->uError = QCBOR_ERR_CLOSE_MISMATCH;
 c02f398:	7423      	strb	r3, [r4, #16]
            *pWrappedCBOR = UsefulBuf_Tail(PartialResult, uInsertPosition);
         }
         Nesting_Decrease(&(me->nesting));
      }
   }
}
 c02f39a:	b007      	add	sp, #28
 c02f39c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   return pNesting->pCurrentNesting->uMajorType;
 c02f39e:	7993      	ldrb	r3, [r2, #6]
      } else if(Nesting_GetMajorType(&(me->nesting)) != uMajorType) {
 c02f3a0:	4299      	cmp	r1, r3
 c02f3a2:	d001      	beq.n	c02f3a8 <QCBOREncode_CloseMapOrArray+0x2a>
         me->uError = QCBOR_ERR_CLOSE_MISMATCH;
 c02f3a4:	230f      	movs	r3, #15
 c02f3a6:	e7f7      	b.n	c02f398 <QCBOREncode_CloseMapOrArray+0x1a>
         const size_t uEndPosition            = UsefulOutBuf_GetEndPosition(&(me->OutBuf));
 c02f3a8:	6883      	ldr	r3, [r0, #8]
                                    uLenOfEncodedMapOrArray : Nesting_GetCount(&(me->nesting));
 c02f3aa:	2902      	cmp	r1, #2
   return pNesting->pCurrentNesting->uStart;
 c02f3ac:	6816      	ldr	r6, [r2, #0]
   const uint16_t uDivisor = pNesting->pCurrentNesting->uMajorType - CBOR_MAJOR_TYPE_ARRAY+1;
 c02f3ae:	bf1f      	itttt	ne
 c02f3b0:	1ecb      	subne	r3, r1, #3
   return pNesting->pCurrentNesting->uCount / uDivisor;
 c02f3b2:	8892      	ldrhne	r2, [r2, #4]
 c02f3b4:	b29b      	uxthne	r3, r3
                                    uLenOfEncodedMapOrArray : Nesting_GetCount(&(me->nesting));
 c02f3b6:	fbb2 f3f3 	udivne	r3, r2, r3
         InsertEncodedTypeAndNumber(me,
 c02f3ba:	f04f 0500 	mov.w	r5, #0
         const size_t uLenOfEncodedMapOrArray = uEndPosition - uInsertPosition;
 c02f3be:	bf08      	it	eq
 c02f3c0:	1b9b      	subeq	r3, r3, r6
         InsertEncodedTypeAndNumber(me,
 c02f3c2:	9602      	str	r6, [sp, #8]
 c02f3c4:	e9cd 3500 	strd	r3, r5, [sp]
 c02f3c8:	462a      	mov	r2, r5
 c02f3ca:	f7ff ff05 	bl	c02f1d8 <InsertEncodedTypeAndNumber>
         if(pWrappedCBOR) {
 c02f3ce:	b167      	cbz	r7, c02f3ea <QCBOREncode_CloseMapOrArray+0x6c>
            const UsefulBufC PartialResult = UsefulOutBuf_OutUBuf(&(me->OutBuf));
 c02f3d0:	4621      	mov	r1, r4
 c02f3d2:	a804      	add	r0, sp, #16
 c02f3d4:	f7fd fee0 	bl	c02d198 <UsefulOutBuf_OutUBuf>
 c02f3d8:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   if(uAmount > UB.len) {
 c02f3dc:	4296      	cmp	r6, r2
 c02f3de:	d80a      	bhi.n	c02f3f6 <QCBOREncode_CloseMapOrArray+0x78>
 c02f3e0:	1b95      	subs	r5, r2, r6
   } else if(UB.ptr == NULL) {
 c02f3e2:	b103      	cbz	r3, c02f3e6 <QCBOREncode_CloseMapOrArray+0x68>
      ReturnValue = (UsefulBufC){(uint8_t *)UB.ptr + uAmount, UB.len - uAmount};
 c02f3e4:	4433      	add	r3, r6
            *pWrappedCBOR = UsefulBuf_Tail(PartialResult, uInsertPosition);
 c02f3e6:	e9c7 3500 	strd	r3, r5, [r7]
   pNesting->pCurrentNesting--;
 c02f3ea:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 c02f3ee:	3b08      	subs	r3, #8
 c02f3f0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 c02f3f4:	e7d1      	b.n	c02f39a <QCBOREncode_CloseMapOrArray+0x1c>
      ReturnValue = NULLUsefulBufC;
 c02f3f6:	462b      	mov	r3, r5
 c02f3f8:	e7f5      	b.n	c02f3e6 <QCBOREncode_CloseMapOrArray+0x68>

0c02f3fa <QCBOREncode_Finish>:

/*
 Public functions to finish and get the encoded result. See header qcbor.h
 */
QCBORError QCBOREncode_Finish(QCBOREncodeContext *me, UsefulBufC *pEncodedCBOR)
{
 c02f3fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   QCBORError uReturn = (QCBORError) me->uError;
 c02f3fc:	7c04      	ldrb	r4, [r0, #16]
{
 c02f3fe:	460e      	mov	r6, r1

   if(uReturn != QCBOR_SUCCESS) {
 c02f400:	b984      	cbnz	r4, c02f424 <QCBOREncode_Finish+0x2a>
      goto Done;
   }

   if (Nesting_IsInNest(&(me->nesting))) {
 c02f402:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
   return pNesting->pCurrentNesting == &pNesting->pArrays[0] ? 0 : 1;
 c02f406:	f100 0314 	add.w	r3, r0, #20
   if (Nesting_IsInNest(&(me->nesting))) {
 c02f40a:	429a      	cmp	r2, r3
 c02f40c:	d10d      	bne.n	c02f42a <QCBOREncode_Finish+0x30>
      uReturn = QCBOR_ERR_ARRAY_OR_MAP_STILL_OPEN;
      goto Done;
   }

   if(UsefulOutBuf_GetError(&(me->OutBuf))) {
 c02f40e:	7b83      	ldrb	r3, [r0, #14]
 c02f410:	b96b      	cbnz	r3, c02f42e <QCBOREncode_Finish+0x34>
      // needed to know that is true. Just read the UsefulBuf code.
      uReturn = QCBOR_ERR_BUFFER_TOO_SMALL;
      goto Done;
   }

   *pEncodedCBOR = UsefulOutBuf_OutUBuf(&(me->OutBuf));
 c02f412:	466d      	mov	r5, sp
 c02f414:	4601      	mov	r1, r0
 c02f416:	4628      	mov	r0, r5
 c02f418:	f7fd febe 	bl	c02d198 <UsefulOutBuf_OutUBuf>
 c02f41c:	e895 0003 	ldmia.w	r5, {r0, r1}
 c02f420:	e886 0003 	stmia.w	r6, {r0, r1}

Done:
   return uReturn;
}
 c02f424:	4620      	mov	r0, r4
 c02f426:	b002      	add	sp, #8
 c02f428:	bd70      	pop	{r4, r5, r6, pc}
      uReturn = QCBOR_ERR_ARRAY_OR_MAP_STILL_OPEN;
 c02f42a:	240a      	movs	r4, #10
 c02f42c:	e7fa      	b.n	c02f424 <QCBOREncode_Finish+0x2a>
      uReturn = QCBOR_ERR_BUFFER_TOO_SMALL;
 c02f42e:	2401      	movs	r4, #1
 c02f430:	e7f8      	b.n	c02f424 <QCBOREncode_Finish+0x2a>
	...

0c02f434 <get_partition_idx>:
    if (partition_id == INVALID_PARTITION_ID) {
 c02f434:	1c43      	adds	r3, r0, #1
{
 c02f436:	b530      	push	{r4, r5, lr}
    if (partition_id == INVALID_PARTITION_ID) {
 c02f438:	d012      	beq.n	c02f460 <get_partition_idx+0x2c>
    for (i = 0; i < g_spm_partition_db.partition_count; ++i) {
 c02f43a:	4b0a      	ldr	r3, [pc, #40]	; (c02f464 <get_partition_idx+0x30>)
        if (g_spm_partition_db.partitions[i].static_data->partition_id ==
 c02f43c:	2470      	movs	r4, #112	; 0x70
 c02f43e:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    for (i = 0; i < g_spm_partition_db.partition_count; ++i) {
 c02f442:	2300      	movs	r3, #0
 c02f444:	429a      	cmp	r2, r3
 c02f446:	d103      	bne.n	c02f450 <get_partition_idx+0x1c>
        return SPM_INVALID_PARTITION_IDX;
 c02f448:	f04f 33ff 	mov.w	r3, #4294967295
}
 c02f44c:	4618      	mov	r0, r3
 c02f44e:	bd30      	pop	{r4, r5, pc}
        if (g_spm_partition_db.partitions[i].static_data->partition_id ==
 c02f450:	fb04 1503 	mla	r5, r4, r3, r1
 c02f454:	6e6d      	ldr	r5, [r5, #100]	; 0x64
 c02f456:	682d      	ldr	r5, [r5, #0]
 c02f458:	4285      	cmp	r5, r0
 c02f45a:	d0f7      	beq.n	c02f44c <get_partition_idx+0x18>
    for (i = 0; i < g_spm_partition_db.partition_count; ++i) {
 c02f45c:	3301      	adds	r3, #1
 c02f45e:	e7f1      	b.n	c02f444 <get_partition_idx+0x10>
        return SPM_INVALID_PARTITION_IDX;
 c02f460:	4603      	mov	r3, r0
 c02f462:	e7f3      	b.n	c02f44c <get_partition_idx+0x18>
 c02f464:	30035b50 	.word	0x30035b50

0c02f468 <tfm_spm_db_init>:
{
 c02f468:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (i = 0; i < g_spm_partition_db.partition_count; i++) {
 c02f46a:	2200      	movs	r2, #0
        g_spm_partition_db.partitions[i].memory_data = &memory_data_list[i];
 c02f46c:	2628      	movs	r6, #40	; 0x28
    for (i = 0; i < g_spm_partition_db.partition_count; i++) {
 c02f46e:	490f      	ldr	r1, [pc, #60]	; (c02f4ac <tfm_spm_db_init+0x44>)
        g_spm_partition_db.partitions[i].static_data = &static_data_list[i];
 c02f470:	4c0f      	ldr	r4, [pc, #60]	; (c02f4b0 <tfm_spm_db_init+0x48>)
        g_spm_partition_db.partitions[i].platform_data = platform_data_list[i];
 c02f472:	4d10      	ldr	r5, [pc, #64]	; (c02f4b4 <tfm_spm_db_init+0x4c>)
        g_spm_partition_db.partitions[i].memory_data = &memory_data_list[i];
 c02f474:	f8df c040 	ldr.w	ip, [pc, #64]	; c02f4b8 <tfm_spm_db_init+0x50>
 c02f478:	e9d1 0301 	ldrd	r0, r3, [r1, #4]
 c02f47c:	3364      	adds	r3, #100	; 0x64
    for (i = 0; i < g_spm_partition_db.partition_count; i++) {
 c02f47e:	4290      	cmp	r0, r2
 c02f480:	f103 0370 	add.w	r3, r3, #112	; 0x70
 c02f484:	d103      	bne.n	c02f48e <tfm_spm_db_init+0x26>
    g_spm_partition_db.is_init = 1;
 c02f486:	2301      	movs	r3, #1
}
 c02f488:	2000      	movs	r0, #0
    g_spm_partition_db.is_init = 1;
 c02f48a:	600b      	str	r3, [r1, #0]
}
 c02f48c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        g_spm_partition_db.partitions[i].static_data = &static_data_list[i];
 c02f48e:	eb04 1702 	add.w	r7, r4, r2, lsl #4
 c02f492:	f843 7c70 	str.w	r7, [r3, #-112]
        g_spm_partition_db.partitions[i].platform_data = platform_data_list[i];
 c02f496:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
 c02f49a:	f843 7c6c 	str.w	r7, [r3, #-108]
        g_spm_partition_db.partitions[i].memory_data = &memory_data_list[i];
 c02f49e:	fb06 c702 	mla	r7, r6, r2, ip
    for (i = 0; i < g_spm_partition_db.partition_count; i++) {
 c02f4a2:	3201      	adds	r2, #1
        g_spm_partition_db.partitions[i].memory_data = &memory_data_list[i];
 c02f4a4:	f843 7c68 	str.w	r7, [r3, #-104]
 c02f4a8:	e7e9      	b.n	c02f47e <tfm_spm_db_init+0x16>
 c02f4aa:	bf00      	nop
 c02f4ac:	30035b50 	.word	0x30035b50
 c02f4b0:	0c035490 	.word	0x0c035490
 c02f4b4:	3003d1b0 	.word	0x3003d1b0
 c02f4b8:	0c0353c8 	.word	0x0c0353c8

0c02f4bc <tfm_spm_partition_get_flags>:
    return g_spm_partition_db.partitions[partition_idx].static_data->
 c02f4bc:	4b03      	ldr	r3, [pc, #12]	; (c02f4cc <tfm_spm_partition_get_flags+0x10>)
 c02f4be:	689a      	ldr	r2, [r3, #8]
 c02f4c0:	2370      	movs	r3, #112	; 0x70
 c02f4c2:	fb03 2000 	mla	r0, r3, r0, r2
 c02f4c6:	6e43      	ldr	r3, [r0, #100]	; 0x64
}
 c02f4c8:	6858      	ldr	r0, [r3, #4]
 c02f4ca:	4770      	bx	lr
 c02f4cc:	30035b50 	.word	0x30035b50

0c02f4d0 <tfm_spm_create_conn_handle>:

/********************** SPM functions for handler mode ***********************/

/* Service handle management functions */
psa_handle_t tfm_spm_create_conn_handle(struct tfm_spm_service_t *service)
{
 c02f4d0:	b510      	push	{r4, lr}
    struct tfm_conn_handle_t *p_handle;

    TFM_ASSERT(service);
 c02f4d2:	4604      	mov	r4, r0
 c02f4d4:	b928      	cbnz	r0, c02f4e2 <tfm_spm_create_conn_handle+0x12>
 c02f4d6:	2237      	movs	r2, #55	; 0x37
 c02f4d8:	490a      	ldr	r1, [pc, #40]	; (c02f504 <tfm_spm_create_conn_handle+0x34>)
 c02f4da:	480b      	ldr	r0, [pc, #44]	; (c02f508 <tfm_spm_create_conn_handle+0x38>)
 c02f4dc:	f7e5 ff94 	bl	c015408 <iprintf>
 c02f4e0:	e7fe      	b.n	c02f4e0 <tfm_spm_create_conn_handle+0x10>

    /* Get buffer for handle list structure from handle pool */
    p_handle = (struct tfm_conn_handle_t *)tfm_pool_alloc(conn_handle_pool);
 c02f4e2:	480a      	ldr	r0, [pc, #40]	; (c02f50c <tfm_spm_create_conn_handle+0x3c>)
 c02f4e4:	f002 fc1a 	bl	c031d1c <tfm_pool_alloc>
    if (!p_handle) {
 c02f4e8:	b158      	cbz	r0, c02f502 <tfm_spm_create_conn_handle+0x32>
 * \param[in] node              List node want to be added.
 */
__STATIC_INLINE void
tfm_list_add_tail(struct tfm_list_node_t *head, struct tfm_list_node_t *node)
{
    head->prev->next = node;
 c02f4ea:	68a2      	ldr	r2, [r4, #8]
    }

    p_handle->service = service;

    /* Add handle node to list for next psa functions */
    tfm_list_add_tail(&service->handle_list, &p_handle->list);
 c02f4ec:	f100 0394 	add.w	r3, r0, #148	; 0x94
    p_handle->service = service;
 c02f4f0:	f8c0 4090 	str.w	r4, [r0, #144]	; 0x90
 c02f4f4:	6053      	str	r3, [r2, #4]
    node->prev = head->prev;
 c02f4f6:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    head->prev = node;
 c02f4fa:	f844 3f08 	str.w	r3, [r4, #8]!
    node->next = head;
 c02f4fe:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98

    return (psa_handle_t)p_handle;
}
 c02f502:	bd10      	pop	{r4, pc}
 c02f504:	0c0354e0 	.word	0x0c0354e0
 c02f508:	0c0357d2 	.word	0x0c0357d2
 c02f50c:	3003d1c4 	.word	0x3003d1c4

0c02f510 <tfm_spm_free_conn_handle>:
    return (struct tfm_conn_handle_t *)conn_handle;
}

int32_t tfm_spm_free_conn_handle(struct tfm_spm_service_t *service,
                                 psa_handle_t conn_handle)
{
 c02f510:	b538      	push	{r3, r4, r5, lr}
 c02f512:	460c      	mov	r4, r1
    struct tfm_conn_handle_t *p_handle;

    TFM_ASSERT(service);
 c02f514:	b928      	cbnz	r0, c02f522 <tfm_spm_free_conn_handle+0x12>
 c02f516:	2255      	movs	r2, #85	; 0x55
 c02f518:	490a      	ldr	r1, [pc, #40]	; (c02f544 <tfm_spm_free_conn_handle+0x34>)
 c02f51a:	480b      	ldr	r0, [pc, #44]	; (c02f548 <tfm_spm_free_conn_handle+0x38>)
 c02f51c:	f7e5 ff74 	bl	c015408 <iprintf>
 c02f520:	e7fe      	b.n	c02f520 <tfm_spm_free_conn_handle+0x10>

    /* There are many handles for each RoT Service */
    p_handle = tfm_spm_find_conn_handle_node(service, conn_handle);
    if (!p_handle) {
 c02f522:	b909      	cbnz	r1, c02f528 <tfm_spm_free_conn_handle+0x18>
        tfm_panic();
 c02f524:	f003 fae4 	bl	c032af0 <tfm_panic>
 *
 * \param[in] node              List node want to be deleted.
 */
__STATIC_INLINE void tfm_list_del_node(struct tfm_list_node_t *node)
{
    node->prev->next = node->next;
 c02f528:	e9d4 3225 	ldrd	r3, r2, [r4, #148]	; 0x94
    }

    /* Clear magic as the handler is not used anymore */
    p_handle->internal_msg.magic = 0;
 c02f52c:	2500      	movs	r5, #0
 c02f52e:	6065      	str	r5, [r4, #4]
 c02f530:	605a      	str	r2, [r3, #4]
    node->next->prev = node->prev;
 c02f532:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98

    /* Remove node from handle list */
    tfm_list_del_node(&p_handle->list);

    /* Back handle buffer to pool */
    tfm_pool_free(p_handle);
 c02f536:	4620      	mov	r0, r4
 c02f538:	6013      	str	r3, [r2, #0]
 c02f53a:	f002 fbfe 	bl	c031d3a <tfm_pool_free>
    return IPC_SUCCESS;
}
 c02f53e:	4628      	mov	r0, r5
 c02f540:	bd38      	pop	{r3, r4, r5, pc}
 c02f542:	bf00      	nop
 c02f544:	0c0354fb 	.word	0x0c0354fb
 c02f548:	0c0357d2 	.word	0x0c0357d2

0c02f54c <tfm_spm_set_rhandle>:

int32_t tfm_spm_set_rhandle(struct tfm_spm_service_t *service,
                            psa_handle_t conn_handle,
                            void *rhandle)
{
 c02f54c:	b508      	push	{r3, lr}
    struct tfm_conn_handle_t *p_handle;

    TFM_ASSERT(service);
 c02f54e:	b928      	cbnz	r0, c02f55c <tfm_spm_set_rhandle+0x10>
 c02f550:	226e      	movs	r2, #110	; 0x6e
 c02f552:	4907      	ldr	r1, [pc, #28]	; (c02f570 <tfm_spm_set_rhandle+0x24>)
 c02f554:	4807      	ldr	r0, [pc, #28]	; (c02f574 <tfm_spm_set_rhandle+0x28>)
 c02f556:	f7e5 ff57 	bl	c015408 <iprintf>
 c02f55a:	e7fe      	b.n	c02f55a <tfm_spm_set_rhandle+0xe>
    /* Set reverse handle value only be allowed for a connected handle */
    TFM_ASSERT(conn_handle != PSA_NULL_HANDLE);
 c02f55c:	b929      	cbnz	r1, c02f56a <tfm_spm_set_rhandle+0x1e>
 c02f55e:	2270      	movs	r2, #112	; 0x70
 c02f560:	4903      	ldr	r1, [pc, #12]	; (c02f570 <tfm_spm_set_rhandle+0x24>)
 c02f562:	4804      	ldr	r0, [pc, #16]	; (c02f574 <tfm_spm_set_rhandle+0x28>)
 c02f564:	f7e5 ff50 	bl	c015408 <iprintf>
 c02f568:	e7fe      	b.n	c02f568 <tfm_spm_set_rhandle+0x1c>
    p_handle = tfm_spm_find_conn_handle_node(service, conn_handle);
    if (!p_handle) {
        tfm_panic();
    }

    p_handle->rhandle = rhandle;
 c02f56a:	600a      	str	r2, [r1, #0]
    return IPC_SUCCESS;
}
 c02f56c:	2000      	movs	r0, #0
 c02f56e:	bd08      	pop	{r3, pc}
 c02f570:	0c035514 	.word	0x0c035514
 c02f574:	0c0357d2 	.word	0x0c0357d2

0c02f578 <tfm_spm_get_rhandle>:

void *tfm_spm_get_rhandle(struct tfm_spm_service_t *service,
                          psa_handle_t conn_handle)
{
 c02f578:	b508      	push	{r3, lr}
    struct tfm_conn_handle_t *p_handle;

    TFM_ASSERT(service);
 c02f57a:	b928      	cbnz	r0, c02f588 <tfm_spm_get_rhandle+0x10>
 c02f57c:	2281      	movs	r2, #129	; 0x81
 c02f57e:	4907      	ldr	r1, [pc, #28]	; (c02f59c <tfm_spm_get_rhandle+0x24>)
 c02f580:	4807      	ldr	r0, [pc, #28]	; (c02f5a0 <tfm_spm_get_rhandle+0x28>)
 c02f582:	f7e5 ff41 	bl	c015408 <iprintf>
 c02f586:	e7fe      	b.n	c02f586 <tfm_spm_get_rhandle+0xe>
    /* Get reverse handle value only be allowed for a connected handle */
    TFM_ASSERT(conn_handle != PSA_NULL_HANDLE);
 c02f588:	b929      	cbnz	r1, c02f596 <tfm_spm_get_rhandle+0x1e>
 c02f58a:	2283      	movs	r2, #131	; 0x83
 c02f58c:	4903      	ldr	r1, [pc, #12]	; (c02f59c <tfm_spm_get_rhandle+0x24>)
 c02f58e:	4804      	ldr	r0, [pc, #16]	; (c02f5a0 <tfm_spm_get_rhandle+0x28>)
 c02f590:	f7e5 ff3a 	bl	c015408 <iprintf>
 c02f594:	e7fe      	b.n	c02f594 <tfm_spm_get_rhandle+0x1c>
    if (!p_handle) {
        tfm_panic();
    }

    return p_handle->rhandle;
}
 c02f596:	6808      	ldr	r0, [r1, #0]
 c02f598:	bd08      	pop	{r3, pc}
 c02f59a:	bf00      	nop
 c02f59c:	0c035528 	.word	0x0c035528
 c02f5a0:	0c0357d2 	.word	0x0c0357d2

0c02f5a4 <tfm_spm_get_service_by_signal>:

/* Partition management functions */
struct tfm_spm_service_t *
    tfm_spm_get_service_by_signal(struct spm_partition_desc_t *partition,
                                  psa_signal_t signal)
{
 c02f5a4:	b570      	push	{r4, r5, r6, lr}
 c02f5a6:	460e      	mov	r6, r1
    struct tfm_list_node_t *node, *head;
    struct tfm_spm_service_t *service;

    TFM_ASSERT(partition);
 c02f5a8:	4604      	mov	r4, r0
 c02f5aa:	b928      	cbnz	r0, c02f5b8 <tfm_spm_get_service_by_signal+0x14>
 c02f5ac:	2296      	movs	r2, #150	; 0x96
 c02f5ae:	490d      	ldr	r1, [pc, #52]	; (c02f5e4 <tfm_spm_get_service_by_signal+0x40>)
 c02f5b0:	480d      	ldr	r0, [pc, #52]	; (c02f5e8 <tfm_spm_get_service_by_signal+0x44>)
 c02f5b2:	f7e5 ff29 	bl	c015408 <iprintf>
 c02f5b6:	e7fe      	b.n	c02f5b6 <tfm_spm_get_service_by_signal+0x12>

    if (tfm_list_is_empty(&partition->runtime_data.service_list)) {
 c02f5b8:	6903      	ldr	r3, [r0, #16]
 c02f5ba:	f100 050c 	add.w	r5, r0, #12
 c02f5be:	429d      	cmp	r5, r3
 c02f5c0:	d101      	bne.n	c02f5c6 <tfm_spm_get_service_by_signal+0x22>
        tfm_panic();
 c02f5c2:	f003 fa95 	bl	c032af0 <tfm_panic>
    }

    head = &partition->runtime_data.service_list;
    TFM_LIST_FOR_EACH(node, head) {
 c02f5c6:	6923      	ldr	r3, [r4, #16]
 c02f5c8:	429d      	cmp	r5, r3
 c02f5ca:	d101      	bne.n	c02f5d0 <tfm_spm_get_service_by_signal+0x2c>
        service = TFM_GET_CONTAINER_PTR(node, struct tfm_spm_service_t, list);
        if (service->service_db->signal == signal) {
            return service;
        }
    }
    return NULL;
 c02f5cc:	2000      	movs	r0, #0
}
 c02f5ce:	bd70      	pop	{r4, r5, r6, pc}
        if (service->service_db->signal == signal) {
 c02f5d0:	f853 2c1c 	ldr.w	r2, [r3, #-28]
        service = TFM_GET_CONTAINER_PTR(node, struct tfm_spm_service_t, list);
 c02f5d4:	f1a3 001c 	sub.w	r0, r3, #28
        if (service->service_db->signal == signal) {
 c02f5d8:	6892      	ldr	r2, [r2, #8]
 c02f5da:	42b2      	cmp	r2, r6
 c02f5dc:	d0f7      	beq.n	c02f5ce <tfm_spm_get_service_by_signal+0x2a>
    TFM_LIST_FOR_EACH(node, head) {
 c02f5de:	685b      	ldr	r3, [r3, #4]
 c02f5e0:	e7f2      	b.n	c02f5c8 <tfm_spm_get_service_by_signal+0x24>
 c02f5e2:	bf00      	nop
 c02f5e4:	0c03553c 	.word	0x0c03553c
 c02f5e8:	0c0357d2 	.word	0x0c0357d2

0c02f5ec <tfm_spm_get_service_by_sid>:

struct tfm_spm_service_t *tfm_spm_get_service_by_sid(uint32_t sid)
{
 c02f5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c02f5f0:	4607      	mov	r7, r0
    uint32_t i;
    struct tfm_list_node_t *node, *head;
    struct tfm_spm_service_t *service;
    struct spm_partition_desc_t *partition;

    for (i = 0; i < g_spm_partition_db.partition_count; i++) {
 c02f5f2:	2400      	movs	r4, #0
        partition = &g_spm_partition_db.partitions[i];
 c02f5f4:	f04f 0870 	mov.w	r8, #112	; 0x70
    for (i = 0; i < g_spm_partition_db.partition_count; i++) {
 c02f5f8:	4e0f      	ldr	r6, [pc, #60]	; (c02f638 <tfm_spm_get_service_by_sid+0x4c>)
 c02f5fa:	6873      	ldr	r3, [r6, #4]
 c02f5fc:	42a3      	cmp	r3, r4
 c02f5fe:	d802      	bhi.n	c02f606 <tfm_spm_get_service_by_sid+0x1a>
            if (service->service_db->sid == sid) {
                return service;
            }
        }
    }
    return NULL;
 c02f600:	2000      	movs	r0, #0
}
 c02f602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((tfm_spm_partition_get_flags(i) & SPM_PART_FLAG_IPC) == 0) {
 c02f606:	4620      	mov	r0, r4
        partition = &g_spm_partition_db.partitions[i];
 c02f608:	68b5      	ldr	r5, [r6, #8]
        if ((tfm_spm_partition_get_flags(i) & SPM_PART_FLAG_IPC) == 0) {
 c02f60a:	f7ff ff57 	bl	c02f4bc <tfm_spm_partition_get_flags>
 c02f60e:	0743      	lsls	r3, r0, #29
 c02f610:	d50f      	bpl.n	c02f632 <tfm_spm_get_service_by_sid+0x46>
        partition = &g_spm_partition_db.partitions[i];
 c02f612:	fb08 5304 	mla	r3, r8, r4, r5
        if (tfm_list_is_empty(&partition->runtime_data.service_list)) {
 c02f616:	f103 020c 	add.w	r2, r3, #12
    return (head->next == head);
 c02f61a:	691b      	ldr	r3, [r3, #16]
 c02f61c:	429a      	cmp	r2, r3
 c02f61e:	d008      	beq.n	c02f632 <tfm_spm_get_service_by_sid+0x46>
            if (service->service_db->sid == sid) {
 c02f620:	f853 1c1c 	ldr.w	r1, [r3, #-28]
            service = TFM_GET_CONTAINER_PTR(node, struct tfm_spm_service_t,
 c02f624:	f1a3 001c 	sub.w	r0, r3, #28
            if (service->service_db->sid == sid) {
 c02f628:	68c9      	ldr	r1, [r1, #12]
 c02f62a:	42b9      	cmp	r1, r7
 c02f62c:	d0e9      	beq.n	c02f602 <tfm_spm_get_service_by_sid+0x16>
        TFM_LIST_FOR_EACH(node, head) {
 c02f62e:	685b      	ldr	r3, [r3, #4]
 c02f630:	e7f4      	b.n	c02f61c <tfm_spm_get_service_by_sid+0x30>
    for (i = 0; i < g_spm_partition_db.partition_count; i++) {
 c02f632:	3401      	adds	r4, #1
 c02f634:	e7e1      	b.n	c02f5fa <tfm_spm_get_service_by_sid+0xe>
 c02f636:	bf00      	nop
 c02f638:	30035b50 	.word	0x30035b50

0c02f63c <tfm_spm_get_service_by_handle>:

struct tfm_spm_service_t *
    tfm_spm_get_service_by_handle(psa_handle_t conn_handle)
{
    return ((struct tfm_conn_handle_t *)conn_handle)->service;
}
 c02f63c:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
 c02f640:	4770      	bx	lr
	...

0c02f644 <tfm_spm_get_partition_by_id>:

struct spm_partition_desc_t *tfm_spm_get_partition_by_id(int32_t partition_id)
{
 c02f644:	b508      	push	{r3, lr}
    uint32_t idx = get_partition_idx(partition_id);
 c02f646:	f7ff fef5 	bl	c02f434 <get_partition_idx>

    if (idx != SPM_INVALID_PARTITION_IDX) {
 c02f64a:	1c43      	adds	r3, r0, #1
        return &(g_spm_partition_db.partitions[idx]);
 c02f64c:	bf1b      	ittet	ne
 c02f64e:	2270      	movne	r2, #112	; 0x70
 c02f650:	4b03      	ldrne	r3, [pc, #12]	; (c02f660 <tfm_spm_get_partition_by_id+0x1c>)
    }
    return NULL;
 c02f652:	2000      	moveq	r0, #0
        return &(g_spm_partition_db.partitions[idx]);
 c02f654:	689b      	ldrne	r3, [r3, #8]
 c02f656:	bf18      	it	ne
 c02f658:	fb02 3000 	mlane	r0, r2, r0, r3
}
 c02f65c:	bd08      	pop	{r3, pc}
 c02f65e:	bf00      	nop
 c02f660:	30035b50 	.word	0x30035b50

0c02f664 <tfm_spm_check_client_version>:
    return tfm_spm_get_partition_by_id(spid);
}

int32_t tfm_spm_check_client_version(struct tfm_spm_service_t *service,
                                     uint32_t minor_version)
{
 c02f664:	b508      	push	{r3, lr}
    TFM_ASSERT(service);
 c02f666:	b928      	cbnz	r0, c02f674 <tfm_spm_check_client_version+0x10>
 c02f668:	22e0      	movs	r2, #224	; 0xe0
 c02f66a:	490c      	ldr	r1, [pc, #48]	; (c02f69c <tfm_spm_check_client_version+0x38>)
 c02f66c:	480c      	ldr	r0, [pc, #48]	; (c02f6a0 <tfm_spm_check_client_version+0x3c>)
 c02f66e:	f7e5 fecb 	bl	c015408 <iprintf>
 c02f672:	e7fe      	b.n	c02f672 <tfm_spm_check_client_version+0xe>

    switch (service->service_db->minor_policy) {
 c02f674:	6803      	ldr	r3, [r0, #0]
 c02f676:	699a      	ldr	r2, [r3, #24]
 c02f678:	b11a      	cbz	r2, c02f682 <tfm_spm_check_client_version+0x1e>
 c02f67a:	2a01      	cmp	r2, #1
 c02f67c:	d007      	beq.n	c02f68e <tfm_spm_check_client_version+0x2a>
        if (minor_version != service->service_db->minor_version) {
            return IPC_ERROR_VERSION;
        }
        break;
    default:
        return IPC_ERROR_VERSION;
 c02f67e:	4809      	ldr	r0, [pc, #36]	; (c02f6a4 <tfm_spm_check_client_version+0x40>)
 c02f680:	e004      	b.n	c02f68c <tfm_spm_check_client_version+0x28>
        if (minor_version > service->service_db->minor_version) {
 c02f682:	695b      	ldr	r3, [r3, #20]
            return IPC_ERROR_VERSION;
 c02f684:	4807      	ldr	r0, [pc, #28]	; (c02f6a4 <tfm_spm_check_client_version+0x40>)
 c02f686:	428b      	cmp	r3, r1
 c02f688:	bf28      	it	cs
 c02f68a:	2000      	movcs	r0, #0
    }
    return IPC_SUCCESS;
}
 c02f68c:	bd08      	pop	{r3, pc}
        if (minor_version != service->service_db->minor_version) {
 c02f68e:	695b      	ldr	r3, [r3, #20]
            return IPC_ERROR_VERSION;
 c02f690:	4804      	ldr	r0, [pc, #16]	; (c02f6a4 <tfm_spm_check_client_version+0x40>)
 c02f692:	428b      	cmp	r3, r1
 c02f694:	bf08      	it	eq
 c02f696:	2000      	moveq	r0, #0
 c02f698:	e7f8      	b.n	c02f68c <tfm_spm_check_client_version+0x28>
 c02f69a:	bf00      	nop
 c02f69c:	0c03555a 	.word	0x0c03555a
 c02f6a0:	0c0357d2 	.word	0x0c0357d2
 c02f6a4:	80000002 	.word	0x80000002

0c02f6a8 <tfm_spm_get_msg_buffer_from_conn_handle>:
    return msg;
}

struct tfm_msg_body_t *
    tfm_spm_get_msg_buffer_from_conn_handle(psa_handle_t conn_handle)
{
 c02f6a8:	b508      	push	{r3, lr}
    TFM_ASSERT(conn_handle != PSA_NULL_HANDLE);
 c02f6aa:	b930      	cbnz	r0, c02f6ba <tfm_spm_get_msg_buffer_from_conn_handle+0x12>
 c02f6ac:	f44f 7294 	mov.w	r2, #296	; 0x128
 c02f6b0:	4903      	ldr	r1, [pc, #12]	; (c02f6c0 <tfm_spm_get_msg_buffer_from_conn_handle+0x18>)
 c02f6b2:	4804      	ldr	r0, [pc, #16]	; (c02f6c4 <tfm_spm_get_msg_buffer_from_conn_handle+0x1c>)
 c02f6b4:	f7e5 fea8 	bl	c015408 <iprintf>
 c02f6b8:	e7fe      	b.n	c02f6b8 <tfm_spm_get_msg_buffer_from_conn_handle+0x10>

    return &(((struct tfm_conn_handle_t *)conn_handle)->internal_msg);
}
 c02f6ba:	3004      	adds	r0, #4
 c02f6bc:	bd08      	pop	{r3, pc}
 c02f6be:	bf00      	nop
 c02f6c0:	0c035577 	.word	0x0c035577
 c02f6c4:	0c0357d2 	.word	0x0c0357d2

0c02f6c8 <tfm_spm_send_event>:
    }
}

int32_t tfm_spm_send_event(struct tfm_spm_service_t *service,
                           struct tfm_msg_body_t *msg)
{
 c02f6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c02f6ca:	4606      	mov	r6, r0
    struct spm_partition_runtime_data_t *p_runtime_data =
                                            &service->partition->runtime_data;

    TFM_ASSERT(service);
    TFM_ASSERT(msg);
 c02f6cc:	460f      	mov	r7, r1
 c02f6ce:	b931      	cbnz	r1, c02f6de <tfm_spm_send_event+0x16>
 c02f6d0:	f240 126d 	movw	r2, #365	; 0x16d
 c02f6d4:	490e      	ldr	r1, [pc, #56]	; (c02f710 <tfm_spm_send_event+0x48>)
 c02f6d6:	480f      	ldr	r0, [pc, #60]	; (c02f714 <tfm_spm_send_event+0x4c>)
 c02f6d8:	f7e5 fe96 	bl	c015408 <iprintf>
 c02f6dc:	e7fe      	b.n	c02f6dc <tfm_spm_send_event+0x14>
                                            &service->partition->runtime_data;
 c02f6de:	6844      	ldr	r4, [r0, #4]

    /* Enqueue message to service message queue */
    if (tfm_msg_enqueue(&service->msg_queue, msg) != IPC_SUCCESS) {
 c02f6e0:	3010      	adds	r0, #16
 c02f6e2:	f002 f9af 	bl	c031a44 <tfm_msg_enqueue>
 c02f6e6:	4605      	mov	r5, r0
 c02f6e8:	b978      	cbnz	r0, c02f70a <tfm_spm_send_event+0x42>
        return IPC_ERROR_GENERIC;
    }

    /* Messages put. Update signals */
    p_runtime_data->signals |= service->service_db->signal;
 c02f6ea:	6833      	ldr	r3, [r6, #0]
 c02f6ec:	68a1      	ldr	r1, [r4, #8]
 c02f6ee:	689b      	ldr	r3, [r3, #8]

    tfm_event_wake(&p_runtime_data->signal_evnt, (p_runtime_data->signals &
 c02f6f0:	4620      	mov	r0, r4
    p_runtime_data->signals |= service->service_db->signal;
 c02f6f2:	430b      	orrs	r3, r1
    tfm_event_wake(&p_runtime_data->signal_evnt, (p_runtime_data->signals &
 c02f6f4:	6e21      	ldr	r1, [r4, #96]	; 0x60
    p_runtime_data->signals |= service->service_db->signal;
 c02f6f6:	60a3      	str	r3, [r4, #8]
    tfm_event_wake(&p_runtime_data->signal_evnt, (p_runtime_data->signals &
 c02f6f8:	4019      	ands	r1, r3
 c02f6fa:	f003 fa19 	bl	c032b30 <tfm_event_wake>
                                                  p_runtime_data->signal_mask));

    tfm_event_wait(&msg->ack_evnt);
 c02f6fe:	f107 000c 	add.w	r0, r7, #12
 c02f702:	f003 f9f7 	bl	c032af4 <tfm_event_wait>

    return IPC_SUCCESS;
}
 c02f706:	4628      	mov	r0, r5
 c02f708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return IPC_ERROR_GENERIC;
 c02f70a:	4d03      	ldr	r5, [pc, #12]	; (c02f718 <tfm_spm_send_event+0x50>)
 c02f70c:	e7fb      	b.n	c02f706 <tfm_spm_send_event+0x3e>
 c02f70e:	bf00      	nop
 c02f710:	0c0355b0 	.word	0x0c0355b0
 c02f714:	0c0357d2 	.word	0x0c0357d2
 c02f718:	8000001f 	.word	0x8000001f

0c02f71c <tfm_spm_partition_get_stack_bottom>:

uint32_t tfm_spm_partition_get_stack_bottom(uint32_t partition_idx)
{
    return g_spm_partition_db.partitions[partition_idx].
 c02f71c:	4b03      	ldr	r3, [pc, #12]	; (c02f72c <tfm_spm_partition_get_stack_bottom+0x10>)
 c02f71e:	689a      	ldr	r2, [r3, #8]
 c02f720:	2370      	movs	r3, #112	; 0x70
 c02f722:	fb03 2000 	mla	r0, r3, r0, r2
            memory_data->stack_bottom;
 c02f726:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
}
 c02f728:	6a18      	ldr	r0, [r3, #32]
 c02f72a:	4770      	bx	lr
 c02f72c:	30035b50 	.word	0x30035b50

0c02f730 <tfm_spm_partition_get_stack_top>:

uint32_t tfm_spm_partition_get_stack_top(uint32_t partition_idx)
{
    return g_spm_partition_db.partitions[partition_idx].memory_data->stack_top;
 c02f730:	4b03      	ldr	r3, [pc, #12]	; (c02f740 <tfm_spm_partition_get_stack_top+0x10>)
 c02f732:	689a      	ldr	r2, [r3, #8]
 c02f734:	2370      	movs	r3, #112	; 0x70
 c02f736:	fb03 2000 	mla	r0, r3, r0, r2
 c02f73a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
}
 c02f73c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 c02f73e:	4770      	bx	lr
 c02f740:	30035b50 	.word	0x30035b50

0c02f744 <tfm_spm_partition_get_running_partition_id>:

uint32_t tfm_spm_partition_get_running_partition_id(void)
{
 c02f744:	b508      	push	{r3, lr}
    struct tfm_thrd_ctx *pth = tfm_thrd_curr_thread();
 c02f746:	f003 f8f1 	bl	c03292c <tfm_thrd_curr_thread>

    r_data = TFM_GET_CONTAINER_PTR(pth, struct spm_partition_runtime_data_t,
                                   sp_thrd);
    partition = TFM_GET_CONTAINER_PTR(r_data, struct spm_partition_desc_t,
                                      runtime_data);
    return partition->static_data->partition_id;
 c02f74a:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 c02f74c:	6818      	ldr	r0, [r3, #0]
 c02f74e:	bd08      	pop	{r3, pc}

0c02f750 <tfm_spm_get_running_partition>:
{
 c02f750:	b508      	push	{r3, lr}
    spid = tfm_spm_partition_get_running_partition_id();
 c02f752:	f7ff fff7 	bl	c02f744 <tfm_spm_partition_get_running_partition_id>
}
 c02f756:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return tfm_spm_get_partition_by_id(spid);
 c02f75a:	f7ff bf73 	b.w	c02f644 <tfm_spm_get_partition_by_id>
	...

0c02f760 <tfm_spm_get_msg_from_handle>:
{
 c02f760:	b510      	push	{r4, lr}
    if (is_valid_chunk_data_in_pool(
 c02f762:	1f01      	subs	r1, r0, #4
{
 c02f764:	4604      	mov	r4, r0
    if (is_valid_chunk_data_in_pool(
 c02f766:	480a      	ldr	r0, [pc, #40]	; (c02f790 <tfm_spm_get_msg_from_handle+0x30>)
 c02f768:	f002 faf4 	bl	c031d54 <is_valid_chunk_data_in_pool>
 c02f76c:	b910      	cbnz	r0, c02f774 <tfm_spm_get_msg_from_handle+0x14>
        return NULL;
 c02f76e:	2400      	movs	r4, #0
}
 c02f770:	4620      	mov	r0, r4
 c02f772:	bd10      	pop	{r4, pc}
    if (msg->magic != TFM_MSG_MAGIC) {
 c02f774:	6822      	ldr	r2, [r4, #0]
 c02f776:	4b07      	ldr	r3, [pc, #28]	; (c02f794 <tfm_spm_get_msg_from_handle+0x34>)
 c02f778:	429a      	cmp	r2, r3
 c02f77a:	d1f8      	bne.n	c02f76e <tfm_spm_get_msg_from_handle+0xe>
    partition_id = tfm_spm_partition_get_running_partition_id();
 c02f77c:	f7ff ffe2 	bl	c02f744 <tfm_spm_partition_get_running_partition_id>
    if (partition_id != msg->service->partition->static_data->partition_id) {
 c02f780:	6863      	ldr	r3, [r4, #4]
 c02f782:	685b      	ldr	r3, [r3, #4]
 c02f784:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c02f786:	681b      	ldr	r3, [r3, #0]
 c02f788:	4283      	cmp	r3, r0
 c02f78a:	d0f1      	beq.n	c02f770 <tfm_spm_get_msg_from_handle+0x10>
 c02f78c:	e7ef      	b.n	c02f76e <tfm_spm_get_msg_from_handle+0xe>
 c02f78e:	bf00      	nop
 c02f790:	3003d1c4 	.word	0x3003d1c4
 c02f794:	15154343 	.word	0x15154343

0c02f798 <tfm_spm_fill_msg>:
{
 c02f798:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c02f79c:	4688      	mov	r8, r1
 c02f79e:	e9dd a60b 	ldrd	sl, r6, [sp, #44]	; 0x2c
 c02f7a2:	e9dd 450d 	ldrd	r4, r5, [sp, #52]	; 0x34
 c02f7a6:	4691      	mov	r9, r2
 c02f7a8:	469b      	mov	fp, r3
    TFM_ASSERT(msg);
 c02f7aa:	4607      	mov	r7, r0
 c02f7ac:	b930      	cbnz	r0, c02f7bc <tfm_spm_fill_msg+0x24>
 c02f7ae:	f240 1237 	movw	r2, #311	; 0x137
 c02f7b2:	4948      	ldr	r1, [pc, #288]	; (c02f8d4 <tfm_spm_fill_msg+0x13c>)
 c02f7b4:	4848      	ldr	r0, [pc, #288]	; (c02f8d8 <tfm_spm_fill_msg+0x140>)
 c02f7b6:	f7e5 fe27 	bl	c015408 <iprintf>
 c02f7ba:	e7fe      	b.n	c02f7ba <tfm_spm_fill_msg+0x22>
    TFM_ASSERT(service);
 c02f7bc:	b931      	cbnz	r1, c02f7cc <tfm_spm_fill_msg+0x34>
 c02f7be:	f44f 729c 	mov.w	r2, #312	; 0x138
 c02f7c2:	4944      	ldr	r1, [pc, #272]	; (c02f8d4 <tfm_spm_fill_msg+0x13c>)
 c02f7c4:	4844      	ldr	r0, [pc, #272]	; (c02f8d8 <tfm_spm_fill_msg+0x140>)
 c02f7c6:	f7e5 fe1f 	bl	c015408 <iprintf>
 c02f7ca:	e7fe      	b.n	c02f7ca <tfm_spm_fill_msg+0x32>
    TFM_ASSERT(!(invec == NULL && in_len != 0));
 c02f7cc:	f1ba 0f00 	cmp.w	sl, #0
 c02f7d0:	d108      	bne.n	c02f7e4 <tfm_spm_fill_msg+0x4c>
 c02f7d2:	2e00      	cmp	r6, #0
 c02f7d4:	d038      	beq.n	c02f848 <tfm_spm_fill_msg+0xb0>
 c02f7d6:	f240 1239 	movw	r2, #313	; 0x139
 c02f7da:	493e      	ldr	r1, [pc, #248]	; (c02f8d4 <tfm_spm_fill_msg+0x13c>)
 c02f7dc:	483e      	ldr	r0, [pc, #248]	; (c02f8d8 <tfm_spm_fill_msg+0x140>)
 c02f7de:	f7e5 fe13 	bl	c015408 <iprintf>
 c02f7e2:	e7fe      	b.n	c02f7e2 <tfm_spm_fill_msg+0x4a>
    TFM_ASSERT(!(outvec == NULL && out_len != 0));
 c02f7e4:	b944      	cbnz	r4, c02f7f8 <tfm_spm_fill_msg+0x60>
 c02f7e6:	2d00      	cmp	r5, #0
 c02f7e8:	d067      	beq.n	c02f8ba <tfm_spm_fill_msg+0x122>
 c02f7ea:	f44f 729d 	mov.w	r2, #314	; 0x13a
 c02f7ee:	4939      	ldr	r1, [pc, #228]	; (c02f8d4 <tfm_spm_fill_msg+0x13c>)
 c02f7f0:	4839      	ldr	r0, [pc, #228]	; (c02f8d8 <tfm_spm_fill_msg+0x140>)
 c02f7f2:	f7e5 fe09 	bl	c015408 <iprintf>
 c02f7f6:	e7fe      	b.n	c02f7f6 <tfm_spm_fill_msg+0x5e>
    TFM_ASSERT(in_len <= PSA_MAX_IOVEC);
 c02f7f8:	2e04      	cmp	r6, #4
 c02f7fa:	d906      	bls.n	c02f80a <tfm_spm_fill_msg+0x72>
 c02f7fc:	f240 123b 	movw	r2, #315	; 0x13b
 c02f800:	4934      	ldr	r1, [pc, #208]	; (c02f8d4 <tfm_spm_fill_msg+0x13c>)
 c02f802:	4835      	ldr	r0, [pc, #212]	; (c02f8d8 <tfm_spm_fill_msg+0x140>)
 c02f804:	f7e5 fe00 	bl	c015408 <iprintf>
 c02f808:	e7fe      	b.n	c02f808 <tfm_spm_fill_msg+0x70>
    TFM_ASSERT(out_len <= PSA_MAX_IOVEC);
 c02f80a:	2d04      	cmp	r5, #4
 c02f80c:	d957      	bls.n	c02f8be <tfm_spm_fill_msg+0x126>
 c02f80e:	f44f 729e 	mov.w	r2, #316	; 0x13c
 c02f812:	4930      	ldr	r1, [pc, #192]	; (c02f8d4 <tfm_spm_fill_msg+0x13c>)
 c02f814:	4830      	ldr	r0, [pc, #192]	; (c02f8d8 <tfm_spm_fill_msg+0x140>)
 c02f816:	f7e5 fdf7 	bl	c015408 <iprintf>
 c02f81a:	e7fe      	b.n	c02f81a <tfm_spm_fill_msg+0x82>
        msg->msg.client_id = tfm_spm_partition_get_running_partition_id();
 c02f81c:	f7ff ff92 	bl	c02f744 <tfm_spm_partition_get_running_partition_id>
 c02f820:	e02c      	b.n	c02f87c <tfm_spm_fill_msg+0xe4>
        msg->msg.in_size[i] = invec[i].len;
 c02f822:	eb0a 0002 	add.w	r0, sl, r2
 c02f826:	6840      	ldr	r0, [r0, #4]
        msg->invec[i].base = invec[i].base;
 c02f828:	18bb      	adds	r3, r7, r2
        msg->msg.in_size[i] = invec[i].len;
 c02f82a:	f841 0b04 	str.w	r0, [r1], #4
        msg->invec[i].base = invec[i].base;
 c02f82e:	f85a 0002 	ldr.w	r0, [sl, r2]
 c02f832:	3208      	adds	r2, #8
 c02f834:	6458      	str	r0, [r3, #68]	; 0x44
 c02f836:	e028      	b.n	c02f88a <tfm_spm_fill_msg+0xf2>
        msg->msg.out_size[i] = outvec[i].len;
 c02f838:	6860      	ldr	r0, [r4, #4]
 c02f83a:	f841 0b04 	str.w	r0, [r1], #4
        msg->outvec[i].base = outvec[i].base;
 c02f83e:	f854 0b08 	ldr.w	r0, [r4], #8
        msg->outvec[i].len = 0;
 c02f842:	e942 0602 	strd	r0, r6, [r2, #-8]
 c02f846:	e029      	b.n	c02f89c <tfm_spm_fill_msg+0x104>
    TFM_ASSERT(!(outvec == NULL && out_len != 0));
 c02f848:	2c00      	cmp	r4, #0
 c02f84a:	d0cc      	beq.n	c02f7e6 <tfm_spm_fill_msg+0x4e>
    TFM_ASSERT(out_len <= PSA_MAX_IOVEC);
 c02f84c:	2d04      	cmp	r5, #4
 c02f84e:	d8de      	bhi.n	c02f80e <tfm_spm_fill_msg+0x76>
    tfm_core_util_memset(msg, 0, sizeof(struct tfm_msg_body_t));
 c02f850:	228c      	movs	r2, #140	; 0x8c
 c02f852:	2100      	movs	r1, #0
 c02f854:	4638      	mov	r0, r7
 c02f856:	f001 ff07 	bl	c031668 <tfm_core_util_memset>
 *  pevnt      -    The pointer of event object allocated by the caller
 */
void __STATIC_INLINE tfm_event_init(struct tfm_event_t *pevnt)
{
    pevnt->magic = TFM_EVENT_MAGIC;
    pevnt->owner = NULL;
 c02f85a:	2200      	movs	r2, #0
 c02f85c:	4b1f      	ldr	r3, [pc, #124]	; (c02f8dc <tfm_spm_fill_msg+0x144>)
    msg->handle = handle;
 c02f85e:	f8c7 9008 	str.w	r9, [r7, #8]
 c02f862:	e9c7 3203 	strd	r3, r2, [r7, #12]
    msg->magic = TFM_MSG_MAGIC;
 c02f866:	4a1e      	ldr	r2, [pc, #120]	; (c02f8e0 <tfm_spm_fill_msg+0x148>)
    if (ns_caller) {
 c02f868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    msg->service = service;
 c02f86a:	e9c7 2800 	strd	r2, r8, [r7]
    msg->caller_outvec = caller_outvec;
 c02f86e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 c02f870:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
    if (ns_caller) {
 c02f874:	2b00      	cmp	r3, #0
 c02f876:	d0d1      	beq.n	c02f81c <tfm_spm_fill_msg+0x84>
        msg->msg.client_id = tfm_nspm_get_current_client_id();
 c02f878:	f002 f908 	bl	c031a8c <tfm_nspm_get_current_client_id>
    for (i = 0; i < in_len; i++) {
 c02f87c:	2200      	movs	r2, #0
        msg->msg.client_id = tfm_spm_partition_get_running_partition_id();
 c02f87e:	61f8      	str	r0, [r7, #28]
    msg->msg.type = type;
 c02f880:	f8c7 b014 	str.w	fp, [r7, #20]
 c02f884:	f107 0124 	add.w	r1, r7, #36	; 0x24
 c02f888:	00f6      	lsls	r6, r6, #3
    for (i = 0; i < in_len; i++) {
 c02f88a:	42b2      	cmp	r2, r6
 c02f88c:	d1c9      	bne.n	c02f822 <tfm_spm_fill_msg+0x8a>
        msg->outvec[i].len = 0;
 c02f88e:	2600      	movs	r6, #0
 c02f890:	f107 0134 	add.w	r1, r7, #52	; 0x34
 c02f894:	f107 0264 	add.w	r2, r7, #100	; 0x64
 c02f898:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    for (i = 0; i < out_len; i++) {
 c02f89c:	42a5      	cmp	r5, r4
 c02f89e:	f102 0208 	add.w	r2, r2, #8
 c02f8a2:	d1c9      	bne.n	c02f838 <tfm_spm_fill_msg+0xa0>
    msg->msg.handle = (psa_handle_t)msg;
 c02f8a4:	61bf      	str	r7, [r7, #24]
    if (handle != PSA_NULL_HANDLE) {
 c02f8a6:	f1b9 0f00 	cmp.w	r9, #0
 c02f8aa:	d004      	beq.n	c02f8b6 <tfm_spm_fill_msg+0x11e>
        msg->msg.rhandle = tfm_spm_get_rhandle(service, handle);
 c02f8ac:	4649      	mov	r1, r9
 c02f8ae:	4640      	mov	r0, r8
 c02f8b0:	f7ff fe62 	bl	c02f578 <tfm_spm_get_rhandle>
 c02f8b4:	6238      	str	r0, [r7, #32]
}
 c02f8b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TFM_ASSERT(in_len <= PSA_MAX_IOVEC);
 c02f8ba:	2e04      	cmp	r6, #4
 c02f8bc:	d89e      	bhi.n	c02f7fc <tfm_spm_fill_msg+0x64>
    TFM_ASSERT(in_len + out_len <= PSA_MAX_IOVEC);
 c02f8be:	1972      	adds	r2, r6, r5
 c02f8c0:	2a04      	cmp	r2, #4
 c02f8c2:	d9c5      	bls.n	c02f850 <tfm_spm_fill_msg+0xb8>
 c02f8c4:	f240 123d 	movw	r2, #317	; 0x13d
 c02f8c8:	4902      	ldr	r1, [pc, #8]	; (c02f8d4 <tfm_spm_fill_msg+0x13c>)
 c02f8ca:	4803      	ldr	r0, [pc, #12]	; (c02f8d8 <tfm_spm_fill_msg+0x140>)
 c02f8cc:	f7e5 fd9c 	bl	c015408 <iprintf>
 c02f8d0:	e7fe      	b.n	c02f8d0 <tfm_spm_fill_msg+0x138>
 c02f8d2:	bf00      	nop
 c02f8d4:	0c03559f 	.word	0x0c03559f
 c02f8d8:	0c0357d2 	.word	0x0c0357d2
 c02f8dc:	65766e74 	.word	0x65766e74
 c02f8e0:	15154343 	.word	0x15154343

0c02f8e4 <tfm_memory_check>:
}

int32_t tfm_memory_check(const void *buffer, size_t len, int32_t ns_caller,
                         enum tfm_memory_access_e access,
                         uint32_t privileged)
{
 c02f8e4:	b538      	push	{r3, r4, r5, lr}
    enum tfm_status_e err;

    /* If len is zero, this indicates an empty buffer and base is ignored */
    if (len == 0) {
 c02f8e6:	b909      	cbnz	r1, c02f8ec <tfm_memory_check+0x8>
        return IPC_SUCCESS;
 c02f8e8:	2000      	movs	r0, #0
    if (err == TFM_SUCCESS) {
        return IPC_SUCCESS;
    }

    return IPC_ERROR_MEMORY_CHECK;
}
 c02f8ea:	bd38      	pop	{r3, r4, r5, pc}
    if (!buffer) {
 c02f8ec:	b170      	cbz	r0, c02f90c <tfm_memory_check+0x28>
    if ((uintptr_t)buffer > (UINTPTR_MAX - len)) {
 c02f8ee:	43cc      	mvns	r4, r1
 c02f8f0:	42a0      	cmp	r0, r4
 c02f8f2:	d806      	bhi.n	c02f902 <tfm_memory_check+0x1e>
    if (access == TFM_MEMORY_ACCESS_RW) {
 c02f8f4:	2b02      	cmp	r3, #2
        err = tfm_core_has_write_access_to_region(buffer, len, ns_caller,
 c02f8f6:	9b04      	ldr	r3, [sp, #16]
    if (access == TFM_MEMORY_ACCESS_RW) {
 c02f8f8:	d105      	bne.n	c02f906 <tfm_memory_check+0x22>
        err = tfm_core_has_write_access_to_region(buffer, len, ns_caller,
 c02f8fa:	f001 fe41 	bl	c031580 <tfm_core_has_write_access_to_region>
    if (err == TFM_SUCCESS) {
 c02f8fe:	2800      	cmp	r0, #0
 c02f900:	d0f2      	beq.n	c02f8e8 <tfm_memory_check+0x4>
    return IPC_ERROR_MEMORY_CHECK;
 c02f902:	4804      	ldr	r0, [pc, #16]	; (c02f914 <tfm_memory_check+0x30>)
 c02f904:	e7f1      	b.n	c02f8ea <tfm_memory_check+0x6>
        err = tfm_core_has_read_access_to_region(buffer, len, ns_caller,
 c02f906:	f001 fe31 	bl	c03156c <tfm_core_has_read_access_to_region>
 c02f90a:	e7f8      	b.n	c02f8fe <tfm_memory_check+0x1a>
        return IPC_ERROR_BAD_PARAMETERS;
 c02f90c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 c02f910:	e7eb      	b.n	c02f8ea <tfm_memory_check+0x6>
 c02f912:	bf00      	nop
 c02f914:	80000003 	.word	0x80000003

0c02f918 <tfm_spm_partition_get_privileged_mode>:
    if (partition_flags & SPM_PART_FLAG_PSA_ROT) {
        return TFM_PARTITION_PRIVILEGED_MODE;
    } else {
        return TFM_PARTITION_UNPRIVILEGED_MODE;
    }
}
 c02f918:	f3c0 0040 	ubfx	r0, r0, #1, #1
 c02f91c:	4770      	bx	lr
	...

0c02f920 <tfm_spm_init>:

/********************** SPM functions for thread mode ************************/

void tfm_spm_init(void)
{
 c02f920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                  POOL_BUFFER_SIZE(conn_handle_pool),
                  sizeof(struct tfm_conn_handle_t),
                  TFM_CONN_HANDLE_MAX_NUM);

    /* Init partition first for it will be used when init service */
    for (i = 0; i < g_spm_partition_db.partition_count; i++) {
 c02f924:	4f3a      	ldr	r7, [pc, #232]	; (c02fa10 <tfm_spm_init+0xf0>)
{
 c02f926:	b097      	sub	sp, #92	; 0x5c
    tfm_pool_init(conn_handle_pool,
 c02f928:	2310      	movs	r3, #16
 c02f92a:	229c      	movs	r2, #156	; 0x9c
 c02f92c:	f44f 6129 	mov.w	r1, #2704	; 0xa90
 c02f930:	4838      	ldr	r0, [pc, #224]	; (c02fa14 <tfm_spm_init+0xf4>)
 c02f932:	f002 f9cb 	bl	c031ccc <tfm_pool_init>
    for (i = 0; i < g_spm_partition_db.partition_count; i++) {
 c02f936:	2400      	movs	r4, #0
 c02f938:	46b8      	mov	r8, r7
    pevnt->magic = TFM_EVENT_MAGIC;
 c02f93a:	f8df 90e8 	ldr.w	r9, [pc, #232]	; c02fa24 <tfm_spm_init+0x104>
 c02f93e:	687b      	ldr	r3, [r7, #4]
 c02f940:	42a3      	cmp	r3, r4
 c02f942:	d827      	bhi.n	c02f994 <tfm_spm_init+0x74>
 c02f944:	2600      	movs	r6, #0
 c02f946:	4c34      	ldr	r4, [pc, #208]	; (c02fa18 <tfm_spm_init+0xf8>)
    }

    /* Init Service */
    num = sizeof(service) / sizeof(struct tfm_spm_service_t);
    for (i = 0; i < num; i++) {
        service[i].service_db = &service_db[i];
 c02f948:	4f34      	ldr	r7, [pc, #208]	; (c02fa1c <tfm_spm_init+0xfc>)
 c02f94a:	19bb      	adds	r3, r7, r6
 c02f94c:	f844 3c08 	str.w	r3, [r4, #-8]
        partition =
 c02f950:	6858      	ldr	r0, [r3, #4]
 c02f952:	f7ff fe77 	bl	c02f644 <tfm_spm_get_partition_by_id>
            tfm_spm_get_partition_by_id(service[i].service_db->partition_id);
        if (!partition) {
 c02f956:	4605      	mov	r5, r0
 c02f958:	b908      	cbnz	r0, c02f95e <tfm_spm_init+0x3e>
            tfm_panic();
 c02f95a:	f003 f8c9 	bl	c032af0 <tfm_panic>
    head->prev = head;
 c02f95e:	e9c4 4400 	strd	r4, r4, [r4]
    head->prev->next = node;
 c02f962:	68ea      	ldr	r2, [r5, #12]
 c02f964:	f104 0314 	add.w	r3, r4, #20
 c02f968:	361c      	adds	r6, #28
        }
        service[i].partition = partition;
 c02f96a:	f844 5c04 	str.w	r5, [r4, #-4]
    for (i = 0; i < num; i++) {
 c02f96e:	f5b6 7fa8 	cmp.w	r6, #336	; 0x150
 c02f972:	6053      	str	r3, [r2, #4]
    node->prev = head->prev;
 c02f974:	6162      	str	r2, [r4, #20]
    head->prev = node;
 c02f976:	f845 3f0c 	str.w	r3, [r5, #12]!
    node->next = head;
 c02f97a:	61a5      	str	r5, [r4, #24]
 c02f97c:	f104 0424 	add.w	r4, r4, #36	; 0x24
 c02f980:	d1e3      	bne.n	c02f94a <tfm_spm_init+0x2a>
     * Let's save this context in a local variable 'this_thrd' at
     * current since there is no usage for it.
     * Also set tfm_nspm_thread_entry as pfn for this thread to
     * use in detecting NS/S thread scheduling changes.
     */
    this_thrd.pfn = (tfm_thrd_func_t)tfm_nspm_thread_entry;
 c02f982:	4b27      	ldr	r3, [pc, #156]	; (c02fa20 <tfm_spm_init+0x100>)
 c02f984:	a816      	add	r0, sp, #88	; 0x58
 c02f986:	f840 3d4c 	str.w	r3, [r0, #-76]!
    tfm_thrd_start_scheduler(&this_thrd);
 c02f98a:	f003 f85d 	bl	c032a48 <tfm_thrd_start_scheduler>
}
 c02f98e:	b017      	add	sp, #92	; 0x5c
 c02f990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c02f994:	2570      	movs	r5, #112	; 0x70
 c02f996:	4365      	muls	r5, r4
        partition = &g_spm_partition_db.partitions[i];
 c02f998:	f8d7 a008 	ldr.w	sl, [r7, #8]
 c02f99c:	eb0a 0605 	add.w	r6, sl, r5
        tfm_spm_hal_configure_default_isolation(partition->platform_data);
 c02f9a0:	6eb0      	ldr	r0, [r6, #104]	; 0x68
 c02f9a2:	f7ea f9ad 	bl	c019d00 <tfm_spm_hal_configure_default_isolation>
        if ((tfm_spm_partition_get_flags(i) & SPM_PART_FLAG_IPC) == 0) {
 c02f9a6:	4620      	mov	r0, r4
 c02f9a8:	f7ff fd88 	bl	c02f4bc <tfm_spm_partition_get_flags>
 c02f9ac:	0743      	lsls	r3, r0, #29
 c02f9ae:	d52c      	bpl.n	c02fa0a <tfm_spm_init+0xea>
    pevnt->owner = NULL;
 c02f9b0:	2300      	movs	r3, #0
    pevnt->magic = TFM_EVENT_MAGIC;
 c02f9b2:	f84a 9005 	str.w	r9, [sl, r5]
    pevnt->owner = NULL;
 c02f9b6:	6073      	str	r3, [r6, #4]
        tfm_list_init(&partition->runtime_data.service_list);
 c02f9b8:	f106 030c 	add.w	r3, r6, #12
    head->prev = head;
 c02f9bc:	e9c6 3303 	strd	r3, r3, [r6, #12]
    return &g_spm_partition_db.partitions[partition_idx].runtime_data.sp_thrd;
 c02f9c0:	68be      	ldr	r6, [r7, #8]
 c02f9c2:	442e      	add	r6, r5
        if (!pth) {
 c02f9c4:	f116 0a14 	adds.w	sl, r6, #20
 c02f9c8:	d101      	bne.n	c02f9ce <tfm_spm_init+0xae>
            tfm_panic();
 c02f9ca:	f003 f891 	bl	c032af0 <tfm_panic>
                      (uintptr_t)tfm_spm_partition_get_stack_top(i),
 c02f9ce:	4620      	mov	r0, r4
 c02f9d0:	f7ff feae 	bl	c02f730 <tfm_spm_partition_get_stack_top>
 c02f9d4:	4683      	mov	fp, r0
                      (uintptr_t)tfm_spm_partition_get_stack_bottom(i));
 c02f9d6:	4620      	mov	r0, r4
 c02f9d8:	f7ff fea0 	bl	c02f71c <tfm_spm_partition_get_stack_bottom>
    return (tfm_thrd_func_t)(g_spm_partition_db.partitions[partition_idx].
 c02f9dc:	f8d8 2008 	ldr.w	r2, [r8, #8]
        tfm_thrd_init(pth,
 c02f9e0:	465b      	mov	r3, fp
    return (tfm_thrd_func_t)(g_spm_partition_db.partitions[partition_idx].
 c02f9e2:	442a      	add	r2, r5
 c02f9e4:	6e51      	ldr	r1, [r2, #100]	; 0x64
        tfm_thrd_init(pth,
 c02f9e6:	9000      	str	r0, [sp, #0]
 c02f9e8:	2200      	movs	r2, #0
 c02f9ea:	4650      	mov	r0, sl
 c02f9ec:	68c9      	ldr	r1, [r1, #12]
 c02f9ee:	f002 ffa3 	bl	c032938 <tfm_thrd_init>
    return g_spm_partition_db.partitions[partition_idx].static_data->
 c02f9f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
        if (tfm_thrd_start(pth) != THRD_SUCCESS) {
 c02f9f6:	4650      	mov	r0, sl
    return g_spm_partition_db.partitions[partition_idx].static_data->
 c02f9f8:	441d      	add	r5, r3
 c02f9fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
        pth->prior = tfm_spm_partition_get_priority(i);
 c02f9fc:	689b      	ldr	r3, [r3, #8]
 c02f9fe:	6273      	str	r3, [r6, #36]	; 0x24
        if (tfm_thrd_start(pth) != THRD_SUCCESS) {
 c02fa00:	f002 ffc8 	bl	c032994 <tfm_thrd_start>
 c02fa04:	b108      	cbz	r0, c02fa0a <tfm_spm_init+0xea>
            tfm_panic();
 c02fa06:	f003 f873 	bl	c032af0 <tfm_panic>
    for (i = 0; i < g_spm_partition_db.partition_count; i++) {
 c02fa0a:	3401      	adds	r4, #1
 c02fa0c:	e797      	b.n	c02f93e <tfm_spm_init+0x1e>
 c02fa0e:	bf00      	nop
 c02fa10:	30035b50 	.word	0x30035b50
 c02fa14:	3003d1c4 	.word	0x3003d1c4
 c02fa18:	3003dc5c 	.word	0x3003dc5c
 c02fa1c:	0c0355c4 	.word	0x0c0355c4
 c02fa20:	0c018641 	.word	0x0c018641
 c02fa24:	65766e74 	.word	0x65766e74

0c02fa28 <tfm_pendsv_do_schedule>:

void tfm_pendsv_do_schedule(struct tfm_state_context_ext *ctxb)
{
 c02fa28:	b570      	push	{r4, r5, r6, lr}
 c02fa2a:	4606      	mov	r6, r0
#if TFM_LVL == 2
    struct spm_partition_desc_t *p_next_partition;
    struct spm_partition_runtime_data_t *r_data;
    uint32_t is_privileged;
#endif
    struct tfm_thrd_ctx *pth_next = tfm_thrd_next_thread();
 c02fa2c:	f002 ff72 	bl	c032914 <tfm_thrd_next_thread>
 c02fa30:	4604      	mov	r4, r0
    struct tfm_thrd_ctx *pth_curr = tfm_thrd_curr_thread();
 c02fa32:	f002 ff7b 	bl	c03292c <tfm_thrd_curr_thread>
 c02fa36:	4605      	mov	r5, r0

    if (pth_next != NULL && pth_curr != pth_next) {
 c02fa38:	b1f4      	cbz	r4, c02fa78 <tfm_pendsv_do_schedule+0x50>
 c02fa3a:	4284      	cmp	r4, r0
 c02fa3c:	d01c      	beq.n	c02fa78 <tfm_pendsv_do_schedule+0x50>
                                       sp_thrd);
        p_next_partition = TFM_GET_CONTAINER_PTR(r_data,
                                                 struct spm_partition_desc_t,
                                                 runtime_data);

        if (p_next_partition->static_data->partition_flags &
 c02fa3e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 c02fa40:	6858      	ldr	r0, [r3, #4]
            is_privileged = TFM_PARTITION_PRIVILEGED_MODE;
        } else {
            is_privileged = TFM_PARTITION_UNPRIVILEGED_MODE;
        }

        tfm_spm_partition_change_privilege(is_privileged);
 c02fa42:	f3c0 0040 	ubfx	r0, r0, #1, #1
 c02fa46:	f7e7 fd45 	bl	c0174d4 <tfm_spm_partition_change_privilege>
#endif
        /* Increase the secure lock, if we enter secure from non-secure */
        if ((void *)pth_curr->pfn == (void *)tfm_nspm_thread_entry) {
 c02fa4a:	682a      	ldr	r2, [r5, #0]
 c02fa4c:	4b0b      	ldr	r3, [pc, #44]	; (c02fa7c <tfm_pendsv_do_schedule+0x54>)
        /* Decrease the secure lock, if we return from secure to non-secure */
        if ((void *)pth_next->pfn == (void *)tfm_nspm_thread_entry) {
            --tfm_secure_lock;
        }

        tfm_thrd_context_switch(ctxb, pth_curr, pth_next);
 c02fa4e:	4630      	mov	r0, r6
        if ((void *)pth_curr->pfn == (void *)tfm_nspm_thread_entry) {
 c02fa50:	429a      	cmp	r2, r3
            ++tfm_secure_lock;
 c02fa52:	bf01      	itttt	eq
 c02fa54:	490a      	ldreq	r1, [pc, #40]	; (c02fa80 <tfm_pendsv_do_schedule+0x58>)
 c02fa56:	680a      	ldreq	r2, [r1, #0]
 c02fa58:	3201      	addeq	r2, #1
 c02fa5a:	600a      	streq	r2, [r1, #0]
        if ((void *)pth_next->pfn == (void *)tfm_nspm_thread_entry) {
 c02fa5c:	6822      	ldr	r2, [r4, #0]
        tfm_thrd_context_switch(ctxb, pth_curr, pth_next);
 c02fa5e:	4629      	mov	r1, r5
        if ((void *)pth_next->pfn == (void *)tfm_nspm_thread_entry) {
 c02fa60:	429a      	cmp	r2, r3
            --tfm_secure_lock;
 c02fa62:	bf01      	itttt	eq
 c02fa64:	4a06      	ldreq	r2, [pc, #24]	; (c02fa80 <tfm_pendsv_do_schedule+0x58>)
 c02fa66:	6813      	ldreq	r3, [r2, #0]
 c02fa68:	f103 33ff 	addeq.w	r3, r3, #4294967295
 c02fa6c:	6013      	streq	r3, [r2, #0]
        tfm_thrd_context_switch(ctxb, pth_curr, pth_next);
 c02fa6e:	4622      	mov	r2, r4
    }
}
 c02fa70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        tfm_thrd_context_switch(ctxb, pth_curr, pth_next);
 c02fa74:	f003 b816 	b.w	c032aa4 <tfm_thrd_context_switch>
}
 c02fa78:	bd70      	pop	{r4, r5, r6, pc}
 c02fa7a:	bf00      	nop
 c02fa7c:	0c018641 	.word	0x0c018641
 c02fa80:	3003f2ac 	.word	0x3003f2ac

0c02fa84 <sst_crypto_getkey>:
     */
    return PSA_PS_SUCCESS;
}

psa_ps_status_t sst_crypto_getkey(uint32_t key_len, uint8_t *key)
{
 c02fa84:	b508      	push	{r3, lr}
 c02fa86:	460b      	mov	r3, r1
     * be accessed by multiple clients (i.e. multiple client ID)
     *
     * To be fixed in later revisions. Currently, just use the
     * same HUK (derived) key for all the crypto operations.
     */
    err = tfm_plat_get_crypto_huk(key, key_len);
 c02fa88:	4601      	mov	r1, r0
 c02fa8a:	4618      	mov	r0, r3
 c02fa8c:	f7e7 fc66 	bl	c01735c <tfm_plat_get_crypto_huk>
    if (err != TFM_PLAT_ERR_SUCCESS) {
 c02fa90:	2800      	cmp	r0, #0
        return PSA_PS_ERROR_OPERATION_FAILED;
    }

    return PSA_PS_SUCCESS;
}
 c02fa92:	bf14      	ite	ne
 c02fa94:	200b      	movne	r0, #11
 c02fa96:	2000      	moveq	r0, #0
 c02fa98:	bd08      	pop	{r3, pc}
	...

0c02fa9c <sst_crypto_setkey>:

psa_ps_status_t sst_crypto_setkey(uint32_t key_len, const uint8_t *key)
{
 c02fa9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    psa_status_t status;
    psa_key_policy_t key_policy = PSA_KEY_POLICY_INIT;
 c02fa9e:	2300      	movs	r3, #0

    /* Allocate a transient key handle for SST */
    status = psa_allocate_key(&sst_key_handle);
 c02faa0:	4c10      	ldr	r4, [pc, #64]	; (c02fae4 <sst_crypto_setkey+0x48>)
{
 c02faa2:	4606      	mov	r6, r0
    status = psa_allocate_key(&sst_key_handle);
 c02faa4:	4620      	mov	r0, r4
{
 c02faa6:	460d      	mov	r5, r1
    psa_key_policy_t key_policy = PSA_KEY_POLICY_INIT;
 c02faa8:	e9cd 3301 	strd	r3, r3, [sp, #4]
 c02faac:	9303      	str	r3, [sp, #12]
    status = psa_allocate_key(&sst_key_handle);
 c02faae:	f7e7 fd1e 	bl	c0174ee <psa_allocate_key>
    if (status != PSA_SUCCESS) {
 c02fab2:	b110      	cbz	r0, c02faba <sst_crypto_setkey+0x1e>
        return PSA_PS_ERROR_OPERATION_FAILED;
 c02fab4:	200b      	movs	r0, #11
    if (status != PSA_SUCCESS) {
        return PSA_PS_ERROR_OPERATION_FAILED;
    }

    return PSA_PS_SUCCESS;
}
 c02fab6:	b004      	add	sp, #16
 c02fab8:	bd70      	pop	{r4, r5, r6, pc}
    psa_key_policy_set_usage(&key_policy, SST_KEY_USAGE, SST_CRYPTO_ALG);
 c02faba:	f44f 7140 	mov.w	r1, #768	; 0x300
 c02fabe:	a801      	add	r0, sp, #4
 c02fac0:	4a09      	ldr	r2, [pc, #36]	; (c02fae8 <sst_crypto_setkey+0x4c>)
 c02fac2:	f7e7 fe5d 	bl	c017780 <psa_key_policy_set_usage>
    status = psa_set_key_policy(sst_key_handle, &key_policy);
 c02fac6:	a901      	add	r1, sp, #4
 c02fac8:	8820      	ldrh	r0, [r4, #0]
 c02faca:	f7e7 fe60 	bl	c01778e <psa_set_key_policy>
    if (status != PSA_SUCCESS) {
 c02face:	2800      	cmp	r0, #0
 c02fad0:	d1f0      	bne.n	c02fab4 <sst_crypto_setkey+0x18>
    status = psa_import_key(sst_key_handle, SST_KEY_TYPE, key, key_len);
 c02fad2:	4633      	mov	r3, r6
 c02fad4:	462a      	mov	r2, r5
 c02fad6:	4905      	ldr	r1, [pc, #20]	; (c02faec <sst_crypto_setkey+0x50>)
 c02fad8:	8820      	ldrh	r0, [r4, #0]
 c02fada:	f7e7 fd38 	bl	c01754e <psa_import_key>
    if (status != PSA_SUCCESS) {
 c02fade:	2800      	cmp	r0, #0
 c02fae0:	d0e9      	beq.n	c02fab6 <sst_crypto_setkey+0x1a>
 c02fae2:	e7e7      	b.n	c02fab4 <sst_crypto_setkey+0x18>
 c02fae4:	3003de10 	.word	0x3003de10
 c02fae8:	06001002 	.word	0x06001002
 c02faec:	40000001 	.word	0x40000001

0c02faf0 <sst_crypto_destroykey>:

psa_ps_status_t sst_crypto_destroykey(void)
{
 c02faf0:	b508      	push	{r3, lr}
    psa_status_t status;

    /* Destroy the transient key */
    status = psa_destroy_key(sst_key_handle);
 c02faf2:	4b04      	ldr	r3, [pc, #16]	; (c02fb04 <sst_crypto_destroykey+0x14>)
 c02faf4:	8818      	ldrh	r0, [r3, #0]
 c02faf6:	f7e7 fd57 	bl	c0175a8 <psa_destroy_key>
    if (status != PSA_SUCCESS) {
 c02fafa:	2800      	cmp	r0, #0
        return PSA_PS_ERROR_OPERATION_FAILED;
    }

    return PSA_PS_SUCCESS;
}
 c02fafc:	bf14      	ite	ne
 c02fafe:	200b      	movne	r0, #11
 c02fb00:	2000      	moveq	r0, #0
 c02fb02:	bd08      	pop	{r3, pc}
 c02fb04:	3003de10 	.word	0x3003de10

0c02fb08 <sst_crypto_set_iv>:

void sst_crypto_set_iv(const union sst_crypto_t *crypto)
{
 c02fb08:	f850 3f10 	ldr.w	r3, [r0, #16]!
 c02fb0c:	4a03      	ldr	r2, [pc, #12]	; (c02fb1c <sst_crypto_set_iv+0x14>)
 c02fb0e:	6013      	str	r3, [r2, #0]
 c02fb10:	6843      	ldr	r3, [r0, #4]
 c02fb12:	6053      	str	r3, [r2, #4]
 c02fb14:	6883      	ldr	r3, [r0, #8]
 c02fb16:	6093      	str	r3, [r2, #8]
    (void)tfm_memcpy(sst_crypto_iv_buf, crypto->ref.iv, SST_IV_LEN_BYTES);
}
 c02fb18:	4770      	bx	lr
 c02fb1a:	bf00      	nop
 c02fb1c:	3003de04 	.word	0x3003de04

0c02fb20 <sst_crypto_get_iv>:

void sst_crypto_get_iv(union sst_crypto_t *crypto)
{
 c02fb20:	e92d 4833 	stmdb	sp!, {r0, r1, r4, r5, fp, lr}
    return (memcpy(dest, src, num));
 c02fb24:	466a      	mov	r2, sp
 c02fb26:	4b10      	ldr	r3, [pc, #64]	; (c02fb68 <sst_crypto_get_iv+0x48>)
 c02fb28:	4605      	mov	r5, r0
 c02fb2a:	6859      	ldr	r1, [r3, #4]
 c02fb2c:	6818      	ldr	r0, [r3, #0]
 c02fb2e:	689c      	ldr	r4, [r3, #8]
 c02fb30:	c203      	stmia	r2!, {r0, r1}
    uint64_t iv_l;
    uint32_t iv_h;

    (void)tfm_memcpy(&iv_l, sst_crypto_iv_buf, sizeof(iv_l));
    (void)tfm_memcpy(&iv_h, (sst_crypto_iv_buf+sizeof(iv_l)), sizeof(iv_h));
    iv_l++;
 c02fb32:	e9dd 0100 	ldrd	r0, r1, [sp]
 c02fb36:	f110 0b01 	adds.w	fp, r0, #1
 c02fb3a:	f141 0c00 	adc.w	ip, r1, #0
    /* If overflow, increment the MSBs */
    if (iv_l == 0) {
 c02fb3e:	ea5b 020c 	orrs.w	r2, fp, ip
 c02fb42:	466a      	mov	r2, sp
    iv_l++;
 c02fb44:	e9cd bc00 	strd	fp, ip, [sp]
 c02fb48:	ca03      	ldmia	r2!, {r0, r1}
 c02fb4a:	6018      	str	r0, [r3, #0]
 c02fb4c:	681a      	ldr	r2, [r3, #0]
 c02fb4e:	6059      	str	r1, [r3, #4]
 c02fb50:	612a      	str	r2, [r5, #16]
        iv_h++;
 c02fb52:	bf08      	it	eq
 c02fb54:	3401      	addeq	r4, #1
 c02fb56:	685a      	ldr	r2, [r3, #4]
 c02fb58:	609c      	str	r4, [r3, #8]
 c02fb5a:	616a      	str	r2, [r5, #20]
 c02fb5c:	689a      	ldr	r2, [r3, #8]
 c02fb5e:	61aa      	str	r2, [r5, #24]
    /* Update the local buffer */
    (void)tfm_memcpy(sst_crypto_iv_buf, &iv_l, sizeof(iv_l));
    (void)tfm_memcpy((sst_crypto_iv_buf + sizeof(iv_l)), &iv_h, sizeof(iv_h));
    /* Update the caller buffer */
    (void)tfm_memcpy(crypto->ref.iv, sst_crypto_iv_buf, SST_IV_LEN_BYTES);
}
 c02fb60:	b002      	add	sp, #8
 c02fb62:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
 c02fb66:	bf00      	nop
 c02fb68:	3003de04 	.word	0x3003de04

0c02fb6c <sst_crypto_encrypt_and_tag>:
                                           const uint8_t *in,
                                           size_t in_len,
                                           uint8_t *out,
                                           size_t out_size,
                                           size_t *out_len)
{
 c02fb6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 c02fb6e:	4605      	mov	r5, r0
 c02fb70:	b089      	sub	sp, #36	; 0x24
    psa_status_t status;

    status = psa_aead_encrypt(sst_key_handle, SST_CRYPTO_ALG,
 c02fb72:	9f10      	ldr	r7, [sp, #64]	; 0x40
{
 c02fb74:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    status = psa_aead_encrypt(sst_key_handle, SST_CRYPTO_ALG,
 c02fb76:	4811      	ldr	r0, [pc, #68]	; (c02fbbc <sst_crypto_encrypt_and_tag+0x50>)
{
 c02fb78:	9e11      	ldr	r6, [sp, #68]	; 0x44
    status = psa_aead_encrypt(sst_key_handle, SST_CRYPTO_ALG,
 c02fb7a:	8800      	ldrh	r0, [r0, #0]
 c02fb7c:	e9cd 4704 	strd	r4, r7, [sp, #16]
 c02fb80:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 c02fb82:	e9cd 1200 	strd	r1, r2, [sp]
 c02fb86:	e9cd 3702 	strd	r3, r7, [sp, #8]
 c02fb8a:	9606      	str	r6, [sp, #24]
 c02fb8c:	230c      	movs	r3, #12
 c02fb8e:	f105 0210 	add.w	r2, r5, #16
 c02fb92:	490b      	ldr	r1, [pc, #44]	; (c02fbc0 <sst_crypto_encrypt_and_tag+0x54>)
 c02fb94:	f7e8 fa12 	bl	c017fbc <psa_aead_encrypt>
                              crypto->ref.iv, SST_IV_LEN_BYTES,
                              add, add_len,
                              in, in_len,
                              out, out_size, out_len);
    if (status != PSA_SUCCESS) {
 c02fb98:	b970      	cbnz	r0, c02fbb8 <sst_crypto_encrypt_and_tag+0x4c>
        return PSA_PS_ERROR_OPERATION_FAILED;
    }

    /* Copy the tag out of the output buffer */
    *out_len -= SST_TAG_LEN_BYTES;
 c02fb9a:	6833      	ldr	r3, [r6, #0]
 c02fb9c:	3b10      	subs	r3, #16
 c02fb9e:	6033      	str	r3, [r6, #0]
    (void)tfm_memcpy(crypto->ref.tag, (out + *out_len), SST_TAG_LEN_BYTES);
 c02fba0:	4423      	add	r3, r4
 c02fba2:	f103 0210 	add.w	r2, r3, #16
 c02fba6:	f853 1b04 	ldr.w	r1, [r3], #4
 c02fbaa:	4293      	cmp	r3, r2
 c02fbac:	f845 1b04 	str.w	r1, [r5], #4
 c02fbb0:	d1f9      	bne.n	c02fba6 <sst_crypto_encrypt_and_tag+0x3a>

    return PSA_PS_SUCCESS;
 c02fbb2:	2000      	movs	r0, #0
}
 c02fbb4:	b009      	add	sp, #36	; 0x24
 c02fbb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return PSA_PS_ERROR_OPERATION_FAILED;
 c02fbb8:	200b      	movs	r0, #11
 c02fbba:	e7fb      	b.n	c02fbb4 <sst_crypto_encrypt_and_tag+0x48>
 c02fbbc:	3003de10 	.word	0x3003de10
 c02fbc0:	06001002 	.word	0x06001002

0c02fbc4 <sst_crypto_auth_and_decrypt>:
                                            uint8_t *in,
                                            size_t in_len,
                                            uint8_t *out,
                                            size_t out_size,
                                            size_t *out_len)
{
 c02fbc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 c02fbc6:	4615      	mov	r5, r2
 c02fbc8:	4602      	mov	r2, r0
 c02fbca:	b089      	sub	sp, #36	; 0x24
 c02fbcc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 c02fbce:	f102 0610 	add.w	r6, r2, #16
 c02fbd2:	1918      	adds	r0, r3, r4
 c02fbd4:	f852 7b04 	ldr.w	r7, [r2], #4
 c02fbd8:	42b2      	cmp	r2, r6
 c02fbda:	f840 7b04 	str.w	r7, [r0], #4
 c02fbde:	d1f9      	bne.n	c02fbd4 <sst_crypto_auth_and_decrypt+0x10>

    /* Copy the tag into the input buffer */
    (void)tfm_memcpy((in + in_len), crypto->ref.tag, SST_TAG_LEN_BYTES);
    in_len += SST_TAG_LEN_BYTES;

    status = psa_aead_decrypt(sst_key_handle, SST_CRYPTO_ALG,
 c02fbe0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 c02fbe2:	480b      	ldr	r0, [pc, #44]	; (c02fc10 <sst_crypto_auth_and_decrypt+0x4c>)
    in_len += SST_TAG_LEN_BYTES;
 c02fbe4:	3410      	adds	r4, #16
    status = psa_aead_decrypt(sst_key_handle, SST_CRYPTO_ALG,
 c02fbe6:	8800      	ldrh	r0, [r0, #0]
 c02fbe8:	9606      	str	r6, [sp, #24]
 c02fbea:	9e10      	ldr	r6, [sp, #64]	; 0x40
 c02fbec:	e9cd 3402 	strd	r3, r4, [sp, #8]
 c02fbf0:	9605      	str	r6, [sp, #20]
 c02fbf2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 c02fbf4:	e9cd 1500 	strd	r1, r5, [sp]
 c02fbf8:	9604      	str	r6, [sp, #16]
 c02fbfa:	230c      	movs	r3, #12
 c02fbfc:	4905      	ldr	r1, [pc, #20]	; (c02fc14 <sst_crypto_auth_and_decrypt+0x50>)
 c02fbfe:	f7e8 fa33 	bl	c018068 <psa_aead_decrypt>
                              out, out_size, out_len);
    if (status != PSA_SUCCESS) {
        return PSA_PS_ERROR_AUTH_FAILED;
    }

    return PSA_PS_SUCCESS;
 c02fc02:	2800      	cmp	r0, #0
}
 c02fc04:	bf14      	ite	ne
 c02fc06:	200a      	movne	r0, #10
 c02fc08:	2000      	moveq	r0, #0
 c02fc0a:	b009      	add	sp, #36	; 0x24
 c02fc0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 c02fc0e:	bf00      	nop
 c02fc10:	3003de10 	.word	0x3003de10
 c02fc14:	06001002 	.word	0x06001002

0c02fc18 <sst_crypto_generate_auth_tag>:

psa_ps_status_t sst_crypto_generate_auth_tag(union sst_crypto_t *crypto,
                                             const uint8_t *add,
                                             uint32_t add_len)
{
 c02fc18:	b510      	push	{r4, lr}
    psa_status_t status;
    size_t out_len;

    status = psa_aead_encrypt(sst_key_handle, SST_CRYPTO_ALG,
 c02fc1a:	4b0f      	ldr	r3, [pc, #60]	; (c02fc58 <sst_crypto_generate_auth_tag+0x40>)
{
 c02fc1c:	b08a      	sub	sp, #40	; 0x28
    status = psa_aead_encrypt(sst_key_handle, SST_CRYPTO_ALG,
 c02fc1e:	881c      	ldrh	r4, [r3, #0]
 c02fc20:	ab09      	add	r3, sp, #36	; 0x24
 c02fc22:	9306      	str	r3, [sp, #24]
 c02fc24:	2310      	movs	r3, #16
 c02fc26:	e9cd 0304 	strd	r0, r3, [sp, #16]
 c02fc2a:	2300      	movs	r3, #0
 c02fc2c:	e9cd 1200 	strd	r1, r2, [sp]
 c02fc30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 c02fc34:	f100 0210 	add.w	r2, r0, #16
 c02fc38:	230c      	movs	r3, #12
 c02fc3a:	4908      	ldr	r1, [pc, #32]	; (c02fc5c <sst_crypto_generate_auth_tag+0x44>)
 c02fc3c:	4620      	mov	r0, r4
 c02fc3e:	f7e8 f9bd 	bl	c017fbc <psa_aead_encrypt>
                              crypto->ref.iv, SST_IV_LEN_BYTES,
                              add, add_len,
                              0, 0,
                              crypto->ref.tag, SST_TAG_LEN_BYTES, &out_len);
    if (status != PSA_SUCCESS || out_len != SST_TAG_LEN_BYTES) {
 c02fc42:	b930      	cbnz	r0, c02fc52 <sst_crypto_generate_auth_tag+0x3a>
 c02fc44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c02fc46:	2b10      	cmp	r3, #16
        return PSA_PS_ERROR_OPERATION_FAILED;
    }

    return PSA_PS_SUCCESS;
 c02fc48:	bf14      	ite	ne
 c02fc4a:	200b      	movne	r0, #11
 c02fc4c:	2000      	moveq	r0, #0
}
 c02fc4e:	b00a      	add	sp, #40	; 0x28
 c02fc50:	bd10      	pop	{r4, pc}
        return PSA_PS_ERROR_OPERATION_FAILED;
 c02fc52:	200b      	movs	r0, #11
 c02fc54:	e7fb      	b.n	c02fc4e <sst_crypto_generate_auth_tag+0x36>
 c02fc56:	bf00      	nop
 c02fc58:	3003de10 	.word	0x3003de10
 c02fc5c:	06001002 	.word	0x06001002

0c02fc60 <sst_crypto_authenticate>:

psa_ps_status_t sst_crypto_authenticate(const union sst_crypto_t *crypto,
                                        const uint8_t *add,
                                        uint32_t add_len)
{
 c02fc60:	b510      	push	{r4, lr}
    psa_status_t status;
    size_t out_len;

    status = psa_aead_decrypt(sst_key_handle, SST_CRYPTO_ALG,
 c02fc62:	4b0f      	ldr	r3, [pc, #60]	; (c02fca0 <sst_crypto_authenticate+0x40>)
{
 c02fc64:	b08a      	sub	sp, #40	; 0x28
    status = psa_aead_decrypt(sst_key_handle, SST_CRYPTO_ALG,
 c02fc66:	881c      	ldrh	r4, [r3, #0]
 c02fc68:	ab09      	add	r3, sp, #36	; 0x24
 c02fc6a:	9306      	str	r3, [sp, #24]
 c02fc6c:	2300      	movs	r3, #0
 c02fc6e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 c02fc72:	2310      	movs	r3, #16
 c02fc74:	e9cd 1200 	strd	r1, r2, [sp]
 c02fc78:	e9cd 0302 	strd	r0, r3, [sp, #8]
 c02fc7c:	f100 0210 	add.w	r2, r0, #16
 c02fc80:	230c      	movs	r3, #12
 c02fc82:	4908      	ldr	r1, [pc, #32]	; (c02fca4 <sst_crypto_authenticate+0x44>)
 c02fc84:	4620      	mov	r0, r4
 c02fc86:	f7e8 f9ef 	bl	c018068 <psa_aead_decrypt>
                              crypto->ref.iv, SST_IV_LEN_BYTES,
                              add, add_len,
                              crypto->ref.tag, SST_TAG_LEN_BYTES,
                              0, 0, &out_len);
    if (status != PSA_SUCCESS || out_len != 0) {
 c02fc8a:	b930      	cbnz	r0, c02fc9a <sst_crypto_authenticate+0x3a>
 c02fc8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c02fc8e:	2b00      	cmp	r3, #0
        return PSA_PS_ERROR_AUTH_FAILED;
    }

    return PSA_PS_SUCCESS;
 c02fc90:	bf14      	ite	ne
 c02fc92:	200a      	movne	r0, #10
 c02fc94:	2000      	moveq	r0, #0
}
 c02fc96:	b00a      	add	sp, #40	; 0x28
 c02fc98:	bd10      	pop	{r4, pc}
        return PSA_PS_ERROR_AUTH_FAILED;
 c02fc9a:	200a      	movs	r0, #10
 c02fc9c:	e7fb      	b.n	c02fc96 <sst_crypto_authenticate+0x36>
 c02fc9e:	bf00      	nop
 c02fca0:	3003de10 	.word	0x3003de10
 c02fca4:	06001002 	.word	0x06001002

0c02fca8 <sst_object_set_encryption_key>:
 *        cryptographic operations.
 *
 * \return Returns error code as specified in \ref psa_ps_status_t
 */
static psa_ps_status_t sst_object_set_encryption_key(void)
{
 c02fca8:	b508      	push	{r3, lr}
     */
    __attribute__ ((aligned(4)))
    static uint8_t sst_encryption_key[SST_KEY_LEN_BYTES];

    /* Get the encryption key */
    err = sst_crypto_getkey(SST_KEY_LEN_BYTES, sst_encryption_key);
 c02fcaa:	4906      	ldr	r1, [pc, #24]	; (c02fcc4 <sst_object_set_encryption_key+0x1c>)
 c02fcac:	2010      	movs	r0, #16
 c02fcae:	f7ff fee9 	bl	c02fa84 <sst_crypto_getkey>
    if (err != PSA_PS_SUCCESS) {
 c02fcb2:	b928      	cbnz	r0, c02fcc0 <sst_object_set_encryption_key+0x18>

    /* Set the key to be used for crypto operations */
    err = sst_crypto_setkey(SST_KEY_LEN_BYTES, sst_encryption_key);

    return err;
}
 c02fcb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    err = sst_crypto_setkey(SST_KEY_LEN_BYTES, sst_encryption_key);
 c02fcb8:	4902      	ldr	r1, [pc, #8]	; (c02fcc4 <sst_object_set_encryption_key+0x1c>)
 c02fcba:	2010      	movs	r0, #16
 c02fcbc:	f7ff beee 	b.w	c02fa9c <sst_crypto_setkey>
}
 c02fcc0:	bd08      	pop	{r3, pc}
 c02fcc2:	bf00      	nop
 c02fcc4:	3003e634 	.word	0x3003e634

0c02fcc8 <sst_encrypted_object_read>:
    return sst_crypto_destroykey();
}

psa_ps_status_t sst_encrypted_object_read(uint32_t fid,
                                          struct sst_object_t *obj)
{
 c02fcc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 c02fcca:	b089      	sub	sp, #36	; 0x24
 c02fccc:	460e      	mov	r6, r1
    psa_ps_status_t err;
    struct sst_file_info_t file_info;
    uint32_t decrypt_size;

    /* Get the current size of the encrypted object */
    err = sst_flash_fs_file_get_info(fid, &file_info);
 c02fcce:	a906      	add	r1, sp, #24
{
 c02fcd0:	4607      	mov	r7, r0
    err = sst_flash_fs_file_get_info(fid, &file_info);
 c02fcd2:	f000 f95e 	bl	c02ff92 <sst_flash_fs_file_get_info>
    if (err != PSA_PS_SUCCESS) {
 c02fcd6:	4604      	mov	r4, r0
 c02fcd8:	bb50      	cbnz	r0, c02fd30 <sst_encrypted_object_read+0x68>
        return err;
    }

    /* Read the encrypted object from the the persistent area */
    err = sst_flash_fs_file_read(fid, file_info.size_current,
 c02fcda:	4602      	mov	r2, r0
 c02fcdc:	f106 0310 	add.w	r3, r6, #16
 c02fce0:	9906      	ldr	r1, [sp, #24]
 c02fce2:	4638      	mov	r0, r7
 c02fce4:	f000 fa24 	bl	c030130 <sst_flash_fs_file_read>
                                 SST_OBJECT_START_POSITION,
                                 obj->header.crypto.ref.iv);
    if (err != PSA_PS_SUCCESS) {
 c02fce8:	4604      	mov	r4, r0
 c02fcea:	bb08      	cbnz	r0, c02fd30 <sst_encrypted_object_read+0x68>
        return err;
    }

    /* Get the decrypt size */
    decrypt_size = file_info.size_current -
 c02fcec:	9d06      	ldr	r5, [sp, #24]
 c02fcee:	9704      	str	r7, [sp, #16]
    err = sst_object_set_encryption_key();
 c02fcf0:	f7ff ffda 	bl	c02fca8 <sst_object_set_encryption_key>
    if (err != PSA_PS_SUCCESS) {
 c02fcf4:	4604      	mov	r4, r0
 c02fcf6:	b9d8      	cbnz	r0, c02fd30 <sst_encrypted_object_read+0x68>
    uint8_t *p_obj_data = (uint8_t *)&obj->header.info;
 c02fcf8:	f106 041c 	add.w	r4, r6, #28
    decrypt_size = file_info.size_current -
 c02fcfc:	3d10      	subs	r5, #16
 c02fcfe:	4621      	mov	r1, r4
 c02fd00:	462a      	mov	r2, r5
 c02fd02:	480f      	ldr	r0, [pc, #60]	; (c02fd40 <sst_encrypted_object_read+0x78>)
 c02fd04:	f7e4 fe3b 	bl	c01497e <memcpy>
    err = sst_crypto_auth_and_decrypt(&obj->header.crypto,
 c02fd08:	ab05      	add	r3, sp, #20
 c02fd0a:	9303      	str	r3, [sp, #12]
 c02fd0c:	f640 030c 	movw	r3, #2060	; 0x80c
 c02fd10:	9500      	str	r5, [sp, #0]
 c02fd12:	e9cd 4301 	strd	r4, r3, [sp, #4]
 c02fd16:	2204      	movs	r2, #4
 c02fd18:	4b09      	ldr	r3, [pc, #36]	; (c02fd40 <sst_encrypted_object_read+0x78>)
 c02fd1a:	a904      	add	r1, sp, #16
 c02fd1c:	4630      	mov	r0, r6
 c02fd1e:	f7ff ff51 	bl	c02fbc4 <sst_crypto_auth_and_decrypt>
    if (err != PSA_PS_SUCCESS || out_len != cur_size) {
 c02fd22:	4604      	mov	r4, r0
 c02fd24:	b910      	cbnz	r0, c02fd2c <sst_encrypted_object_read+0x64>
 c02fd26:	9b05      	ldr	r3, [sp, #20]
 c02fd28:	429d      	cmp	r5, r3
 c02fd2a:	d004      	beq.n	c02fd36 <sst_encrypted_object_read+0x6e>
        (void)sst_crypto_destroykey();
 c02fd2c:	f7ff fee0 	bl	c02faf0 <sst_crypto_destroykey>
    if (err != PSA_PS_SUCCESS) {
        return err;
    }

    return PSA_PS_SUCCESS;
}
 c02fd30:	4620      	mov	r0, r4
 c02fd32:	b009      	add	sp, #36	; 0x24
 c02fd34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return sst_crypto_destroykey();
 c02fd36:	f7ff fedb 	bl	c02faf0 <sst_crypto_destroykey>
 c02fd3a:	4604      	mov	r4, r0
 c02fd3c:	e7f8      	b.n	c02fd30 <sst_encrypted_object_read+0x68>
 c02fd3e:	bf00      	nop
 c02fd40:	3003de12 	.word	0x3003de12

0c02fd44 <sst_encrypted_object_write>:
     */
    wrt_size +=SST_FLASH_PROGRAM_UNIT;
#endif

    /* Create an object in the object system */
    err = sst_flash_fs_file_create(fid, wrt_size, SST_EMPTY_OBJECT_SIZE, NULL);
 c02fd44:	2300      	movs	r3, #0
{
 c02fd46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c02fd4a:	460e      	mov	r6, r1
    wrt_size = GET_ALIGNED_FLASH_BYTES(wrt_size);
 c02fd4c:	6a09      	ldr	r1, [r1, #32]
{
 c02fd4e:	b087      	sub	sp, #28
    wrt_size = GET_ALIGNED_FLASH_BYTES(wrt_size);
 c02fd50:	311f      	adds	r1, #31
 c02fd52:	f021 0107 	bic.w	r1, r1, #7
    err = sst_flash_fs_file_create(fid, wrt_size, SST_EMPTY_OBJECT_SIZE, NULL);
 c02fd56:	461a      	mov	r2, r3
 c02fd58:	3108      	adds	r1, #8
{
 c02fd5a:	4607      	mov	r7, r0
    err = sst_flash_fs_file_create(fid, wrt_size, SST_EMPTY_OBJECT_SIZE, NULL);
 c02fd5c:	f000 f8bb 	bl	c02fed6 <sst_flash_fs_file_create>
    if (err != PSA_PS_SUCCESS) {
 c02fd60:	4604      	mov	r4, r0
 c02fd62:	bb68      	cbnz	r0, c02fdc0 <sst_encrypted_object_write+0x7c>
        return err;
    }

    wrt_size = GET_ALIGNED_FLASH_BYTES(
 c02fd64:	69f5      	ldr	r5, [r6, #28]
 c02fd66:	9704      	str	r7, [sp, #16]
    err = sst_object_set_encryption_key();
 c02fd68:	f7ff ff9e 	bl	c02fca8 <sst_object_set_encryption_key>
    if (err != PSA_PS_SUCCESS) {
 c02fd6c:	4604      	mov	r4, r0
 c02fd6e:	bb38      	cbnz	r0, c02fdc0 <sst_encrypted_object_write+0x7c>
    sst_crypto_get_iv(&obj->header.crypto);
 c02fd70:	4630      	mov	r0, r6
 c02fd72:	f7ff fed5 	bl	c02fb20 <sst_crypto_get_iv>
    err = sst_crypto_encrypt_and_tag(&obj->header.crypto,
 c02fd76:	ab05      	add	r3, sp, #20
 c02fd78:	9303      	str	r3, [sp, #12]
 c02fd7a:	f44f 6302 	mov.w	r3, #2080	; 0x820
    wrt_size = GET_ALIGNED_FLASH_BYTES(
 c02fd7e:	3513      	adds	r5, #19
    err = sst_crypto_encrypt_and_tag(&obj->header.crypto,
 c02fd80:	f8df 9058 	ldr.w	r9, [pc, #88]	; c02fddc <sst_encrypted_object_write+0x98>
    wrt_size = GET_ALIGNED_FLASH_BYTES(
 c02fd84:	f025 0507 	bic.w	r5, r5, #7
    uint8_t *p_obj_data = (uint8_t *)&obj->header.info;
 c02fd88:	f106 081c 	add.w	r8, r6, #28
    err = sst_crypto_encrypt_and_tag(&obj->header.crypto,
 c02fd8c:	9302      	str	r3, [sp, #8]
 c02fd8e:	e9cd 5900 	strd	r5, r9, [sp]
 c02fd92:	4643      	mov	r3, r8
 c02fd94:	2204      	movs	r2, #4
 c02fd96:	a904      	add	r1, sp, #16
 c02fd98:	4630      	mov	r0, r6
 c02fd9a:	f7ff fee7 	bl	c02fb6c <sst_crypto_encrypt_and_tag>
    if (err != PSA_PS_SUCCESS || out_len != cur_size) {
 c02fd9e:	4604      	mov	r4, r0
 c02fda0:	b910      	cbnz	r0, c02fda8 <sst_encrypted_object_write+0x64>
 c02fda2:	9b05      	ldr	r3, [sp, #20]
 c02fda4:	429d      	cmp	r5, r3
 c02fda6:	d00f      	beq.n	c02fdc8 <sst_encrypted_object_write+0x84>
        (void)sst_crypto_destroykey();
 c02fda8:	f7ff fea2 	bl	c02faf0 <sst_crypto_destroykey>
                               SST_ENCRYPT_SIZE(obj->header.info.current_size));

    /* Authenticate and encrypt the object */
    err = sst_object_auth_encrypt(fid, wrt_size, obj);
    if (err != PSA_PS_SUCCESS) {
 c02fdac:	b944      	cbnz	r4, c02fdc0 <sst_encrypted_object_write+0x7c>
    wrt_size = GET_ALIGNED_FLASH_BYTES(wrt_size);

    /* Write the encrypted object to the persistent area. The tag values is not
     * copied as it is stored in the object table.
     */
    err = sst_flash_fs_file_write(fid, wrt_size, SST_OBJECT_START_POSITION,
 c02fdae:	4622      	mov	r2, r4
 c02fdb0:	f106 0310 	add.w	r3, r6, #16
 c02fdb4:	f105 0110 	add.w	r1, r5, #16
 c02fdb8:	4638      	mov	r0, r7
 c02fdba:	f000 f903 	bl	c02ffc4 <sst_flash_fs_file_write>
 c02fdbe:	4604      	mov	r4, r0
                                  obj->header.crypto.ref.iv);

    return err;
}
 c02fdc0:	4620      	mov	r0, r4
 c02fdc2:	b007      	add	sp, #28
 c02fdc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 c02fdc8:	462a      	mov	r2, r5
 c02fdca:	4649      	mov	r1, r9
 c02fdcc:	4640      	mov	r0, r8
 c02fdce:	f7e4 fdd6 	bl	c01497e <memcpy>
    return sst_crypto_destroykey();
 c02fdd2:	f7ff fe8d 	bl	c02faf0 <sst_crypto_destroykey>
 c02fdd6:	4604      	mov	r4, r0
 c02fdd8:	e7e8      	b.n	c02fdac <sst_encrypted_object_write+0x68>
 c02fdda:	bf00      	nop
 c02fddc:	3003de12 	.word	0x3003de12

0c02fde0 <sst_flash_init>:
    return PSA_PS_SUCCESS;
}
#endif /* SST_RAM_FS */

psa_ps_status_t sst_flash_init(void)
{
 c02fde0:	b508      	push	{r3, lr}
    err = SST_FLASH_DEV_NAME.Initialize(NULL);
 c02fde2:	4b04      	ldr	r3, [pc, #16]	; (c02fdf4 <sst_flash_init+0x14>)
 c02fde4:	2000      	movs	r0, #0
 c02fde6:	689b      	ldr	r3, [r3, #8]
 c02fde8:	4798      	blx	r3
    if (err != ARM_DRIVER_OK) {
 c02fdea:	2800      	cmp	r0, #0
    return flash_init();
}
 c02fdec:	bf14      	ite	ne
 c02fdee:	2004      	movne	r0, #4
 c02fdf0:	2000      	moveq	r0, #0
 c02fdf2:	bd08      	pop	{r3, pc}
 c02fdf4:	0c032ca4 	.word	0x0c032ca4

0c02fdf8 <sst_flash_read>:

psa_ps_status_t sst_flash_read(uint32_t block_id, uint8_t *buff,
                               uint32_t offset, uint32_t size)
{
 c02fdf8:	b510      	push	{r4, lr}
    err = SST_FLASH_DEV_NAME.ReadData(flash_addr, buff, size);
 c02fdfa:	4c06      	ldr	r4, [pc, #24]	; (c02fe14 <sst_flash_read+0x1c>)
    return (SST_FLASH_AREA_ADDR + (block_id * SST_BLOCK_SIZE) + offset);
 c02fdfc:	3010      	adds	r0, #16
 c02fdfe:	eb02 3000 	add.w	r0, r2, r0, lsl #12
    err = SST_FLASH_DEV_NAME.ReadData(flash_addr, buff, size);
 c02fe02:	461a      	mov	r2, r3
 c02fe04:	6963      	ldr	r3, [r4, #20]
 c02fe06:	4798      	blx	r3
    if (err != ARM_DRIVER_OK) {
 c02fe08:	2800      	cmp	r0, #0
     * parameters.
     */
    flash_addr = get_phys_address(block_id, offset);

    return flash_read(flash_addr, size, buff);
}
 c02fe0a:	bf14      	ite	ne
 c02fe0c:	2004      	movne	r0, #4
 c02fe0e:	2000      	moveq	r0, #0
 c02fe10:	bd10      	pop	{r4, pc}
 c02fe12:	bf00      	nop
 c02fe14:	0c032ca4 	.word	0x0c032ca4

0c02fe18 <sst_flash_write>:

psa_ps_status_t sst_flash_write(uint32_t block_id, const uint8_t *buff,
                                uint32_t offset, uint32_t size)
{
 c02fe18:	b510      	push	{r4, lr}
    err = SST_FLASH_DEV_NAME.ProgramData(flash_addr, buff, size);
 c02fe1a:	4c06      	ldr	r4, [pc, #24]	; (c02fe34 <sst_flash_write+0x1c>)
    return (SST_FLASH_AREA_ADDR + (block_id * SST_BLOCK_SIZE) + offset);
 c02fe1c:	3010      	adds	r0, #16
 c02fe1e:	eb02 3000 	add.w	r0, r2, r0, lsl #12
    err = SST_FLASH_DEV_NAME.ProgramData(flash_addr, buff, size);
 c02fe22:	461a      	mov	r2, r3
 c02fe24:	69a3      	ldr	r3, [r4, #24]
 c02fe26:	4798      	blx	r3
    if (err != ARM_DRIVER_OK) {
 c02fe28:	2800      	cmp	r0, #0
     * parameters.
     */
    flash_addr = get_phys_address(block_id, offset);

    return flash_write(flash_addr, size, buff);
}
 c02fe2a:	bf14      	ite	ne
 c02fe2c:	2004      	movne	r0, #4
 c02fe2e:	2000      	moveq	r0, #0
 c02fe30:	bd10      	pop	{r4, pc}
 c02fe32:	bf00      	nop
 c02fe34:	0c032ca4 	.word	0x0c032ca4

0c02fe38 <sst_flash_block_to_block_move>:
psa_ps_status_t sst_flash_block_to_block_move(uint32_t dst_block,
                                              uint32_t dst_offset,
                                              uint32_t src_block,
                                              uint32_t src_offset,
                                              uint32_t size)
{
 c02fe38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    psa_ps_status_t err;
    uint8_t dst_block_data_copy[MAX_BLOCK_DATA_COPY];
    uint32_t dst_flash_addr;
    uint32_t src_flash_addr;
    uint32_t nbr_bytes_moved = 0;
 c02fe3c:	f04f 0800 	mov.w	r8, #0
{
 c02fe40:	b0c1      	sub	sp, #260	; 0x104
    return (SST_FLASH_AREA_ADDR + (block_id * SST_BLOCK_SIZE) + offset);
 c02fe42:	3210      	adds	r2, #16
 c02fe44:	3010      	adds	r0, #16
{
 c02fe46:	9f48      	ldr	r7, [sp, #288]	; 0x120
    err = SST_FLASH_DEV_NAME.ReadData(flash_addr, buff, size);
 c02fe48:	f8df 904c 	ldr.w	r9, [pc, #76]	; c02fe98 <sst_flash_block_to_block_move+0x60>
    return (SST_FLASH_AREA_ADDR + (block_id * SST_BLOCK_SIZE) + offset);
 c02fe4c:	eb03 3602 	add.w	r6, r3, r2, lsl #12
 c02fe50:	eb01 3500 	add.w	r5, r1, r0, lsl #12

    /* Gets flash addresses defined by block ID and offset parameters */
    src_flash_addr = get_phys_address(src_block, src_offset);
    dst_flash_addr = get_phys_address(dst_block, dst_offset);

    while (nbr_bytes_moved <  size) {
 c02fe54:	45b8      	cmp	r8, r7
 c02fe56:	d301      	bcc.n	c02fe5c <sst_flash_block_to_block_move+0x24>
        /* Updates pointers to the source and destination flash regions */
        src_flash_addr += bytes_to_move;
        dst_flash_addr += bytes_to_move;
    };

    return PSA_PS_SUCCESS;
 c02fe58:	2000      	movs	r0, #0
 c02fe5a:	e00e      	b.n	c02fe7a <sst_flash_block_to_block_move+0x42>
        bytes_to_move = (size - nbr_bytes_moved);
 c02fe5c:	eba7 0408 	sub.w	r4, r7, r8
 c02fe60:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 c02fe64:	bf28      	it	cs
 c02fe66:	f44f 7480 	movcs.w	r4, #256	; 0x100
    err = SST_FLASH_DEV_NAME.ReadData(flash_addr, buff, size);
 c02fe6a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 c02fe6e:	4622      	mov	r2, r4
 c02fe70:	4669      	mov	r1, sp
 c02fe72:	4630      	mov	r0, r6
 c02fe74:	4798      	blx	r3
    if (err != ARM_DRIVER_OK) {
 c02fe76:	b118      	cbz	r0, c02fe80 <sst_flash_block_to_block_move+0x48>
        return PSA_PS_ERROR_STORAGE_FAILURE;
 c02fe78:	2004      	movs	r0, #4
}
 c02fe7a:	b041      	add	sp, #260	; 0x104
 c02fe7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    err = SST_FLASH_DEV_NAME.ProgramData(flash_addr, buff, size);
 c02fe80:	f8d9 3018 	ldr.w	r3, [r9, #24]
 c02fe84:	4622      	mov	r2, r4
 c02fe86:	4669      	mov	r1, sp
 c02fe88:	4628      	mov	r0, r5
 c02fe8a:	4798      	blx	r3
    if (err != ARM_DRIVER_OK) {
 c02fe8c:	2800      	cmp	r0, #0
 c02fe8e:	d1f3      	bne.n	c02fe78 <sst_flash_block_to_block_move+0x40>
        nbr_bytes_moved += bytes_to_move;
 c02fe90:	44a0      	add	r8, r4
        src_flash_addr += bytes_to_move;
 c02fe92:	4426      	add	r6, r4
        dst_flash_addr += bytes_to_move;
 c02fe94:	4425      	add	r5, r4
 c02fe96:	e7dd      	b.n	c02fe54 <sst_flash_block_to_block_move+0x1c>
 c02fe98:	0c032ca4 	.word	0x0c032ca4

0c02fe9c <sst_flash_erase_block>:

psa_ps_status_t sst_flash_erase_block(uint32_t block_id)
{
 c02fe9c:	b508      	push	{r3, lr}
    err = SST_FLASH_DEV_NAME.EraseSector(flash_addr);
 c02fe9e:	4b05      	ldr	r3, [pc, #20]	; (c02feb4 <sst_flash_erase_block+0x18>)
    return (SST_FLASH_AREA_ADDR + (block_id * SST_BLOCK_SIZE) + offset);
 c02fea0:	3010      	adds	r0, #16
    err = SST_FLASH_DEV_NAME.EraseSector(flash_addr);
 c02fea2:	69db      	ldr	r3, [r3, #28]
 c02fea4:	0300      	lsls	r0, r0, #12
 c02fea6:	4798      	blx	r3
    if (err != ARM_DRIVER_OK) {
 c02fea8:	2800      	cmp	r0, #0
     * BLOCK_START_OFFSET parameters.
     */
    flash_addr = get_phys_address(block_id, BLOCK_START_OFFSET);

    return flash_erase(flash_addr);
}
 c02feaa:	bf14      	ite	ne
 c02feac:	2004      	movne	r0, #4
 c02feae:	2000      	moveq	r0, #0
 c02feb0:	bd08      	pop	{r3, pc}
 c02feb2:	bf00      	nop
 c02feb4:	0c032ca4 	.word	0x0c032ca4

0c02feb8 <sst_flash_fs_prepare>:
}

psa_ps_status_t sst_flash_fs_prepare(void)
{
    /* Initialize metadata block with the valid/active metablock */
    return sst_flash_fs_mblock_init();
 c02feb8:	f000 ba70 	b.w	c03039c <sst_flash_fs_mblock_init>

0c02febc <sst_flash_fs_wipe_all>:
}

psa_ps_status_t sst_flash_fs_wipe_all(void)
{
    /* Clean and initialize the metadata block */
    return sst_flash_fs_mblock_reset_metablock();
 c02febc:	f000 bb20 	b.w	c030500 <sst_flash_fs_mblock_reset_metablock>

0c02fec0 <sst_flash_fs_file_exist>:
}

psa_ps_status_t sst_flash_fs_file_exist(uint32_t fid)
{
 c02fec0:	b507      	push	{r0, r1, r2, lr}
    psa_ps_status_t err;
    uint32_t idx;

    err = sst_flash_fs_mblock_get_file_idx(fid, &idx);
 c02fec2:	a901      	add	r1, sp, #4
 c02fec4:	f000 faa4 	bl	c030410 <sst_flash_fs_mblock_get_file_idx>
    if (err != PSA_PS_SUCCESS) {
        return PSA_PS_ERROR_UID_NOT_FOUND;
    }

    return PSA_PS_SUCCESS;
}
 c02fec8:	2800      	cmp	r0, #0
 c02feca:	bf14      	ite	ne
 c02fecc:	2005      	movne	r0, #5
 c02fece:	2000      	moveq	r0, #0
 c02fed0:	b003      	add	sp, #12
 c02fed2:	f85d fb04 	ldr.w	pc, [sp], #4

0c02fed6 <sst_flash_fs_file_create>:

psa_ps_status_t sst_flash_fs_file_create(uint32_t fid,
                                         uint32_t max_size,
                                         uint32_t data_size,
                                         const uint8_t *data)
{
 c02fed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c02feda:	b08e      	sub	sp, #56	; 0x38
 c02fedc:	460e      	mov	r6, r1
    psa_ps_status_t err;
    uint32_t idx;
    struct sst_file_meta_t file_meta;

    /* Check if file already exists */
    err = sst_flash_fs_mblock_get_file_idx(fid, &idx);
 c02fede:	a903      	add	r1, sp, #12
{
 c02fee0:	4680      	mov	r8, r0
 c02fee2:	4614      	mov	r4, r2
 c02fee4:	461f      	mov	r7, r3
    err = sst_flash_fs_mblock_get_file_idx(fid, &idx);
 c02fee6:	f000 fa93 	bl	c030410 <sst_flash_fs_mblock_get_file_idx>
    if (err == PSA_PS_SUCCESS) {
 c02feea:	b918      	cbnz	r0, c02fef4 <sst_flash_fs_file_create+0x1e>
        /* If it exits return an error as needs to be removed first */
        return PSA_PS_ERROR_INVALID_ARGUMENT;
 c02feec:	2008      	movs	r0, #8

    /* Write metadata header, swap metadata blocks and erase scratch blocks */
    err = sst_flash_fs_mblock_meta_update_finalize();

    return err;
}
 c02feee:	b00e      	add	sp, #56	; 0x38
 c02fef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (GET_ALIGNED_FLASH_BYTES(max_size) != max_size) {
 c02fef4:	1df5      	adds	r5, r6, #7
 c02fef6:	f025 0507 	bic.w	r5, r5, #7
 c02fefa:	42b5      	cmp	r5, r6
 c02fefc:	d1f6      	bne.n	c02feec <sst_flash_fs_file_create+0x16>
    err = sst_flash_fs_mblock_reserve_file(fid, max_size, &idx,
 c02fefe:	ae04      	add	r6, sp, #16
 c02ff00:	9600      	str	r6, [sp, #0]
 c02ff02:	ab08      	add	r3, sp, #32
 c02ff04:	aa03      	add	r2, sp, #12
 c02ff06:	4629      	mov	r1, r5
 c02ff08:	4640      	mov	r0, r8
 c02ff0a:	f000 fabd 	bl	c030488 <sst_flash_fs_mblock_reserve_file>
    if (err != PSA_PS_SUCCESS) {
 c02ff0e:	2800      	cmp	r0, #0
 c02ff10:	d1ed      	bne.n	c02feee <sst_flash_fs_file_create+0x18>
    if (data_size != 0) {
 c02ff12:	b314      	cbz	r4, c02ff5a <sst_flash_fs_file_create+0x84>
        if ((data_size > max_size) || (data == NULL)) {
 c02ff14:	42a5      	cmp	r5, r4
 c02ff16:	d3e9      	bcc.n	c02feec <sst_flash_fs_file_create+0x16>
 c02ff18:	2f00      	cmp	r7, #0
 c02ff1a:	d0e7      	beq.n	c02feec <sst_flash_fs_file_create+0x16>
    if (GET_ALIGNED_FLASH_BYTES(size) != size) {
 c02ff1c:	1de3      	adds	r3, r4, #7
 c02ff1e:	f023 0307 	bic.w	r3, r3, #7
 c02ff22:	429c      	cmp	r4, r3
 c02ff24:	d001      	beq.n	c02ff2a <sst_flash_fs_file_create+0x54>
            return PSA_PS_ERROR_OPERATION_FAILED;
 c02ff26:	200b      	movs	r0, #11
 c02ff28:	e7e1      	b.n	c02feee <sst_flash_fs_file_create+0x18>
    err = sst_flash_fs_dblock_write_file(file_meta->lblock, f_offset,
 c02ff2a:	463b      	mov	r3, r7
 c02ff2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 c02ff30:	4622      	mov	r2, r4
 c02ff32:	f000 f97f 	bl	c030234 <sst_flash_fs_dblock_write_file>
        if (err != PSA_PS_SUCCESS) {
 c02ff36:	2800      	cmp	r0, #0
 c02ff38:	d1f5      	bne.n	c02ff26 <sst_flash_fs_file_create+0x50>
        err = sst_flash_fs_dblock_cp_remaining_data(&block_meta, &file_meta);
 c02ff3a:	a908      	add	r1, sp, #32
 c02ff3c:	4630      	mov	r0, r6
        file_meta.cur_size = data_size;
 c02ff3e:	940a      	str	r4, [sp, #40]	; 0x28
        err = sst_flash_fs_dblock_cp_remaining_data(&block_meta, &file_meta);
 c02ff40:	f000 f985 	bl	c03024e <sst_flash_fs_dblock_cp_remaining_data>
        if (err != PSA_PS_SUCCESS) {
 c02ff44:	2800      	cmp	r0, #0
 c02ff46:	d1ee      	bne.n	c02ff26 <sst_flash_fs_file_create+0x50>
        block_meta.phy_id = sst_flash_fs_mblock_cur_data_scratch_id(
 c02ff48:	9808      	ldr	r0, [sp, #32]
        cur_phys_block = block_meta.phy_id;
 c02ff4a:	9d04      	ldr	r5, [sp, #16]
        block_meta.phy_id = sst_flash_fs_mblock_cur_data_scratch_id(
 c02ff4c:	f000 fa1e 	bl	c03038c <sst_flash_fs_mblock_cur_data_scratch_id>
        sst_flash_fs_mblock_set_data_scratch(cur_phys_block, file_meta.lblock);
 c02ff50:	9908      	ldr	r1, [sp, #32]
        block_meta.phy_id = sst_flash_fs_mblock_cur_data_scratch_id(
 c02ff52:	9004      	str	r0, [sp, #16]
        sst_flash_fs_mblock_set_data_scratch(cur_phys_block, file_meta.lblock);
 c02ff54:	4628      	mov	r0, r5
 c02ff56:	f000 fb1f 	bl	c030598 <sst_flash_fs_mblock_set_data_scratch>
    err = sst_flash_fs_mblock_update_scratch_block_meta(file_meta.lblock,
 c02ff5a:	4631      	mov	r1, r6
 c02ff5c:	9808      	ldr	r0, [sp, #32]
 c02ff5e:	f000 fb21 	bl	c0305a4 <sst_flash_fs_mblock_update_scratch_block_meta>
    if (err != PSA_PS_SUCCESS) {
 c02ff62:	2800      	cmp	r0, #0
 c02ff64:	d1df      	bne.n	c02ff26 <sst_flash_fs_file_create+0x50>
    err = sst_flash_fs_mblock_update_scratch_file_meta(idx, &file_meta);
 c02ff66:	a908      	add	r1, sp, #32
 c02ff68:	9803      	ldr	r0, [sp, #12]
 c02ff6a:	f000 fb5b 	bl	c030624 <sst_flash_fs_mblock_update_scratch_file_meta>
    if (err != PSA_PS_SUCCESS) {
 c02ff6e:	2800      	cmp	r0, #0
 c02ff70:	d1d9      	bne.n	c02ff26 <sst_flash_fs_file_create+0x50>
    err = sst_flash_fs_mblock_cp_remaining_file_meta(idx);
 c02ff72:	9803      	ldr	r0, [sp, #12]
 c02ff74:	f000 f9ea 	bl	c03034c <sst_flash_fs_mblock_cp_remaining_file_meta>
    if (err != PSA_PS_SUCCESS) {
 c02ff78:	2800      	cmp	r0, #0
 c02ff7a:	d1d4      	bne.n	c02ff26 <sst_flash_fs_file_create+0x50>
    if ((file_meta.lblock != SST_LOGICAL_DBLOCK0) || (data_size == 0)) {
 c02ff7c:	9b08      	ldr	r3, [sp, #32]
 c02ff7e:	b91b      	cbnz	r3, c02ff88 <sst_flash_fs_file_create+0xb2>
 c02ff80:	b114      	cbz	r4, c02ff88 <sst_flash_fs_file_create+0xb2>
    err = sst_flash_fs_mblock_meta_update_finalize();
 c02ff82:	f000 fa2b 	bl	c0303dc <sst_flash_fs_mblock_meta_update_finalize>
    return err;
 c02ff86:	e7b2      	b.n	c02feee <sst_flash_fs_file_create+0x18>
        err = sst_flash_fs_mblock_migrate_lb0_data_to_scratch();
 c02ff88:	f000 fa64 	bl	c030454 <sst_flash_fs_mblock_migrate_lb0_data_to_scratch>
        if (err != PSA_PS_SUCCESS) {
 c02ff8c:	2800      	cmp	r0, #0
 c02ff8e:	d0f8      	beq.n	c02ff82 <sst_flash_fs_file_create+0xac>
 c02ff90:	e7c9      	b.n	c02ff26 <sst_flash_fs_file_create+0x50>

0c02ff92 <sst_flash_fs_file_get_info>:

psa_ps_status_t sst_flash_fs_file_get_info(uint32_t fid,
                                           struct sst_file_info_t *info)
{
 c02ff92:	b530      	push	{r4, r5, lr}
 c02ff94:	b089      	sub	sp, #36	; 0x24
 c02ff96:	460c      	mov	r4, r1
    psa_ps_status_t err;
    uint32_t idx;
    struct sst_file_meta_t tmp_metadata;

    /* Get the meta data index */
    err = sst_flash_fs_mblock_get_file_idx(fid, &idx);
 c02ff98:	a901      	add	r1, sp, #4
{
 c02ff9a:	4605      	mov	r5, r0
    err = sst_flash_fs_mblock_get_file_idx(fid, &idx);
 c02ff9c:	f000 fa38 	bl	c030410 <sst_flash_fs_mblock_get_file_idx>
    if (err != PSA_PS_SUCCESS) {
 c02ffa0:	b110      	cbz	r0, c02ffa8 <sst_flash_fs_file_get_info+0x16>
        return PSA_PS_ERROR_UID_NOT_FOUND;
 c02ffa2:	2005      	movs	r0, #5

    info->size_max = tmp_metadata.max_size;
    info->size_current = tmp_metadata.cur_size;

    return PSA_PS_SUCCESS;
}
 c02ffa4:	b009      	add	sp, #36	; 0x24
 c02ffa6:	bd30      	pop	{r4, r5, pc}
    err = sst_flash_fs_mblock_read_file_meta(idx, &tmp_metadata);
 c02ffa8:	a902      	add	r1, sp, #8
 c02ffaa:	9801      	ldr	r0, [sp, #4]
 c02ffac:	f000 fa26 	bl	c0303fc <sst_flash_fs_mblock_read_file_meta>
    if (err != PSA_PS_SUCCESS) {
 c02ffb0:	2800      	cmp	r0, #0
 c02ffb2:	d1f7      	bne.n	c02ffa4 <sst_flash_fs_file_get_info+0x12>
    if (fid != tmp_metadata.id) {
 c02ffb4:	9b06      	ldr	r3, [sp, #24]
 c02ffb6:	42ab      	cmp	r3, r5
 c02ffb8:	d1f3      	bne.n	c02ffa2 <sst_flash_fs_file_get_info+0x10>
    info->size_max = tmp_metadata.max_size;
 c02ffba:	9b05      	ldr	r3, [sp, #20]
 c02ffbc:	6063      	str	r3, [r4, #4]
    info->size_current = tmp_metadata.cur_size;
 c02ffbe:	9b04      	ldr	r3, [sp, #16]
 c02ffc0:	6023      	str	r3, [r4, #0]
    return PSA_PS_SUCCESS;
 c02ffc2:	e7ef      	b.n	c02ffa4 <sst_flash_fs_file_get_info+0x12>

0c02ffc4 <sst_flash_fs_file_write>:

psa_ps_status_t sst_flash_fs_file_write(uint32_t fid, uint32_t size,
                                        uint32_t offset, const uint8_t *data)
{
 c02ffc4:	b570      	push	{r4, r5, r6, lr}
 c02ffc6:	b08c      	sub	sp, #48	; 0x30
 c02ffc8:	460c      	mov	r4, r1
    psa_ps_status_t err;
    uint32_t idx;
    struct sst_file_meta_t file_meta;

    /* Get the file index */
    err = sst_flash_fs_mblock_get_file_idx(fid, &idx);
 c02ffca:	a901      	add	r1, sp, #4
{
 c02ffcc:	4615      	mov	r5, r2
 c02ffce:	461e      	mov	r6, r3
    err = sst_flash_fs_mblock_get_file_idx(fid, &idx);
 c02ffd0:	f000 fa1e 	bl	c030410 <sst_flash_fs_mblock_get_file_idx>
    if (err != PSA_PS_SUCCESS) {
 c02ffd4:	b110      	cbz	r0, c02ffdc <sst_flash_fs_file_write+0x18>
        return PSA_PS_ERROR_UID_NOT_FOUND;
 c02ffd6:	2005      	movs	r0, #5
     * erase scratch blocks.
     */
    err = sst_flash_fs_mblock_meta_update_finalize();

    return err;
}
 c02ffd8:	b00c      	add	sp, #48	; 0x30
 c02ffda:	bd70      	pop	{r4, r5, r6, pc}
    err = sst_flash_fs_mblock_read_file_meta(idx, &file_meta);
 c02ffdc:	a906      	add	r1, sp, #24
 c02ffde:	9801      	ldr	r0, [sp, #4]
 c02ffe0:	f000 fa0c 	bl	c0303fc <sst_flash_fs_mblock_read_file_meta>
    if (err != PSA_PS_SUCCESS) {
 c02ffe4:	2800      	cmp	r0, #0
 c02ffe6:	d1f6      	bne.n	c02ffd6 <sst_flash_fs_file_write+0x12>
    err = sst_flash_fs_mblock_read_block_metadata(file_meta.lblock,
 c02ffe8:	a902      	add	r1, sp, #8
 c02ffea:	9806      	ldr	r0, [sp, #24]
 c02ffec:	f000 fa28 	bl	c030440 <sst_flash_fs_mblock_read_block_metadata>
    if (err != PSA_PS_SUCCESS) {
 c02fff0:	b108      	cbz	r0, c02fff6 <sst_flash_fs_file_write+0x32>
        return PSA_PS_ERROR_OPERATION_FAILED;
 c02fff2:	200b      	movs	r0, #11
 c02fff4:	e7f0      	b.n	c02ffd8 <sst_flash_fs_file_write+0x14>
    if (GET_ALIGNED_FLASH_BYTES(offset) != offset) {
 c02fff6:	1deb      	adds	r3, r5, #7
 c02fff8:	f023 0307 	bic.w	r3, r3, #7
 c02fffc:	429d      	cmp	r5, r3
 c02fffe:	d1f8      	bne.n	c02fff2 <sst_flash_fs_file_write+0x2e>
    if (GET_ALIGNED_FLASH_BYTES(size) != size) {
 c030000:	1de3      	adds	r3, r4, #7
 c030002:	f023 0307 	bic.w	r3, r3, #7
 c030006:	429c      	cmp	r4, r3
 c030008:	d1f3      	bne.n	c02fff2 <sst_flash_fs_file_write+0x2e>
    err = sst_flash_fs_dblock_write_file(file_meta->lblock, f_offset,
 c03000a:	9907      	ldr	r1, [sp, #28]
 c03000c:	4633      	mov	r3, r6
 c03000e:	4622      	mov	r2, r4
 c030010:	4429      	add	r1, r5
 c030012:	9806      	ldr	r0, [sp, #24]
 c030014:	f000 f90e 	bl	c030234 <sst_flash_fs_dblock_write_file>
    if (err != PSA_PS_SUCCESS) {
 c030018:	2800      	cmp	r0, #0
 c03001a:	d1ea      	bne.n	c02fff2 <sst_flash_fs_file_write+0x2e>
    if (size > file_meta.cur_size) {
 c03001c:	9b08      	ldr	r3, [sp, #32]
    err = sst_flash_fs_dblock_cp_remaining_data(&block_meta, &file_meta);
 c03001e:	a906      	add	r1, sp, #24
    if (size > file_meta.cur_size) {
 c030020:	42a3      	cmp	r3, r4
    err = sst_flash_fs_dblock_cp_remaining_data(&block_meta, &file_meta);
 c030022:	a802      	add	r0, sp, #8
        file_meta.cur_size = size;
 c030024:	bf38      	it	cc
 c030026:	9408      	strcc	r4, [sp, #32]
    err = sst_flash_fs_dblock_cp_remaining_data(&block_meta, &file_meta);
 c030028:	f000 f911 	bl	c03024e <sst_flash_fs_dblock_cp_remaining_data>
    if (err != PSA_PS_SUCCESS) {
 c03002c:	2800      	cmp	r0, #0
 c03002e:	d1e0      	bne.n	c02fff2 <sst_flash_fs_file_write+0x2e>
    block_meta.phy_id = sst_flash_fs_mblock_cur_data_scratch_id(
 c030030:	9806      	ldr	r0, [sp, #24]
    cur_phys_block = block_meta.phy_id;
 c030032:	9c02      	ldr	r4, [sp, #8]
    block_meta.phy_id = sst_flash_fs_mblock_cur_data_scratch_id(
 c030034:	f000 f9aa 	bl	c03038c <sst_flash_fs_mblock_cur_data_scratch_id>
    sst_flash_fs_mblock_set_data_scratch(cur_phys_block, file_meta.lblock);
 c030038:	9906      	ldr	r1, [sp, #24]
    block_meta.phy_id = sst_flash_fs_mblock_cur_data_scratch_id(
 c03003a:	9002      	str	r0, [sp, #8]
    sst_flash_fs_mblock_set_data_scratch(cur_phys_block, file_meta.lblock);
 c03003c:	4620      	mov	r0, r4
 c03003e:	f000 faab 	bl	c030598 <sst_flash_fs_mblock_set_data_scratch>
    err = sst_flash_fs_mblock_update_scratch_block_meta(file_meta.lblock,
 c030042:	a902      	add	r1, sp, #8
 c030044:	9806      	ldr	r0, [sp, #24]
 c030046:	f000 faad 	bl	c0305a4 <sst_flash_fs_mblock_update_scratch_block_meta>
    if (err != PSA_PS_SUCCESS) {
 c03004a:	2800      	cmp	r0, #0
 c03004c:	d1d1      	bne.n	c02fff2 <sst_flash_fs_file_write+0x2e>
    err = sst_flash_fs_mblock_update_scratch_file_meta(idx, &file_meta);
 c03004e:	a906      	add	r1, sp, #24
 c030050:	9801      	ldr	r0, [sp, #4]
 c030052:	f000 fae7 	bl	c030624 <sst_flash_fs_mblock_update_scratch_file_meta>
    if (err != PSA_PS_SUCCESS) {
 c030056:	2800      	cmp	r0, #0
 c030058:	d1cb      	bne.n	c02fff2 <sst_flash_fs_file_write+0x2e>
    err = sst_flash_fs_mblock_cp_remaining_file_meta(idx);
 c03005a:	9801      	ldr	r0, [sp, #4]
 c03005c:	f000 f976 	bl	c03034c <sst_flash_fs_mblock_cp_remaining_file_meta>
    if (err != PSA_PS_SUCCESS) {
 c030060:	2800      	cmp	r0, #0
 c030062:	d1c6      	bne.n	c02fff2 <sst_flash_fs_file_write+0x2e>
    if (file_meta.lblock != SST_LOGICAL_DBLOCK0) {
 c030064:	9b06      	ldr	r3, [sp, #24]
 c030066:	b913      	cbnz	r3, c03006e <sst_flash_fs_file_write+0xaa>
    err = sst_flash_fs_mblock_meta_update_finalize();
 c030068:	f000 f9b8 	bl	c0303dc <sst_flash_fs_mblock_meta_update_finalize>
    return err;
 c03006c:	e7b4      	b.n	c02ffd8 <sst_flash_fs_file_write+0x14>
        err = sst_flash_fs_mblock_migrate_lb0_data_to_scratch();
 c03006e:	f000 f9f1 	bl	c030454 <sst_flash_fs_mblock_migrate_lb0_data_to_scratch>
        if (err != PSA_PS_SUCCESS) {
 c030072:	2800      	cmp	r0, #0
 c030074:	d0f8      	beq.n	c030068 <sst_flash_fs_file_write+0xa4>
 c030076:	e7bc      	b.n	c02fff2 <sst_flash_fs_file_write+0x2e>

0c030078 <sst_flash_fs_file_delete>:

psa_ps_status_t sst_flash_fs_file_delete(uint32_t fid)
{
 c030078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c03007c:	b08b      	sub	sp, #44	; 0x2c
    uint32_t nbr_bytes_to_move = 0;
    uint32_t idx;
    struct sst_file_meta_t file_meta;

    /* Get the file index */
    err = sst_flash_fs_mblock_get_file_idx(fid, &del_file_idx);
 c03007e:	a903      	add	r1, sp, #12
 c030080:	f000 f9c6 	bl	c030410 <sst_flash_fs_mblock_get_file_idx>
    if (err != PSA_PS_SUCCESS) {
 c030084:	b118      	cbz	r0, c03008e <sst_flash_fs_file_delete+0x16>
        return PSA_PS_ERROR_UID_NOT_FOUND;
 c030086:	2005      	movs	r0, #5
     * erase scratch blocks.
     */
    err = sst_flash_fs_mblock_meta_update_finalize();

    return err;
}
 c030088:	b00b      	add	sp, #44	; 0x2c
 c03008a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    err = sst_flash_fs_mblock_read_file_meta(del_file_idx, &file_meta);
 c03008e:	a904      	add	r1, sp, #16
 c030090:	9803      	ldr	r0, [sp, #12]
 c030092:	f000 f9b3 	bl	c0303fc <sst_flash_fs_mblock_read_file_meta>
    if (err != PSA_PS_SUCCESS) {
 c030096:	2800      	cmp	r0, #0
 c030098:	d1f6      	bne.n	c030088 <sst_flash_fs_file_delete+0x10>
    if (sst_utils_validate_fid(file_meta.id) != PSA_PS_SUCCESS) {
 c03009a:	9808      	ldr	r0, [sp, #32]
 c03009c:	f000 fdd2 	bl	c030c44 <sst_utils_validate_fid>
 c0300a0:	2800      	cmp	r0, #0
 c0300a2:	d1f0      	bne.n	c030086 <sst_flash_fs_file_delete+0xe>
    del_file_data_idx = file_meta.data_idx;
 c0300a4:	e9dd 5704 	ldrd	r5, r7, [sp, #16]
    del_file_max_size = file_meta.max_size;
 c0300a8:	9e07      	ldr	r6, [sp, #28]
    file_meta.id = SST_INVALID_FID;
 c0300aa:	9008      	str	r0, [sp, #32]
    file_meta.lblock = 0;
 c0300ac:	9004      	str	r0, [sp, #16]
    file_meta.cur_size = 0;
 c0300ae:	e9cd 0006 	strd	r0, r0, [sp, #24]
    err = sst_flash_fs_mblock_update_scratch_file_meta(del_file_idx,
 c0300b2:	a904      	add	r1, sp, #16
 c0300b4:	9803      	ldr	r0, [sp, #12]
 c0300b6:	f000 fab5 	bl	c030624 <sst_flash_fs_mblock_update_scratch_file_meta>
    if (err != PSA_PS_SUCCESS) {
 c0300ba:	2800      	cmp	r0, #0
 c0300bc:	d1e4      	bne.n	c030088 <sst_flash_fs_file_delete+0x10>
    for (idx = 0; idx < SST_MAX_NUM_OBJECTS; idx++) {
 c0300be:	4604      	mov	r4, r0
    uint32_t nbr_bytes_to_move = 0;
 c0300c0:	4681      	mov	r9, r0
    uint32_t src_offset = SST_BLOCK_SIZE;
 c0300c2:	f44f 5880 	mov.w	r8, #4096	; 0x1000
        if (idx == del_file_idx) {
 c0300c6:	9b03      	ldr	r3, [sp, #12]
 c0300c8:	42a3      	cmp	r3, r4
 c0300ca:	d01a      	beq.n	c030102 <sst_flash_fs_file_delete+0x8a>
        err = sst_flash_fs_mblock_read_file_meta(idx, &file_meta);
 c0300cc:	a904      	add	r1, sp, #16
 c0300ce:	4620      	mov	r0, r4
 c0300d0:	f000 f994 	bl	c0303fc <sst_flash_fs_mblock_read_file_meta>
        if (err != PSA_PS_SUCCESS) {
 c0300d4:	2800      	cmp	r0, #0
 c0300d6:	d1d7      	bne.n	c030088 <sst_flash_fs_file_delete+0x10>
        if ((file_meta.lblock == del_file_lblock) &&
 c0300d8:	9b04      	ldr	r3, [sp, #16]
 c0300da:	42ab      	cmp	r3, r5
 c0300dc:	d10b      	bne.n	c0300f6 <sst_flash_fs_file_delete+0x7e>
 c0300de:	9b08      	ldr	r3, [sp, #32]
 c0300e0:	b14b      	cbz	r3, c0300f6 <sst_flash_fs_file_delete+0x7e>
            if (file_meta.data_idx > del_file_data_idx) {
 c0300e2:	9b05      	ldr	r3, [sp, #20]
 c0300e4:	42bb      	cmp	r3, r7
 c0300e6:	d906      	bls.n	c0300f6 <sst_flash_fs_file_delete+0x7e>
 c0300e8:	4598      	cmp	r8, r3
 c0300ea:	bf28      	it	cs
 c0300ec:	4698      	movcs	r8, r3
                file_meta.data_idx -= del_file_max_size;
 c0300ee:	1b9b      	subs	r3, r3, r6
 c0300f0:	9305      	str	r3, [sp, #20]
                nbr_bytes_to_move += file_meta.max_size;
 c0300f2:	9b07      	ldr	r3, [sp, #28]
 c0300f4:	4499      	add	r9, r3
        err = sst_flash_fs_mblock_update_scratch_file_meta(idx, &file_meta);
 c0300f6:	a904      	add	r1, sp, #16
 c0300f8:	4620      	mov	r0, r4
 c0300fa:	f000 fa93 	bl	c030624 <sst_flash_fs_mblock_update_scratch_file_meta>
        if (err != PSA_PS_SUCCESS) {
 c0300fe:	2800      	cmp	r0, #0
 c030100:	d1c2      	bne.n	c030088 <sst_flash_fs_file_delete+0x10>
    for (idx = 0; idx < SST_MAX_NUM_OBJECTS; idx++) {
 c030102:	3401      	adds	r4, #1
 c030104:	2c0d      	cmp	r4, #13
 c030106:	d1de      	bne.n	c0300c6 <sst_flash_fs_file_delete+0x4e>
    err = sst_flash_fs_dblock_compact_block(del_file_lblock, del_file_max_size,
 c030108:	f8cd 9000 	str.w	r9, [sp]
 c03010c:	463b      	mov	r3, r7
 c03010e:	4642      	mov	r2, r8
 c030110:	4631      	mov	r1, r6
 c030112:	4628      	mov	r0, r5
 c030114:	f000 f833 	bl	c03017e <sst_flash_fs_dblock_compact_block>
    if (err != PSA_PS_SUCCESS) {
 c030118:	2800      	cmp	r0, #0
 c03011a:	d1b5      	bne.n	c030088 <sst_flash_fs_file_delete+0x10>
    if (del_file_lblock != SST_LOGICAL_DBLOCK0) {
 c03011c:	b915      	cbnz	r5, c030124 <sst_flash_fs_file_delete+0xac>
    err = sst_flash_fs_mblock_meta_update_finalize();
 c03011e:	f000 f95d 	bl	c0303dc <sst_flash_fs_mblock_meta_update_finalize>
    return err;
 c030122:	e7b1      	b.n	c030088 <sst_flash_fs_file_delete+0x10>
        err = sst_flash_fs_mblock_migrate_lb0_data_to_scratch();
 c030124:	f000 f996 	bl	c030454 <sst_flash_fs_mblock_migrate_lb0_data_to_scratch>
        if (err != PSA_PS_SUCCESS) {
 c030128:	2800      	cmp	r0, #0
 c03012a:	d0f8      	beq.n	c03011e <sst_flash_fs_file_delete+0xa6>
            return PSA_PS_ERROR_OPERATION_FAILED;
 c03012c:	200b      	movs	r0, #11
 c03012e:	e7ab      	b.n	c030088 <sst_flash_fs_file_delete+0x10>

0c030130 <sst_flash_fs_file_read>:

psa_ps_status_t sst_flash_fs_file_read(uint32_t fid, uint32_t size,
                                       uint32_t offset, uint8_t *data)
{
 c030130:	b5f0      	push	{r4, r5, r6, r7, lr}
 c030132:	b089      	sub	sp, #36	; 0x24
 c030134:	460d      	mov	r5, r1
    psa_ps_status_t err;
    uint32_t idx;
    struct sst_file_meta_t tmp_metadata;

    /* Get the file index */
    err = sst_flash_fs_mblock_get_file_idx(fid, &idx);
 c030136:	a901      	add	r1, sp, #4
{
 c030138:	4607      	mov	r7, r0
 c03013a:	4614      	mov	r4, r2
 c03013c:	461e      	mov	r6, r3
    err = sst_flash_fs_mblock_get_file_idx(fid, &idx);
 c03013e:	f000 f967 	bl	c030410 <sst_flash_fs_mblock_get_file_idx>
    if (err != PSA_PS_SUCCESS) {
 c030142:	b110      	cbz	r0, c03014a <sst_flash_fs_file_read+0x1a>
        return PSA_PS_ERROR_UID_NOT_FOUND;
 c030144:	2005      	movs	r0, #5
    if (err != PSA_PS_SUCCESS) {
        return PSA_PS_ERROR_OPERATION_FAILED;
    }

    return PSA_PS_SUCCESS;
}
 c030146:	b009      	add	sp, #36	; 0x24
 c030148:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = sst_flash_fs_mblock_read_file_meta(idx, &tmp_metadata);
 c03014a:	a902      	add	r1, sp, #8
 c03014c:	9801      	ldr	r0, [sp, #4]
 c03014e:	f000 f955 	bl	c0303fc <sst_flash_fs_mblock_read_file_meta>
    if (err != PSA_PS_SUCCESS) {
 c030152:	b108      	cbz	r0, c030158 <sst_flash_fs_file_read+0x28>
        return PSA_PS_ERROR_OPERATION_FAILED;
 c030154:	200b      	movs	r0, #11
 c030156:	e7f6      	b.n	c030146 <sst_flash_fs_file_read+0x16>
    if (fid != tmp_metadata.id) {
 c030158:	9b06      	ldr	r3, [sp, #24]
 c03015a:	42bb      	cmp	r3, r7
 c03015c:	d1f2      	bne.n	c030144 <sst_flash_fs_file_read+0x14>
    err = sst_utils_check_contained_in(tmp_metadata.cur_size, offset, size);
 c03015e:	462a      	mov	r2, r5
 c030160:	4621      	mov	r1, r4
 c030162:	9804      	ldr	r0, [sp, #16]
 c030164:	f000 fd64 	bl	c030c30 <sst_utils_check_contained_in>
    if (err != PSA_PS_SUCCESS) {
 c030168:	2800      	cmp	r0, #0
 c03016a:	d1ec      	bne.n	c030146 <sst_flash_fs_file_read+0x16>
    err = sst_flash_fs_dblock_read_file(&tmp_metadata, offset, size, data);
 c03016c:	4633      	mov	r3, r6
 c03016e:	462a      	mov	r2, r5
 c030170:	4621      	mov	r1, r4
 c030172:	a802      	add	r0, sp, #8
 c030174:	f000 f846 	bl	c030204 <sst_flash_fs_dblock_read_file>
    if (err != PSA_PS_SUCCESS) {
 c030178:	2800      	cmp	r0, #0
 c03017a:	d0e4      	beq.n	c030146 <sst_flash_fs_file_read+0x16>
 c03017c:	e7ea      	b.n	c030154 <sst_flash_fs_file_read+0x24>

0c03017e <sst_flash_fs_dblock_compact_block>:
psa_ps_status_t sst_flash_fs_dblock_compact_block(uint32_t lblock,
                                                  uint32_t free_size,
                                                  uint32_t src_offset,
                                                  uint32_t dst_offset,
                                                  uint32_t size)
{
 c03017e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c030182:	b087      	sub	sp, #28
 c030184:	460f      	mov	r7, r1
    struct sst_block_meta_t block_meta;
    psa_ps_status_t err;
    uint32_t scratch_id = 0;

    /* Read current block meta */
    err = sst_flash_fs_mblock_read_block_metadata(lblock, &block_meta);
 c030186:	a902      	add	r1, sp, #8
{
 c030188:	4606      	mov	r6, r0
 c03018a:	4691      	mov	r9, r2
 c03018c:	461d      	mov	r5, r3
 c03018e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    err = sst_flash_fs_mblock_read_block_metadata(lblock, &block_meta);
 c030192:	f000 f955 	bl	c030440 <sst_flash_fs_mblock_read_block_metadata>
    if (err != PSA_PS_SUCCESS) {
 c030196:	4604      	mov	r4, r0
 c030198:	bb30      	cbnz	r0, c0301e8 <sst_flash_fs_dblock_compact_block+0x6a>
        return err;
    }

    /* Release data from block meta */
    block_meta.free_size += free_size;
 c03019a:	9904      	ldr	r1, [sp, #16]

    /* Save scratch data block physical IDs */
    scratch_id = sst_flash_fs_mblock_cur_data_scratch_id(lblock);
 c03019c:	4630      	mov	r0, r6
    block_meta.free_size += free_size;
 c03019e:	4439      	add	r1, r7
 c0301a0:	9104      	str	r1, [sp, #16]
    scratch_id = sst_flash_fs_mblock_cur_data_scratch_id(lblock);
 c0301a2:	f000 f8f3 	bl	c03038c <sst_flash_fs_mblock_cur_data_scratch_id>
 c0301a6:	4607      	mov	r7, r0

    /* Check if there are bytes to be compacted */
    if (size > 0) {
 c0301a8:	f1b8 0f00 	cmp.w	r8, #0
 c0301ac:	d112      	bne.n	c0301d4 <sst_flash_fs_dblock_compact_block+0x56>
        if (err != PSA_PS_SUCCESS) {
            return PSA_PS_ERROR_OPERATION_FAILED;
        }
    }

    if (dst_offset > block_meta.data_start) {
 c0301ae:	9b03      	ldr	r3, [sp, #12]
 c0301b0:	42ab      	cmp	r3, r5
 c0301b2:	d31d      	bcc.n	c0301f0 <sst_flash_fs_dblock_compact_block+0x72>

    /* Swap the scratch and current data blocks. Must swap even with nothing
     * to compact so that deleted file is left in scratch and erased as part
     * of finalization.
     */
    sst_flash_fs_mblock_set_data_scratch(block_meta.phy_id, lblock);
 c0301b4:	4631      	mov	r1, r6
 c0301b6:	9802      	ldr	r0, [sp, #8]
 c0301b8:	f000 f9ee 	bl	c030598 <sst_flash_fs_mblock_set_data_scratch>

    /* Set scratch block ID as the one which contains the new data block */
    block_meta.phy_id = scratch_id;

    /* Update block metadata in scratch metadata block */
    err = sst_flash_fs_mblock_update_scratch_block_meta(lblock, &block_meta);
 c0301bc:	a902      	add	r1, sp, #8
 c0301be:	4630      	mov	r0, r6
    block_meta.phy_id = scratch_id;
 c0301c0:	9702      	str	r7, [sp, #8]
    err = sst_flash_fs_mblock_update_scratch_block_meta(lblock, &block_meta);
 c0301c2:	f000 f9ef 	bl	c0305a4 <sst_flash_fs_mblock_update_scratch_block_meta>
    if (err != PSA_PS_SUCCESS) {
 c0301c6:	4604      	mov	r4, r0
 c0301c8:	b170      	cbz	r0, c0301e8 <sst_flash_fs_dblock_compact_block+0x6a>
        /* Swap back the data block as there was an issue in the process */
        sst_flash_fs_mblock_set_data_scratch(scratch_id, lblock);
 c0301ca:	4631      	mov	r1, r6
 c0301cc:	4638      	mov	r0, r7
 c0301ce:	f000 f9e3 	bl	c030598 <sst_flash_fs_mblock_set_data_scratch>
        return err;
 c0301d2:	e009      	b.n	c0301e8 <sst_flash_fs_dblock_compact_block+0x6a>
        err = sst_flash_block_to_block_move(scratch_id, dst_offset,
 c0301d4:	f8cd 8000 	str.w	r8, [sp]
 c0301d8:	464b      	mov	r3, r9
 c0301da:	9a02      	ldr	r2, [sp, #8]
 c0301dc:	4629      	mov	r1, r5
 c0301de:	f7ff fe2b 	bl	c02fe38 <sst_flash_block_to_block_move>
        if (err != PSA_PS_SUCCESS) {
 c0301e2:	2800      	cmp	r0, #0
 c0301e4:	d0e3      	beq.n	c0301ae <sst_flash_fs_dblock_compact_block+0x30>
            return PSA_PS_ERROR_OPERATION_FAILED;
 c0301e6:	240b      	movs	r4, #11
    }

    return err;
}
 c0301e8:	4620      	mov	r0, r4
 c0301ea:	b007      	add	sp, #28
 c0301ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        err = sst_flash_block_to_block_move(scratch_id,
 c0301f0:	1aed      	subs	r5, r5, r3
 c0301f2:	9500      	str	r5, [sp, #0]
 c0301f4:	9a02      	ldr	r2, [sp, #8]
 c0301f6:	4619      	mov	r1, r3
 c0301f8:	4638      	mov	r0, r7
 c0301fa:	f7ff fe1d 	bl	c02fe38 <sst_flash_block_to_block_move>
        if (err != PSA_PS_SUCCESS) {
 c0301fe:	2800      	cmp	r0, #0
 c030200:	d0d8      	beq.n	c0301b4 <sst_flash_fs_dblock_compact_block+0x36>
 c030202:	e7f0      	b.n	c0301e6 <sst_flash_fs_dblock_compact_block+0x68>

0c030204 <sst_flash_fs_dblock_read_file>:

psa_ps_status_t sst_flash_fs_dblock_read_file(struct sst_file_meta_t *file_meta,
                                              uint32_t offset,
                                              uint32_t size,
                                              uint8_t *buf)
{
 c030204:	b5f0      	push	{r4, r5, r6, r7, lr}
 c030206:	b085      	sub	sp, #20
 c030208:	4604      	mov	r4, r0
 c03020a:	460e      	mov	r6, r1
    err = sst_flash_fs_mblock_read_block_metadata(lblock, &block_meta);
 c03020c:	6800      	ldr	r0, [r0, #0]
 c03020e:	4669      	mov	r1, sp
{
 c030210:	4617      	mov	r7, r2
 c030212:	461d      	mov	r5, r3
    err = sst_flash_fs_mblock_read_block_metadata(lblock, &block_meta);
 c030214:	f000 f914 	bl	c030440 <sst_flash_fs_mblock_read_block_metadata>
    if (err != PSA_PS_SUCCESS) {
 c030218:	b108      	cbz	r0, c03021e <sst_flash_fs_dblock_read_file+0x1a>
    uint32_t phys_block;
    uint32_t pos;

    phys_block = sst_dblock_lo_to_phy(file_meta->lblock);
    if (phys_block == SST_BLOCK_INVALID_ID) {
        return PSA_PS_ERROR_OPERATION_FAILED;
 c03021a:	200b      	movs	r0, #11
 c03021c:	e008      	b.n	c030230 <sst_flash_fs_dblock_read_file+0x2c>
    return block_meta.phy_id;
 c03021e:	9800      	ldr	r0, [sp, #0]
    if (phys_block == SST_BLOCK_INVALID_ID) {
 c030220:	1c43      	adds	r3, r0, #1
 c030222:	d0fa      	beq.n	c03021a <sst_flash_fs_dblock_read_file+0x16>
    }

    pos = (file_meta->data_idx + offset);
 c030224:	6862      	ldr	r2, [r4, #4]

    return sst_flash_read(phys_block, buf, pos, size);
 c030226:	463b      	mov	r3, r7
 c030228:	4432      	add	r2, r6
 c03022a:	4629      	mov	r1, r5
 c03022c:	f7ff fde4 	bl	c02fdf8 <sst_flash_read>
}
 c030230:	b005      	add	sp, #20
 c030232:	bdf0      	pop	{r4, r5, r6, r7, pc}

0c030234 <sst_flash_fs_dblock_write_file>:

psa_ps_status_t sst_flash_fs_dblock_write_file(uint32_t lblock,
                                               uint32_t offset,
                                               uint32_t size,
                                               const uint8_t *data)
{
 c030234:	b570      	push	{r4, r5, r6, lr}
 c030236:	460d      	mov	r5, r1
 c030238:	4616      	mov	r6, r2
 c03023a:	461c      	mov	r4, r3
    uint32_t scratch_id;

    scratch_id = sst_flash_fs_mblock_cur_data_scratch_id(lblock);
 c03023c:	f000 f8a6 	bl	c03038c <sst_flash_fs_mblock_cur_data_scratch_id>

    return sst_flash_write(scratch_id, data, offset, size);
 c030240:	4633      	mov	r3, r6
 c030242:	462a      	mov	r2, r5
 c030244:	4621      	mov	r1, r4
}
 c030246:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return sst_flash_write(scratch_id, data, offset, size);
 c03024a:	f7ff bde5 	b.w	c02fe18 <sst_flash_write>

0c03024e <sst_flash_fs_dblock_cp_remaining_data>:

psa_ps_status_t sst_flash_fs_dblock_cp_remaining_data(
                                      const struct sst_block_meta_t *block_meta,
                                      const struct sst_file_meta_t *file_meta)
{
 c03024e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c030250:	4604      	mov	r4, r0
 c030252:	460d      	mov	r5, r1
    uint32_t after_file_offset;
    psa_ps_status_t err;
    uint32_t scratch_id;
    uint32_t wrt_bytes;

    scratch_id = sst_flash_fs_mblock_cur_data_scratch_id(file_meta->lblock);
 c030254:	6808      	ldr	r0, [r1, #0]
 c030256:	f000 f899 	bl	c03038c <sst_flash_fs_mblock_cur_data_scratch_id>

    if (file_meta->data_idx > block_meta->data_start) {
 c03025a:	686a      	ldr	r2, [r5, #4]
 c03025c:	6863      	ldr	r3, [r4, #4]
    scratch_id = sst_flash_fs_mblock_cur_data_scratch_id(file_meta->lblock);
 c03025e:	4606      	mov	r6, r0
    if (file_meta->data_idx > block_meta->data_start) {
 c030260:	429a      	cmp	r2, r3
 c030262:	d80e      	bhi.n	c030282 <sst_flash_fs_dblock_cp_remaining_data+0x34>
    }

    /* The referenced file data is already in the scratch block, as it is
     * processed before calling of this function.
     */
    after_file_offset = file_meta->data_idx + file_meta->max_size;
 c030264:	68ea      	ldr	r2, [r5, #12]
 c030266:	686b      	ldr	r3, [r5, #4]

    /* Calculate amount of bytes after the manipulated file */
    wrt_bytes = (SST_BLOCK_SIZE - (after_file_offset + block_meta->free_size));

    /* Data after updated content */
    return sst_flash_block_to_block_move(scratch_id, after_file_offset,
 c030268:	4630      	mov	r0, r6
    after_file_offset = file_meta->data_idx + file_meta->max_size;
 c03026a:	4413      	add	r3, r2
    wrt_bytes = (SST_BLOCK_SIZE - (after_file_offset + block_meta->free_size));
 c03026c:	68a2      	ldr	r2, [r4, #8]
    return sst_flash_block_to_block_move(scratch_id, after_file_offset,
 c03026e:	4619      	mov	r1, r3
    wrt_bytes = (SST_BLOCK_SIZE - (after_file_offset + block_meta->free_size));
 c030270:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 c030274:	1ad2      	subs	r2, r2, r3
    return sst_flash_block_to_block_move(scratch_id, after_file_offset,
 c030276:	9200      	str	r2, [sp, #0]
 c030278:	6822      	ldr	r2, [r4, #0]
 c03027a:	f7ff fddd 	bl	c02fe38 <sst_flash_block_to_block_move>
                                         block_meta->phy_id, after_file_offset,
                                         wrt_bytes);
}
 c03027e:	b002      	add	sp, #8
 c030280:	bd70      	pop	{r4, r5, r6, pc}
        wrt_bytes = (file_meta->data_idx - block_meta->data_start);
 c030282:	1ad2      	subs	r2, r2, r3
        err = sst_flash_block_to_block_move(scratch_id,
 c030284:	9200      	str	r2, [sp, #0]
 c030286:	4619      	mov	r1, r3
 c030288:	6822      	ldr	r2, [r4, #0]
 c03028a:	f7ff fdd5 	bl	c02fe38 <sst_flash_block_to_block_move>
        if (err != PSA_PS_SUCCESS) {
 c03028e:	2800      	cmp	r0, #0
 c030290:	d0e8      	beq.n	c030264 <sst_flash_fs_dblock_cp_remaining_data+0x16>
 c030292:	e7f4      	b.n	c03027e <sst_flash_fs_dblock_cp_remaining_data+0x30>

0c030294 <sst_mblock_write_scratch_meta_header>:
 * \return scratch metablock's id
 */
__attribute__((always_inline))
__STATIC_INLINE uint32_t sst_cur_meta_scratch_id(void)
{
    return sst_flash_fs_ctx.scratch_metablock;
 c030294:	4a06      	ldr	r2, [pc, #24]	; (c0302b0 <sst_mblock_write_scratch_meta_header+0x1c>)
        /* Reset the swap count to 0 */
        sst_flash_fs_ctx.meta_block_header.active_swap_count = 0;
    }

    /* Write the metadata block header */
    err = sst_flash_write(scratch_metablock,
 c030296:	4906      	ldr	r1, [pc, #24]	; (c0302b0 <sst_mblock_write_scratch_meta_header+0x1c>)
    sst_flash_fs_ctx.meta_block_header.active_swap_count += 1;
 c030298:	7953      	ldrb	r3, [r2, #5]
    return sst_flash_fs_ctx.scratch_metablock;
 c03029a:	68d0      	ldr	r0, [r2, #12]
    sst_flash_fs_ctx.meta_block_header.active_swap_count += 1;
 c03029c:	3301      	adds	r3, #1
 c03029e:	b2db      	uxtb	r3, r3
    if (swap_count == SST_FLASH_DEFAULT_VAL) {
 c0302a0:	2bff      	cmp	r3, #255	; 0xff
        sst_flash_fs_ctx.meta_block_header.active_swap_count = 0;
 c0302a2:	bf08      	it	eq
 c0302a4:	2300      	moveq	r3, #0
 c0302a6:	7153      	strb	r3, [r2, #5]
    err = sst_flash_write(scratch_metablock,
 c0302a8:	2308      	movs	r3, #8
 c0302aa:	2200      	movs	r2, #0
 c0302ac:	f7ff bdb4 	b.w	c02fe18 <sst_flash_write>
 c0302b0:	3003e648 	.word	0x3003e648

0c0302b4 <sst_init_get_active_metablock>:
 * \brief Validates and find the valid-active metablock
 *
 * \return Returns value as specified in \ref psa_ps_status_t
 */
static psa_ps_status_t sst_init_get_active_metablock(void)
{
 c0302b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t num_valid_meta_blocks = 0;

    /* First two blocks are reserved for metadata */

    /* Read the header of both the metdata blocks */
    err = sst_flash_read(SST_METADATA_BLOCK0, (uint8_t *)&h_meta0,
 c0302b6:	2200      	movs	r2, #0
 c0302b8:	2308      	movs	r3, #8
 c0302ba:	4669      	mov	r1, sp
 c0302bc:	4610      	mov	r0, r2
 c0302be:	f7ff fd9b 	bl	c02fdf8 <sst_flash_read>
                         0, SST_BLOCK_META_HEADER_SIZE);
    if (err != PSA_PS_SUCCESS) {
 c0302c2:	2800      	cmp	r0, #0
 c0302c4:	d137      	bne.n	c030336 <sst_init_get_active_metablock+0x82>
        return err;
    }

    err = sst_flash_read(SST_METADATA_BLOCK1, (uint8_t *)&h_meta1,
 c0302c6:	2308      	movs	r3, #8
 c0302c8:	4602      	mov	r2, r0
 c0302ca:	eb0d 0103 	add.w	r1, sp, r3
 c0302ce:	2001      	movs	r0, #1
 c0302d0:	f7ff fd92 	bl	c02fdf8 <sst_flash_read>
                         0, SST_BLOCK_META_HEADER_SIZE);
    if (err != PSA_PS_SUCCESS) {
 c0302d4:	bb78      	cbnz	r0, c030336 <sst_init_get_active_metablock+0x82>
    err = sst_mblock_validate_fs_version(h_meta->fs_version);
 c0302d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if (fs_version != SST_SUPPORTED_VERSION) {
 c0302da:	2b01      	cmp	r3, #1
 c0302dc:	d11b      	bne.n	c030316 <sst_init_get_active_metablock+0x62>
    if (swap_count == SST_FLASH_DEFAULT_VAL) {
 c0302de:	f89d 2005 	ldrb.w	r2, [sp, #5]
     * update operation to complete. Need to find out the valid
     * metadata block now.
     */
    if (sst_mblock_validate_header_meta(&h_meta0) == PSA_PS_SUCCESS) {
        num_valid_meta_blocks++;
        cur_meta_block = SST_METADATA_BLOCK0;
 c0302e2:	2aff      	cmp	r2, #255	; 0xff
 c0302e4:	bf0a      	itet	eq
 c0302e6:	f04f 31ff 	moveq.w	r1, #4294967295
 c0302ea:	2100      	movne	r1, #0
 c0302ec:	2300      	moveq	r3, #0
    if (fs_version != SST_SUPPORTED_VERSION) {
 c0302ee:	f89d 400c 	ldrb.w	r4, [sp, #12]
 c0302f2:	2c01      	cmp	r4, #1
 c0302f4:	d123      	bne.n	c03033e <sst_init_get_active_metablock+0x8a>
        err = sst_mblock_validate_swap_count(h_meta->active_swap_count);
 c0302f6:	f89d 200d 	ldrb.w	r2, [sp, #13]
    if (swap_count == SST_FLASH_DEFAULT_VAL) {
 c0302fa:	2aff      	cmp	r2, #255	; 0xff
 c0302fc:	d01f      	beq.n	c03033e <sst_init_get_active_metablock+0x8a>

    /* If there are more than 1 potential metablocks, the previous
     * update operation was interrupted by power failure. In which case,
     * need to find out which one is potentially latest metablock.
     */
    if (num_valid_meta_blocks > 1) {
 c0302fe:	2b01      	cmp	r3, #1
 c030300:	d11b      	bne.n	c03033a <sst_init_get_active_metablock+0x86>
        cur_meta_block = sst_mblock_latest_meta_block(&h_meta0, &h_meta1);
 c030302:	f89d 1005 	ldrb.w	r1, [sp, #5]
    if ((meta1_swap_count == 0) && (meta0_swap_count != 1)) {
 c030306:	b952      	cbnz	r2, c03031e <sst_init_get_active_metablock+0x6a>
 c030308:	2901      	cmp	r1, #1
 c03030a:	d10d      	bne.n	c030328 <sst_init_get_active_metablock+0x74>
        cur_meta = SST_METADATA_BLOCK1;
 c03030c:	4291      	cmp	r1, r2
 c03030e:	bf2c      	ite	cs
 c030310:	2300      	movcs	r3, #0
 c030312:	2301      	movcc	r3, #1
 c030314:	e008      	b.n	c030328 <sst_init_get_active_metablock+0x74>
    uint8_t num_valid_meta_blocks = 0;
 c030316:	4603      	mov	r3, r0
    uint32_t cur_meta_block = SST_BLOCK_INVALID_ID;
 c030318:	f04f 31ff 	mov.w	r1, #4294967295
 c03031c:	e7e7      	b.n	c0302ee <sst_init_get_active_metablock+0x3a>
    } else if ((meta0_swap_count == 0) && (meta1_swap_count != 1)) {
 c03031e:	2900      	cmp	r1, #0
 c030320:	d1f4      	bne.n	c03030c <sst_init_get_active_metablock+0x58>
        cur_meta = SST_METADATA_BLOCK1;
 c030322:	3a01      	subs	r2, #1
 c030324:	4253      	negs	r3, r2
 c030326:	4153      	adcs	r3, r2
        cur_meta_block = sst_mblock_latest_meta_block(&h_meta0, &h_meta1);
 c030328:	4619      	mov	r1, r3
    } else if (num_valid_meta_blocks == 0) {
        return PSA_PS_ERROR_OPERATION_FAILED;
    }

    sst_flash_fs_ctx.active_metablock = cur_meta_block;
 c03032a:	4b07      	ldr	r3, [pc, #28]	; (c030348 <sst_init_get_active_metablock+0x94>)
 c03032c:	6099      	str	r1, [r3, #8]
    sst_flash_fs_ctx.scratch_metablock = SST_OTHER_META_BLOCK(cur_meta_block);
 c03032e:	fab1 f181 	clz	r1, r1
 c030332:	0949      	lsrs	r1, r1, #5
 c030334:	60d9      	str	r1, [r3, #12]

    return PSA_PS_SUCCESS;
}
 c030336:	b004      	add	sp, #16
 c030338:	bd10      	pop	{r4, pc}
        cur_meta_block = SST_METADATA_BLOCK1;
 c03033a:	4621      	mov	r1, r4
 c03033c:	e7f5      	b.n	c03032a <sst_init_get_active_metablock+0x76>
    } else if (num_valid_meta_blocks == 0) {
 c03033e:	2b00      	cmp	r3, #0
 c030340:	d1f3      	bne.n	c03032a <sst_init_get_active_metablock+0x76>
        return PSA_PS_ERROR_OPERATION_FAILED;
 c030342:	200b      	movs	r0, #11
 c030344:	e7f7      	b.n	c030336 <sst_init_get_active_metablock+0x82>
 c030346:	bf00      	nop
 c030348:	3003e648 	.word	0x3003e648

0c03034c <sst_flash_fs_mblock_cp_remaining_file_meta>:
    return sst_flash_fs_ctx.scratch_metablock;
 c03034c:	4b0e      	ldr	r3, [pc, #56]	; (c030388 <sst_flash_fs_mblock_cp_remaining_file_meta+0x3c>)

psa_ps_status_t sst_flash_fs_mblock_cp_remaining_file_meta(uint32_t idx)
{
 c03034e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return sst_flash_fs_ctx.active_metablock;
 c030350:	e9d3 6502 	ldrd	r6, r5, [r3, #8]
    meta_block = sst_mblock_cur_meta_active();
    /* Calculate the position */
    pos = sst_mblock_file_meta_offset(0);
    /* Copy rest of the block data from previous block */
    /* Data before updated content */
    err = sst_flash_block_to_block_move(scratch_block, pos, meta_block, pos,
 c030354:	2318      	movs	r3, #24
 c030356:	fb03 f400 	mul.w	r4, r3, r0
 c03035a:	4632      	mov	r2, r6
 c03035c:	9400      	str	r4, [sp, #0]
 c03035e:	4619      	mov	r1, r3
 c030360:	4628      	mov	r0, r5
 c030362:	f7ff fd69 	bl	c02fe38 <sst_flash_block_to_block_move>
                                        (idx * SST_FILE_METADATA_SIZE));
    if (err != PSA_PS_SUCCESS) {
 c030366:	b960      	cbnz	r0, c030382 <sst_flash_fs_mblock_cp_remaining_file_meta+0x36>
    offset = SST_BLOCK_META_HEADER_SIZE
 c030368:	f104 0330 	add.w	r3, r4, #48	; 0x30

    /* Get end of file meta position which is the position after the last
     * byte of file meta.
     */
    end = sst_mblock_file_meta_offset(SST_MAX_NUM_OBJECTS);
    if (end > pos) {
 c03036c:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 c030370:	d207      	bcs.n	c030382 <sst_flash_fs_mblock_cp_remaining_file_meta+0x36>
        err = sst_flash_block_to_block_move(scratch_block, pos, meta_block,
 c030372:	f5c3 72a8 	rsb	r2, r3, #336	; 0x150
 c030376:	9200      	str	r2, [sp, #0]
 c030378:	4619      	mov	r1, r3
 c03037a:	4632      	mov	r2, r6
 c03037c:	4628      	mov	r0, r5
 c03037e:	f7ff fd5b 	bl	c02fe38 <sst_flash_block_to_block_move>
                                            pos, (end - pos));
    }

    return err;
}
 c030382:	b002      	add	sp, #8
 c030384:	bd70      	pop	{r4, r5, r6, pc}
 c030386:	bf00      	nop
 c030388:	3003e648 	.word	0x3003e648

0c03038c <sst_flash_fs_mblock_cur_data_scratch_id>:

uint32_t sst_flash_fs_mblock_cur_data_scratch_id(uint32_t lblock)
{
 c03038c:	4b02      	ldr	r3, [pc, #8]	; (c030398 <sst_flash_fs_mblock_cur_data_scratch_id+0xc>)
    if (lblock == SST_LOGICAL_DBLOCK0) {
 c03038e:	b908      	cbnz	r0, c030394 <sst_flash_fs_mblock_cur_data_scratch_id+0x8>
    return sst_flash_fs_ctx.scratch_metablock;
 c030390:	68d8      	ldr	r0, [r3, #12]
        /* Scratch logical data block 0 physical IDs */
        return sst_cur_meta_scratch_id();
 c030392:	4770      	bx	lr
    }

    return sst_flash_fs_ctx.meta_block_header.scratch_dblock;
 c030394:	6818      	ldr	r0, [r3, #0]
}
 c030396:	4770      	bx	lr
 c030398:	3003e648 	.word	0x3003e648

0c03039c <sst_flash_fs_mblock_init>:

    return PSA_PS_ERROR_UID_NOT_FOUND;
}

psa_ps_status_t sst_flash_fs_mblock_init(void)
{
 c03039c:	b510      	push	{r4, lr}
    psa_ps_status_t err;

    /* Initialize Flash Interface */
    err = sst_flash_init();
 c03039e:	f7ff fd1f 	bl	c02fde0 <sst_flash_init>
    if (err != PSA_PS_SUCCESS) {
 c0303a2:	b920      	cbnz	r0, c0303ae <sst_flash_fs_mblock_init+0x12>
        return err;
    }

    err = sst_init_get_active_metablock();
 c0303a4:	f7ff ff86 	bl	c0302b4 <sst_init_get_active_metablock>
    if (err != PSA_PS_SUCCESS) {
 c0303a8:	4602      	mov	r2, r0
 c0303aa:	b108      	cbz	r0, c0303b0 <sst_flash_fs_mblock_init+0x14>
        return PSA_PS_ERROR_OPERATION_FAILED;
 c0303ac:	200b      	movs	r0, #11

    /* Erase the other scratch metadata block */
    err = sst_mblock_erase_scratch_blocks();

    return err;
}
 c0303ae:	bd10      	pop	{r4, pc}
    err = sst_flash_read(sst_flash_fs_ctx.active_metablock,
 c0303b0:	4c09      	ldr	r4, [pc, #36]	; (c0303d8 <sst_flash_fs_mblock_init+0x3c>)
 c0303b2:	2308      	movs	r3, #8
 c0303b4:	4621      	mov	r1, r4
 c0303b6:	68a0      	ldr	r0, [r4, #8]
 c0303b8:	f7ff fd1e 	bl	c02fdf8 <sst_flash_read>
    if (err != PSA_PS_SUCCESS) {
 c0303bc:	2800      	cmp	r0, #0
 c0303be:	d1f5      	bne.n	c0303ac <sst_flash_fs_mblock_init+0x10>
    if (fs_version != SST_SUPPORTED_VERSION) {
 c0303c0:	7923      	ldrb	r3, [r4, #4]
 c0303c2:	2b01      	cmp	r3, #1
 c0303c4:	d1f2      	bne.n	c0303ac <sst_flash_fs_mblock_init+0x10>
    if (swap_count == SST_FLASH_DEFAULT_VAL) {
 c0303c6:	7963      	ldrb	r3, [r4, #5]
 c0303c8:	2bff      	cmp	r3, #255	; 0xff
 c0303ca:	d0ef      	beq.n	c0303ac <sst_flash_fs_mblock_init+0x10>
    err = sst_flash_erase_block(scratch_metablock);
 c0303cc:	68e0      	ldr	r0, [r4, #12]
}
 c0303ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    err = sst_flash_erase_block(scratch_metablock);
 c0303d2:	f7ff bd63 	b.w	c02fe9c <sst_flash_erase_block>
 c0303d6:	bf00      	nop
 c0303d8:	3003e648 	.word	0x3003e648

0c0303dc <sst_flash_fs_mblock_meta_update_finalize>:

psa_ps_status_t sst_flash_fs_mblock_meta_update_finalize(void)
{
 c0303dc:	b508      	push	{r3, lr}
    psa_ps_status_t err;

    /* Write the metadata block header to flash */
    err = sst_mblock_write_scratch_meta_header();
 c0303de:	f7ff ff59 	bl	c030294 <sst_mblock_write_scratch_meta_header>
    if (err != PSA_PS_SUCCESS) {
 c0303e2:	b940      	cbnz	r0, c0303f6 <sst_flash_fs_mblock_meta_update_finalize+0x1a>
    tmp_block = sst_flash_fs_ctx.scratch_metablock;
 c0303e4:	4b04      	ldr	r3, [pc, #16]	; (c0303f8 <sst_flash_fs_mblock_meta_update_finalize+0x1c>)
    sst_flash_fs_ctx.scratch_metablock = sst_flash_fs_ctx.active_metablock;
 c0303e6:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
    sst_flash_fs_ctx.active_metablock = tmp_block;
 c0303ea:	e9c3 2002 	strd	r2, r0, [r3, #8]

    /* Erase meta block and current scratch block */
    err = sst_mblock_erase_scratch_blocks();

    return err;
}
 c0303ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    err = sst_flash_erase_block(scratch_metablock);
 c0303f2:	f7ff bd53 	b.w	c02fe9c <sst_flash_erase_block>
}
 c0303f6:	bd08      	pop	{r3, pc}
 c0303f8:	3003e648 	.word	0x3003e648

0c0303fc <sst_flash_fs_mblock_read_file_meta>:
{
    psa_ps_status_t err;
    uint32_t offset;

    offset = sst_mblock_file_meta_offset(idx);
    err = sst_flash_read(sst_flash_fs_ctx.active_metablock,
 c0303fc:	2318      	movs	r3, #24
 c0303fe:	fb00 3203 	mla	r2, r0, r3, r3
 c030402:	4802      	ldr	r0, [pc, #8]	; (c03040c <sst_flash_fs_mblock_read_file_meta+0x10>)
 c030404:	6880      	ldr	r0, [r0, #8]
 c030406:	f7ff bcf7 	b.w	c02fdf8 <sst_flash_read>
 c03040a:	bf00      	nop
 c03040c:	3003e648 	.word	0x3003e648

0c030410 <sst_flash_fs_mblock_get_file_idx>:
{
 c030410:	b570      	push	{r4, r5, r6, lr}
 c030412:	4605      	mov	r5, r0
 c030414:	460e      	mov	r6, r1
    for (i = 0; i < SST_MAX_NUM_OBJECTS; i++) {
 c030416:	2400      	movs	r4, #0
{
 c030418:	b086      	sub	sp, #24
        err = sst_flash_fs_mblock_read_file_meta(i, &tmp_metadata);
 c03041a:	4669      	mov	r1, sp
 c03041c:	4620      	mov	r0, r4
 c03041e:	f7ff ffed 	bl	c0303fc <sst_flash_fs_mblock_read_file_meta>
        if (err != PSA_PS_SUCCESS) {
 c030422:	b950      	cbnz	r0, c03043a <sst_flash_fs_mblock_get_file_idx+0x2a>
        if (tmp_metadata.id == fid) {
 c030424:	9b04      	ldr	r3, [sp, #16]
 c030426:	42ab      	cmp	r3, r5
 c030428:	d102      	bne.n	c030430 <sst_flash_fs_mblock_get_file_idx+0x20>
            *idx = i;
 c03042a:	6034      	str	r4, [r6, #0]
}
 c03042c:	b006      	add	sp, #24
 c03042e:	bd70      	pop	{r4, r5, r6, pc}
    for (i = 0; i < SST_MAX_NUM_OBJECTS; i++) {
 c030430:	3401      	adds	r4, #1
 c030432:	2c0d      	cmp	r4, #13
 c030434:	d1f1      	bne.n	c03041a <sst_flash_fs_mblock_get_file_idx+0xa>
    return PSA_PS_ERROR_UID_NOT_FOUND;
 c030436:	2005      	movs	r0, #5
 c030438:	e7f8      	b.n	c03042c <sst_flash_fs_mblock_get_file_idx+0x1c>
            return PSA_PS_ERROR_OPERATION_FAILED;
 c03043a:	200b      	movs	r0, #11
 c03043c:	e7f6      	b.n	c03042c <sst_flash_fs_mblock_get_file_idx+0x1c>
	...

0c030440 <sst_flash_fs_mblock_read_block_metadata>:
             (lblock * SST_BLOCK_METADATA_SIZE);
 c030440:	0102      	lsls	r2, r0, #4
    uint32_t metablock;
    uint32_t pos;

    metablock = sst_mblock_cur_meta_active();
    pos = sst_mblock_block_meta_offset(lblock);
    err = sst_flash_read(metablock, (uint8_t *)block_meta,
 c030442:	4803      	ldr	r0, [pc, #12]	; (c030450 <sst_flash_fs_mblock_read_block_metadata+0x10>)
 c030444:	2310      	movs	r3, #16
 c030446:	3208      	adds	r2, #8
 c030448:	6880      	ldr	r0, [r0, #8]
 c03044a:	f7ff bcd5 	b.w	c02fdf8 <sst_flash_read>
 c03044e:	bf00      	nop
 c030450:	3003e648 	.word	0x3003e648

0c030454 <sst_flash_fs_mblock_migrate_lb0_data_to_scratch>:
{
 c030454:	b530      	push	{r4, r5, lr}
    return sst_flash_fs_ctx.scratch_metablock;
 c030456:	4b0b      	ldr	r3, [pc, #44]	; (c030484 <sst_flash_fs_mblock_migrate_lb0_data_to_scratch+0x30>)
{
 c030458:	b087      	sub	sp, #28
    err = sst_flash_fs_mblock_read_block_metadata(SST_LOGICAL_DBLOCK0,
 c03045a:	a902      	add	r1, sp, #8
 c03045c:	2000      	movs	r0, #0
    return sst_flash_fs_ctx.active_metablock;
 c03045e:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
    err = sst_flash_fs_mblock_read_block_metadata(SST_LOGICAL_DBLOCK0,
 c030462:	f7ff ffed 	bl	c030440 <sst_flash_fs_mblock_read_block_metadata>
    if (err != PSA_PS_SUCCESS) {
 c030466:	b950      	cbnz	r0, c03047e <sst_flash_fs_mblock_migrate_lb0_data_to_scratch+0x2a>
    data_size = ((SST_BLOCK_SIZE - block_meta.data_start)
 c030468:	e9dd 3103 	ldrd	r3, r1, [sp, #12]
 c03046c:	4419      	add	r1, r3
 c03046e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    err = sst_flash_block_to_block_move(scratch_metablock,
 c030472:	9100      	str	r1, [sp, #0]
 c030474:	462a      	mov	r2, r5
 c030476:	4619      	mov	r1, r3
 c030478:	4620      	mov	r0, r4
 c03047a:	f7ff fcdd 	bl	c02fe38 <sst_flash_block_to_block_move>
}
 c03047e:	b007      	add	sp, #28
 c030480:	bd30      	pop	{r4, r5, pc}
 c030482:	bf00      	nop
 c030484:	3003e648 	.word	0x3003e648

0c030488 <sst_flash_fs_mblock_reserve_file>:

psa_ps_status_t sst_flash_fs_mblock_reserve_file(uint32_t fid, uint32_t size,
                                            uint32_t *idx,
                                            struct sst_file_meta_t *file_meta,
                                            struct sst_block_meta_t *block_meta)
{
 c030488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c03048c:	b087      	sub	sp, #28
 c03048e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 c030490:	4681      	mov	r9, r0
 c030492:	460f      	mov	r7, r1
        err = sst_flash_fs_mblock_read_block_metadata(i, block_meta);
 c030494:	2000      	movs	r0, #0
 c030496:	4631      	mov	r1, r6
{
 c030498:	4690      	mov	r8, r2
 c03049a:	461d      	mov	r5, r3
        err = sst_flash_fs_mblock_read_block_metadata(i, block_meta);
 c03049c:	f7ff ffd0 	bl	c030440 <sst_flash_fs_mblock_read_block_metadata>
        if (err != PSA_PS_SUCCESS) {
 c0304a0:	4604      	mov	r4, r0
 c0304a2:	bb30      	cbnz	r0, c0304f2 <sst_flash_fs_mblock_reserve_file+0x6a>
        if (block_meta->free_size >= size) {
 c0304a4:	68b1      	ldr	r1, [r6, #8]
 c0304a6:	428f      	cmp	r7, r1
 c0304a8:	d825      	bhi.n	c0304f6 <sst_flash_fs_mblock_reserve_file+0x6e>
            file_meta->data_idx = SST_BLOCK_SIZE - block_meta->free_size;
 c0304aa:	f5c1 5380 	rsb	r3, r1, #4096	; 0x1000
            block_meta->free_size -= size;
 c0304ae:	1bc9      	subs	r1, r1, r7
            file_meta->lblock = i;
 c0304b0:	6028      	str	r0, [r5, #0]
            file_meta->data_idx = SST_BLOCK_SIZE - block_meta->free_size;
 c0304b2:	606b      	str	r3, [r5, #4]
            file_meta->id = fid;
 c0304b4:	e9c5 7903 	strd	r7, r9, [r5, #12]
            file_meta->cur_size = 0;
 c0304b8:	60a8      	str	r0, [r5, #8]
            block_meta->free_size -= size;
 c0304ba:	60b1      	str	r1, [r6, #8]
    for (i = 0; i < SST_MAX_NUM_OBJECTS; i++) {
 c0304bc:	2500      	movs	r5, #0
        err = sst_flash_fs_mblock_read_file_meta(i, &tmp_metadata);
 c0304be:	4669      	mov	r1, sp
 c0304c0:	4628      	mov	r0, r5
 c0304c2:	f7ff ff9b 	bl	c0303fc <sst_flash_fs_mblock_read_file_meta>
        if (err != PSA_PS_SUCCESS) {
 c0304c6:	b930      	cbnz	r0, c0304d6 <sst_flash_fs_mblock_reserve_file+0x4e>
        if (sst_utils_validate_fid(tmp_metadata.id) != PSA_PS_SUCCESS) {
 c0304c8:	9804      	ldr	r0, [sp, #16]
 c0304ca:	f000 fbbb 	bl	c030c44 <sst_utils_validate_fid>
 c0304ce:	b920      	cbnz	r0, c0304da <sst_flash_fs_mblock_reserve_file+0x52>
    for (i = 0; i < SST_MAX_NUM_OBJECTS; i++) {
 c0304d0:	3501      	adds	r5, #1
 c0304d2:	2d0d      	cmp	r5, #13
 c0304d4:	d1f3      	bne.n	c0304be <sst_flash_fs_mblock_reserve_file+0x36>
            return SST_METADATA_INVALID_INDEX;
 c0304d6:	f64f 75ff 	movw	r5, #65535	; 0xffff
    psa_ps_status_t err;

    err = sst_mblock_reserve_file(fid, size, file_meta, block_meta);

    *idx = sst_get_free_file_index();
 c0304da:	f8c8 5000 	str.w	r5, [r8]
    if ((err != PSA_PS_SUCCESS) ||
 c0304de:	b964      	cbnz	r4, c0304fa <sst_flash_fs_mblock_reserve_file+0x72>
        (*idx == SST_METADATA_INVALID_INDEX)) {
        return PSA_PS_ERROR_INSUFFICIENT_SPACE;
 c0304e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 c0304e4:	429d      	cmp	r5, r3
 c0304e6:	bf08      	it	eq
 c0304e8:	2403      	moveq	r4, #3
    }

    return PSA_PS_SUCCESS;
}
 c0304ea:	4620      	mov	r0, r4
 c0304ec:	b007      	add	sp, #28
 c0304ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return PSA_PS_ERROR_OPERATION_FAILED;
 c0304f2:	240b      	movs	r4, #11
 c0304f4:	e7e2      	b.n	c0304bc <sst_flash_fs_mblock_reserve_file+0x34>
    return PSA_PS_ERROR_INSUFFICIENT_SPACE;
 c0304f6:	2403      	movs	r4, #3
 c0304f8:	e7e0      	b.n	c0304bc <sst_flash_fs_mblock_reserve_file+0x34>
        return PSA_PS_ERROR_INSUFFICIENT_SPACE;
 c0304fa:	2403      	movs	r4, #3
 c0304fc:	e7f5      	b.n	c0304ea <sst_flash_fs_mblock_reserve_file+0x62>
	...

0c030500 <sst_flash_fs_mblock_reset_metablock>:

psa_ps_status_t sst_flash_fs_mblock_reset_metablock(void)
{
 c030500:	b530      	push	{r4, r5, lr}
 c030502:	b08b      	sub	sp, #44	; 0x2c

    /* Erase both metadata blocks. If at least one metadata block is valid,
     * ensure that the active metadata block is erased last to prevent rollback
     * in the case of a power failure between the two erases.
     */
    if (sst_init_get_active_metablock() == PSA_PS_SUCCESS) {
 c030504:	f7ff fed6 	bl	c0302b4 <sst_init_get_active_metablock>
 c030508:	2800      	cmp	r0, #0
 c03050a:	d134      	bne.n	c030576 <sst_flash_fs_mblock_reset_metablock+0x76>
        metablock_to_erase_first = sst_flash_fs_ctx.scratch_metablock;
 c03050c:	4b21      	ldr	r3, [pc, #132]	; (c030594 <sst_flash_fs_mblock_reset_metablock+0x94>)
 c03050e:	68dc      	ldr	r4, [r3, #12]
    }

    err = sst_flash_erase_block(metablock_to_erase_first);
 c030510:	4620      	mov	r0, r4
 c030512:	f7ff fcc3 	bl	c02fe9c <sst_flash_erase_block>
    if (err != PSA_PS_SUCCESS) {
 c030516:	bb60      	cbnz	r0, c030572 <sst_flash_fs_mblock_reset_metablock+0x72>
        return err;
    }

    err = sst_flash_erase_block(SST_OTHER_META_BLOCK(metablock_to_erase_first));
 c030518:	fab4 f084 	clz	r0, r4
 c03051c:	0940      	lsrs	r0, r0, #5
 c03051e:	f7ff fcbd 	bl	c02fe9c <sst_flash_erase_block>
    if (err != PSA_PS_SUCCESS) {
 c030522:	bb30      	cbnz	r0, c030572 <sst_flash_fs_mblock_reset_metablock+0x72>
        return err;
    }

    sst_flash_fs_ctx.meta_block_header.active_swap_count = 0;
    sst_flash_fs_ctx.meta_block_header.scratch_dblock = SST_INIT_SCRATCH_DBLOCK;
 c030524:	2501      	movs	r5, #1
    /* Fill the block metadata for logical datablock 0, which has the physical
     * id of the active metadata block. For this datablock, the space available
     * for data is from the end of the metadata to the end of the block.
     */
    block_meta.data_start = SST_ALL_METADATA_SIZE;
    block_meta.free_size = (SST_BLOCK_SIZE - block_meta.data_start);
 c030526:	f44f 72a8 	mov.w	r2, #336	; 0x150
 c03052a:	f44f 636b 	mov.w	r3, #3760	; 0xeb0
    sst_flash_fs_ctx.meta_block_header.scratch_dblock = SST_INIT_SCRATCH_DBLOCK;
 c03052e:	4c19      	ldr	r4, [pc, #100]	; (c030594 <sst_flash_fs_mblock_reset_metablock+0x94>)
    block_meta.phy_id = SST_METADATA_BLOCK0;
 c030530:	a90a      	add	r1, sp, #40	; 0x28
    block_meta.free_size = (SST_BLOCK_SIZE - block_meta.data_start);
 c030532:	e9cd 2301 	strd	r2, r3, [sp, #4]
    sst_flash_fs_ctx.active_metablock = SST_METADATA_BLOCK0;
 c030536:	e9c4 0502 	strd	r0, r5, [r4, #8]
    block_meta.phy_id = SST_METADATA_BLOCK0;
 c03053a:	f841 0d28 	str.w	r0, [r1, #-40]!
    sst_flash_fs_ctx.meta_block_header.scratch_dblock = SST_INIT_SCRATCH_DBLOCK;
 c03053e:	6025      	str	r5, [r4, #0]
 c030540:	80a5      	strh	r5, [r4, #4]
    err = sst_flash_write(meta_block, (uint8_t *)block_meta, pos,
 c030542:	2310      	movs	r3, #16
 c030544:	2208      	movs	r2, #8
 c030546:	4628      	mov	r0, r5
 c030548:	f7ff fc66 	bl	c02fe18 <sst_flash_write>
    err = sst_mblock_update_scratch_block_meta(SST_LOGICAL_DBLOCK0,
                                               &block_meta);
    if (err != PSA_PS_SUCCESS) {
 c03054c:	b988      	cbnz	r0, c030572 <sst_flash_fs_mblock_reset_metablock+0x72>
     * ids beginning from 1 and physical ids initially beginning from
     * SST_INIT_DBLOCK_START. For these datablocks, the space available for
     * data is the entire block.
     */
    block_meta.data_start = 0;
    block_meta.free_size = SST_BLOCK_SIZE;
 c03054e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    block_meta.data_start = 0;
 c030552:	9001      	str	r0, [sp, #4]
    return (memset(ptr, value, num));
 c030554:	4601      	mov	r1, r0
 c030556:	2218      	movs	r2, #24
 c030558:	a804      	add	r0, sp, #16
    block_meta.free_size = SST_BLOCK_SIZE;
 c03055a:	9302      	str	r3, [sp, #8]
 c03055c:	2518      	movs	r5, #24
 c03055e:	f7e4 fa32 	bl	c0149c6 <memset>
    err = sst_flash_write(scratch_block, (uint8_t *)file_meta, pos,
 c030562:	2318      	movs	r3, #24
 c030564:	462a      	mov	r2, r5
 c030566:	a904      	add	r1, sp, #16
 c030568:	68e0      	ldr	r0, [r4, #12]
 c03056a:	f7ff fc55 	bl	c02fe18 <sst_flash_write>
                     SST_FILE_METADATA_SIZE);
    for (i = 0; i < SST_MAX_NUM_OBJECTS; i++) {
        /* In the beginning phys id is same as logical id */
        /* Update file metadata to reflect new attributes */
        err = sst_mblock_update_scratch_file_meta(i, &file_metadata);
        if (err != PSA_PS_SUCCESS) {
 c03056e:	b120      	cbz	r0, c03057a <sst_flash_fs_mblock_reset_metablock+0x7a>
            return PSA_PS_ERROR_OPERATION_FAILED;
 c030570:	200b      	movs	r0, #11

    /* Swap active and scratch metablocks */
    sst_mblock_swap_metablocks();

    return PSA_PS_SUCCESS;
}
 c030572:	b00b      	add	sp, #44	; 0x2c
 c030574:	bd30      	pop	{r4, r5, pc}
    uint32_t metablock_to_erase_first = SST_METADATA_BLOCK0;
 c030576:	2400      	movs	r4, #0
 c030578:	e7ca      	b.n	c030510 <sst_flash_fs_mblock_reset_metablock+0x10>
 c03057a:	3518      	adds	r5, #24
    for (i = 0; i < SST_MAX_NUM_OBJECTS; i++) {
 c03057c:	f5b5 7fa8 	cmp.w	r5, #336	; 0x150
 c030580:	d1ef      	bne.n	c030562 <sst_flash_fs_mblock_reset_metablock+0x62>
    err = sst_mblock_write_scratch_meta_header();
 c030582:	f7ff fe87 	bl	c030294 <sst_mblock_write_scratch_meta_header>
    if (err != PSA_PS_SUCCESS) {
 c030586:	2800      	cmp	r0, #0
 c030588:	d1f2      	bne.n	c030570 <sst_flash_fs_mblock_reset_metablock+0x70>
    sst_flash_fs_ctx.scratch_metablock = sst_flash_fs_ctx.active_metablock;
 c03058a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    sst_flash_fs_ctx.active_metablock = tmp_block;
 c03058e:	e9c4 3202 	strd	r3, r2, [r4, #8]
 c030592:	e7ee      	b.n	c030572 <sst_flash_fs_mblock_reset_metablock+0x72>
 c030594:	3003e648 	.word	0x3003e648

0c030598 <sst_flash_fs_mblock_set_data_scratch>:

void sst_flash_fs_mblock_set_data_scratch(uint32_t phy_id, uint32_t lblock)
{
    if (lblock != SST_LOGICAL_DBLOCK0) {
 c030598:	b109      	cbz	r1, c03059e <sst_flash_fs_mblock_set_data_scratch+0x6>
        sst_flash_fs_ctx.meta_block_header.scratch_dblock = phy_id;
 c03059a:	4b01      	ldr	r3, [pc, #4]	; (c0305a0 <sst_flash_fs_mblock_set_data_scratch+0x8>)
 c03059c:	6018      	str	r0, [r3, #0]
    }
}
 c03059e:	4770      	bx	lr
 c0305a0:	3003e648 	.word	0x3003e648

0c0305a4 <sst_flash_fs_mblock_update_scratch_block_meta>:

psa_ps_status_t sst_flash_fs_mblock_update_scratch_block_meta(
                                            uint32_t lblock,
                                            struct sst_block_meta_t *block_meta)
{
 c0305a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c0305a8:	4d1d      	ldr	r5, [pc, #116]	; (c030620 <sst_flash_fs_mblock_update_scratch_block_meta+0x7c>)
 c0305aa:	b086      	sub	sp, #24
 c0305ac:	68ef      	ldr	r7, [r5, #12]

    /* If the file is the logical block 0, then update the physical ID to the
     * current scratch metadata block so that it is correct after the metadata
     * blocks are swapped.
     */
    if (lblock == SST_LOGICAL_DBLOCK0) {
 c0305ae:	4606      	mov	r6, r0
 c0305b0:	b900      	cbnz	r0, c0305b4 <sst_flash_fs_mblock_update_scratch_block_meta+0x10>
        block_meta->phy_id = sst_cur_meta_scratch_id();
 c0305b2:	600f      	str	r7, [r1, #0]
             (lblock * SST_BLOCK_METADATA_SIZE);
 c0305b4:	0134      	lsls	r4, r6, #4
    err = sst_flash_write(meta_block, (uint8_t *)block_meta, pos,
 c0305b6:	2310      	movs	r3, #16
 c0305b8:	f104 0208 	add.w	r2, r4, #8
 c0305bc:	4638      	mov	r0, r7
 c0305be:	f7ff fc2b 	bl	c02fe18 <sst_flash_write>
    }

    err = sst_mblock_update_scratch_block_meta(lblock, block_meta);
    if (err != PSA_PS_SUCCESS) {
 c0305c2:	b990      	cbnz	r0, c0305ea <sst_flash_fs_mblock_update_scratch_block_meta+0x46>
    return sst_flash_fs_ctx.active_metablock;
 c0305c4:	e9d5 8702 	ldrd	r8, r7, [r5, #8]
    if (lblock != SST_LOGICAL_DBLOCK0) {
 c0305c8:	b95e      	cbnz	r6, c0305e2 <sst_flash_fs_mblock_update_scratch_block_meta+0x3e>
    offset = SST_BLOCK_META_HEADER_SIZE +
 c0305ca:	f104 0318 	add.w	r3, r4, #24
    size = sst_mblock_file_meta_offset(0) - pos;
 c0305ce:	4264      	negs	r4, r4
    err = sst_flash_block_to_block_move(scratch_block, pos,
 c0305d0:	9400      	str	r4, [sp, #0]
 c0305d2:	4642      	mov	r2, r8
 c0305d4:	4619      	mov	r1, r3
 c0305d6:	4638      	mov	r0, r7
 c0305d8:	f7ff fc2e 	bl	c02fe38 <sst_flash_block_to_block_move>
    }

    err = sst_mblock_copy_remaining_block_meta(lblock);

    return err;
}
 c0305dc:	b006      	add	sp, #24
 c0305de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        err = sst_flash_fs_mblock_read_block_metadata(SST_LOGICAL_DBLOCK0,
 c0305e2:	a902      	add	r1, sp, #8
 c0305e4:	f7ff ff2c 	bl	c030440 <sst_flash_fs_mblock_read_block_metadata>
        if (err != PSA_PS_SUCCESS) {
 c0305e8:	b108      	cbz	r0, c0305ee <sst_flash_fs_mblock_update_scratch_block_meta+0x4a>
        return PSA_PS_ERROR_OPERATION_FAILED;
 c0305ea:	200b      	movs	r0, #11
 c0305ec:	e7f6      	b.n	c0305dc <sst_flash_fs_mblock_update_scratch_block_meta+0x38>
    err = sst_flash_write(meta_block, (uint8_t *)block_meta, pos,
 c0305ee:	2208      	movs	r2, #8
 c0305f0:	2310      	movs	r3, #16
 c0305f2:	eb0d 0102 	add.w	r1, sp, r2
 c0305f6:	68e8      	ldr	r0, [r5, #12]
        block_meta.phy_id = scratch_block;
 c0305f8:	9702      	str	r7, [sp, #8]
    err = sst_flash_write(meta_block, (uint8_t *)block_meta, pos,
 c0305fa:	f7ff fc0d 	bl	c02fe18 <sst_flash_write>
        if (err != PSA_PS_SUCCESS) {
 c0305fe:	2800      	cmp	r0, #0
 c030600:	d1f3      	bne.n	c0305ea <sst_flash_fs_mblock_update_scratch_block_meta+0x46>
        if (lblock > 1) {
 c030602:	2e01      	cmp	r6, #1
 c030604:	d9e1      	bls.n	c0305ca <sst_flash_fs_mblock_update_scratch_block_meta+0x26>
            size = sst_mblock_block_meta_offset(lblock) - pos;
 c030606:	f1a4 0310 	sub.w	r3, r4, #16
            err = sst_flash_block_to_block_move(scratch_block, pos, meta_block,
 c03060a:	9300      	str	r3, [sp, #0]
 c03060c:	2318      	movs	r3, #24
 c03060e:	4642      	mov	r2, r8
 c030610:	4619      	mov	r1, r3
 c030612:	4638      	mov	r0, r7
 c030614:	f7ff fc10 	bl	c02fe38 <sst_flash_block_to_block_move>
            if (err != PSA_PS_SUCCESS) {
 c030618:	2800      	cmp	r0, #0
 c03061a:	d0d6      	beq.n	c0305ca <sst_flash_fs_mblock_update_scratch_block_meta+0x26>
 c03061c:	e7de      	b.n	c0305dc <sst_flash_fs_mblock_update_scratch_block_meta+0x38>
 c03061e:	bf00      	nop
 c030620:	3003e648 	.word	0x3003e648

0c030624 <sst_flash_fs_mblock_update_scratch_file_meta>:
    err = sst_flash_write(scratch_block, (uint8_t *)file_meta, pos,
 c030624:	2318      	movs	r3, #24
 c030626:	fb00 3203 	mla	r2, r0, r3, r3
 c03062a:	4802      	ldr	r0, [pc, #8]	; (c030634 <sst_flash_fs_mblock_update_scratch_file_meta+0x10>)
 c03062c:	68c0      	ldr	r0, [r0, #12]
 c03062e:	f7ff bbf3 	b.w	c02fe18 <sst_flash_write>
 c030632:	bf00      	nop
 c030634:	3003e648 	.word	0x3003e648

0c030638 <sst_remove_old_data>:
 * \param[in] old_fid  Old file ID to remove.
 *
 * \return Returns error code as specified in \ref psa_ps_status_t
 */
static psa_ps_status_t sst_remove_old_data(uint32_t old_fid)
{
 c030638:	b510      	push	{r4, lr}
 c03063a:	4604      	mov	r4, r0
    psa_ps_status_t err;

    /* Delete old object table from the persistent area */
    err = sst_object_table_delete_old_table();
 c03063c:	f000 faf0 	bl	c030c20 <sst_object_table_delete_old_table>
    if (err != PSA_PS_SUCCESS) {
 c030640:	b920      	cbnz	r0, c03064c <sst_remove_old_data+0x14>
        return err;
    }

    /* Delete old file from the persistent area */
    err = sst_flash_fs_file_delete(old_fid);
 c030642:	4620      	mov	r0, r4

    return err;
}
 c030644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    err = sst_flash_fs_file_delete(old_fid);
 c030648:	f7ff bd16 	b.w	c030078 <sst_flash_fs_file_delete>
}
 c03064c:	bd10      	pop	{r4, pc}
	...

0c030650 <sst_system_prepare>:
}

#endif /* !SST_ENCRYPTION */

psa_ps_status_t sst_system_prepare(void)
{
 c030650:	b510      	push	{r4, lr}
    psa_ps_status_t err;

    err = sst_flash_fs_prepare();
 c030652:	f7ff fc31 	bl	c02feb8 <sst_flash_fs_prepare>
    if (err != PSA_PS_SUCCESS) {
 c030656:	b930      	cbnz	r0, c030666 <sst_system_prepare+0x16>
    /* Reuse the allocated g_sst_object.data to store a temporary object table
     * data to be validate inside the function.
     * The stored date will be cleaned up when the g_sst_object.data will
     * be used for the first time in the object system.
     */
    err = sst_object_table_init(g_sst_object.data);
 c030658:	4c03      	ldr	r4, [pc, #12]	; (c030668 <sst_system_prepare+0x18>)
 c03065a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 c03065e:	f000 f983 	bl	c030968 <sst_object_table_init>

#ifdef SST_ENCRYPTION
    g_obj_tbl_info.tag = g_sst_object.header.crypto.ref.tag;
 c030662:	4b02      	ldr	r3, [pc, #8]	; (c03066c <sst_system_prepare+0x1c>)
 c030664:	605c      	str	r4, [r3, #4]
#endif

    return err;
}
 c030666:	bd10      	pop	{r4, pc}
 c030668:	3003e660 	.word	0x3003e660
 c03066c:	3003e658 	.word	0x3003e658

0c030670 <sst_object_read>:

psa_ps_status_t sst_object_read(psa_ps_uid_t uid, int32_t client_id,
                                uint32_t offset, uint32_t size)
{
 c030670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    psa_ps_status_t err;

    /* Retrieve the object information from the object table if the object
     * exists.
     */
    err = sst_object_table_get_obj_tbl_info(uid, client_id, &g_obj_tbl_info);
 c030672:	4f11      	ldr	r7, [pc, #68]	; (c0306b8 <sst_object_read+0x48>)
{
 c030674:	461e      	mov	r6, r3
    err = sst_object_table_get_obj_tbl_info(uid, client_id, &g_obj_tbl_info);
 c030676:	463b      	mov	r3, r7
 c030678:	f000 fa84 	bl	c030b84 <sst_object_table_get_obj_tbl_info>
    if (err != PSA_PS_SUCCESS) {
 c03067c:	4604      	mov	r4, r0
 c03067e:	b9c8      	cbnz	r0, c0306b4 <sst_object_read+0x44>
        return err;
    }

    /* Read object */
#ifdef SST_ENCRYPTION
    err = sst_encrypted_object_read(g_obj_tbl_info.fid, &g_sst_object);
 c030680:	4d0e      	ldr	r5, [pc, #56]	; (c0306bc <sst_object_read+0x4c>)
 c030682:	6838      	ldr	r0, [r7, #0]
 c030684:	4629      	mov	r1, r5
 c030686:	f7ff fb1f 	bl	c02fcc8 <sst_encrypted_object_read>
#else
    /* Read object header */
    err = sst_read_object(READ_ALL_OBJECT);
#endif
    if (err != PSA_PS_SUCCESS) {
 c03068a:	4604      	mov	r4, r0
 c03068c:	b960      	cbnz	r0, c0306a8 <sst_object_read+0x38>
        goto clear_data_and_return;
    }

    /* Boundary check the incoming request */
    err = sst_utils_check_contained_in(g_sst_object.header.info.current_size,
 c03068e:	9a06      	ldr	r2, [sp, #24]
 c030690:	4631      	mov	r1, r6
 c030692:	69e8      	ldr	r0, [r5, #28]
 c030694:	f000 facc 	bl	c030c30 <sst_utils_check_contained_in>
                                       offset, size);
    if (err != PSA_PS_SUCCESS) {
 c030698:	4604      	mov	r4, r0
 c03069a:	b928      	cbnz	r0, c0306a8 <sst_object_read+0x38>
        goto clear_data_and_return;
    }

    /* Copy the decrypted object data to the output buffer */
    sst_req_mngr_write_asset_data(g_sst_object.data + offset, size);
 c03069c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 c0306a0:	9906      	ldr	r1, [sp, #24]
 c0306a2:	4430      	add	r0, r6
 c0306a4:	f001 fd34 	bl	c032110 <sst_req_mngr_write_asset_data>
 c0306a8:	f640 0228 	movw	r2, #2088	; 0x828
 c0306ac:	2100      	movs	r1, #0
 c0306ae:	4803      	ldr	r0, [pc, #12]	; (c0306bc <sst_object_read+0x4c>)
 c0306b0:	f7e4 f989 	bl	c0149c6 <memset>
    /* Remove data stored in the object before leaving the function */
    (void)tfm_memset(&g_sst_object, SST_DEFAULT_EMPTY_BUFF_VAL,
                     SST_MAX_OBJECT_SIZE);

    return err;
}
 c0306b4:	4620      	mov	r0, r4
 c0306b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c0306b8:	3003e658 	.word	0x3003e658
 c0306bc:	3003e660 	.word	0x3003e660

0c0306c0 <sst_object_create>:

psa_ps_status_t sst_object_create(psa_ps_uid_t uid, int32_t client_id,
                                  psa_ps_create_flags_t create_flags,
                                  uint32_t size)
{
 c0306c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0306c4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 c0306c6:	4680      	mov	r8, r0
#ifndef SST_ENCRYPTION
    uint32_t wrt_size;
#endif

    /* Boundary check the incoming request */
    if (size > SST_MAX_ASSET_SIZE) {
 c0306c8:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
{
 c0306cc:	4689      	mov	r9, r1
 c0306ce:	4692      	mov	sl, r2
 c0306d0:	469b      	mov	fp, r3
    if (size > SST_MAX_ASSET_SIZE) {
 c0306d2:	d85b      	bhi.n	c03078c <sst_object_create+0xcc>
    }

    /* Retrieve the object information from the object table if the object
     * exists.
     */
    err = sst_object_table_get_obj_tbl_info(uid, client_id, &g_obj_tbl_info);
 c0306d4:	4d2e      	ldr	r5, [pc, #184]	; (c030790 <sst_object_create+0xd0>)
 c0306d6:	462b      	mov	r3, r5
 c0306d8:	f000 fa54 	bl	c030b84 <sst_object_table_get_obj_tbl_info>
    if (err == PSA_PS_SUCCESS) {
 c0306dc:	4604      	mov	r4, r0
 c0306de:	2800      	cmp	r0, #0
 c0306e0:	d13b      	bne.n	c03075a <sst_object_create+0x9a>
#ifdef SST_ENCRYPTION
        /* Read the object */
        err = sst_encrypted_object_read(g_obj_tbl_info.fid, &g_sst_object);
 c0306e2:	4f2c      	ldr	r7, [pc, #176]	; (c030794 <sst_object_create+0xd4>)
 c0306e4:	6828      	ldr	r0, [r5, #0]
 c0306e6:	4639      	mov	r1, r7
 c0306e8:	f7ff faee 	bl	c02fcc8 <sst_encrypted_object_read>
#else
        /* Read the object header */
        err = sst_read_object(READ_HEADER_ONLY);
#endif
        if (err != PSA_PS_SUCCESS) {
 c0306ec:	4604      	mov	r4, r0
 c0306ee:	bb50      	cbnz	r0, c030746 <sst_object_create+0x86>

        /* If the object exists and has the write once flag set, then it cannot
         * be modified.
         */
        if (g_sst_object.header.info.create_flags
            & PSA_PS_FLAG_WRITE_ONCE) {
 c0306f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        if (g_sst_object.header.info.create_flags
 c0306f2:	07db      	lsls	r3, r3, #31
 c0306f4:	d448      	bmi.n	c030788 <sst_object_create+0xc8>
    uint32_t fid_am_reserved = 1;
 c0306f6:	2301      	movs	r3, #1
            goto clear_data_and_return;
        }

        /* Update the create flags and max object size */
        g_sst_object.header.info.create_flags = create_flags;
        g_sst_object.header.info.max_size = size;
 c0306f8:	e9c7 6b08 	strd	r6, fp, [r7, #32]

        /* Save old file ID */
        old_fid = g_obj_tbl_info.fid;
 c0306fc:	682f      	ldr	r7, [r5, #0]
    } else {
        goto clear_data_and_return;
    }

    /* Update the object data */
    err = sst_req_mngr_read_asset_data(g_sst_object.data, size);
 c0306fe:	f8df b094 	ldr.w	fp, [pc, #148]	; c030794 <sst_object_create+0xd4>
 c030702:	4631      	mov	r1, r6
 c030704:	f10b 0028 	add.w	r0, fp, #40	; 0x28
 c030708:	9301      	str	r3, [sp, #4]
 c03070a:	f001 fcf1 	bl	c0320f0 <sst_req_mngr_read_asset_data>
    if (err != PSA_PS_SUCCESS) {
 c03070e:	9b01      	ldr	r3, [sp, #4]
 c030710:	4604      	mov	r4, r0
 c030712:	b9c0      	cbnz	r0, c030746 <sst_object_create+0x86>

    /* Update the current object size */
    g_sst_object.header.info.current_size = size;

    /* Get new file ID */
    err = sst_object_table_get_free_fid(fid_am_reserved,
 c030714:	491e      	ldr	r1, [pc, #120]	; (c030790 <sst_object_create+0xd0>)
 c030716:	4618      	mov	r0, r3
    g_sst_object.header.info.current_size = size;
 c030718:	f8cb 601c 	str.w	r6, [fp, #28]
    err = sst_object_table_get_free_fid(fid_am_reserved,
 c03071c:	f000 f9a6 	bl	c030a6c <sst_object_table_get_free_fid>
                                        &g_obj_tbl_info.fid);
    if (err != PSA_PS_SUCCESS) {
 c030720:	4604      	mov	r4, r0
 c030722:	b980      	cbnz	r0, c030746 <sst_object_create+0x86>
        goto clear_data_and_return;
    }

#ifdef SST_ENCRYPTION
    err = sst_encrypted_object_write(g_obj_tbl_info.fid, &g_sst_object);
 c030724:	4659      	mov	r1, fp
 c030726:	6828      	ldr	r0, [r5, #0]
 c030728:	f7ff fb0c 	bl	c02fd44 <sst_encrypted_object_write>
    wrt_size = SST_OBJECT_SIZE(g_sst_object.header.info.current_size);

    /* Write g_sst_object */
    err = sst_write_object(wrt_size);
#endif
    if (err != PSA_PS_SUCCESS) {
 c03072c:	4604      	mov	r4, r0
 c03072e:	b950      	cbnz	r0, c030746 <sst_object_create+0x86>
    }

    /* Update the table with the new internal ID and version for the object, and
     * store it in the persistent area.
     */
    err = sst_object_table_set_obj_tbl_info(uid, client_id, &g_obj_tbl_info);
 c030730:	4b17      	ldr	r3, [pc, #92]	; (c030790 <sst_object_create+0xd0>)
 c030732:	4652      	mov	r2, sl
 c030734:	4640      	mov	r0, r8
 c030736:	4649      	mov	r1, r9
 c030738:	f000 f9c4 	bl	c030ac4 <sst_object_table_set_obj_tbl_info>
    if (err != PSA_PS_SUCCESS) {
 c03073c:	4604      	mov	r4, r0
 c03073e:	b1d0      	cbz	r0, c030776 <sst_object_create+0xb6>
        /* Remove new object as object table is not persistent and propagate
         * object table manipulation error.
         */
        (void)sst_flash_fs_file_delete(g_obj_tbl_info.fid);
 c030740:	6828      	ldr	r0, [r5, #0]
 c030742:	f7ff fc99 	bl	c030078 <sst_flash_fs_file_delete>
 c030746:	f640 0228 	movw	r2, #2088	; 0x828
 c03074a:	2100      	movs	r1, #0
 c03074c:	4811      	ldr	r0, [pc, #68]	; (c030794 <sst_object_create+0xd4>)
 c03074e:	f7e4 f93a 	bl	c0149c6 <memset>
    /* Remove data stored in the object before leaving the function */
    (void)tfm_memset(&g_sst_object, SST_DEFAULT_EMPTY_BUFF_VAL,
                     SST_MAX_OBJECT_SIZE);

    return err;
}
 c030752:	4620      	mov	r0, r4
 c030754:	b003      	add	sp, #12
 c030756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (err == PSA_PS_ERROR_UID_NOT_FOUND) {
 c03075a:	2805      	cmp	r0, #5
 c03075c:	d1f3      	bne.n	c030746 <sst_object_create+0x86>
 c03075e:	4b0d      	ldr	r3, [pc, #52]	; (c030794 <sst_object_create+0xd4>)
 c030760:	f640 0228 	movw	r2, #2088	; 0x828
 c030764:	4618      	mov	r0, r3
 c030766:	2100      	movs	r1, #0
 c030768:	f7e4 f92d 	bl	c0149c6 <memset>
    uint32_t old_fid = SST_INVALID_FID;
 c03076c:	2700      	movs	r7, #0
    obj->header.info.create_flags = create_flags;
 c03076e:	e9c0 6b08 	strd	r6, fp, [r0, #32]
        fid_am_reserved = 2;
 c030772:	2302      	movs	r3, #2
 c030774:	e7c3      	b.n	c0306fe <sst_object_create+0x3e>
    if (old_fid == SST_INVALID_FID) {
 c030776:	b91f      	cbnz	r7, c030780 <sst_object_create+0xc0>
        err = sst_object_table_delete_old_table();
 c030778:	f000 fa52 	bl	c030c20 <sst_object_table_delete_old_table>
        err = sst_remove_old_data(old_fid);
 c03077c:	4604      	mov	r4, r0
 c03077e:	e7e2      	b.n	c030746 <sst_object_create+0x86>
 c030780:	4638      	mov	r0, r7
 c030782:	f7ff ff59 	bl	c030638 <sst_remove_old_data>
 c030786:	e7f9      	b.n	c03077c <sst_object_create+0xbc>
            err = PSA_PS_ERROR_WRITE_ONCE;
 c030788:	2401      	movs	r4, #1
 c03078a:	e7dc      	b.n	c030746 <sst_object_create+0x86>
        return PSA_PS_ERROR_INVALID_ARGUMENT;
 c03078c:	2408      	movs	r4, #8
 c03078e:	e7e0      	b.n	c030752 <sst_object_create+0x92>
 c030790:	3003e658 	.word	0x3003e658
 c030794:	3003e660 	.word	0x3003e660

0c030798 <sst_object_get_info>:
    return err;
}

psa_ps_status_t sst_object_get_info(psa_ps_uid_t uid, int32_t client_id,
                                    struct psa_ps_info_t *info)
{
 c030798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    psa_ps_status_t err;

    /* Retrieve the object information from the object table if the object
     * exists.
     */
    err = sst_object_table_get_obj_tbl_info(uid, client_id, &g_obj_tbl_info);
 c03079a:	4f0d      	ldr	r7, [pc, #52]	; (c0307d0 <sst_object_get_info+0x38>)
{
 c03079c:	461e      	mov	r6, r3
    err = sst_object_table_get_obj_tbl_info(uid, client_id, &g_obj_tbl_info);
 c03079e:	463b      	mov	r3, r7
 c0307a0:	f000 f9f0 	bl	c030b84 <sst_object_table_get_obj_tbl_info>
    if (err != PSA_PS_SUCCESS) {
 c0307a4:	4604      	mov	r4, r0
 c0307a6:	b980      	cbnz	r0, c0307ca <sst_object_get_info+0x32>
        return err;
    }

#ifdef SST_ENCRYPTION
    err = sst_encrypted_object_read(g_obj_tbl_info.fid, &g_sst_object);
 c0307a8:	4d0a      	ldr	r5, [pc, #40]	; (c0307d4 <sst_object_get_info+0x3c>)
 c0307aa:	6838      	ldr	r0, [r7, #0]
 c0307ac:	4629      	mov	r1, r5
 c0307ae:	f7ff fa8b 	bl	c02fcc8 <sst_encrypted_object_read>
#else
    err = sst_read_object(READ_HEADER_ONLY);
#endif
    if (err != PSA_PS_SUCCESS) {
 c0307b2:	4604      	mov	r4, r0
 c0307b4:	b918      	cbnz	r0, c0307be <sst_object_get_info+0x26>
        goto clear_data_and_return;
    }

    /* Copy SST object info to the PSA PS info struct */
    info->size = g_sst_object.header.info.current_size;
 c0307b6:	69eb      	ldr	r3, [r5, #28]
 c0307b8:	6033      	str	r3, [r6, #0]
    info->flags = g_sst_object.header.info.create_flags;
 c0307ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 c0307bc:	6073      	str	r3, [r6, #4]
 c0307be:	f640 0228 	movw	r2, #2088	; 0x828
 c0307c2:	2100      	movs	r1, #0
 c0307c4:	4803      	ldr	r0, [pc, #12]	; (c0307d4 <sst_object_get_info+0x3c>)
 c0307c6:	f7e4 f8fe 	bl	c0149c6 <memset>
    /* Remove data stored in the object before leaving the function */
    (void)tfm_memset(&g_sst_object, SST_DEFAULT_EMPTY_BUFF_VAL,
                     SST_MAX_OBJECT_SIZE);

    return err;
}
 c0307ca:	4620      	mov	r0, r4
 c0307cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c0307ce:	bf00      	nop
 c0307d0:	3003e658 	.word	0x3003e658
 c0307d4:	3003e660 	.word	0x3003e660

0c0307d8 <sst_object_delete>:

psa_ps_status_t sst_object_delete(psa_ps_uid_t uid, int32_t client_id)
{
 c0307d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    psa_ps_status_t err;

    /* Retrieve the object information from the object table if the object
     * exists.
     */
    err = sst_object_table_get_obj_tbl_info(uid, client_id, &g_obj_tbl_info);
 c0307dc:	4d14      	ldr	r5, [pc, #80]	; (c030830 <sst_object_delete+0x58>)
{
 c0307de:	4680      	mov	r8, r0
    err = sst_object_table_get_obj_tbl_info(uid, client_id, &g_obj_tbl_info);
 c0307e0:	462b      	mov	r3, r5
{
 c0307e2:	4689      	mov	r9, r1
 c0307e4:	4617      	mov	r7, r2
    err = sst_object_table_get_obj_tbl_info(uid, client_id, &g_obj_tbl_info);
 c0307e6:	f000 f9cd 	bl	c030b84 <sst_object_table_get_obj_tbl_info>
    if (err != PSA_PS_SUCCESS) {
 c0307ea:	4604      	mov	r4, r0
 c0307ec:	b9d0      	cbnz	r0, c030824 <sst_object_delete+0x4c>
        return err;
    }

#ifdef SST_ENCRYPTION
    err = sst_encrypted_object_read(g_obj_tbl_info.fid, &g_sst_object);
 c0307ee:	4e11      	ldr	r6, [pc, #68]	; (c030834 <sst_object_delete+0x5c>)
 c0307f0:	6828      	ldr	r0, [r5, #0]
 c0307f2:	4631      	mov	r1, r6
 c0307f4:	f7ff fa68 	bl	c02fcc8 <sst_encrypted_object_read>
#else
    err = sst_read_object(READ_HEADER_ONLY);
#endif
    if (err != PSA_PS_SUCCESS) {
 c0307f8:	4604      	mov	r4, r0
 c0307fa:	b968      	cbnz	r0, c030818 <sst_object_delete+0x40>
        goto clear_data_and_return;
    }

    /* Check that the write once flag is not set */
    if (g_sst_object.header.info.create_flags & PSA_PS_FLAG_WRITE_ONCE) {
 c0307fc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 c0307fe:	07db      	lsls	r3, r3, #31
 c030800:	d413      	bmi.n	c03082a <sst_object_delete+0x52>
    }

    /* Delete object from the table and stores the table in the persistent
     * area.
     */
    err = sst_object_table_delete_object(uid, client_id);
 c030802:	463a      	mov	r2, r7
 c030804:	4640      	mov	r0, r8
 c030806:	4649      	mov	r1, r9
 c030808:	f000 f9dc 	bl	c030bc4 <sst_object_table_delete_object>
    if (err != PSA_PS_SUCCESS) {
 c03080c:	4604      	mov	r4, r0
 c03080e:	b918      	cbnz	r0, c030818 <sst_object_delete+0x40>
        goto clear_data_and_return;
    }

    /* Remove old object table and file */
    err = sst_remove_old_data(g_obj_tbl_info.fid);
 c030810:	6828      	ldr	r0, [r5, #0]
 c030812:	f7ff ff11 	bl	c030638 <sst_remove_old_data>
 c030816:	4604      	mov	r4, r0
 c030818:	f640 0228 	movw	r2, #2088	; 0x828
 c03081c:	2100      	movs	r1, #0
 c03081e:	4805      	ldr	r0, [pc, #20]	; (c030834 <sst_object_delete+0x5c>)
 c030820:	f7e4 f8d1 	bl	c0149c6 <memset>
    /* Remove data stored in the object before leaving the function */
    (void)tfm_memset(&g_sst_object, SST_DEFAULT_EMPTY_BUFF_VAL,
                     SST_MAX_OBJECT_SIZE);

    return err;
}
 c030824:	4620      	mov	r0, r4
 c030826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        err = PSA_PS_ERROR_WRITE_ONCE;
 c03082a:	2401      	movs	r4, #1
 c03082c:	e7f4      	b.n	c030818 <sst_object_delete+0x40>
 c03082e:	bf00      	nop
 c030830:	3003e658 	.word	0x3003e658
 c030834:	3003e660 	.word	0x3003e660

0c030838 <sst_system_wipe_all>:

psa_ps_status_t sst_system_wipe_all(void)
{
 c030838:	b508      	push	{r3, lr}
     * This could be asynchronous to normal system operation
     * and state of the sst system lock is unknown. Hence
     * this function doesn't block on the lock and directly
     * moves to erasing the flash instead.
     */
    err = sst_flash_fs_wipe_all();
 c03083a:	f7ff fb3f 	bl	c02febc <sst_flash_fs_wipe_all>
    if (err != PSA_PS_SUCCESS) {
 c03083e:	b930      	cbnz	r0, c03084e <sst_system_wipe_all+0x16>
        return err;
    }

    err = sst_flash_fs_prepare();
 c030840:	f7ff fb3a 	bl	c02feb8 <sst_flash_fs_prepare>
    if (err != PSA_PS_SUCCESS) {
 c030844:	b918      	cbnz	r0, c03084e <sst_system_wipe_all+0x16>
        return err;
    }

    return sst_object_table_create();
}
 c030846:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return sst_object_table_create();
 c03084a:	f000 b87b 	b.w	c030944 <sst_object_table_create>
}
 c03084e:	bd08      	pop	{r3, pc}

0c030850 <sst_get_object_entry_idx>:
 *         in the table. Otherwise, it returns PSA_PS_ERROR_UID_NOT_FOUND.
 */
static psa_ps_status_t sst_get_object_entry_idx(psa_ps_uid_t uid,
                                                int32_t client_id,
                                                uint32_t *idx)
{
 c030850:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
 c030854:	4689      	mov	r9, r1
 c030856:	4680      	mov	r8, r0
    uint32_t i;
    struct sst_obj_table_t *p_table = &sst_obj_table_ctx.obj_table;

    for (i = 0; i < SST_OBJ_TABLE_ENTRIES; i++) {
 c030858:	2100      	movs	r1, #0
 c03085a:	4c0a      	ldr	r4, [pc, #40]	; (c030884 <sst_get_object_entry_idx+0x34>)
        if (p_table->obj_db[i].uid == uid
 c03085c:	e9d4 670c 	ldrd	r6, r7, [r4, #48]	; 0x30
 c030860:	454f      	cmp	r7, r9
 c030862:	bf08      	it	eq
 c030864:	4546      	cmpeq	r6, r8
 c030866:	d106      	bne.n	c030876 <sst_get_object_entry_idx+0x26>
            && p_table->obj_db[i].client_id == client_id) {
 c030868:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 c03086a:	4290      	cmp	r0, r2
 c03086c:	d103      	bne.n	c030876 <sst_get_object_entry_idx+0x26>
            *idx = i;
            return PSA_PS_SUCCESS;
 c03086e:	2000      	movs	r0, #0
            *idx = i;
 c030870:	6019      	str	r1, [r3, #0]
        }
    }

    return PSA_PS_ERROR_UID_NOT_FOUND;
}
 c030872:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
    for (i = 0; i < SST_OBJ_TABLE_ENTRIES; i++) {
 c030876:	3101      	adds	r1, #1
 c030878:	290b      	cmp	r1, #11
 c03087a:	f104 0420 	add.w	r4, r4, #32
 c03087e:	d1ed      	bne.n	c03085c <sst_get_object_entry_idx+0xc>
    return PSA_PS_ERROR_UID_NOT_FOUND;
 c030880:	2005      	movs	r0, #5
 c030882:	e7f6      	b.n	c030872 <sst_get_object_entry_idx+0x22>
 c030884:	3003ee98 	.word	0x3003ee98

0c030888 <sst_table_delete_entry>:
 *
 * \param[in] idx  Entry index to delete
 *
 */
static void sst_table_delete_entry(uint32_t idx)
{
 c030888:	b430      	push	{r4, r5}
    struct sst_obj_table_t *p_table = &sst_obj_table_ctx.obj_table;

    p_table->obj_db[idx].uid = TFM_SST_INVALID_UID;
    p_table->obj_db[idx].client_id = 0;
 c03088a:	2100      	movs	r1, #0
    p_table->obj_db[idx].uid = TFM_SST_INVALID_UID;
 c03088c:	2400      	movs	r4, #0
 c03088e:	2500      	movs	r5, #0
 c030890:	4b06      	ldr	r3, [pc, #24]	; (c0308ac <sst_table_delete_entry+0x24>)
 c030892:	eb03 1240 	add.w	r2, r3, r0, lsl #5

#ifdef SST_ENCRYPTION
    (void)tfm_memset(p_table->obj_db[idx].tag, SST_DEFAULT_EMPTY_BUFF_VAL,
 c030896:	3001      	adds	r0, #1
    p_table->obj_db[idx].uid = TFM_SST_INVALID_UID;
 c030898:	e9c2 450c 	strd	r4, r5, [r2, #48]	; 0x30
                     SST_OBJECTS_TABLE_ENTRY_SIZE);
#else
    p_table->obj_db[idx].version = 0;
#endif
}
 c03089c:	bc30      	pop	{r4, r5}
    p_table->obj_db[idx].client_id = 0;
 c03089e:	6391      	str	r1, [r2, #56]	; 0x38
 c0308a0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 c0308a4:	2220      	movs	r2, #32
 c0308a6:	f7e4 b88e 	b.w	c0149c6 <memset>
 c0308aa:	bf00      	nop
 c0308ac:	3003ee98 	.word	0x3003ee98

0c0308b0 <sst_object_table_set_crypto_key>:
{
 c0308b0:	b508      	push	{r3, lr}
    err = sst_crypto_getkey(SST_KEY_LEN_BYTES, sst_key);
 c0308b2:	4906      	ldr	r1, [pc, #24]	; (c0308cc <sst_object_table_set_crypto_key+0x1c>)
 c0308b4:	2010      	movs	r0, #16
 c0308b6:	f7ff f8e5 	bl	c02fa84 <sst_crypto_getkey>
    if (err != PSA_PS_SUCCESS) {
 c0308ba:	b928      	cbnz	r0, c0308c8 <sst_object_table_set_crypto_key+0x18>
}
 c0308bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    err = sst_crypto_setkey(SST_KEY_LEN_BYTES, sst_key);
 c0308c0:	4902      	ldr	r1, [pc, #8]	; (c0308cc <sst_object_table_set_crypto_key+0x1c>)
 c0308c2:	2010      	movs	r0, #16
 c0308c4:	f7ff b8ea 	b.w	c02fa9c <sst_crypto_setkey>
}
 c0308c8:	bd08      	pop	{r3, pc}
 c0308ca:	bf00      	nop
 c0308cc:	3003ee88 	.word	0x3003ee88

0c0308d0 <sst_object_table_save_table.constprop.2>:
static psa_ps_status_t sst_object_table_save_table(
 c0308d0:	b570      	push	{r4, r5, r6, lr}
    obj_table->swap_count++;
 c0308d2:	4c1a      	ldr	r4, [pc, #104]	; (c03093c <sst_object_table_save_table.constprop.2+0x6c>)
 c0308d4:	7f63      	ldrb	r3, [r4, #29]
 c0308d6:	3301      	adds	r3, #1
 c0308d8:	b2db      	uxtb	r3, r3
    if (obj_table->swap_count == SST_FLASH_DEFAULT_VAL) {
 c0308da:	2bff      	cmp	r3, #255	; 0xff
        obj_table->swap_count = 0;
 c0308dc:	bf08      	it	eq
 c0308de:	2300      	moveq	r3, #0
 c0308e0:	7763      	strb	r3, [r4, #29]
    err = sst_object_table_set_crypto_key();
 c0308e2:	f7ff ffe5 	bl	c0308b0 <sst_object_table_set_crypto_key>
    if (err != PSA_PS_SUCCESS) {
 c0308e6:	4605      	mov	r5, r0
 c0308e8:	b968      	cbnz	r0, c030906 <sst_object_table_save_table.constprop.2+0x36>
    sst_crypto_get_iv(crypto);
 c0308ea:	4814      	ldr	r0, [pc, #80]	; (c03093c <sst_object_table_save_table.constprop.2+0x6c>)
 c0308ec:	f7ff f918 	bl	c02fb20 <sst_crypto_get_iv>
    return sst_crypto_generate_auth_tag(crypto,
 c0308f0:	4913      	ldr	r1, [pc, #76]	; (c030940 <sst_object_table_save_table.constprop.2+0x70>)
 c0308f2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 c0308f6:	f1a1 001c 	sub.w	r0, r1, #28
 c0308fa:	f7ff f98d 	bl	c02fc18 <sst_crypto_generate_auth_tag>
    if (err != PSA_PS_SUCCESS) {
 c0308fe:	4605      	mov	r5, r0
 c030900:	b118      	cbz	r0, c03090a <sst_object_table_save_table.constprop.2+0x3a>
        (void)sst_crypto_destroykey();
 c030902:	f7ff f8f5 	bl	c02faf0 <sst_crypto_destroykey>
}
 c030906:	4628      	mov	r0, r5
 c030908:	bd70      	pop	{r4, r5, r6, pc}
    err = sst_crypto_destroykey();
 c03090a:	f7ff f8f1 	bl	c02faf0 <sst_crypto_destroykey>
    if (err != PSA_PS_SUCCESS) {
 c03090e:	4605      	mov	r5, r0
 c030910:	2800      	cmp	r0, #0
 c030912:	d1f8      	bne.n	c030906 <sst_object_table_save_table.constprop.2+0x36>
    err = sst_flash_fs_file_create(obj_table_id,
 c030914:	f44f 72c0 	mov.w	r2, #384	; 0x180
    uint32_t obj_table_id = SST_TABLE_FS_ID(sst_obj_table_ctx.scratch_table);
 c030918:	f894 6181 	ldrb.w	r6, [r4, #385]	; 0x181
    err = sst_flash_fs_file_create(obj_table_id,
 c03091c:	4b07      	ldr	r3, [pc, #28]	; (c03093c <sst_object_table_save_table.constprop.2+0x6c>)
 c03091e:	4611      	mov	r1, r2
 c030920:	1c70      	adds	r0, r6, #1
 c030922:	f7ff fad8 	bl	c02fed6 <sst_flash_fs_file_create>
    if (err != PSA_PS_SUCCESS) {
 c030926:	4605      	mov	r5, r0
 c030928:	2800      	cmp	r0, #0
 c03092a:	d1ec      	bne.n	c030906 <sst_object_table_save_table.constprop.2+0x36>
    sst_obj_table_ctx.scratch_table = sst_obj_table_ctx.active_table;
 c03092c:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
    sst_obj_table_ctx.active_table = swap_table_idxs;
 c030930:	f884 6180 	strb.w	r6, [r4, #384]	; 0x180
    sst_obj_table_ctx.scratch_table = sst_obj_table_ctx.active_table;
 c030934:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
 c030938:	e7e5      	b.n	c030906 <sst_object_table_save_table.constprop.2+0x36>
 c03093a:	bf00      	nop
 c03093c:	3003ee98 	.word	0x3003ee98
 c030940:	3003eeb4 	.word	0x3003eeb4

0c030944 <sst_object_table_create>:

psa_ps_status_t sst_object_table_create(void)
{
 c030944:	b508      	push	{r3, lr}
 c030946:	4b07      	ldr	r3, [pc, #28]	; (c030964 <sst_object_table_create+0x20>)
 c030948:	f44f 72c4 	mov.w	r2, #392	; 0x188
 c03094c:	4618      	mov	r0, r3
 c03094e:	2100      	movs	r1, #0
 c030950:	f7e4 f839 	bl	c0149c6 <memset>
                     sizeof(struct sst_obj_table_ctx_t));

    /* Invert the other in the context as sst_object_table_save_table will
     * use the scratch index to create and store the current table.
     */
    sst_obj_table_ctx.active_table  = SST_OBJ_TABLE_IDX_1;
 c030954:	2201      	movs	r2, #1
 c030956:	f880 2180 	strb.w	r2, [r0, #384]	; 0x180
    sst_obj_table_ctx.scratch_table = SST_OBJ_TABLE_IDX_0;

    p_table->version = SST_OBJECT_SYSTEM_VERSION;
 c03095a:	7702      	strb	r2, [r0, #28]

    /* Save object table contents */
    return sst_object_table_save_table(p_table);
}
 c03095c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return sst_object_table_save_table(p_table);
 c030960:	f7ff bfb6 	b.w	c0308d0 <sst_object_table_save_table.constprop.2>
 c030964:	3003ee98 	.word	0x3003ee98

0c030968 <sst_object_table_init>:

psa_ps_status_t sst_object_table_init(uint8_t *obj_data)
{
 c030968:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 c03096c:	4607      	mov	r7, r0
    err = sst_flash_fs_file_read(SST_TABLE_FS_ID(SST_OBJ_TABLE_IDX_0),
 c03096e:	4b3e      	ldr	r3, [pc, #248]	; (c030a68 <sst_object_table_init+0x100>)
 c030970:	2200      	movs	r2, #0
 c030972:	f44f 71c0 	mov.w	r1, #384	; 0x180
 c030976:	2001      	movs	r0, #1
 c030978:	f7ff fbda 	bl	c030130 <sst_flash_fs_file_read>
    err = sst_flash_fs_file_read(SST_TABLE_FS_ID(SST_OBJ_TABLE_IDX_1),
 c03097c:	463b      	mov	r3, r7
 c03097e:	2200      	movs	r2, #0
 c030980:	f44f 71c0 	mov.w	r1, #384	; 0x180
    err = sst_flash_fs_file_read(SST_TABLE_FS_ID(SST_OBJ_TABLE_IDX_0),
 c030984:	4605      	mov	r5, r0
    err = sst_flash_fs_file_read(SST_TABLE_FS_ID(SST_OBJ_TABLE_IDX_1),
 c030986:	2002      	movs	r0, #2
 c030988:	f7ff fbd2 	bl	c030130 <sst_flash_fs_file_read>
 c03098c:	4606      	mov	r6, r0
    /* Read table from the file system */
    sst_object_table_fs_read_table(&init_ctx);

#ifdef SST_ENCRYPTION
    /* Set object table key */
    err = sst_object_table_set_crypto_key();
 c03098e:	f7ff ff8f 	bl	c0308b0 <sst_object_table_set_crypto_key>
 c030992:	4c35      	ldr	r4, [pc, #212]	; (c030a68 <sst_object_table_init+0x100>)
    if (err != PSA_PS_SUCCESS) {
 c030994:	4680      	mov	r8, r0
 c030996:	2800      	cmp	r0, #0
 c030998:	d149      	bne.n	c030a2e <sst_object_table_init+0xc6>
    if (init_ctx->table_state[SST_OBJ_TABLE_IDX_0] != SST_OBJ_TABLE_INVALID) {
 c03099a:	b93d      	cbnz	r5, c0309ac <sst_object_table_init+0x44>
        err = sst_crypto_authenticate(crypto,
 c03099c:	f44f 72b2 	mov.w	r2, #356	; 0x164
 c0309a0:	f104 011c 	add.w	r1, r4, #28
 c0309a4:	4620      	mov	r0, r4
 c0309a6:	f7ff f95b 	bl	c02fc60 <sst_crypto_authenticate>
        if (err != PSA_PS_SUCCESS) {
 c0309aa:	b368      	cbz	r0, c030a08 <sst_object_table_init+0xa0>
            init_ctx->table_state[SST_OBJ_TABLE_IDX_0] = SST_OBJ_TABLE_INVALID;
 c0309ac:	2501      	movs	r5, #1
    if (init_ctx->table_state[SST_OBJ_TABLE_IDX_1] != SST_OBJ_TABLE_INVALID) {
 c0309ae:	b93e      	cbnz	r6, c0309c0 <sst_object_table_init+0x58>
        err = sst_crypto_authenticate(crypto,
 c0309b0:	f44f 72b2 	mov.w	r2, #356	; 0x164
 c0309b4:	f107 011c 	add.w	r1, r7, #28
 c0309b8:	4638      	mov	r0, r7
 c0309ba:	f7ff f951 	bl	c02fc60 <sst_crypto_authenticate>
        if (err != PSA_PS_SUCCESS) {
 c0309be:	b100      	cbz	r0, c0309c2 <sst_object_table_init+0x5a>
            init_ctx->table_state[SST_OBJ_TABLE_IDX_1] = SST_OBJ_TABLE_INVALID;
 c0309c0:	2601      	movs	r6, #1
    }
#else
    sst_object_table_authenticate_ctx_tables(&init_ctx);
#endif /* SST_ROLLBACK_PROTECTION */

    err = sst_crypto_destroykey();
 c0309c2:	f7ff f895 	bl	c02faf0 <sst_crypto_destroykey>
    if (err != PSA_PS_SUCCESS) {
 c0309c6:	4680      	mov	r8, r0
 c0309c8:	bb88      	cbnz	r0, c030a2e <sst_object_table_init+0xc6>
    if (SST_OBJECT_SYSTEM_VERSION !=
 c0309ca:	7f23      	ldrb	r3, [r4, #28]
    if ((init_ctx->table_state[SST_OBJ_TABLE_IDX_0] == SST_OBJ_TABLE_INVALID)
 c0309cc:	f240 1101 	movw	r1, #257	; 0x101
        init_ctx->table_state[SST_OBJ_TABLE_IDX_0] = SST_OBJ_TABLE_INVALID;
 c0309d0:	2b01      	cmp	r3, #1
    if (SST_OBJECT_SYSTEM_VERSION !=
 c0309d2:	7f3b      	ldrb	r3, [r7, #28]
        init_ctx->table_state[SST_OBJ_TABLE_IDX_0] = SST_OBJ_TABLE_INVALID;
 c0309d4:	bf18      	it	ne
 c0309d6:	2501      	movne	r5, #1
        init_ctx->table_state[SST_OBJ_TABLE_IDX_1] = SST_OBJ_TABLE_INVALID;
 c0309d8:	2b01      	cmp	r3, #1
 c0309da:	bf18      	it	ne
 c0309dc:	2601      	movne	r6, #1
         && (init_ctx->table_state[SST_OBJ_TABLE_IDX_1] ==
 c0309de:	f88d 500c 	strb.w	r5, [sp, #12]
 c0309e2:	f88d 600d 	strb.w	r6, [sp, #13]
    if ((init_ctx->table_state[SST_OBJ_TABLE_IDX_0] == SST_OBJ_TABLE_INVALID)
 c0309e6:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    uint8_t table0_swap_count =
 c0309ea:	7f62      	ldrb	r2, [r4, #29]
    if ((init_ctx->table_state[SST_OBJ_TABLE_IDX_0] == SST_OBJ_TABLE_INVALID)
 c0309ec:	4288      	cmp	r0, r1
    uint8_t table1_swap_count =
 c0309ee:	7f7b      	ldrb	r3, [r7, #29]
    if ((init_ctx->table_state[SST_OBJ_TABLE_IDX_0] == SST_OBJ_TABLE_INVALID)
 c0309f0:	d035      	beq.n	c030a5e <sst_object_table_init+0xf6>
    } else if (init_ctx->table_state[SST_OBJ_TABLE_IDX_0] ==
 c0309f2:	2d01      	cmp	r5, #1
 c0309f4:	d10a      	bne.n	c030a0c <sst_object_table_init+0xa4>
          sst_obj_table_ctx.active_table  = SST_OBJ_TABLE_IDX_1;
 c0309f6:	f8a4 5180 	strh.w	r5, [r4, #384]	; 0x180
    return (memcpy(dest, src, num));
 c0309fa:	f44f 72c0 	mov.w	r2, #384	; 0x180
 c0309fe:	4639      	mov	r1, r7
 c030a00:	4819      	ldr	r0, [pc, #100]	; (c030a68 <sst_object_table_init+0x100>)
 c030a02:	f7e3 ffbc 	bl	c01497e <memcpy>
 c030a06:	e007      	b.n	c030a18 <sst_object_table_init+0xb0>
        if (err != PSA_PS_SUCCESS) {
 c030a08:	4605      	mov	r5, r0
 c030a0a:	e7d0      	b.n	c0309ae <sst_object_table_init+0x46>
    } else if (init_ctx->table_state[SST_OBJ_TABLE_IDX_1] ==
 c030a0c:	2e01      	cmp	r6, #1
 c030a0e:	d112      	bne.n	c030a36 <sst_object_table_init+0xce>
        sst_obj_table_ctx.active_table  = SST_OBJ_TABLE_IDX_0;
 c030a10:	f44f 7380 	mov.w	r3, #256	; 0x100
 c030a14:	f8a4 3180 	strh.w	r3, [r4, #384]	; 0x180
    if (err != PSA_PS_SUCCESS) {
        return err;
    }

    /* Remove the old object table file */
    err = sst_flash_fs_file_delete(SST_TABLE_FS_ID(
 c030a18:	f894 0181 	ldrb.w	r0, [r4, #385]	; 0x181
 c030a1c:	3001      	adds	r0, #1
 c030a1e:	f7ff fb2b 	bl	c030078 <sst_flash_fs_file_delete>
                                              sst_obj_table_ctx.scratch_table));
    if (err != PSA_PS_SUCCESS && err != PSA_PS_ERROR_UID_NOT_FOUND) {
 c030a22:	b108      	cbz	r0, c030a28 <sst_object_table_init+0xc0>
 c030a24:	2805      	cmp	r0, #5
 c030a26:	d11d      	bne.n	c030a64 <sst_object_table_init+0xfc>
        return err;
    }
#endif /* SST_ROLLBACK_PROTECTION */

#ifdef SST_ENCRYPTION
    sst_crypto_set_iv(&sst_obj_table_ctx.obj_table.crypto);
 c030a28:	480f      	ldr	r0, [pc, #60]	; (c030a68 <sst_object_table_init+0x100>)
 c030a2a:	f7ff f86d 	bl	c02fb08 <sst_crypto_set_iv>
#endif

    return PSA_PS_SUCCESS;
}
 c030a2e:	4640      	mov	r0, r8
 c030a30:	b004      	add	sp, #16
 c030a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((table1_swap_count == 0) && (table0_swap_count != 1)) {
 c030a36:	b94b      	cbnz	r3, c030a4c <sst_object_table_init+0xe4>
 c030a38:	2a01      	cmp	r2, #1
 c030a3a:	d00a      	beq.n	c030a52 <sst_object_table_init+0xea>
        sst_obj_table_ctx.active_table  = SST_OBJ_TABLE_IDX_1;
 c030a3c:	2301      	movs	r3, #1
        sst_obj_table_ctx.active_table  = SST_OBJ_TABLE_IDX_0;
 c030a3e:	f8a4 3180 	strh.w	r3, [r4, #384]	; 0x180
    if (sst_obj_table_ctx.active_table == SST_OBJ_TABLE_IDX_1) {
 c030a42:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
 c030a46:	2b01      	cmp	r3, #1
 c030a48:	d1e6      	bne.n	c030a18 <sst_object_table_init+0xb0>
 c030a4a:	e7d6      	b.n	c0309fa <sst_object_table_init+0x92>
    } else if ((table0_swap_count == 0) && (table1_swap_count != 1)) {
 c030a4c:	b922      	cbnz	r2, c030a58 <sst_object_table_init+0xf0>
 c030a4e:	2b01      	cmp	r3, #1
 c030a50:	d0f4      	beq.n	c030a3c <sst_object_table_init+0xd4>
        sst_obj_table_ctx.active_table  = SST_OBJ_TABLE_IDX_0;
 c030a52:	f44f 7380 	mov.w	r3, #256	; 0x100
 c030a56:	e7f2      	b.n	c030a3e <sst_object_table_init+0xd6>
    } else if (table1_swap_count > table0_swap_count) {
 c030a58:	429a      	cmp	r2, r3
 c030a5a:	d3ef      	bcc.n	c030a3c <sst_object_table_init+0xd4>
 c030a5c:	e7f9      	b.n	c030a52 <sst_object_table_init+0xea>
        return PSA_PS_ERROR_OPERATION_FAILED;
 c030a5e:	f04f 080b 	mov.w	r8, #11
 c030a62:	e7e4      	b.n	c030a2e <sst_object_table_init+0xc6>
 c030a64:	4680      	mov	r8, r0
 c030a66:	e7e2      	b.n	c030a2e <sst_object_table_init+0xc6>
 c030a68:	3003ee98 	.word	0x3003ee98

0c030a6c <sst_object_table_get_free_fid>:
    return sst_get_object_entry_idx(uid, client_id, &idx);
}

psa_ps_status_t sst_object_table_get_free_fid(uint32_t fid_num,
                                              uint32_t *p_fid)
{
 c030a6c:	b570      	push	{r4, r5, r6, lr}
 c030a6e:	460d      	mov	r5, r1
    if (idx_num == 0) {
 c030a70:	b318      	cbz	r0, c030aba <sst_object_table_get_free_fid+0x4e>
    uint32_t last_free = 0;
 c030a72:	2400      	movs	r4, #0
    for (i = 0; i < SST_OBJ_TABLE_ENTRIES && idx_num > 0; i++) {
 c030a74:	4621      	mov	r1, r4
 c030a76:	4e12      	ldr	r6, [pc, #72]	; (c030ac0 <sst_object_table_get_free_fid+0x54>)
        if (p_table->obj_db[i].uid == TFM_SST_INVALID_UID) {
 c030a78:	e9d6 230c 	ldrd	r2, r3, [r6, #48]	; 0x30
 c030a7c:	4313      	orrs	r3, r2
            idx_num--;
 c030a7e:	bf08      	it	eq
 c030a80:	460c      	moveq	r4, r1
    for (i = 0; i < SST_OBJ_TABLE_ENTRIES && idx_num > 0; i++) {
 c030a82:	f101 0101 	add.w	r1, r1, #1
            idx_num--;
 c030a86:	bf08      	it	eq
 c030a88:	f100 30ff 	addeq.w	r0, r0, #4294967295
    for (i = 0; i < SST_OBJ_TABLE_ENTRIES && idx_num > 0; i++) {
 c030a8c:	290b      	cmp	r1, #11
 c030a8e:	d00a      	beq.n	c030aa6 <sst_object_table_get_free_fid+0x3a>
 c030a90:	3620      	adds	r6, #32
 c030a92:	2800      	cmp	r0, #0
 c030a94:	d1f0      	bne.n	c030a78 <sst_object_table_get_free_fid+0xc>
    }

    /* There first two file IDs are reserved for the active table
     * and scratch table files.
     */
    fid = SST_OBJECT_FS_ID(idx);
 c030a96:	3403      	adds	r4, #3

    /* Check if there is a file in the persistent area with that ID. That
     * can happened when the system is rebooted (e.g. power cut, ...) in the
     * middle of a create, write or delete operation.
     */
    if (sst_flash_fs_file_exist(fid) == PSA_PS_SUCCESS) {
 c030a98:	4620      	mov	r0, r4
 c030a9a:	f7ff fa11 	bl	c02fec0 <sst_flash_fs_file_exist>
 c030a9e:	b130      	cbz	r0, c030aae <sst_object_table_get_free_fid+0x42>
        }
    }

    *p_fid = fid;

    return PSA_PS_SUCCESS;
 c030aa0:	2000      	movs	r0, #0
    *p_fid = fid;
 c030aa2:	602c      	str	r4, [r5, #0]
}
 c030aa4:	bd70      	pop	{r4, r5, r6, pc}
    if (idx_num != 0) {
 c030aa6:	2800      	cmp	r0, #0
 c030aa8:	d0f5      	beq.n	c030a96 <sst_object_table_get_free_fid+0x2a>
        return PSA_PS_ERROR_INSUFFICIENT_SPACE;
 c030aaa:	2003      	movs	r0, #3
 c030aac:	e7fa      	b.n	c030aa4 <sst_object_table_get_free_fid+0x38>
        err = sst_flash_fs_file_delete(fid);
 c030aae:	4620      	mov	r0, r4
 c030ab0:	f7ff fae2 	bl	c030078 <sst_flash_fs_file_delete>
        if (err != PSA_PS_SUCCESS) {
 c030ab4:	2800      	cmp	r0, #0
 c030ab6:	d0f3      	beq.n	c030aa0 <sst_object_table_get_free_fid+0x34>
 c030ab8:	e7f4      	b.n	c030aa4 <sst_object_table_get_free_fid+0x38>
        return PSA_PS_ERROR_INVALID_ARGUMENT;
 c030aba:	2008      	movs	r0, #8
 c030abc:	e7f2      	b.n	c030aa4 <sst_object_table_get_free_fid+0x38>
 c030abe:	bf00      	nop
 c030ac0:	3003ee98 	.word	0x3003ee98

0c030ac4 <sst_object_table_set_obj_tbl_info>:

psa_ps_status_t sst_object_table_set_obj_tbl_info(psa_ps_uid_t uid,
                                                  int32_t client_id,
                                const struct sst_obj_table_info_t *obj_tbl_info)
{
 c030ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c030ac8:	4680      	mov	r8, r0
 c030aca:	4689      	mov	r9, r1
 c030acc:	4693      	mov	fp, r2
    psa_ps_status_t err;
    uint32_t idx = 0;
    uint32_t backup_idx = 0;
 c030ace:	2100      	movs	r1, #0
{
 c030ad0:	b08b      	sub	sp, #44	; 0x2c
    struct sst_obj_table_entry_t backup_entry = {
 c030ad2:	2220      	movs	r2, #32
 c030ad4:	a802      	add	r0, sp, #8
{
 c030ad6:	461d      	mov	r5, r3
    uint32_t backup_idx = 0;
 c030ad8:	9101      	str	r1, [sp, #4]
    struct sst_obj_table_entry_t backup_entry = {
 c030ada:	f7e3 ff74 	bl	c0149c6 <memset>
        .uid = TFM_SST_INVALID_UID,
        .client_id = 0,
    };
    struct sst_obj_table_t *p_table = &sst_obj_table_ctx.obj_table;

    err = sst_get_object_entry_idx(uid, client_id, &backup_idx);
 c030ade:	ab01      	add	r3, sp, #4
 c030ae0:	465a      	mov	r2, fp
 c030ae2:	4640      	mov	r0, r8
 c030ae4:	4649      	mov	r1, r9
 c030ae6:	f7ff feb3 	bl	c030850 <sst_get_object_entry_idx>
 c030aea:	4c25      	ldr	r4, [pc, #148]	; (c030b80 <sst_object_table_set_obj_tbl_info+0xbc>)
    if (err == PSA_PS_SUCCESS) {
 c030aec:	2800      	cmp	r0, #0
 c030aee:	d144      	bne.n	c030b7a <sst_object_table_set_obj_tbl_info+0xb6>
        /* If an entry exists for this UID, it creates a backup copy in case
         * an error happens while updating the new table in the filesystem.
         */
        (void)tfm_memcpy(&backup_entry, &p_table->obj_db[backup_idx],
 c030af0:	f8dd c004 	ldr.w	ip, [sp, #4]
 c030af4:	ae02      	add	r6, sp, #8
 c030af6:	f10c 0e01 	add.w	lr, ip, #1
 c030afa:	eb04 1e4e 	add.w	lr, r4, lr, lsl #5
 c030afe:	4677      	mov	r7, lr
 c030b00:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 c030b02:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 c030b04:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 c030b08:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 c030b0c:	e9de 6704 	ldrd	r6, r7, [lr, #16]
                         SST_OBJECTS_TABLE_ENTRY_SIZE);

        /* Deletes old object information if it exist in the table */
        sst_table_delete_entry(backup_idx);
 c030b10:	4660      	mov	r0, ip
 c030b12:	f7ff feb9 	bl	c030888 <sst_table_delete_entry>
    }

    idx = SST_OBJECT_FS_ID_TO_IDX(obj_tbl_info->fid);
 c030b16:	682b      	ldr	r3, [r5, #0]
 c030b18:	f1a3 0a03 	sub.w	sl, r3, #3
    p_table->obj_db[idx].uid = uid;
 c030b1c:	eb04 124a 	add.w	r2, r4, sl, lsl #5
 c030b20:	e9c2 890c 	strd	r8, r9, [r2, #48]	; 0x30
    p_table->obj_db[idx].client_id = client_id;
 c030b24:	f8c2 b038 	str.w	fp, [r2, #56]	; 0x38
 c030b28:	686a      	ldr	r2, [r5, #4]

    /* Add new object information */
#ifdef SST_ENCRYPTION
    (void)tfm_memcpy(p_table->obj_db[idx].tag, obj_tbl_info->tag,
 c030b2a:	3b02      	subs	r3, #2
 c030b2c:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 c030b30:	f102 0c10 	add.w	ip, r2, #16
 c030b34:	461d      	mov	r5, r3
 c030b36:	6810      	ldr	r0, [r2, #0]
 c030b38:	6851      	ldr	r1, [r2, #4]
 c030b3a:	3208      	adds	r2, #8
 c030b3c:	c503      	stmia	r5!, {r0, r1}
 c030b3e:	4562      	cmp	r2, ip
 c030b40:	462b      	mov	r3, r5
 c030b42:	d1f7      	bne.n	c030b34 <sst_object_table_set_obj_tbl_info+0x70>
                     SST_TAG_LEN_BYTES);
#else
    p_table->obj_db[idx].version = obj_tbl_info->version;
#endif

    err = sst_object_table_save_table(p_table);
 c030b44:	f7ff fec4 	bl	c0308d0 <sst_object_table_save_table.constprop.2>
    if (err != PSA_PS_SUCCESS) {
 c030b48:	4680      	mov	r8, r0
 c030b4a:	b190      	cbz	r0, c030b72 <sst_object_table_set_obj_tbl_info+0xae>
        if (backup_entry.uid != TFM_SST_INVALID_UID) {
 c030b4c:	ea56 0307 	orrs.w	r3, r6, r7
 c030b50:	d00c      	beq.n	c030b6c <sst_object_table_set_obj_tbl_info+0xa8>
 c030b52:	9b01      	ldr	r3, [sp, #4]
 c030b54:	e9cd 6706 	strd	r6, r7, [sp, #24]
 c030b58:	3301      	adds	r3, #1
 c030b5a:	eb04 1443 	add.w	r4, r4, r3, lsl #5
 c030b5e:	ad02      	add	r5, sp, #8
 c030b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 c030b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 c030b64:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 c030b68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            /* Rollback the change in the table */
            (void)tfm_memcpy(&p_table->obj_db[backup_idx], &backup_entry,
                             SST_OBJECTS_TABLE_ENTRY_SIZE);
        }

        sst_table_delete_entry(idx);
 c030b6c:	4650      	mov	r0, sl
 c030b6e:	f7ff fe8b 	bl	c030888 <sst_table_delete_entry>
    }

    return err;
}
 c030b72:	4640      	mov	r0, r8
 c030b74:	b00b      	add	sp, #44	; 0x2c
 c030b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    struct sst_obj_table_entry_t backup_entry = {
 c030b7a:	2600      	movs	r6, #0
 c030b7c:	2700      	movs	r7, #0
 c030b7e:	e7ca      	b.n	c030b16 <sst_object_table_set_obj_tbl_info+0x52>
 c030b80:	3003ee98 	.word	0x3003ee98

0c030b84 <sst_object_table_get_obj_tbl_info>:

psa_ps_status_t sst_object_table_get_obj_tbl_info(psa_ps_uid_t uid,
                                                  int32_t client_id,
                                      struct sst_obj_table_info_t *obj_tbl_info)
{
 c030b84:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c030b86:	461c      	mov	r4, r3
    psa_ps_status_t err;
    uint32_t idx;
    struct sst_obj_table_t *p_table = &sst_obj_table_ctx.obj_table;

    err = sst_get_object_entry_idx(uid, client_id, &idx);
 c030b88:	ab01      	add	r3, sp, #4
 c030b8a:	f7ff fe61 	bl	c030850 <sst_get_object_entry_idx>
    if (err != PSA_PS_SUCCESS) {
 c030b8e:	4605      	mov	r5, r0
 c030b90:	b990      	cbnz	r0, c030bb8 <sst_object_table_get_obj_tbl_info+0x34>
        return err;
    }

    obj_tbl_info->fid = SST_OBJECT_FS_ID(idx);
 c030b92:	9b01      	ldr	r3, [sp, #4]
 c030b94:	1cda      	adds	r2, r3, #3
 c030b96:	6022      	str	r2, [r4, #0]

#ifdef SST_ENCRYPTION
    (void)tfm_memcpy(obj_tbl_info->tag, p_table->obj_db[idx].tag,
 c030b98:	1c5a      	adds	r2, r3, #1
 c030b9a:	4b09      	ldr	r3, [pc, #36]	; (c030bc0 <sst_object_table_get_obj_tbl_info+0x3c>)
 c030b9c:	6864      	ldr	r4, [r4, #4]
 c030b9e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 c030ba2:	f103 0610 	add.w	r6, r3, #16
 c030ba6:	461a      	mov	r2, r3
 c030ba8:	ca03      	ldmia	r2!, {r0, r1}
 c030baa:	42b2      	cmp	r2, r6
 c030bac:	6020      	str	r0, [r4, #0]
 c030bae:	6061      	str	r1, [r4, #4]
 c030bb0:	4613      	mov	r3, r2
 c030bb2:	f104 0408 	add.w	r4, r4, #8
 c030bb6:	d1f6      	bne.n	c030ba6 <sst_object_table_get_obj_tbl_info+0x22>
#else
    obj_tbl_info->version = p_table->obj_db[idx].version;
#endif

    return PSA_PS_SUCCESS;
}
 c030bb8:	4628      	mov	r0, r5
 c030bba:	b002      	add	sp, #8
 c030bbc:	bd70      	pop	{r4, r5, r6, pc}
 c030bbe:	bf00      	nop
 c030bc0:	3003ee98 	.word	0x3003ee98

0c030bc4 <sst_object_table_delete_object>:

psa_ps_status_t sst_object_table_delete_object(psa_ps_uid_t uid,
                                               int32_t client_id)
{
 c030bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t backup_idx = 0;
 c030bc6:	2400      	movs	r4, #0
{
 c030bc8:	b08b      	sub	sp, #44	; 0x2c
    uint32_t backup_idx = 0;
 c030bca:	ab0a      	add	r3, sp, #40	; 0x28
 c030bcc:	f843 4d24 	str.w	r4, [r3, #-36]!
    struct sst_obj_table_t *p_table = &sst_obj_table_ctx.obj_table;

    /* Create a backup copy in case an error happens while updating the new
     * table in the filesystem.
     */
    err = sst_get_object_entry_idx(uid, client_id, &backup_idx);
 c030bd0:	f7ff fe3e 	bl	c030850 <sst_get_object_entry_idx>
    if (err != PSA_PS_SUCCESS) {
 c030bd4:	4606      	mov	r6, r0
 c030bd6:	b9e8      	cbnz	r0, c030c14 <sst_object_table_delete_object+0x50>
         * key.
         */
        return err;
    }

    (void)tfm_memcpy(&backup_entry, &p_table->obj_db[backup_idx],
 c030bd8:	9f01      	ldr	r7, [sp, #4]
 c030bda:	4c10      	ldr	r4, [pc, #64]	; (c030c1c <sst_object_table_delete_object+0x58>)
 c030bdc:	1c7d      	adds	r5, r7, #1
 c030bde:	ae02      	add	r6, sp, #8
 c030be0:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 c030be4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 c030be6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 c030be8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 c030bec:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
                     SST_OBJECTS_TABLE_ENTRY_SIZE);

    sst_table_delete_entry(backup_idx);
 c030bf0:	4638      	mov	r0, r7
 c030bf2:	f7ff fe49 	bl	c030888 <sst_table_delete_entry>

    err = sst_object_table_save_table(p_table);
 c030bf6:	f7ff fe6b 	bl	c0308d0 <sst_object_table_save_table.constprop.2>
    if (err != PSA_PS_SUCCESS) {
 c030bfa:	4606      	mov	r6, r0
 c030bfc:	b150      	cbz	r0, c030c14 <sst_object_table_delete_object+0x50>
 c030bfe:	9b01      	ldr	r3, [sp, #4]
 c030c00:	ad02      	add	r5, sp, #8
 c030c02:	3301      	adds	r3, #1
 c030c04:	eb04 1443 	add.w	r4, r4, r3, lsl #5
 c030c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 c030c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 c030c0c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 c030c10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       (void)tfm_memcpy(&p_table->obj_db[backup_idx], &backup_entry,
                        SST_OBJECTS_TABLE_ENTRY_SIZE);
    }

    return err;
}
 c030c14:	4630      	mov	r0, r6
 c030c16:	b00b      	add	sp, #44	; 0x2c
 c030c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 c030c1a:	bf00      	nop
 c030c1c:	3003ee98 	.word	0x3003ee98

0c030c20 <sst_object_table_delete_old_table>:

psa_ps_status_t sst_object_table_delete_old_table(void)
{
    uint32_t table_id = SST_TABLE_FS_ID(sst_obj_table_ctx.scratch_table);
 c030c20:	4b02      	ldr	r3, [pc, #8]	; (c030c2c <sst_object_table_delete_old_table+0xc>)
 c030c22:	f893 0181 	ldrb.w	r0, [r3, #385]	; 0x181

    return sst_flash_fs_file_delete(table_id);
 c030c26:	3001      	adds	r0, #1
 c030c28:	f7ff ba26 	b.w	c030078 <sst_flash_fs_file_delete>
 c030c2c:	3003ee98 	.word	0x3003ee98

0c030c30 <sst_utils_check_contained_in>:
psa_ps_status_t sst_utils_check_contained_in(uint32_t superset_size,
                                             uint32_t subset_offset,
                                             uint32_t subset_size)
{
    /* Check that subset_offset is valid */
    if (subset_offset > superset_size) {
 c030c30:	4281      	cmp	r1, r0
 c030c32:	d805      	bhi.n	c030c40 <sst_utils_check_contained_in+0x10>

    /* Check that subset_offset + subset_size fits in superset_size.
     * The previous check passed, so we know that subset_offset <= superset_size
     * and so the right hand side of the inequality cannot underflow.
     */
    if (subset_size > (superset_size - subset_offset)) {
 c030c34:	1a40      	subs	r0, r0, r1
        return PSA_PS_ERROR_INCORRECT_SIZE;
    }

    return PSA_PS_SUCCESS;
 c030c36:	4290      	cmp	r0, r2
 c030c38:	bf34      	ite	cc
 c030c3a:	2006      	movcc	r0, #6
 c030c3c:	2000      	movcs	r0, #0
 c030c3e:	4770      	bx	lr
        return PSA_PS_ERROR_OFFSET_INVALID;
 c030c40:	2007      	movs	r0, #7
}
 c030c42:	4770      	bx	lr

0c030c44 <sst_utils_validate_fid>:

psa_ps_status_t sst_utils_validate_fid(uint32_t fid)
{
    if (fid == SST_INVALID_FID) {
 c030c44:	2800      	cmp	r0, #0
        return PSA_PS_ERROR_UID_NOT_FOUND;
    }

    return PSA_PS_SUCCESS;
}
 c030c46:	bf0c      	ite	eq
 c030c48:	2005      	moveq	r0, #5
 c030c4a:	2000      	movne	r0, #0
 c030c4c:	4770      	bx	lr
	...

0c030c50 <t_cose_crypto_hash_start>:
/*
 * See documentation in t_cose_crypto.h
 */
enum t_cose_err_t t_cose_crypto_hash_start(struct t_cose_crypto_hash *hash_ctx,
                                           int32_t cose_hash_alg_id)
{
 c030c50:	b573      	push	{r0, r1, r4, r5, r6, lr}
     * than just the single uint32_t, then this code has to change.
     *
     * The status member of t_cose_crypto_hash is used to hold a
     * psa_status_t error code.
     */
    psa_hash_operation_t psa_hash = PSA_HASH_OPERATION_INIT;
 c030c52:	2500      	movs	r5, #0

    /* Map the algorithm ID */
    psa_alg = cose_hash_alg_id_to_psa(cose_hash_alg_id);

    /* Actually do the hash set up */
    hash_ctx->status = psa_hash_setup(&psa_hash, psa_alg);
 c030c54:	4a10      	ldr	r2, [pc, #64]	; (c030c98 <t_cose_crypto_hash_start+0x48>)
 c030c56:	4b11      	ldr	r3, [pc, #68]	; (c030c9c <t_cose_crypto_hash_start+0x4c>)
 c030c58:	4e11      	ldr	r6, [pc, #68]	; (c030ca0 <t_cose_crypto_hash_start+0x50>)
{
 c030c5a:	4604      	mov	r4, r0
    psa_hash_operation_t psa_hash = PSA_HASH_OPERATION_INIT;
 c030c5c:	a802      	add	r0, sp, #8
    hash_ctx->status = psa_hash_setup(&psa_hash, psa_alg);
 c030c5e:	42b1      	cmp	r1, r6
 c030c60:	bf0c      	ite	eq
 c030c62:	4611      	moveq	r1, r2
 c030c64:	4619      	movne	r1, r3
    psa_hash_operation_t psa_hash = PSA_HASH_OPERATION_INIT;
 c030c66:	f840 5d04 	str.w	r5, [r0, #-4]!
    hash_ctx->status = psa_hash_setup(&psa_hash, psa_alg);
 c030c6a:	f7e6 ff70 	bl	c017b4e <psa_hash_setup>
 c030c6e:	4602      	mov	r2, r0
 c030c70:	17c3      	asrs	r3, r0, #31
 c030c72:	e9c4 2302 	strd	r2, r3, [r4, #8]

    /* Copy the PSA handle back into the context */
    hash_ctx->context.handle = psa_hash.handle;
 c030c76:	9b01      	ldr	r3, [sp, #4]
    switch (status) {
 c030c78:	f110 0f86 	cmn.w	r0, #134	; 0x86
    hash_ctx->context.handle = psa_hash.handle;
 c030c7c:	e9c4 3500 	strd	r3, r5, [r4]
    switch (status) {
 c030c80:	d007      	beq.n	c030c92 <t_cose_crypto_hash_start+0x42>
 c030c82:	b120      	cbz	r0, c030c8e <t_cose_crypto_hash_start+0x3e>
        return T_COSE_ERR_HASH_GENERAL_FAIL;
 c030c84:	f110 0f8a 	cmn.w	r0, #138	; 0x8a
 c030c88:	bf0c      	ite	eq
 c030c8a:	2005      	moveq	r0, #5
 c030c8c:	2004      	movne	r0, #4

    /* Map errors and return */
    return psa_status_to_t_cose_error((psa_status_t)hash_ctx->status);
}
 c030c8e:	b002      	add	sp, #8
 c030c90:	bd70      	pop	{r4, r5, r6, pc}
        return T_COSE_ERR_UNSUPPORTED_HASH;
 c030c92:	2003      	movs	r0, #3
 c030c94:	e7fb      	b.n	c030c8e <t_cose_crypto_hash_start+0x3e>
 c030c96:	bf00      	nop
 c030c98:	01000009 	.word	0x01000009
 c030c9c:	01000002 	.word	0x01000002
 c030ca0:	fffee6c0 	.word	0xfffee6c0

0c030ca4 <t_cose_crypto_hash_update>:
/*
 * See documentation in t_cose_crypto.h
 */
void t_cose_crypto_hash_update(struct t_cose_crypto_hash *hash_ctx,
                               struct q_useful_buf_c data_to_hash)
{
 c030ca4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 c030ca6:	466b      	mov	r3, sp
 c030ca8:	e883 0006 	stmia.w	r3, {r1, r2}
    /* See t_cose_crypto_hash_start() for context handling details */
    psa_hash_operation_t psa_hash;

    /* Copy the PSA handle out of the generic context */
    psa_hash.handle = (uint32_t)hash_ctx->context.handle;
 c030cac:	6803      	ldr	r3, [r0, #0]
{
 c030cae:	4604      	mov	r4, r0
    psa_hash.handle = (uint32_t)hash_ctx->context.handle;
 c030cb0:	9303      	str	r3, [sp, #12]

    if(hash_ctx->status != PSA_SUCCESS) {
 c030cb2:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 c030cb6:	4313      	orrs	r3, r2
 c030cb8:	d10b      	bne.n	c030cd2 <t_cose_crypto_hash_update+0x2e>
        /* In error state. Nothing to do. */
        return;
    }

    if(data_to_hash.ptr == NULL) {
 c030cba:	b151      	cbz	r1, c030cd2 <t_cose_crypto_hash_update+0x2e>
         */
        return;
    }

    /* Actually hash the data */
    hash_ctx->status = psa_hash_update(&psa_hash,
 c030cbc:	9a01      	ldr	r2, [sp, #4]
 c030cbe:	a803      	add	r0, sp, #12
 c030cc0:	f7e6 ff72 	bl	c017ba8 <psa_hash_update>
                                       data_to_hash.ptr,
                                       data_to_hash.len);

    /* Copy the PSA handle back into the context. */
    hash_ctx->context.handle = psa_hash.handle;
 c030cc4:	9b03      	ldr	r3, [sp, #12]
    hash_ctx->status = psa_hash_update(&psa_hash,
 c030cc6:	17c1      	asrs	r1, r0, #31
    hash_ctx->context.handle = psa_hash.handle;
 c030cc8:	6023      	str	r3, [r4, #0]
 c030cca:	2300      	movs	r3, #0
    hash_ctx->status = psa_hash_update(&psa_hash,
 c030ccc:	e9c4 0102 	strd	r0, r1, [r4, #8]
    hash_ctx->context.handle = psa_hash.handle;
 c030cd0:	6063      	str	r3, [r4, #4]
}
 c030cd2:	b004      	add	sp, #16
 c030cd4:	bd10      	pop	{r4, pc}

0c030cd6 <t_cose_crypto_hash_finish>:
 */
enum t_cose_err_t
t_cose_crypto_hash_finish(struct t_cose_crypto_hash *hash_ctx,
                          struct q_useful_buf buffer_to_hold_result,
                          struct q_useful_buf_c *hash_result)
{
 c030cd6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 c030cd8:	4604      	mov	r4, r0
 c030cda:	4668      	mov	r0, sp
 c030cdc:	461d      	mov	r5, r3
    /* See t_cose_crypto_hash_start() for context handling details */
    psa_hash_operation_t psa_hash;

    /* Copy the PSA handle out of the generic context */
    psa_hash.handle = (uint32_t)hash_ctx->context.handle;
 c030cde:	6823      	ldr	r3, [r4, #0]
{
 c030ce0:	e880 0006 	stmia.w	r0, {r1, r2}
    psa_hash.handle = (uint32_t)hash_ctx->context.handle;
 c030ce4:	9303      	str	r3, [sp, #12]

    if(hash_ctx->status != PSA_SUCCESS) {
 c030ce6:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 c030cea:	4313      	orrs	r3, r2
 c030cec:	460e      	mov	r6, r1
 c030cee:	d10c      	bne.n	c030d0a <t_cose_crypto_hash_finish+0x34>
        /* Error state. Nothing to do */
        goto Done;
    }

    /* Actually finish up the hash */
    hash_ctx->status = psa_hash_finish(&psa_hash,
 c030cf0:	1d2b      	adds	r3, r5, #4
 c030cf2:	9a01      	ldr	r2, [sp, #4]
 c030cf4:	a803      	add	r0, sp, #12
 c030cf6:	f7e6 ff87 	bl	c017c08 <psa_hash_finish>
                                       &(hash_result->len));

    hash_result->ptr = buffer_to_hold_result.ptr;

    /* Copy the PSA handle back into the context. */
    hash_ctx->context.handle = psa_hash.handle;
 c030cfa:	9b03      	ldr	r3, [sp, #12]
    hash_ctx->status = psa_hash_finish(&psa_hash,
 c030cfc:	17c1      	asrs	r1, r0, #31
 c030cfe:	e9c4 0102 	strd	r0, r1, [r4, #8]
    hash_result->ptr = buffer_to_hold_result.ptr;
 c030d02:	602e      	str	r6, [r5, #0]
    hash_ctx->context.handle = psa_hash.handle;
 c030d04:	6023      	str	r3, [r4, #0]
 c030d06:	2300      	movs	r3, #0
 c030d08:	6063      	str	r3, [r4, #4]
    switch (status) {
 c030d0a:	68a0      	ldr	r0, [r4, #8]
 c030d0c:	f110 0f86 	cmn.w	r0, #134	; 0x86
 c030d10:	d007      	beq.n	c030d22 <t_cose_crypto_hash_finish+0x4c>
 c030d12:	b120      	cbz	r0, c030d1e <t_cose_crypto_hash_finish+0x48>
 c030d14:	f110 0f8a 	cmn.w	r0, #138	; 0x8a
        return T_COSE_ERR_HASH_GENERAL_FAIL;
 c030d18:	bf0c      	ite	eq
 c030d1a:	2005      	moveq	r0, #5
 c030d1c:	2004      	movne	r0, #4

Done:
    return psa_status_to_t_cose_error((psa_status_t)hash_ctx->status);
}
 c030d1e:	b004      	add	sp, #16
 c030d20:	bd70      	pop	{r4, r5, r6, pc}
        return T_COSE_ERR_UNSUPPORTED_HASH;
 c030d22:	2003      	movs	r0, #3
 c030d24:	e7fb      	b.n	c030d1e <t_cose_crypto_hash_finish+0x48>
	...

0c030d28 <t_cose_crypto_pub_key_sign>:
t_cose_crypto_pub_key_sign(int32_t cose_alg_id,
                           int32_t key_select,
                           struct q_useful_buf_c hash_to_sign,
                           struct q_useful_buf signature_buffer,
                           struct q_useful_buf_c *signature)
{
 c030d28:	b570      	push	{r4, r5, r6, lr}
 c030d2a:	b088      	sub	sp, #32
 c030d2c:	a904      	add	r1, sp, #16
 c030d2e:	e9dd 640d 	ldrd	r6, r4, [sp, #52]	; 0x34
    const size_t sig_size = t_cose_signature_size(cose_alg_id);
    psa_key_handle_t private_key;

    ARG_UNUSED(key_select);

    if (sig_size > signature_buffer.len) {
 c030d32:	2e3f      	cmp	r6, #63	; 0x3f
{
 c030d34:	e881 000c 	stmia.w	r1, {r2, r3}
    if (sig_size > signature_buffer.len) {
 c030d38:	d91e      	bls.n	c030d78 <t_cose_crypto_pub_key_sign+0x50>

    /* FixMe: Registration of key(s) should not be done by attestation service.
     *        Later Crypto service is going to get the attestation key from
     *        platform layer.
     */
    attest_ret = attest_register_initial_attestation_private_key(&private_key);
 c030d3a:	f10d 001e 	add.w	r0, sp, #30
 c030d3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 c030d40:	f7fc fce4 	bl	c02d70c <attest_register_initial_attestation_private_key>
    if (attest_ret != PSA_ATTEST_ERR_SUCCESS) {
 c030d44:	b990      	cbnz	r0, c030d6c <t_cose_crypto_pub_key_sign+0x44>
        return T_COSE_ERR_FAIL;
    }

    psa_ret = psa_asymmetric_sign(private_key,
 c030d46:	1d23      	adds	r3, r4, #4
 c030d48:	e9cd 6301 	strd	r6, r3, [sp, #4]
 c030d4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 c030d50:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 c030d54:	9500      	str	r5, [sp, #0]
 c030d56:	4909      	ldr	r1, [pc, #36]	; (c030d7c <t_cose_crypto_pub_key_sign+0x54>)
 c030d58:	f7e7 f9dc 	bl	c018114 <psa_asymmetric_sign>
                                  hash_to_sign.len,
                                  signature_buffer.ptr, /* Sig buf */
                                  signature_buffer.len, /* Sig buf size */
                                  &(signature->len));   /* Sig length */

    if (psa_ret != PSA_SUCCESS) {
 c030d5c:	b950      	cbnz	r0, c030d74 <t_cose_crypto_pub_key_sign+0x4c>
        cose_ret = T_COSE_ERR_FAIL;
    } else {
        signature->ptr = signature_buffer.ptr;
 c030d5e:	6025      	str	r5, [r4, #0]
    enum t_cose_err_t cose_ret = T_COSE_SUCCESS;
 c030d60:	4604      	mov	r4, r0
    }

    attest_ret = attest_unregister_initial_attestation_private_key(private_key);
 c030d62:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 c030d66:	f7fc fd1d 	bl	c02d7a4 <attest_unregister_initial_attestation_private_key>
    if (attest_ret != PSA_ATTEST_ERR_SUCCESS) {
 c030d6a:	b100      	cbz	r0, c030d6e <t_cose_crypto_pub_key_sign+0x46>
        cose_ret =  T_COSE_ERR_FAIL;
 c030d6c:	2410      	movs	r4, #16
    }

    return cose_ret;
}
 c030d6e:	4620      	mov	r0, r4
 c030d70:	b008      	add	sp, #32
 c030d72:	bd70      	pop	{r4, r5, r6, pc}
        cose_ret = T_COSE_ERR_FAIL;
 c030d74:	2410      	movs	r4, #16
 c030d76:	e7f4      	b.n	c030d62 <t_cose_crypto_pub_key_sign+0x3a>
        return T_COSE_ERR_SIG_BUFFER_SIZE;
 c030d78:	2406      	movs	r4, #6
 c030d7a:	e7f8      	b.n	c030d6e <t_cose_crypto_pub_key_sign+0x46>
 c030d7c:	10060009 	.word	0x10060009

0c030d80 <t_cose_sign1_init>:
enum t_cose_err_t t_cose_sign1_init(struct t_cose_sign1_ctx *me,
                                    bool short_circuit_sign,
                                    int32_t cose_alg_id,
                                    int32_t key_select,
                                    QCBOREncodeContext *cbor_encode_ctx)
{
 c030d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c030d84:	4604      	mov	r4, r0
 c030d86:	b0aa      	sub	sp, #168	; 0xa8
    struct q_useful_buf_c         kid = NULLUsefulBufC;


    /* Check the cose_alg_id now by getting the hash alg as an early
     error check even though it is not used until later. */
    hash_alg = hash_alg_id_from_sig_alg_id(cose_alg_id);
 c030d88:	4610      	mov	r0, r2
{
 c030d8a:	4698      	mov	r8, r3
 c030d8c:	460d      	mov	r5, r1
 c030d8e:	4617      	mov	r7, r2
 c030d90:	9e30      	ldr	r6, [sp, #192]	; 0xc0
    hash_alg = hash_alg_id_from_sig_alg_id(cose_alg_id);
 c030d92:	f000 f8a3 	bl	c030edc <hash_alg_id_from_sig_alg_id>
    if(hash_alg == INT32_MAX) {
 c030d96:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 c030d9a:	4298      	cmp	r0, r3
 c030d9c:	d050      	beq.n	c030e40 <t_cose_sign1_init+0xc0>
    }
#endif

    /* Get started with the tagged array that holds the four parts of
     a cose single signed message */
    QCBOREncode_AddTag(cbor_encode_ctx, CBOR_TAG_COSE_SIGN1);
 c030d9e:	2212      	movs	r2, #18
 c030da0:	2300      	movs	r3, #0
    me->short_circuit_sign  = short_circuit_sign;
 c030da2:	f884 5020 	strb.w	r5, [r4, #32]
    QCBOREncode_AddTag(cbor_encode_ctx, CBOR_TAG_COSE_SIGN1);
 c030da6:	4630      	mov	r0, r6
    me->key_select          = key_select;
 c030da8:	e9c4 7806 	strd	r7, r8, [r4, #24]
    me->cbor_encode_ctx     = cbor_encode_ctx;
 c030dac:	6266      	str	r6, [r4, #36]	; 0x24
    QCBOREncode_AddTag(cbor_encode_ctx, CBOR_TAG_COSE_SIGN1);
 c030dae:	f7fe fac3 	bl	c02f338 <QCBOREncode_AddTag>
   QCBOREncode_OpenMapOrArray(pCtx, CBOR_MAJOR_TYPE_ARRAY);
 c030db2:	2104      	movs	r1, #4
 c030db4:	4630      	mov	r0, r6
 c030db6:	f7fe fac2 	bl	c02f33e <QCBOREncode_OpenMapOrArray>
 c030dba:	2310      	movs	r3, #16
    QCBOREncode_Init(&cbor_encode_ctx, buffer_for_header);
 c030dbc:	eb0d 0503 	add.w	r5, sp, r3
 c030dc0:	9301      	str	r3, [sp, #4]
 c030dc2:	466b      	mov	r3, sp
 c030dc4:	9400      	str	r4, [sp, #0]
 c030dc6:	e893 0006 	ldmia.w	r3, {r1, r2}
 c030dca:	4628      	mov	r0, r5
 c030dcc:	f7fe fa5f 	bl	c02f28e <QCBOREncode_Init>
   QCBOREncode_OpenMapOrArray(pCtx, CBOR_MAJOR_TYPE_MAP);
 c030dd0:	2105      	movs	r1, #5
 c030dd2:	4628      	mov	r0, r5
 c030dd4:	f7fe fab3 	bl	c02f33e <QCBOREncode_OpenMapOrArray>
   QCBOREncode_AddInt64(pCtx, nLabel);
 c030dd8:	2201      	movs	r2, #1
 c030dda:	2300      	movs	r3, #0
 c030ddc:	4628      	mov	r0, r5
 c030dde:	f7fe fa6c 	bl	c02f2ba <QCBOREncode_AddInt64>
   QCBOREncode_AddInt64(pCtx, uNum);
 c030de2:	463a      	mov	r2, r7
 c030de4:	17fb      	asrs	r3, r7, #31
 c030de6:	4628      	mov	r0, r5
 c030de8:	f7fe fa67 	bl	c02f2ba <QCBOREncode_AddInt64>
   QCBOREncode_CloseMapOrArray(pCtx, CBOR_MAJOR_TYPE_MAP, NULL);
 c030dec:	2105      	movs	r1, #5
 c030dee:	4628      	mov	r0, r5
 c030df0:	2200      	movs	r2, #0
 c030df2:	f7fe fac4 	bl	c02f37e <QCBOREncode_CloseMapOrArray>
    qcbor_result = QCBOREncode_Finish(&cbor_encode_ctx, &protected_headers);
 c030df6:	a902      	add	r1, sp, #8
 c030df8:	4628      	mov	r0, r5
 c030dfa:	f7fe fafe 	bl	c02f3fa <QCBOREncode_Finish>
    if(qcbor_result == QCBOR_SUCCESS) {
 c030dfe:	b9e0      	cbnz	r0, c030e3a <t_cose_sign1_init+0xba>
        return_value = protected_headers;
 c030e00:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
    QCBOREncode_OpenArray(cbor_encode_ctx);

    /* The protected headers, which are added as a wrapped bstr  */
    buffer_for_protected_header =
        Q_USEFUL_BUF_FROM_BYTE_ARRAY(me->buffer_for_protected_headers);
    me->protected_headers = make_protected_header(cose_alg_id,
 c030e04:	e9c4 0304 	strd	r0, r3, [r4, #16]
                                                  buffer_for_protected_header);
    if(q_useful_buf_c_is_null(me->protected_headers)) {
 c030e08:	b1a0      	cbz	r0, c030e34 <t_cose_sign1_init+0xb4>
 c030e0a:	3410      	adds	r4, #16
 c030e0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 c030e10:	e885 0003 	stmia.w	r5, {r0, r1}
   QCBOREncode_AddBuffer(pCtx, CBOR_MAJOR_TYPE_BYTE_STRING, Bytes);
 c030e14:	2102      	movs	r1, #2
 c030e16:	e895 000c 	ldmia.w	r5, {r2, r3}
 c030e1a:	4630      	mov	r0, r6
 c030e1c:	f7fe fa68 	bl	c02f2f0 <QCBOREncode_AddBuffer>
   QCBOREncode_OpenMapOrArray(pCtx, CBOR_MAJOR_TYPE_MAP);
 c030e20:	2105      	movs	r1, #5
 c030e22:	4630      	mov	r0, r6
 c030e24:	f7fe fa8b 	bl	c02f33e <QCBOREncode_OpenMapOrArray>
   QCBOREncode_CloseMapOrArray(pCtx, CBOR_MAJOR_TYPE_MAP, NULL);
 c030e28:	4630      	mov	r0, r6
 c030e2a:	2200      	movs	r2, #0
 c030e2c:	2105      	movs	r1, #5
 c030e2e:	f7fe faa6 	bl	c02f37e <QCBOREncode_CloseMapOrArray>
     here as the CBOR encoder tracks it internally. */

    return_value = T_COSE_SUCCESS;

Done:
    return return_value;
 c030e32:	2000      	movs	r0, #0
}
 c030e34:	b02a      	add	sp, #168	; 0xa8
 c030e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return_value = NULL_Q_USEFUL_BUF_C;
 c030e3a:	2300      	movs	r3, #0
 c030e3c:	4618      	mov	r0, r3
 c030e3e:	e7e1      	b.n	c030e04 <t_cose_sign1_init+0x84>
        return T_COSE_ERR_UNSUPPORTED_SIGNING_ALG;
 c030e40:	2001      	movs	r0, #1
 c030e42:	e7f7      	b.n	c030e34 <t_cose_sign1_init+0xb4>

0c030e44 <t_cose_sign1_finish>:
/*
 * Public function. See t_cose_sign1_sign.h
 */
enum t_cose_err_t t_cose_sign1_finish(struct t_cose_sign1_ctx *me,
                                      struct q_useful_buf_c signed_payload)
{
 c030e44:	b570      	push	{r4, r5, r6, lr}
 c030e46:	b0aa      	sub	sp, #168	; 0xa8
 c030e48:	4604      	mov	r4, r0
    struct q_useful_buf_c        signature;
    /* Buffer for the actual signature */
    Q_USEFUL_BUF_MAKE_STACK_UB(  buffer_for_signature,
                                     T_COSE_MAX_EC_SIG_SIZE);
    /* Buffer for the tbs hash. Only big enough for SHA256 */
    Q_USEFUL_BUF_MAKE_STACK_UB(  buffer_for_tbs_hash,
 c030e4a:	a812      	add	r0, sp, #72	; 0x48
 c030e4c:	900e      	str	r0, [sp, #56]	; 0x38
 c030e4e:	2020      	movs	r0, #32
{
 c030e50:	ab06      	add	r3, sp, #24
 c030e52:	e883 0006 	stmia.w	r3, {r1, r2}
    Q_USEFUL_BUF_MAKE_STACK_UB(  buffer_for_signature,
 c030e56:	a91a      	add	r1, sp, #104	; 0x68
 c030e58:	910c      	str	r1, [sp, #48]	; 0x30
 c030e5a:	2140      	movs	r1, #64	; 0x40
    Q_USEFUL_BUF_MAKE_STACK_UB(  buffer_for_tbs_hash,
 c030e5c:	900f      	str	r0, [sp, #60]	; 0x3c
}


static inline int QCBOREncode_IsBufferNULL(QCBOREncodeContext *pCtx)
{
   return UsefulOutBuf_IsBufferNULL(&(pCtx->OutBuf));
 c030e5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    Q_USEFUL_BUF_MAKE_STACK_UB(  buffer_for_signature,
 c030e60:	910d      	str	r1, [sp, #52]	; 0x34
                                     T_COSE_CRYPTO_SHA256_SIZE);

    if (QCBOREncode_IsBufferNULL(me->cbor_encode_ctx)) {
 c030e62:	6800      	ldr	r0, [r0, #0]
 c030e64:	b998      	cbnz	r0, c030e8e <t_cose_sign1_finish+0x4a>
         * signature size.
         */
        return_value  = T_COSE_SUCCESS;

        signature.ptr = NULL;
        signature.len = t_cose_signature_size(me->cose_algorithm_id);
 c030e66:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 c030e6a:	ab10      	add	r3, sp, #64	; 0x40
 c030e6c:	aa0a      	add	r2, sp, #40	; 0x28
 c030e6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 c030e72:	e883 0003 	stmia.w	r3, {r0, r1}
   QCBOREncode_AddBuffer(pCtx, CBOR_MAJOR_TYPE_BYTE_STRING, Bytes);
 c030e76:	2102      	movs	r1, #2
 c030e78:	cb0c      	ldmia	r3, {r2, r3}
 c030e7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 c030e7c:	f7fe fa38 	bl	c02f2f0 <QCBOREncode_AddBuffer>
   QCBOREncode_CloseMapOrArray(pCtx, CBOR_MAJOR_TYPE_ARRAY, NULL);
 c030e80:	6a60      	ldr	r0, [r4, #36]	; 0x24
 c030e82:	2200      	movs	r2, #0
 c030e84:	2104      	movs	r1, #4
 c030e86:	f7fe fa7a 	bl	c02f37e <QCBOREncode_CloseMapOrArray>
 c030e8a:	2000      	movs	r0, #0
 c030e8c:	e023      	b.n	c030ed6 <t_cose_sign1_finish+0x92>
         * are the protected headers, the payload that getting signed, the
         * cose signature alg from which the hash alg is determined. The
         * cose_algorithm_id was checked in t_cose_sign1_init() so it
         * doesn't need to be checked here.
         */
        return_value = create_tbs_hash(me->cose_algorithm_id,
 c030e8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 c030e92:	2300      	movs	r3, #0
 c030e94:	ae03      	add	r6, sp, #12
 c030e96:	e886 0005 	stmia.w	r6, {r0, r2}
 c030e9a:	9302      	str	r3, [sp, #8]
 c030e9c:	f104 0310 	add.w	r3, r4, #16
 c030ea0:	e893 0003 	ldmia.w	r3, {r0, r1}
 c030ea4:	e88d 0003 	stmia.w	sp, {r0, r1}
 c030ea8:	ad08      	add	r5, sp, #32
 c030eaa:	aa0e      	add	r2, sp, #56	; 0x38
 c030eac:	462b      	mov	r3, r5
 c030eae:	ca06      	ldmia	r2, {r1, r2}
 c030eb0:	69a0      	ldr	r0, [r4, #24]
 c030eb2:	f000 f81b 	bl	c030eec <create_tbs_hash>
                                       buffer_for_tbs_hash,
                                       &tbs_hash,
                                       me->protected_headers,
                                       T_COSE_TBS_PAYLOAD_IS_BSTR_WRAPPED,
                                       signed_payload);
        if (return_value) {
 c030eb6:	b970      	cbnz	r0, c030ed6 <t_cose_sign1_finish+0x92>
                                              tbs_hash,
                                              buffer_for_signature,
                                              &signature);
        } else {
#endif
            return_value = t_cose_crypto_pub_key_sign(me->cose_algorithm_id,
 c030eb8:	ab0a      	add	r3, sp, #40	; 0x28
 c030eba:	9302      	str	r3, [sp, #8]
 c030ebc:	ab0c      	add	r3, sp, #48	; 0x30
 c030ebe:	e893 0003 	ldmia.w	r3, {r0, r1}
 c030ec2:	e88d 0003 	stmia.w	sp, {r0, r1}
 c030ec6:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 c030eca:	e895 000c 	ldmia.w	r5, {r2, r3}
 c030ece:	f7ff ff2b 	bl	c030d28 <t_cose_crypto_pub_key_sign>
                                                      buffer_for_signature,
                                                      &signature);
#ifdef INCLUDE_TEST_CODE_AND_KEY_ID /* Remove them from release build */
        }
#endif
        if (return_value) {
 c030ed2:	2800      	cmp	r0, #0
 c030ed4:	d0c9      	beq.n	c030e6a <t_cose_sign1_finish+0x26>
    /* CBOR encoding errors are tracked in the CBOR encoding context
     and handled in the layer above this */

Done:
    return return_value;
}
 c030ed6:	b02a      	add	sp, #168	; 0xa8
 c030ed8:	bd70      	pop	{r4, r5, r6, pc}
	...

0c030edc <hash_alg_id_from_sig_alg_id>:
{
    /* If other hashes, particularly those that output bigger hashes
     * are added here, various other parts of this code have to be
     * changed to have larger buffers.
     */
    switch(cose_sig_alg_id) {
 c030edc:	3007      	adds	r0, #7
        return COSE_ALG_SHA256_PROPRIETARY;

    default:
        return INT32_MAX;
    }
}
 c030ede:	4802      	ldr	r0, [pc, #8]	; (c030ee8 <hash_alg_id_from_sig_alg_id+0xc>)
 c030ee0:	bf18      	it	ne
 c030ee2:	f06f 4000 	mvnne.w	r0, #2147483648	; 0x80000000
 c030ee6:	4770      	bx	lr
 c030ee8:	fffee6c0 	.word	0xfffee6c0

0c030eec <create_tbs_hash>:
                                  struct q_useful_buf buffer_for_hash,
                                  struct q_useful_buf_c *hash,
                                  struct q_useful_buf_c protected_headers,
                                  enum t_cose_tbs_hash_mode_t payload_mode,
                                  struct q_useful_buf_c payload)
{
 c030eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c030ef0:	b0c6      	sub	sp, #280	; 0x118
 c030ef2:	466d      	mov	r5, sp
 c030ef4:	e885 0006 	stmia.w	r5, {r1, r2}
     * t_cose_crypto_hash implementation. It sometimes
     * includes the full hashing context.
     */
    enum t_cose_err_t           return_value;
    QCBOREncodeContext          cbor_encode_ctx;
    UsefulBuf_MAKE_STACK_UB(    buffer_for_TBS_first_part, T_COSE_SIZE_OF_TBS);
 c030ef8:	aa16      	add	r2, sp, #88	; 0x58
 c030efa:	9202      	str	r2, [sp, #8]
 c030efc:	2228      	movs	r2, #40	; 0x28
{
 c030efe:	461e      	mov	r6, r3
    UsefulBuf_MAKE_STACK_UB(    buffer_for_TBS_first_part, T_COSE_SIZE_OF_TBS);
 c030f00:	9203      	str	r2, [sp, #12]
 c030f02:	ab02      	add	r3, sp, #8
    struct t_cose_crypto_hash   hash_ctx;
    int32_t                     hash_alg_id;
    size_t                      bytes_to_omit;

    /* This builds the CBOR-format to-be-signed bytes */
    QCBOREncode_Init(&cbor_encode_ctx, buffer_for_TBS_first_part);
 c030f04:	e893 0006 	ldmia.w	r3, {r1, r2}
{
 c030f08:	4607      	mov	r7, r0
    QCBOREncode_Init(&cbor_encode_ctx, buffer_for_TBS_first_part);
 c030f0a:	a820      	add	r0, sp, #128	; 0x80
{
 c030f0c:	f89d 8138 	ldrb.w	r8, [sp, #312]	; 0x138
    QCBOREncode_Init(&cbor_encode_ctx, buffer_for_TBS_first_part);
 c030f10:	f7fe f9bd 	bl	c02f28e <QCBOREncode_Init>
   QCBOREncode_OpenMapOrArray(pCtx, CBOR_MAJOR_TYPE_ARRAY);
 c030f14:	2104      	movs	r1, #4
 c030f16:	a820      	add	r0, sp, #128	; 0x80
 c030f18:	f7fe fa11 	bl	c02f33e <QCBOREncode_OpenMapOrArray>
 c030f1c:	4b34      	ldr	r3, [pc, #208]	; (c030ff0 <create_tbs_hash+0x104>)
 c030f1e:	2400      	movs	r4, #0
 c030f20:	930c      	str	r3, [sp, #48]	; 0x30
 c030f22:	230a      	movs	r3, #10
 c030f24:	930d      	str	r3, [sp, #52]	; 0x34
   QCBOREncode_AddBuffer(pCtx, CBOR_MAJOR_TYPE_TEXT_STRING, Text);
 c030f26:	ab0c      	add	r3, sp, #48	; 0x30
 c030f28:	cb0c      	ldmia	r3, {r2, r3}
 c030f2a:	2103      	movs	r1, #3
 c030f2c:	a820      	add	r0, sp, #128	; 0x80
 c030f2e:	f7fe f9df 	bl	c02f2f0 <QCBOREncode_AddBuffer>
 c030f32:	ab0a      	add	r3, sp, #40	; 0x28
 c030f34:	aa4c      	add	r2, sp, #304	; 0x130
 c030f36:	e892 0003 	ldmia.w	r2, {r0, r1}
 c030f3a:	e883 0003 	stmia.w	r3, {r0, r1}
   QCBOREncode_AddBuffer(pCtx, CBOR_MAJOR_TYPE_BYTE_STRING, Bytes);
 c030f3e:	2102      	movs	r1, #2
 c030f40:	cb0c      	ldmia	r3, {r2, r3}
 c030f42:	a820      	add	r0, sp, #128	; 0x80
 c030f44:	f7fe f9d4 	bl	c02f2f0 <QCBOREncode_AddBuffer>
 c030f48:	e9cd 4408 	strd	r4, r4, [sp, #32]
 c030f4c:	ab08      	add	r3, sp, #32
 c030f4e:	cb0c      	ldmia	r3, {r2, r3}
 c030f50:	2102      	movs	r1, #2
 c030f52:	a820      	add	r0, sp, #128	; 0x80
 c030f54:	f7fe f9cc 	bl	c02f2f0 <QCBOREncode_AddBuffer>

    /* external_aad. There is none so an empty bstr */
    QCBOREncode_AddBytes(&cbor_encode_ctx, NULL_Q_USEFUL_BUF_C);

    /* The short fake payload. */
    if(payload_mode == T_COSE_TBS_PAYLOAD_IS_BSTR_WRAPPED) {
 c030f58:	f1b8 0f00 	cmp.w	r8, #0
 c030f5c:	d139      	bne.n	c030fd2 <create_tbs_hash+0xe6>
 c030f5e:	e9cd 880e 	strd	r8, r8, [sp, #56]	; 0x38
 c030f62:	ab0e      	add	r3, sp, #56	; 0x38
 c030f64:	cb0c      	ldmia	r3, {r2, r3}
 c030f66:	2102      	movs	r1, #2
 c030f68:	a820      	add	r0, sp, #128	; 0x80
 c030f6a:	f7fe f9c1 	bl	c02f2f0 <QCBOREncode_AddBuffer>
        /* Fake payload is just an empty bstr. It is here only
         * to make the array count right. It must be ommitted
         * in the actual hashing below
         */
        bytes_to_omit = 1;
 c030f6e:	2401      	movs	r4, #1
   QCBOREncode_CloseMapOrArray(pCtx, CBOR_MAJOR_TYPE_ARRAY, NULL);
 c030f70:	2104      	movs	r1, #4
 c030f72:	a820      	add	r0, sp, #128	; 0x80
 c030f74:	2200      	movs	r2, #0
 c030f76:	f7fe fa02 	bl	c02f37e <QCBOREncode_CloseMapOrArray>

    /* Close of the array */
    QCBOREncode_CloseArray(&cbor_encode_ctx);

    /* get the encoded results, except for payload */
    qcbor_result = QCBOREncode_Finish(&cbor_encode_ctx, &tbs_first_part);
 c030f7a:	a904      	add	r1, sp, #16
 c030f7c:	a820      	add	r0, sp, #128	; 0x80
 c030f7e:	f7fe fa3c 	bl	c02f3fa <QCBOREncode_Finish>
    if(qcbor_result) {
 c030f82:	2800      	cmp	r0, #0
 c030f84:	d131      	bne.n	c030fea <create_tbs_hash+0xfe>
        return_value = T_COSE_ERR_SIG_STRUCT;
        goto Done;
    }

    /* Start the hashing */
    hash_alg_id = hash_alg_id_from_sig_alg_id(cose_alg_id);
 c030f86:	4638      	mov	r0, r7
 c030f88:	f7ff ffa8 	bl	c030edc <hash_alg_id_from_sig_alg_id>
    /* Don't check hash_alg_id for failure. t_cose_crypto_hash_start()
     * will handle it properly.
     */
    return_value = t_cose_crypto_hash_start(&hash_ctx, hash_alg_id);
 c030f8c:	4601      	mov	r1, r0
 c030f8e:	a812      	add	r0, sp, #72	; 0x48
 c030f90:	f7ff fe5e 	bl	c030c50 <t_cose_crypto_hash_start>
    if(return_value) {
 c030f94:	b9d0      	cbnz	r0, c030fcc <create_tbs_hash+0xe0>
 c030f96:	9b05      	ldr	r3, [sp, #20]
 c030f98:	1b1c      	subs	r4, r3, r4
   return (UsefulBufC){UB.ptr, uAmount};
 c030f9a:	bf28      	it	cs
 c030f9c:	9a04      	ldrcs	r2, [sp, #16]
 c030f9e:	ab06      	add	r3, sp, #24
      return NULLUsefulBufC;
 c030fa0:	bf34      	ite	cc
 c030fa2:	e9c3 0000 	strdcc	r0, r0, [r3]
   return (UsefulBufC){UB.ptr, uAmount};
 c030fa6:	e9c3 2400 	strdcs	r2, r4, [r3]
     */

    /* This is hashing of the first part, all the CBOR
     * except the payload.
     */
    t_cose_crypto_hash_update(&hash_ctx,
 c030faa:	a812      	add	r0, sp, #72	; 0x48
 c030fac:	e893 0006 	ldmia.w	r3, {r1, r2}
 c030fb0:	f7ff fe78 	bl	c030ca4 <t_cose_crypto_hash_update>
                                        tbs_first_part.len - bytes_to_omit));

    /* Hash the payload, the second part. This may or may not
     * have the bstr wrapping. If not, it was hashed above.
     */
    t_cose_crypto_hash_update(&hash_ctx, payload);
 c030fb4:	ab4f      	add	r3, sp, #316	; 0x13c
 c030fb6:	e893 0006 	ldmia.w	r3, {r1, r2}
 c030fba:	a812      	add	r0, sp, #72	; 0x48
 c030fbc:	f7ff fe72 	bl	c030ca4 <t_cose_crypto_hash_update>

    /* Finish the hash and set up to return it */
    return_value = t_cose_crypto_hash_finish(&hash_ctx,
 c030fc0:	e895 0006 	ldmia.w	r5, {r1, r2}
 c030fc4:	4633      	mov	r3, r6
 c030fc6:	a812      	add	r0, sp, #72	; 0x48
 c030fc8:	f7ff fe85 	bl	c030cd6 <t_cose_crypto_hash_finish>
                                             buffer_for_hash,
                                             hash);
Done:
    return return_value;
}
 c030fcc:	b046      	add	sp, #280	; 0x118
 c030fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c030fd2:	ab10      	add	r3, sp, #64	; 0x40
 c030fd4:	aa4f      	add	r2, sp, #316	; 0x13c
 c030fd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 c030fda:	e883 0003 	stmia.w	r3, {r0, r1}
    QCBOREncode_AddBuffer(pCtx, CBOR_MAJOR_NONE_TYPE_BSTR_LEN_ONLY, Bytes);
 c030fde:	210b      	movs	r1, #11
 c030fe0:	cb0c      	ldmia	r3, {r2, r3}
 c030fe2:	a820      	add	r0, sp, #128	; 0x80
 c030fe4:	f7fe f984 	bl	c02f2f0 <QCBOREncode_AddBuffer>
 c030fe8:	e7c2      	b.n	c030f70 <create_tbs_hash+0x84>
        return_value = T_COSE_ERR_SIG_STRUCT;
 c030fea:	2014      	movs	r0, #20
 c030fec:	e7ee      	b.n	c030fcc <create_tbs_hash+0xe0>
 c030fee:	bf00      	nop
 c030ff0:	0c0357df 	.word	0x0c0357df

0c030ff4 <PendSV_Handler>:
#pragma required=tfm_pendsv_do_schedule
#endif

__attribute__((naked)) void PendSV_Handler(void)
{
    __ASM volatile(
 c030ff4:	f3ef 8009 	mrs	r0, PSP
 c030ff8:	f3ef 810b 	mrs	r1, PSPLIM
 c030ffc:	b507      	push	{r0, r1, r2, lr}
 c030ffe:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 c031002:	4668      	mov	r0, sp
 c031004:	f7fe fd10 	bl	c02fa28 <tfm_pendsv_do_schedule>
 c031008:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 c03100c:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 c031010:	f380 8809 	msr	PSP, r0
 c031014:	f381 880b 	msr	PSPLIM, r1
 c031018:	4770      	bx	lr

0c03101a <tfm_arch_initialize_ctx_ext>:
void tfm_arch_initialize_ctx_ext(struct tfm_state_context_ext *p_ctxb,
                                 uint32_t sp, uint32_t sp_limit)
{
    p_ctxb->sp = sp;
    p_ctxb->sp_limit = sp_limit;
    p_ctxb->lr = INIT_LR_UNPRIVILEGED;
 c03101a:	f06f 0302 	mvn.w	r3, #2
    p_ctxb->sp_limit = sp_limit;
 c03101e:	e9c0 1208 	strd	r1, r2, [r0, #32]
    p_ctxb->lr = INIT_LR_UNPRIVILEGED;
 c031022:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 c031024:	4770      	bx	lr
	...

0c031028 <SecureFault_Handler>:

/**
 * \brief Overwrites default Secure fault handler.
 */
void SecureFault_Handler(void)
{
 c031028:	b538      	push	{r3, r4, r5, lr}
    __ASM volatile ("MOV %0, LR\n" : "=r" (result));
 c03102a:	4673      	mov	r3, lr
    /* figure out context from which we landed in fault handler */
    uint32_t lr = __get_LR();
    uint32_t sp;

    if (lr & EXC_RETURN_SECURE_STACK) {
 c03102c:	f013 0f40 	tst.w	r3, #64	; 0x40
 c031030:	f003 0304 	and.w	r3, r3, #4
 c031034:	d02f      	beq.n	c031096 <SecureFault_Handler+0x6e>
        if (lr & EXC_RETURN_STACK_PROCESS) {
 c031036:	b35b      	cbz	r3, c031090 <SecureFault_Handler+0x68>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 c031038:	f3ef 8309 	mrs	r3, PSP
            sp = __TZ_get_MSP_NS();
        }
    }

    /* Only save the context if sp is valid */
    if ((sp >=  S_DATA_START &&
 c03103c:	f64f 31e0 	movw	r1, #64480	; 0xfbe0
 c031040:	f103 424f 	add.w	r2, r3, #3472883712	; 0xcf000000
 c031044:	f502 027d 	add.w	r2, r2, #16580608	; 0xfd0000
 c031048:	428a      	cmp	r2, r1
 c03104a:	d904      	bls.n	c031056 <SecureFault_Handler+0x2e>
         sp <=  (S_DATA_LIMIT - sizeof(tfm_fault_context)) + 1) ||
 c03104c:	4a17      	ldr	r2, [pc, #92]	; (c0310ac <SecureFault_Handler+0x84>)
        (sp >= NS_DATA_START &&
 c03104e:	f103 4160 	add.w	r1, r3, #3758096384	; 0xe0000000
         sp <=  (S_DATA_LIMIT - sizeof(tfm_fault_context)) + 1) ||
 c031052:	4291      	cmp	r1, r2
 c031054:	d80a      	bhi.n	c03106c <SecureFault_Handler+0x44>
 c031056:	4c16      	ldr	r4, [pc, #88]	; (c0310b0 <SecureFault_Handler+0x88>)
 c031058:	f103 0520 	add.w	r5, r3, #32
 c03105c:	4622      	mov	r2, r4
 c03105e:	6818      	ldr	r0, [r3, #0]
 c031060:	6859      	ldr	r1, [r3, #4]
 c031062:	3308      	adds	r3, #8
 c031064:	c203      	stmia	r2!, {r0, r1}
 c031066:	42ab      	cmp	r3, r5
 c031068:	4614      	mov	r4, r2
 c03106a:	d1f7      	bne.n	c03105c <SecureFault_Handler+0x34>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 c03106c:	f3ef 8305 	mrs	r3, IPSR
    return IPSR.b.ISR;
 c031070:	f3c3 0308 	ubfx	r3, r3, #0, #9
        tfm_memcpy(&tfm_fault_context,
                   (const void *)sp,
                   sizeof(tfm_fault_context));
    }

    LOG_MSG("Oops... Secure fault!!! You're not going anywhere!");
 c031074:	b1b3      	cbz	r3, c0310a4 <SecureFault_Handler+0x7c>
 c031076:	480f      	ldr	r0, [pc, #60]	; (c0310b4 <SecureFault_Handler+0x8c>)
 c031078:	f000 fa3e 	bl	c0314f8 <tfm_core_log_puts>
 c03107c:	480e      	ldr	r0, [pc, #56]	; (c0310b8 <SecureFault_Handler+0x90>)
 c03107e:	f000 fa3b 	bl	c0314f8 <tfm_core_log_puts>
 c031082:	480e      	ldr	r0, [pc, #56]	; (c0310bc <SecureFault_Handler+0x94>)
 c031084:	f000 fa38 	bl	c0314f8 <tfm_core_log_puts>
    Error_Handler();
}
 c031088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 c03108c:	f7e9 b978 	b.w	c01a380 <Error_Handler>
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 c031090:	f3ef 8308 	mrs	r3, MSP
 c031094:	e7d2      	b.n	c03103c <SecureFault_Handler+0x14>
        if (lr & EXC_RETURN_STACK_PROCESS) {
 c031096:	b113      	cbz	r3, c03109e <SecureFault_Handler+0x76>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 c031098:	f3ef 8389 	mrs	r3, PSP_NS
 c03109c:	e7ce      	b.n	c03103c <SecureFault_Handler+0x14>
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 c03109e:	f3ef 8388 	mrs	r3, MSP_NS
 c0310a2:	e7cb      	b.n	c03103c <SecureFault_Handler+0x14>
    LOG_MSG("Oops... Secure fault!!! You're not going anywhere!");
 c0310a4:	4b04      	ldr	r3, [pc, #16]	; (c0310b8 <SecureFault_Handler+0x90>)
 c0310a6:	4618      	mov	r0, r3
 c0310a8:	df06      	svc	6
 c0310aa:	e7ed      	b.n	c031088 <SecureFault_Handler+0x60>
 c0310ac:	0002ffe0 	.word	0x0002ffe0
 c0310b0:	3003f288 	.word	0x3003f288
 c0310b4:	0c032cd0 	.word	0x0c032cd0
 c0310b8:	0c0357ea 	.word	0x0c0357ea
 c0310bc:	0c035863 	.word	0x0c035863

0c0310c0 <SVC_Handler>:

#pragma required=tfm_core_svc_handler
#endif
__attribute__((naked)) void SVC_Handler(void)
{
    __ASM volatile(
 c0310c0:	f3ef 8208 	mrs	r2, MSP
 c0310c4:	f01e 0f04 	tst.w	lr, #4
 c0310c8:	bf0c      	ite	eq
 c0310ca:	4610      	moveq	r0, r2
 c0310cc:	f3ef 8009 	mrsne	r0, PSP
 c0310d0:	4671      	mov	r1, lr
 c0310d2:	f000 fa5f 	bl	c031594 <tfm_core_svc_handler>
 c0310d6:	4700      	bx	r0

0c0310d8 <MemManage_Handler>:
}
#endif
/* Reserved for future usage */
__attribute__((naked)) void MemManage_Handler(void)
{
    __ASM volatile("b    .");
 c0310d8:	e7fe      	b.n	c0310d8 <MemManage_Handler>

0c0310da <BusFault_Handler>:
}

__attribute__((naked)) void BusFault_Handler(void)
{
    __ASM volatile("b    .");
 c0310da:	e7fe      	b.n	c0310da <BusFault_Handler>

0c0310dc <UsageFault_Handler>:
}
__attribute__((naked)) void UsageFault_Handler(void)
{
    __ASM volatile("b    .");
 c0310dc:	e7fe      	b.n	c0310dc <UsageFault_Handler>
	...

0c0310e0 <tfm_arch_prioritize_secure_exception>:
    uint32_t VECTKEY;
    SCB_Type *scb = SCB;
    uint32_t AIRCR;

    /* Set PRIS flag in AIRCR */
    AIRCR = scb->AIRCR;
 c0310e0:	4a04      	ldr	r2, [pc, #16]	; (c0310f4 <tfm_arch_prioritize_secure_exception+0x14>)
 c0310e2:	68d3      	ldr	r3, [r2, #12]
    VECTKEY = (~AIRCR & SCB_AIRCR_VECTKEYSTAT_Msk);
    scb->AIRCR = SCB_AIRCR_PRIS_Msk |
                 VECTKEY |
 c0310e4:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
 c0310e8:	f483 037f 	eor.w	r3, r3, #16711680	; 0xff0000
 c0310ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    scb->AIRCR = SCB_AIRCR_PRIS_Msk |
 c0310f0:	60d3      	str	r3, [r2, #12]
                 (AIRCR & ~SCB_AIRCR_VECTKEY_Msk);
}
 c0310f2:	4770      	bx	lr
 c0310f4:	e000ed00 	.word	0xe000ed00

0c0310f8 <attest_check_memory_access>:
        attest_res = PSA_ATTEST_ERR_INVALID_INPUT;
    }
#endif

    return attest_res;
}
 c0310f8:	2000      	movs	r0, #0
 c0310fa:	4770      	bx	lr

0c0310fc <attest_get_caller_client_id>:
    tfm_res = tfm_core_get_caller_client_id(caller_id);
    if (tfm_res) {
        attest_res = PSA_ATTEST_ERR_CLAIM_UNAVAILABLE;
    }
#else
    *caller_id = g_attest_caller_id;
 c0310fc:	4b02      	ldr	r3, [pc, #8]	; (c031108 <attest_get_caller_client_id+0xc>)
 c0310fe:	681b      	ldr	r3, [r3, #0]
 c031100:	6003      	str	r3, [r0, #0]
#endif

    return attest_res;
}
 c031102:	2000      	movs	r0, #0
 c031104:	4770      	bx	lr
 c031106:	bf00      	nop
 c031108:	3003f2a8 	.word	0x3003f2a8

0c03110c <attest_get_boot_data>:

enum psa_attest_err_t
attest_get_boot_data(uint8_t major_type,
                     struct tfm_boot_data *boot_data,
                     uint32_t len)
{
 c03110c:	b508      	push	{r3, lr}
    boot_data->header.tlv_magic   = SHARED_DATA_TLV_INFO_MAGIC;
    boot_data->header.tlv_tot_len = SHARED_DATA_HEADER_SIZE;
#else
    int32_t tfm_res;

    tfm_res = tfm_core_get_boot_data(major_type, boot_data, len);
 c03110e:	f7e6 f921 	bl	c017354 <tfm_core_get_boot_data>
        attest_res =  PSA_ATTEST_ERR_INIT_FAILED;
    }
#endif /* BL2 */

    return attest_res;
}
 c031112:	3000      	adds	r0, #0
 c031114:	bf18      	it	ne
 c031116:	2001      	movne	r0, #1
 c031118:	bd08      	pop	{r3, pc}
	...

0c03111c <psa_attest_get_token_size>:

    return status;
}

static enum psa_attest_err_t psa_attest_get_token_size(const psa_msg_t *msg)
{
 c03111c:	b530      	push	{r4, r5, lr}
 c03111e:	b087      	sub	sp, #28
    enum psa_attest_err_t status = PSA_ATTEST_ERR_SUCCESS;
    uint32_t challenge_size;
    uint32_t token_size;
    uint32_t bytes_read = 0;
    psa_invec in_vec[] = {
        {&challenge_size, msg->in_size[0]}
 c031120:	6902      	ldr	r2, [r0, #16]
    };
    psa_outvec out_vec[] = {
 c031122:	ab01      	add	r3, sp, #4
 c031124:	9304      	str	r3, [sp, #16]
        {&token_size, msg->out_size[0]}
 c031126:	6a03      	ldr	r3, [r0, #32]
    };

    if (msg->in_size[0] != sizeof(challenge_size)
 c031128:	2a04      	cmp	r2, #4
{
 c03112a:	4604      	mov	r4, r0
    psa_invec in_vec[] = {
 c03112c:	f8cd d008 	str.w	sp, [sp, #8]
 c031130:	9203      	str	r2, [sp, #12]
    psa_outvec out_vec[] = {
 c031132:	9305      	str	r3, [sp, #20]
    if (msg->in_size[0] != sizeof(challenge_size)
 c031134:	d003      	beq.n	c03113e <psa_attest_get_token_size+0x22>
        || msg->out_size[0] != sizeof(token_size)) {
        return PSA_ATTEST_ERR_INVALID_INPUT;
 c031136:	2504      	movs	r5, #4
    if (status == PSA_ATTEST_ERR_SUCCESS) {
        psa_write(msg->handle, 0, out_vec[0].base, out_vec[0].len);
    }

    return status;
}
 c031138:	4628      	mov	r0, r5
 c03113a:	b007      	add	sp, #28
 c03113c:	bd30      	pop	{r4, r5, pc}
        || msg->out_size[0] != sizeof(token_size)) {
 c03113e:	2b04      	cmp	r3, #4
 c031140:	d1f9      	bne.n	c031136 <psa_attest_get_token_size+0x1a>
    g_attest_caller_id = msg->client_id;
 c031142:	6881      	ldr	r1, [r0, #8]
 c031144:	4a0c      	ldr	r2, [pc, #48]	; (c031178 <psa_attest_get_token_size+0x5c>)
    bytes_read = psa_read(msg->handle, 0,
 c031146:	6840      	ldr	r0, [r0, #4]
    g_attest_caller_id = msg->client_id;
 c031148:	6011      	str	r1, [r2, #0]
    bytes_read = psa_read(msg->handle, 0,
 c03114a:	466a      	mov	r2, sp
 c03114c:	2100      	movs	r1, #0
 c03114e:	f7e6 f9b3 	bl	c0174b8 <psa_read>
    if (bytes_read != msg->in_size[0]) {
 c031152:	6923      	ldr	r3, [r4, #16]
 c031154:	4283      	cmp	r3, r0
 c031156:	d1ee      	bne.n	c031136 <psa_attest_get_token_size+0x1a>
    status = initial_attest_get_token_size(in_vec, IOVEC_LEN(in_vec),
 c031158:	2301      	movs	r3, #1
 c03115a:	aa04      	add	r2, sp, #16
 c03115c:	4619      	mov	r1, r3
 c03115e:	a802      	add	r0, sp, #8
 c031160:	f7fc fab3 	bl	c02d6ca <initial_attest_get_token_size>
    if (status == PSA_ATTEST_ERR_SUCCESS) {
 c031164:	4605      	mov	r5, r0
 c031166:	2800      	cmp	r0, #0
 c031168:	d1e6      	bne.n	c031138 <psa_attest_get_token_size+0x1c>
        psa_write(msg->handle, 0, out_vec[0].base, out_vec[0].len);
 c03116a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 c03116e:	4601      	mov	r1, r0
 c031170:	6860      	ldr	r0, [r4, #4]
 c031172:	f7e6 f9a5 	bl	c0174c0 <psa_write>
 c031176:	e7df      	b.n	c031138 <psa_attest_get_token_size+0x1c>
 c031178:	3003f2a8 	.word	0x3003f2a8

0c03117c <psa_attest_get_token>:
{
 c03117c:	b530      	push	{r4, r5, lr}
    size_t challenge_size = msg->in_size[0];
 c03117e:	6904      	ldr	r4, [r0, #16]
{
 c031180:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
    size_t token_size = msg->out_size[0];
 c031184:	6a03      	ldr	r3, [r0, #32]
    psa_invec in_vec[] = {
 c031186:	aa04      	add	r2, sp, #16
    psa_outvec out_vec[] = {
 c031188:	a914      	add	r1, sp, #80	; 0x50
    if (challenge_size > PSA_INITIAL_ATTEST_CHALLENGE_SIZE_64) {
 c03118a:	2c40      	cmp	r4, #64	; 0x40
{
 c03118c:	4605      	mov	r5, r0
    psa_invec in_vec[] = {
 c03118e:	e9cd 2400 	strd	r2, r4, [sp]
    psa_outvec out_vec[] = {
 c031192:	e9cd 1302 	strd	r1, r3, [sp, #8]
    if (challenge_size > PSA_INITIAL_ATTEST_CHALLENGE_SIZE_64) {
 c031196:	d81b      	bhi.n	c0311d0 <psa_attest_get_token+0x54>
    g_attest_caller_id = msg->client_id;
 c031198:	6881      	ldr	r1, [r0, #8]
 c03119a:	4b0f      	ldr	r3, [pc, #60]	; (c0311d8 <psa_attest_get_token+0x5c>)
    bytes_read = psa_read(msg->handle, 0,
 c03119c:	6840      	ldr	r0, [r0, #4]
    g_attest_caller_id = msg->client_id;
 c03119e:	6019      	str	r1, [r3, #0]
    bytes_read = psa_read(msg->handle, 0,
 c0311a0:	4623      	mov	r3, r4
 c0311a2:	2100      	movs	r1, #0
 c0311a4:	f7e6 f988 	bl	c0174b8 <psa_read>
    if (bytes_read != challenge_size) {
 c0311a8:	4284      	cmp	r4, r0
 c0311aa:	d113      	bne.n	c0311d4 <psa_attest_get_token+0x58>
    status = initial_attest_get_token(in_vec, IOVEC_LEN(in_vec),
 c0311ac:	2301      	movs	r3, #1
 c0311ae:	aa02      	add	r2, sp, #8
 c0311b0:	4619      	mov	r1, r3
 c0311b2:	4668      	mov	r0, sp
 c0311b4:	f7fc fa5e 	bl	c02d674 <initial_attest_get_token>
    if (status == PSA_ATTEST_ERR_SUCCESS) {
 c0311b8:	4604      	mov	r4, r0
 c0311ba:	b928      	cbnz	r0, c0311c8 <psa_attest_get_token+0x4c>
        psa_write(msg->handle, 0, out_vec[0].base, out_vec[0].len);
 c0311bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c0311c0:	4601      	mov	r1, r0
 c0311c2:	6868      	ldr	r0, [r5, #4]
 c0311c4:	f7e6 f97c 	bl	c0174c0 <psa_write>
}
 c0311c8:	4620      	mov	r0, r4
 c0311ca:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
 c0311ce:	bd30      	pop	{r4, r5, pc}
        return PSA_ATTEST_ERR_INVALID_INPUT;
 c0311d0:	2404      	movs	r4, #4
 c0311d2:	e7f9      	b.n	c0311c8 <psa_attest_get_token+0x4c>
        return PSA_ATTEST_ERR_GENERAL;
 c0311d4:	2405      	movs	r4, #5
 c0311d6:	e7f7      	b.n	c0311c8 <psa_attest_get_token+0x4c>
 c0311d8:	3003f2a8 	.word	0x3003f2a8

0c0311dc <attest_signal_handle>:
    while (1)
        ;
}

static void attest_signal_handle(psa_signal_t signal, attest_func_t pfn)
{
 c0311dc:	b510      	push	{r4, lr}
 c0311de:	b08c      	sub	sp, #48	; 0x30
 c0311e0:	460c      	mov	r4, r1
    psa_msg_t msg;
    psa_status_t status;

    status = psa_get(signal, &msg);
 c0311e2:	4669      	mov	r1, sp
 c0311e4:	f7e6 f964 	bl	c0174b0 <psa_get>
    switch (msg.type) {
 c0311e8:	9b00      	ldr	r3, [sp, #0]
 c0311ea:	1c99      	adds	r1, r3, #2
 c0311ec:	db02      	blt.n	c0311f4 <attest_signal_handle+0x18>
 c0311ee:	1c5a      	adds	r2, r3, #1
 c0311f0:	dd01      	ble.n	c0311f6 <attest_signal_handle+0x1a>
 c0311f2:	b133      	cbz	r3, c031202 <attest_signal_handle+0x26>
 c0311f4:	e7fe      	b.n	c0311f4 <attest_signal_handle+0x18>
    case PSA_IPC_CONNECT:
        psa_reply(msg.handle, PSA_SUCCESS);
 c0311f6:	2100      	movs	r1, #0
        break;
    case PSA_IPC_CALL:
        status = (psa_status_t)pfn(&msg);
        psa_reply(msg.handle, status);
 c0311f8:	9801      	ldr	r0, [sp, #4]
 c0311fa:	f7e6 f963 	bl	c0174c4 <psa_reply>
        psa_reply(msg.handle, PSA_SUCCESS);
        break;
    default:
        tfm_abort();
    }
}
 c0311fe:	b00c      	add	sp, #48	; 0x30
 c031200:	bd10      	pop	{r4, pc}
        status = (psa_status_t)pfn(&msg);
 c031202:	4668      	mov	r0, sp
 c031204:	47a0      	blx	r4
        psa_reply(msg.handle, status);
 c031206:	4601      	mov	r1, r0
 c031208:	e7f6      	b.n	c0311f8 <attest_signal_handle+0x1c>
	...

0c03120c <attest_partition_init>:
#endif

enum psa_attest_err_t attest_partition_init(void)
{
 c03120c:	b538      	push	{r3, r4, r5, lr}
    enum psa_attest_err_t err = PSA_ATTEST_ERR_SUCCESS;
#ifdef TFM_PSA_API
    psa_signal_t signals;
#endif

    err = attest_init();
 c03120e:	f7fc fa29 	bl	c02d664 <attest_init>
#ifdef TFM_PSA_API
    if (err != PSA_ATTEST_ERR_SUCCESS) {
 c031212:	b970      	cbnz	r0, c031232 <attest_partition_init+0x26>
        signals = psa_wait(PSA_WAIT_ANY, PSA_BLOCK);
        if (signals & PSA_ATTEST_GET_TOKEN_SIG) {
            attest_signal_handle(PSA_ATTEST_GET_TOKEN_SIG,
                                 psa_attest_get_token);
        } else if (signals & PSA_ATTEST_GET_TOKEN_SIZE_SIG) {
            attest_signal_handle(PSA_ATTEST_GET_TOKEN_SIZE_SIG,
 c031214:	4c0a      	ldr	r4, [pc, #40]	; (c031240 <attest_partition_init+0x34>)
            attest_signal_handle(PSA_ATTEST_GET_TOKEN_SIG,
 c031216:	4d0b      	ldr	r5, [pc, #44]	; (c031244 <attest_partition_init+0x38>)
        signals = psa_wait(PSA_WAIT_ANY, PSA_BLOCK);
 c031218:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 c03121c:	f04f 30ff 	mov.w	r0, #4294967295
 c031220:	f7e6 f944 	bl	c0174ac <psa_wait>
        if (signals & PSA_ATTEST_GET_TOKEN_SIG) {
 c031224:	06c2      	lsls	r2, r0, #27
 c031226:	d505      	bpl.n	c031234 <attest_partition_init+0x28>
            attest_signal_handle(PSA_ATTEST_GET_TOKEN_SIG,
 c031228:	4629      	mov	r1, r5
 c03122a:	2010      	movs	r0, #16
            attest_signal_handle(PSA_ATTEST_GET_TOKEN_SIZE_SIG,
 c03122c:	f7ff ffd6 	bl	c0311dc <attest_signal_handle>
 c031230:	e7f2      	b.n	c031218 <attest_partition_init+0xc>
 c031232:	e7fe      	b.n	c031232 <attest_partition_init+0x26>
        } else if (signals & PSA_ATTEST_GET_TOKEN_SIZE_SIG) {
 c031234:	0683      	lsls	r3, r0, #26
 c031236:	d502      	bpl.n	c03123e <attest_partition_init+0x32>
            attest_signal_handle(PSA_ATTEST_GET_TOKEN_SIZE_SIG,
 c031238:	4621      	mov	r1, r4
 c03123a:	2020      	movs	r0, #32
 c03123c:	e7f6      	b.n	c03122c <attest_partition_init+0x20>
 c03123e:	e7fe      	b.n	c03123e <attest_partition_init+0x32>
 c031240:	0c03111d 	.word	0x0c03111d
 c031244:	0c03117d 	.word	0x0c03117d

0c031248 <tfm_core_check_boot_data_access_policy>:
 * \param[in]  major_type  Data type identifier.
 *
 * \return  Returns 0 in case of success, otherwise -1.
 */
static int32_t tfm_core_check_boot_data_access_policy(uint8_t major_type)
{
 c031248:	b510      	push	{r4, lr}
 c03124a:	4604      	mov	r4, r0
#ifndef TFM_PSA_API
    uint32_t partition_idx = tfm_spm_partition_get_running_partition_idx();

    partition_id = tfm_spm_partition_get_partition_id(partition_idx);
#else
    partition_id = tfm_spm_partition_get_running_partition_id();
 c03124c:	f7fe fa7a 	bl	c02f744 <tfm_spm_partition_get_running_partition_id>
#endif

    for (i = 0; i < array_size; ++i) {
        if (partition_id == access_policy_table[i].partition_id) {
 c031250:	f240 1305 	movw	r3, #261	; 0x105
 c031254:	4298      	cmp	r0, r3
 c031256:	d106      	bne.n	c031266 <tfm_core_check_boot_data_access_policy+0x1e>
            if (major_type == access_policy_table[i].major_type) {
 c031258:	2c01      	cmp	r4, #1
 c03125a:	d00c      	beq.n	c031276 <tfm_core_check_boot_data_access_policy+0x2e>
 c03125c:	1c20      	adds	r0, r4, #0
 c03125e:	bf18      	it	ne
 c031260:	2001      	movne	r0, #1
 c031262:	4240      	negs	r0, r0
            }
        }
    }

    return rc;
}
 c031264:	bd10      	pop	{r4, pc}
        if (partition_id == access_policy_table[i].partition_id) {
 c031266:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 c03126a:	d106      	bne.n	c03127a <tfm_core_check_boot_data_access_policy+0x32>
            if (major_type == access_policy_table[i].major_type) {
 c03126c:	1ea0      	subs	r0, r4, #2
 c03126e:	bf18      	it	ne
 c031270:	f04f 30ff 	movne.w	r0, #4294967295
 c031274:	e7f6      	b.n	c031264 <tfm_core_check_boot_data_access_policy+0x1c>
                rc = 0;
 c031276:	2000      	movs	r0, #0
 c031278:	e7f4      	b.n	c031264 <tfm_core_check_boot_data_access_policy+0x1c>
    int32_t rc = -1;
 c03127a:	f04f 30ff 	mov.w	r0, #4294967295
    return rc;
 c03127e:	e7f1      	b.n	c031264 <tfm_core_check_boot_data_access_policy+0x1c>

0c031280 <tfm_core_validate_boot_data>:
{
    struct tfm_boot_data *boot_data;

    boot_data = (struct tfm_boot_data *)BOOT_TFM_SHARED_DATA_BASE;

    if (boot_data->header.tlv_magic == SHARED_DATA_TLV_INFO_MAGIC) {
 c031280:	4b04      	ldr	r3, [pc, #16]	; (c031294 <tfm_core_validate_boot_data+0x14>)
 c031282:	881a      	ldrh	r2, [r3, #0]
 c031284:	f242 0316 	movw	r3, #8214	; 0x2016
 c031288:	429a      	cmp	r2, r3
        is_boot_data_valid = BOOT_DATA_VALID;
 c03128a:	bf02      	ittt	eq
 c03128c:	2201      	moveq	r2, #1
 c03128e:	4b02      	ldreq	r3, [pc, #8]	; (c031298 <tfm_core_validate_boot_data+0x18>)
 c031290:	601a      	streq	r2, [r3, #0]
    }
}
 c031292:	4770      	bx	lr
 c031294:	3003fc00 	.word	0x3003fc00
 c031298:	3003f020 	.word	0x3003f020

0c03129c <tfm_core_get_boot_value_handler>:

void tfm_core_get_boot_value_handler(uint32_t args[])
{   
 c03129c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint16_t  tlv = (uint16_t)args[0];
    uint8_t *buf_start = (uint8_t *)args[1];
 c0312a0:	e9d0 7600 	ldrd	r7, r6, [r0]
{   
 c0312a4:	4604      	mov	r4, r0
    uint16_t buf_size  = (uint16_t)args[2];
 c0312a6:	f8d0 8008 	ldr.w	r8, [r0, #8]
        /* Not in accessible range, return error */
        args[0] = TFM_ERROR_INVALID_PARAMETER;
        return;
    }
#else
    partition = tfm_spm_get_running_partition();
 c0312aa:	f7fe fa51 	bl	c02f750 <tfm_spm_get_running_partition>
    if (!partition) {
 c0312ae:	4605      	mov	r5, r0
 c0312b0:	b908      	cbnz	r0, c0312b6 <tfm_core_get_boot_value_handler+0x1a>
        tfm_panic();
 c0312b2:	f001 fc1d 	bl	c032af0 <tfm_panic>
    }
     privileged =
        tfm_spm_partition_get_privileged_mode(partition->static_data->
 c0312b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c0312b8:	fa1f f888 	uxth.w	r8, r8
     privileged =
 c0312bc:	6858      	ldr	r0, [r3, #4]
 c0312be:	f7fe fb2b 	bl	c02f918 <tfm_spm_partition_get_privileged_mode>
                                              partition_flags);

    if (tfm_memory_check(buf_start, buf_size, false, TFM_MEMORY_ACCESS_RW,
 c0312c2:	2302      	movs	r3, #2
 c0312c4:	9000      	str	r0, [sp, #0]
 c0312c6:	2200      	movs	r2, #0
 c0312c8:	4641      	mov	r1, r8
 c0312ca:	4630      	mov	r0, r6
 c0312cc:	f7fe fb0a 	bl	c02f8e4 <tfm_memory_check>
 c0312d0:	b120      	cbz	r0, c0312dc <tfm_core_get_boot_value_handler+0x40>
        privileged) != IPC_SUCCESS) {
        /* Not in accessible range, return error */
        args[0] = TFM_ERROR_INVALID_PARAMETER;
 c0312d2:	2303      	movs	r3, #3
			tfm_memcpy(buf_start, (const void *)((uint32_t)offset+sizeof(tlv_entry)), tlv_entry.tlv_len-sizeof(tlv_entry));
			found = true;
			break;
		}
    }
    if (found) args[0] = TFM_SUCCESS;
 c0312d4:	6023      	str	r3, [r4, #0]
		else
			args[0] = TFM_ERROR_INVALID_PARAMETER;
    return;
}
 c0312d6:	b002      	add	sp, #8
 c0312d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint16_t  tlv = (uint16_t)args[0];
 c0312dc:	b2bf      	uxth	r7, r7
    if (tfm_core_check_boot_data_access_policy(GET_MAJOR(tlv))) {
 c0312de:	0b38      	lsrs	r0, r7, #12
 c0312e0:	f7ff ffb2 	bl	c031248 <tfm_core_check_boot_data_access_policy>
 c0312e4:	2800      	cmp	r0, #0
 c0312e6:	d1f4      	bne.n	c0312d2 <tfm_core_get_boot_value_handler+0x36>
    if (is_boot_data_valid != BOOT_DATA_VALID) {
 c0312e8:	4b0e      	ldr	r3, [pc, #56]	; (c031324 <tfm_core_get_boot_value_handler+0x88>)
 c0312ea:	681b      	ldr	r3, [r3, #0]
 c0312ec:	2b01      	cmp	r3, #1
 c0312ee:	d1f0      	bne.n	c0312d2 <tfm_core_get_boot_value_handler+0x36>
    tlv_end = BOOT_TFM_SHARED_DATA_BASE + boot_data->header.tlv_tot_len;
 c0312f0:	4b0d      	ldr	r3, [pc, #52]	; (c031328 <tfm_core_get_boot_value_handler+0x8c>)
    offset  = BOOT_TFM_SHARED_DATA_BASE + SHARED_DATA_HEADER_SIZE;
 c0312f2:	490e      	ldr	r1, [pc, #56]	; (c03132c <tfm_core_get_boot_value_handler+0x90>)
    tlv_end = BOOT_TFM_SHARED_DATA_BASE + boot_data->header.tlv_tot_len;
 c0312f4:	885b      	ldrh	r3, [r3, #2]
 c0312f6:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 c0312fa:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
    for (; offset < tlv_end; offset += tlv_entry.tlv_len) {
 c0312fe:	4299      	cmp	r1, r3
 c031300:	d2e7      	bcs.n	c0312d2 <tfm_core_get_boot_value_handler+0x36>
 c031302:	6808      	ldr	r0, [r1, #0]
 c031304:	0c02      	lsrs	r2, r0, #16
		if (tlv_entry.tlv_type == tlv) {
 c031306:	b280      	uxth	r0, r0
 c031308:	4287      	cmp	r7, r0
 c03130a:	d108      	bne.n	c03131e <tfm_core_get_boot_value_handler+0x82>
			if ((tlv_entry.tlv_len-sizeof(tlv_entry)) > buf_size) {
 c03130c:	3a04      	subs	r2, #4
 c03130e:	4542      	cmp	r2, r8
 c031310:	d8df      	bhi.n	c0312d2 <tfm_core_get_boot_value_handler+0x36>
 c031312:	3104      	adds	r1, #4
 c031314:	4630      	mov	r0, r6
 c031316:	f7e3 fb32 	bl	c01497e <memcpy>
    if (found) args[0] = TFM_SUCCESS;
 c03131a:	2300      	movs	r3, #0
 c03131c:	e7da      	b.n	c0312d4 <tfm_core_get_boot_value_handler+0x38>
    for (; offset < tlv_end; offset += tlv_entry.tlv_len) {
 c03131e:	4411      	add	r1, r2
 c031320:	e7ed      	b.n	c0312fe <tfm_core_get_boot_value_handler+0x62>
 c031322:	bf00      	nop
 c031324:	3003f020 	.word	0x3003f020
 c031328:	3003fc00 	.word	0x3003fc00
 c03132c:	3003fc04 	.word	0x3003fc04

0c031330 <tfm_core_get_boot_data_handler>:
void tfm_core_get_boot_data_handler(uint32_t args[])
{
 c031330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t  tlv_major = (uint8_t)args[0];
    uint8_t *buf_start = (uint8_t *)args[1];
 c031334:	e9d0 9400 	ldrd	r9, r4, [r0]
{
 c031338:	4605      	mov	r5, r0
    uint16_t buf_size  = (uint16_t)args[2];
 c03133a:	6886      	ldr	r6, [r0, #8]
        /* Not in accessible range, return error */
        args[0] = (uint32_t)TFM_ERROR_INVALID_PARAMETER;
        return;
    }
#else
    partition = tfm_spm_get_running_partition();
 c03133c:	f7fe fa08 	bl	c02f750 <tfm_spm_get_running_partition>
    if (!partition) {
 c031340:	4607      	mov	r7, r0
 c031342:	b908      	cbnz	r0, c031348 <tfm_core_get_boot_data_handler+0x18>
        tfm_panic();
 c031344:	f001 fbd4 	bl	c032af0 <tfm_panic>
    }
    privileged =
        tfm_spm_partition_get_privileged_mode(partition->static_data->
 c031348:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c03134a:	fa1f fa86 	uxth.w	sl, r6
    privileged =
 c03134e:	6858      	ldr	r0, [r3, #4]
 c031350:	f7fe fae2 	bl	c02f918 <tfm_spm_partition_get_privileged_mode>
                                              partition_flags);

    if (tfm_memory_check(buf_start, buf_size, false, TFM_MEMORY_ACCESS_RW,
 c031354:	2302      	movs	r3, #2
 c031356:	9000      	str	r0, [sp, #0]
 c031358:	2200      	movs	r2, #0
 c03135a:	4651      	mov	r1, sl
 c03135c:	4620      	mov	r0, r4
 c03135e:	f7fe fac1 	bl	c02f8e4 <tfm_memory_check>
 c031362:	b120      	cbz	r0, c03136e <tfm_core_get_boot_data_handler+0x3e>
        privileged) != IPC_SUCCESS) {
        /* Not in accessible range, return error */
        args[0] = (uint32_t)TFM_ERROR_INVALID_PARAMETER;
 c031364:	2303      	movs	r3, #3

            ptr += tlv_entry.tlv_len;
            boot_data->header.tlv_tot_len += tlv_entry.tlv_len;
        }
    }
    args[0] = (uint32_t)TFM_SUCCESS;
 c031366:	602b      	str	r3, [r5, #0]
    return;
}
 c031368:	b004      	add	sp, #16
 c03136a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (is_boot_data_valid != BOOT_DATA_VALID) {
 c03136e:	4b1f      	ldr	r3, [pc, #124]	; (c0313ec <tfm_core_get_boot_data_handler+0xbc>)
 c031370:	681b      	ldr	r3, [r3, #0]
 c031372:	2b01      	cmp	r3, #1
 c031374:	d1f6      	bne.n	c031364 <tfm_core_get_boot_data_handler+0x34>
    uint8_t  tlv_major = (uint8_t)args[0];
 c031376:	fa5f f989 	uxtb.w	r9, r9
    if (tfm_core_check_boot_data_access_policy(tlv_major)) {
 c03137a:	4648      	mov	r0, r9
 c03137c:	f7ff ff64 	bl	c031248 <tfm_core_check_boot_data_access_policy>
 c031380:	2800      	cmp	r0, #0
 c031382:	d1ef      	bne.n	c031364 <tfm_core_get_boot_data_handler+0x34>
    if (buf_size < SHARED_DATA_HEADER_SIZE) {
 c031384:	b2b6      	uxth	r6, r6
 c031386:	2e03      	cmp	r6, #3
 c031388:	d9ec      	bls.n	c031364 <tfm_core_get_boot_data_handler+0x34>
    tlv_end = BOOT_TFM_SHARED_DATA_BASE + boot_data->header.tlv_tot_len;
 c03138a:	4b19      	ldr	r3, [pc, #100]	; (c0313f0 <tfm_core_get_boot_data_handler+0xc0>)
    offset  = BOOT_TFM_SHARED_DATA_BASE + SHARED_DATA_HEADER_SIZE;
 c03138c:	4f19      	ldr	r7, [pc, #100]	; (c0313f4 <tfm_core_get_boot_data_handler+0xc4>)
    tlv_end = BOOT_TFM_SHARED_DATA_BASE + boot_data->header.tlv_tot_len;
 c03138e:	885e      	ldrh	r6, [r3, #2]
        boot_data->header.tlv_magic   = SHARED_DATA_TLV_INFO_MAGIC;
 c031390:	f242 0316 	movw	r3, #8214	; 0x2016
 c031394:	8023      	strh	r3, [r4, #0]
        boot_data->header.tlv_tot_len = SHARED_DATA_HEADER_SIZE;
 c031396:	2304      	movs	r3, #4
    tlv_end = BOOT_TFM_SHARED_DATA_BASE + boot_data->header.tlv_tot_len;
 c031398:	f106 5640 	add.w	r6, r6, #805306368	; 0x30000000
        boot_data->header.tlv_tot_len = SHARED_DATA_HEADER_SIZE;
 c03139c:	8063      	strh	r3, [r4, #2]
        ptr = boot_data->data;
 c03139e:	eb04 0803 	add.w	r8, r4, r3
    tlv_end = BOOT_TFM_SHARED_DATA_BASE + boot_data->header.tlv_tot_len;
 c0313a2:	f506 367f 	add.w	r6, r6, #261120	; 0x3fc00
    for (; offset < tlv_end; offset += tlv_entry.tlv_len) {
 c0313a6:	42b7      	cmp	r7, r6
 c0313a8:	d301      	bcc.n	c0313ae <tfm_core_get_boot_data_handler+0x7e>
    args[0] = (uint32_t)TFM_SUCCESS;
 c0313aa:	2300      	movs	r3, #0
 c0313ac:	e7db      	b.n	c031366 <tfm_core_get_boot_data_handler+0x36>
        (void)tfm_core_util_memcpy(&tlv_entry,
 c0313ae:	2204      	movs	r2, #4
 c0313b0:	4639      	mov	r1, r7
 c0313b2:	a803      	add	r0, sp, #12
 c0313b4:	f000 f922 	bl	c0315fc <tfm_core_util_memcpy>
        if (GET_MAJOR(tlv_entry.tlv_type) == tlv_major) {
 c0313b8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 c0313bc:	ebb9 3f13 	cmp.w	r9, r3, lsr #12
 c0313c0:	d110      	bne.n	c0313e4 <tfm_core_get_boot_data_handler+0xb4>
            if (((ptr - buf_start) + tlv_entry.tlv_len) > buf_size) {
 c0313c2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 c0313c6:	eba8 0304 	sub.w	r3, r8, r4
 c0313ca:	4413      	add	r3, r2
 c0313cc:	4553      	cmp	r3, sl
 c0313ce:	dcc9      	bgt.n	c031364 <tfm_core_get_boot_data_handler+0x34>
            (void)tfm_core_util_memcpy(ptr, (const void *)offset,
 c0313d0:	4640      	mov	r0, r8
 c0313d2:	4639      	mov	r1, r7
 c0313d4:	f000 f912 	bl	c0315fc <tfm_core_util_memcpy>
            ptr += tlv_entry.tlv_len;
 c0313d8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
            boot_data->header.tlv_tot_len += tlv_entry.tlv_len;
 c0313dc:	8862      	ldrh	r2, [r4, #2]
            ptr += tlv_entry.tlv_len;
 c0313de:	4498      	add	r8, r3
            boot_data->header.tlv_tot_len += tlv_entry.tlv_len;
 c0313e0:	4413      	add	r3, r2
 c0313e2:	8063      	strh	r3, [r4, #2]
    for (; offset < tlv_end; offset += tlv_entry.tlv_len) {
 c0313e4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 c0313e8:	441f      	add	r7, r3
 c0313ea:	e7dc      	b.n	c0313a6 <tfm_core_get_boot_data_handler+0x76>
 c0313ec:	3003f020 	.word	0x3003f020
 c0313f0:	3003fc00 	.word	0x3003fc00
 c0313f4:	3003fc04 	.word	0x3003fc04

0c0313f8 <tfm_core_init>:
#define REGION_DECLARE(a, b, c) extern uint32_t REGION_NAME(a, b, c)

REGION_DECLARE(Image$$, ARM_LIB_STACK_MSP,  $$ZI$$Base);

int32_t tfm_core_init(void)
{
 c0313f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t i;
    enum tfm_plat_err_t plat_err = TFM_PLAT_ERR_SYSTEM_ERR;
    enum irq_target_state_t irq_target_state = TFM_IRQ_TARGET_STATE_SECURE;

    /* Enables fault handlers */
    plat_err = tfm_spm_hal_enable_fault_handlers();
 c0313fa:	f7e8 fdc8 	bl	c019f8e <tfm_spm_hal_enable_fault_handlers>
    if (plat_err != TFM_PLAT_ERR_SUCCESS) {
 c0313fe:	b108      	cbz	r0, c031404 <tfm_core_init+0xc>
        return TFM_ERROR_GENERIC;
 c031400:	201f      	movs	r0, #31
    if (plat_err != TFM_PLAT_ERR_SUCCESS) {
        return TFM_ERROR_GENERIC;
    }

    return TFM_SUCCESS;
}
 c031402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    plat_err = tfm_spm_hal_system_reset_cfg();
 c031404:	f7e8 fdc5 	bl	c019f92 <tfm_spm_hal_system_reset_cfg>
    if (plat_err != TFM_PLAT_ERR_SUCCESS) {
 c031408:	2800      	cmp	r0, #0
 c03140a:	d1f9      	bne.n	c031400 <tfm_core_init+0x8>
    plat_err = tfm_spm_hal_init_debug();
 c03140c:	f7e8 ffa4 	bl	c01a358 <tfm_spm_hal_init_debug>
    if (plat_err != TFM_PLAT_ERR_SUCCESS) {
 c031410:	2800      	cmp	r0, #0
 c031412:	d1f5      	bne.n	c031400 <tfm_core_init+0x8>
  __ASM volatile ("cpsie i" : : : "memory");
 c031414:	b662      	cpsie	i
    stdio_init();
 c031416:	f001 fbc7 	bl	c032ba8 <stdio_init>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 c03141a:	f3ef 8305 	mrs	r3, IPSR
 c03141e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    LOG_MSG("Secure image initializing!");
 c031422:	b1fb      	cbz	r3, c031464 <tfm_core_init+0x6c>
 c031424:	481a      	ldr	r0, [pc, #104]	; (c031490 <tfm_core_init+0x98>)
 c031426:	f000 f867 	bl	c0314f8 <tfm_core_log_puts>
 c03142a:	481a      	ldr	r0, [pc, #104]	; (c031494 <tfm_core_init+0x9c>)
 c03142c:	f000 f864 	bl	c0314f8 <tfm_core_log_puts>
 c031430:	4819      	ldr	r0, [pc, #100]	; (c031498 <tfm_core_init+0xa0>)
 c031432:	f000 f861 	bl	c0314f8 <tfm_core_log_puts>
    tfm_core_validate_boot_data();
 c031436:	f7ff ff23 	bl	c031280 <tfm_core_validate_boot_data>
    plat_err = tfm_spm_hal_init_isolation_hw();
 c03143a:	f7e8 fc58 	bl	c019cee <tfm_spm_hal_init_isolation_hw>
    if (plat_err != TFM_PLAT_ERR_SUCCESS) {
 c03143e:	2800      	cmp	r0, #0
 c031440:	d1de      	bne.n	c031400 <tfm_core_init+0x8>
    configure_ns_code();
 c031442:	f000 fc2b 	bl	c031c9c <configure_ns_code>
    plat_err = tfm_spm_hal_nvic_interrupt_target_state_cfg();
 c031446:	f7e8 fda6 	bl	c019f96 <tfm_spm_hal_nvic_interrupt_target_state_cfg>
    if (plat_err != TFM_PLAT_ERR_SUCCESS) {
 c03144a:	2800      	cmp	r0, #0
 c03144c:	d1d8      	bne.n	c031400 <tfm_core_init+0x8>
    for (i = 0; i < tfm_core_irq_signals_count; ++i) {
 c03144e:	4604      	mov	r4, r0
 c031450:	4b12      	ldr	r3, [pc, #72]	; (c03149c <tfm_core_init+0xa4>)
 c031452:	4d13      	ldr	r5, [pc, #76]	; (c0314a0 <tfm_core_init+0xa8>)
 c031454:	681f      	ldr	r7, [r3, #0]
 c031456:	42bc      	cmp	r4, r7
 c031458:	d308      	bcc.n	c03146c <tfm_core_init+0x74>
    plat_err = tfm_spm_hal_nvic_interrupt_enable();
 c03145a:	f7e8 fd9e 	bl	c019f9a <tfm_spm_hal_nvic_interrupt_enable>
    if (plat_err != TFM_PLAT_ERR_SUCCESS) {
 c03145e:	2800      	cmp	r0, #0
 c031460:	d0cf      	beq.n	c031402 <tfm_core_init+0xa>
 c031462:	e7cd      	b.n	c031400 <tfm_core_init+0x8>
    LOG_MSG("Secure image initializing!");
 c031464:	4b0b      	ldr	r3, [pc, #44]	; (c031494 <tfm_core_init+0x9c>)
 c031466:	4618      	mov	r0, r3
 c031468:	df06      	svc	6
 c03146a:	e7e4      	b.n	c031436 <tfm_core_init+0x3e>
        plat_err = tfm_spm_hal_set_secure_irq_priority(
 c03146c:	f995 6008 	ldrsb.w	r6, [r5, #8]
 c031470:	68e9      	ldr	r1, [r5, #12]
 c031472:	4630      	mov	r0, r6
 c031474:	f7e8 fd18 	bl	c019ea8 <tfm_spm_hal_set_secure_irq_priority>
        if (plat_err != TFM_PLAT_ERR_SUCCESS) {
 c031478:	4601      	mov	r1, r0
 c03147a:	2800      	cmp	r0, #0
 c03147c:	d1c0      	bne.n	c031400 <tfm_core_init+0x8>
        irq_target_state = tfm_spm_hal_set_irq_target_state(
 c03147e:	4630      	mov	r0, r6
 c031480:	f7e8 fd58 	bl	c019f34 <tfm_spm_hal_set_irq_target_state>
 c031484:	3510      	adds	r5, #16
        if (irq_target_state != TFM_IRQ_TARGET_STATE_SECURE) {
 c031486:	2800      	cmp	r0, #0
 c031488:	d1ba      	bne.n	c031400 <tfm_core_init+0x8>
    for (i = 0; i < tfm_core_irq_signals_count; ++i) {
 c03148a:	3401      	adds	r4, #1
 c03148c:	e7e3      	b.n	c031456 <tfm_core_init+0x5e>
 c03148e:	bf00      	nop
 c031490:	0c032cd0 	.word	0x0c032cd0
 c031494:	0c03581d 	.word	0x0c03581d
 c031498:	0c035863 	.word	0x0c035863
 c03149c:	0c0359d8 	.word	0x0c0359d8
 c0314a0:	0c0359c8 	.word	0x0c0359c8

0c0314a4 <main>:
    }
}
#endif /* TFM_PSA_API */

int main(void)
{
 c0314a4:	b508      	push	{r3, lr}
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 c0314a6:	4b12      	ldr	r3, [pc, #72]	; (c0314f0 <main+0x4c>)
 c0314a8:	f383 880a 	msr	MSPLIM, r3
    /* set Main Stack Pointer limit */
    tfm_arch_set_msplim((uint32_t)&REGION_NAME(Image$$, ARM_LIB_STACK_MSP,
                                               $$ZI$$Base));

    if (tfm_core_init() != TFM_SUCCESS) {
 c0314ac:	f7ff ffa4 	bl	c0313f8 <tfm_core_init>
 c0314b0:	b108      	cbz	r0, c0314b6 <main+0x12>
        tfm_panic();
 c0314b2:	f001 fb1d 	bl	c032af0 <tfm_panic>
    }

    if (tfm_spm_db_init() != SPM_ERR_OK) {
 c0314b6:	f7fd ffd7 	bl	c02f468 <tfm_spm_db_init>
 c0314ba:	b108      	cbz	r0, c0314c0 <main+0x1c>
        tfm_panic();
 c0314bc:	f001 fb18 	bl	c032af0 <tfm_panic>
    }

#if TFM_LVL != 1
    if (tfm_spm_hal_setup_isolation_hw() != TFM_PLAT_ERR_SUCCESS) {
 c0314c0:	f7e8 fc22 	bl	c019d08 <tfm_spm_hal_setup_isolation_hw>
 c0314c4:	b108      	cbz	r0, c0314ca <main+0x26>
        tfm_panic();
 c0314c6:	f001 fb13 	bl	c032af0 <tfm_panic>
    tfm_arch_prioritize_secure_exception();
 c0314ca:	f7ff fe09 	bl	c0310e0 <tfm_arch_prioritize_secure_exception>
    plat_err = tfm_spm_hal_set_secure_irq_priority(SVCall_IRQn, 0);
 c0314ce:	2100      	movs	r1, #0
 c0314d0:	f06f 0004 	mvn.w	r0, #4
 c0314d4:	f7e8 fce8 	bl	c019ea8 <tfm_spm_hal_set_secure_irq_priority>
    if (plat_err != TFM_PLAT_ERR_SUCCESS) {
 c0314d8:	b128      	cbz	r0, c0314e6 <main+0x42>
    /*
     * Prioritise secure exceptions to avoid NS being able to pre-empt
     * secure SVC or SecureFault. Do it before PSA API initialization.
     */
    if (tfm_core_set_secure_exception_priorities() != TFM_SUCCESS) {
        tfm_panic();
 c0314da:	f001 fb09 	bl	c032af0 <tfm_panic>
    }
    tfm_spm_init();
 c0314de:	f7fe fa1f 	bl	c02f920 <tfm_spm_init>
#endif /* !defined(TFM_PSA_API) */
}
 c0314e2:	2000      	movs	r0, #0
 c0314e4:	bd08      	pop	{r3, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c0314e6:	2260      	movs	r2, #96	; 0x60
 c0314e8:	4b02      	ldr	r3, [pc, #8]	; (c0314f4 <main+0x50>)
 c0314ea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 c0314ee:	e7f6      	b.n	c0314de <main+0x3a>
 c0314f0:	30030400 	.word	0x30030400
 c0314f4:	e000ed00 	.word	0xe000ed00

0c0314f8 <tfm_core_log_puts>:
        do {                                        \
            (void)TFM_DRIVER_STDIO.Send(&c, 1);     \
        } while (0)

void tfm_core_log_puts(const char *str)
{
 c0314f8:	b538      	push	{r3, r4, r5, lr}
    TFM_ASSERT(str != NULL);
 c0314fa:	b130      	cbz	r0, c03150a <tfm_core_log_puts+0x12>
 c0314fc:	4604      	mov	r4, r0

    while (*str != '\0') {
        UART_PUTC(*str);
 c0314fe:	4d08      	ldr	r5, [pc, #32]	; (c031520 <tfm_core_log_puts+0x28>)
 c031500:	4620      	mov	r0, r4
    while (*str != '\0') {
 c031502:	7803      	ldrb	r3, [r0, #0]
 c031504:	3401      	adds	r4, #1
 c031506:	b933      	cbnz	r3, c031516 <tfm_core_log_puts+0x1e>
        str++;
    }
}
 c031508:	bd38      	pop	{r3, r4, r5, pc}
    TFM_ASSERT(str != NULL);
 c03150a:	2218      	movs	r2, #24
 c03150c:	4905      	ldr	r1, [pc, #20]	; (c031524 <tfm_core_log_puts+0x2c>)
 c03150e:	4806      	ldr	r0, [pc, #24]	; (c031528 <tfm_core_log_puts+0x30>)
 c031510:	f7e3 ff7a 	bl	c015408 <iprintf>
 c031514:	e7fe      	b.n	c031514 <tfm_core_log_puts+0x1c>
        UART_PUTC(*str);
 c031516:	696b      	ldr	r3, [r5, #20]
 c031518:	2101      	movs	r1, #1
 c03151a:	4798      	blx	r3
 c03151c:	e7f0      	b.n	c031500 <tfm_core_log_puts+0x8>
 c03151e:	bf00      	nop
 c031520:	0c032c50 	.word	0x0c032c50
 c031524:	0c035838 	.word	0x0c035838
 c031528:	0c0357d2 	.word	0x0c0357d2

0c03152c <has_access_to_region>:
 * \return TFM_SUCCESS if the partition has access to the memory range,
 *         TFM_ERROR_GENERIC otherwise.
 */
static enum tfm_status_e has_access_to_region(const void *p, size_t s,
                                              int flags)
{
 c03152c:	b538      	push	{r3, r4, r5, lr}
 c03152e:	4604      	mov	r4, r0
 c031530:	460d      	mov	r5, r1
    int32_t range_access_allowed_by_mpu;

    /* Use the TT instruction to check access to the partition's regions*/
    range_access_allowed_by_mpu =
                          cmse_check_address_range((void *)p, s, flags) != NULL;
 c031532:	f7e7 fa5b 	bl	c0189ec <cmse_check_address_range>

    if (range_access_allowed_by_mpu) {
 c031536:	b970      	cbnz	r0, c031556 <has_access_to_region+0x2a>
    }

    /* If all else fails, check whether the region is in the non-secure
     * memory
     */
    if ((check_address_range(p, s, NS_CODE_START,
 c031538:	4b09      	ldr	r3, [pc, #36]	; (c031560 <has_access_to_region+0x34>)
 c03153a:	4a0a      	ldr	r2, [pc, #40]	; (c031564 <has_access_to_region+0x38>)
 c03153c:	4629      	mov	r1, r5
 c03153e:	4620      	mov	r0, r4
 c031540:	f000 fc9c 	bl	c031e7c <check_address_range>
 c031544:	b138      	cbz	r0, c031556 <has_access_to_region+0x2a>
                             NS_CODE_LIMIT) == TFM_SUCCESS) ||
        (check_address_range(p, s, NS_DATA_START,
 c031546:	4b08      	ldr	r3, [pc, #32]	; (c031568 <has_access_to_region+0x3c>)
 c031548:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 c03154c:	4629      	mov	r1, r5
 c03154e:	4620      	mov	r0, r4
 c031550:	f000 fc94 	bl	c031e7c <check_address_range>
                             NS_CODE_LIMIT) == TFM_SUCCESS) ||
 c031554:	b908      	cbnz	r0, c03155a <has_access_to_region+0x2e>
                             NS_DATA_LIMIT) == TFM_SUCCESS)) {
        return TFM_SUCCESS;
 c031556:	2000      	movs	r0, #0
    } else {
        return TFM_ERROR_GENERIC;
    }
}
 c031558:	bd38      	pop	{r3, r4, r5, pc}
        return TFM_ERROR_GENERIC;
 c03155a:	201f      	movs	r0, #31
 c03155c:	e7fc      	b.n	c031558 <has_access_to_region+0x2c>
 c03155e:	bf00      	nop
 c031560:	08047fff 	.word	0x08047fff
 c031564:	08038400 	.word	0x08038400
 c031568:	2002ffff 	.word	0x2002ffff

0c03156c <tfm_core_has_read_access_to_region>:
                                                     uint32_t privileged)
{
    int flags = CMSE_MPU_READ;

    if (privileged == TFM_PARTITION_UNPRIVILEGED_MODE) {
        flags |= CMSE_MPU_UNPRIV;
 c03156c:	2b00      	cmp	r3, #0
 c03156e:	bf14      	ite	ne
 c031570:	2308      	movne	r3, #8
 c031572:	230c      	moveq	r3, #12
    }

    if (ns_caller) {
 c031574:	b10a      	cbz	r2, c03157a <tfm_core_has_read_access_to_region+0xe>
        flags |= CMSE_NONSECURE;
 c031576:	f043 0312 	orr.w	r3, r3, #18
    }

    return has_access_to_region(p, s, flags);
 c03157a:	461a      	mov	r2, r3
 c03157c:	f7ff bfd6 	b.w	c03152c <has_access_to_region>

0c031580 <tfm_core_has_write_access_to_region>:
                                                      uint32_t privileged)
{
    int flags = CMSE_MPU_READWRITE;

    if (privileged == TFM_PARTITION_UNPRIVILEGED_MODE) {
        flags |= CMSE_MPU_UNPRIV;
 c031580:	2b00      	cmp	r3, #0
 c031582:	bf14      	ite	ne
 c031584:	2301      	movne	r3, #1
 c031586:	2305      	moveq	r3, #5
    }

    if (ns_caller) {
 c031588:	b10a      	cbz	r2, c03158e <tfm_core_has_write_access_to_region+0xe>
        flags |= CMSE_NONSECURE;
 c03158a:	f043 0312 	orr.w	r3, r3, #18
    }

    return has_access_to_region(p, s, flags);
 c03158e:	461a      	mov	r2, r3
 c031590:	f7ff bfcc 	b.w	c03152c <has_access_to_region>

0c031594 <tfm_core_svc_handler>:
#include "tfm_svcalls.h"

extern void tfm_psa_ipc_request_handler(const uint32_t svc_args[]);

uint32_t tfm_core_svc_handler(uint32_t *svc_args, uint32_t exc_return)
{
 c031594:	b570      	push	{r4, r5, r6, lr}
    /*
     * Stack contains:
     * r0, r1, r2, r3, r12, r14 (lr), the return address and xPSR
     * First argument (r0) is svc_args[0]
     */
    if (is_return_secure_stack(exc_return)) {
 c031596:	f011 0440 	ands.w	r4, r1, #64	; 0x40
{
 c03159a:	4606      	mov	r6, r0
 c03159c:	460d      	mov	r5, r1
    if (is_return_secure_stack(exc_return)) {
 c03159e:	d015      	beq.n	c0315cc <tfm_core_svc_handler+0x38>
        /* SV called directly from secure context. Check instruction for
         * svc_number
         */
        svc_number = ((uint8_t *)svc_args[6])[-2];
 c0315a0:	6983      	ldr	r3, [r0, #24]
 c0315a2:	f813 4c02 	ldrb.w	r4, [r3, #-2]
         * NS cannot directly trigger S SVC so this should not happen. This is
         * an unrecoverable error.
         */
        tfm_panic();
    }
    switch (svc_number) {
 c0315a6:	2c07      	cmp	r4, #7
 c0315a8:	d021      	beq.n	c0315ee <tfm_core_svc_handler+0x5a>
 c0315aa:	d808      	bhi.n	c0315be <tfm_core_svc_handler+0x2a>
 c0315ac:	2c06      	cmp	r4, #6
 c0315ae:	d014      	beq.n	c0315da <tfm_core_svc_handler+0x46>
        break;
	case TFM_SVC_GET_BOOT_VALUE:
        tfm_core_get_boot_value_handler(svc_args);
        break;
    default:
        svc_args[0] = SVC_Handler_IPC((tfm_svc_number_t)svc_number, svc_args, exc_return);
 c0315b0:	462a      	mov	r2, r5
 c0315b2:	4631      	mov	r1, r6
 c0315b4:	4620      	mov	r0, r4
 c0315b6:	f000 ff53 	bl	c032460 <SVC_Handler_IPC>
 c0315ba:	6030      	str	r0, [r6, #0]
        break;
 c0315bc:	e00b      	b.n	c0315d6 <tfm_core_svc_handler+0x42>
    switch (svc_number) {
 c0315be:	2c0e      	cmp	r4, #14
 c0315c0:	d007      	beq.n	c0315d2 <tfm_core_svc_handler+0x3e>
 c0315c2:	2c1d      	cmp	r4, #29
 c0315c4:	d1f4      	bne.n	c0315b0 <tfm_core_svc_handler+0x1c>
        tfm_core_get_boot_value_handler(svc_args);
 c0315c6:	f7ff fe69 	bl	c03129c <tfm_core_get_boot_value_handler>
        break;
 c0315ca:	e004      	b.n	c0315d6 <tfm_core_svc_handler+0x42>
        tfm_panic();
 c0315cc:	f001 fa90 	bl	c032af0 <tfm_panic>
 c0315d0:	e7ee      	b.n	c0315b0 <tfm_core_svc_handler+0x1c>
        tfm_psa_ipc_request_handler(svc_args);
 c0315d2:	f000 fc2f 	bl	c031e34 <tfm_psa_ipc_request_handler>
    }

    return exc_return;
}
 c0315d6:	4628      	mov	r0, r5
 c0315d8:	bd70      	pop	{r4, r5, r6, pc}
        TFM_CORE_MSG((char *)svc_args[0]);
 c0315da:	4806      	ldr	r0, [pc, #24]	; (c0315f4 <tfm_core_svc_handler+0x60>)
 c0315dc:	f7ff ff8c 	bl	c0314f8 <tfm_core_log_puts>
 c0315e0:	6830      	ldr	r0, [r6, #0]
 c0315e2:	f7ff ff89 	bl	c0314f8 <tfm_core_log_puts>
 c0315e6:	4804      	ldr	r0, [pc, #16]	; (c0315f8 <tfm_core_svc_handler+0x64>)
 c0315e8:	f7ff ff86 	bl	c0314f8 <tfm_core_log_puts>
        break;
 c0315ec:	e7f3      	b.n	c0315d6 <tfm_core_svc_handler+0x42>
        tfm_core_get_boot_data_handler(svc_args);
 c0315ee:	f7ff fe9f 	bl	c031330 <tfm_core_get_boot_data_handler>
        break;
 c0315f2:	e7f0      	b.n	c0315d6 <tfm_core_svc_handler+0x42>
 c0315f4:	0c03584a 	.word	0x0c03584a
 c0315f8:	0c03585f 	.word	0x0c03585f

0c0315fc <tfm_core_util_memcpy>:
void *tfm_core_util_memcpy(void *dest, const void *src, size_t n)
{
    union mem_ptr_t p_dest;
    union mem_ptr_t p_src;

    TFM_ASSERT(dest != src);
 c0315fc:	4288      	cmp	r0, r1
{
 c0315fe:	b570      	push	{r4, r5, r6, lr}
    TFM_ASSERT(dest != src);
 c031600:	d105      	bne.n	c03160e <tfm_core_util_memcpy+0x12>
 c031602:	2217      	movs	r2, #23
 c031604:	4916      	ldr	r1, [pc, #88]	; (c031660 <tfm_core_util_memcpy+0x64>)
 c031606:	4817      	ldr	r0, [pc, #92]	; (c031664 <tfm_core_util_memcpy+0x68>)
 c031608:	f7e3 fefe 	bl	c015408 <iprintf>
 c03160c:	e7fe      	b.n	c03160c <tfm_core_util_memcpy+0x10>

    /* Check src and dest address value to see if dword copy is applicable.
     * If applicable, perform byte copy for the first several unaligned bytes,
     * and then, dword copy for aligned memory.
     */
    if (!((p_dest.mem_ptr ^ p_src.mem_ptr) & (sizeof(uint32_t) - 1))) {
 c03160e:	ea80 0301 	eor.w	r3, r0, r1
 c031612:	079b      	lsls	r3, r3, #30
    p_dest.p_byte = (uint8_t *)dest;
 c031614:	4604      	mov	r4, r0
    if (!((p_dest.mem_ptr ^ p_src.mem_ptr) & (sizeof(uint32_t) - 1))) {
 c031616:	d008      	beq.n	c03162a <tfm_core_util_memcpy+0x2e>
 c031618:	2300      	movs	r3, #0
    }

    /* Dword copy is not applicable, perform byte copy for the remaining
     * unaligned memory.
     */
    while (n--) {
 c03161a:	429a      	cmp	r2, r3
 c03161c:	d11c      	bne.n	c031658 <tfm_core_util_memcpy+0x5c>
        *p_dest.p_byte++ = *p_src.p_byte++;
    }

    return dest;
}
 c03161e:	bd70      	pop	{r4, r5, r6, pc}
            *p_dest.p_byte++ = *p_src.p_byte++;
 c031620:	f811 3b01 	ldrb.w	r3, [r1], #1
            n--;
 c031624:	3a01      	subs	r2, #1
            *p_dest.p_byte++ = *p_src.p_byte++;
 c031626:	f804 3b01 	strb.w	r3, [r4], #1
        while (n && (p_dest.mem_ptr & (sizeof(uint32_t) - 1))) {
 c03162a:	2a00      	cmp	r2, #0
 c03162c:	d0f7      	beq.n	c03161e <tfm_core_util_memcpy+0x22>
 c03162e:	f014 0303 	ands.w	r3, r4, #3
 c031632:	d1f5      	bne.n	c031620 <tfm_core_util_memcpy+0x24>
        while (n >= sizeof(uint32_t)) {
 c031634:	18d5      	adds	r5, r2, r3
 c031636:	2d03      	cmp	r5, #3
 c031638:	d808      	bhi.n	c03164c <tfm_core_util_memcpy+0x50>
 c03163a:	f06f 0503 	mvn.w	r5, #3
 c03163e:	0893      	lsrs	r3, r2, #2
 c031640:	fb05 2203 	mla	r2, r5, r3, r2
 c031644:	009b      	lsls	r3, r3, #2
 c031646:	441c      	add	r4, r3
 c031648:	4419      	add	r1, r3
 c03164a:	e7e5      	b.n	c031618 <tfm_core_util_memcpy+0x1c>
            *p_dest.p_dword++ = *p_src.p_dword++;
 c03164c:	1acd      	subs	r5, r1, r3
 c03164e:	682e      	ldr	r6, [r5, #0]
 c031650:	1ae5      	subs	r5, r4, r3
 c031652:	602e      	str	r6, [r5, #0]
 c031654:	3b04      	subs	r3, #4
 c031656:	e7ed      	b.n	c031634 <tfm_core_util_memcpy+0x38>
        *p_dest.p_byte++ = *p_src.p_byte++;
 c031658:	5ccd      	ldrb	r5, [r1, r3]
 c03165a:	54e5      	strb	r5, [r4, r3]
 c03165c:	3301      	adds	r3, #1
 c03165e:	e7dc      	b.n	c03161a <tfm_core_util_memcpy+0x1e>
 c031660:	0c035866 	.word	0x0c035866
 c031664:	0c0357d2 	.word	0x0c0357d2

0c031668 <tfm_core_util_memset>:
void *tfm_core_util_memset(void *s, int c, size_t n)
{
    union mem_ptr_t p_mem;
    uint32_t quad_pattern;

    p_mem.p_byte = (uint8_t *)s;
 c031668:	4603      	mov	r3, r0
{
 c03166a:	b5f0      	push	{r4, r5, r6, r7, lr}
    quad_pattern = (((uint8_t)c) << 24) | (((uint8_t)c) << 16) |
 c03166c:	b2cd      	uxtb	r5, r1
                   (((uint8_t)c) << 8) | ((uint8_t)c);

    while (n && (p_mem.mem_ptr & (sizeof(uint32_t) - 1))) {
 c03166e:	b1c2      	cbz	r2, c0316a2 <tfm_core_util_memset+0x3a>
 c031670:	079c      	lsls	r4, r3, #30
 c031672:	d117      	bne.n	c0316a4 <tfm_core_util_memset+0x3c>
    quad_pattern = (((uint8_t)c) << 24) | (((uint8_t)c) << 16) |
 c031674:	040e      	lsls	r6, r1, #16
                   (((uint8_t)c) << 8) | ((uint8_t)c);
 c031676:	ea45 6401 	orr.w	r4, r5, r1, lsl #24
    quad_pattern = (((uint8_t)c) << 24) | (((uint8_t)c) << 16) |
 c03167a:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
                   (((uint8_t)c) << 8) | ((uint8_t)c);
 c03167e:	0209      	lsls	r1, r1, #8
 c031680:	4334      	orrs	r4, r6
 c031682:	b289      	uxth	r1, r1
 c031684:	4321      	orrs	r1, r4
    quad_pattern = (((uint8_t)c) << 24) | (((uint8_t)c) << 16) |
 c031686:	4614      	mov	r4, r2
        *p_mem.p_byte++ = (uint8_t)c;
        n--;
    }

    while (n >= sizeof(uint32_t)) {
        *p_mem.p_dword++ = quad_pattern;
 c031688:	18d6      	adds	r6, r2, r3
    while (n >= sizeof(uint32_t)) {
 c03168a:	2c03      	cmp	r4, #3
 c03168c:	d80e      	bhi.n	c0316ac <tfm_core_util_memset+0x44>
 c03168e:	f06f 0103 	mvn.w	r1, #3
 c031692:	0894      	lsrs	r4, r2, #2
 c031694:	fb01 2204 	mla	r2, r1, r4, r2
 c031698:	2100      	movs	r1, #0
 c03169a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
        n -= sizeof(uint32_t);
    }

    while (n--) {
 c03169e:	4291      	cmp	r1, r2
 c0316a0:	d108      	bne.n	c0316b4 <tfm_core_util_memset+0x4c>
        *p_mem.p_byte++ = (uint8_t)c;
    }

    return s;
}
 c0316a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *p_mem.p_byte++ = (uint8_t)c;
 c0316a4:	f803 5b01 	strb.w	r5, [r3], #1
        n--;
 c0316a8:	3a01      	subs	r2, #1
 c0316aa:	e7e0      	b.n	c03166e <tfm_core_util_memset+0x6>
        *p_mem.p_dword++ = quad_pattern;
 c0316ac:	1b37      	subs	r7, r6, r4
 c0316ae:	6039      	str	r1, [r7, #0]
        n -= sizeof(uint32_t);
 c0316b0:	3c04      	subs	r4, #4
 c0316b2:	e7ea      	b.n	c03168a <tfm_core_util_memset+0x22>
        *p_mem.p_byte++ = (uint8_t)c;
 c0316b4:	54cd      	strb	r5, [r1, r3]
 c0316b6:	3101      	adds	r1, #1
 c0316b8:	e7f1      	b.n	c03169e <tfm_core_util_memset+0x36>

0c0316ba <tfm_its_init>:
    tfm_memcpy(fid, (const void *)&client_id, sizeof(client_id));
    tfm_memcpy(fid + sizeof(client_id), (const void *)&uid, sizeof(uid));
}

psa_status_t tfm_its_init(void)
{
 c0316ba:	b508      	push	{r3, lr}
    psa_status_t status;

    status = its_flash_fs_prepare();
 c0316bc:	f7fd f9e8 	bl	c02ea90 <its_flash_fs_prepare>
     * This flag can be set if the ITS memory area is located in persistent
     * memory without a previous valid ITS flash layout in it. That is the case
     * when it is the first time in the device life that the ITS service is
     * executed.
     */
     if (status != PSA_SUCCESS) {
 c0316c0:	b130      	cbz	r0, c0316d0 <tfm_its_init+0x16>
        /* Remove all data in the ITS memory area and create a valid ITS flash
         * layout in that area.
         */
        status = its_flash_fs_wipe_all();
 c0316c2:	f7fd f9e7 	bl	c02ea94 <its_flash_fs_wipe_all>
        if (status != PSA_SUCCESS) {
 c0316c6:	b918      	cbnz	r0, c0316d0 <tfm_its_init+0x16>
        status = its_flash_fs_prepare();
    }
#endif /* ITS_CREATE_FLASH_LAYOUT */

    return status;
}
 c0316c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        status = its_flash_fs_prepare();
 c0316cc:	f7fd b9e0 	b.w	c02ea90 <its_flash_fs_prepare>
}
 c0316d0:	bd08      	pop	{r3, pc}
	...

0c0316d4 <tfm_its_set>:
psa_status_t tfm_its_set(int32_t client_id,
                         psa_storage_uid_t uid,
                         size_t data_length,
                         const void *p_data,
                         psa_storage_create_flags_t create_flags)
{
 c0316d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 c0316d8:	4690      	mov	r8, r2
 c0316da:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 c0316de:	4699      	mov	r9, r3
    psa_status_t status;

    /* Check that the UID is valid */
    if (uid == TFM_ITS_INVALID_UID) {
 c0316e0:	ea58 0309 	orrs.w	r3, r8, r9
{
 c0316e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    if (uid == TFM_ITS_INVALID_UID) {
 c0316e6:	d02b      	beq.n	c031740 <tfm_its_set+0x6c>
        return PSA_ERROR_INVALID_ARGUMENT;
    }

    /* Check that the create_flags does not contain any unsupported flags */
    if (create_flags & ~(PSA_STORAGE_FLAG_WRITE_ONCE |
 c0316e8:	f035 0307 	bics.w	r3, r5, #7
 c0316ec:	d12b      	bne.n	c031746 <tfm_its_set+0x72>
 c0316ee:	4c19      	ldr	r4, [pc, #100]	; (c031754 <tfm_its_set+0x80>)
 c0316f0:	ab02      	add	r3, sp, #8
 c0316f2:	4622      	mov	r2, r4
 c0316f4:	e963 8902 	strd	r8, r9, [r3, #-8]!

    /* Set file id */
    tfm_its_get_fid(client_id, uid, g_fid);

    /* Read file info */
    status = its_flash_fs_file_get_info(g_fid, &g_file_info);
 c0316f8:	f8df 805c 	ldr.w	r8, [pc, #92]	; c031758 <tfm_its_set+0x84>
 c0316fc:	f842 0b04 	str.w	r0, [r2], #4
 c031700:	cb03      	ldmia	r3!, {r0, r1}
 c031702:	6060      	str	r0, [r4, #4]
 c031704:	6051      	str	r1, [r2, #4]
 c031706:	4620      	mov	r0, r4
 c031708:	4641      	mov	r1, r8
 c03170a:	f7fd fa24 	bl	c02eb56 <its_flash_fs_file_get_info>
    if (status == PSA_SUCCESS) {
 c03170e:	b988      	cbnz	r0, c031734 <tfm_its_set+0x60>
        /* If the object exists and has the write once flag set, then it
         * cannot be modified. Otherwise it needs to be removed.
         */
        if (g_file_info.flags & PSA_STORAGE_FLAG_WRITE_ONCE) {
 c031710:	f8d8 3008 	ldr.w	r3, [r8, #8]
 c031714:	07db      	lsls	r3, r3, #31
 c031716:	d419      	bmi.n	c03174c <tfm_its_set+0x78>
            return PSA_ERROR_NOT_PERMITTED;
        } else {
            status = its_flash_fs_file_delete(g_fid);
 c031718:	4620      	mov	r0, r4
 c03171a:	f7fd fa3e 	bl	c02eb9a <its_flash_fs_file_delete>
            if (status != PSA_SUCCESS) {
 c03171e:	b960      	cbnz	r0, c03173a <tfm_its_set+0x66>
         */
        return status;
    }

    /* Create the file in the file system */
    return its_flash_fs_file_create(g_fid,
 c031720:	462b      	mov	r3, r5
 c031722:	4632      	mov	r2, r6
 c031724:	4631      	mov	r1, r6
 c031726:	480b      	ldr	r0, [pc, #44]	; (c031754 <tfm_its_set+0x80>)
 c031728:	970a      	str	r7, [sp, #40]	; 0x28
                                    data_length,
                                    data_length,
                                    (uint32_t)create_flags,
                                    (const uint8_t *)p_data);
}
 c03172a:	b003      	add	sp, #12
 c03172c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return its_flash_fs_file_create(g_fid,
 c031730:	f7fd b9b2 	b.w	c02ea98 <its_flash_fs_file_create>
    } else if (status != PSA_ERROR_DOES_NOT_EXIST) {
 c031734:	f110 0f8c 	cmn.w	r0, #140	; 0x8c
 c031738:	d0f2      	beq.n	c031720 <tfm_its_set+0x4c>
}
 c03173a:	b003      	add	sp, #12
 c03173c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return PSA_ERROR_INVALID_ARGUMENT;
 c031740:	f06f 0086 	mvn.w	r0, #134	; 0x86
 c031744:	e7f9      	b.n	c03173a <tfm_its_set+0x66>
        return PSA_ERROR_NOT_SUPPORTED;
 c031746:	f06f 0085 	mvn.w	r0, #133	; 0x85
 c03174a:	e7f6      	b.n	c03173a <tfm_its_set+0x66>
            return PSA_ERROR_NOT_PERMITTED;
 c03174c:	f06f 0084 	mvn.w	r0, #132	; 0x84
 c031750:	e7f3      	b.n	c03173a <tfm_its_set+0x66>
 c031752:	bf00      	nop
 c031754:	3003f024 	.word	0x3003f024
 c031758:	3003f030 	.word	0x3003f030

0c03175c <tfm_its_get>:
                         psa_storage_uid_t uid,
                         size_t data_offset,
                         size_t data_size,
                         void *p_data,
                         size_t *p_data_length)
{
 c03175c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c03175e:	4614      	mov	r4, r2
 c031760:	461d      	mov	r5, r3
    psa_status_t status;

    /* Check that the UID is valid */
    if (uid == TFM_ITS_INVALID_UID) {
 c031762:	ea54 0305 	orrs.w	r3, r4, r5
{
 c031766:	9e06      	ldr	r6, [sp, #24]
    if (uid == TFM_ITS_INVALID_UID) {
 c031768:	d103      	bne.n	c031772 <tfm_its_get+0x16>
        return PSA_ERROR_INVALID_ARGUMENT;
 c03176a:	f06f 0086 	mvn.w	r0, #134	; 0x86

    /* Update the size of the data placed in p_data */
    *p_data_length = data_size;

    return PSA_SUCCESS;
}
 c03176e:	b002      	add	sp, #8
 c031770:	bd70      	pop	{r4, r5, r6, pc}
 c031772:	ab02      	add	r3, sp, #8
 c031774:	e963 4502 	strd	r4, r5, [r3, #-8]!
 c031778:	4d10      	ldr	r5, [pc, #64]	; (c0317bc <tfm_its_get+0x60>)
    status = its_flash_fs_file_get_info(g_fid, &g_file_info);
 c03177a:	4c11      	ldr	r4, [pc, #68]	; (c0317c0 <tfm_its_get+0x64>)
 c03177c:	462a      	mov	r2, r5
 c03177e:	f842 0b04 	str.w	r0, [r2], #4
 c031782:	cb03      	ldmia	r3!, {r0, r1}
 c031784:	6068      	str	r0, [r5, #4]
 c031786:	6051      	str	r1, [r2, #4]
 c031788:	4628      	mov	r0, r5
 c03178a:	4621      	mov	r1, r4
 c03178c:	f7fd f9e3 	bl	c02eb56 <its_flash_fs_file_get_info>
    if (status != PSA_SUCCESS) {
 c031790:	2800      	cmp	r0, #0
 c031792:	d1ec      	bne.n	c03176e <tfm_its_get+0x12>
    if (data_offset > g_file_info.size_current) {
 c031794:	6824      	ldr	r4, [r4, #0]
 c031796:	42b4      	cmp	r4, r6
 c031798:	d3e7      	bcc.n	c03176a <tfm_its_get+0xe>
    data_size = ITS_UTILS_MIN(data_size,
 c03179a:	9b07      	ldr	r3, [sp, #28]
 c03179c:	1ba4      	subs	r4, r4, r6
 c03179e:	429c      	cmp	r4, r3
 c0317a0:	bf28      	it	cs
 c0317a2:	461c      	movcs	r4, r3
    status = its_flash_fs_file_read(g_fid, data_size, data_offset, p_data);
 c0317a4:	4632      	mov	r2, r6
 c0317a6:	9b08      	ldr	r3, [sp, #32]
 c0317a8:	4621      	mov	r1, r4
 c0317aa:	4628      	mov	r0, r5
 c0317ac:	f7fd fa57 	bl	c02ec5e <its_flash_fs_file_read>
    if (status != PSA_SUCCESS) {
 c0317b0:	2800      	cmp	r0, #0
 c0317b2:	d1dc      	bne.n	c03176e <tfm_its_get+0x12>
    *p_data_length = data_size;
 c0317b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c0317b6:	601c      	str	r4, [r3, #0]
    return PSA_SUCCESS;
 c0317b8:	e7d9      	b.n	c03176e <tfm_its_get+0x12>
 c0317ba:	bf00      	nop
 c0317bc:	3003f024 	.word	0x3003f024
 c0317c0:	3003f030 	.word	0x3003f030

0c0317c4 <tfm_its_get_info>:

psa_status_t tfm_its_get_info(int32_t client_id, psa_storage_uid_t uid,
                              struct psa_storage_info_t *p_info)
{
 c0317c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 c0317c6:	4616      	mov	r6, r2
 c0317c8:	461f      	mov	r7, r3
    psa_status_t status;

    /* Check that the UID is valid */
    if (uid == TFM_ITS_INVALID_UID) {
 c0317ca:	ea56 0307 	orrs.w	r3, r6, r7
{
 c0317ce:	9c08      	ldr	r4, [sp, #32]
    if (uid == TFM_ITS_INVALID_UID) {
 c0317d0:	d016      	beq.n	c031800 <tfm_its_get_info+0x3c>
 c0317d2:	4a0d      	ldr	r2, [pc, #52]	; (c031808 <tfm_its_get_info+0x44>)
 c0317d4:	ab02      	add	r3, sp, #8
 c0317d6:	4615      	mov	r5, r2
 c0317d8:	e963 6702 	strd	r6, r7, [r3, #-8]!
 c0317dc:	f845 0b04 	str.w	r0, [r5], #4
 c0317e0:	cb03      	ldmia	r3!, {r0, r1}
 c0317e2:	6050      	str	r0, [r2, #4]
 c0317e4:	6069      	str	r1, [r5, #4]

    /* Set file id */
    tfm_its_get_fid(client_id, uid, g_fid);

    /* Read file info */
    status = its_flash_fs_file_get_info(g_fid, &g_file_info);
 c0317e6:	4d09      	ldr	r5, [pc, #36]	; (c03180c <tfm_its_get_info+0x48>)
 c0317e8:	4610      	mov	r0, r2
 c0317ea:	4629      	mov	r1, r5
 c0317ec:	f7fd f9b3 	bl	c02eb56 <its_flash_fs_file_get_info>
    if (status != PSA_SUCCESS) {
 c0317f0:	b920      	cbnz	r0, c0317fc <tfm_its_get_info+0x38>
        return status;
    }

    /* Copy file info to the PSA info struct */
    p_info->capacity = g_file_info.size_current;
 c0317f2:	682b      	ldr	r3, [r5, #0]
    p_info->size = g_file_info.size_current;
 c0317f4:	e9c4 3300 	strd	r3, r3, [r4]
    p_info->flags = g_file_info.flags;
 c0317f8:	68ab      	ldr	r3, [r5, #8]
 c0317fa:	60a3      	str	r3, [r4, #8]

    return PSA_SUCCESS;
}
 c0317fc:	b003      	add	sp, #12
 c0317fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return PSA_ERROR_INVALID_ARGUMENT;
 c031800:	f06f 0086 	mvn.w	r0, #134	; 0x86
 c031804:	e7fa      	b.n	c0317fc <tfm_its_get_info+0x38>
 c031806:	bf00      	nop
 c031808:	3003f024 	.word	0x3003f024
 c03180c:	3003f030 	.word	0x3003f030

0c031810 <tfm_its_remove>:

psa_status_t tfm_its_remove(int32_t client_id, psa_storage_uid_t uid)
{
 c031810:	b537      	push	{r0, r1, r2, r4, r5, lr}
 c031812:	4614      	mov	r4, r2
 c031814:	461d      	mov	r5, r3
    psa_status_t status;

    /* Check that the UID is valid */
    if (uid == TFM_ITS_INVALID_UID) {
 c031816:	ea54 0305 	orrs.w	r3, r4, r5
 c03181a:	d018      	beq.n	c03184e <tfm_its_remove+0x3e>
 c03181c:	ab02      	add	r3, sp, #8
 c03181e:	e963 4502 	strd	r4, r5, [r3, #-8]!
 c031822:	4c0e      	ldr	r4, [pc, #56]	; (c03185c <tfm_its_remove+0x4c>)
    }

    /* Set file id */
    tfm_its_get_fid(client_id, uid, g_fid);

    status = its_flash_fs_file_get_info(g_fid, &g_file_info);
 c031824:	4d0e      	ldr	r5, [pc, #56]	; (c031860 <tfm_its_remove+0x50>)
 c031826:	4622      	mov	r2, r4
 c031828:	f842 0b04 	str.w	r0, [r2], #4
 c03182c:	cb03      	ldmia	r3!, {r0, r1}
 c03182e:	6060      	str	r0, [r4, #4]
 c031830:	6051      	str	r1, [r2, #4]
 c031832:	4620      	mov	r0, r4
 c031834:	4629      	mov	r1, r5
 c031836:	f7fd f98e 	bl	c02eb56 <its_flash_fs_file_get_info>
    if (status != PSA_SUCCESS) {
 c03183a:	b950      	cbnz	r0, c031852 <tfm_its_remove+0x42>
    }

    /* If the object exists and has the write once flag set, then it
     * cannot be deleted.
     */
    if (g_file_info.flags & PSA_STORAGE_FLAG_WRITE_ONCE) {
 c03183c:	68ab      	ldr	r3, [r5, #8]
 c03183e:	07db      	lsls	r3, r3, #31
 c031840:	d409      	bmi.n	c031856 <tfm_its_remove+0x46>
        return PSA_ERROR_NOT_PERMITTED;
    }

    /* Delete old file from the persistent area */
    return its_flash_fs_file_delete(g_fid);
 c031842:	4620      	mov	r0, r4
}
 c031844:	b003      	add	sp, #12
 c031846:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return its_flash_fs_file_delete(g_fid);
 c03184a:	f7fd b9a6 	b.w	c02eb9a <its_flash_fs_file_delete>
        return PSA_ERROR_INVALID_ARGUMENT;
 c03184e:	f06f 0086 	mvn.w	r0, #134	; 0x86
}
 c031852:	b003      	add	sp, #12
 c031854:	bd30      	pop	{r4, r5, pc}
        return PSA_ERROR_NOT_PERMITTED;
 c031856:	f06f 0084 	mvn.w	r0, #132	; 0x84
 c03185a:	e7fa      	b.n	c031852 <tfm_its_remove+0x42>
 c03185c:	3003f024 	.word	0x3003f024
 c031860:	3003f030 	.word	0x3003f030

0c031864 <tfm_its_remove_ipc>:
static psa_status_t tfm_its_remove_ipc(const psa_msg_t *msg)
{
    psa_storage_uid_t uid;
    size_t num;

    if (msg->in_size[0] != sizeof(uid)) {
 c031864:	6903      	ldr	r3, [r0, #16]
{
 c031866:	b513      	push	{r0, r1, r4, lr}
    if (msg->in_size[0] != sizeof(uid)) {
 c031868:	2b08      	cmp	r3, #8
{
 c03186a:	4604      	mov	r4, r0
    if (msg->in_size[0] != sizeof(uid)) {
 c03186c:	d003      	beq.n	c031876 <tfm_its_remove_ipc+0x12>
        /* The input argument size is incorrect */
        return PSA_ERROR_PROGRAMMER_ERROR;
 c03186e:	f06f 0080 	mvn.w	r0, #128	; 0x80
    if (num != sizeof(uid)) {
        return PSA_ERROR_PROGRAMMER_ERROR;
    }

    return tfm_its_remove(msg->client_id, uid);
}
 c031872:	b002      	add	sp, #8
 c031874:	bd10      	pop	{r4, pc}
    num = psa_read(msg->handle, 0, &uid, sizeof(uid));
 c031876:	466a      	mov	r2, sp
 c031878:	2100      	movs	r1, #0
 c03187a:	6840      	ldr	r0, [r0, #4]
 c03187c:	f7e5 fe1c 	bl	c0174b8 <psa_read>
    if (num != sizeof(uid)) {
 c031880:	2808      	cmp	r0, #8
 c031882:	d1f4      	bne.n	c03186e <tfm_its_remove_ipc+0xa>
    return tfm_its_remove(msg->client_id, uid);
 c031884:	e9dd 2300 	ldrd	r2, r3, [sp]
 c031888:	68a0      	ldr	r0, [r4, #8]
 c03188a:	f7ff ffc1 	bl	c031810 <tfm_its_remove>
 c03188e:	e7f0      	b.n	c031872 <tfm_its_remove_ipc+0xe>

0c031890 <tfm_its_get_info_ipc>:
{
 c031890:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (msg->in_size[0] != sizeof(uid) ||
 c031892:	6903      	ldr	r3, [r0, #16]
{
 c031894:	b089      	sub	sp, #36	; 0x24
    if (msg->in_size[0] != sizeof(uid) ||
 c031896:	2b08      	cmp	r3, #8
{
 c031898:	4604      	mov	r4, r0
    if (msg->in_size[0] != sizeof(uid) ||
 c03189a:	d004      	beq.n	c0318a6 <tfm_its_get_info_ipc+0x16>
        return PSA_ERROR_PROGRAMMER_ERROR;
 c03189c:	f06f 0580 	mvn.w	r5, #128	; 0x80
}
 c0318a0:	4628      	mov	r0, r5
 c0318a2:	b009      	add	sp, #36	; 0x24
 c0318a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (msg->in_size[0] != sizeof(uid) ||
 c0318a6:	6a07      	ldr	r7, [r0, #32]
 c0318a8:	2f0c      	cmp	r7, #12
 c0318aa:	d1f7      	bne.n	c03189c <tfm_its_get_info_ipc+0xc>
    num = psa_read(msg->handle, 0, &uid, sizeof(uid));
 c0318ac:	aa02      	add	r2, sp, #8
 c0318ae:	2100      	movs	r1, #0
 c0318b0:	6840      	ldr	r0, [r0, #4]
 c0318b2:	f7e5 fe01 	bl	c0174b8 <psa_read>
    if (num != sizeof(uid)) {
 c0318b6:	2808      	cmp	r0, #8
 c0318b8:	d1f0      	bne.n	c03189c <tfm_its_get_info_ipc+0xc>
    status = tfm_its_get_info(msg->client_id, uid, &info);
 c0318ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c0318be:	ae05      	add	r6, sp, #20
 c0318c0:	9600      	str	r6, [sp, #0]
 c0318c2:	68a0      	ldr	r0, [r4, #8]
 c0318c4:	f7ff ff7e 	bl	c0317c4 <tfm_its_get_info>
    if (status == PSA_SUCCESS) {
 c0318c8:	4605      	mov	r5, r0
 c0318ca:	2800      	cmp	r0, #0
 c0318cc:	d1e8      	bne.n	c0318a0 <tfm_its_get_info_ipc+0x10>
        psa_write(msg->handle, 0, &info, sizeof(info));
 c0318ce:	4601      	mov	r1, r0
 c0318d0:	463b      	mov	r3, r7
 c0318d2:	4632      	mov	r2, r6
 c0318d4:	6860      	ldr	r0, [r4, #4]
 c0318d6:	f7e5 fdf3 	bl	c0174c0 <psa_write>
 c0318da:	e7e1      	b.n	c0318a0 <tfm_its_get_info_ipc+0x10>

0c0318dc <tfm_its_get_ipc>:
{
 c0318dc:	b570      	push	{r4, r5, r6, lr}
    if (msg->in_size[0] != sizeof(uid) ||
 c0318de:	6903      	ldr	r3, [r0, #16]
{
 c0318e0:	b088      	sub	sp, #32
    if (msg->in_size[0] != sizeof(uid) ||
 c0318e2:	2b08      	cmp	r3, #8
{
 c0318e4:	4604      	mov	r4, r0
    if (msg->in_size[0] != sizeof(uid) ||
 c0318e6:	d004      	beq.n	c0318f2 <tfm_its_get_ipc+0x16>
        return PSA_ERROR_PROGRAMMER_ERROR;
 c0318e8:	f06f 0580 	mvn.w	r5, #128	; 0x80
}
 c0318ec:	4628      	mov	r0, r5
 c0318ee:	b008      	add	sp, #32
 c0318f0:	bd70      	pop	{r4, r5, r6, pc}
    if (msg->in_size[0] != sizeof(uid) ||
 c0318f2:	6945      	ldr	r5, [r0, #20]
 c0318f4:	2d04      	cmp	r5, #4
 c0318f6:	d1f7      	bne.n	c0318e8 <tfm_its_get_ipc+0xc>
    num = psa_read(msg->handle, 0, &uid, sizeof(uid));
 c0318f8:	aa06      	add	r2, sp, #24
 c0318fa:	2100      	movs	r1, #0
 c0318fc:	6840      	ldr	r0, [r0, #4]
 c0318fe:	f7e5 fddb 	bl	c0174b8 <psa_read>
    if (num != sizeof(uid)) {
 c031902:	2808      	cmp	r0, #8
 c031904:	d1f0      	bne.n	c0318e8 <tfm_its_get_ipc+0xc>
    num = psa_read(msg->handle, 1, &data_offset, sizeof(data_offset));
 c031906:	462b      	mov	r3, r5
 c031908:	aa04      	add	r2, sp, #16
 c03190a:	2101      	movs	r1, #1
 c03190c:	6860      	ldr	r0, [r4, #4]
 c03190e:	f7e5 fdd3 	bl	c0174b8 <psa_read>
    if (num != sizeof(data_offset)) {
 c031912:	2804      	cmp	r0, #4
 c031914:	d1e8      	bne.n	c0318e8 <tfm_its_get_ipc+0xc>
    status = tfm_its_get(msg->client_id, uid, data_offset, data_size,
 c031916:	ab05      	add	r3, sp, #20
 c031918:	9303      	str	r3, [sp, #12]
 c03191a:	6a23      	ldr	r3, [r4, #32]
 c03191c:	4e09      	ldr	r6, [pc, #36]	; (c031944 <tfm_its_get_ipc+0x68>)
 c03191e:	9301      	str	r3, [sp, #4]
 c031920:	9b04      	ldr	r3, [sp, #16]
 c031922:	9602      	str	r6, [sp, #8]
 c031924:	9300      	str	r3, [sp, #0]
 c031926:	68a0      	ldr	r0, [r4, #8]
 c031928:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 c03192c:	f7ff ff16 	bl	c03175c <tfm_its_get>
    if (status == PSA_SUCCESS) {
 c031930:	4605      	mov	r5, r0
 c031932:	2800      	cmp	r0, #0
 c031934:	d1da      	bne.n	c0318ec <tfm_its_get_ipc+0x10>
        psa_write(msg->handle, 0, asset_data, data_length);
 c031936:	4601      	mov	r1, r0
 c031938:	9b05      	ldr	r3, [sp, #20]
 c03193a:	4632      	mov	r2, r6
 c03193c:	6860      	ldr	r0, [r4, #4]
 c03193e:	f7e5 fdbf 	bl	c0174c0 <psa_write>
 c031942:	e7d3      	b.n	c0318ec <tfm_its_get_ipc+0x10>
 c031944:	3003f03c 	.word	0x3003f03c

0c031948 <tfm_its_set_ipc>:
{
 c031948:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (msg->in_size[0] != sizeof(uid) ||
 c03194a:	6903      	ldr	r3, [r0, #16]
{
 c03194c:	b089      	sub	sp, #36	; 0x24
    if (msg->in_size[0] != sizeof(uid) ||
 c03194e:	2b08      	cmp	r3, #8
{
 c031950:	4604      	mov	r4, r0
    if (msg->in_size[0] != sizeof(uid) ||
 c031952:	d003      	beq.n	c03195c <tfm_its_set_ipc+0x14>
        return PSA_ERROR_PROGRAMMER_ERROR;
 c031954:	f06f 0080 	mvn.w	r0, #128	; 0x80
}
 c031958:	b009      	add	sp, #36	; 0x24
 c03195a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (msg->in_size[0] != sizeof(uid) ||
 c03195c:	6987      	ldr	r7, [r0, #24]
 c03195e:	2f04      	cmp	r7, #4
 c031960:	d1f8      	bne.n	c031954 <tfm_its_set_ipc+0xc>
    data_length = msg->in_size[1];
 c031962:	6945      	ldr	r5, [r0, #20]
    if (data_length > sizeof(asset_data)) {
 c031964:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 c031968:	d821      	bhi.n	c0319ae <tfm_its_set_ipc+0x66>
    num = psa_read(msg->handle, 0, &uid, sizeof(uid));
 c03196a:	aa06      	add	r2, sp, #24
 c03196c:	2100      	movs	r1, #0
 c03196e:	6840      	ldr	r0, [r0, #4]
 c031970:	f7e5 fda2 	bl	c0174b8 <psa_read>
    if (num != sizeof(uid)) {
 c031974:	2808      	cmp	r0, #8
 c031976:	d1ed      	bne.n	c031954 <tfm_its_set_ipc+0xc>
    num = psa_read(msg->handle, 1, &asset_data, data_length);
 c031978:	4e0e      	ldr	r6, [pc, #56]	; (c0319b4 <tfm_its_set_ipc+0x6c>)
 c03197a:	462b      	mov	r3, r5
 c03197c:	4632      	mov	r2, r6
 c03197e:	2101      	movs	r1, #1
 c031980:	6860      	ldr	r0, [r4, #4]
 c031982:	f7e5 fd99 	bl	c0174b8 <psa_read>
    if (num != data_length) {
 c031986:	4285      	cmp	r5, r0
 c031988:	d1e4      	bne.n	c031954 <tfm_its_set_ipc+0xc>
    num = psa_read(msg->handle, 2, &create_flags, sizeof(create_flags));
 c03198a:	463b      	mov	r3, r7
 c03198c:	aa05      	add	r2, sp, #20
 c03198e:	2102      	movs	r1, #2
 c031990:	6860      	ldr	r0, [r4, #4]
 c031992:	f7e5 fd91 	bl	c0174b8 <psa_read>
    if (num != sizeof(create_flags)) {
 c031996:	2804      	cmp	r0, #4
 c031998:	d1dc      	bne.n	c031954 <tfm_its_set_ipc+0xc>
    return tfm_its_set(msg->client_id, uid, data_length, asset_data,
 c03199a:	9b05      	ldr	r3, [sp, #20]
 c03199c:	9500      	str	r5, [sp, #0]
 c03199e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 c0319a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 c0319a6:	68a0      	ldr	r0, [r4, #8]
 c0319a8:	f7ff fe94 	bl	c0316d4 <tfm_its_set>
 c0319ac:	e7d4      	b.n	c031958 <tfm_its_set_ipc+0x10>
        return PSA_ERROR_INVALID_ARGUMENT;
 c0319ae:	f06f 0086 	mvn.w	r0, #134	; 0x86
 c0319b2:	e7d1      	b.n	c031958 <tfm_its_set_ipc+0x10>
 c0319b4:	3003f03c 	.word	0x3003f03c

0c0319b8 <its_signal_handle>:
    while (1)
        ;
}

static void its_signal_handle(psa_signal_t signal, its_func_t pfn)
{
 c0319b8:	b510      	push	{r4, lr}
 c0319ba:	b08c      	sub	sp, #48	; 0x30
 c0319bc:	460c      	mov	r4, r1
    psa_msg_t msg;
    psa_status_t status;

    status = psa_get(signal, &msg);
 c0319be:	4669      	mov	r1, sp
 c0319c0:	f7e5 fd76 	bl	c0174b0 <psa_get>
    if (status != PSA_SUCCESS) {
 c0319c4:	4601      	mov	r1, r0
 c0319c6:	b960      	cbnz	r0, c0319e2 <its_signal_handle+0x2a>
        return;
    }

    switch (msg.type) {
 c0319c8:	9b00      	ldr	r3, [sp, #0]
 c0319ca:	1c98      	adds	r0, r3, #2
 c0319cc:	db02      	blt.n	c0319d4 <its_signal_handle+0x1c>
 c0319ce:	1c5a      	adds	r2, r3, #1
 c0319d0:	dd04      	ble.n	c0319dc <its_signal_handle+0x24>
 c0319d2:	b103      	cbz	r3, c0319d6 <its_signal_handle+0x1e>
 c0319d4:	e7fe      	b.n	c0319d4 <its_signal_handle+0x1c>
    case PSA_IPC_CONNECT:
        psa_reply(msg.handle, PSA_SUCCESS);
        break;
    case PSA_IPC_CALL:
        status = pfn(&msg);
 c0319d6:	4668      	mov	r0, sp
 c0319d8:	47a0      	blx	r4
        psa_reply(msg.handle, status);
 c0319da:	4601      	mov	r1, r0
 c0319dc:	9801      	ldr	r0, [sp, #4]
 c0319de:	f7e5 fd71 	bl	c0174c4 <psa_reply>
        psa_reply(msg.handle, PSA_SUCCESS);
        break;
    default:
        tfm_abort();
    }
}
 c0319e2:	b00c      	add	sp, #48	; 0x30
 c0319e4:	bd10      	pop	{r4, pc}
	...

0c0319e8 <tfm_its_req_mngr_init>:
#endif /* !defined(TFM_PSA_API) */

psa_status_t tfm_its_req_mngr_init(void)
{
 c0319e8:	b570      	push	{r4, r5, r6, lr}
#ifdef TFM_PSA_API
    psa_signal_t signals = 0;

    if (tfm_its_init() != PSA_SUCCESS) {
 c0319ea:	f7ff fe66 	bl	c0316ba <tfm_its_init>
 c0319ee:	b978      	cbnz	r0, c031a10 <tfm_its_req_mngr_init+0x28>
        } else if (signals & TFM_ITS_GET_SIG) {
            its_signal_handle(TFM_ITS_GET_SIG, tfm_its_get_ipc);
        } else if (signals & TFM_ITS_GET_INFO_SIG) {
            its_signal_handle(TFM_ITS_GET_INFO_SIG, tfm_its_get_info_ipc);
        } else if (signals & TFM_ITS_REMOVE_SIG) {
            its_signal_handle(TFM_ITS_REMOVE_SIG, tfm_its_remove_ipc);
 c0319f0:	4c10      	ldr	r4, [pc, #64]	; (c031a34 <tfm_its_req_mngr_init+0x4c>)
            its_signal_handle(TFM_ITS_GET_INFO_SIG, tfm_its_get_info_ipc);
 c0319f2:	4d11      	ldr	r5, [pc, #68]	; (c031a38 <tfm_its_req_mngr_init+0x50>)
            its_signal_handle(TFM_ITS_GET_SIG, tfm_its_get_ipc);
 c0319f4:	4e11      	ldr	r6, [pc, #68]	; (c031a3c <tfm_its_req_mngr_init+0x54>)
        signals = psa_wait(PSA_WAIT_ANY, PSA_BLOCK);
 c0319f6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 c0319fa:	f04f 30ff 	mov.w	r0, #4294967295
 c0319fe:	f7e5 fd55 	bl	c0174ac <psa_wait>
        if (signals & TFM_ITS_SET_SIG) {
 c031a02:	06c3      	lsls	r3, r0, #27
 c031a04:	d505      	bpl.n	c031a12 <tfm_its_req_mngr_init+0x2a>
            its_signal_handle(TFM_ITS_SET_SIG, tfm_its_set_ipc);
 c031a06:	2010      	movs	r0, #16
 c031a08:	490d      	ldr	r1, [pc, #52]	; (c031a40 <tfm_its_req_mngr_init+0x58>)
            its_signal_handle(TFM_ITS_REMOVE_SIG, tfm_its_remove_ipc);
 c031a0a:	f7ff ffd5 	bl	c0319b8 <its_signal_handle>
 c031a0e:	e7f2      	b.n	c0319f6 <tfm_its_req_mngr_init+0xe>
 c031a10:	e7fe      	b.n	c031a10 <tfm_its_req_mngr_init+0x28>
        } else if (signals & TFM_ITS_GET_SIG) {
 c031a12:	0681      	lsls	r1, r0, #26
 c031a14:	d502      	bpl.n	c031a1c <tfm_its_req_mngr_init+0x34>
            its_signal_handle(TFM_ITS_GET_SIG, tfm_its_get_ipc);
 c031a16:	4631      	mov	r1, r6
 c031a18:	2020      	movs	r0, #32
 c031a1a:	e7f6      	b.n	c031a0a <tfm_its_req_mngr_init+0x22>
        } else if (signals & TFM_ITS_GET_INFO_SIG) {
 c031a1c:	0642      	lsls	r2, r0, #25
 c031a1e:	d502      	bpl.n	c031a26 <tfm_its_req_mngr_init+0x3e>
            its_signal_handle(TFM_ITS_GET_INFO_SIG, tfm_its_get_info_ipc);
 c031a20:	4629      	mov	r1, r5
 c031a22:	2040      	movs	r0, #64	; 0x40
 c031a24:	e7f1      	b.n	c031a0a <tfm_its_req_mngr_init+0x22>
        } else if (signals & TFM_ITS_REMOVE_SIG) {
 c031a26:	0603      	lsls	r3, r0, #24
 c031a28:	d502      	bpl.n	c031a30 <tfm_its_req_mngr_init+0x48>
            its_signal_handle(TFM_ITS_REMOVE_SIG, tfm_its_remove_ipc);
 c031a2a:	4621      	mov	r1, r4
 c031a2c:	2080      	movs	r0, #128	; 0x80
 c031a2e:	e7ec      	b.n	c031a0a <tfm_its_req_mngr_init+0x22>
 c031a30:	e7fe      	b.n	c031a30 <tfm_its_req_mngr_init+0x48>
 c031a32:	bf00      	nop
 c031a34:	0c031865 	.word	0x0c031865
 c031a38:	0c031891 	.word	0x0c031891
 c031a3c:	0c0318dd 	.word	0x0c0318dd
 c031a40:	0c031949 	.word	0x0c031949

0c031a44 <tfm_msg_enqueue>:

/* Message queue process */
int32_t tfm_msg_enqueue(struct tfm_msg_queue_t *queue,
                        struct tfm_msg_body_t *node)
{
    if (!queue || !node) {
 c031a44:	b160      	cbz	r0, c031a60 <tfm_msg_enqueue+0x1c>
 c031a46:	b159      	cbz	r1, c031a60 <tfm_msg_enqueue+0x1c>
        return IPC_ERROR_BAD_PARAMETERS;
    }

    if (queue->size == 0) {
 c031a48:	6883      	ldr	r3, [r0, #8]
 c031a4a:	b92b      	cbnz	r3, c031a58 <tfm_msg_enqueue+0x14>
        queue->head = node;
 c031a4c:	6001      	str	r1, [r0, #0]
        queue->tail = node;
    } else {
        queue->tail->next = node;
        queue->tail = node;
    }
    queue->size++;
 c031a4e:	3301      	adds	r3, #1
        queue->tail = node;
 c031a50:	6041      	str	r1, [r0, #4]
    queue->size++;
 c031a52:	6083      	str	r3, [r0, #8]
    return IPC_SUCCESS;
 c031a54:	2000      	movs	r0, #0
 c031a56:	4770      	bx	lr
        queue->tail->next = node;
 c031a58:	6842      	ldr	r2, [r0, #4]
 c031a5a:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
 c031a5e:	e7f6      	b.n	c031a4e <tfm_msg_enqueue+0xa>
        return IPC_ERROR_BAD_PARAMETERS;
 c031a60:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 c031a64:	4770      	bx	lr

0c031a66 <tfm_msg_dequeue>:

struct tfm_msg_body_t *tfm_msg_dequeue(struct tfm_msg_queue_t *queue)
{
    struct tfm_msg_body_t *pop_node;

    if (!queue) {
 c031a66:	4603      	mov	r3, r0
 c031a68:	b140      	cbz	r0, c031a7c <tfm_msg_dequeue+0x16>
        return NULL;
    }

    if (queue->size == 0) {
 c031a6a:	6882      	ldr	r2, [r0, #8]
 c031a6c:	b13a      	cbz	r2, c031a7e <tfm_msg_dequeue+0x18>
        return NULL;
    }

    pop_node = queue->head;
 c031a6e:	6800      	ldr	r0, [r0, #0]
    queue->head = queue->head->next;
    queue->size--;
 c031a70:	3a01      	subs	r2, #1
    queue->head = queue->head->next;
 c031a72:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
    queue->size--;
 c031a76:	609a      	str	r2, [r3, #8]
    queue->head = queue->head->next;
 c031a78:	6019      	str	r1, [r3, #0]
    return pop_node;
 c031a7a:	4770      	bx	lr
 c031a7c:	4770      	bx	lr
        return NULL;
 c031a7e:	4610      	mov	r0, r2
}
 c031a80:	4770      	bx	lr

0c031a82 <tfm_msg_queue_is_empty>:

int32_t tfm_msg_queue_is_empty(struct tfm_msg_queue_t *queue)
{
    return queue->size == 0 ? 1 : 0;
 c031a82:	6880      	ldr	r0, [r0, #8]
}
 c031a84:	fab0 f080 	clz	r0, r0
 c031a88:	0940      	lsrs	r0, r0, #5
 c031a8a:	4770      	bx	lr

0c031a8c <tfm_nspm_get_current_client_id>:
}
 c031a8c:	f04f 30ff 	mov.w	r0, #4294967295
 c031a90:	4770      	bx	lr

0c031a92 <__acle_se_TZ_InitContextSystem_S>:
}
 c031a92:	2001      	movs	r0, #1
 c031a94:	4671      	mov	r1, lr
 c031a96:	4672      	mov	r2, lr
 c031a98:	4673      	mov	r3, lr
 c031a9a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c031a9e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c031aa2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c031aa6:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c031aaa:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c031aae:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c031ab2:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c031ab6:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c031aba:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c031abe:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c031ac2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c031ac6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c031aca:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c031ace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c031ad2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c031ad6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c031ada:	f38e 8c00 	msr	CPSR_fs, lr
 c031ade:	b410      	push	{r4}
 c031ae0:	eef1 ca10 	vmrs	ip, fpscr
 c031ae4:	f64f 7460 	movw	r4, #65376	; 0xff60
 c031ae8:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c031aec:	ea0c 0c04 	and.w	ip, ip, r4
 c031af0:	eee1 ca10 	vmsr	fpscr, ip
 c031af4:	bc10      	pop	{r4}
 c031af6:	46f4      	mov	ip, lr
 c031af8:	4774      	bxns	lr

0c031afa <__acle_se_TZ_AllocModuleContext_S>:
}
 c031afa:	2001      	movs	r0, #1
 c031afc:	4671      	mov	r1, lr
 c031afe:	4672      	mov	r2, lr
 c031b00:	4673      	mov	r3, lr
 c031b02:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c031b06:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c031b0a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c031b0e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c031b12:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c031b16:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c031b1a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c031b1e:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c031b22:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c031b26:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c031b2a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c031b2e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c031b32:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c031b36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c031b3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c031b3e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c031b42:	f38e 8c00 	msr	CPSR_fs, lr
 c031b46:	b410      	push	{r4}
 c031b48:	eef1 ca10 	vmrs	ip, fpscr
 c031b4c:	f64f 7460 	movw	r4, #65376	; 0xff60
 c031b50:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c031b54:	ea0c 0c04 	and.w	ip, ip, r4
 c031b58:	eee1 ca10 	vmsr	fpscr, ip
 c031b5c:	bc10      	pop	{r4}
 c031b5e:	46f4      	mov	ip, lr
 c031b60:	4774      	bxns	lr

0c031b62 <__acle_se_TZ_FreeModuleContext_S>:
}
 c031b62:	2001      	movs	r0, #1
 c031b64:	4671      	mov	r1, lr
 c031b66:	4672      	mov	r2, lr
 c031b68:	4673      	mov	r3, lr
 c031b6a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c031b6e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c031b72:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c031b76:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c031b7a:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c031b7e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c031b82:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c031b86:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c031b8a:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c031b8e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c031b92:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c031b96:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c031b9a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c031b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c031ba2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c031ba6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c031baa:	f38e 8c00 	msr	CPSR_fs, lr
 c031bae:	b410      	push	{r4}
 c031bb0:	eef1 ca10 	vmrs	ip, fpscr
 c031bb4:	f64f 7460 	movw	r4, #65376	; 0xff60
 c031bb8:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c031bbc:	ea0c 0c04 	and.w	ip, ip, r4
 c031bc0:	eee1 ca10 	vmsr	fpscr, ip
 c031bc4:	bc10      	pop	{r4}
 c031bc6:	46f4      	mov	ip, lr
 c031bc8:	4774      	bxns	lr

0c031bca <__acle_se_TZ_LoadContext_S>:
}
 c031bca:	2001      	movs	r0, #1
 c031bcc:	4671      	mov	r1, lr
 c031bce:	4672      	mov	r2, lr
 c031bd0:	4673      	mov	r3, lr
 c031bd2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c031bd6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c031bda:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c031bde:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c031be2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c031be6:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c031bea:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c031bee:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c031bf2:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c031bf6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c031bfa:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c031bfe:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c031c02:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c031c06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c031c0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c031c0e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c031c12:	f38e 8c00 	msr	CPSR_fs, lr
 c031c16:	b410      	push	{r4}
 c031c18:	eef1 ca10 	vmrs	ip, fpscr
 c031c1c:	f64f 7460 	movw	r4, #65376	; 0xff60
 c031c20:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c031c24:	ea0c 0c04 	and.w	ip, ip, r4
 c031c28:	eee1 ca10 	vmsr	fpscr, ip
 c031c2c:	bc10      	pop	{r4}
 c031c2e:	46f4      	mov	ip, lr
 c031c30:	4774      	bxns	lr

0c031c32 <__acle_se_TZ_StoreContext_S>:
}
 c031c32:	2001      	movs	r0, #1
 c031c34:	4671      	mov	r1, lr
 c031c36:	4672      	mov	r2, lr
 c031c38:	4673      	mov	r3, lr
 c031c3a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c031c3e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c031c42:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c031c46:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c031c4a:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c031c4e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c031c52:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c031c56:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c031c5a:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c031c5e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c031c62:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c031c66:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c031c6a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c031c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c031c72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c031c76:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c031c7a:	f38e 8c00 	msr	CPSR_fs, lr
 c031c7e:	b410      	push	{r4}
 c031c80:	eef1 ca10 	vmrs	ip, fpscr
 c031c84:	f64f 7460 	movw	r4, #65376	; 0xff60
 c031c88:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c031c8c:	ea0c 0c04 	and.w	ip, ip, r4
 c031c90:	eee1 ca10 	vmsr	fpscr, ip
 c031c94:	bc10      	pop	{r4}
 c031c96:	46f4      	mov	ip, lr
 c031c98:	4774      	bxns	lr
	...

0c031c9c <configure_ns_code>:
    /* NOTREACHED */
    return PSA_SUCCESS;
}

void configure_ns_code(void)
{
 c031c9c:	b508      	push	{r3, lr}
    /* SCB_NS.VTOR points to the Non-secure vector table base address */
    SCB_NS->VTOR = tfm_spm_hal_get_ns_VTOR();
 c031c9e:	f7e8 f8ef 	bl	c019e80 <tfm_spm_hal_get_ns_VTOR>
 c031ca2:	4b08      	ldr	r3, [pc, #32]	; (c031cc4 <configure_ns_code+0x28>)
 c031ca4:	6098      	str	r0, [r3, #8]

    /* Setups Main stack pointer of the non-secure code */
    uint32_t ns_msp = tfm_spm_hal_get_ns_MSP();
 c031ca6:	f7e8 f8f1 	bl	c019e8c <tfm_spm_hal_get_ns_MSP>
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c031caa:	f380 8888 	msr	MSP_NS, r0

    __TZ_set_MSP_NS(ns_msp);

    /* Get the address of non-secure code entry point to jump there */
    uint32_t entry_ptr = tfm_spm_hal_get_ns_entry_point();
 c031cae:	f7e8 f8f3 	bl	c019e98 <tfm_spm_hal_get_ns_entry_point>

    /* Clears LSB of the function address to indicate the function-call
     * will perform the switch from secure to non-secure
     */
    ns_entry = (nsfptr_t) cmse_nsfptr_create(entry_ptr);
 c031cb2:	4b05      	ldr	r3, [pc, #20]	; (c031cc8 <configure_ns_code+0x2c>)
 c031cb4:	f020 0001 	bic.w	r0, r0, #1
 c031cb8:	6018      	str	r0, [r3, #0]

    /* Configure mpu nonsecure */
    tfm_spm_hal_set_ns_mpu();
}
 c031cba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tfm_spm_hal_set_ns_mpu();
 c031cbe:	f7e8 b8f1 	b.w	c019ea4 <tfm_spm_hal_set_ns_mpu>
 c031cc2:	bf00      	nop
 c031cc4:	e002ed00 	.word	0xe002ed00
 c031cc8:	30031000 	.word	0x30031000

0c031ccc <tfm_pool_init>:
#include "tfm_memory_utils.h"
#include "tfm_core_utils.h"

int32_t tfm_pool_init(struct tfm_pool_instance_t *pool, size_t poolsz,
                      size_t chunksz, size_t num)
{
 c031ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c031cce:	4616      	mov	r6, r2
 c031cd0:	461d      	mov	r5, r3
    struct tfm_pool_chunk_t *pchunk;
    size_t i;

    if (!pool || num == 0) {
 c031cd2:	4604      	mov	r4, r0
 c031cd4:	b1f8      	cbz	r0, c031d16 <tfm_pool_init+0x4a>
 c031cd6:	b1f3      	cbz	r3, c031d16 <tfm_pool_init+0x4a>
        return IPC_ERROR_BAD_PARAMETERS;
    }

    /* Ensure buffer is large enough */
    if (poolsz != ((chunksz + sizeof(struct tfm_pool_chunk_t)) * num +
 c031cd8:	f102 070c 	add.w	r7, r2, #12
 c031cdc:	fb03 f207 	mul.w	r2, r3, r7
 c031ce0:	3210      	adds	r2, #16
 c031ce2:	428a      	cmp	r2, r1
 c031ce4:	d117      	bne.n	c031d16 <tfm_pool_init+0x4a>
        sizeof(struct tfm_pool_instance_t))) {
        return IPC_ERROR_BAD_PARAMETERS;
    }

    /* Buffer should be BSS cleared but clear it again */
    tfm_core_util_memset(pool, 0, poolsz);
 c031ce6:	2100      	movs	r1, #0
 c031ce8:	f7ff fcbe 	bl	c031668 <tfm_core_util_memset>

    /* Chain pool chunks */
    tfm_list_init(&pool->chunks_list);

    pchunk = (struct tfm_pool_chunk_t *)pool->chunks;
    for (i = 0; i < num; i++) {
 c031cec:	2300      	movs	r3, #0
    tfm_list_init(&pool->chunks_list);
 c031cee:	f104 0108 	add.w	r1, r4, #8
 c031cf2:	e9c4 1102 	strd	r1, r1, [r4, #8]
    pchunk = (struct tfm_pool_chunk_t *)pool->chunks;
 c031cf6:	f104 0210 	add.w	r2, r4, #16
    head->prev->next = node;
 c031cfa:	68a0      	ldr	r0, [r4, #8]
    for (i = 0; i < num; i++) {
 c031cfc:	3301      	adds	r3, #1
 c031cfe:	429d      	cmp	r5, r3
        pchunk->pool = pool;
 c031d00:	6094      	str	r4, [r2, #8]
 c031d02:	6042      	str	r2, [r0, #4]
    node->prev = head->prev;
 c031d04:	6010      	str	r0, [r2, #0]
    head->prev = node;
 c031d06:	60a2      	str	r2, [r4, #8]
    node->next = head;
 c031d08:	6051      	str	r1, [r2, #4]
        tfm_list_add_tail(&pool->chunks_list, &pchunk->list);
        pchunk = (struct tfm_pool_chunk_t *)&pchunk->data[chunksz];
 c031d0a:	443a      	add	r2, r7
    for (i = 0; i < num; i++) {
 c031d0c:	d1f5      	bne.n	c031cfa <tfm_pool_init+0x2e>

    /* Prepare instance and insert to pool list */
    pool->chunksz = chunksz;
    pool->chunk_count = num;

    return IPC_SUCCESS;
 c031d0e:	2000      	movs	r0, #0
    pool->chunk_count = num;
 c031d10:	e9c4 6500 	strd	r6, r5, [r4]
}
 c031d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return IPC_ERROR_BAD_PARAMETERS;
 c031d16:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 c031d1a:	e7fb      	b.n	c031d14 <tfm_pool_init+0x48>

0c031d1c <tfm_pool_alloc>:
void *tfm_pool_alloc(struct tfm_pool_instance_t *pool)
{
    struct tfm_list_node_t *node;
    struct tfm_pool_chunk_t *pchunk;

    if (!pool) {
 c031d1c:	b160      	cbz	r0, c031d38 <tfm_pool_alloc+0x1c>
    return (head->next == head);
 c031d1e:	68c3      	ldr	r3, [r0, #12]
        return NULL;
    }

    if (tfm_list_is_empty(&pool->chunks_list)) {
 c031d20:	3008      	adds	r0, #8
 c031d22:	4283      	cmp	r3, r0
 c031d24:	d007      	beq.n	c031d36 <tfm_pool_alloc+0x1a>
    node->prev->next = node->next;
 c031d26:	e9d3 2100 	ldrd	r2, r1, [r3]
 c031d2a:	6051      	str	r1, [r2, #4]
    node->next->prev = node->prev;
 c031d2c:	6859      	ldr	r1, [r3, #4]
    pchunk = TFM_GET_CONTAINER_PTR(node, struct tfm_pool_chunk_t, list);

    /* Remove node from list node, it will be added when pool free */
    tfm_list_del_node(node);

    return &pchunk->data;
 c031d2e:	f103 000c 	add.w	r0, r3, #12
 c031d32:	600a      	str	r2, [r1, #0]
 c031d34:	4770      	bx	lr
        return NULL;
 c031d36:	2000      	movs	r0, #0
}
 c031d38:	4770      	bx	lr

0c031d3a <tfm_pool_free>:
{
    struct tfm_pool_chunk_t *pchunk;
    struct tfm_pool_instance_t *pool;

    pchunk = TFM_GET_CONTAINER_PTR(ptr, struct tfm_pool_chunk_t, data);
    pool = (struct tfm_pool_instance_t *)pchunk->pool;
 c031d3a:	f850 3c04 	ldr.w	r3, [r0, #-4]
    pchunk = TFM_GET_CONTAINER_PTR(ptr, struct tfm_pool_chunk_t, data);
 c031d3e:	f1a0 020c 	sub.w	r2, r0, #12
    head->prev->next = node;
 c031d42:	6899      	ldr	r1, [r3, #8]
 c031d44:	604a      	str	r2, [r1, #4]
    node->prev = head->prev;
 c031d46:	f840 1c0c 	str.w	r1, [r0, #-12]
    head->prev = node;
 c031d4a:	f843 2f08 	str.w	r2, [r3, #8]!
    node->next = head;
 c031d4e:	f840 3c08 	str.w	r3, [r0, #-8]
    tfm_list_add_tail(&pool->chunks_list, &pchunk->list);
}
 c031d52:	4770      	bx	lr

0c031d54 <is_valid_chunk_data_in_pool>:

bool is_valid_chunk_data_in_pool(struct tfm_pool_instance_t *pool,
                                 uint8_t *data)
{
    const uintptr_t chunks_start = (uintptr_t)(pool->chunks);
 c031d54:	f100 0210 	add.w	r2, r0, #16
    const size_t chunk_count = pool->chunk_count;
    const uintptr_t chunks_end = chunks_start + chunks_size * chunk_count;
    uintptr_t pool_chunk_address = 0;

    /* Check that the message was allocated from the pool. */
    if ((uintptr_t)data < chunks_start || (uintptr_t)data >= chunks_end) {
 c031d58:	4291      	cmp	r1, r2
    const size_t chunk_count = pool->chunk_count;
 c031d5a:	e9d0 3000 	ldrd	r3, r0, [r0]
    if ((uintptr_t)data < chunks_start || (uintptr_t)data >= chunks_end) {
 c031d5e:	d30e      	bcc.n	c031d7e <is_valid_chunk_data_in_pool+0x2a>
    const size_t chunks_size = pool->chunksz + sizeof(struct tfm_pool_chunk_t);
 c031d60:	330c      	adds	r3, #12
    const uintptr_t chunks_end = chunks_start + chunks_size * chunk_count;
 c031d62:	fb00 2003 	mla	r0, r0, r3, r2
    if ((uintptr_t)data < chunks_start || (uintptr_t)data >= chunks_end) {
 c031d66:	4281      	cmp	r1, r0
 c031d68:	d209      	bcs.n	c031d7e <is_valid_chunk_data_in_pool+0x2a>
        return false;
    }

    pool_chunk_address =
 c031d6a:	390c      	subs	r1, #12
    (uint32_t)TFM_GET_CONTAINER_PTR(data, struct tfm_pool_chunk_t, data);

    /* Make sure that the chunk containing the message is aligned on */
    /* chunk boundary in the pool. */
    if ((pool_chunk_address - chunks_start) % chunks_size != 0) {
 c031d6c:	1a89      	subs	r1, r1, r2
 c031d6e:	fbb1 f0f3 	udiv	r0, r1, r3
 c031d72:	fb03 1010 	mls	r0, r3, r0, r1
 c031d76:	fab0 f080 	clz	r0, r0
 c031d7a:	0940      	lsrs	r0, r0, #5
 c031d7c:	4770      	bx	lr
        return false;
 c031d7e:	2000      	movs	r0, #0
        return false;
    }
    return true;
}
 c031d80:	4770      	bx	lr

0c031d82 <tfm_sst_init>:
#include "tfm_protected_storage.h"
#include "sst_object_system.h"
#include "tfm_sst_defs.h"

psa_ps_status_t tfm_sst_init(void)
{
 c031d82:	b508      	push	{r3, lr}
    psa_ps_status_t err;

    err = sst_system_prepare();
 c031d84:	f7fe fc64 	bl	c030650 <sst_system_prepare>
     * This flag can be set if the SST memory area is located in persistent
     * memory without a previous valid SST flash layout in it. That is the case
     * when it is the first time in the device life that the SST service is
     * executed.
     */
    if (err != PSA_PS_SUCCESS) {
 c031d88:	b130      	cbz	r0, c031d98 <tfm_sst_init+0x16>
        /* Remove all data in the SST memory area and create a valid SST flash
         * layout in that area.
         */
        err = sst_system_wipe_all();
 c031d8a:	f7fe fd55 	bl	c030838 <sst_system_wipe_all>
        if (err != PSA_PS_SUCCESS) {
 c031d8e:	b918      	cbnz	r0, c031d98 <tfm_sst_init+0x16>
        err = sst_system_prepare();
    }
#endif /* SST_CREATE_FLASH_LAYOUT */

    return err;
}
 c031d90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        err = sst_system_prepare();
 c031d94:	f7fe bc5c 	b.w	c030650 <sst_system_prepare>
}
 c031d98:	bd08      	pop	{r3, pc}

0c031d9a <tfm_sst_set>:

psa_ps_status_t tfm_sst_set(int32_t client_id,
                            psa_ps_uid_t uid,
                            uint32_t data_length,
                            psa_ps_create_flags_t create_flags)
{
 c031d9a:	b410      	push	{r4}
 c031d9c:	4619      	mov	r1, r3
 c031d9e:	4604      	mov	r4, r0
 c031da0:	4610      	mov	r0, r2
    /* Check that the UID is valid */
    if (uid == TFM_SST_INVALID_UID) {
 c031da2:	ea50 0201 	orrs.w	r2, r0, r1
{
 c031da6:	9b02      	ldr	r3, [sp, #8]
    if (uid == TFM_SST_INVALID_UID) {
 c031da8:	d007      	beq.n	c031dba <tfm_sst_set+0x20>
        return PSA_PS_ERROR_INVALID_ARGUMENT;
    }

    /* Check that the create_flags does not contain any unsupported flags */
    if (create_flags & ~PSA_PS_FLAG_WRITE_ONCE) {
 c031daa:	f033 0201 	bics.w	r2, r3, #1
 c031dae:	d108      	bne.n	c031dc2 <tfm_sst_set+0x28>
        return PSA_PS_ERROR_FLAGS_NOT_SUPPORTED;
    }

    /* Create the object in the object system */
    return sst_object_create(uid, client_id, create_flags, data_length);
 c031db0:	4622      	mov	r2, r4
}
 c031db2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return sst_object_create(uid, client_id, create_flags, data_length);
 c031db6:	f7fe bc83 	b.w	c0306c0 <sst_object_create>
        return PSA_PS_ERROR_INVALID_ARGUMENT;
 c031dba:	2008      	movs	r0, #8
}
 c031dbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 c031dc0:	4770      	bx	lr
        return PSA_PS_ERROR_FLAGS_NOT_SUPPORTED;
 c031dc2:	2002      	movs	r0, #2
 c031dc4:	e7fa      	b.n	c031dbc <tfm_sst_set+0x22>

0c031dc6 <tfm_sst_get>:

psa_ps_status_t tfm_sst_get(int32_t client_id,
                            psa_ps_uid_t uid,
                            uint32_t data_offset,
                            uint32_t data_length)
{
 c031dc6:	b410      	push	{r4}
 c031dc8:	4619      	mov	r1, r3
 c031dca:	4604      	mov	r4, r0
 c031dcc:	4610      	mov	r0, r2
 c031dce:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
    /* Check that the UID is valid */
    if (uid == TFM_SST_INVALID_UID) {
 c031dd2:	ea50 0c01 	orrs.w	ip, r0, r1
 c031dd6:	d005      	beq.n	c031de4 <tfm_sst_get+0x1e>
        return PSA_PS_ERROR_INVALID_ARGUMENT;
    }

    /* Read the object data from the object system */
    return sst_object_read(uid, client_id, data_offset, data_length);
 c031dd8:	9201      	str	r2, [sp, #4]
 c031dda:	4622      	mov	r2, r4
}
 c031ddc:	f85d 4b04 	ldr.w	r4, [sp], #4
    return sst_object_read(uid, client_id, data_offset, data_length);
 c031de0:	f7fe bc46 	b.w	c030670 <sst_object_read>
}
 c031de4:	2008      	movs	r0, #8
 c031de6:	f85d 4b04 	ldr.w	r4, [sp], #4
 c031dea:	4770      	bx	lr

0c031dec <tfm_sst_get_info>:

psa_ps_status_t tfm_sst_get_info(int32_t client_id, psa_ps_uid_t uid,
                                 struct psa_ps_info_t *p_info)
{
 c031dec:	b410      	push	{r4}
 c031dee:	4619      	mov	r1, r3
 c031df0:	4604      	mov	r4, r0
 c031df2:	4610      	mov	r0, r2
    /* Check that the UID is valid */
    if (uid == TFM_SST_INVALID_UID) {
 c031df4:	ea50 0201 	orrs.w	r2, r0, r1
{
 c031df8:	9b01      	ldr	r3, [sp, #4]
    if (uid == TFM_SST_INVALID_UID) {
 c031dfa:	d004      	beq.n	c031e06 <tfm_sst_get_info+0x1a>
        return PSA_PS_ERROR_INVALID_ARGUMENT;
    }

    /* Get the info struct data from the object system */
    return sst_object_get_info(uid, client_id, p_info);
 c031dfc:	4622      	mov	r2, r4
}
 c031dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
    return sst_object_get_info(uid, client_id, p_info);
 c031e02:	f7fe bcc9 	b.w	c030798 <sst_object_get_info>
}
 c031e06:	2008      	movs	r0, #8
 c031e08:	f85d 4b04 	ldr.w	r4, [sp], #4
 c031e0c:	4770      	bx	lr

0c031e0e <tfm_sst_remove>:

psa_ps_status_t tfm_sst_remove(int32_t client_id, psa_ps_uid_t uid)
{
 c031e0e:	b510      	push	{r4, lr}
 c031e10:	4619      	mov	r1, r3
 c031e12:	4604      	mov	r4, r0
 c031e14:	4610      	mov	r0, r2
    psa_ps_status_t err;

    /* Check that the UID is valid */
    if (uid == TFM_SST_INVALID_UID) {
 c031e16:	ea50 0301 	orrs.w	r3, r0, r1
 c031e1a:	d006      	beq.n	c031e2a <tfm_sst_remove+0x1c>
        return PSA_PS_ERROR_INVALID_ARGUMENT;
    }

    /* Delete the object from the object system */
    err = sst_object_delete(uid, client_id);
 c031e1c:	4622      	mov	r2, r4
 c031e1e:	f7fe fcdb 	bl	c0307d8 <sst_object_delete>
    /* PSA_PS_ERROR_AUTH_FAILED is not supported by psa_ps_remove
     * specification. So, this function returns TFM_SST_ERR_OPERATION_FAILED
     * instead.
     */
    if (err == PSA_PS_ERROR_AUTH_FAILED) {
        return PSA_PS_ERROR_OPERATION_FAILED;
 c031e22:	280a      	cmp	r0, #10
 c031e24:	bf08      	it	eq
 c031e26:	200b      	moveq	r0, #11
    }

    return err;
}
 c031e28:	bd10      	pop	{r4, pc}
        return PSA_PS_ERROR_INVALID_ARGUMENT;
 c031e2a:	2008      	movs	r0, #8
 c031e2c:	e7fc      	b.n	c031e28 <tfm_sst_remove+0x1a>

0c031e2e <tfm_sst_get_support>:
     *
     * SST service does not support the optional extended PSA PS API yet.
     */

    return 0;
}
 c031e2e:	2000      	movs	r0, #0
 c031e30:	4770      	bx	lr
	...

0c031e34 <tfm_psa_ipc_request_handler>:

void tfm_psa_ipc_request_handler(uint32_t svc_ctx[])
{
 c031e34:	b538      	push	{r3, r4, r5, lr}
 c031e36:	4604      	mov	r4, r0
    uint32_t *r0_ptr = svc_ctx;

    /* The only argument to the SVC call is stored in the stacked r0 */
    struct tfm_sfn_req_s *desc_ptr = (struct tfm_sfn_req_s *) *r0_ptr;
 c031e38:	6800      	ldr	r0, [r0, #0]
    if (desc_ptr->ns_caller) {
 c031e3a:	6901      	ldr	r1, [r0, #16]
 c031e3c:	b141      	cbz	r1, c031e50 <tfm_psa_ipc_request_handler+0x1c>
        if (tfm_secure_lock != 0) {
 c031e3e:	4b06      	ldr	r3, [pc, #24]	; (c031e58 <tfm_psa_ipc_request_handler+0x24>)
 c031e40:	681b      	ldr	r3, [r3, #0]
 c031e42:	b92b      	cbnz	r3, c031e50 <tfm_psa_ipc_request_handler+0x1c>
        *r0_ptr = TFM_ERROR_INVALID_PARAMETER;
        return;
    }

    /* Store SVC return value in stacked r0 */
    *r0_ptr = desc_ptr->sfn((int32_t)desc_ptr->args,
 c031e44:	6845      	ldr	r5, [r0, #4]
 c031e46:	461a      	mov	r2, r3
 c031e48:	6880      	ldr	r0, [r0, #8]
 c031e4a:	47a8      	blx	r5
 c031e4c:	6020      	str	r0, [r4, #0]
                            desc_ptr->ns_caller,
                            0,
                            0);

    return;
}
 c031e4e:	bd38      	pop	{r3, r4, r5, pc}
        *r0_ptr = TFM_ERROR_INVALID_PARAMETER;
 c031e50:	2303      	movs	r3, #3
 c031e52:	6023      	str	r3, [r4, #0]
        return;
 c031e54:	e7fb      	b.n	c031e4e <tfm_psa_ipc_request_handler+0x1a>
 c031e56:	bf00      	nop
 c031e58:	3003f2ac 	.word	0x3003f2ac

0c031e5c <tfm_bitcount>:
int32_t tfm_secure_lock;

int32_t tfm_bitcount(uint32_t n)
{
    uint8_t count = 0;
    while (n) {
 c031e5c:	2300      	movs	r3, #0
 c031e5e:	1c5a      	adds	r2, r3, #1
 c031e60:	b908      	cbnz	r0, c031e66 <tfm_bitcount+0xa>
        count++;
        n &= n-1;
    }
    return (int32_t)count;
}
 c031e62:	b2d8      	uxtb	r0, r3
 c031e64:	4770      	bx	lr
        n &= n-1;
 c031e66:	1e43      	subs	r3, r0, #1
 c031e68:	4018      	ands	r0, r3
 c031e6a:	4613      	mov	r3, r2
 c031e6c:	e7f7      	b.n	c031e5e <tfm_bitcount+0x2>

0c031e6e <tfm_is_one_bit_set>:

bool tfm_is_one_bit_set(uint32_t n)
{
    return ((n && !(n & (n-1))) ? true : false);
 c031e6e:	b120      	cbz	r0, c031e7a <tfm_is_one_bit_set+0xc>
 c031e70:	1e43      	subs	r3, r0, #1
 c031e72:	4203      	tst	r3, r0
 c031e74:	bf0c      	ite	eq
 c031e76:	2001      	moveq	r0, #1
 c031e78:	2000      	movne	r0, #0
}
 c031e7a:	4770      	bx	lr

0c031e7c <check_address_range>:

enum tfm_status_e check_address_range(const void *p, size_t s,
                                      uintptr_t region_start,
                                      uintptr_t region_limit)
{
 c031e7c:	b510      	push	{r4, lr}
    int32_t range_in_region;

    /* Check for overflow in the range parameters */
    if ((uintptr_t)p > UINTPTR_MAX - s) {
 c031e7e:	43cc      	mvns	r4, r1
 c031e80:	4284      	cmp	r4, r0
 c031e82:	d308      	bcc.n	c031e96 <check_address_range+0x1a>
    }

    /* We trust the region parameters, and don't check for overflow */

    /* Calculate the result */
    range_in_region = ((uintptr_t)p >= region_start) &&
 c031e84:	4290      	cmp	r0, r2
 c031e86:	d306      	bcc.n	c031e96 <check_address_range+0x1a>
        ((uintptr_t)((char *) p + s - 1) <= region_limit);
 c031e88:	3901      	subs	r1, #1
 c031e8a:	4408      	add	r0, r1
    if (range_in_region) {
        return TFM_SUCCESS;
 c031e8c:	4298      	cmp	r0, r3
 c031e8e:	bf8c      	ite	hi
 c031e90:	201f      	movhi	r0, #31
 c031e92:	2000      	movls	r0, #0
    } else {
        return TFM_ERROR_GENERIC;
    }
}
 c031e94:	bd10      	pop	{r4, pc}
        return TFM_ERROR_GENERIC;
 c031e96:	201f      	movs	r0, #31
 c031e98:	e7fc      	b.n	c031e94 <check_address_range+0x18>
	...

0c031e9c <tfm_sst_remove_ipc>:
    }
    return PSA_SUCCESS;
}

static psa_status_t tfm_sst_remove_ipc(void)
{
 c031e9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int32_t client_id;
    size_t in_size, out_size, num = 0;
    psa_ps_status_t err;

    client_id = msg.client_id;
    in_size = msg.in_size[0];
 c031e9e:	4c10      	ldr	r4, [pc, #64]	; (c031ee0 <tfm_sst_remove_ipc+0x44>)
    out_size = msg.out_size[0];
    if (in_size != sizeof(psa_ps_uid_t) ||
 c031ea0:	6923      	ldr	r3, [r4, #16]
 c031ea2:	2b08      	cmp	r3, #8
 c031ea4:	d002      	beq.n	c031eac <tfm_sst_remove_ipc+0x10>
        out_size != sizeof(psa_ps_status_t)) {
        /* The size of one of the arguments is incorrect */
        return PSA_PS_ERROR_INVALID_ARGUMENT;
 c031ea6:	2008      	movs	r0, #8
    }

    err = tfm_sst_remove(client_id, uid);
    psa_write(msg.handle, 0, &err, out_size);
    return PSA_SUCCESS;
}
 c031ea8:	b004      	add	sp, #16
 c031eaa:	bd70      	pop	{r4, r5, r6, pc}
    if (in_size != sizeof(psa_ps_uid_t) ||
 c031eac:	6a25      	ldr	r5, [r4, #32]
 c031eae:	2d04      	cmp	r5, #4
 c031eb0:	d1f9      	bne.n	c031ea6 <tfm_sst_remove_ipc+0xa>
    num = psa_read(msg.handle, 0, &uid, in_size);
 c031eb2:	aa02      	add	r2, sp, #8
 c031eb4:	2100      	movs	r1, #0
 c031eb6:	6860      	ldr	r0, [r4, #4]
    client_id = msg.client_id;
 c031eb8:	68a6      	ldr	r6, [r4, #8]
    num = psa_read(msg.handle, 0, &uid, in_size);
 c031eba:	f7e5 fafd 	bl	c0174b8 <psa_read>
    if (num != in_size) {
 c031ebe:	2808      	cmp	r0, #8
 c031ec0:	d1f1      	bne.n	c031ea6 <tfm_sst_remove_ipc+0xa>
    err = tfm_sst_remove(client_id, uid);
 c031ec2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c031ec6:	4630      	mov	r0, r6
 c031ec8:	f7ff ffa1 	bl	c031e0e <tfm_sst_remove>
 c031ecc:	aa04      	add	r2, sp, #16
 c031ece:	f842 0d0c 	str.w	r0, [r2, #-12]!
    psa_write(msg.handle, 0, &err, out_size);
 c031ed2:	462b      	mov	r3, r5
 c031ed4:	6860      	ldr	r0, [r4, #4]
 c031ed6:	2100      	movs	r1, #0
 c031ed8:	f7e5 faf2 	bl	c0174c0 <psa_write>
    return PSA_SUCCESS;
 c031edc:	2000      	movs	r0, #0
 c031ede:	e7e3      	b.n	c031ea8 <tfm_sst_remove_ipc+0xc>
 c031ee0:	3003f23c 	.word	0x3003f23c

0c031ee4 <tfm_sst_get_info_ipc>:
{
 c031ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    in_size = msg.in_size[0];
 c031ee8:	4c18      	ldr	r4, [pc, #96]	; (c031f4c <tfm_sst_get_info_ipc+0x68>)
{
 c031eea:	b088      	sub	sp, #32
    if (in_size != sizeof(psa_ps_uid_t) ||
 c031eec:	6923      	ldr	r3, [r4, #16]
 c031eee:	2b08      	cmp	r3, #8
 c031ef0:	d003      	beq.n	c031efa <tfm_sst_get_info_ipc+0x16>
        return PSA_PS_ERROR_INVALID_ARGUMENT;
 c031ef2:	2008      	movs	r0, #8
}
 c031ef4:	b008      	add	sp, #32
 c031ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (in_size != sizeof(psa_ps_uid_t) ||
 c031efa:	6a25      	ldr	r5, [r4, #32]
 c031efc:	2d04      	cmp	r5, #4
 c031efe:	d1f8      	bne.n	c031ef2 <tfm_sst_get_info_ipc+0xe>
        out_size[0] != sizeof(psa_ps_status_t) ||
 c031f00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 c031f02:	2b08      	cmp	r3, #8
 c031f04:	d1f5      	bne.n	c031ef2 <tfm_sst_get_info_ipc+0xe>
    num = psa_read(msg.handle, 0, &uid, in_size);
 c031f06:	aa04      	add	r2, sp, #16
 c031f08:	2100      	movs	r1, #0
 c031f0a:	6860      	ldr	r0, [r4, #4]
    client_id = msg.client_id;
 c031f0c:	f8d4 8008 	ldr.w	r8, [r4, #8]
    num = psa_read(msg.handle, 0, &uid, in_size);
 c031f10:	f7e5 fad2 	bl	c0174b8 <psa_read>
    if (num != in_size) {
 c031f14:	2808      	cmp	r0, #8
    num = psa_read(msg.handle, 0, &uid, in_size);
 c031f16:	4607      	mov	r7, r0
    if (num != in_size) {
 c031f18:	d1eb      	bne.n	c031ef2 <tfm_sst_get_info_ipc+0xe>
    err = tfm_sst_get_info(client_id, uid, &info);
 c031f1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 c031f1e:	ae06      	add	r6, sp, #24
 c031f20:	9600      	str	r6, [sp, #0]
 c031f22:	4640      	mov	r0, r8
 c031f24:	f7ff ff62 	bl	c031dec <tfm_sst_get_info>
 c031f28:	aa08      	add	r2, sp, #32
 c031f2a:	f842 0d14 	str.w	r0, [r2, #-20]!
    psa_write(msg.handle, 0, &err, out_size[0]);
 c031f2e:	462b      	mov	r3, r5
 c031f30:	2100      	movs	r1, #0
 c031f32:	6860      	ldr	r0, [r4, #4]
 c031f34:	f7e5 fac4 	bl	c0174c0 <psa_write>
    if (err == PSA_PS_SUCCESS) {
 c031f38:	9d03      	ldr	r5, [sp, #12]
 c031f3a:	b92d      	cbnz	r5, c031f48 <tfm_sst_get_info_ipc+0x64>
        psa_write(msg.handle, 1, &info, out_size[1]);
 c031f3c:	463b      	mov	r3, r7
 c031f3e:	4632      	mov	r2, r6
 c031f40:	2101      	movs	r1, #1
 c031f42:	6860      	ldr	r0, [r4, #4]
 c031f44:	f7e5 fabc 	bl	c0174c0 <psa_write>
    return PSA_SUCCESS;
 c031f48:	2000      	movs	r0, #0
 c031f4a:	e7d3      	b.n	c031ef4 <tfm_sst_get_info_ipc+0x10>
 c031f4c:	3003f23c 	.word	0x3003f23c

0c031f50 <tfm_sst_get_ipc>:
{
 c031f50:	b5f0      	push	{r4, r5, r6, r7, lr}
    in_size[0] = msg.in_size[0];
 c031f52:	4c19      	ldr	r4, [pc, #100]	; (c031fb8 <tfm_sst_get_ipc+0x68>)
{
 c031f54:	b087      	sub	sp, #28
    if (in_size[0] != sizeof(psa_ps_uid_t) ||
 c031f56:	6923      	ldr	r3, [r4, #16]
 c031f58:	2b08      	cmp	r3, #8
 c031f5a:	d002      	beq.n	c031f62 <tfm_sst_get_ipc+0x12>
        return PSA_PS_ERROR_INVALID_ARGUMENT;
 c031f5c:	2008      	movs	r0, #8
}
 c031f5e:	b007      	add	sp, #28
 c031f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (in_size[0] != sizeof(psa_ps_uid_t) ||
 c031f62:	6962      	ldr	r2, [r4, #20]
 c031f64:	2a04      	cmp	r2, #4
 c031f66:	d1f9      	bne.n	c031f5c <tfm_sst_get_ipc+0xc>
        in_size[1] != sizeof(uint32_t) ||
 c031f68:	6a25      	ldr	r5, [r4, #32]
 c031f6a:	2d04      	cmp	r5, #4
 c031f6c:	d1f6      	bne.n	c031f5c <tfm_sst_get_ipc+0xc>
    num = psa_read(msg.handle, 0, &uid, in_size[0]);
 c031f6e:	aa04      	add	r2, sp, #16
 c031f70:	2100      	movs	r1, #0
 c031f72:	6860      	ldr	r0, [r4, #4]
    client_id = msg.client_id;
 c031f74:	68a6      	ldr	r6, [r4, #8]
    out_size[1] = msg.out_size[1];
 c031f76:	6a67      	ldr	r7, [r4, #36]	; 0x24
    num = psa_read(msg.handle, 0, &uid, in_size[0]);
 c031f78:	f7e5 fa9e 	bl	c0174b8 <psa_read>
    if (num != in_size[0]) {
 c031f7c:	2808      	cmp	r0, #8
 c031f7e:	d1ed      	bne.n	c031f5c <tfm_sst_get_ipc+0xc>
    num = psa_read(msg.handle, 1, &data_offset, in_size[1]);
 c031f80:	462b      	mov	r3, r5
 c031f82:	aa02      	add	r2, sp, #8
 c031f84:	2101      	movs	r1, #1
 c031f86:	6860      	ldr	r0, [r4, #4]
 c031f88:	f7e5 fa96 	bl	c0174b8 <psa_read>
    if (num != in_size[1]) {
 c031f8c:	2804      	cmp	r0, #4
    num = psa_read(msg.handle, 1, &data_offset, in_size[1]);
 c031f8e:	4605      	mov	r5, r0
    if (num != in_size[1]) {
 c031f90:	d1e4      	bne.n	c031f5c <tfm_sst_get_ipc+0xc>
    err = tfm_sst_get(client_id, uid, data_offset, out_size[1]);
 c031f92:	9b02      	ldr	r3, [sp, #8]
 c031f94:	9701      	str	r7, [sp, #4]
 c031f96:	9300      	str	r3, [sp, #0]
 c031f98:	4630      	mov	r0, r6
 c031f9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 c031f9e:	f7ff ff12 	bl	c031dc6 <tfm_sst_get>
 c031fa2:	aa06      	add	r2, sp, #24
 c031fa4:	f842 0d0c 	str.w	r0, [r2, #-12]!
    psa_write(msg.handle, 0, &err, out_size[0]);
 c031fa8:	462b      	mov	r3, r5
 c031faa:	6860      	ldr	r0, [r4, #4]
 c031fac:	2100      	movs	r1, #0
 c031fae:	f7e5 fa87 	bl	c0174c0 <psa_write>
    return PSA_SUCCESS;
 c031fb2:	2000      	movs	r0, #0
 c031fb4:	e7d3      	b.n	c031f5e <tfm_sst_get_ipc+0xe>
 c031fb6:	bf00      	nop
 c031fb8:	3003f23c 	.word	0x3003f23c

0c031fbc <tfm_sst_set_ipc>:
{
 c031fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    in_size[0] = msg.in_size[0];
 c031fbe:	4c19      	ldr	r4, [pc, #100]	; (c032024 <tfm_sst_set_ipc+0x68>)
{
 c031fc0:	b087      	sub	sp, #28
    if (in_size[0] != sizeof(psa_ps_uid_t) ||
 c031fc2:	6923      	ldr	r3, [r4, #16]
 c031fc4:	2b08      	cmp	r3, #8
 c031fc6:	d002      	beq.n	c031fce <tfm_sst_set_ipc+0x12>
        return PSA_PS_ERROR_INVALID_ARGUMENT;
 c031fc8:	2008      	movs	r0, #8
}
 c031fca:	b007      	add	sp, #28
 c031fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (in_size[0] != sizeof(psa_ps_uid_t) ||
 c031fce:	69a2      	ldr	r2, [r4, #24]
 c031fd0:	2a04      	cmp	r2, #4
 c031fd2:	d1f9      	bne.n	c031fc8 <tfm_sst_set_ipc+0xc>
        in_size[2] != sizeof(psa_ps_create_flags_t) ||
 c031fd4:	6a25      	ldr	r5, [r4, #32]
 c031fd6:	2d04      	cmp	r5, #4
 c031fd8:	d1f6      	bne.n	c031fc8 <tfm_sst_set_ipc+0xc>
    num = psa_read(msg.handle, 0, &uid, in_size[0]);
 c031fda:	aa04      	add	r2, sp, #16
 c031fdc:	2100      	movs	r1, #0
 c031fde:	6860      	ldr	r0, [r4, #4]
    client_id = msg.client_id;
 c031fe0:	68a6      	ldr	r6, [r4, #8]
    in_size[1] = msg.in_size[1];
 c031fe2:	6967      	ldr	r7, [r4, #20]
    num = psa_read(msg.handle, 0, &uid, in_size[0]);
 c031fe4:	f7e5 fa68 	bl	c0174b8 <psa_read>
    if (num != in_size[0]) {
 c031fe8:	2808      	cmp	r0, #8
 c031fea:	d1ed      	bne.n	c031fc8 <tfm_sst_set_ipc+0xc>
    num = psa_read(msg.handle, 2, &create_flags, in_size[2]);
 c031fec:	462b      	mov	r3, r5
 c031fee:	aa02      	add	r2, sp, #8
 c031ff0:	2102      	movs	r1, #2
 c031ff2:	6860      	ldr	r0, [r4, #4]
 c031ff4:	f7e5 fa60 	bl	c0174b8 <psa_read>
    if (num != in_size[2]) {
 c031ff8:	2804      	cmp	r0, #4
    num = psa_read(msg.handle, 2, &create_flags, in_size[2]);
 c031ffa:	4605      	mov	r5, r0
    if (num != in_size[2]) {
 c031ffc:	d1e4      	bne.n	c031fc8 <tfm_sst_set_ipc+0xc>
    err = tfm_sst_set(client_id, uid, in_size[1], create_flags);
 c031ffe:	9b02      	ldr	r3, [sp, #8]
 c032000:	4630      	mov	r0, r6
 c032002:	e9cd 7300 	strd	r7, r3, [sp]
 c032006:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 c03200a:	f7ff fec6 	bl	c031d9a <tfm_sst_set>
 c03200e:	aa06      	add	r2, sp, #24
 c032010:	f842 0d0c 	str.w	r0, [r2, #-12]!
    psa_write(msg.handle, 0, &err, out_size);
 c032014:	462b      	mov	r3, r5
 c032016:	6860      	ldr	r0, [r4, #4]
 c032018:	2100      	movs	r1, #0
 c03201a:	f7e5 fa51 	bl	c0174c0 <psa_write>
    return PSA_SUCCESS;
 c03201e:	2000      	movs	r0, #0
 c032020:	e7d3      	b.n	c031fca <tfm_sst_set_ipc+0xe>
 c032022:	bf00      	nop
 c032024:	3003f23c 	.word	0x3003f23c

0c032028 <tfm_sst_get_support_ipc>:

static psa_status_t tfm_sst_get_support_ipc(void)
{
 c032028:	b537      	push	{r0, r1, r2, r4, r5, lr}
    size_t out_size;
    uint32_t support_flags;

    out_size = msg.out_size[0];
 c03202a:	4c09      	ldr	r4, [pc, #36]	; (c032050 <tfm_sst_get_support_ipc+0x28>)
    if (out_size != sizeof(support_flags)) {
 c03202c:	6a25      	ldr	r5, [r4, #32]
 c03202e:	2d04      	cmp	r5, #4
 c032030:	d10c      	bne.n	c03204c <tfm_sst_get_support_ipc+0x24>
        /* The output argument size is incorrect */
        return PSA_PS_ERROR_INVALID_ARGUMENT;
    }

    support_flags = tfm_sst_get_support();
 c032032:	f7ff fefc 	bl	c031e2e <tfm_sst_get_support>
 c032036:	aa02      	add	r2, sp, #8
 c032038:	f842 0d04 	str.w	r0, [r2, #-4]!
    psa_write(msg.handle, 0, &support_flags, out_size);
 c03203c:	462b      	mov	r3, r5
 c03203e:	6860      	ldr	r0, [r4, #4]
 c032040:	2100      	movs	r1, #0
 c032042:	f7e5 fa3d 	bl	c0174c0 <psa_write>
 c032046:	2000      	movs	r0, #0
    return PSA_SUCCESS;
}
 c032048:	b003      	add	sp, #12
 c03204a:	bd30      	pop	{r4, r5, pc}
        return PSA_PS_ERROR_INVALID_ARGUMENT;
 c03204c:	2008      	movs	r0, #8
 c03204e:	e7fb      	b.n	c032048 <tfm_sst_get_support_ipc+0x20>
 c032050:	3003f23c 	.word	0x3003f23c

0c032054 <ps_signal_handle>:
    while (1)
        ;
}

static void ps_signal_handle(psa_signal_t signal, sst_func_t pfn)
{
 c032054:	b538      	push	{r3, r4, r5, lr}
    psa_status_t status;

    status = psa_get(signal, &msg);
 c032056:	4c0a      	ldr	r4, [pc, #40]	; (c032080 <ps_signal_handle+0x2c>)
{
 c032058:	460d      	mov	r5, r1
    status = psa_get(signal, &msg);
 c03205a:	4621      	mov	r1, r4
 c03205c:	f7e5 fa28 	bl	c0174b0 <psa_get>
    switch (msg.type) {
 c032060:	6823      	ldr	r3, [r4, #0]
 c032062:	1c99      	adds	r1, r3, #2
 c032064:	db02      	blt.n	c03206c <ps_signal_handle+0x18>
 c032066:	1c5a      	adds	r2, r3, #1
 c032068:	dd01      	ble.n	c03206e <ps_signal_handle+0x1a>
 c03206a:	b133      	cbz	r3, c03207a <ps_signal_handle+0x26>
 c03206c:	e7fe      	b.n	c03206c <ps_signal_handle+0x18>
    case PSA_IPC_CONNECT:
        psa_reply(msg.handle, PSA_SUCCESS);
 c03206e:	2100      	movs	r1, #0
        break;
    case PSA_IPC_CALL:
        status = pfn();
        psa_reply(msg.handle, status);
 c032070:	6860      	ldr	r0, [r4, #4]
        psa_reply(msg.handle, PSA_SUCCESS);
        break;
    default:
        tfm_abort();
    }
}
 c032072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        psa_reply(msg.handle, status);
 c032076:	f7e5 ba25 	b.w	c0174c4 <psa_reply>
        status = pfn();
 c03207a:	47a8      	blx	r5
        psa_reply(msg.handle, status);
 c03207c:	4601      	mov	r1, r0
 c03207e:	e7f7      	b.n	c032070 <ps_signal_handle+0x1c>
 c032080:	3003f23c 	.word	0x3003f23c

0c032084 <tfm_sst_req_mngr_init>:
#endif /* !defined(TFM_PSA_API) */

psa_ps_status_t tfm_sst_req_mngr_init(void)
{
 c032084:	b570      	push	{r4, r5, r6, lr}
#ifdef TFM_PSA_API
    psa_signal_t signals = 0;

    if (tfm_sst_init() != PSA_PS_SUCCESS) {
 c032086:	f7ff fe7c 	bl	c031d82 <tfm_sst_init>
 c03208a:	b978      	cbnz	r0, c0320ac <tfm_sst_req_mngr_init+0x28>
        } else if (signals & TFM_SST_GET_INFO_SIG) {
            ps_signal_handle(TFM_SST_GET_INFO_SIG, tfm_sst_get_info_ipc);
        } else if (signals & TFM_SST_REMOVE_SIG) {
            ps_signal_handle(TFM_SST_REMOVE_SIG, tfm_sst_remove_ipc);
        } else if (signals & TFM_SST_GET_SUPPORT_SIG) {
            ps_signal_handle(TFM_SST_GET_SUPPORT_SIG, tfm_sst_get_support_ipc);
 c03208c:	4c13      	ldr	r4, [pc, #76]	; (c0320dc <tfm_sst_req_mngr_init+0x58>)
            ps_signal_handle(TFM_SST_REMOVE_SIG, tfm_sst_remove_ipc);
 c03208e:	4d14      	ldr	r5, [pc, #80]	; (c0320e0 <tfm_sst_req_mngr_init+0x5c>)
            ps_signal_handle(TFM_SST_GET_INFO_SIG, tfm_sst_get_info_ipc);
 c032090:	4e14      	ldr	r6, [pc, #80]	; (c0320e4 <tfm_sst_req_mngr_init+0x60>)
        signals = psa_wait(PSA_WAIT_ANY, PSA_BLOCK);
 c032092:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 c032096:	f04f 30ff 	mov.w	r0, #4294967295
 c03209a:	f7e5 fa07 	bl	c0174ac <psa_wait>
        if (signals & TFM_SST_SET_SIG) {
 c03209e:	06c2      	lsls	r2, r0, #27
 c0320a0:	d505      	bpl.n	c0320ae <tfm_sst_req_mngr_init+0x2a>
            ps_signal_handle(TFM_SST_SET_SIG, tfm_sst_set_ipc);
 c0320a2:	2010      	movs	r0, #16
 c0320a4:	4910      	ldr	r1, [pc, #64]	; (c0320e8 <tfm_sst_req_mngr_init+0x64>)
            ps_signal_handle(TFM_SST_GET_SUPPORT_SIG, tfm_sst_get_support_ipc);
 c0320a6:	f7ff ffd5 	bl	c032054 <ps_signal_handle>
 c0320aa:	e7f2      	b.n	c032092 <tfm_sst_req_mngr_init+0xe>
 c0320ac:	e7fe      	b.n	c0320ac <tfm_sst_req_mngr_init+0x28>
        } else if (signals & TFM_SST_GET_SIG) {
 c0320ae:	0683      	lsls	r3, r0, #26
 c0320b0:	d502      	bpl.n	c0320b8 <tfm_sst_req_mngr_init+0x34>
            ps_signal_handle(TFM_SST_GET_SIG, tfm_sst_get_ipc);
 c0320b2:	490e      	ldr	r1, [pc, #56]	; (c0320ec <tfm_sst_req_mngr_init+0x68>)
 c0320b4:	2020      	movs	r0, #32
 c0320b6:	e7f6      	b.n	c0320a6 <tfm_sst_req_mngr_init+0x22>
        } else if (signals & TFM_SST_GET_INFO_SIG) {
 c0320b8:	0641      	lsls	r1, r0, #25
 c0320ba:	d502      	bpl.n	c0320c2 <tfm_sst_req_mngr_init+0x3e>
            ps_signal_handle(TFM_SST_GET_INFO_SIG, tfm_sst_get_info_ipc);
 c0320bc:	4631      	mov	r1, r6
 c0320be:	2040      	movs	r0, #64	; 0x40
 c0320c0:	e7f1      	b.n	c0320a6 <tfm_sst_req_mngr_init+0x22>
        } else if (signals & TFM_SST_REMOVE_SIG) {
 c0320c2:	0602      	lsls	r2, r0, #24
 c0320c4:	d502      	bpl.n	c0320cc <tfm_sst_req_mngr_init+0x48>
            ps_signal_handle(TFM_SST_REMOVE_SIG, tfm_sst_remove_ipc);
 c0320c6:	4629      	mov	r1, r5
 c0320c8:	2080      	movs	r0, #128	; 0x80
 c0320ca:	e7ec      	b.n	c0320a6 <tfm_sst_req_mngr_init+0x22>
        } else if (signals & TFM_SST_GET_SUPPORT_SIG) {
 c0320cc:	05c3      	lsls	r3, r0, #23
 c0320ce:	d503      	bpl.n	c0320d8 <tfm_sst_req_mngr_init+0x54>
            ps_signal_handle(TFM_SST_GET_SUPPORT_SIG, tfm_sst_get_support_ipc);
 c0320d0:	4621      	mov	r1, r4
 c0320d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 c0320d6:	e7e6      	b.n	c0320a6 <tfm_sst_req_mngr_init+0x22>
 c0320d8:	e7fe      	b.n	c0320d8 <tfm_sst_req_mngr_init+0x54>
 c0320da:	bf00      	nop
 c0320dc:	0c032029 	.word	0x0c032029
 c0320e0:	0c031e9d 	.word	0x0c031e9d
 c0320e4:	0c031ee5 	.word	0x0c031ee5
 c0320e8:	0c031fbd 	.word	0x0c031fbd
 c0320ec:	0c031f51 	.word	0x0c031f51

0c0320f0 <sst_req_mngr_read_asset_data>:

psa_ps_status_t sst_req_mngr_read_asset_data(uint8_t *out_data, uint32_t size)
{
#ifdef TFM_PSA_API
  size_t num = 0;
  num = psa_read(msg.handle, 1, out_data, size);
 c0320f0:	4602      	mov	r2, r0
 c0320f2:	4806      	ldr	r0, [pc, #24]	; (c03210c <sst_req_mngr_read_asset_data+0x1c>)
{
 c0320f4:	b510      	push	{r4, lr}
  num = psa_read(msg.handle, 1, out_data, size);
 c0320f6:	460b      	mov	r3, r1
{
 c0320f8:	460c      	mov	r4, r1
  num = psa_read(msg.handle, 1, out_data, size);
 c0320fa:	6840      	ldr	r0, [r0, #4]
 c0320fc:	2101      	movs	r1, #1
 c0320fe:	f7e5 f9db 	bl	c0174b8 <psa_read>
  }
#else /* TFM_PSA_API */
  (void)tfm_memcpy(out_data, p_data, size);
#endif
  return PSA_PS_SUCCESS;
}
 c032102:	4284      	cmp	r4, r0
 c032104:	bf14      	ite	ne
 c032106:	2008      	movne	r0, #8
 c032108:	2000      	moveq	r0, #0
 c03210a:	bd10      	pop	{r4, pc}
 c03210c:	3003f23c 	.word	0x3003f23c

0c032110 <sst_req_mngr_write_asset_data>:

void sst_req_mngr_write_asset_data(const uint8_t *in_data,
                                   uint32_t size)
{
#ifdef TFM_PSA_API
  psa_write(msg.handle, 1, in_data, size);
 c032110:	4602      	mov	r2, r0
 c032112:	4803      	ldr	r0, [pc, #12]	; (c032120 <sst_req_mngr_write_asset_data+0x10>)
 c032114:	460b      	mov	r3, r1
 c032116:	6840      	ldr	r0, [r0, #4]
 c032118:	2101      	movs	r1, #1
 c03211a:	f7e5 b9d1 	b.w	c0174c0 <psa_write>
 c03211e:	bf00      	nop
 c032120:	3003f23c 	.word	0x3003f23c

0c032124 <tfm_svcall_psa_framework_version>:
/************************* SVC handler for PSA Client APIs *******************/

uint32_t tfm_svcall_psa_framework_version(void)
{
    return PSA_FRAMEWORK_VERSION;
}
 c032124:	f44f 7080 	mov.w	r0, #256	; 0x100
 c032128:	4770      	bx	lr
	...

0c03212c <tfm_svcall_psa_version>:

uint32_t tfm_svcall_psa_version(uint32_t *args, int32_t ns_caller)
{
 c03212c:	b510      	push	{r4, lr}
 c03212e:	460c      	mov	r4, r1
    uint32_t sid;
    struct tfm_spm_service_t *service;

    TFM_ASSERT(args != NULL);
 c032130:	b928      	cbnz	r0, c03213e <tfm_svcall_psa_version+0x12>
 c032132:	2231      	movs	r2, #49	; 0x31
 c032134:	4907      	ldr	r1, [pc, #28]	; (c032154 <tfm_svcall_psa_version+0x28>)
 c032136:	4808      	ldr	r0, [pc, #32]	; (c032158 <tfm_svcall_psa_version+0x2c>)
 c032138:	f7e3 f966 	bl	c015408 <iprintf>
 c03213c:	e7fe      	b.n	c03213c <tfm_svcall_psa_version+0x10>
    sid = (uint32_t)args[0];
    /*
     * It should return PSA_VERSION_NONE if the RoT Service is not
     * implemented.
     */
    service = tfm_spm_get_service_by_sid(sid);
 c03213e:	6800      	ldr	r0, [r0, #0]
 c032140:	f7fd fa54 	bl	c02f5ec <tfm_spm_get_service_by_sid>
    if (!service) {
 c032144:	b120      	cbz	r0, c032150 <tfm_svcall_psa_version+0x24>
 c032146:	6803      	ldr	r3, [r0, #0]

    /*
     * It should return PSA_VERSION_NONE if the caller is not authorized
     * to access the RoT Service.
     */
    if (ns_caller && !service->service_db->non_secure_client) {
 c032148:	b10c      	cbz	r4, c03214e <tfm_svcall_psa_version+0x22>
 c03214a:	7c18      	ldrb	r0, [r3, #16]
 c03214c:	b100      	cbz	r0, c032150 <tfm_svcall_psa_version+0x24>
        return PSA_VERSION_NONE;
    }

    return service->service_db->minor_version;
 c03214e:	6958      	ldr	r0, [r3, #20]
}
 c032150:	bd10      	pop	{r4, pc}
 c032152:	bf00      	nop
 c032154:	0c0358af 	.word	0x0c0358af
 c032158:	0c0357d2 	.word	0x0c0357d2

0c03215c <tfm_svcall_psa_connect>:

psa_handle_t tfm_svcall_psa_connect(uint32_t *args, int32_t ns_caller)
{
 c03215c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c032160:	460f      	mov	r7, r1
 c032162:	b086      	sub	sp, #24
    uint32_t minor_version;
    struct tfm_spm_service_t *service;
    struct tfm_msg_body_t *msg;
    psa_handle_t connect_handle;

    TFM_ASSERT(args != NULL);
 c032164:	b928      	cbnz	r0, c032172 <tfm_svcall_psa_connect+0x16>
 c032166:	224f      	movs	r2, #79	; 0x4f
 c032168:	491e      	ldr	r1, [pc, #120]	; (c0321e4 <tfm_svcall_psa_connect+0x88>)
 c03216a:	481f      	ldr	r0, [pc, #124]	; (c0321e8 <tfm_svcall_psa_connect+0x8c>)
 c03216c:	f7e3 f94c 	bl	c015408 <iprintf>
 c032170:	e7fe      	b.n	c032170 <tfm_svcall_psa_connect+0x14>
    sid = (uint32_t)args[0];
    minor_version = (uint32_t)args[1];

    /* It is a fatal error if the RoT Service does not exist on the platform */
    service = tfm_spm_get_service_by_sid(sid);
 c032172:	e9d0 0400 	ldrd	r0, r4, [r0]
 c032176:	f7fd fa39 	bl	c02f5ec <tfm_spm_get_service_by_sid>
    if (!service) {
 c03217a:	4605      	mov	r5, r0
 c03217c:	b908      	cbnz	r0, c032182 <tfm_svcall_psa_connect+0x26>
        tfm_panic();
 c03217e:	f000 fcb7 	bl	c032af0 <tfm_panic>

    /*
     * Create connection handle here since it is possible to return the error
     * code to client when creation fails.
     */
    connect_handle = tfm_spm_create_conn_handle(service);
 c032182:	4628      	mov	r0, r5
 c032184:	f7fd f9a4 	bl	c02f4d0 <tfm_spm_create_conn_handle>
    if (connect_handle == PSA_NULL_HANDLE) {
 c032188:	4606      	mov	r6, r0
 c03218a:	b920      	cbnz	r0, c032196 <tfm_svcall_psa_connect+0x3a>
        return PSA_ERROR_CONNECTION_BUSY;
 c03218c:	f06f 0082 	mvn.w	r0, #130	; 0x82
     * and scheduler triggered
     */
    tfm_spm_send_event(service, msg);

    return PSA_SUCCESS;
}
 c032190:	b006      	add	sp, #24
 c032192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (ns_caller && !service->service_db->non_secure_client) {
 c032196:	b127      	cbz	r7, c0321a2 <tfm_svcall_psa_connect+0x46>
 c032198:	682b      	ldr	r3, [r5, #0]
 c03219a:	7c1b      	ldrb	r3, [r3, #16]
 c03219c:	b90b      	cbnz	r3, c0321a2 <tfm_svcall_psa_connect+0x46>
        tfm_panic();
 c03219e:	f000 fca7 	bl	c032af0 <tfm_panic>
    if (tfm_spm_check_client_version(service, minor_version) != IPC_SUCCESS) {
 c0321a2:	4621      	mov	r1, r4
 c0321a4:	4628      	mov	r0, r5
 c0321a6:	f7fd fa5d 	bl	c02f664 <tfm_spm_check_client_version>
 c0321aa:	b108      	cbz	r0, c0321b0 <tfm_svcall_psa_connect+0x54>
        tfm_panic();
 c0321ac:	f000 fca0 	bl	c032af0 <tfm_panic>
    msg = tfm_spm_get_msg_buffer_from_conn_handle(connect_handle);
 c0321b0:	4630      	mov	r0, r6
 c0321b2:	f7fd fa79 	bl	c02f6a8 <tfm_spm_get_msg_buffer_from_conn_handle>
    if (!msg) {
 c0321b6:	4680      	mov	r8, r0
 c0321b8:	2800      	cmp	r0, #0
 c0321ba:	d0e7      	beq.n	c03218c <tfm_svcall_psa_connect+0x30>
    tfm_spm_fill_msg(msg, service, connect_handle, PSA_IPC_CONNECT,
 c0321bc:	2400      	movs	r4, #0
 c0321be:	f04f 33ff 	mov.w	r3, #4294967295
 c0321c2:	4632      	mov	r2, r6
 c0321c4:	4629      	mov	r1, r5
 c0321c6:	e9cd 4404 	strd	r4, r4, [sp, #16]
 c0321ca:	e9cd 4402 	strd	r4, r4, [sp, #8]
 c0321ce:	e9cd 7400 	strd	r7, r4, [sp]
 c0321d2:	f7fd fae1 	bl	c02f798 <tfm_spm_fill_msg>
    tfm_spm_send_event(service, msg);
 c0321d6:	4641      	mov	r1, r8
 c0321d8:	4628      	mov	r0, r5
 c0321da:	f7fd fa75 	bl	c02f6c8 <tfm_spm_send_event>
    return PSA_SUCCESS;
 c0321de:	4620      	mov	r0, r4
 c0321e0:	e7d6      	b.n	c032190 <tfm_svcall_psa_connect+0x34>
 c0321e2:	bf00      	nop
 c0321e4:	0c0358c6 	.word	0x0c0358c6
 c0321e8:	0c0357d2 	.word	0x0c0357d2

0c0321ec <tfm_svcall_psa_call>:

psa_status_t tfm_svcall_psa_call(uint32_t *args, int32_t ns_caller, uint32_t lr)
{
 c0321ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0321f0:	460c      	mov	r4, r1
 c0321f2:	b09b      	sub	sp, #108	; 0x6c
 c0321f4:	4617      	mov	r7, r2
    int i;
    struct spm_partition_desc_t *partition = NULL;
    uint32_t privileged;
    int32_t type;

    TFM_ASSERT(args != NULL);
 c0321f6:	4605      	mov	r5, r0
 c0321f8:	b928      	cbnz	r0, c032206 <tfm_svcall_psa_call+0x1a>
 c0321fa:	2292      	movs	r2, #146	; 0x92
 c0321fc:	4967      	ldr	r1, [pc, #412]	; (c03239c <tfm_svcall_psa_call+0x1b0>)
 c0321fe:	4868      	ldr	r0, [pc, #416]	; (c0323a0 <tfm_svcall_psa_call+0x1b4>)
 c032200:	f7e3 f902 	bl	c015408 <iprintf>
 c032204:	e7fe      	b.n	c032204 <tfm_svcall_psa_call+0x18>
    handle = (psa_handle_t)args[0];
 c032206:	6803      	ldr	r3, [r0, #0]
 c032208:	9306      	str	r3, [sp, #24]
    type = (int32_t)args[1];
 c03220a:	6843      	ldr	r3, [r0, #4]

    if (type < 0) {
 c03220c:	2b00      	cmp	r3, #0
    type = (int32_t)args[1];
 c03220e:	9308      	str	r3, [sp, #32]
    if (type < 0) {
 c032210:	da01      	bge.n	c032216 <tfm_svcall_psa_call+0x2a>
        tfm_panic();
 c032212:	f000 fc6d 	bl	c032af0 <tfm_panic>
    }
    partition = tfm_spm_get_running_partition();
 c032216:	f7fd fa9b 	bl	c02f750 <tfm_spm_get_running_partition>
    if (!partition) {
 c03221a:	4606      	mov	r6, r0
 c03221c:	b908      	cbnz	r0, c032222 <tfm_svcall_psa_call+0x36>
        tfm_panic();
 c03221e:	f000 fc67 	bl	c032af0 <tfm_panic>
    }
    privileged = tfm_spm_partition_get_privileged_mode(
 c032222:	6e73      	ldr	r3, [r6, #100]	; 0x64
 c032224:	6858      	ldr	r0, [r3, #4]
 c032226:	f7fd fb77 	bl	c02f918 <tfm_spm_partition_get_privileged_mode>
 c03222a:	4680      	mov	r8, r0
        partition->static_data->partition_flags);

    if (!ns_caller) {
 c03222c:	2c00      	cmp	r4, #0
 c03222e:	d177      	bne.n	c032320 <tfm_svcall_psa_call+0x134>
        inptr = (psa_invec *)args[2];
        in_num = (size_t)args[3];
 c032230:	e9d5 9602 	ldrd	r9, r6, [r5, #8]
         * - if FP is used and FPCCR_S.TS is 0, 5th and 6th parameters are at
         *   26th and 27th position counting from SP;
         * - if FP is used and FPCCR_S.TS is 1, 5th and 6th parameters are at
         *   42th and 43th position counting from SP.
         */
         if (!is_stack_alloc_fp_space(lr)) {
 c032234:	06fa      	lsls	r2, r7, #27
 c032236:	d56a      	bpl.n	c03230e <tfm_svcall_psa_call+0x122>
            outptr = (psa_outvec *)args[8];
            out_num = (size_t)args[9];
 c032238:	e9d5 7508 	ldrd	r7, r5, [r5, #32]
        outptr = (psa_outvec *)((psa_invec *)args[3])->base;
        out_num = ((psa_invec *)args[3])->len;
    }

    /* It is a fatal error if in_len + out_len > PSA_MAX_IOVEC. */
    if ((in_num > PSA_MAX_IOVEC) ||
 c03223c:	2e04      	cmp	r6, #4
 c03223e:	d804      	bhi.n	c03224a <tfm_svcall_psa_call+0x5e>
 c032240:	2d04      	cmp	r5, #4
 c032242:	d802      	bhi.n	c03224a <tfm_svcall_psa_call+0x5e>
        (out_num > PSA_MAX_IOVEC) ||
        (in_num + out_num > PSA_MAX_IOVEC)) {
 c032244:	1973      	adds	r3, r6, r5
        (out_num > PSA_MAX_IOVEC) ||
 c032246:	2b04      	cmp	r3, #4
 c032248:	d901      	bls.n	c03224e <tfm_svcall_psa_call+0x62>
        tfm_panic();
 c03224a:	f000 fc51 	bl	c032af0 <tfm_panic>
    }

    /* It is a fatal error if an invalid handle was passed. */
    service = tfm_spm_get_service_by_handle(handle);
 c03224e:	9806      	ldr	r0, [sp, #24]
 c032250:	f7fd f9f4 	bl	c02f63c <tfm_spm_get_service_by_handle>
    if (!service) {
 c032254:	9007      	str	r0, [sp, #28]
 c032256:	b908      	cbnz	r0, c03225c <tfm_svcall_psa_call+0x70>
        /* FixMe: Need to implement one mechanism to resolve this failure. */
        tfm_panic();
 c032258:	f000 fc4a 	bl	c032af0 <tfm_panic>
    /*
     * Read client invecs from the wrap input vector. It is a fatal error
     * if the memory reference for the wrap input vector is invalid or not
     * readable.
     */
    if (tfm_memory_check(inptr, in_num * sizeof(psa_invec), ns_caller,
 c03225c:	00f3      	lsls	r3, r6, #3
 c03225e:	9309      	str	r3, [sp, #36]	; 0x24
 c032260:	f8cd 8000 	str.w	r8, [sp]
 c032264:	2301      	movs	r3, #1
 c032266:	4622      	mov	r2, r4
 c032268:	00f1      	lsls	r1, r6, #3
 c03226a:	4648      	mov	r0, r9
 c03226c:	f7fd fb3a 	bl	c02f8e4 <tfm_memory_check>
 c032270:	b108      	cbz	r0, c032276 <tfm_svcall_psa_call+0x8a>
        TFM_MEMORY_ACCESS_RO, privileged) != IPC_SUCCESS) {
        tfm_panic();
 c032272:	f000 fc3d 	bl	c032af0 <tfm_panic>
    /*
     * Read client outvecs from the wrap output vector and will update the
     * actual length later. It is a fatal error if the memory reference for
     * the wrap output vector is invalid or not read-write.
     */
    if (tfm_memory_check(outptr, out_num * sizeof(psa_outvec), ns_caller,
 c032276:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
 c03227a:	f8cd 8000 	str.w	r8, [sp]
 c03227e:	2302      	movs	r3, #2
 c032280:	4622      	mov	r2, r4
 c032282:	4651      	mov	r1, sl
 c032284:	4638      	mov	r0, r7
 c032286:	f7fd fb2d 	bl	c02f8e4 <tfm_memory_check>
 c03228a:	b108      	cbz	r0, c032290 <tfm_svcall_psa_call+0xa4>
        TFM_MEMORY_ACCESS_RW, privileged) != IPC_SUCCESS) {
        tfm_panic();
 c03228c:	f000 fc30 	bl	c032af0 <tfm_panic>
    }

    tfm_core_util_memset(invecs, 0, sizeof(invecs));
 c032290:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 c032294:	2220      	movs	r2, #32
 c032296:	2100      	movs	r1, #0
 c032298:	4658      	mov	r0, fp
 c03229a:	f7ff f9e5 	bl	c031668 <tfm_core_util_memset>
    tfm_core_util_memset(outvecs, 0, sizeof(outvecs));
 c03229e:	2220      	movs	r2, #32
 c0322a0:	2100      	movs	r1, #0
 c0322a2:	a812      	add	r0, sp, #72	; 0x48
 c0322a4:	f7ff f9e0 	bl	c031668 <tfm_core_util_memset>

    /* Copy the address out to avoid TOCTOU attacks. */
    tfm_core_util_memcpy(invecs, inptr, in_num * sizeof(psa_invec));
 c0322a8:	4649      	mov	r1, r9
 c0322aa:	00f2      	lsls	r2, r6, #3
 c0322ac:	4658      	mov	r0, fp
 c0322ae:	f7ff f9a5 	bl	c0315fc <tfm_core_util_memcpy>
    tfm_core_util_memcpy(outvecs, outptr, out_num * sizeof(psa_outvec));
 c0322b2:	4652      	mov	r2, sl
 c0322b4:	4639      	mov	r1, r7
 c0322b6:	a812      	add	r0, sp, #72	; 0x48
 c0322b8:	f7ff f9a0 	bl	c0315fc <tfm_core_util_memcpy>

    /*
     * For client input vector, it is a fatal error if the provided payload
     * memory reference was invalid or not readable.
     */
    for (i = 0; i < in_num; i++) {
 c0322bc:	f04f 0900 	mov.w	r9, #0
 c0322c0:	45b1      	cmp	r9, r6
 c0322c2:	d149      	bne.n	c032358 <tfm_svcall_psa_call+0x16c>
    }
    /*
     * For client output vector, it is a fatal error if the provided payload
     * memory reference was invalid or not read-write.
     */
    for (i = 0; i < out_num; i++) {
 c0322c4:	f04f 0900 	mov.w	r9, #0
        if (tfm_memory_check(outvecs[i].base, outvecs[i].len,
 c0322c8:	f10d 0a48 	add.w	sl, sp, #72	; 0x48
    for (i = 0; i < out_num; i++) {
 c0322cc:	45a9      	cmp	r9, r5
 c0322ce:	d154      	bne.n	c03237a <tfm_svcall_psa_call+0x18e>

    /*
     * FixMe: Need to check if the message is unrecognized by the RoT
     * Service or incorrectly formatted.
     */
    msg = tfm_spm_get_msg_buffer_from_conn_handle(handle);
 c0322d0:	9806      	ldr	r0, [sp, #24]
 c0322d2:	f7fd f9e9 	bl	c02f6a8 <tfm_spm_get_msg_buffer_from_conn_handle>
    if (!msg) {
 c0322d6:	4680      	mov	r8, r0
 c0322d8:	b908      	cbnz	r0, c0322de <tfm_svcall_psa_call+0xf2>
        /* FixMe: Need to implement one mechanism to resolve this failure. */
        tfm_panic();
 c0322da:	f000 fc09 	bl	c032af0 <tfm_panic>
    }

    tfm_spm_fill_msg(msg, service, handle, type, ns_caller, invecs,
 c0322de:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 c0322e2:	ab12      	add	r3, sp, #72	; 0x48
 c0322e4:	e9cd 6302 	strd	r6, r3, [sp, #8]
 c0322e8:	4640      	mov	r0, r8
 c0322ea:	e9cd 5704 	strd	r5, r7, [sp, #16]
 c0322ee:	e9cd 4b00 	strd	r4, fp, [sp]
 c0322f2:	9b08      	ldr	r3, [sp, #32]
 c0322f4:	f7fd fa50 	bl	c02f798 <tfm_spm_fill_msg>

    /*
     * Send message and wake up the SP who is waiting on message queue,
     * and scheduler triggered
     */
    if (tfm_spm_send_event(service, msg) != IPC_SUCCESS) {
 c0322f8:	4641      	mov	r1, r8
 c0322fa:	9807      	ldr	r0, [sp, #28]
 c0322fc:	f7fd f9e4 	bl	c02f6c8 <tfm_spm_send_event>
 c032300:	b108      	cbz	r0, c032306 <tfm_svcall_psa_call+0x11a>
        /* FixMe: Need to refine failure process here. */
        tfm_panic();
 c032302:	f000 fbf5 	bl	c032af0 <tfm_panic>
    }
    return PSA_SUCCESS;
}
 c032306:	2000      	movs	r0, #0
 c032308:	b01b      	add	sp, #108	; 0x6c
 c03230a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        } else if (FPU->FPCCR & FPU_FPCCR_TS_Msk) {
 c03230e:	4b25      	ldr	r3, [pc, #148]	; (c0323a4 <tfm_svcall_psa_call+0x1b8>)
 c032310:	685b      	ldr	r3, [r3, #4]
 c032312:	015b      	lsls	r3, r3, #5
            out_num = (size_t)args[43];
 c032314:	bf4c      	ite	mi
 c032316:	e9d5 752a 	ldrdmi	r7, r5, [r5, #168]	; 0xa8
            out_num = (size_t)args[27];
 c03231a:	e9d5 751a 	ldrdpl	r7, r5, [r5, #104]	; 0x68
 c03231e:	e78d      	b.n	c03223c <tfm_svcall_psa_call+0x50>
        if (tfm_memory_check((const void *)args[2], sizeof(uint32_t),
 c032320:	9000      	str	r0, [sp, #0]
 c032322:	2301      	movs	r3, #1
 c032324:	4622      	mov	r2, r4
 c032326:	2104      	movs	r1, #4
 c032328:	68a8      	ldr	r0, [r5, #8]
 c03232a:	f7fd fadb 	bl	c02f8e4 <tfm_memory_check>
 c03232e:	b108      	cbz	r0, c032334 <tfm_svcall_psa_call+0x148>
            tfm_panic();
 c032330:	f000 fbde 	bl	c032af0 <tfm_panic>
        if (tfm_memory_check((const void *)args[3], sizeof(uint32_t),
 c032334:	f8cd 8000 	str.w	r8, [sp]
 c032338:	2301      	movs	r3, #1
 c03233a:	4622      	mov	r2, r4
 c03233c:	2104      	movs	r1, #4
 c03233e:	68e8      	ldr	r0, [r5, #12]
 c032340:	f7fd fad0 	bl	c02f8e4 <tfm_memory_check>
 c032344:	b108      	cbz	r0, c03234a <tfm_svcall_psa_call+0x15e>
            tfm_panic();
 c032346:	f000 fbd3 	bl	c032af0 <tfm_panic>
        inptr = (psa_invec *)((psa_invec *)args[2])->base;
 c03234a:	68ab      	ldr	r3, [r5, #8]
        in_num = ((psa_invec *)args[2])->len;
 c03234c:	e9d3 9600 	ldrd	r9, r6, [r3]
        outptr = (psa_outvec *)((psa_invec *)args[3])->base;
 c032350:	68eb      	ldr	r3, [r5, #12]
        out_num = ((psa_invec *)args[3])->len;
 c032352:	e9d3 7500 	ldrd	r7, r5, [r3]
 c032356:	e771      	b.n	c03223c <tfm_svcall_psa_call+0x50>
        if (tfm_memory_check(invecs[i].base, invecs[i].len, ns_caller,
 c032358:	f8cd 8000 	str.w	r8, [sp]
 c03235c:	eb0b 01c9 	add.w	r1, fp, r9, lsl #3
 c032360:	2301      	movs	r3, #1
 c032362:	4622      	mov	r2, r4
 c032364:	6849      	ldr	r1, [r1, #4]
 c032366:	f85b 0039 	ldr.w	r0, [fp, r9, lsl #3]
 c03236a:	f7fd fabb 	bl	c02f8e4 <tfm_memory_check>
 c03236e:	b108      	cbz	r0, c032374 <tfm_svcall_psa_call+0x188>
            tfm_panic();
 c032370:	f000 fbbe 	bl	c032af0 <tfm_panic>
    for (i = 0; i < in_num; i++) {
 c032374:	f109 0901 	add.w	r9, r9, #1
 c032378:	e7a2      	b.n	c0322c0 <tfm_svcall_psa_call+0xd4>
        if (tfm_memory_check(outvecs[i].base, outvecs[i].len,
 c03237a:	f8cd 8000 	str.w	r8, [sp]
 c03237e:	eb0a 01c9 	add.w	r1, sl, r9, lsl #3
 c032382:	2302      	movs	r3, #2
 c032384:	4622      	mov	r2, r4
 c032386:	6849      	ldr	r1, [r1, #4]
 c032388:	f85a 0039 	ldr.w	r0, [sl, r9, lsl #3]
 c03238c:	f7fd faaa 	bl	c02f8e4 <tfm_memory_check>
 c032390:	b108      	cbz	r0, c032396 <tfm_svcall_psa_call+0x1aa>
            tfm_panic();
 c032392:	f000 fbad 	bl	c032af0 <tfm_panic>
    for (i = 0; i < out_num; i++) {
 c032396:	f109 0901 	add.w	r9, r9, #1
 c03239a:	e797      	b.n	c0322cc <tfm_svcall_psa_call+0xe0>
 c03239c:	0c0358dd 	.word	0x0c0358dd
 c0323a0:	0c0357d2 	.word	0x0c0357d2
 c0323a4:	e000ef30 	.word	0xe000ef30

0c0323a8 <tfm_svcall_psa_close>:

void tfm_svcall_psa_close(uint32_t *args, int32_t ns_caller)
{
 c0323a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 c0323aa:	460f      	mov	r7, r1
 c0323ac:	b087      	sub	sp, #28
    psa_handle_t handle;
    struct tfm_spm_service_t *service;
    struct tfm_msg_body_t *msg;

    TFM_ASSERT(args != NULL);
 c0323ae:	b930      	cbnz	r0, c0323be <tfm_svcall_psa_close+0x16>
 c0323b0:	f240 122d 	movw	r2, #301	; 0x12d
 c0323b4:	4915      	ldr	r1, [pc, #84]	; (c03240c <tfm_svcall_psa_close+0x64>)
 c0323b6:	4816      	ldr	r0, [pc, #88]	; (c032410 <tfm_svcall_psa_close+0x68>)
 c0323b8:	f7e3 f826 	bl	c015408 <iprintf>
 c0323bc:	e7fe      	b.n	c0323bc <tfm_svcall_psa_close+0x14>
    handle = args[0];
 c0323be:	6804      	ldr	r4, [r0, #0]
    /* It will have no effect if called with the NULL handle */
    if (handle == PSA_NULL_HANDLE) {
 c0323c0:	b314      	cbz	r4, c032408 <tfm_svcall_psa_close+0x60>

    /*
     * It is a fatal error if an invalid handle was provided that is not the
     * null handle..
     */
    service = tfm_spm_get_service_by_handle(handle);
 c0323c2:	4620      	mov	r0, r4
 c0323c4:	f7fd f93a 	bl	c02f63c <tfm_spm_get_service_by_handle>
    if (!service) {
 c0323c8:	4605      	mov	r5, r0
 c0323ca:	b908      	cbnz	r0, c0323d0 <tfm_svcall_psa_close+0x28>
        /* FixMe: Need to implement one mechanism to resolve this failure. */
        tfm_panic();
 c0323cc:	f000 fb90 	bl	c032af0 <tfm_panic>
    }

    msg = tfm_spm_get_msg_buffer_from_conn_handle(handle);
 c0323d0:	4620      	mov	r0, r4
 c0323d2:	f7fd f969 	bl	c02f6a8 <tfm_spm_get_msg_buffer_from_conn_handle>
    if (!msg) {
 c0323d6:	4606      	mov	r6, r0
 c0323d8:	b908      	cbnz	r0, c0323de <tfm_svcall_psa_close+0x36>
        /* FixMe: Need to implement one mechanism to resolve this failure. */
        tfm_panic();
 c0323da:	f000 fb89 	bl	c032af0 <tfm_panic>
    }

    /* No input or output needed for close message */
    tfm_spm_fill_msg(msg, service, handle, PSA_IPC_DISCONNECT, ns_caller,
 c0323de:	2300      	movs	r3, #0
 c0323e0:	4629      	mov	r1, r5
 c0323e2:	e9cd 3304 	strd	r3, r3, [sp, #16]
 c0323e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 c0323ea:	e9cd 7300 	strd	r7, r3, [sp]
 c0323ee:	4630      	mov	r0, r6
 c0323f0:	f06f 0301 	mvn.w	r3, #1
 c0323f4:	4622      	mov	r2, r4
 c0323f6:	f7fd f9cf 	bl	c02f798 <tfm_spm_fill_msg>

    /*
     * Send message and wake up the SP who is waiting on message queue,
     * and scheduler triggered
     */
    tfm_spm_send_event(service, msg);
 c0323fa:	4631      	mov	r1, r6
 c0323fc:	4628      	mov	r0, r5
}
 c0323fe:	b007      	add	sp, #28
 c032400:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    tfm_spm_send_event(service, msg);
 c032404:	f7fd b960 	b.w	c02f6c8 <tfm_spm_send_event>
}
 c032408:	b007      	add	sp, #28
 c03240a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 c03240c:	0c0358f1 	.word	0x0c0358f1
 c032410:	0c0357d2 	.word	0x0c0357d2

0c032414 <tfm_svcall_enable_irq>:
    tfm_spm_hal_clear_pending_irq(irq_line);
    tfm_spm_hal_enable_irq(irq_line);
}

void tfm_svcall_enable_irq(uint32_t *args)
{
 c032414:	b508      	push	{r3, lr}
    IRQn_Type irq_line = (IRQn_Type) 0;
    int32_t ret;
    struct spm_partition_desc_t *partition = NULL;

    /* It is a fatal error if passed signal indicates more than one signals. */
    if (!tfm_is_one_bit_set(irq_signal)) {
 c032416:	6800      	ldr	r0, [r0, #0]
 c032418:	f7ff fd29 	bl	c031e6e <tfm_is_one_bit_set>
 c03241c:	b908      	cbnz	r0, c032422 <tfm_svcall_enable_irq+0xe>
        tfm_panic();
 c03241e:	f000 fb67 	bl	c032af0 <tfm_panic>
    }

    partition = tfm_spm_get_running_partition();
 c032422:	f7fd f995 	bl	c02f750 <tfm_spm_get_running_partition>
    if (!partition) {
 c032426:	b908      	cbnz	r0, c03242c <tfm_svcall_enable_irq+0x18>
        tfm_panic();
 c032428:	f000 fb62 	bl	c032af0 <tfm_panic>

    ret = get_irq_line_for_signal(partition->static_data->partition_id,
                                  irq_signal, &irq_line);
    /* It is a fatal error if passed signal is not an interrupt signal. */
    if (ret != IPC_SUCCESS) {
        tfm_panic();
 c03242c:	f000 fb60 	bl	c032af0 <tfm_panic>
    }

    tfm_spm_hal_enable_irq(irq_line);
}
 c032430:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tfm_spm_hal_enable_irq(irq_line);
 c032434:	2000      	movs	r0, #0
 c032436:	f7e7 bd5b 	b.w	c019ef0 <tfm_spm_hal_enable_irq>

0c03243a <tfm_svcall_disable_irq>:

void tfm_svcall_disable_irq(uint32_t *args)
{
 c03243a:	b508      	push	{r3, lr}
    IRQn_Type irq_line = (IRQn_Type) 0;
    int32_t ret;
    struct spm_partition_desc_t *partition = NULL;

    /* It is a fatal error if passed signal indicates more than one signals. */
    if (!tfm_is_one_bit_set(irq_signal)) {
 c03243c:	6800      	ldr	r0, [r0, #0]
 c03243e:	f7ff fd16 	bl	c031e6e <tfm_is_one_bit_set>
 c032442:	b908      	cbnz	r0, c032448 <tfm_svcall_disable_irq+0xe>
        tfm_panic();
 c032444:	f000 fb54 	bl	c032af0 <tfm_panic>
    }

    partition = tfm_spm_get_running_partition();
 c032448:	f7fd f982 	bl	c02f750 <tfm_spm_get_running_partition>
    if (!partition) {
 c03244c:	b908      	cbnz	r0, c032452 <tfm_svcall_disable_irq+0x18>
        tfm_panic();
 c03244e:	f000 fb4f 	bl	c032af0 <tfm_panic>

    ret = get_irq_line_for_signal(partition->static_data->partition_id,
                                  irq_signal, &irq_line);
    /* It is a fatal error if passed signal is not an interrupt signal. */
    if (ret != IPC_SUCCESS) {
        tfm_panic();
 c032452:	f000 fb4d 	bl	c032af0 <tfm_panic>
    }

    tfm_spm_hal_disable_irq(irq_line);
}
 c032456:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tfm_spm_hal_disable_irq(irq_line);
 c03245a:	2000      	movs	r0, #0
 c03245c:	f7e7 bd56 	b.w	c019f0c <tfm_spm_hal_disable_irq>

0c032460 <SVC_Handler_IPC>:

int32_t SVC_Handler_IPC(tfm_svc_number_t svc_num, uint32_t *ctx, uint32_t lr)
{
 c032460:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    switch (svc_num) {
 c032464:	380a      	subs	r0, #10
{
 c032466:	460b      	mov	r3, r1
    switch (svc_num) {
 c032468:	2812      	cmp	r0, #18
 c03246a:	f200 822a 	bhi.w	c0328c2 <SVC_Handler_IPC+0x462>
 c03246e:	e8df f010 	tbh	[pc, r0, lsl #1]
 c032472:	0220      	.short	0x0220
 c032474:	00330224 	.word	0x00330224
 c032478:	022801f9 	.word	0x022801f9
 c03247c:	023d0013 	.word	0x023d0013
 c032480:	00200019 	.word	0x00200019
 c032484:	002e0027 	.word	0x002e0027
 c032488:	009d004f 	.word	0x009d004f
 c03248c:	00fa00b4 	.word	0x00fa00b4
 c032490:	016b0127 	.word	0x016b0127
 c032494:	01e90015 	.word	0x01e90015
    case TFM_SVC_EXIT_THRD:
        tfm_svcall_thrd_exit();
 c032498:	f000 faf6 	bl	c032a88 <tfm_svcall_thrd_exit>

    default:
        LOG_MSG("Unknown SVC number requested!");
        return PSA_ERROR_GENERIC_ERROR;
    }
    return PSA_SUCCESS;
 c03249c:	2000      	movs	r0, #0
}
 c03249e:	b002      	add	sp, #8
 c0324a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return tfm_svcall_psa_version(ctx, 0);
 c0324a4:	2100      	movs	r1, #0
 c0324a6:	4618      	mov	r0, r3
}
 c0324a8:	b002      	add	sp, #8
 c0324aa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return tfm_svcall_psa_version(ctx, 0);
 c0324ae:	f7ff be3d 	b.w	c03212c <tfm_svcall_psa_version>
        return tfm_svcall_psa_connect(ctx, 0);
 c0324b2:	2100      	movs	r1, #0
 c0324b4:	4618      	mov	r0, r3
}
 c0324b6:	b002      	add	sp, #8
 c0324b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return tfm_svcall_psa_connect(ctx, 0);
 c0324bc:	f7ff be4e 	b.w	c03215c <tfm_svcall_psa_connect>
        return tfm_svcall_psa_call(ctx, 0, lr);
 c0324c0:	2100      	movs	r1, #0
 c0324c2:	4618      	mov	r0, r3
}
 c0324c4:	b002      	add	sp, #8
 c0324c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return tfm_svcall_psa_call(ctx, 0, lr);
 c0324ca:	f7ff be8f 	b.w	c0321ec <tfm_svcall_psa_call>
        tfm_svcall_psa_close(ctx, 0);
 c0324ce:	2100      	movs	r1, #0
 c0324d0:	4618      	mov	r0, r3
 c0324d2:	f7ff ff69 	bl	c0323a8 <tfm_svcall_psa_close>
 c0324d6:	e7e1      	b.n	c03249c <SVC_Handler_IPC+0x3c>
    TFM_ASSERT(args != NULL);
 c0324d8:	b933      	cbnz	r3, c0324e8 <SVC_Handler_IPC+0x88>
 c0324da:	f240 1261 	movw	r2, #353	; 0x161
 c0324de:	49ab      	ldr	r1, [pc, #684]	; (c03278c <SVC_Handler_IPC+0x32c>)
 c0324e0:	48ab      	ldr	r0, [pc, #684]	; (c032790 <SVC_Handler_IPC+0x330>)
 c0324e2:	f7e2 ff91 	bl	c015408 <iprintf>
 c0324e6:	e7fe      	b.n	c0324e6 <SVC_Handler_IPC+0x86>
    timeout = args[1];
 c0324e8:	e9d3 4600 	ldrd	r4, r6, [r3]
    partition = tfm_spm_get_running_partition();
 c0324ec:	f7fd f930 	bl	c02f750 <tfm_spm_get_running_partition>
    if (!partition) {
 c0324f0:	4605      	mov	r5, r0
 c0324f2:	b908      	cbnz	r0, c0324f8 <SVC_Handler_IPC+0x98>
        tfm_panic();
 c0324f4:	f000 fafc 	bl	c032af0 <tfm_panic>
    if (timeout == PSA_BLOCK &&
 c0324f8:	2e00      	cmp	r6, #0
    partition->runtime_data.signal_mask = signal_mask;
 c0324fa:	662c      	str	r4, [r5, #96]	; 0x60
    if (timeout == PSA_BLOCK &&
 c0324fc:	da05      	bge.n	c03250a <SVC_Handler_IPC+0xaa>
        (partition->runtime_data.signals & signal_mask) == 0) {
 c0324fe:	68ab      	ldr	r3, [r5, #8]
    if (timeout == PSA_BLOCK &&
 c032500:	421c      	tst	r4, r3
 c032502:	d102      	bne.n	c03250a <SVC_Handler_IPC+0xaa>
        tfm_event_wait(&partition->runtime_data.signal_evnt);
 c032504:	4628      	mov	r0, r5
 c032506:	f000 faf5 	bl	c032af4 <tfm_event_wait>
    return partition->runtime_data.signals & signal_mask;
 c03250a:	68a8      	ldr	r0, [r5, #8]
 c03250c:	4020      	ands	r0, r4
        return tfm_svcall_psa_wait(ctx);
 c03250e:	e7c6      	b.n	c03249e <SVC_Handler_IPC+0x3e>
    TFM_ASSERT(args != NULL);
 c032510:	b933      	cbnz	r3, c032520 <SVC_Handler_IPC+0xc0>
 c032512:	f240 129f 	movw	r2, #415	; 0x19f
 c032516:	499f      	ldr	r1, [pc, #636]	; (c032794 <SVC_Handler_IPC+0x334>)
 c032518:	489d      	ldr	r0, [pc, #628]	; (c032790 <SVC_Handler_IPC+0x330>)
 c03251a:	f7e2 ff75 	bl	c015408 <iprintf>
 c03251e:	e7fe      	b.n	c03251e <SVC_Handler_IPC+0xbe>
    msg = (psa_msg_t *)args[1];
 c032520:	e9d3 6700 	ldrd	r6, r7, [r3]
    if (tfm_bitcount(signal) != 1) {
 c032524:	4630      	mov	r0, r6
 c032526:	f7ff fc99 	bl	c031e5c <tfm_bitcount>
 c03252a:	2801      	cmp	r0, #1
 c03252c:	d001      	beq.n	c032532 <SVC_Handler_IPC+0xd2>
        tfm_panic();
 c03252e:	f000 fadf 	bl	c032af0 <tfm_panic>
    partition = tfm_spm_get_running_partition();
 c032532:	f7fd f90d 	bl	c02f750 <tfm_spm_get_running_partition>
    if (!partition) {
 c032536:	4604      	mov	r4, r0
 c032538:	b908      	cbnz	r0, c03253e <SVC_Handler_IPC+0xde>
        tfm_panic();
 c03253a:	f000 fad9 	bl	c032af0 <tfm_panic>
    privileged = tfm_spm_partition_get_privileged_mode(
 c03253e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c032540:	6858      	ldr	r0, [r3, #4]
 c032542:	f7fd f9e9 	bl	c02f918 <tfm_spm_partition_get_privileged_mode>
    if (tfm_memory_check(msg, sizeof(psa_msg_t), false, TFM_MEMORY_ACCESS_RW,
 c032546:	2302      	movs	r3, #2
 c032548:	9000      	str	r0, [sp, #0]
 c03254a:	2200      	movs	r2, #0
 c03254c:	2130      	movs	r1, #48	; 0x30
 c03254e:	4638      	mov	r0, r7
 c032550:	f7fd f9c8 	bl	c02f8e4 <tfm_memory_check>
 c032554:	b108      	cbz	r0, c03255a <SVC_Handler_IPC+0xfa>
        tfm_panic();
 c032556:	f000 facb 	bl	c032af0 <tfm_panic>
    if (partition->runtime_data.signals == 0) {
 c03255a:	68a3      	ldr	r3, [r4, #8]
 c03255c:	b90b      	cbnz	r3, c032562 <SVC_Handler_IPC+0x102>
        tfm_panic();
 c03255e:	f000 fac7 	bl	c032af0 <tfm_panic>
    if ((partition->runtime_data.signals & signal) == 0) {
 c032562:	68a3      	ldr	r3, [r4, #8]
 c032564:	421e      	tst	r6, r3
 c032566:	d101      	bne.n	c03256c <SVC_Handler_IPC+0x10c>
        tfm_panic();
 c032568:	f000 fac2 	bl	c032af0 <tfm_panic>
    service = tfm_spm_get_service_by_signal(partition, signal);
 c03256c:	4631      	mov	r1, r6
 c03256e:	4620      	mov	r0, r4
 c032570:	f7fd f818 	bl	c02f5a4 <tfm_spm_get_service_by_signal>
    if (!service) {
 c032574:	4605      	mov	r5, r0
 c032576:	b908      	cbnz	r0, c03257c <SVC_Handler_IPC+0x11c>
        tfm_panic();
 c032578:	f000 faba 	bl	c032af0 <tfm_panic>
    tmp_msg = tfm_msg_dequeue(&service->msg_queue);
 c03257c:	3510      	adds	r5, #16
 c03257e:	4628      	mov	r0, r5
 c032580:	f7ff fa71 	bl	c031a66 <tfm_msg_dequeue>
    if (!tmp_msg) {
 c032584:	2800      	cmp	r0, #0
 c032586:	f000 81b4 	beq.w	c0328f2 <SVC_Handler_IPC+0x492>
    tfm_core_util_memcpy(msg, &tmp_msg->msg, sizeof(psa_msg_t));
 c03258a:	f100 0114 	add.w	r1, r0, #20
 c03258e:	2230      	movs	r2, #48	; 0x30
 c032590:	4638      	mov	r0, r7
 c032592:	f7ff f833 	bl	c0315fc <tfm_core_util_memcpy>
    if (tfm_msg_queue_is_empty(&service->msg_queue)) {
 c032596:	4628      	mov	r0, r5
 c032598:	f7ff fa73 	bl	c031a82 <tfm_msg_queue_is_empty>
 c03259c:	2800      	cmp	r0, #0
 c03259e:	f43f af7e 	beq.w	c03249e <SVC_Handler_IPC+0x3e>
        partition->runtime_data.signals &= ~signal;
 c0325a2:	68a3      	ldr	r3, [r4, #8]
 c0325a4:	ea23 0606 	bic.w	r6, r3, r6
 c0325a8:	60a6      	str	r6, [r4, #8]
 c0325aa:	e777      	b.n	c03249c <SVC_Handler_IPC+0x3c>
    TFM_ASSERT(args != NULL);
 c0325ac:	b933      	cbnz	r3, c0325bc <SVC_Handler_IPC+0x15c>
 c0325ae:	f240 12f7 	movw	r2, #503	; 0x1f7
 c0325b2:	4979      	ldr	r1, [pc, #484]	; (c032798 <SVC_Handler_IPC+0x338>)
 c0325b4:	4876      	ldr	r0, [pc, #472]	; (c032790 <SVC_Handler_IPC+0x330>)
 c0325b6:	f7e2 ff27 	bl	c015408 <iprintf>
 c0325ba:	e7fe      	b.n	c0325ba <SVC_Handler_IPC+0x15a>
    msg = tfm_spm_get_msg_from_handle(msg_handle);
 c0325bc:	e9d3 0500 	ldrd	r0, r5, [r3]
 c0325c0:	f7fd f8ce 	bl	c02f760 <tfm_spm_get_msg_from_handle>
    if (!msg) {
 c0325c4:	4604      	mov	r4, r0
 c0325c6:	b908      	cbnz	r0, c0325cc <SVC_Handler_IPC+0x16c>
        tfm_panic();
 c0325c8:	f000 fa92 	bl	c032af0 <tfm_panic>
    tfm_spm_set_rhandle(msg->service, msg->handle, rhandle);
 c0325cc:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
    msg->msg.rhandle = rhandle;
 c0325d0:	6225      	str	r5, [r4, #32]
    tfm_spm_set_rhandle(msg->service, msg->handle, rhandle);
 c0325d2:	462a      	mov	r2, r5
 c0325d4:	f7fc ffba 	bl	c02f54c <tfm_spm_set_rhandle>
 c0325d8:	e760      	b.n	c03249c <SVC_Handler_IPC+0x3c>
    TFM_ASSERT(args != NULL);
 c0325da:	b933      	cbnz	r3, c0325ea <SVC_Handler_IPC+0x18a>
 c0325dc:	f240 2225 	movw	r2, #549	; 0x225
 c0325e0:	496e      	ldr	r1, [pc, #440]	; (c03279c <SVC_Handler_IPC+0x33c>)
 c0325e2:	486b      	ldr	r0, [pc, #428]	; (c032790 <SVC_Handler_IPC+0x330>)
 c0325e4:	f7e2 ff10 	bl	c015408 <iprintf>
 c0325e8:	e7fe      	b.n	c0325e8 <SVC_Handler_IPC+0x188>
    msg = tfm_spm_get_msg_from_handle(msg_handle);
 c0325ea:	6818      	ldr	r0, [r3, #0]
    buffer = (void *)args[2];
 c0325ec:	e9d3 7801 	ldrd	r7, r8, [r3, #4]
    num_bytes = (size_t)args[3];
 c0325f0:	f8d3 900c 	ldr.w	r9, [r3, #12]
    msg = tfm_spm_get_msg_from_handle(msg_handle);
 c0325f4:	f7fd f8b4 	bl	c02f760 <tfm_spm_get_msg_from_handle>
    if (!msg) {
 c0325f8:	4605      	mov	r5, r0
 c0325fa:	b908      	cbnz	r0, c032600 <SVC_Handler_IPC+0x1a0>
        tfm_panic();
 c0325fc:	f000 fa78 	bl	c032af0 <tfm_panic>
    partition = msg->service->partition;
 c032600:	686b      	ldr	r3, [r5, #4]
        partition->static_data->partition_flags);
 c032602:	685b      	ldr	r3, [r3, #4]
    privileged = tfm_spm_partition_get_privileged_mode(
 c032604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c032606:	6858      	ldr	r0, [r3, #4]
 c032608:	f7fd f986 	bl	c02f918 <tfm_spm_partition_get_privileged_mode>
    if (msg->msg.type < PSA_IPC_CALL) {
 c03260c:	696b      	ldr	r3, [r5, #20]
    privileged = tfm_spm_partition_get_privileged_mode(
 c03260e:	4682      	mov	sl, r0
    if (msg->msg.type < PSA_IPC_CALL) {
 c032610:	2b00      	cmp	r3, #0
 c032612:	da01      	bge.n	c032618 <SVC_Handler_IPC+0x1b8>
        tfm_panic();
 c032614:	f000 fa6c 	bl	c032af0 <tfm_panic>
    if (invec_idx >= PSA_MAX_IOVEC) {
 c032618:	2f03      	cmp	r7, #3
 c03261a:	d901      	bls.n	c032620 <SVC_Handler_IPC+0x1c0>
        tfm_panic();
 c03261c:	f000 fa68 	bl	c032af0 <tfm_panic>
 c032620:	eb05 0687 	add.w	r6, r5, r7, lsl #2
    if (msg->msg.in_size[invec_idx] == 0) {
 c032624:	6a74      	ldr	r4, [r6, #36]	; 0x24
 c032626:	b1e4      	cbz	r4, c032662 <SVC_Handler_IPC+0x202>
    if (tfm_memory_check(buffer, num_bytes, false,
 c032628:	f8cd a000 	str.w	sl, [sp]
 c03262c:	2302      	movs	r3, #2
 c03262e:	2200      	movs	r2, #0
 c032630:	4649      	mov	r1, r9
 c032632:	4640      	mov	r0, r8
 c032634:	f7fd f956 	bl	c02f8e4 <tfm_memory_check>
 c032638:	b108      	cbz	r0, c03263e <SVC_Handler_IPC+0x1de>
        tfm_panic();
 c03263a:	f000 fa59 	bl	c032af0 <tfm_panic>
    bytes = num_bytes > msg->msg.in_size[invec_idx] ?
 c03263e:	6a70      	ldr	r0, [r6, #36]	; 0x24
 c032640:	464c      	mov	r4, r9
 c032642:	4581      	cmp	r9, r0
 c032644:	bf28      	it	cs
 c032646:	4604      	movcs	r4, r0
 c032648:	eb05 05c7 	add.w	r5, r5, r7, lsl #3
    tfm_core_util_memcpy(buffer, msg->invec[invec_idx].base, bytes);
 c03264c:	4622      	mov	r2, r4
 c03264e:	6c69      	ldr	r1, [r5, #68]	; 0x44
 c032650:	4640      	mov	r0, r8
 c032652:	f7fe ffd3 	bl	c0315fc <tfm_core_util_memcpy>
    msg->invec[invec_idx].base =(char *)msg->invec[invec_idx].base+bytes;
 c032656:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 c032658:	4423      	add	r3, r4
 c03265a:	646b      	str	r3, [r5, #68]	; 0x44
    msg->msg.in_size[invec_idx] -= bytes;
 c03265c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 c03265e:	1b1b      	subs	r3, r3, r4
 c032660:	6273      	str	r3, [r6, #36]	; 0x24
        return tfm_svcall_psa_read(ctx);
 c032662:	4620      	mov	r0, r4
 c032664:	e71b      	b.n	c03249e <SVC_Handler_IPC+0x3e>
    TFM_ASSERT(args != NULL);
 c032666:	b933      	cbnz	r3, c032676 <SVC_Handler_IPC+0x216>
 c032668:	f240 2277 	movw	r2, #631	; 0x277
 c03266c:	494c      	ldr	r1, [pc, #304]	; (c0327a0 <SVC_Handler_IPC+0x340>)
 c03266e:	4848      	ldr	r0, [pc, #288]	; (c032790 <SVC_Handler_IPC+0x330>)
 c032670:	f7e2 feca 	bl	c015408 <iprintf>
 c032674:	e7fe      	b.n	c032674 <SVC_Handler_IPC+0x214>
    msg = tfm_spm_get_msg_from_handle(msg_handle);
 c032676:	6818      	ldr	r0, [r3, #0]
    num_bytes = (size_t)args[2];
 c032678:	e9d3 6501 	ldrd	r6, r5, [r3, #4]
    msg = tfm_spm_get_msg_from_handle(msg_handle);
 c03267c:	f7fd f870 	bl	c02f760 <tfm_spm_get_msg_from_handle>
    if (!msg) {
 c032680:	4604      	mov	r4, r0
 c032682:	b908      	cbnz	r0, c032688 <SVC_Handler_IPC+0x228>
        tfm_panic();
 c032684:	f000 fa34 	bl	c032af0 <tfm_panic>
    if (msg->msg.type < PSA_IPC_CALL) {
 c032688:	6963      	ldr	r3, [r4, #20]
 c03268a:	2b00      	cmp	r3, #0
 c03268c:	da01      	bge.n	c032692 <SVC_Handler_IPC+0x232>
        tfm_panic();
 c03268e:	f000 fa2f 	bl	c032af0 <tfm_panic>
    if (invec_idx >= PSA_MAX_IOVEC) {
 c032692:	2e03      	cmp	r6, #3
 c032694:	d901      	bls.n	c03269a <SVC_Handler_IPC+0x23a>
        tfm_panic();
 c032696:	f000 fa2b 	bl	c032af0 <tfm_panic>
 c03269a:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    if (msg->msg.in_size[invec_idx] == 0) {
 c03269e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 c0326a0:	2800      	cmp	r0, #0
 c0326a2:	f43f aefc 	beq.w	c03249e <SVC_Handler_IPC+0x3e>
 c0326a6:	4285      	cmp	r5, r0
 c0326a8:	462a      	mov	r2, r5
 c0326aa:	bf28      	it	cs
 c0326ac:	4602      	movcs	r2, r0
 c0326ae:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    msg->invec[invec_idx].base = (char *)msg->invec[invec_idx].base+ num_bytes;
 c0326b2:	6c61      	ldr	r1, [r4, #68]	; 0x44
    msg->msg.in_size[invec_idx] -= num_bytes;
 c0326b4:	1a80      	subs	r0, r0, r2
    msg->invec[invec_idx].base = (char *)msg->invec[invec_idx].base+ num_bytes;
 c0326b6:	4411      	add	r1, r2
 c0326b8:	6461      	str	r1, [r4, #68]	; 0x44
    msg->msg.in_size[invec_idx] -= num_bytes;
 c0326ba:	6278      	str	r0, [r7, #36]	; 0x24
    return num_bytes;
 c0326bc:	4610      	mov	r0, r2
        return tfm_svcall_psa_skip(ctx);
 c0326be:	e6ee      	b.n	c03249e <SVC_Handler_IPC+0x3e>
    TFM_ASSERT(args != NULL);
 c0326c0:	b933      	cbnz	r3, c0326d0 <SVC_Handler_IPC+0x270>
 c0326c2:	f240 22c2 	movw	r2, #706	; 0x2c2
 c0326c6:	4937      	ldr	r1, [pc, #220]	; (c0327a4 <SVC_Handler_IPC+0x344>)
 c0326c8:	4831      	ldr	r0, [pc, #196]	; (c032790 <SVC_Handler_IPC+0x330>)
 c0326ca:	f7e2 fe9d 	bl	c015408 <iprintf>
 c0326ce:	e7fe      	b.n	c0326ce <SVC_Handler_IPC+0x26e>
    msg = tfm_spm_get_msg_from_handle(msg_handle);
 c0326d0:	6818      	ldr	r0, [r3, #0]
    buffer = (void *)args[2];
 c0326d2:	e9d3 9701 	ldrd	r9, r7, [r3, #4]
    num_bytes = (size_t)args[3];
 c0326d6:	68de      	ldr	r6, [r3, #12]
    msg = tfm_spm_get_msg_from_handle(msg_handle);
 c0326d8:	f7fd f842 	bl	c02f760 <tfm_spm_get_msg_from_handle>
    if (!msg) {
 c0326dc:	4604      	mov	r4, r0
 c0326de:	b908      	cbnz	r0, c0326e4 <SVC_Handler_IPC+0x284>
        tfm_panic();
 c0326e0:	f000 fa06 	bl	c032af0 <tfm_panic>
    partition = msg->service->partition;
 c0326e4:	6863      	ldr	r3, [r4, #4]
        partition->static_data->partition_flags);
 c0326e6:	685b      	ldr	r3, [r3, #4]
    privileged = tfm_spm_partition_get_privileged_mode(
 c0326e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c0326ea:	6858      	ldr	r0, [r3, #4]
 c0326ec:	f7fd f914 	bl	c02f918 <tfm_spm_partition_get_privileged_mode>
    if (msg->msg.type < PSA_IPC_CALL) {
 c0326f0:	6963      	ldr	r3, [r4, #20]
    privileged = tfm_spm_partition_get_privileged_mode(
 c0326f2:	4680      	mov	r8, r0
    if (msg->msg.type < PSA_IPC_CALL) {
 c0326f4:	2b00      	cmp	r3, #0
 c0326f6:	da01      	bge.n	c0326fc <SVC_Handler_IPC+0x29c>
        tfm_panic();
 c0326f8:	f000 f9fa 	bl	c032af0 <tfm_panic>
    if (outvec_idx >= PSA_MAX_IOVEC) {
 c0326fc:	f1b9 0f03 	cmp.w	r9, #3
 c032700:	d901      	bls.n	c032706 <SVC_Handler_IPC+0x2a6>
        tfm_panic();
 c032702:	f000 f9f5 	bl	c032af0 <tfm_panic>
 c032706:	eb04 05c9 	add.w	r5, r4, r9, lsl #3
    if (num_bytes > msg->msg.out_size[outvec_idx] -
 c03270a:	eb04 0489 	add.w	r4, r4, r9, lsl #2
 c03270e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 c032710:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 c032712:	1a9b      	subs	r3, r3, r2
 c032714:	429e      	cmp	r6, r3
 c032716:	d901      	bls.n	c03271c <SVC_Handler_IPC+0x2bc>
        tfm_panic();
 c032718:	f000 f9ea 	bl	c032af0 <tfm_panic>
    if (tfm_memory_check(buffer, num_bytes, false,
 c03271c:	f8cd 8000 	str.w	r8, [sp]
 c032720:	2301      	movs	r3, #1
 c032722:	2200      	movs	r2, #0
 c032724:	4631      	mov	r1, r6
 c032726:	4638      	mov	r0, r7
 c032728:	f7fd f8dc 	bl	c02f8e4 <tfm_memory_check>
 c03272c:	b108      	cbz	r0, c032732 <SVC_Handler_IPC+0x2d2>
        tfm_panic();
 c03272e:	f000 f9df 	bl	c032af0 <tfm_panic>
    tfm_core_util_memcpy((char *)msg->outvec[outvec_idx].base +
 c032732:	e9d5 0319 	ldrd	r0, r3, [r5, #100]	; 0x64
 c032736:	4632      	mov	r2, r6
 c032738:	4418      	add	r0, r3
 c03273a:	4639      	mov	r1, r7
 c03273c:	f7fe ff5e 	bl	c0315fc <tfm_core_util_memcpy>
    msg->outvec[outvec_idx].len += num_bytes;
 c032740:	6eab      	ldr	r3, [r5, #104]	; 0x68
 c032742:	441e      	add	r6, r3
 c032744:	66ae      	str	r6, [r5, #104]	; 0x68
 c032746:	e6a9      	b.n	c03249c <SVC_Handler_IPC+0x3c>
    TFM_ASSERT(args != NULL);
 c032748:	b933      	cbnz	r3, c032758 <SVC_Handler_IPC+0x2f8>
 c03274a:	f44f 7248 	mov.w	r2, #800	; 0x320
 c03274e:	4916      	ldr	r1, [pc, #88]	; (c0327a8 <SVC_Handler_IPC+0x348>)
 c032750:	480f      	ldr	r0, [pc, #60]	; (c032790 <SVC_Handler_IPC+0x330>)
 c032752:	f7e2 fe59 	bl	c015408 <iprintf>
 c032756:	e7fe      	b.n	c032756 <SVC_Handler_IPC+0x2f6>
    msg = tfm_spm_get_msg_from_handle(msg_handle);
 c032758:	6818      	ldr	r0, [r3, #0]
    status = (psa_status_t)args[1];
 c03275a:	685d      	ldr	r5, [r3, #4]
    msg = tfm_spm_get_msg_from_handle(msg_handle);
 c03275c:	f7fd f800 	bl	c02f760 <tfm_spm_get_msg_from_handle>
    status = (psa_status_t)args[1];
 c032760:	462e      	mov	r6, r5
    if (!msg) {
 c032762:	4604      	mov	r4, r0
 c032764:	b908      	cbnz	r0, c03276a <SVC_Handler_IPC+0x30a>
        tfm_panic();
 c032766:	f000 f9c3 	bl	c032af0 <tfm_panic>
    service = msg->service;
 c03276a:	6867      	ldr	r7, [r4, #4]
    if (!service) {
 c03276c:	b90f      	cbnz	r7, c032772 <SVC_Handler_IPC+0x312>
        tfm_panic();
 c03276e:	f000 f9bf 	bl	c032af0 <tfm_panic>
    switch (msg->msg.type) {
 c032772:	6963      	ldr	r3, [r4, #20]
 c032774:	1c99      	adds	r1, r3, #2
 c032776:	d023      	beq.n	c0327c0 <SVC_Handler_IPC+0x360>
 c032778:	1c5a      	adds	r2, r3, #1
 c03277a:	d126      	bne.n	c0327ca <SVC_Handler_IPC+0x36a>
        if (status == PSA_SUCCESS) {
 c03277c:	b9b5      	cbnz	r5, c0327ac <SVC_Handler_IPC+0x34c>
            ret = msg->handle;
 c03277e:	68a6      	ldr	r6, [r4, #8]
    tfm_event_wake(&msg->ack_evnt, ret);
 c032780:	4631      	mov	r1, r6
 c032782:	f104 000c 	add.w	r0, r4, #12
 c032786:	f000 f9d3 	bl	c032b30 <tfm_event_wake>
 c03278a:	e687      	b.n	c03249c <SVC_Handler_IPC+0x3c>
 c03278c:	0c035906 	.word	0x0c035906
 c032790:	0c0357d2 	.word	0x0c0357d2
 c032794:	0c03591a 	.word	0x0c03591a
 c032798:	0c03592d 	.word	0x0c03592d
 c03279c:	0c035948 	.word	0x0c035948
 c0327a0:	0c03595c 	.word	0x0c03595c
 c0327a4:	0c035970 	.word	0x0c035970
 c0327a8:	0c03599e 	.word	0x0c03599e
        } else if (status == PSA_ERROR_CONNECTION_REFUSED) {
 c0327ac:	f115 0f82 	cmn.w	r5, #130	; 0x82
 c0327b0:	d046      	beq.n	c032840 <SVC_Handler_IPC+0x3e0>
        } else if (status == PSA_ERROR_CONNECTION_BUSY) {
 c0327b2:	f115 0f83 	cmn.w	r5, #131	; 0x83
 c0327b6:	d043      	beq.n	c032840 <SVC_Handler_IPC+0x3e0>
            tfm_panic();
 c0327b8:	f000 f99a 	bl	c032af0 <tfm_panic>
    int32_t ret = PSA_SUCCESS;
 c0327bc:	2600      	movs	r6, #0
 c0327be:	e7df      	b.n	c032780 <SVC_Handler_IPC+0x320>
        tfm_spm_free_conn_handle(service, msg->handle);
 c0327c0:	68a1      	ldr	r1, [r4, #8]
 c0327c2:	4638      	mov	r0, r7
 c0327c4:	f7fc fea4 	bl	c02f510 <tfm_spm_free_conn_handle>
 c0327c8:	e7f8      	b.n	c0327bc <SVC_Handler_IPC+0x35c>
        if (msg->msg.type >= PSA_IPC_CALL) {
 c0327ca:	2b00      	cmp	r3, #0
 c0327cc:	dbf4      	blt.n	c0327b8 <SVC_Handler_IPC+0x358>
            if (status == PSA_SUCCESS) {
 c0327ce:	b35d      	cbz	r5, c032828 <SVC_Handler_IPC+0x3c8>
            } else if ((status >= (INT32_MIN + 1)) &&
 c0327d0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 c0327d4:	3b01      	subs	r3, #1
 c0327d6:	2b7e      	cmp	r3, #126	; 0x7e
 c0327d8:	d81d      	bhi.n	c032816 <SVC_Handler_IPC+0x3b6>
                tfm_panic();
 c0327da:	f000 f989 	bl	c032af0 <tfm_panic>
    int32_t ret = PSA_SUCCESS;
 c0327de:	2600      	movs	r6, #0
    TFM_ASSERT(msg->ack_evnt.owner->status == THRD_STAT_BLOCK);
 c0327e0:	6923      	ldr	r3, [r4, #16]
 c0327e2:	695b      	ldr	r3, [r3, #20]
 c0327e4:	2b02      	cmp	r3, #2
 c0327e6:	d121      	bne.n	c03282c <SVC_Handler_IPC+0x3cc>
 c0327e8:	4623      	mov	r3, r4
 c0327ea:	f104 0234 	add.w	r2, r4, #52	; 0x34
    while (msg->msg.out_size[i] != 0) {
 c0327ee:	f852 1b04 	ldr.w	r1, [r2], #4
 c0327f2:	2900      	cmp	r1, #0
 c0327f4:	d0c4      	beq.n	c032780 <SVC_Handler_IPC+0x320>
        TFM_ASSERT(msg->caller_outvec[i].base == msg->outvec[i].base);
 c0327f6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 c0327fa:	1b19      	subs	r1, r3, r4
 c0327fc:	3308      	adds	r3, #8
 c0327fe:	1845      	adds	r5, r0, r1
 c032800:	5840      	ldr	r0, [r0, r1]
 c032802:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 c032804:	4288      	cmp	r0, r1
 c032806:	d018      	beq.n	c03283a <SVC_Handler_IPC+0x3da>
 c032808:	f240 3206 	movw	r2, #774	; 0x306
 c03280c:	493a      	ldr	r1, [pc, #232]	; (c0328f8 <SVC_Handler_IPC+0x498>)
 c03280e:	483b      	ldr	r0, [pc, #236]	; (c0328fc <SVC_Handler_IPC+0x49c>)
 c032810:	f7e2 fdfa 	bl	c015408 <iprintf>
 c032814:	e7fe      	b.n	c032814 <SVC_Handler_IPC+0x3b4>
            } else if ((status >= (INT32_MIN + 128)) && (status <= -1)) {
 c032816:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 c03281a:	4a39      	ldr	r2, [pc, #228]	; (c032900 <SVC_Handler_IPC+0x4a0>)
 c03281c:	3b80      	subs	r3, #128	; 0x80
 c03281e:	4293      	cmp	r3, r2
 c032820:	d9de      	bls.n	c0327e0 <SVC_Handler_IPC+0x380>
            } else if ((status >= 1) && (status <= INT32_MAX)) {
 c032822:	2d00      	cmp	r5, #0
 c032824:	dcdc      	bgt.n	c0327e0 <SVC_Handler_IPC+0x380>
 c032826:	e7d8      	b.n	c0327da <SVC_Handler_IPC+0x37a>
                ret = PSA_SUCCESS;
 c032828:	462e      	mov	r6, r5
 c03282a:	e7d9      	b.n	c0327e0 <SVC_Handler_IPC+0x380>
    TFM_ASSERT(msg->ack_evnt.owner->status == THRD_STAT_BLOCK);
 c03282c:	f240 3203 	movw	r2, #771	; 0x303
 c032830:	4931      	ldr	r1, [pc, #196]	; (c0328f8 <SVC_Handler_IPC+0x498>)
 c032832:	4832      	ldr	r0, [pc, #200]	; (c0328fc <SVC_Handler_IPC+0x49c>)
 c032834:	f7e2 fde8 	bl	c015408 <iprintf>
 c032838:	e7fe      	b.n	c032838 <SVC_Handler_IPC+0x3d8>
        msg->caller_outvec[i].len = msg->outvec[i].len;
 c03283a:	6e19      	ldr	r1, [r3, #96]	; 0x60
 c03283c:	6069      	str	r1, [r5, #4]
 c03283e:	e7d6      	b.n	c0327ee <SVC_Handler_IPC+0x38e>
            ret = PSA_ERROR_CONNECTION_BUSY;
 c032840:	462e      	mov	r6, r5
 c032842:	e79d      	b.n	c032780 <SVC_Handler_IPC+0x320>
    partition = tfm_spm_get_running_partition();
 c032844:	f7fc ff84 	bl	c02f750 <tfm_spm_get_running_partition>
    if (!partition) {
 c032848:	4604      	mov	r4, r0
 c03284a:	b908      	cbnz	r0, c032850 <SVC_Handler_IPC+0x3f0>
        tfm_panic();
 c03284c:	f000 f950 	bl	c032af0 <tfm_panic>
    if ((partition->runtime_data.signals & PSA_DOORBELL) == 0) {
 c032850:	68a3      	ldr	r3, [r4, #8]
 c032852:	071b      	lsls	r3, r3, #28
 c032854:	d401      	bmi.n	c03285a <SVC_Handler_IPC+0x3fa>
        tfm_panic();
 c032856:	f000 f94b 	bl	c032af0 <tfm_panic>
    partition->runtime_data.signals &= ~PSA_DOORBELL;
 c03285a:	68a3      	ldr	r3, [r4, #8]
 c03285c:	f023 0308 	bic.w	r3, r3, #8
 c032860:	60a3      	str	r3, [r4, #8]
 c032862:	e61b      	b.n	c03249c <SVC_Handler_IPC+0x3c>
    TFM_ASSERT(args != NULL);
 c032864:	b933      	cbnz	r3, c032874 <SVC_Handler_IPC+0x414>
 c032866:	f240 4211 	movw	r2, #1041	; 0x411
 c03286a:	4926      	ldr	r1, [pc, #152]	; (c032904 <SVC_Handler_IPC+0x4a4>)
 c03286c:	4823      	ldr	r0, [pc, #140]	; (c0328fc <SVC_Handler_IPC+0x49c>)
 c03286e:	f7e2 fdcb 	bl	c015408 <iprintf>
 c032872:	e7fe      	b.n	c032872 <SVC_Handler_IPC+0x412>
    irq_signal = (psa_signal_t)args[0];
 c032874:	681d      	ldr	r5, [r3, #0]
    partition = tfm_spm_get_running_partition();
 c032876:	f7fc ff6b 	bl	c02f750 <tfm_spm_get_running_partition>
    if (!partition) {
 c03287a:	4604      	mov	r4, r0
 c03287c:	b908      	cbnz	r0, c032882 <SVC_Handler_IPC+0x422>
        tfm_panic();
 c03287e:	f000 f937 	bl	c032af0 <tfm_panic>
        tfm_panic();
 c032882:	f000 f935 	bl	c032af0 <tfm_panic>
    if (!tfm_is_one_bit_set(irq_signal)) {
 c032886:	4628      	mov	r0, r5
 c032888:	f7ff faf1 	bl	c031e6e <tfm_is_one_bit_set>
 c03288c:	b908      	cbnz	r0, c032892 <SVC_Handler_IPC+0x432>
        tfm_panic();
 c03288e:	f000 f92f 	bl	c032af0 <tfm_panic>
    if ((partition->runtime_data.signals & irq_signal) == 0) {
 c032892:	68a3      	ldr	r3, [r4, #8]
 c032894:	421d      	tst	r5, r3
 c032896:	d101      	bne.n	c03289c <SVC_Handler_IPC+0x43c>
        tfm_panic();
 c032898:	f000 f92a 	bl	c032af0 <tfm_panic>
    partition->runtime_data.signals &= ~irq_signal;
 c03289c:	68a0      	ldr	r0, [r4, #8]
 c03289e:	ea20 0005 	bic.w	r0, r0, r5
 c0328a2:	60a0      	str	r0, [r4, #8]
    tfm_spm_hal_clear_pending_irq(irq_line);
 c0328a4:	2000      	movs	r0, #0
 c0328a6:	f7e7 fb13 	bl	c019ed0 <tfm_spm_hal_clear_pending_irq>
    tfm_spm_hal_enable_irq(irq_line);
 c0328aa:	2000      	movs	r0, #0
 c0328ac:	f7e7 fb20 	bl	c019ef0 <tfm_spm_hal_enable_irq>
 c0328b0:	e5f4      	b.n	c03249c <SVC_Handler_IPC+0x3c>
        tfm_svcall_enable_irq(ctx);
 c0328b2:	4618      	mov	r0, r3
 c0328b4:	f7ff fdae 	bl	c032414 <tfm_svcall_enable_irq>
 c0328b8:	e5f0      	b.n	c03249c <SVC_Handler_IPC+0x3c>
        tfm_svcall_disable_irq(ctx);
 c0328ba:	4618      	mov	r0, r3
 c0328bc:	f7ff fdbd 	bl	c03243a <tfm_svcall_disable_irq>
 c0328c0:	e5ec      	b.n	c03249c <SVC_Handler_IPC+0x3c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 c0328c2:	f3ef 8305 	mrs	r3, IPSR
 c0328c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
        LOG_MSG("Unknown SVC number requested!");
 c0328ca:	b15b      	cbz	r3, c0328e4 <SVC_Handler_IPC+0x484>
 c0328cc:	480e      	ldr	r0, [pc, #56]	; (c032908 <SVC_Handler_IPC+0x4a8>)
 c0328ce:	f7fe fe13 	bl	c0314f8 <tfm_core_log_puts>
 c0328d2:	480e      	ldr	r0, [pc, #56]	; (c03290c <SVC_Handler_IPC+0x4ac>)
 c0328d4:	f7fe fe10 	bl	c0314f8 <tfm_core_log_puts>
 c0328d8:	480d      	ldr	r0, [pc, #52]	; (c032910 <SVC_Handler_IPC+0x4b0>)
 c0328da:	f7fe fe0d 	bl	c0314f8 <tfm_core_log_puts>
        return PSA_ERROR_GENERIC_ERROR;
 c0328de:	f06f 0083 	mvn.w	r0, #131	; 0x83
 c0328e2:	e5dc      	b.n	c03249e <SVC_Handler_IPC+0x3e>
        LOG_MSG("Unknown SVC number requested!");
 c0328e4:	4b09      	ldr	r3, [pc, #36]	; (c03290c <SVC_Handler_IPC+0x4ac>)
 c0328e6:	4618      	mov	r0, r3
 c0328e8:	df06      	svc	6
 c0328ea:	e7f8      	b.n	c0328de <SVC_Handler_IPC+0x47e>
        return tfm_svcall_psa_framework_version();
 c0328ec:	f44f 7080 	mov.w	r0, #256	; 0x100
 c0328f0:	e5d5      	b.n	c03249e <SVC_Handler_IPC+0x3e>
        return PSA_ERROR_DOES_NOT_EXIST;
 c0328f2:	f06f 008b 	mvn.w	r0, #139	; 0x8b
 c0328f6:	e5d2      	b.n	c03249e <SVC_Handler_IPC+0x3e>
 c0328f8:	0c035985 	.word	0x0c035985
 c0328fc:	0c0357d2 	.word	0x0c0357d2
 c032900:	7fffff7f 	.word	0x7fffff7f
 c032904:	0c0359b3 	.word	0x0c0359b3
 c032908:	0c032cd0 	.word	0x0c032cd0
 c03290c:	0c035891 	.word	0x0c035891
 c032910:	0c035863 	.word	0x0c035863

0c032914 <tfm_thrd_next_thread>:
    return find_next_running_thread(RUNN_HEAD);
 c032914:	4b04      	ldr	r3, [pc, #16]	; (c032928 <tfm_thrd_next_thread+0x14>)
 c032916:	6818      	ldr	r0, [r3, #0]
    while (pth && pth->status != THRD_STAT_RUNNING) {
 c032918:	b110      	cbz	r0, c032920 <tfm_thrd_next_thread+0xc>
 c03291a:	6943      	ldr	r3, [r0, #20]
 c03291c:	2b01      	cmp	r3, #1
 c03291e:	d100      	bne.n	c032922 <tfm_thrd_next_thread+0xe>
}
 c032920:	4770      	bx	lr
        pth = pth->next;
 c032922:	6c80      	ldr	r0, [r0, #72]	; 0x48
 c032924:	e7f8      	b.n	c032918 <tfm_thrd_next_thread+0x4>
 c032926:	bf00      	nop
 c032928:	3003f270 	.word	0x3003f270

0c03292c <tfm_thrd_curr_thread>:
}
 c03292c:	4b01      	ldr	r3, [pc, #4]	; (c032934 <tfm_thrd_curr_thread+0x8>)
 c03292e:	6818      	ldr	r0, [r3, #0]
 c032930:	4770      	bx	lr
 c032932:	bf00      	nop
 c032934:	3003f26c 	.word	0x3003f26c

0c032938 <tfm_thrd_init>:
{
 c032938:	b510      	push	{r4, lr}
    pth->status = THRD_STAT_CREATING;
 c03293a:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
 c03293e:	2400      	movs	r4, #0
    pth->sp_btm = sp_btm;
 c032940:	6083      	str	r3, [r0, #8]
    pth->sp_top = sp_top;
 c032942:	9b02      	ldr	r3, [sp, #8]
    pth->status = THRD_STAT_CREATING;
 c032944:	e9c0 c404 	strd	ip, r4, [r0, #16]
    pth->param = param;
 c032948:	e9c0 1200 	strd	r1, r2, [r0]
    pth->sp_top = sp_top;
 c03294c:	60c3      	str	r3, [r0, #12]
}
 c03294e:	bd10      	pop	{r4, pc}

0c032950 <tfm_thrd_set_status>:
{
 c032950:	b508      	push	{r3, lr}
    TFM_ASSERT(pth != NULL && new_status < THRD_STAT_INVALID);
 c032952:	b108      	cbz	r0, c032958 <tfm_thrd_set_status+0x8>
 c032954:	2903      	cmp	r1, #3
 c032956:	d905      	bls.n	c032964 <tfm_thrd_set_status+0x14>
 c032958:	229e      	movs	r2, #158	; 0x9e
 c03295a:	490a      	ldr	r1, [pc, #40]	; (c032984 <tfm_thrd_set_status+0x34>)
 c03295c:	480a      	ldr	r0, [pc, #40]	; (c032988 <tfm_thrd_set_status+0x38>)
 c03295e:	f7e2 fd53 	bl	c015408 <iprintf>
 c032962:	e7fe      	b.n	c032962 <tfm_thrd_set_status+0x12>
    if ((node->status == THRD_STAT_RUNNING) &&
 c032964:	2901      	cmp	r1, #1
    pth->status = new_status;
 c032966:	6141      	str	r1, [r0, #20]
 c032968:	4b08      	ldr	r3, [pc, #32]	; (c03298c <tfm_thrd_set_status+0x3c>)
    if ((node->status == THRD_STAT_RUNNING) &&
 c03296a:	d107      	bne.n	c03297c <tfm_thrd_set_status+0x2c>
        (*runn == NULL || (node->prior < (*runn)->prior))) {
 c03296c:	681a      	ldr	r2, [r3, #0]
    if ((node->status == THRD_STAT_RUNNING) &&
 c03296e:	b11a      	cbz	r2, c032978 <tfm_thrd_set_status+0x28>
        (*runn == NULL || (node->prior < (*runn)->prior))) {
 c032970:	6901      	ldr	r1, [r0, #16]
 c032972:	6912      	ldr	r2, [r2, #16]
 c032974:	4291      	cmp	r1, r2
 c032976:	d201      	bcs.n	c03297c <tfm_thrd_set_status+0x2c>
        *runn = node;
 c032978:	6018      	str	r0, [r3, #0]
}
 c03297a:	bd08      	pop	{r3, pc}
        *runn = LIST_HEAD;
 c03297c:	4a04      	ldr	r2, [pc, #16]	; (c032990 <tfm_thrd_set_status+0x40>)
 c03297e:	6812      	ldr	r2, [r2, #0]
 c032980:	601a      	str	r2, [r3, #0]
}
 c032982:	e7fa      	b.n	c03297a <tfm_thrd_set_status+0x2a>
 c032984:	0c0359dc 	.word	0x0c0359dc
 c032988:	0c0357d2 	.word	0x0c0357d2
 c03298c:	3003f270 	.word	0x3003f270
 c032990:	3003f274 	.word	0x3003f274

0c032994 <tfm_thrd_start>:
{
 c032994:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ((pth->status != THRD_STAT_CREATING) ||
 c032998:	6945      	ldr	r5, [r0, #20]
{
 c03299a:	4604      	mov	r4, r0
    if ((pth->status != THRD_STAT_CREATING) ||
 c03299c:	2d00      	cmp	r5, #0
 c03299e:	d145      	bne.n	c032a2c <tfm_thrd_start+0x98>
        (pth->pfn == NULL)                  ||
 c0329a0:	f8d0 a000 	ldr.w	sl, [r0]
    if ((pth->status != THRD_STAT_CREATING) ||
 c0329a4:	f1ba 0f00 	cmp.w	sl, #0
 c0329a8:	d040      	beq.n	c032a2c <tfm_thrd_start+0x98>
        (pth->sp_btm == 0)              ||
 c0329aa:	6886      	ldr	r6, [r0, #8]
        (pth->pfn == NULL)                  ||
 c0329ac:	2e00      	cmp	r6, #0
 c0329ae:	d03d      	beq.n	c032a2c <tfm_thrd_start+0x98>
        (pth->sp_top == 0)) {
 c0329b0:	f8d0 900c 	ldr.w	r9, [r0, #12]
        (pth->sp_btm == 0)              ||
 c0329b4:	f1b9 0f00 	cmp.w	r9, #0
 c0329b8:	d038      	beq.n	c032a2c <tfm_thrd_start+0x98>
    p_ctxa--;
 c0329ba:	f1a6 0820 	sub.w	r8, r6, #32
    tfm_thrd_initialize_context(&pth->state_ctx,
 c0329be:	f100 0718 	add.w	r7, r0, #24
 c0329c2:	f8d0 b004 	ldr.w	fp, [r0, #4]
    tfm_core_util_memset(p_ctxa, 0, sizeof(*p_ctxa));
 c0329c6:	2220      	movs	r2, #32
 c0329c8:	4629      	mov	r1, r5
 c0329ca:	4640      	mov	r0, r8
 c0329cc:	f7fe fe4c 	bl	c031668 <tfm_core_util_memset>
    p_ctxa->lr = (uint32_t)exit_zone;
 c0329d0:	4b17      	ldr	r3, [pc, #92]	; (c032a30 <tfm_thrd_start+0x9c>)
    tfm_core_util_memset(ctx, 0, sizeof(*ctx));
 c0329d2:	2230      	movs	r2, #48	; 0x30
    p_ctxa->lr = (uint32_t)exit_zone;
 c0329d4:	f846 3c0c 	str.w	r3, [r6, #-12]
    p_ctxa->xpsr = XPSR_T32;
 c0329d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    tfm_core_util_memset(ctx, 0, sizeof(*ctx));
 c0329dc:	4629      	mov	r1, r5
    p_ctxa->xpsr = XPSR_T32;
 c0329de:	f846 3c04 	str.w	r3, [r6, #-4]
    p_ctxa->r0 = (uint32_t)param;
 c0329e2:	f846 bc20 	str.w	fp, [r6, #-32]
    p_ctxa->ra = (uint32_t)pfn;
 c0329e6:	f846 ac08 	str.w	sl, [r6, #-8]
    tfm_core_util_memset(ctx, 0, sizeof(*ctx));
 c0329ea:	4638      	mov	r0, r7
 c0329ec:	f7fe fe3c 	bl	c031668 <tfm_core_util_memset>
    tfm_arch_initialize_ctx_ext(&ctx->ctxb, (uint32_t)p_ctxa, (uint32_t)sp_top);
 c0329f0:	464a      	mov	r2, r9
 c0329f2:	4641      	mov	r1, r8
 c0329f4:	4638      	mov	r0, r7
 c0329f6:	f7fe fb10 	bl	c03101a <tfm_arch_initialize_ctx_ext>
    if (*head == NULL || (node->prior <= (*head)->prior)) {
 c0329fa:	4a0e      	ldr	r2, [pc, #56]	; (c032a34 <tfm_thrd_start+0xa0>)
 c0329fc:	6813      	ldr	r3, [r2, #0]
 c0329fe:	b11b      	cbz	r3, c032a08 <tfm_thrd_start+0x74>
 c032a00:	6921      	ldr	r1, [r4, #16]
 c032a02:	6918      	ldr	r0, [r3, #16]
 c032a04:	4281      	cmp	r1, r0
 c032a06:	d809      	bhi.n	c032a1c <tfm_thrd_start+0x88>
        node->next = *head;
 c032a08:	64a3      	str	r3, [r4, #72]	; 0x48
        *head = node;
 c032a0a:	6014      	str	r4, [r2, #0]
    tfm_thrd_set_status(pth, THRD_STAT_RUNNING);
 c032a0c:	2101      	movs	r1, #1
 c032a0e:	4620      	mov	r0, r4
 c032a10:	f7ff ff9e 	bl	c032950 <tfm_thrd_set_status>
}
 c032a14:	4628      	mov	r0, r5
 c032a16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while (iter->next && (node->prior > iter->next->prior)) {
 c032a1a:	4613      	mov	r3, r2
 c032a1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 c032a1e:	b112      	cbz	r2, c032a26 <tfm_thrd_start+0x92>
 c032a20:	6910      	ldr	r0, [r2, #16]
 c032a22:	4281      	cmp	r1, r0
 c032a24:	d8f9      	bhi.n	c032a1a <tfm_thrd_start+0x86>
        node->next = iter->next;
 c032a26:	64a2      	str	r2, [r4, #72]	; 0x48
        iter->next = node;
 c032a28:	649c      	str	r4, [r3, #72]	; 0x48
 c032a2a:	e7ef      	b.n	c032a0c <tfm_thrd_start+0x78>
        return THRD_ERR_INVALID_PARAM;
 c032a2c:	2501      	movs	r5, #1
 c032a2e:	e7f1      	b.n	c032a14 <tfm_thrd_start+0x80>
 c032a30:	0c0189e5 	.word	0x0c0189e5
 c032a34:	3003f274 	.word	0x3003f274

0c032a38 <tfm_thrd_activate_schedule>:
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
 c032a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 c032a3c:	4b01      	ldr	r3, [pc, #4]	; (c032a44 <tfm_thrd_activate_schedule+0xc>)
 c032a3e:	605a      	str	r2, [r3, #4]
}
 c032a40:	4770      	bx	lr
 c032a42:	bf00      	nop
 c032a44:	e000ed00 	.word	0xe000ed00

0c032a48 <tfm_thrd_start_scheduler>:
{
 c032a48:	b508      	push	{r3, lr}
    TFM_ASSERT(CURR_THRD == NULL);
 c032a4a:	4b0b      	ldr	r3, [pc, #44]	; (c032a78 <tfm_thrd_start_scheduler+0x30>)
 c032a4c:	681a      	ldr	r2, [r3, #0]
 c032a4e:	b12a      	cbz	r2, c032a5c <tfm_thrd_start_scheduler+0x14>
 c032a50:	22b1      	movs	r2, #177	; 0xb1
 c032a52:	490a      	ldr	r1, [pc, #40]	; (c032a7c <tfm_thrd_start_scheduler+0x34>)
 c032a54:	480a      	ldr	r0, [pc, #40]	; (c032a80 <tfm_thrd_start_scheduler+0x38>)
 c032a56:	f7e2 fcd7 	bl	c015408 <iprintf>
 c032a5a:	e7fe      	b.n	c032a5a <tfm_thrd_start_scheduler+0x12>
    TFM_ASSERT(pth != NULL);
 c032a5c:	b928      	cbnz	r0, c032a6a <tfm_thrd_start_scheduler+0x22>
 c032a5e:	22b2      	movs	r2, #178	; 0xb2
 c032a60:	4906      	ldr	r1, [pc, #24]	; (c032a7c <tfm_thrd_start_scheduler+0x34>)
 c032a62:	4807      	ldr	r0, [pc, #28]	; (c032a80 <tfm_thrd_start_scheduler+0x38>)
 c032a64:	f7e2 fcd0 	bl	c015408 <iprintf>
 c032a68:	e7fe      	b.n	c032a68 <tfm_thrd_start_scheduler+0x20>
 c032a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CURR_THRD = pth;
 c032a6e:	6018      	str	r0, [r3, #0]
 c032a70:	4b04      	ldr	r3, [pc, #16]	; (c032a84 <tfm_thrd_start_scheduler+0x3c>)
 c032a72:	605a      	str	r2, [r3, #4]
}
 c032a74:	bd08      	pop	{r3, pc}
 c032a76:	bf00      	nop
 c032a78:	3003f26c 	.word	0x3003f26c
 c032a7c:	0c0359f0 	.word	0x0c0359f0
 c032a80:	0c0357d2 	.word	0x0c0357d2
 c032a84:	e000ed00 	.word	0xe000ed00

0c032a88 <tfm_svcall_thrd_exit>:
    CURR_THRD->status = THRD_STAT_DETACH;
 c032a88:	2203      	movs	r2, #3
 c032a8a:	4b04      	ldr	r3, [pc, #16]	; (c032a9c <tfm_svcall_thrd_exit+0x14>)
 c032a8c:	681b      	ldr	r3, [r3, #0]
 c032a8e:	615a      	str	r2, [r3, #20]
 c032a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 c032a94:	4b02      	ldr	r3, [pc, #8]	; (c032aa0 <tfm_svcall_thrd_exit+0x18>)
 c032a96:	605a      	str	r2, [r3, #4]
}
 c032a98:	4770      	bx	lr
 c032a9a:	bf00      	nop
 c032a9c:	3003f26c 	.word	0x3003f26c
 c032aa0:	e000ed00 	.word	0xe000ed00

0c032aa4 <tfm_thrd_context_switch>:
}

void tfm_thrd_context_switch(struct tfm_state_context_ext *ctxb,
                             struct tfm_thrd_ctx *prev,
                             struct tfm_thrd_ctx *next)
{
 c032aa4:	b538      	push	{r3, r4, r5, lr}
 c032aa6:	4605      	mov	r5, r0
 c032aa8:	4614      	mov	r4, r2
    TFM_ASSERT(prev != NULL);
 c032aaa:	4608      	mov	r0, r1
 c032aac:	b929      	cbnz	r1, c032aba <tfm_thrd_context_switch+0x16>
 c032aae:	22cc      	movs	r2, #204	; 0xcc
 c032ab0:	490c      	ldr	r1, [pc, #48]	; (c032ae4 <tfm_thrd_context_switch+0x40>)
 c032ab2:	480d      	ldr	r0, [pc, #52]	; (c032ae8 <tfm_thrd_context_switch+0x44>)
 c032ab4:	f7e2 fca8 	bl	c015408 <iprintf>
 c032ab8:	e7fe      	b.n	c032ab8 <tfm_thrd_context_switch+0x14>
    TFM_ASSERT(next != NULL);
 c032aba:	b92a      	cbnz	r2, c032ac8 <tfm_thrd_context_switch+0x24>
 c032abc:	22cd      	movs	r2, #205	; 0xcd
 c032abe:	4909      	ldr	r1, [pc, #36]	; (c032ae4 <tfm_thrd_context_switch+0x40>)
 c032ac0:	4809      	ldr	r0, [pc, #36]	; (c032ae8 <tfm_thrd_context_switch+0x44>)
 c032ac2:	f7e2 fca1 	bl	c015408 <iprintf>
 c032ac6:	e7fe      	b.n	c032ac6 <tfm_thrd_context_switch+0x22>

    /*
     * First, update latest context into the current thread context.
     * Then, update background context with next thread's context.
     */
    tfm_core_util_memcpy(&prev->state_ctx.ctxb, ctxb, sizeof(*ctxb));
 c032ac8:	2230      	movs	r2, #48	; 0x30
 c032aca:	4629      	mov	r1, r5
 c032acc:	3018      	adds	r0, #24
 c032ace:	f7fe fd95 	bl	c0315fc <tfm_core_util_memcpy>
    tfm_core_util_memcpy(ctxb, &next->state_ctx.ctxb,
 c032ad2:	2230      	movs	r2, #48	; 0x30
 c032ad4:	f104 0118 	add.w	r1, r4, #24
 c032ad8:	4628      	mov	r0, r5
 c032ada:	f7fe fd8f 	bl	c0315fc <tfm_core_util_memcpy>
                         sizeof(next->state_ctx.ctxb));

    /* Update current thread indicator */
    CURR_THRD = next;
 c032ade:	4b03      	ldr	r3, [pc, #12]	; (c032aec <tfm_thrd_context_switch+0x48>)
 c032ae0:	601c      	str	r4, [r3, #0]
}
 c032ae2:	bd38      	pop	{r3, r4, r5, pc}
 c032ae4:	0c035a09 	.word	0x0c035a09
 c032ae8:	0c0357d2 	.word	0x0c0357d2
 c032aec:	3003f26c 	.word	0x3003f26c

0c032af0 <tfm_panic>:
 */
#include <inttypes.h>
#include "tfm_utils.h"

void tfm_panic(void)
{
 c032af0:	e7fe      	b.n	c032af0 <tfm_panic>
	...

0c032af4 <tfm_event_wait>:
#include "tfm_thread.h"
#include "tfm_utils.h"
#include "tfm_wait.h"

void tfm_event_wait(struct tfm_event_t *pevnt)
{
 c032af4:	b510      	push	{r4, lr}
    TFM_ASSERT(pevnt && pevnt->magic == TFM_EVENT_MAGIC);
 c032af6:	4604      	mov	r4, r0
 c032af8:	b118      	cbz	r0, c032b02 <tfm_event_wait+0xe>
 c032afa:	6802      	ldr	r2, [r0, #0]
 c032afc:	4b09      	ldr	r3, [pc, #36]	; (c032b24 <tfm_event_wait+0x30>)
 c032afe:	429a      	cmp	r2, r3
 c032b00:	d005      	beq.n	c032b0e <tfm_event_wait+0x1a>
 c032b02:	220d      	movs	r2, #13
 c032b04:	4908      	ldr	r1, [pc, #32]	; (c032b28 <tfm_event_wait+0x34>)
 c032b06:	4809      	ldr	r0, [pc, #36]	; (c032b2c <tfm_event_wait+0x38>)
 c032b08:	f7e2 fc7e 	bl	c015408 <iprintf>
 c032b0c:	e7fe      	b.n	c032b0c <tfm_event_wait+0x18>

    pevnt->owner = tfm_thrd_curr_thread();
 c032b0e:	f7ff ff0d 	bl	c03292c <tfm_thrd_curr_thread>
    tfm_thrd_set_status(pevnt->owner, THRD_STAT_BLOCK);
 c032b12:	2102      	movs	r1, #2
    pevnt->owner = tfm_thrd_curr_thread();
 c032b14:	6060      	str	r0, [r4, #4]
    tfm_thrd_set_status(pevnt->owner, THRD_STAT_BLOCK);
 c032b16:	f7ff ff1b 	bl	c032950 <tfm_thrd_set_status>
    tfm_thrd_activate_schedule();
}
 c032b1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tfm_thrd_activate_schedule();
 c032b1e:	f7ff bf8b 	b.w	c032a38 <tfm_thrd_activate_schedule>
 c032b22:	bf00      	nop
 c032b24:	65766e74 	.word	0x65766e74
 c032b28:	0c035a21 	.word	0x0c035a21
 c032b2c:	0c0357d2 	.word	0x0c0357d2

0c032b30 <tfm_event_wake>:

void tfm_event_wake(struct tfm_event_t *pevnt, uint32_t retval)
{
 c032b30:	b538      	push	{r3, r4, r5, lr}
 c032b32:	460d      	mov	r5, r1
    TFM_ASSERT(pevnt && pevnt->magic == TFM_EVENT_MAGIC);
 c032b34:	4604      	mov	r4, r0
 c032b36:	b118      	cbz	r0, c032b40 <tfm_event_wake+0x10>
 c032b38:	6802      	ldr	r2, [r0, #0]
 c032b3a:	4b0c      	ldr	r3, [pc, #48]	; (c032b6c <tfm_event_wake+0x3c>)
 c032b3c:	429a      	cmp	r2, r3
 c032b3e:	d005      	beq.n	c032b4c <tfm_event_wake+0x1c>
 c032b40:	2216      	movs	r2, #22
 c032b42:	490b      	ldr	r1, [pc, #44]	; (c032b70 <tfm_event_wake+0x40>)
 c032b44:	480b      	ldr	r0, [pc, #44]	; (c032b74 <tfm_event_wake+0x44>)
 c032b46:	f7e2 fc5f 	bl	c015408 <iprintf>
 c032b4a:	e7fe      	b.n	c032b4a <tfm_event_wake+0x1a>

    if (pevnt->owner && pevnt->owner->status == THRD_STAT_BLOCK) {
 c032b4c:	6840      	ldr	r0, [r0, #4]
 c032b4e:	b160      	cbz	r0, c032b6a <tfm_event_wake+0x3a>
 c032b50:	6943      	ldr	r3, [r0, #20]
 c032b52:	2b02      	cmp	r3, #2
 c032b54:	d109      	bne.n	c032b6a <tfm_event_wake+0x3a>
        tfm_thrd_set_status(pevnt->owner, THRD_STAT_RUNNING);
 c032b56:	2101      	movs	r1, #1
 c032b58:	f7ff fefa 	bl	c032950 <tfm_thrd_set_status>
        tfm_thrd_set_retval(pevnt->owner, retval);
 c032b5c:	6863      	ldr	r3, [r4, #4]
 *  could set its return value to the caller before caller goes.
 */
void __STATIC_INLINE tfm_thrd_set_retval(struct tfm_thrd_ctx *pth,
                                         uint32_t retval)
{
    TFM_STATE_RET_VAL(&pth->state_ctx) = retval;
 c032b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c032b60:	601d      	str	r5, [r3, #0]
        tfm_thrd_activate_schedule();
    }
}
 c032b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        tfm_thrd_activate_schedule();
 c032b66:	f7ff bf67 	b.w	c032a38 <tfm_thrd_activate_schedule>
}
 c032b6a:	bd38      	pop	{r3, r4, r5, pc}
 c032b6c:	65766e74 	.word	0x65766e74
 c032b70:	0c035a30 	.word	0x0c035a30
 c032b74:	0c0357d2 	.word	0x0c0357d2

0c032b78 <_write>:
    return ch;
}
#elif defined(__GNUC__)
/* Redirects printf to TFM_DRIVER_STDIO in case of GNUARM */
int _write(int fd, char *str, int len)
{
 c032b78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 c032b7a:	460e      	mov	r6, r1
 c032b7c:	4615      	mov	r5, r2
    int i;

    for (i = 0; i < len; i++) {
 c032b7e:	460c      	mov	r4, r1
    ret = TFM_DRIVER_STDIO.Send(&c, 1);
 c032b80:	4f08      	ldr	r7, [pc, #32]	; (c032ba4 <_write+0x2c>)
    for (i = 0; i < len; i++) {
 c032b82:	1ba3      	subs	r3, r4, r6
 c032b84:	429d      	cmp	r5, r3
 c032b86:	dc02      	bgt.n	c032b8e <_write+0x16>
        uart_putc(str[i]);
    }

    /* Return the number of characters written */
    return len;
}
 c032b88:	4628      	mov	r0, r5
 c032b8a:	b003      	add	sp, #12
 c032b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uart_putc(str[i]);
 c032b8e:	f814 3b01 	ldrb.w	r3, [r4], #1
    ret = TFM_DRIVER_STDIO.Send(&c, 1);
 c032b92:	2101      	movs	r1, #1
 c032b94:	f88d 3007 	strb.w	r3, [sp, #7]
 c032b98:	f10d 0007 	add.w	r0, sp, #7
 c032b9c:	697b      	ldr	r3, [r7, #20]
 c032b9e:	4798      	blx	r3
 c032ba0:	e7ef      	b.n	c032b82 <_write+0xa>
 c032ba2:	bf00      	nop
 c032ba4:	0c032c50 	.word	0x0c032c50

0c032ba8 <stdio_init>:
    return ch;
}
#endif

void stdio_init(void)
{
 c032ba8:	b510      	push	{r4, lr}
#ifdef NDEBUG
    __attribute__((unused))
#endif
    int32_t ret = ARM_DRIVER_OK;
    ret = TFM_DRIVER_STDIO.Initialize(NULL);
 c032baa:	4c05      	ldr	r4, [pc, #20]	; (c032bc0 <stdio_init+0x18>)
 c032bac:	2000      	movs	r0, #0
 c032bae:	68a3      	ldr	r3, [r4, #8]
 c032bb0:	4798      	blx	r3
    ASSERT_HIGH(ret);

    ret = TFM_DRIVER_STDIO.Control(ARM_USART_MODE_ASYNCHRONOUS, 115200);
 c032bb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 c032bb4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    ASSERT_HIGH(ret);
}
 c032bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ret = TFM_DRIVER_STDIO.Control(ARM_USART_MODE_ASYNCHRONOUS, 115200);
 c032bbc:	2001      	movs	r0, #1
 c032bbe:	4718      	bx	r3
 c032bc0:	0c032c50 	.word	0x0c032c50

0c032bc4 <_close>:
 c032bc4:	4b02      	ldr	r3, [pc, #8]	; (c032bd0 <_close+0xc>)
 c032bc6:	2258      	movs	r2, #88	; 0x58
 c032bc8:	f04f 30ff 	mov.w	r0, #4294967295
 c032bcc:	601a      	str	r2, [r3, #0]
 c032bce:	4770      	bx	lr
 c032bd0:	3003f2b0 	.word	0x3003f2b0

0c032bd4 <_fstat>:
 c032bd4:	4b02      	ldr	r3, [pc, #8]	; (c032be0 <_fstat+0xc>)
 c032bd6:	2258      	movs	r2, #88	; 0x58
 c032bd8:	f04f 30ff 	mov.w	r0, #4294967295
 c032bdc:	601a      	str	r2, [r3, #0]
 c032bde:	4770      	bx	lr
 c032be0:	3003f2b0 	.word	0x3003f2b0

0c032be4 <_isatty>:
 c032be4:	4b02      	ldr	r3, [pc, #8]	; (c032bf0 <_isatty+0xc>)
 c032be6:	2258      	movs	r2, #88	; 0x58
 c032be8:	2000      	movs	r0, #0
 c032bea:	601a      	str	r2, [r3, #0]
 c032bec:	4770      	bx	lr
 c032bee:	bf00      	nop
 c032bf0:	3003f2b0 	.word	0x3003f2b0

0c032bf4 <_lseek>:
 c032bf4:	4b02      	ldr	r3, [pc, #8]	; (c032c00 <_lseek+0xc>)
 c032bf6:	2258      	movs	r2, #88	; 0x58
 c032bf8:	f04f 30ff 	mov.w	r0, #4294967295
 c032bfc:	601a      	str	r2, [r3, #0]
 c032bfe:	4770      	bx	lr
 c032c00:	3003f2b0 	.word	0x3003f2b0

0c032c04 <_read>:
 c032c04:	4b02      	ldr	r3, [pc, #8]	; (c032c10 <_read+0xc>)
 c032c06:	2258      	movs	r2, #88	; 0x58
 c032c08:	f04f 30ff 	mov.w	r0, #4294967295
 c032c0c:	601a      	str	r2, [r3, #0]
 c032c0e:	4770      	bx	lr
 c032c10:	3003f2b0 	.word	0x3003f2b0

0c032c14 <_sbrk>:
 c032c14:	4b04      	ldr	r3, [pc, #16]	; (c032c28 <_sbrk+0x14>)
 c032c16:	4602      	mov	r2, r0
 c032c18:	6819      	ldr	r1, [r3, #0]
 c032c1a:	b909      	cbnz	r1, c032c20 <_sbrk+0xc>
 c032c1c:	4903      	ldr	r1, [pc, #12]	; (c032c2c <_sbrk+0x18>)
 c032c1e:	6019      	str	r1, [r3, #0]
 c032c20:	6818      	ldr	r0, [r3, #0]
 c032c22:	4402      	add	r2, r0
 c032c24:	601a      	str	r2, [r3, #0]
 c032c26:	4770      	bx	lr
 c032c28:	3003f280 	.word	0x3003f280
 c032c2c:	30034b00 	.word	0x30034b00

0c032c30 <_exit>:
 c032c30:	e7fe      	b.n	c032c30 <_exit>
	...

0c032c34 <_init>:
 c032c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c032c36:	bf00      	nop
 c032c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c032c3a:	bc08      	pop	{r3}
 c032c3c:	469e      	mov	lr, r3
 c032c3e:	4770      	bx	lr

0c032c40 <_fini>:
 c032c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c032c42:	bf00      	nop
 c032c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c032c46:	bc08      	pop	{r3}
 c032c48:	469e      	mov	lr, r3
 c032c4a:	4770      	bx	lr

0c032c4c <DriverVersion>:
 c032c4c:	0203 0202                                   ....

0c032c50 <Driver_USART0>:
 c032c50:	9801 0c01 9815 0c01 9891 0c01 9819 0c01     ................
 c032c60:	981d 0c01 986d 0c01 984d 0c01 9823 0c01     ....m...M...#...
 c032c70:	9829 0c01 9947 0c01 982f 0c01 9833 0c01     )...G.../...3...
 c032c80:	9941 0c01 983f 0c01                         A...?...

0c032c88 <ARM_FLASH0_DEV_DATA>:
 c032c88:	0000 0000 0080 0000 1000 0000 0800 0000     ................
 c032c98:	0008 0000 00ff 0000                         ........

0c032ca0 <DriverVersion>:
 c032ca0:	0201 0100                                   ....

0c032ca4 <TFM_Driver_FLASH0>:
 c032ca4:	994d 0c01 9961 0c01 99d5 0c01 9965 0c01     M...a.......e...
 c032cb4:	9969 0c01 999d 0c01 99e5 0c01 9aa5 0c01     i...............
 c032cc4:	997f 0c01 9985 0c01 9991 0c01 535b 6365     ............[Sec
 c032cd4:	4820 6e61 6c64 7265 205d 4600 6961 656c      Handler] .Faile
 c032ce4:	2064 6f74 7320 7465 7520 2070 6e69 7469     d to set up init
 c032cf4:	6169 206c 504d 2055 6f63 666e 6769 7275     ial MPU configur
 c032d04:	7461 6f69 216e 4820 6c61 6974 676e 002e     ation! Halting..

0c032d14 <AHBPrescTable>:
	...
 c032d1c:	0201 0403 0706 0908                         ........

0c032d24 <APBPrescTable>:
 c032d24:	0000 0000 0201 0403                         ........

0c032d2c <MSIRangeTable>:
 c032d2c:	86a0 0001 0d40 0003 1a80 0006 3500 000c     ....@........5..
 c032d3c:	4240 000f 8480 001e 0900 003d 1200 007a     @B........=...z.
 c032d4c:	2400 00f4 3600 016e 4800 01e8 6c00 02dc     .$...6n..H...l..
	...

0c032d6c <memory_regions>:
 c032d6c:	8400 0803 8400 0803 ffff 0807 5c80 0c03     .............\..
 c032d7c:	5ce0 0c03                                   .\..

0c032d80 <CSWTCH.301>:
 c032d80:	0401 0802                                   ....

0c032d84 <CSWTCH.302>:
 c032d84:	1000 1010 1004 1010 1002 1010                .............

0c032d91 <base64_dec_map>:
 c032d91:	7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f     ................
 c032da1:	7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f     ................
 c032db1:	7f7f 7f7f 7f7f 7f7f 7f7f 3e7f 7f7f 3f7f     ...........>...?
 c032dc1:	3534 3736 3938 3b3a 3d3c 7f7f 407f 7f7f     456789:;<=...@..
 c032dd1:	007f 0201 0403 0605 0807 0a09 0c0b 0e0d     ................
 c032de1:	100f 1211 1413 1615 1817 7f19 7f7f 7f7f     ................
 c032df1:	1a7f 1c1b 1e1d 201f 2221 2423 2625 2827     ....... !"#$%&'(
 c032e01:	2a29 2c2b 2e2d 302f 3231 7f33 7f7f 7f7f     )*+,-./0123.....
 c032e11:	0000                                         ...

0c032e14 <small_prime>:
 c032e14:	0003 0000 0005 0000 0007 0000 000b 0000     ................
 c032e24:	000d 0000 0011 0000 0013 0000 0017 0000     ................
 c032e34:	001d 0000 001f 0000 0025 0000 0029 0000     ........%...)...
 c032e44:	002b 0000 002f 0000 0035 0000 003b 0000     +.../...5...;...
 c032e54:	003d 0000 0043 0000 0047 0000 0049 0000     =...C...G...I...
 c032e64:	004f 0000 0053 0000 0059 0000 0061 0000     O...S...Y...a...
 c032e74:	0065 0000 0067 0000 006b 0000 006d 0000     e...g...k...m...
 c032e84:	0071 0000 007f 0000 0083 0000 0089 0000     q...............
 c032e94:	008b 0000 0095 0000 0097 0000 009d 0000     ................
 c032ea4:	00a3 0000 00a7 0000 00ad 0000 00b3 0000     ................
 c032eb4:	00b5 0000 00bf 0000 00c1 0000 00c5 0000     ................
 c032ec4:	00c7 0000 00d3 0000 00df 0000 00e3 0000     ................
 c032ed4:	00e5 0000 00e9 0000 00ef 0000 00f1 0000     ................
 c032ee4:	00fb 0000 0101 0000 0107 0000 010d 0000     ................
 c032ef4:	010f 0000 0115 0000 0119 0000 011b 0000     ................
 c032f04:	0125 0000 0133 0000 0137 0000 0139 0000     %...3...7...9...
 c032f14:	013d 0000 014b 0000 0151 0000 015b 0000     =...K...Q...[...
 c032f24:	015d 0000 0161 0000 0167 0000 016f 0000     ]...a...g...o...
 c032f34:	0175 0000 017b 0000 017f 0000 0185 0000     u...{...........
 c032f44:	018d 0000 0191 0000 0199 0000 01a3 0000     ................
 c032f54:	01a5 0000 01af 0000 01b1 0000 01b7 0000     ................
 c032f64:	01bb 0000 01c1 0000 01c9 0000 01cd 0000     ................
 c032f74:	01cf 0000 01d3 0000 01df 0000 01e7 0000     ................
 c032f84:	01eb 0000 01f3 0000 01f7 0000 01fd 0000     ................
 c032f94:	0209 0000 020b 0000 021d 0000 0223 0000     ............#...
 c032fa4:	022d 0000 0233 0000 0239 0000 023b 0000     -...3...9...;...
 c032fb4:	0241 0000 024b 0000 0251 0000 0257 0000     A...K...Q...W...
 c032fc4:	0259 0000 025f 0000 0265 0000 0269 0000     Y..._...e...i...
 c032fd4:	026b 0000 0277 0000 0281 0000 0283 0000     k...w...........
 c032fe4:	0287 0000 028d 0000 0293 0000 0295 0000     ................
 c032ff4:	02a1 0000 02a5 0000 02ab 0000 02b3 0000     ................
 c033004:	02bd 0000 02c5 0000 02cf 0000 02d7 0000     ................
 c033014:	02dd 0000 02e3 0000 02e7 0000 02ef 0000     ................
 c033024:	02f5 0000 02f9 0000 0301 0000 0305 0000     ................
 c033034:	0313 0000 031d 0000 0329 0000 032b 0000     ........)...+...
 c033044:	0335 0000 0337 0000 033b 0000 033d 0000     5...7...;...=...
 c033054:	0347 0000 0355 0000 0359 0000 035b 0000     G...U...Y...[...
 c033064:	035f 0000 036d 0000 0371 0000 0373 0000     _...m...q...s...
 c033074:	0377 0000 038b 0000 038f 0000 0397 0000     w...............
 c033084:	03a1 0000 03a9 0000 03ad 0000 03b3 0000     ................
 c033094:	03b9 0000 03c7 0000 03cb 0000 03d1 0000     ................
 c0330a4:	03d7 0000 03df 0000 03e5 0000 ff99 ffff     ................

0c0330b4 <aes_128_cbc_info>:
 c0330b4:	0205 0000 0080 0000 34fd 0c03 0010 0000     .........4......
 c0330c4:	0000 0000 0010 0000 3300 0c03               .........3..

0c0330d0 <aes_128_ccm_info>:
 c0330d0:	082b 0000 0080 0000 3440 0c03 000c 0000     +.......@4......
 c0330e0:	0001 0000 0010 0000 3328 0c03               ........(3..

0c0330ec <aes_128_cfb128_info>:
 c0330ec:	0308 0000 0080 0000 34d6 0c03 0010 0000     .........4......
 c0330fc:	0000 0000 0010 0000 3300 0c03               .........3..

0c033108 <aes_128_ctr_info>:
 c033108:	050b 0000 0080 0000 3488 0c03 0010 0000     .........4......
 c033118:	0000 0000 0010 0000 3300 0c03               .........3..

0c033124 <aes_128_ecb_info>:
 c033124:	0102 0000 0080 0000 3521 0c03 0000 0000     ........!5......
 c033134:	0000 0000 0010 0000 3300 0c03               .........3..

0c033140 <aes_128_gcm_info>:
 c033140:	060e 0000 0080 0000 3464 0c03 000c 0000     ........d4......
 c033150:	0001 0000 0010 0000 3350 0c03               ........P3..

0c03315c <aes_128_ofb_info>:
 c03315c:	0443 0000 0080 0000 34ac 0c03 0010 0000     C........4......
 c03316c:	0000 0000 0010 0000 3300 0c03               .........3..

0c033178 <aes_192_cbc_info>:
 c033178:	0206 0000 00c0 0000 34f1 0c03 0010 0000     .........4......
 c033188:	0000 0000 0010 0000 3300 0c03               .........3..

0c033194 <aes_192_ccm_info>:
 c033194:	082c 0000 00c0 0000 3434 0c03 000c 0000     ,.......44......
 c0331a4:	0001 0000 0010 0000 3328 0c03               ........(3..

0c0331b0 <aes_192_cfb128_info>:
 c0331b0:	0309 0000 00c0 0000 34c7 0c03 0010 0000     .........4......
 c0331c0:	0000 0000 0010 0000 3300 0c03               .........3..

0c0331cc <aes_192_ctr_info>:
 c0331cc:	050c 0000 00c0 0000 347c 0c03 0010 0000     ........|4......
 c0331dc:	0000 0000 0010 0000 3300 0c03               .........3..

0c0331e8 <aes_192_ecb_info>:
 c0331e8:	0103 0000 00c0 0000 3515 0c03 0000 0000     .........5......
 c0331f8:	0000 0000 0010 0000 3300 0c03               .........3..

0c033204 <aes_192_gcm_info>:
 c033204:	060f 0000 00c0 0000 3458 0c03 000c 0000     ........X4......
 c033214:	0001 0000 0010 0000 3350 0c03               ........P3..

0c033220 <aes_192_ofb_info>:
 c033220:	0444 0000 00c0 0000 34a0 0c03 0010 0000     D........4......
 c033230:	0000 0000 0010 0000 3300 0c03               .........3..

0c03323c <aes_256_cbc_info>:
 c03323c:	0207 0000 0100 0000 34e5 0c03 0010 0000     .........4......
 c03324c:	0000 0000 0010 0000 3300 0c03               .........3..

0c033258 <aes_256_ccm_info>:
 c033258:	082d 0000 0100 0000 3428 0c03 000c 0000     -.......(4......
 c033268:	0001 0000 0010 0000 3328 0c03               ........(3..

0c033274 <aes_256_cfb128_info>:
 c033274:	030a 0000 0100 0000 34b8 0c03 0010 0000     .........4......
 c033284:	0000 0000 0010 0000 3300 0c03               .........3..

0c033290 <aes_256_ctr_info>:
 c033290:	050d 0000 0100 0000 3470 0c03 0010 0000     ........p4......
 c0332a0:	0000 0000 0010 0000 3300 0c03               .........3..

0c0332ac <aes_256_ecb_info>:
 c0332ac:	0104 0000 0100 0000 3509 0c03 0000 0000     .........5......
 c0332bc:	0000 0000 0010 0000 3300 0c03               .........3..

0c0332c8 <aes_256_gcm_info>:
 c0332c8:	0610 0000 0100 0000 344c 0c03 000c 0000     ........L4......
 c0332d8:	0001 0000 0010 0000 3350 0c03               ........P3..

0c0332e4 <aes_256_ofb_info>:
 c0332e4:	0445 0000 0100 0000 3494 0c03 0010 0000     E........4......
 c0332f4:	0000 0000 0010 0000 3300 0c03               .........3..

0c033300 <aes_info>:
 c033300:	0002 0000 0275 0c02 0271 0c02 026d 0c02     ....u...q...m...
 c033310:	0269 0c02 0265 0c02 0261 0c02 025d 0c02     i...e...a...]...
 c033320:	0245 0c02 0233 0c02                         E...3...

0c033328 <ccm_aes_info>:
 c033328:	0002 0000 0000 0000 0000 0000 0000 0000     ................
	...
 c033340:	01f5 0c02 01f5 0c02 01df 0c02 01cd 0c02     ................

0c033350 <gcm_aes_info>:
 c033350:	0002 0000 0000 0000 0000 0000 0000 0000     ................
	...
 c033368:	0229 0c02 0229 0c02 0211 0c02 01ff 0c02     )...)...........

0c033378 <mbedtls_cipher_definitions>:
 c033378:	0002 0000 3124 0c03 0003 0000 31e8 0c03     ....$1.......1..
 c033388:	0004 0000 32ac 0c03 0005 0000 30b4 0c03     .....2.......0..
 c033398:	0006 0000 3178 0c03 0007 0000 323c 0c03     ....x1......<2..
 c0333a8:	0008 0000 30ec 0c03 0009 0000 31b0 0c03     .....0.......1..
 c0333b8:	000a 0000 3274 0c03 0043 0000 315c 0c03     ....t2..C...\1..
 c0333c8:	0044 0000 3220 0c03 0045 0000 32e4 0c03     D... 2..E....2..
 c0333d8:	000b 0000 3108 0c03 000c 0000 31cc 0c03     .....1.......1..
 c0333e8:	000d 0000 3290 0c03 000e 0000 3140 0c03     .....2......@1..
 c0333f8:	000f 0000 3204 0c03 0010 0000 32c8 0c03     .....2.......2..
 c033408:	002b 0000 30d0 0c03 002c 0000 3194 0c03     +....0..,....1..
 c033418:	002d 0000 3258 0c03 0000 0000 0000 0000     -...X2..........
 c033428:	4541 2d53 3532 2d36 4343 004d 4541 2d53     AES-256-CCM.AES-
 c033438:	3931 2d32 4343 004d 4541 2d53 3231 2d38     192-CCM.AES-128-
 c033448:	4343 004d 4541 2d53 3532 2d36 4347 004d     CCM.AES-256-GCM.
 c033458:	4541 2d53 3931 2d32 4347 004d 4541 2d53     AES-192-GCM.AES-
 c033468:	3231 2d38 4347 004d 4541 2d53 3532 2d36     128-GCM.AES-256-
 c033478:	5443 0052 4541 2d53 3931 2d32 5443 0052     CTR.AES-192-CTR.
 c033488:	4541 2d53 3231 2d38 5443 0052 4541 2d53     AES-128-CTR.AES-
 c033498:	3532 2d36 464f 0042 4541 2d53 3931 2d32     256-OFB.AES-192-
 c0334a8:	464f 0042 4541 2d53 3231 2d38 464f 0042     OFB.AES-128-OFB.
 c0334b8:	4541 2d53 3532 2d36 4643 3142 3832 4100     AES-256-CFB128.A
 c0334c8:	5345 312d 3239 432d 4246 3231 0038 4541     ES-192-CFB128.AE
 c0334d8:	2d53 3231 2d38 4643 3142 3832 4100 5345     S-128-CFB128.AES
 c0334e8:	322d 3635 432d 4342 4100 5345 312d 3239     -256-CBC.AES-192
 c0334f8:	432d 4342 4100 5345 312d 3832 432d 4342     -CBC.AES-128-CBC
 c033508:	4100 5345 322d 3635 452d 4243 4100 5345     .AES-256-ECB.AES
 c033518:	312d 3239 452d 4243 4100 5345 312d 3832     -192-ECB.AES-128
 c033528:	452d 4243 0000 0000                         -ECB....

0c033530 <ecp_supported_curves>:
 c033530:	0005 0019 0209 0000 35c0 0c03 0008 001c     .........5......
 c033540:	0200 0000 35ca 0c03 0004 0018 0180 0000     .....5..........
 c033550:	35da 0c03 0007 001b 0180 0000 35e4 0c03     .5...........5..
 c033560:	0003 0017 0100 0000 35f4 0c03 000c 0016     .........5......
 c033570:	0100 0000 35fe 0c03 0006 001a 0100 0000     .....5..........
 c033580:	3608 0c03 0002 0015 00e0 0000 3618 0c03     .6...........6..
 c033590:	000b 0014 00e0 0000 3622 0c03 0001 0013     ........"6......
 c0335a0:	00c0 0000 362c 0c03 000a 0012 00c0 0000     ....,6..........
 c0335b0:	3636 0c03 0000 0000 0000 0000 0000 0000     66..............
 c0335c0:	6573 7063 3235 7231 0031 7262 6961 706e     secp521r1.brainp
 c0335d0:	6f6f 506c 3135 7232 0031 6573 7063 3833     oolP512r1.secp38
 c0335e0:	7234 0031 7262 6961 706e 6f6f 506c 3833     4r1.brainpoolP38
 c0335f0:	7234 0031 6573 7063 3532 7236 0031 6573     4r1.secp256r1.se
 c033600:	7063 3532 6b36 0031 7262 6961 706e 6f6f     cp256k1.brainpoo
 c033610:	506c 3532 7236 0031 6573 7063 3232 7234     lP256r1.secp224r
 c033620:	0031 6573 7063 3232 6b34 0031 6573 7063     1.secp224k1.secp
 c033630:	3931 7232 0031 6573 7063 3931 6b32 0031     192r1.secp192k1.

0c033640 <brainpoolP256r1_a>:
 c033640:	b5d9 f330 4b44 e94a 5c6c 26dc 55c1 fb80     ..0.DKJ.l\.&.U..
 c033650:	ffe7 417a 7530 eef6 3057 fc2c 0975 7d5a     ..zA0u..W0,.u.Z}

0c033660 <brainpoolP256r1_b>:
 c033660:	07b6 ff8c dc18 6bcc e1ce 5cf7 1629 9584     .......k...\)...
 c033670:	7cbf bbd7 b5d9 f330 4b44 e94a 5c6c 26dc     .|....0.DKJ.l\.&

0c033680 <brainpoolP256r1_gx>:
 c033680:	3262 9ace 53bd 3a44 23c2 e3bd 27e1 b9de     b2...SD:.#...'..
 c033690:	b7af fc81 482f 2c4b 57cb cb7e aeb9 8bd2     ..../HK,.W~.....

0c0336a0 <brainpoolP256r1_gy>:
 c0336a0:	6997 2f04 54c7 5c1d 8e54 2ded 4513 c277     .i./.T.\T..-.Ew.
 c0336b0:	1dc9 1461 461a 97f8 c4fd c3da f835 547e     ..a..F......5.~T

0c0336c0 <brainpoolP256r1_n>:
 c0336c0:	56a7 9748 0e82 901e a6f7 b561 7aa3 8c39     .VH.......a..z9.
 c0336d0:	8d71 9d83 0a90 3e66 a9bc a1ee 57db a9fb     q.....f>.....W..

0c0336e0 <brainpoolP256r1_p>:
 c0336e0:	5377 1f6e 481d 2013 2028 d526 f623 6e3b     wSn..H. ( &.#.;n
 c0336f0:	8d72 9d83 0a90 3e66 a9bc a1ee 57db a9fb     r.....f>.....W..

0c033700 <brainpoolP384r1_a>:
 c033700:	2826 22ce c7dd 04a8 d4eb 503a 814a 8aa5     &(."......:PJ...
 c033710:	f90f ba91 65ef 1391 2787 4fb2 a28e c2be     .....e...'.O....
 c033720:	afa0 ce05 080a 3c72 150c 3d8c 82c6 7bc3     ......r<...=...{

0c033730 <brainpoolP384r1_b>:
 c033730:	4c11 fa50 8696 3ab7 c994 95db 3902 7cb4     .LP....:.....9.|
 c033740:	62d5 3eeb 0ea5 2e88 d2a6 07dc 7de1 2fb7     .b.>.........}./
 c033750:	447c 16f0 b554 8b39 2826 22ce c7dd 04a8     |D..T.9.&(."....

0c033760 <brainpoolP384r1_gx>:
 c033760:	af1e 47d4 b2e2 ef87 46aa 36d6 e034 e826     ...G.....F.64.&.
 c033770:	10e8 0cbd cafe db7f 4fe3 7ef1 a3e7 8847     .........O.~..G.
 c033780:	3f6b b7c1 3a81 a2a6 45ff 68cf 64f0 1d1c     k?...:...E.h.d..

0c033790 <brainpoolP384r1_gy>:
 c033790:	5315 263c 0341 4282 8111 7791 4621 0e46     .S<&A..B...w!FF.
 c0337a0:	2928 f991 054f e19c 5864 feec 0b29 62b7     ()..O...dX..)..b
 c0337b0:	d552 95cf eb8e 5cb1 c2a4 20f9 1d75 8abe     R......\... u...

0c0337c0 <brainpoolP384r1_n>:
 c0337c0:	6565 e904 3202 3b88 c310 6b7f b6af cf3a     ee...2.;...k..:.
 c0337d0:	25a7 ac04 6e6c 1f16 56b3 ed54 7109 152f     .%..ln...VT..q/.
 c0337e0:	41df 50e6 6f7e 0f5d 6d28 a338 1e82 8cb9     .A.P~o].(m8.....

0c0337f0 <brainpoolP384r1_p>:
 c0337f0:	ec53 3107 0013 8747 1a71 901d a729 acd3     S..1..G.q...)...
 c033800:	1123 7fb7 da19 12b1 56b4 ed54 7109 152f     #........VT..q/.
 c033810:	41df 50e6 6f7e 0f5d 6d28 a338 1e82 8cb9     .A.P~o].(m8.....

0c033820 <brainpoolP512r1_a>:
 c033820:	94ca 77fc ac4d e7c1 c7b9 2bf2 17a7 7f11     ...wM......+....
 c033830:	c8b5 8b9a f1c9 0a2e 3aa1 a825 5d5a 2ded     .........:%.Z].-
 c033840:	63bc ea98 41ca a834 1610 3df9 dd8d 94cb     .c...A4....=....
 c033850:	4cc5 ac23 7145 e232 3b89 8b60 a331 7830     .L#.Eq2..;`.1.0x

0c033860 <brainpoolP512r1_b>:
 c033860:	f723 8016 bd63 2809 e5dd 5eba 50b7 9840     #...c..(...^.P@.
 c033870:	3e67 dc08 94ca 77fc ac4d e7c1 c7b9 2bf2     g>.....wM......+
 c033880:	17a7 7f11 c8b5 8b9a f1c9 0a2e 3aa1 a825     .............:%.
 c033890:	5d5a 2ded 63bc ea98 41ca a834 1610 3df9     Z].-.c...A4....=

0c0338a0 <brainpoolP512r1_gx>:
 c0338a0:	f822 bcb9 2209 8b35 5e68 406a 5047 7c6d     "...."5.h^j@GPm|
 c0338b0:	7d5f 93b9 687b 50d1 d48d e2d0 1f78 ff3b     _}..{h.P....x.;.
 c0338c0:	098e f4d0 62ee b43b 16c1 b5d9 9f70 85ed     .....b;.....p...
 c0338d0:	6a93 9c4c 322e 5a21 d964 d82e e4bd 81ae     .jL..2!Zd.......

0c0338e0 <brainpoolP512r1_gy>:
 c0338e0:	0892 3ad8 1e0f 78cd 5406 a8f0 2b2f d1ca     ...:...x.T../+..
 c0338f0:	63ae 8a27 4bd8 5bca 485e 4a5f de49 b2dc     .c'..K.[^H_JI...
 c033900:	8111 881f c55b a000 7b1a 24a5 f700 f209     ....[....{.$....
 c033910:	22fd cf78 bfa9 c0ea 32ec 5663 385d 7dde     ."x......2cV]8.}

0c033920 <brainpoolP512r1_n>:
 c033920:	0069 9ca9 9682 b587 dadd 085d d381 1db1     i.........].....
 c033930:	1047 7fac 6119 4186 2619 4ca9 5c41 553e     G....a.A.&.LA\>U
 c033940:	0870 7033 9cca d663 d20e b3c9 8db3 cb30     p.3p..c.......0.
 c033950:	fc07 33c9 e6ae 3fd4 c48b dbe9 9db8 aadd     ...3...?........

0c033960 <brainpoolP512r1_p>:
 c033960:	48f3 583a 6056 28aa c685 2d82 ff2f 2881     .H:XV`.(...-/..(
 c033970:	80e6 e6a3 a12a aecd 6842 9bc6 9b00 7d4d     ....*...Bh....M}
 c033980:	0871 7033 9cca d663 d20e b3c9 8db3 cb30     q.3p..c.......0.
 c033990:	fc07 33c9 e6ae 3fd4 c48b dbe9 9db8 aadd     ...3...?........
 c0339a0:	3130 4244 3234 3100 4434 4645 4439 4145     01DB42.14DEF9DEA
 c0339b0:	4632 3937 4443 3536 3138 3632 3133 3541     2F79CD65812631A5
 c0339c0:	4643 4435 4533 0044 3839 4141 3800 3333     CF5D3ED.98AA.833
 c0339d0:	4435 3143 3336 4242 3231 4234 3536 3231     5DC163BB124B6512
 c0339e0:	4339 3639 4446 3945 3333 3844 3744 3332     9C96FDE933D8D723
 c0339f0:	3741 4130 4441 3843 3337 3644 3544 4134     A70AADC873D6D54A
 c033a00:	4237 3042 0044 0000                         7BB0D...

0c033a08 <secp192k1_a>:
 c033a08:	0000 0000                                   ....

0c033a0c <secp192k1_b>:
 c033a0c:	0003 0000                                   ....

0c033a10 <secp192k1_gx>:
 c033a10:	6c7d eae0 d1b1 1da5 f434 80b7 7d02 26b0     }l......4....}.&
 c033a20:	e9ae c057 f10e db4f                         ..W...O.

0c033a28 <secp192k1_gy>:
 c033a28:	2f9d d95e aa88 4082 8634 15be 63d0 8441     ./^....@4....cA.
 c033a38:	28a7 9c56 2f6d 9b2f                         .(V.m//.

0c033a40 <secp192k1_n>:
 c033a40:	fd8d 74de 466a 0f69 fc17 26f2 fffe ffff     ...tjFi....&....
 c033a50:	ffff ffff ffff ffff                         ........

0c033a58 <secp192k1_p>:
 c033a58:	ee37 ffff fffe ffff ffff ffff ffff ffff     7...............
 c033a68:	ffff ffff ffff ffff                         ........

0c033a70 <secp192r1_b>:
 c033a70:	b9b1 c146 deec feb8 3049 7224 e9ab 0fa7     ..F.....I0$r....
 c033a80:	80e7 e59c 0519 6421                         ......!d

0c033a88 <secp192r1_gx>:
 c033a88:	1012 82ff 0afd f4ff 8800 43a1 20eb 7cbf     ...........C. .|
 c033a98:	90f6 b030 a80e 188d                         ..0.....

0c033aa0 <secp192r1_gy>:
 c033aa0:	4811 1e79 77a1 73f9 cdd5 6b24 11ed 6310     .Hy..w.s..$k...c
 c033ab0:	da78 ffc8 2b95 0719                         x....+..

0c033ab8 <secp192r1_n>:
 c033ab8:	2831 b4d2 c9b1 146b f836 99de ffff ffff     1(....k.6.......
 c033ac8:	ffff ffff ffff ffff                         ........

0c033ad0 <secp192r1_p>:
 c033ad0:	ffff ffff ffff ffff fffe ffff ffff ffff     ................
 c033ae0:	ffff ffff ffff ffff                         ........

0c033ae8 <secp224k1_a>:
 c033ae8:	0000 0000                                   ....

0c033aec <secp224k1_b>:
 c033aec:	0005 0000                                   ....

0c033af0 <secp224k1_gx>:
 c033af0:	a45c b6b7 650e 0f7e 75a9 e470 67e9 69a4     \....e~..up..g.i
 c033b00:	28a1 30fc 99df 4df0 5b33 a145               .(.0...M3[E.

0c033b0c <secp224k1_gy>:
 c033b0c:	61a5 556d 4bdb e2ca bd59 c0b0 19f7 f7e3     .amU.K..Y.......
 c033b1c:	fbd6 82ca 3442 7fba 9fed 7e08               ....B4.....~

0c033b28 <secp224k1_n>:
 c033b28:	b1f7 769f a971 caf0 6184 d2ec dce8 0001     ...vq....a......
	...
 c033b44:	0001 0000                                   ....

0c033b48 <secp224k1_p>:
 c033b48:	e56d ffff fffe ffff ffff ffff ffff ffff     m...............
 c033b58:	ffff ffff ffff ffff ffff ffff               ............

0c033b64 <secp224r1_b>:
 c033b64:	ffb4 2355 3943 270b d8ba d7bf b0b7 5044     ..U#C9.'......DP
 c033b74:	3256 f541 b3ab 0c04 0a85 b405               V2A.........

0c033b80 <secp224r1_gx>:
 c033b80:	1d21 115c 80d6 3432 1122 56c2 c1d3 4a03     !.\...24"..V...J
 c033b90:	90b9 3213 bf7f 6bb4 0cbd b70e               ...2...k....

0c033b9c <secp224r1_gy>:
 c033b9c:	7e34 8500 8199 44d5 4764 5a07 75a0 cd43     4~.....DdG.Z.uC.
 c033bac:	dfe6 4c22 23fb b5f7 6388 bd37               .."L.#...c7.

0c033bb8 <secp224r1_n>:
 c033bb8:	2a3d 5c5c 2945 13dd f03e e0b8 16a2 ffff     =*\\E)..>.......
 c033bc8:	ffff ffff ffff ffff ffff ffff               ............

0c033bd4 <secp224r1_p>:
 c033bd4:	0001 0000 0000 0000 0000 0000 ffff ffff     ................
 c033be4:	ffff ffff ffff ffff ffff ffff 0000 0000     ................

0c033bf4 <secp256k1_a>:
 c033bf4:	0000 0000                                   ....

0c033bf8 <secp256k1_b>:
 c033bf8:	0007 0000                                   ....

0c033bfc <secp256k1_gx>:
 c033bfc:	1798 16f8 815b 59f2 28d9 2dce fcdb 029b     ....[..Y.(.-....
 c033c0c:	0b07 ce87 6295 55a0 bbac f9dc 667e 79be     .....b.U....~f.y

0c033c1c <secp256k1_gy>:
 c033c1c:	d4b8 fb10 d08f 9c47 5419 a685 b448 fd17     ......G..T..H...
 c033c2c:	08a8 0e11 fbfc 5da4 c465 26a3 da77 483a     .......]e..&w.:H

0c033c3c <secp256k1_n>:
 c033c3c:	4141 d036 5e8c bfd2 a03b af48 dce6 baae     AA6..^..;.H.....
 c033c4c:	fffe ffff ffff ffff ffff ffff ffff ffff     ................

0c033c5c <secp256k1_p>:
 c033c5c:	fc2f ffff fffe ffff ffff ffff ffff ffff     /...............
 c033c6c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................

0c033c7c <secp256r1_b>:
 c033c7c:	604b 27d2 3c3e 3bce b0f6 cc53 06b0 651d     K`.'><.;..S....e
 c033c8c:	86bc 7698 bd55 b3eb 93e7 aa3a 35d8 5ac6     ...vU.....:..5.Z

0c033c9c <secp256r1_gx>:
 c033c9c:	c296 d898 3945 f4a1 33a0 2deb 7d81 7703     ....E9...3.-.}.w
 c033cac:	40f2 63a4 e6e5 f8bc 4247 e12c d1f2 6b17     .@.c....GB,....k

0c033cbc <secp256r1_gy>:
 c033cbc:	51f5 37bf 4068 cbb6 5ece 6b31 3357 2bce     .Q.7h@...^1kW3.+
 c033ccc:	9e16 7c0f eb4a 8ee7 7f9b fe1a 42e2 4fe3     ...|J........B.O

0c033cdc <secp256r1_n>:
 c033cdc:	2551 fc63 cac2 f3b9 9e84 a717 faad bce6     Q%c.............
 c033cec:	ffff ffff ffff ffff 0000 0000 ffff ffff     ................

0c033cfc <secp256r1_p>:
 c033cfc:	ffff ffff ffff ffff ffff ffff 0000 0000     ................
	...
 c033d14:	0001 0000 ffff ffff                         ........

0c033d1c <secp384r1_b>:
 c033d1c:	2aef d3ec c8ed 2a85 d19d 8a2e 398d c656     .*.....*.....9V.
 c033d2c:	875a 5013 088f 0314 4112 fe81 9c6e 181d     Z..P.....A..n...
 c033d3c:	2d19 e3f8 056b 988e e7e4 e23e 2fa7 b331     .-..k.....>../1.

0c033d4c <secp384r1_gx>:
 c033d4c:	0ab7 7276 5e38 3a54 296c bf55 f25d 5502     ..vr8^T:l)U.]..U
 c033d5c:	2a38 8254 41e0 59f7 9b98 8ba7 3b62 6e1d     8*T..A.Y....b;.n
 c033d6c:	ad74 f320 c71e 8eb1 0537 be8b ca22 aa87     t. .....7..."...

0c033d7c <secp384r1_gy>:
 c033d7c:	0e5f 90ea 1d7c 7a43 819d 1d7e b1ce 0a60     _...|.Cz..~...`.
 c033d8c:	b8c0 b5f0 3113 e9da 147c 289a 1dbd f8f4     .....1..|..(....
 c033d9c:	dc29 9292 98bf 5d9e 2c6f 9626 de4a 3617     )......]o,&.J..6

0c033dac <secp384r1_n>:
 c033dac:	2973 ccc5 196a ecec a77a 48b0 0db2 581a     s)..j...z..H...X
 c033dbc:	2ddf f437 4d81 c763 ffff ffff ffff ffff     .-7..Mc.........
 c033dcc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................

0c033ddc <secp384r1_p>:
 c033ddc:	ffff ffff 0000 0000 0000 0000 ffff ffff     ................
 c033dec:	fffe ffff ffff ffff ffff ffff ffff ffff     ................
 c033dfc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................

0c033e0c <secp521r1_b>:
 c033e0c:	3f00 6b50 1fd4 ef45 34f1 3d2c df88 3573     .?Pk..E..4,=..s5
 c033e1c:	bf07 3bb1 c0bd 1652 937b ec7e 3951 5619     ...;..R.{.~.Q9.V
 c033e2c:	09e1 8ef1 8991 b8b4 15f3 99b3 725b a2da     ............[r..
 c033e3c:	40ee b685 21a0 929a 9a1f 8e1c b961 953e     .@...!......a.>.
 c033e4c:	0051 0000                                   Q...

0c033e50 <secp521r1_gx>:
 c033e50:	bd66 c2e5 7e31 f97e 429b 856a b3c1 3348     f...1~~..Bj...H3
 c033e60:	a8de a2ff c127 fe1d 5928 efe7 5e77 a14b     ....'...(Y..w^K.
 c033e70:	3dba 6b4d af60 f828 b521 053f 8139 9c64     .=Mk`.(.!.?.9.d.
 c033e80:	b442 2395 cb66 9e3e e9cd 0404 06b7 858e     B..#f.>.........
 c033e90:	00c6 0000                                   ....

0c033e94 <secp521r1_gy>:
 c033e94:	6650 9fd1 9476 88be c240 a272 7086 353c     Pf..v...@.r..p<5
 c033ea4:	0761 3fad b901 c550 2640 5ef4 7299 97ee     a..?..P.@&.^.r..
 c033eb4:	662c 273e bd17 17af 4468 579b 4449 98f5     ,f>'....hD.WID..
 c033ec4:	1bd9 2c7d 5fb4 5c8a c004 9a3b 6a78 3929     ..},._.\..;.xj)9
 c033ed4:	0118 0000                                   ....

0c033ed8 <secp521r1_n>:
 c033ed8:	6409 9138 b71e bb6f 47ae 899c c9b8 3bb5     .d8...o..G.....;
 c033ee8:	a5d0 f709 0148 7fcc 966b bf2f 8783 5186     ....H...k./....Q
 c033ef8:	fffa ffff ffff ffff ffff ffff ffff ffff     ................
 c033f08:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 c033f18:	01ff 0000                                   ....

0c033f1c <secp521r1_p>:
 c033f1c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 c033f2c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 c033f3c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 c033f4c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 c033f5c:	01ff 0000                                   ....

0c033f60 <last4>:
	...
 c033f68:	1c20 0000 0000 0000 3840 0000 0000 0000      .......@8......
 c033f78:	2460 0000 0000 0000 7080 0000 0000 0000     `$.......p......
 c033f88:	6ca0 0000 0000 0000 48c0 0000 0000 0000     .l.......H......
 c033f98:	54e0 0000 0000 0000 e100 0000 0000 0000     .T..............
 c033fa8:	fd20 0000 0000 0000 d940 0000 0000 0000      .......@.......
 c033fb8:	c560 0000 0000 0000 9180 0000 0000 0000     `...............
 c033fc8:	8da0 0000 0000 0000 a9c0 0000 0000 0000     ................
 c033fd8:	b5e0 0000 0000 0000                         ........

0c033fe0 <CSWTCH.2>:
 c033fe0:	3ff0 0c03 4020 0c03 4050 0c03 4080 0c03     .?.. @..P@...@..

0c033ff0 <mbedtls_sha224_info>:
 c033ff0:	0005 0000 469f 0c03 001c 0000 0040 0000     .....F......@...
 c034000:	4605 0c02 4601 0c02 45fd 0c02 45f1 0c02     .F...F...E...E..
 c034010:	45db 0c02 45c9 0c02 45c5 0c02 45c1 0c02     .E...E...E...E..

0c034020 <mbedtls_sha256_info>:
 c034020:	0006 0000 46cc 0c03 0020 0000 0040 0000     .....F.. ...@...
 c034030:	460b 0c02 4601 0c02 45fd 0c02 45f7 0c02     .F...F...E...E..
 c034040:	45db 0c02 45c9 0c02 45c5 0c02 45c1 0c02     .E...E...E...E..

0c034050 <mbedtls_sha384_info>:
 c034050:	0007 0000 46f9 0c03 0030 0000 0080 0000     .....F..0.......
 c034060:	4655 0c02 4651 0c02 464d 0c02 4641 0c02     UF..QF..MF..AF..
 c034070:	462b 0c02 4619 0c02 4615 0c02 4611 0c02     +F...F...F...F..

0c034080 <mbedtls_sha512_info>:
 c034080:	0008 0000 4726 0c03 0040 0000 0080 0000     ....&G..@.......
 c034090:	465b 0c02 4651 0c02 464d 0c02 4647 0c02     [F..QF..MF..GF..
 c0340a0:	462b 0c02 4619 0c02 4615 0c02 4611 0c02     +F...F...F...F..
 c0340b0:	812b 0004 0021 812b 0004 0022 812b 0004     +...!.+...".+...
 c0340c0:	0023 812b 0004 001f 812b 0004 0020 812b     #.+.....+... .+.
 c0340d0:	0004 000a 1d55 0020 0000 0000               ....U. .....

0c0340dc <oid_cipher_alg>:
 c0340dc:	44c0 0c03 0005 0000 44c6 0c03 43c7 0c03     .D.......D...C..
 c0340ec:	0021 0000 44cd 0c03 0008 0000 44d6 0c03     !....D.......D..
 c0340fc:	44e3 0c03 0025 0000 0000 0000 0000 0000     .D..%...........
	...

0c034118 <oid_ecp_grp>:
 c034118:	44f0 0c03 0008 0000 362c 0c03 362c 0c03     .D......,6..,6..
 c034128:	0001 0000 40b0 0c03 0005 0000 3618 0c03     .....@.......6..
 c034138:	3618 0c03 0002 0000 44f9 0c03 0008 0000     .6.......D......
 c034148:	35f4 0c03 35f4 0c03 0003 0000 40b6 0c03     .5...5.......@..
 c034158:	0005 0000 35da 0c03 35da 0c03 0004 0000     .....5...5......
 c034168:	40bc 0c03 0005 0000 35c0 0c03 35c0 0c03     .@.......5...5..
 c034178:	0005 0000 40c2 0c03 0005 0000 3636 0c03     .....@......66..
 c034188:	3636 0c03 000a 0000 40c8 0c03 0005 0000     66.......@......
 c034198:	3622 0c03 3622 0c03 000b 0000 40ce 0c03     "6.."6.......@..
 c0341a8:	0005 0000 35fe 0c03 35fe 0c03 000c 0000     .....5...5......
 c0341b8:	4502 0c03 0009 0000 3608 0c03 450c 0c03     .E.......6...E..
 c0341c8:	0006 0000 451b 0c03 0009 0000 35e4 0c03     .....E.......5..
 c0341d8:	4525 0c03 0007 0000 4534 0c03 0009 0000     %E......4E......
 c0341e8:	35ca 0c03 453e 0c03 0008 0000 0000 0000     .5..>E..........
	...

0c034208 <oid_md_alg>:
 c034208:	4470 0c03 0009 0000 447a 0c03 45d8 0c03     pD......zD...E..
 c034218:	0005 0000 4484 0c03 0009 0000 448e 0c03     .....D.......D..
 c034228:	460b 0c03 0006 0000 4498 0c03 0009 0000     .F.......D......
 c034238:	44a2 0c03 463e 0c03 0007 0000 44ac 0c03     .D..>F.......D..
 c034248:	0009 0000 44b6 0c03 4671 0c03 0008 0000     .....D..qF......
	...

0c03426c <oid_md_hmac>:
 c03426c:	43ec 0c03 0008 0000 43f5 0c03 4400 0c03     .C.......C...D..
 c03427c:	0005 0000 440d 0c03 0008 0000 4416 0c03     .....D.......D..
 c03428c:	4421 0c03 0006 0000 442e 0c03 0008 0000     !D.......D......
 c03429c:	4437 0c03 4442 0c03 0007 0000 444f 0c03     7D..BD......OD..
 c0342ac:	0008 0000 4458 0c03 4463 0c03 0008 0000     ....XD..cD......
	...

0c0342d0 <oid_pk_alg>:
 c0342d0:	454d 0c03 0009 0000 4557 0c03 4565 0c03     ME......WE..eE..
 c0342e0:	0001 0000 4569 0c03 0007 0000 4571 0c03     ....iE......qE..
 c0342f0:	4580 0c03 0002 0000 458f 0c03 0005 0000     .E.......E......
 c034300:	4595 0c03 459d 0c03 0003 0000 0000 0000     .E...E..........
	...

0c034320 <oid_pkcs12_pbe_alg>:
 c034320:	435c 0c03 000a 0000 4367 0c03 4387 0c03     \C......gC...C..
 c034330:	2504 0000 43a4 0c03 000a 0000 43af 0c03     .%...C.......C..
 c034340:	43cf 0c03 2304 0000 0000 0000 0000 0000     .C...#..........
	...
 c03435c:	862a 8648 0df7 0c01 0301 7000 6562 6957     *.H........pbeWi
 c03436c:	6874 4853 4141 646e 2d33 654b 5479 6972     thSHAAnd3-KeyTri
 c03437c:	6c70 4465 5345 432d 4342 5000 4542 7720     pleDES-CBC.PBE w
 c03438c:	7469 2068 4853 3141 6120 646e 3320 4b2d     ith SHA1 and 3-K
 c03439c:	7965 3320 4544 0053 862a 8648 0df7 0c01     ey 3DES.*.H.....
 c0343ac:	0401 7000 6562 6957 6874 4853 4141 646e     ...pbeWithSHAAnd
 c0343bc:	2d32 654b 5479 6972 6c70 4465 5345 432d     2-KeyTripleDES-C
 c0343cc:	4342 5000 4542 7720 7469 2068 4853 3141     BC.PBE with SHA1
 c0343dc:	6120 646e 3220 4b2d 7965 3320 4544 0053      and 2-Key 3DES.
 c0343ec:	862a 8648 0df7 0802 6800 616d 5363 4148     *.H......hmacSHA
 c0343fc:	3232 0034 4d48 4341 532d 4148 322d 3432     224.HMAC-SHA-224
 c03440c:	2a00 4886 f786 020d 0009 6d68 6361 4853     .*.H......hmacSH
 c03441c:	3241 3635 4800 414d 2d43 4853 2d41 3532     A256.HMAC-SHA-25
 c03442c:	0036 862a 8648 0df7 0a02 6800 616d 5363     6.*.H......hmacS
 c03443c:	4148 3833 0034 4d48 4341 532d 4148 332d     HA384.HMAC-SHA-3
 c03444c:	3438 2a00 4886 f786 020d 000b 6d68 6361     84.*.H......hmac
 c03445c:	4853 3541 3231 4800 414d 2d43 4853 2d41     SHA512.HMAC-SHA-
 c03446c:	3135 0032 8660 0148 0365 0204 0004 6469     512.`.H.e.....id
 c03447c:	732d 6168 3232 0034 8660 0148 0365 0204     -sha224.`.H.e...
 c03448c:	0001 6469 732d 6168 3532 0036 8660 0148     ..id-sha256.`.H.
 c03449c:	0365 0204 0002 6469 732d 6168 3833 0034     e.....id-sha384.
 c0344ac:	8660 0148 0365 0204 0003 6469 732d 6168     `.H.e.....id-sha
 c0344bc:	3135 0032 0e2b 0203 0007 6564 4373 4342     512.+.....desCBC
 c0344cc:	2a00 4886 f786 030d 0007 6564 2d73 6465     .*.H......des-ed
 c0344dc:	3365 632d 6362 4400 5345 452d 4544 2d33     e3-cbc.DES-EDE3-
 c0344ec:	4243 0043 862a ce48 033d 0101 2a00 4886     CBC.*.H.=....*.H
 c0344fc:	3dce 0103 0007 242b 0303 0802 0101 0007     .=....+$........
 c03450c:	7262 6961 706e 6f6f 326c 3635 3172 2b00     brainpool256r1.+
 c03451c:	0324 0203 0108 0b01 6200 6172 6e69 6f70     $........brainpo
 c03452c:	6c6f 3833 7234 0031 242b 0303 0802 0101     ol384r1.+$......
 c03453c:	000d 7262 6961 706e 6f6f 356c 3231 3172     ..brainpool512r1
 c03454c:	2a00 4886 f786 010d 0101 7200 6173 6e45     .*.H.......rsaEn
 c03455c:	7263 7079 6974 6e6f 5200 4153 2a00 4886     cryption.RSA.*.H
 c03456c:	3dce 0102 6900 2d64 6365 7550 6c62 6369     .=...id-ecPublic
 c03457c:	654b 0079 6547 656e 6972 2063 4345 6b20     Key.Generic EC k
 c03458c:	7965 2b00 0481 0c01 6900 2d64 6365 4844     ey.+.....id-ecDH
 c03459c:	4500 2043 656b 2079 6f66 2072 4345 4844     .EC key for ECDH
 c0345ac:	2a00 4886 f786 010d 0e01 7300 6168 3232     .*.H.......sha22
 c0345bc:	5734 7469 5268 4153 6e45 7263 7079 6974     4WithRSAEncrypti
 c0345cc:	6e6f 5200 4153 7720 7469 2068 4853 2d41     on.RSA with SHA-
 c0345dc:	3232 0034 862a 8648 0df7 0101 000b 6873     224.*.H.......sh
 c0345ec:	3261 3635 6957 6874 5352 4541 636e 7972     a256WithRSAEncry
 c0345fc:	7470 6f69 006e 5352 2041 6977 6874 5320     ption.RSA with S
 c03460c:	4148 322d 3635 2a00 4886 f786 010d 0c01     HA-256.*.H......
 c03461c:	7300 6168 3833 5734 7469 5268 4153 6e45     .sha384WithRSAEn
 c03462c:	7263 7079 6974 6e6f 5200 4153 7720 7469     cryption.RSA wit
 c03463c:	2068 4853 2d41 3833 0034 862a 8648 0df7     h SHA-384.*.H...
 c03464c:	0101 000d 6873 3561 3231 6957 6874 5352     ....sha512WithRS
 c03465c:	4541 636e 7972 7470 6f69 006e 5352 2041     AEncryption.RSA 
 c03466c:	6977 6874 5320 4148 352d 3231 2a00 4886     with SHA-512.*.H
 c03467c:	3dce 0304 0001 6365 7364 2d61 6977 6874     .=....ecdsa-with
 c03468c:	532d 4148 3232 0034 4345 5344 2041 6977     -SHA224.ECDSA wi
 c03469c:	6874 5320 4148 3232 0034 862a ce48 043d     th SHA224.*.H.=.
 c0346ac:	0203 6500 6463 6173 772d 7469 2d68 4853     ...ecdsa-with-SH
 c0346bc:	3241 3635 4500 4443 4153 7720 7469 2068     A256.ECDSA with 
 c0346cc:	4853 3241 3635 2a00 4886 3dce 0304 0003     SHA256.*.H.=....
 c0346dc:	6365 7364 2d61 6977 6874 532d 4148 3833     ecdsa-with-SHA38
 c0346ec:	0034 4345 5344 2041 6977 6874 5320 4148     4.ECDSA with SHA
 c0346fc:	3833 0034 862a ce48 043d 0403 6500 6463     384.*.H.=....ecd
 c03470c:	6173 772d 7469 2d68 4853 3541 3231 4500     sa-with-SHA512.E
 c03471c:	4443 4153 7720 7469 2068 4853 3541 3231     CDSA with SHA512
 c03472c:	2a00 4886 f786 010d 0a01 5200 4153 5353     .*.H.......RSASS
 c03473c:	2d41 5350 0053 6e61 5079 6c6f 6369 0079     A-PSS.anyPolicy.
 c03474c:	6e41 2079 6f50 696c 7963 2b00 0106 0505     Any Policy.+....
 c03475c:	0307 0001 6469 6b2d 2d70 6573 7672 7265     ....id-kp-server
 c03476c:	7541 6874 5400 534c 5720 6265 5320 7265     Auth.TLS Web Ser
 c03477c:	6576 2072 7541 6874 6e65 6974 6163 6974     ver Authenticati
 c03478c:	6e6f 2b00 0106 0505 0307 0002 6469 6b2d     on.+........id-k
 c03479c:	2d70 6c63 6569 746e 7541 6874 5400 534c     p-clientAuth.TLS
 c0347ac:	5720 6265 4320 696c 6e65 2074 7541 6874      Web Client Auth
 c0347bc:	6e65 6974 6163 6974 6e6f 2b00 0106 0505     entication.+....
 c0347cc:	0307 0003 6469 6b2d 2d70 6f63 6564 6953     ....id-kp-codeSi
 c0347dc:	6e67 6e69 0067 6f43 6564 5320 6769 696e     gning.Code Signi
 c0347ec:	676e 2b00 0106 0505 0307 0004 6469 6b2d     ng.+........id-k
 c0347fc:	2d70 6d65 6961 506c 6f72 6574 7463 6f69     p-emailProtectio
 c03480c:	006e 2d45 616d 6c69 5020 6f72 6574 7463     n.E-mail Protect
 c03481c:	6f69 006e 062b 0501 0705 0803 6900 2d64     ion.+........id-
 c03482c:	706b 742d 6d69 5365 6174 706d 6e69 0067     kp-timeStamping.
 c03483c:	6954 656d 5320 6174 706d 6e69 0067 062b     Time Stamping.+.
 c03484c:	0501 0705 0903 6900 2d64 706b 4f2d 5343     .......id-kp-OCS
 c03485c:	5350 6769 696e 676e 4f00 5343 2050 6953     PSigning.OCSP Si
 c03486c:	6e67 6e69 0067 062b 0401 8201 25e4 0001     gning.+......%..
 c03487c:	6469 6b2d 2d70 6977 7573 2d6e 6166 2d6e     id-kp-wisun-fan-
 c03488c:	6564 6976 6563 5700 2d69 5553 204e 6c41     device.Wi-SUN Al
 c03489c:	696c 6e61 6563 4620 6569 646c 4120 6572     liance Field Are
 c0348ac:	2061 654e 7774 726f 206b 4628 4e41 0029     a Network (FAN).
 c0348bc:	1d55 0013 6469 632d 2d65 6162 6973 4363     U...id-ce-basicC
 c0348cc:	6e6f 7473 6172 6e69 7374 4200 7361 6369     onstraints.Basic
 c0348dc:	4320 6e6f 7473 6172 6e69 7374 5500 0f1d      Constraints.U..
 c0348ec:	6900 2d64 6563 6b2d 7965 7355 6761 0065     .id-ce-keyUsage.
 c0348fc:	1d55 0025 6469 632d 2d65 7865 4b74 7965     U.%.id-ce-extKey
 c03490c:	7355 6761 0065 7845 6574 646e 6465 4b20     Usage.Extended K
 c03491c:	7965 5520 6173 6567 5500 111d 6900 2d64     ey Usage.U...id-
 c03492c:	6563 732d 6275 656a 7463 6c41 4e74 6d61     ce-subjectAltNam
 c03493c:	0065 7553 6a62 6365 2074 6c41 2074 614e     e.Subject Alt Na
 c03494c:	656d 6000 4886 8601 42f8 0101 6900 2d64     me.`.H...B...id-
 c03495c:	656e 7374 6163 6570 632d 7265 7474 7079     netscape-certtyp
 c03496c:	0065 654e 7374 6163 6570 4320 7265 6974     e.Netscape Certi
 c03497c:	6966 6163 6574 5420 7079 0065 1d55 0020     ficate Type.U. .
 c03498c:	6469 632d 2d65 6563 7472 6669 6369 7461     id-ce-certificat
 c03499c:	5065 6c6f 6369 6569 0073 6543 7472 6669     ePolicies.Certif
 c0349ac:	6369 7461 2065 6f50 696c 6963 7365 5500     icate Policies.U
 c0349bc:	0304 6900 2d64 7461 632d 6d6f 6f6d 4e6e     ...id-at-commonN
 c0349cc:	6d61 0065 6f43 6d6d 6e6f 4e20 6d61 0065     ame.Common Name.
 c0349dc:	4e43 5500 0604 6900 2d64 7461 632d 756f     CN.U...id-at-cou
 c0349ec:	746e 7972 614e 656d 4300 756f 746e 7972     ntryName.Country
 c0349fc:	5500 0704 6900 2d64 7461 6c2d 636f 6c61     .U...id-at-local
 c034a0c:	7469 0079 6f4c 6163 696c 7974 4c00 5500     ity.Locality.L.U
 c034a1c:	0804 6900 2d64 7461 732d 6174 6574 5300     ...id-at-state.S
 c034a2c:	6174 6574 5300 0054 0455 000a 6469 612d     tate.ST.U...id-a
 c034a3c:	2d74 726f 6167 696e 617a 6974 6e6f 614e     t-organizationNa
 c034a4c:	656d 4f00 6772 6e61 7a69 7461 6f69 006e     me.Organization.
 c034a5c:	0455 000b 6469 612d 2d74 726f 6167 696e     U...id-at-organi
 c034a6c:	617a 6974 6e6f 6c61 6e55 7469 614e 656d     zationalUnitName
 c034a7c:	4f00 6772 5520 696e 0074 554f 2a00 4886     .Org Unit.OU.*.H
 c034a8c:	f786 010d 0109 6500 616d 6c69 6441 7264     .......emailAddr
 c034a9c:	7365 0073 2d45 616d 6c69 6120 6464 6572     ess.E-mail addre
 c034aac:	7373 5500 0504 6900 2d64 7461 732d 7265     ss.U...id-at-ser
 c034abc:	6169 4e6c 6d75 6562 0072 6553 6972 6c61     ialNumber.Serial
 c034acc:	6e20 6d75 6562 0072 0455 0010 6469 612d      number.U...id-a
 c034adc:	2d74 6f70 7473 6c61 6441 7264 7365 0073     t-postalAddress.
 c034aec:	6f50 7473 6c61 6120 6464 6572 7373 5500     Postal address.U
 c034afc:	1104 6900 2d64 7461 702d 736f 6174 436c     ...id-at-postalC
 c034b0c:	646f 0065 6f50 7473 6c61 6320 646f 0065     ode.Postal code.
 c034b1c:	0455 0004 6469 612d 2d74 7573 4e72 6d61     U...id-at-surNam
 c034b2c:	0065 7553 6e72 6d61 0065 4e53 5500 2a04     e.Surname.SN.U.*
 c034b3c:	6900 2d64 7461 672d 7669 6e65 614e 656d     .id-at-givenName
 c034b4c:	4700 7669 6e65 6e20 6d61 0065 4e47 5500     .Given name.GN.U
 c034b5c:	2b04 6900 2d64 7461 692d 696e 6974 6c61     .+.id-at-initial
 c034b6c:	0073 6e49 7469 6169 736c 5500 2c04 6900     s.Initials.U.,.i
 c034b7c:	2d64 7461 672d 6e65 7265 7461 6f69 516e     d-at-generationQ
 c034b8c:	6175 696c 6966 7265 4700 6e65 7265 7461     ualifier.Generat
 c034b9c:	6f69 206e 7571 6c61 6669 6569 0072 0455     ion qualifier.U.
 c034bac:	000c 6469 612d 2d74 6974 6c74 0065 6954     ..id-at-title.Ti
 c034bbc:	6c74 0065 0455 002e 6469 612d 2d74 6e64     tle.U...id-at-dn
 c034bcc:	7551 6c61 6669 6569 0072 6944 7473 6e69     Qualifier.Distin
 c034bdc:	7567 7369 6568 2064 614e 656d 7120 6175     guished Name qua
 c034bec:	696c 6966 7265 5500 4104 6900 2d64 7461     lifier.U.A.id-at
 c034bfc:	702d 6573 6475 6e6f 6d79 5000 6573 6475     -pseudonym.Pseud
 c034c0c:	6e6f 6d79 0900 2692 9389 2cf2 0164 0019     onym...&...,d...
 c034c1c:	6469 642d 6d6f 6961 436e 6d6f 6f70 656e     id-domainCompone
 c034c2c:	746e 4400 6d6f 6961 206e 6f63 706d 6e6f     nt.Domain compon
 c034c3c:	6e65 0074 4344 5500 2d04 6900 2d64 7461     ent.DC.U.-.id-at
 c034c4c:	752d 696e 7571 4965 6564 746e 6669 6569     -uniqueIdentifie
 c034c5c:	0072 6e55 7169 6575 4920 6564 746e 6669     r.Unique Identif
 c034c6c:	6569 0072 7250 636f 542d 7079 3a65 3420     ier.Proc-Type: 4
 c034c7c:	452c 434e 5952 5450 4445 0000               ,ENCRYPTED..

0c034c88 <CSWTCH.8>:
 c034c88:	4d30 0c03 4cd0 0c03 4d00 0c03 4ca0 0c03     0M...L...M...L..
 c034c98:	6365 656b 2e79 0051                         eckey.Q.

0c034ca0 <mbedtls_ecdsa_info>:
 c034ca0:	0004 0000 4d74 0c03 4c71 0c02 4c95 0c02     ....tM..qL...L..
 c034cb0:	4e85 0c02 4e39 0c02 0000 0000 0000 0000     .N..9N..........
 c034cc0:	4e0d 0c02 4e11 0c02 4e27 0c02 4c75 0c02     .N...N..'N..uL..

0c034cd0 <mbedtls_eckey_info>:
 c034cd0:	0002 0000 4d80 0c03 4c71 0c02 4c65 0c02     .....M..qL..eL..
 c034ce0:	4ea5 0c02 4e3d 0c02 0000 0000 0000 0000     .N..=N..........
 c034cf0:	4e0d 0c02 4df7 0c02 4de5 0c02 4c75 0c02     .N...M...M..uL..

0c034d00 <mbedtls_eckeydh_info>:
 c034d00:	0003 0000 4d7a 0c03 4c71 0c02 4c89 0c02     ....zM..qL...L..
	...
 c034d20:	4e0d 0c02 4df7 0c02 4de5 0c02 4c75 0c02     .N...M...M..uL..

0c034d30 <mbedtls_rsa_info>:
 c034d30:	0001 0000 4565 0c03 4ccd 0c02 4c33 0c02     ....eE...L..3L..
 c034d40:	4d99 0c02 4d61 0c02 4d1d 0c02 4cd9 0c02     .M..aM...M...L..
 c034d50:	4cc9 0c02 4caf 0c02 4c9d 0c02 4c41 0c02     .L...L...L..AL..
 c034d60:	7372 2e61 004e 7372 2e61 0045 5352 2d41     rsa.N.rsa.E.RSA-
 c034d70:	6c61 0074 4345 5344 0041 4345 445f 0048     alt.ECDSA.EC_DH.
 c034d80:	4345 2a00 4886 f786 010d 0c05 2d00 2d2d     EC.*.H.......---
 c034d90:	2d2d 4e45 2044 5352 2041 5250 5649 5441     --END RSA PRIVAT
 c034da0:	2045 454b 2d59 2d2d 2d2d 2d00 2d2d 2d2d     E KEY-----.-----
 c034db0:	4542 4947 204e 5352 2041 5250 5649 5441     BEGIN RSA PRIVAT
 c034dc0:	2045 454b 2d59 2d2d 2d2d 2d00 2d2d 2d2d     E KEY-----.-----
 c034dd0:	4e45 2044 4345 5020 4952 4156 4554 4b20     END EC PRIVATE K
 c034de0:	5945 2d2d 2d2d 002d 2d2d 2d2d 422d 4745     EY-----.-----BEG
 c034df0:	4e49 4520 2043 5250 5649 5441 2045 454b     IN EC PRIVATE KE
 c034e00:	2d59 2d2d 2d2d 2d00 2d2d 2d2d 4e45 2044     Y-----.-----END 
 c034e10:	5250 5649 5441 2045 454b 2d59 2d2d 2d2d     PRIVATE KEY-----
 c034e20:	2d00 2d2d 2d2d 4542 4947 204e 5250 5649     .-----BEGIN PRIV
 c034e30:	5441 2045 454b 2d59 2d2d 2d2d 2d00 2d2d     ATE KEY-----.---
 c034e40:	2d2d 4e45 2044 4e45 5243 5059 4554 2044     --END ENCRYPTED 
 c034e50:	5250 5649 5441 2045 454b 2d59 2d2d 2d2d     PRIVATE KEY-----
 c034e60:	2d00 2d2d 2d2d 4542 4947 204e 4e45 5243     .-----BEGIN ENCR
 c034e70:	5059 4554 2044 5250 5649 5441 2045 454b     YPTED PRIVATE KE
 c034e80:	2d59 2d2d 2d2d 2d00 2d2d 2d2d 4e45 2044     Y-----.-----END 
 c034e90:	5352 2041 5550 4c42 4349 4b20 5945 2d2d     RSA PUBLIC KEY--
 c034ea0:	2d2d 002d 2d2d 2d2d 422d 4745 4e49 5220     ---.-----BEGIN R
 c034eb0:	4153 5020 4255 494c 2043 454b 2d59 2d2d     SA PUBLIC KEY---
 c034ec0:	2d2d 2d00 2d2d 2d2d 4e45 2044 5550 4c42     --.-----END PUBL
 c034ed0:	4349 4b20 5945 2d2d 2d2d 002d 2d2d 2d2d     IC KEY-----.----
 c034ee0:	422d 4745 4e49 5020 4255 494c 2043 454b     -BEGIN PUBLIC KE
 c034ef0:	2d59 2d2d 2d2d 2a00 4886 f786 010d 010c     Y-----.*.H......
 c034f00:	0001 862a 8648 0df7 0501 000d 862a ce48     ..*.H.......*.H.
 c034f10:	013d 0001                                   =...

0c034f14 <CSWTCH.326>:
 c034f14:	1513 1817 1a19 1c1b 121d 1614                .............

0c034f21 <CSWTCH.328>:
 c034f21:	010a 020b 030c 0504 0706 0908 000d           ...............

0c034f30 <CSWTCH.334>:
 c034f30:	3ff0 0c03 4020 0c03 4050 0c03 4080 0c03     .?.. @..P@...@..

0c034f40 <CSWTCH.336>:
 c034f40:	4010 4040 0040 4000 8040 0280 0503 0b07     .@@@@..@@.......
 c034f50:	110d 1713 1f1d 2925 2f2b 3b35 433d 4947     ......%)+/5;=CGI
 c034f60:	534f 6159 6765 6d6b 7f71 8983 958b 9d97     OSYaegkmq.......
 c034f70:	a7a3 b3ad bfb5 c5c1 d3c7 e3df e9e5 f1ef     ................
 c034f80:	00fb 0000                                   ....

0c034f84 <K>:
 c034f84:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
 c034f94:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
 c034fa4:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
 c034fb4:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
 c034fc4:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
 c034fd4:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
 c034fe4:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
 c034ff4:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
 c035004:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
 c035014:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
 c035024:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
 c035034:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
 c035044:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
 c035054:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
 c035064:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
 c035074:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.
 c035084:	0000 0000                                   ....

0c035088 <K>:
 c035088:	ae22 d728 2f98 428a 65cd 23ef 4491 7137     ".(../.B.e.#.D7q
 c035098:	3b2f ec4d fbcf b5c0 dbbc 8189 dba5 e9b5     /;M.............
 c0350a8:	b538 f348 c25b 3956 d019 b605 11f1 59f1     8.H.[.V9.......Y
 c0350b8:	4f9b af19 82a4 923f 8118 da6d 5ed5 ab1c     .O....?...m..^..
 c0350c8:	0242 a303 aa98 d807 6fbe 4570 5b01 1283     B........opE.[..
 c0350d8:	b28c 4ee4 85be 2431 b4e2 d5ff 7dc3 550c     ...N..1$.....}.U
 c0350e8:	896f f27b 5d74 72be 96b1 3b16 b1fe 80de     o.{.t].r...;....
 c0350f8:	1235 25c7 06a7 9bdc 2694 cf69 f174 c19b     5..%.....&i.t...
 c035108:	4ad2 9ef1 69c1 e49b 25e3 384f 4786 efbe     .J...i...%O8.G..
 c035118:	d5b5 8b8c 9dc6 0fc1 9c65 77ac a1cc 240c     ........e..w...$
 c035128:	0275 592b 2c6f 2de9 e483 6ea6 84aa 4a74     u.+Yo,.-...n..tJ
 c035138:	fbd4 bd41 a9dc 5cb0 53b5 8311 88da 76f9     ..A....\.S.....v
 c035148:	dfab ee66 5152 983e 3210 2db4 c66d a831     ..f.RQ>..2.-m.1.
 c035158:	213f 98fb 27c8 b003 0ee4 beef 7fc7 bf59     ?!...'........Y.
 c035168:	8fc2 3da8 0bf3 c6e0 a725 930a 9147 d5a7     ...=....%...G...
 c035178:	826f e003 6351 06ca 6e70 0a0e 2967 1429     o...Qc..pn..g)).
 c035188:	2ffc 46d2 0a85 27b7 c926 5c26 2138 2e1b     ./.F...'&.&\8!..
 c035198:	2aed 5ac4 6dfc 4d2c b3df 9d95 0d13 5338     .*.Z.m,M......8S
 c0351a8:	63de 8baf 7354 650a b2a8 3c77 0abb 766a     .c..Ts.e..w<..jv
 c0351b8:	aee6 47ed c92e 81c2 353b 1482 2c85 9272     ...G....;5...,r.
 c0351c8:	0364 4cf1 e8a1 a2bf 3001 bc42 664b a81a     d..L.....0B.Kf..
 c0351d8:	9791 d0f8 8b70 c24b be30 0654 51a3 c76c     ....p.K.0.T..Ql.
 c0351e8:	5218 d6ef e819 d192 a910 5565 0624 d699     .R........eU$...
 c0351f8:	202a 5771 3585 f40e d1b8 32bb a070 106a     * qW.5.....2p.j.
 c035208:	d0c8 b8d2 c116 19a4 ab53 5141 6c08 1e37     ........S.AQ.l7.
 c035218:	eb99 df8e 774c 2748 48a8 e19b bcb5 34b0     ....LwH'.H.....4
 c035228:	5a63 c5c9 0cb3 391c 8acb e341 aa4a 4ed8     cZ.....9..A.J..N
 c035238:	e373 7763 ca4f 5b9c b8a3 d6b2 6ff3 682e     s.cwO..[.....o.h
 c035248:	b2fc 5def 82ee 748f 2f60 4317 636f 78a5     ...]...t`/.Coc.x
 c035258:	ab72 a1f0 7814 84c8 39ec 1a64 0208 8cc7     r....x...9d.....
 c035268:	1e28 2363 fffa 90be bde9 de82 6ceb a450     (.c#.........lP.
 c035278:	7915 b2c6 a3f7 bef9 532b e372 78f2 c671     .y......+Sr..xq.
 c035288:	619c ea26 3ece ca27 c207 21c0 b8c7 d186     .a&..>'....!....
 c035298:	eb1e cde0 7dd6 eada d178 ee6e 4f7f f57d     .....}..x.n..O}.
 c0352a8:	6fba 7217 67aa 06f0 98a6 a2c8 7dc5 0a63     .o.r.g.......}c.
 c0352b8:	0dae bef9 9804 113f 471b 131c 0b35 1b71     ......?..G..5.q.
 c0352c8:	7d84 2304 77f5 28db 2493 40c7 ab7b 32ca     .}.#.w.(.$.@{..2
 c0352d8:	bebc 15c9 be0a 3c9e 0d4c 9c10 67c4 431d     .......<L....g.C
 c0352e8:	42b6 cb3e d4be 4cc5 7e2a fc65 299c 597f     .B>....L*~e..).Y
 c0352f8:	faec 3ad6 6fab 5fcb 5817 4a47 198c 6c44     ...:.o._.XGJ..Dl

0c035308 <CSWTCH.8>:
 c035308:	1817 1d19 001e                              ......

0c03530e <CSWTCH.5>:
 c03530e:	004c 0168 00e0 01f8 0000                    L.h.......

0c035318 <sfid_func_table>:
 c035318:	e559 0c02 e5bd 0c02 e5f9 0c02 e63d 0c02     Y...........=...
 c035328:	e675 0c02 e6a1 0c02 e6cd 0c02 e6f9 0c02     u...............
 c035338:	e72f 0c02 e753 0c02 db91 0c02 dbf3 0c02     /...S...........
 c035348:	dc45 0c02 dcb1 0c02 dd1d 0c02 ddeb 0c02     E...............
 c035358:	dd83 0c02 e0e3 0c02 e139 0c02 e18b 0c02     ........9.......
 c035368:	e1f1 0c02 e24b 0c02 e29b 0c02 e777 0c02     ....K.......w...
 c035378:	e7e5 0c02 e853 0c02 e8a7 0c02 e90d 0c02     ....S...........
 c035388:	e969 0c02 d7c5 0c02 d841 0c02 d9fd 0c02     i.......A.......
 c035398:	da4b 0c02 da91 0c02 db29 0c02 de3b 0c02     K.......)...;...
 c0353a8:	de7d 0c02 deb9 0c02 df0d 0c02 df63 0c02     }...........c...
 c0353b8:	dffd 0c02 e06f 0c02 e08b 0c02               ....o.......

0c0353c4 <aIterate.7110>:
 c0353c4:	0101 0402                                   ....

0c0353c8 <memory_data_list>:
	...
 c0353d8:	0800 3003 0000 0000 0000 0000 0000 0000     ...0............
 c0353e8:	0800 3003 1000 3003 9740 0c01 9740 0c01     ...0...0@...@...
 c0353f8:	9740 0c01 9740 0c01 1020 3003 1020 3003     @...@... ..0 ..0
 c035408:	1020 3003 1040 3003 1080 3003 1a80 3003      ..0@..0...0...0
 c035418:	9740 0c01 9740 0c01 9740 0c01 9740 0c01     @...@...@...@...
 c035428:	1a80 3003 1a80 3003 1a80 3003 1aa0 3003     ...0...0...0...0
 c035438:	1b00 3003 2000 3003 9740 0c01 9740 0c01     ...0. .0@...@...
 c035448:	9740 0c01 9740 0c01 2000 3003 2000 3003     @...@.... .0. .0
 c035458:	2000 3003 2020 3003 2080 3003 4080 3003     . .0  .0. .0.@.0
 c035468:	9740 0c01 9740 0c01 9740 0c01 9740 0c01     @...@...@...@...
 c035478:	4080 3003 4080 3003 4080 3003 40a0 3003     .@.0.@.0.@.0.@.0
 c035488:	4100 3003 4b00 3003                         .A.0.K.0

0c035490 <static_data_list>:
 c035490:	0000 0000 0005 0000 00ff 0000 8641 0c01     ............A...
 c0354a0:	0100 0000 0007 0000 007f 0000 2085 0c03     ............. ..
 c0354b0:	0101 0000 0007 0000 007f 0000 19e9 0c03     ................
 c0354c0:	0103 0000 0007 0000 007f 0000 e32d 0c02     ............-...
 c0354d0:	0105 0000 0007 0000 007f 0000 120d 0c03     ................

0c0354e0 <__FUNCTION__.11485>:
 c0354e0:	6674 5f6d 7073 5f6d 7263 6165 6574 635f     tfm_spm_create_c
 c0354f0:	6e6f 5f6e 6168 646e 656c                     onn_handle.

0c0354fb <__FUNCTION__.11498>:
 c0354fb:	6674 5f6d 7073 5f6d 7266 6565 635f 6e6f     tfm_spm_free_con
 c03550b:	5f6e 6168 646e 656c                          n_handle.

0c035514 <__FUNCTION__.11506>:
 c035514:	6674 5f6d 7073 5f6d 6573 5f74 6872 6e61     tfm_spm_set_rhan
 c035524:	6c64 0065                                   dle.

0c035528 <__FUNCTION__.11514>:
 c035528:	6674 5f6d 7073 5f6d 6567 5f74 6872 6e61     tfm_spm_get_rhan
 c035538:	6c64 0065                                   dle.

0c03553c <__FUNCTION__.11524>:
 c03553c:	6674 5f6d 7073 5f6d 6567 5f74 6573 7672     tfm_spm_get_serv
 c03554c:	6369 5f65 7962 735f 6769 616e 006c          ice_by_signal.

0c03555a <__FUNCTION__.11559>:
 c03555a:	6674 5f6d 7073 5f6d 6863 6365 5f6b 6c63     tfm_spm_check_cl
 c03556a:	6569 746e 765f 7265 6973 6e6f                ient_version.

0c035577 <__FUNCTION__.11574>:
 c035577:	6674 5f6d 7073 5f6d 6567 5f74 736d 5f67     tfm_spm_get_msg_
 c035587:	7562 6666 7265 665f 6f72 5f6d 6f63 6e6e     buffer_from_conn
 c035597:	685f 6e61 6c64 0065                         _handle.

0c03559f <__FUNCTION__.11589>:
 c03559f:	6674 5f6d 7073 5f6d 6966 6c6c 6d5f 6773     tfm_spm_fill_msg
	...

0c0355b0 <__FUNCTION__.11608>:
 c0355b0:	6674 5f6d 7073 5f6d 6573 646e 655f 6576     tfm_spm_send_eve
 c0355c0:	746e 0000                                   nt..

0c0355c4 <service_db>:
 c0355c4:	5714 0c03 0100 0000 0010 0000 0060 0000     .W..........`...
 c0355d4:	0001 0000 0001 0000 0001 0000 5720 0c03     ............ W..
 c0355e4:	0100 0000 0020 0000 0061 0000 0001 0000     .... ...a.......
 c0355f4:	0001 0000 0001 0000 572c 0c03 0100 0000     ........,W......
 c035604:	0040 0000 0062 0000 0001 0000 0001 0000     @...b...........
 c035614:	0001 0000 573d 0c03 0100 0000 0080 0000     ....=W..........
 c035624:	0063 0000 0001 0000 0001 0000 0001 0000     c...............
 c035634:	574c 0c03 0100 0000 0100 0000 0064 0000     LW..........d...
 c035644:	0001 0000 0001 0000 0001 0000 5760 0c03     ............`W..
 c035654:	0101 0000 0010 0000 0070 0000 0001 0000     ........p.......
 c035664:	0001 0000 0001 0000 576c 0c03 0101 0000     ........lW......
 c035674:	0020 0000 0071 0000 0001 0000 0001 0000      ...q...........
 c035684:	0001 0000 5778 0c03 0101 0000 0040 0000     ....xW......@...
 c035694:	0072 0000 0001 0000 0001 0000 0001 0000     r...............
 c0356a4:	5789 0c03 0101 0000 0080 0000 0073 0000     .W..........s...
 c0356b4:	0001 0000 0001 0000 0001 0000 5798 0c03     .............W..
 c0356c4:	0103 0000 0010 0000 0080 0000 0001 0000     ................
 c0356d4:	0001 0000 0001 0000 57a3 0c03 0105 0000     .........W......
 c0356e4:	0010 0000 0020 0000 0001 0000 0001 0000     .... ...........
 c0356f4:	0001 0000 57b8 0c03 0105 0000 0020 0000     .....W...... ...
 c035704:	0021 0000 0001 0000 0001 0000 0001 0000     !...............
 c035714:	4654 5f4d 5353 5f54 4553 0054 4654 5f4d     TFM_SST_SET.TFM_
 c035724:	5353 5f54 4547 0054 4654 5f4d 5353 5f54     SST_GET.TFM_SST_
 c035734:	4547 5f54 4e49 4f46 5400 4d46 535f 5453     GET_INFO.TFM_SST
 c035744:	525f 4d45 564f 0045 4654 5f4d 5353 5f54     _REMOVE.TFM_SST_
 c035754:	4547 5f54 5553 5050 524f 0054 4654 5f4d     GET_SUPPORT.TFM_
 c035764:	5449 5f53 4553 0054 4654 5f4d 5449 5f53     ITS_SET.TFM_ITS_
 c035774:	4547 0054 4654 5f4d 5449 5f53 4547 5f54     GET.TFM_ITS_GET_
 c035784:	4e49 4f46 5400 4d46 495f 5354 525f 4d45     INFO.TFM_ITS_REM
 c035794:	564f 0045 4654 5f4d 5243 5059 4f54 5400     OVE.TFM_CRYPTO.T
 c0357a4:	4d46 415f 5454 5345 5f54 4547 5f54 4f54     FM_ATTEST_GET_TO
 c0357b4:	454b 004e 4654 5f4d 5441 4554 5453 475f     KEN.TFM_ATTEST_G
 c0357c4:	5445 545f 4b4f 4e45 535f 5a49 0045 7341     ET_TOKEN_SIZE.As
 c0357d4:	6573 7472 253a 3a73 6425 5300 6769 616e     sert:%s:%d.Signa
 c0357e4:	7574 6572 0031 6f4f 7370 2e2e 202e 6553     ture1.Oops... Se
 c0357f4:	7563 6572 6620 7561 746c 2121 2021 6f59     cure fault!!! Yo
 c035804:	2775 6572 6e20 746f 6720 696f 676e 6120     u're not going a
 c035814:	796e 6877 7265 2165 5300 6365 7275 2065     nywhere!.Secure 
 c035824:	6d69 6761 2065 6e69 7469 6169 696c 697a     image initializi
 c035834:	676e 0021                                   ng!.

0c035838 <__FUNCTION__.6563>:
 c035838:	6674 5f6d 6f63 6572 6c5f 676f 705f 7475     tfm_core_log_put
 c035848:	0073 5b1b 3b31 3433 5b6d 6553 2063 6854     s..[1;34m[Sec Th
 c035858:	6572 6461 205d 1b00 305b 0d6d 000a          read] ..[0m...

0c035866 <__FUNCTION__.6451>:
 c035866:	6674 5f6d 6f63 6572 755f 6974 5f6c 656d     tfm_core_util_me
 c035876:	636d 7970                                    mcpy.

0c03587b <__FUNCTION__.10859>:
 c03587b:	6674 5f6d 736e 6d70 745f 7268 6165 5f64     tfm_nspm_thread_
 c03588b:	6e65 7274 0079 6e55 6e6b 776f 206e 5653     entry.Unknown SV
 c03589b:	2043 756e 626d 7265 7220 7165 6575 7473     C number request
 c0358ab:	6465 0021                                   ed!.

0c0358af <__FUNCTION__.11476>:
 c0358af:	6674 5f6d 7673 6163 6c6c 705f 6173 765f     tfm_svcall_psa_v
 c0358bf:	7265 6973 6e6f                               ersion.

0c0358c6 <__FUNCTION__.11487>:
 c0358c6:	6674 5f6d 7673 6163 6c6c 705f 6173 635f     tfm_svcall_psa_c
 c0358d6:	6e6f 656e 7463                               onnect.

0c0358dd <__FUNCTION__.11507>:
 c0358dd:	6674 5f6d 7673 6163 6c6c 705f 6173 635f     tfm_svcall_psa_c
 c0358ed:	6c61 006c                                   all.

0c0358f1 <__FUNCTION__.11522>:
 c0358f1:	6674 5f6d 7673 6163 6c6c 705f 6173 635f     tfm_svcall_psa_c
 c035901:	6f6c 6573                                    lose.

0c035906 <__FUNCTION__.11530>:
 c035906:	6674 5f6d 7673 6163 6c6c 705f 6173 775f     tfm_svcall_psa_w
 c035916:	6961 0074                                   ait.

0c03591a <__FUNCTION__.11541>:
 c03591a:	6674 5f6d 7673 6163 6c6c 705f 6173 675f     tfm_svcall_psa_g
 c03592a:	7465                                         et.

0c03592d <__FUNCTION__.11549>:
 c03592d:	6674 5f6d 7673 6163 6c6c 705f 6173 735f     tfm_svcall_psa_s
 c03593d:	7465 725f 6168 646e 656c                     et_rhandle.

0c035948 <__FUNCTION__.11562>:
 c035948:	6674 5f6d 7673 6163 6c6c 705f 6173 725f     tfm_svcall_psa_r
 c035958:	6165 0064                                   ead.

0c03595c <__FUNCTION__.11571>:
 c03595c:	6674 5f6d 7673 6163 6c6c 705f 6173 735f     tfm_svcall_psa_s
 c03596c:	696b 0070                                   kip.

0c035970 <__FUNCTION__.11583>:
 c035970:	6674 5f6d 7673 6163 6c6c 705f 6173 775f     tfm_svcall_psa_w
 c035980:	6972 6574                                    rite.

0c035985 <__FUNCTION__.11589>:
 c035985:	7075 6164 6574 635f 6c61 656c 5f72 756f     update_caller_ou
 c035995:	7674 6365 6c5f 6e65                          tvec_len.

0c03599e <__FUNCTION__.11603>:
 c03599e:	6674 5f6d 7673 6163 6c6c 705f 6173 725f     tfm_svcall_psa_r
 c0359ae:	7065 796c                                    eply.

0c0359b3 <__FUNCTION__.11640>:
 c0359b3:	6674 5f6d 7673 6163 6c6c 705f 6173 655f     tfm_svcall_psa_e
 c0359c3:	696f 0000                                    oi...

0c0359c8 <tfm_core_irq_signals>:
	...

0c0359d8 <tfm_core_irq_signals_count>:
 c0359d8:	0000 0000                                   ....

0c0359dc <__FUNCTION__.10995>:
 c0359dc:	6674 5f6d 6874 6472 735f 7465 735f 6174     tfm_thrd_set_sta
 c0359ec:	7574 0073                                   tus.

0c0359f0 <__FUNCTION__.11003>:
 c0359f0:	6674 5f6d 6874 6472 735f 6174 7472 735f     tfm_thrd_start_s
 c035a00:	6863 6465 6c75 7265                          cheduler.

0c035a09 <__FUNCTION__.11018>:
 c035a09:	6674 5f6d 6874 6472 635f 6e6f 6574 7478     tfm_thrd_context
 c035a19:	735f 6977 6374 0068                         _switch.

0c035a21 <__FUNCTION__.10369>:
 c035a21:	6674 5f6d 7665 6e65 5f74 6177 7469           tfm_event_wait.

0c035a30 <__FUNCTION__.10375>:
 c035a30:	6674 5f6d 7665 6e65 5f74 6177 656b 0000     tfm_event_wake..

0c035a40 <__EH_FRAME_BEGIN__>:
 c035a40:	0000 0000                                   ....

Disassembly of section .gnu.sgstubs:

0c035c80 <tfm_psa_framework_version_veneer>:
 c035c80:	e97f e97f 	sg
 c035c84:	f7e2 bcec 	b.w	c018660 <__acle_se_tfm_psa_framework_version_veneer>

0c035c88 <TZ_InitContextSystem_S>:
 c035c88:	e97f e97f 	sg
 c035c8c:	f7fb bf01 	b.w	c031a92 <__acle_se_TZ_InitContextSystem_S>

0c035c90 <TZ_LoadContext_S>:
 c035c90:	e97f e97f 	sg
 c035c94:	f7fb bf99 	b.w	c031bca <__acle_se_TZ_LoadContext_S>

0c035c98 <tfm_psa_version_veneer>:
 c035c98:	e97f e97f 	sg
 c035c9c:	f7e2 bd3a 	b.w	c018714 <__acle_se_tfm_psa_version_veneer>

0c035ca0 <tfm_psa_close_veneer>:
 c035ca0:	e97f e97f 	sg
 c035ca4:	f7e2 be44 	b.w	c018930 <__acle_se_tfm_psa_close_veneer>

0c035ca8 <TZ_FreeModuleContext_S>:
 c035ca8:	e97f e97f 	sg
 c035cac:	f7fb bf59 	b.w	c031b62 <__acle_se_TZ_FreeModuleContext_S>

0c035cb0 <tfm_psa_connect_veneer>:
 c035cb0:	e97f e97f 	sg
 c035cb4:	f7e2 bd88 	b.w	c0187c8 <__acle_se_tfm_psa_connect_veneer>

0c035cb8 <TZ_AllocModuleContext_S>:
 c035cb8:	e97f e97f 	sg
 c035cbc:	f7fb bf1d 	b.w	c031afa <__acle_se_TZ_AllocModuleContext_S>

0c035cc0 <TZ_StoreContext_S>:
 c035cc0:	e97f e97f 	sg
 c035cc4:	f7fb bfb5 	b.w	c031c32 <__acle_se_TZ_StoreContext_S>

0c035cc8 <tfm_psa_call_veneer>:
 c035cc8:	e97f e97f 	sg
 c035ccc:	f7e2 bdd6 	b.w	c01887c <__acle_se_tfm_psa_call_veneer>
	...
